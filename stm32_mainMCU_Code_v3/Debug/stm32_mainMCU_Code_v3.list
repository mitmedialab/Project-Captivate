
stm32_mainMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f6c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f8  080170b0  080170b0  000270b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080182a8  080182a8  000282a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080182b0  080182b0  000282b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080182b4  080182b4  000282b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000015c  20000004  080182b8  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000160  08018414  00030160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001fc  080184ad  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002846c  20000210  080184be  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2002867c  080184be  0003867c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000024  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000000a0  20030024  20030024  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000a97  200300c4  200300c4  00040000  2**2
                  ALLOC
 15 .debug_info   00064acf  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000b0b3  00000000  00000000  00094d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003b30  00000000  00000000  0009fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003638  00000000  00000000  000a38f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000268e0  00000000  00000000  000a6f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00018689  00000000  00000000  000cd808  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f0  00000000  00000000  000e5e91  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f3c0  00000000  00000000  000e5f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000131b  00000000  00000000  000f5344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	08017094 	.word	0x08017094

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	08017094 	.word	0x08017094

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xc8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000ec0:	f005 fe90 	bl	8006be4 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f003 fa45 	bl	8004358 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC1_Init+0xcc>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xc4>)
 8000eec:	f006 f8b0 	bl	8007050 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f003 fa2f 	bl	8004358 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200276e0 	.word	0x200276e0
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	14f00020 	.word	0x14f00020

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_ADC_MspInit+0xa4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d13c      	bne.n	8000fac <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ff69 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff66 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	2303      	movs	r3, #3
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f007 fcc5 	bl	80088e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_MspInit+0xac>)
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f86:	2220      	movs	r2, #32
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000f92:	f007 f977 	bl	8008284 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000f9c:	f003 f9dc 	bl	8004358 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	20027744 	.word	0x20027744
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fec:	f000 f80a 	bl	8001004 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ff0:	4903      	ldr	r1, [pc, #12]	; (8001000 <APPE_Init+0x18>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f964 	bl	80032c0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f80e 	bl	8001018 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20028440 	.word	0x20028440

08001004 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800100c:	f7ff ffd8 	bl	8000fc0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001010:	f014 fc54 	bl	80158bc <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800101e:	f012 ff55 	bl	8013ecc <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001022:	2000      	movs	r0, #0
 8001024:	f00d fb60 	bl	800e6e8 <osMutexNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <appe_Tl_Init+0x70>)
 800102c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00d fca0 	bl	800e978 <osSemaphoreNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <appe_Tl_Init+0x74>)
 800103c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <appe_Tl_Init+0x78>)
 8001040:	2100      	movs	r1, #0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <appe_Tl_Init+0x7c>)
 8001044:	f00d f80c 	bl	800e060 <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <appe_Tl_Init+0x80>)
 800104c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <appe_Tl_Init+0x84>)
 8001050:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <appe_Tl_Init+0x88>)
 8001054:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <appe_Tl_Init+0x8c>)
 800105c:	f012 fc62 	bl	8013924 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <appe_Tl_Init+0x90>)
 8001066:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <appe_Tl_Init+0x94>)
 800106a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800106c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001070:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f013 f866 	bl	8014148 <TL_MM_Init>

  TL_Enable();
 800107c:	f012 ff20 	bl	8013ec0 <TL_Enable>

  return;
 8001080:	bf00      	nop
}
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200277a4 	.word	0x200277a4
 800108c:	200277bc 	.word	0x200277bc
 8001090:	0801755c 	.word	0x0801755c
 8001094:	08001199 	.word	0x08001199
 8001098:	200277a8 	.word	0x200277a8
 800109c:	20030600 	.word	0x20030600
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	2003070c 	.word	0x2003070c
 80010ac:	200300c4 	.word	0x200300c4

080010b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <APPE_SysStatusNot+0x16>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d008      	beq.n	80010d6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 80010c4:	e00d      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00d fba4 	bl	800e81c <osMutexAcquire>
      break;
 80010d4:	e005      	b.n	80010e2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <APPE_SysStatusNot+0x3c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00d fbfc 	bl	800e8d8 <osMutexRelease>
      break;
 80010e0:	bf00      	nop
  }
  return;
 80010e2:	bf00      	nop
}
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200277a4 	.word	0x200277a4

080010f0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	330b      	adds	r3, #11
 80010fe:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800110a:	d004      	beq.n	8001116 <APPE_SysUserEvtRx+0x26>
 800110c:	f249 2201 	movw	r2, #37377	; 0x9201
 8001110:	4293      	cmp	r3, r2
 8001112:	d003      	beq.n	800111c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001114:	e008      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001116:	f000 f833 	bl	8001180 <APPE_SysEvtReadyProcessing>
         break;
 800111a:	e005      	b.n	8001128 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f805 	bl	8001130 <APPE_SysEvtError>
         break;
 8001126:	bf00      	nop
  }
  return;
 8001128:	bf00      	nop
}
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7d      	cmp	r3, #125	; 0x7d
 800113e:	d002      	beq.n	8001146 <APPE_SysEvtError+0x16>
 8001140:	2b7e      	cmp	r3, #126	; 0x7e
 8001142:	d006      	beq.n	8001152 <APPE_SysEvtError+0x22>
 8001144:	e00b      	b.n	800115e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <APPE_SysEvtError+0x44>)
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f004 fbfc 	bl	8005948 <logApplication>
       break;
 8001150:	e00c      	b.n	800116c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <APPE_SysEvtError+0x48>)
 8001154:	2101      	movs	r1, #1
 8001156:	2000      	movs	r0, #0
 8001158:	f004 fbf6 	bl	8005948 <logApplication>
       break;
 800115c:	e006      	b.n	800116c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <APPE_SysEvtError+0x4c>)
 8001162:	2101      	movs	r1, #1
 8001164:	2000      	movs	r0, #0
 8001166:	f004 fbef 	bl	8005948 <logApplication>
       break;
 800116a:	bf00      	nop
  }
  return;
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	080170c8 	.word	0x080170c8
 8001178:	080170ec 	.word	0x080170ec
 800117c:	0801710c 	.word	0x0801710c

08001180 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001184:	f013 f850 	bl	8014228 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001188:	f013 f87a 	bl	8014280 <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800118c:	2100      	movs	r1, #0
 800118e:	2001      	movs	r0, #1
 8001190:	f014 fba6 	bl	80158e0 <UTIL_LPM_SetOffMode>
  return;
 8001194:	bf00      	nop
}
 8001196:	bd80      	pop	{r7, pc}

08001198 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f00d f8b8 	bl	800e31c <osThreadFlagsWait>
     shci_user_evt_proc();
 80011ac:	f012 fbd6 	bl	801395c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80011b0:	e7f6      	b.n	80011a0 <ShciUserEvtProcess+0x8>
	...

080011b4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <shci_notify_asynch_evt+0x1c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00c fff8 	bl	800e1b8 <osThreadFlagsSet>
  return;
 80011c8:	bf00      	nop
}
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200277a8 	.word	0x200277a8

080011d4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <shci_cmd_resp_release+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00d fccd 	bl	800eb80 <osSemaphoreRelease>
  return;
 80011e6:	bf00      	nop
}
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200277bc 	.word	0x200277bc

080011f4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <shci_cmd_resp_wait+0x20>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f00d fc55 	bl	800eab4 <osSemaphoreAcquire>
  return;
 800120a:	bf00      	nop
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200277bc 	.word	0x200277bc

08001218 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f012 ffcd 	bl	80141c0 <TL_MM_EvtDone>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
volatile unsigned long ulHighFrequencyTimerTicks;
__weak void configureTimerForRunTimeStats(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
return HAL_GetTick();
 8001240:	f005 fa96 	bl	8006770 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}

0800124a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
volatile uint8_t test=0;
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]

   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	test += 1;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <vApplicationStackOverflowHook+0x24>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <vApplicationStackOverflowHook+0x24>)
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	2000022c 	.word	0x2000022c

08001280 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	test += 1;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <vApplicationMallocFailedHook+0x1c>)
 8001290:	701a      	strb	r2, [r3, #0]

}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	2000022c 	.word	0x2000022c

080012a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osSemaphoreNew(1, 1, &messageI2C_Lock_attributes);
 80012a4:	4a68      	ldr	r2, [pc, #416]	; (8001448 <MX_FREERTOS_Init+0x1a8>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	2001      	movs	r0, #1
 80012aa:	f00d fb65 	bl	800e978 <osSemaphoreNew>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <MX_FREERTOS_Init+0x1ac>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* creation of locNotify */
  locNotifyHandle = osSemaphoreNew(1, 1, &locNotify_attributes);
 80012b4:	4a66      	ldr	r2, [pc, #408]	; (8001450 <MX_FREERTOS_Init+0x1b0>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	2001      	movs	r0, #1
 80012ba:	f00d fb5d 	bl	800e978 <osSemaphoreNew>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b64      	ldr	r3, [pc, #400]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 80012c2:	601a      	str	r2, [r3, #0]

  /* creation of locComplete */
  locCompleteHandle = osSemaphoreNew(1, 1, &locComplete_attributes);
 80012c4:	4a64      	ldr	r2, [pc, #400]	; (8001458 <MX_FREERTOS_Init+0x1b8>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	2001      	movs	r0, #1
 80012ca:	f00d fb55 	bl	800e978 <osSemaphoreNew>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b62      	ldr	r3, [pc, #392]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 80012d2:	601a      	str	r2, [r3, #0]

  /* creation of lightingLabDemoEnd */
  lightingLabDemoEndHandle = osSemaphoreNew(1, 1, &lightingLabDemoEnd_attributes);
 80012d4:	4a62      	ldr	r2, [pc, #392]	; (8001460 <MX_FREERTOS_Init+0x1c0>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	2001      	movs	r0, #1
 80012da:	f00d fb4d 	bl	800e978 <osSemaphoreNew>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b60      	ldr	r3, [pc, #384]	; (8001464 <MX_FREERTOS_Init+0x1c4>)
 80012e2:	601a      	str	r2, [r3, #0]
//  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of viveTimer */
  viveTimerHandle = osTimerNew(get3D_location, osTimerPeriodic, (void*) &viveStateVar, &viveTimer_attributes);
 80012e4:	4b60      	ldr	r3, [pc, #384]	; (8001468 <MX_FREERTOS_Init+0x1c8>)
 80012e6:	4a61      	ldr	r2, [pc, #388]	; (800146c <MX_FREERTOS_Init+0x1cc>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	4861      	ldr	r0, [pc, #388]	; (8001470 <MX_FREERTOS_Init+0x1d0>)
 80012ec:	f00d f8ee 	bl	800e4cc <osTimerNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b60      	ldr	r3, [pc, #384]	; (8001474 <MX_FREERTOS_Init+0x1d4>)
 80012f4:	601a      	str	r2, [r3, #0]

  /* creation of watchDogTimer */
  watchDogTimerHandle = osTimerNew(watchDogReset, osTimerPeriodic, NULL, &watchDogTimer_attributes);
 80012f6:	4b60      	ldr	r3, [pc, #384]	; (8001478 <MX_FREERTOS_Init+0x1d8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	485f      	ldr	r0, [pc, #380]	; (800147c <MX_FREERTOS_Init+0x1dc>)
 80012fe:	f00d f8e5 	bl	800e4cc <osTimerNew>
 8001302:	4602      	mov	r2, r0
 8001304:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 8001306:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
//  /* start timers, add new ones, ... */
  osTimerStart(watchDogTimerHandle, WATCHDOG_PERIOD);
 8001308:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <MX_FREERTOS_Init+0x1e0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001310:	4618      	mov	r0, r3
 8001312:	f00d f95f 	bl	800e5d4 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of blinkMsgQueue */
  blinkMsgQueueHandle = osMessageQueueNew (10, 108, &blinkMsgQueue_attributes);
 8001316:	4a5b      	ldr	r2, [pc, #364]	; (8001484 <MX_FREERTOS_Init+0x1e4>)
 8001318:	216c      	movs	r1, #108	; 0x6c
 800131a:	200a      	movs	r0, #10
 800131c:	f00d fc88 	bl	800ec30 <osMessageQueueNew>
 8001320:	4602      	mov	r2, r0
 8001322:	4b59      	ldr	r3, [pc, #356]	; (8001488 <MX_FREERTOS_Init+0x1e8>)
 8001324:	601a      	str	r2, [r3, #0]

  /* creation of lightsSimpleQueue */
  lightsSimpleQueueHandle = osMessageQueueNew (3, 4, &lightsSimpleQueue_attributes);
 8001326:	4a59      	ldr	r2, [pc, #356]	; (800148c <MX_FREERTOS_Init+0x1ec>)
 8001328:	2104      	movs	r1, #4
 800132a:	2003      	movs	r0, #3
 800132c:	f00d fc80 	bl	800ec30 <osMessageQueueNew>
 8001330:	4602      	mov	r2, r0
 8001332:	4b57      	ldr	r3, [pc, #348]	; (8001490 <MX_FREERTOS_Init+0x1f0>)
 8001334:	601a      	str	r2, [r3, #0]

  /* creation of togLoggingQueue */
  togLoggingQueueHandle = osMessageQueueNew (4, 6, &togLoggingQueue_attributes);
 8001336:	4a57      	ldr	r2, [pc, #348]	; (8001494 <MX_FREERTOS_Init+0x1f4>)
 8001338:	2106      	movs	r1, #6
 800133a:	2004      	movs	r0, #4
 800133c:	f00d fc78 	bl	800ec30 <osMessageQueueNew>
 8001340:	4602      	mov	r2, r0
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <MX_FREERTOS_Init+0x1f8>)
 8001344:	601a      	str	r2, [r3, #0]

  /* creation of interProcessorMsgQueue */
  interProcessorMsgQueueHandle = osMessageQueueNew (10, 24, &interProcessorMsgQueue_attributes);
 8001346:	4a55      	ldr	r2, [pc, #340]	; (800149c <MX_FREERTOS_Init+0x1fc>)
 8001348:	2118      	movs	r1, #24
 800134a:	200a      	movs	r0, #10
 800134c:	f00d fc70 	bl	800ec30 <osMessageQueueNew>
 8001350:	4602      	mov	r2, r0
 8001352:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <MX_FREERTOS_Init+0x200>)
 8001354:	601a      	str	r2, [r3, #0]

  /* creation of inertialSensingQueue */
  inertialSensingQueueHandle = osMessageQueueNew (10, 40, &inertialSensingQueue_attributes);
 8001356:	4a53      	ldr	r2, [pc, #332]	; (80014a4 <MX_FREERTOS_Init+0x204>)
 8001358:	2128      	movs	r1, #40	; 0x28
 800135a:	200a      	movs	r0, #10
 800135c:	f00d fc68 	bl	800ec30 <osMessageQueueNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <MX_FREERTOS_Init+0x208>)
 8001364:	601a      	str	r2, [r3, #0]

  /* creation of activitySampleQueue */
  activitySampleQueueHandle = osMessageQueueNew (10, 16, &activitySampleQueue_attributes);
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <MX_FREERTOS_Init+0x20c>)
 8001368:	2110      	movs	r1, #16
 800136a:	200a      	movs	r0, #10
 800136c:	f00d fc60 	bl	800ec30 <osMessageQueueNew>
 8001370:	4602      	mov	r2, r0
 8001372:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <MX_FREERTOS_Init+0x210>)
 8001374:	601a      	str	r2, [r3, #0]

  /* creation of rotationSampleQueue */
  rotationSampleQueueHandle = osMessageQueueNew (3, 24, &rotationSampleQueue_attributes);
 8001376:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <MX_FREERTOS_Init+0x214>)
 8001378:	2118      	movs	r1, #24
 800137a:	2003      	movs	r0, #3
 800137c:	f00d fc58 	bl	800ec30 <osMessageQueueNew>
 8001380:	4602      	mov	r2, r0
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <MX_FREERTOS_Init+0x218>)
 8001384:	601a      	str	r2, [r3, #0]

  /* creation of pulseQueue */
  pulseQueueHandle = osMessageQueueNew (10, 6, &pulseQueue_attributes);
 8001386:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <MX_FREERTOS_Init+0x21c>)
 8001388:	2106      	movs	r1, #6
 800138a:	200a      	movs	r0, #10
 800138c:	f00d fc50 	bl	800ec30 <osMessageQueueNew>
 8001390:	4602      	mov	r2, r0
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <MX_FREERTOS_Init+0x220>)
 8001394:	601a      	str	r2, [r3, #0]

  /* creation of viveQueue */
  viveQueueHandle = osMessageQueueNew (10, 24, &viveQueue_attributes);
 8001396:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <MX_FREERTOS_Init+0x224>)
 8001398:	2118      	movs	r1, #24
 800139a:	200a      	movs	r0, #10
 800139c:	f00d fc48 	bl	800ec30 <osMessageQueueNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <MX_FREERTOS_Init+0x228>)
 80013a4:	601a      	str	r2, [r3, #0]

  /* creation of statusQueue */
  statusQueueHandle = osMessageQueueNew (1, sizeof(uint32_t), &statusQueue_attributes);
 80013a6:	4a49      	ldr	r2, [pc, #292]	; (80014cc <MX_FREERTOS_Init+0x22c>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	2001      	movs	r0, #1
 80013ac:	f00d fc40 	bl	800ec30 <osMessageQueueNew>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <MX_FREERTOS_Init+0x230>)
 80013b4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 80013b6:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <MX_FREERTOS_Init+0x234>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4847      	ldr	r0, [pc, #284]	; (80014d8 <MX_FREERTOS_Init+0x238>)
 80013bc:	f00c fe50 	bl	800e060 <osThreadNew>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b46      	ldr	r3, [pc, #280]	; (80014dc <MX_FREERTOS_Init+0x23c>)
 80013c4:	601a      	str	r2, [r3, #0]

  /* creation of frontLightsTask */
  frontLightsTaskHandle = osThreadNew(ThreadFrontLightsTask, NULL, &frontLightsTask_attributes);
 80013c6:	4a46      	ldr	r2, [pc, #280]	; (80014e0 <MX_FREERTOS_Init+0x240>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4846      	ldr	r0, [pc, #280]	; (80014e4 <MX_FREERTOS_Init+0x244>)
 80013cc:	f00c fe48 	bl	800e060 <osThreadNew>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_FREERTOS_Init+0x248>)
 80013d4:	601a      	str	r2, [r3, #0]

  /* creation of masterTask */
  masterTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterTask_attributes);
 80013d6:	4a45      	ldr	r2, [pc, #276]	; (80014ec <MX_FREERTOS_Init+0x24c>)
 80013d8:	2100      	movs	r1, #0
 80013da:	4845      	ldr	r0, [pc, #276]	; (80014f0 <MX_FREERTOS_Init+0x250>)
 80013dc:	f00c fe40 	bl	800e060 <osThreadNew>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <MX_FREERTOS_Init+0x254>)
 80013e4:	601a      	str	r2, [r3, #0]

  /* creation of inertialTask */
  inertialTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialTask_attributes);
 80013e6:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <MX_FREERTOS_Init+0x258>)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4844      	ldr	r0, [pc, #272]	; (80014fc <MX_FREERTOS_Init+0x25c>)
 80013ec:	f00c fe38 	bl	800e060 <osThreadNew>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <MX_FREERTOS_Init+0x260>)
 80013f4:	601a      	str	r2, [r3, #0]

  /* creation of pulseTask */
  pulseTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseTask_attributes);
 80013f6:	4a43      	ldr	r2, [pc, #268]	; (8001504 <MX_FREERTOS_Init+0x264>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	4843      	ldr	r0, [pc, #268]	; (8001508 <MX_FREERTOS_Init+0x268>)
 80013fc:	f00c fe30 	bl	800e060 <osThreadNew>
 8001400:	4602      	mov	r2, r0
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <MX_FREERTOS_Init+0x26c>)
 8001404:	601a      	str	r2, [r3, #0]

  /* creation of interProcTask */
  interProcTaskHandle = osThreadNew(InterProcessorTask, NULL, &interProcTask_attributes);
 8001406:	4a42      	ldr	r2, [pc, #264]	; (8001510 <MX_FREERTOS_Init+0x270>)
 8001408:	2100      	movs	r1, #0
 800140a:	4842      	ldr	r0, [pc, #264]	; (8001514 <MX_FREERTOS_Init+0x274>)
 800140c:	f00c fe28 	bl	800e060 <osThreadNew>
 8001410:	4602      	mov	r2, r0
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <MX_FREERTOS_Init+0x278>)
 8001414:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8001416:	4a41      	ldr	r2, [pc, #260]	; (800151c <MX_FREERTOS_Init+0x27c>)
 8001418:	2100      	movs	r1, #0
 800141a:	4841      	ldr	r0, [pc, #260]	; (8001520 <MX_FREERTOS_Init+0x280>)
 800141c:	f00c fe20 	bl	800e060 <osThreadNew>
 8001420:	4602      	mov	r2, r0
 8001422:	4b40      	ldr	r3, [pc, #256]	; (8001524 <MX_FREERTOS_Init+0x284>)
 8001424:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // ensure binary notification semaphores are initially empty
  osSemaphoreAcquire(locNotifyHandle, 0);
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_FREERTOS_Init+0x1b4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f00d fb41 	bl	800eab4 <osSemaphoreAcquire>
  osSemaphoreAcquire(locCompleteHandle, 0);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_FREERTOS_Init+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00d fb3b 	bl	800eab4 <osSemaphoreAcquire>

   /* add threads, ... */


	/* Init code for STM32_WPAN */
	APPE_Init();
 800143e:	f7ff fdd3 	bl	8000fe8 <APPE_Init>


  /* USER CODE END RTOS_THREADS */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0801778c 	.word	0x0801778c
 800144c:	200278ac 	.word	0x200278ac
 8001450:	0801779c 	.word	0x0801779c
 8001454:	20027cf4 	.word	0x20027cf4
 8001458:	080177ac 	.word	0x080177ac
 800145c:	20027cec 	.word	0x20027cec
 8001460:	080177bc 	.word	0x080177bc
 8001464:	200278b8 	.word	0x200278b8
 8001468:	0801776c 	.word	0x0801776c
 800146c:	20000af4 	.word	0x20000af4
 8001470:	08003b4d 	.word	0x08003b4d
 8001474:	2002789c 	.word	0x2002789c
 8001478:	0801777c 	.word	0x0801777c
 800147c:	08001539 	.word	0x08001539
 8001480:	20027d04 	.word	0x20027d04
 8001484:	0801767c 	.word	0x0801767c
 8001488:	20027d00 	.word	0x20027d00
 800148c:	08017694 	.word	0x08017694
 8001490:	200278b4 	.word	0x200278b4
 8001494:	080176ac 	.word	0x080176ac
 8001498:	20027ce4 	.word	0x20027ce4
 800149c:	080176c4 	.word	0x080176c4
 80014a0:	200278bc 	.word	0x200278bc
 80014a4:	080176dc 	.word	0x080176dc
 80014a8:	200278b0 	.word	0x200278b0
 80014ac:	080176f4 	.word	0x080176f4
 80014b0:	200278a4 	.word	0x200278a4
 80014b4:	0801770c 	.word	0x0801770c
 80014b8:	200278c4 	.word	0x200278c4
 80014bc:	08017724 	.word	0x08017724
 80014c0:	200277ac 	.word	0x200277ac
 80014c4:	0801773c 	.word	0x0801773c
 80014c8:	200277b0 	.word	0x200277b0
 80014cc:	08017754 	.word	0x08017754
 80014d0:	200278c0 	.word	0x200278c0
 80014d4:	08017580 	.word	0x08017580
 80014d8:	08001529 	.word	0x08001529
 80014dc:	20027894 	.word	0x20027894
 80014e0:	080175a4 	.word	0x080175a4
 80014e4:	0800408d 	.word	0x0800408d
 80014e8:	200278a0 	.word	0x200278a0
 80014ec:	080175c8 	.word	0x080175c8
 80014f0:	08004369 	.word	0x08004369
 80014f4:	20027ce8 	.word	0x20027ce8
 80014f8:	080175ec 	.word	0x080175ec
 80014fc:	08003945 	.word	0x08003945
 8001500:	20027d08 	.word	0x20027d08
 8001504:	08017610 	.word	0x08017610
 8001508:	08003abd 	.word	0x08003abd
 800150c:	20027cf8 	.word	0x20027cf8
 8001510:	08017634 	.word	0x08017634
 8001514:	08003cc5 	.word	0x08003cc5
 8001518:	20027cf0 	.word	0x20027cf0
 800151c:	08017658 	.word	0x08017658
 8001520:	0800154d 	.word	0x0800154d
 8001524:	20027898 	.word	0x20027898

08001528 <DefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
__weak void DefaultTask(void *argument)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f00c ff87 	bl	800e444 <osDelay>
 8001536:	e7fb      	b.n	8001530 <DefaultTask+0x8>

08001538 <watchDogReset>:
  /* USER CODE END DefaultTask */
}

/* watchDogReset function */
void watchDogReset(void *argument)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN watchDogReset */
//	 HAL_IWDG_Refresh(&hiwdg);
  /* USER CODE END watchDogReset */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

	uint32_t evt;

	while (1) {
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	2100      	movs	r1, #0
 800155a:	2001      	movs	r0, #1
 800155c:	f00c fede 	bl	800e31c <osThreadFlagsWait>
 8001560:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f3      	beq.n	8001554 <BlinkTask+0x8>

			// tell other threads that blink has been activated
			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <BlinkTask+0x1ac>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2200      	movs	r2, #0
 8001576:	4961      	ldr	r1, [pc, #388]	; (80016fc <BlinkTask+0x1b0>)
 8001578:	f00d fc54 	bl	800ee24 <osMessageQueueGet>
			statusMessage.blinkEnabled = 1;
 800157c:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <BlinkTask+0x1b0>)
 800157e:	2201      	movs	r2, #1
 8001580:	709a      	strb	r2, [r3, #2]
			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <BlinkTask+0x1ac>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	2200      	movs	r2, #0
 800158a:	495c      	ldr	r1, [pc, #368]	; (80016fc <BlinkTask+0x1b0>)
 800158c:	f00d fbd6 	bl	800ed3c <osMessageQueuePut>

			// start timer and PWM channel for blink LED
			HAL_TIM_Base_Start(&htim2);
 8001590:	485b      	ldr	r0, [pc, #364]	; (8001700 <BlinkTask+0x1b4>)
 8001592:	f00b fc61 	bl	800ce58 <HAL_TIM_Base_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001596:	2104      	movs	r1, #4
 8001598:	4859      	ldr	r0, [pc, #356]	; (8001700 <BlinkTask+0x1b4>)
 800159a:	f00b fd13 	bl	800cfc4 <HAL_TIM_PWM_Start>

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer, sizeof(blink_buffer));
 800159e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015a2:	4958      	ldr	r1, [pc, #352]	; (8001704 <BlinkTask+0x1b8>)
 80015a4:	4858      	ldr	r0, [pc, #352]	; (8001708 <BlinkTask+0x1bc>)
 80015a6:	f005 fc63 	bl	8006e70 <HAL_ADC_Start_DMA>
			// message passing until told to stop
			//      note: DMA triggers callback where buffers are switched and the full one
			//      is passed by reference via queue to masterThread for packetization
			while (1) {
				// wait for data ready flag and/or stop task flasg
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny, osWaitForever);
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295
 80015ae:	2100      	movs	r1, #0
 80015b0:	2006      	movs	r0, #6
 80015b2:	f00c feb3 	bl	800e31c <osThreadFlagsWait>
 80015b6:	60f8      	str	r0, [r7, #12]

				if ((evt & 0x00000004U) == 0x00000004U) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d064      	beq.n	800168c <BlinkTask+0x140>

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 80015c2:	4b52      	ldr	r3, [pc, #328]	; (800170c <BlinkTask+0x1c0>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d108      	bne.n	80015e4 <BlinkTask+0x98>
						previousTick_ms = HAL_GetTick();
 80015d2:	f005 f8cd 	bl	8006770 <HAL_GetTick>
 80015d6:	ee07 0a90 	vmov	s15, r0
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <BlinkTask+0x1c0>)
 80015e0:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms) / ((float) BLINK_ITERATOR_COUNT);
 80015e4:	f005 f8c4 	bl	8006770 <HAL_GetTick>
 80015e8:	ee07 0a90 	vmov	s15, r0
 80015ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <BlinkTask+0x1c0>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <BlinkTask+0x1c4>)
 8001604:	edc3 7a00 	vstr	s15, [r3]

					// because of COAP packet size restrictions, separate blink packet into chunks of size BLINK_PACKET_SIZE
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <BlinkTask+0x1c8>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e039      	b.n	8001684 <BlinkTask+0x138>

						// grab packet of size BLINK_PACKET_SIZE
						memcpy(blinkMsgBuffer_1.data, &(blink_buffer[iterator * BLINK_PACKET_SIZE]), BLINK_PACKET_SIZE);
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <BlinkTask+0x1c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2264      	movs	r2, #100	; 0x64
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <BlinkTask+0x1b8>)
 800161c:	4413      	add	r3, r2
 800161e:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <BlinkTask+0x1cc>)
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	2364      	movs	r3, #100	; 0x64
 8001626:	461a      	mov	r2, r3
 8001628:	f014 fc78 	bl	8015f1c <memcpy>
						blinkMsgBuffer_1.tick_ms = previousTick_ms + tick_ms_diff;
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <BlinkTask+0x1c0>)
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <BlinkTask+0x1c4>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001640:	ee17 2a90 	vmov	r2, s15
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <BlinkTask+0x1cc>)
 8001646:	665a      	str	r2, [r3, #100]	; 0x64
						blinkMsgBuffer_1.payload_ID = payload_ID;
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <BlinkTask+0x1d0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a32      	ldr	r2, [pc, #200]	; (8001718 <BlinkTask+0x1cc>)
 800164e:	6693      	str	r3, [r2, #104]	; 0x68

						// add tick cnt
						previousTick_ms = blinkMsgBuffer_1.tick_ms;
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <BlinkTask+0x1cc>)
 8001652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <BlinkTask+0x1c0>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
						payload_ID++;
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <BlinkTask+0x1d0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	4a2c      	ldr	r2, [pc, #176]	; (800171c <BlinkTask+0x1d0>)
 800166a:	6013      	str	r3, [r2, #0]

						// put into queue
						osMessageQueuePut(blinkMsgQueueHandle, (void*) &blinkMsgBuffer_1, 0U, 0);
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <BlinkTask+0x1d4>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	2200      	movs	r2, #0
 8001674:	4928      	ldr	r1, [pc, #160]	; (8001718 <BlinkTask+0x1cc>)
 8001676:	f00d fb61 	bl	800ed3c <osMessageQueuePut>
					for (iterator = 0; iterator < BLINK_ITERATOR_COUNT; iterator++) {
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <BlinkTask+0x1c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <BlinkTask+0x1c8>)
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <BlinkTask+0x1c8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d9c1      	bls.n	8001610 <BlinkTask+0xc4>
					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d089      	beq.n	80015aa <BlinkTask+0x5e>

					HAL_ADC_Stop_DMA(&hadc1);
 8001696:	481c      	ldr	r0, [pc, #112]	; (8001708 <BlinkTask+0x1bc>)
 8001698:	f005 fc6e 	bl	8006f78 <HAL_ADC_Stop_DMA>
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800169c:	2104      	movs	r1, #4
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <BlinkTask+0x1b4>)
 80016a0:	f00b fcda 	bl	800d058 <HAL_TIM_PWM_Stop>
					HAL_TIM_Base_Stop(&htim2);
 80016a4:	4816      	ldr	r0, [pc, #88]	; (8001700 <BlinkTask+0x1b4>)
 80016a6:	f00b fc01 	bl	800ceac <HAL_TIM_Base_Stop>
					previousTick_ms = 0;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <BlinkTask+0x1c0>)
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

					/* tell threads that blink is disabled */
					osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <BlinkTask+0x1ac>)
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	2200      	movs	r2, #0
 80016bc:	490f      	ldr	r1, [pc, #60]	; (80016fc <BlinkTask+0x1b0>)
 80016be:	f00d fbb1 	bl	800ee24 <osMessageQueueGet>
					statusMessage.blinkEnabled = 0;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <BlinkTask+0x1b0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	709a      	strb	r2, [r3, #2]
					// notify 3D localization thread that blink is deactivating if active
					if (statusMessage.positionEnabled == 1) {
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <BlinkTask+0x1b0>)
 80016ca:	795b      	ldrb	r3, [r3, #5]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d104      	bne.n	80016da <BlinkTask+0x18e>
						osSemaphoreRelease(locNotifyHandle);
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <BlinkTask+0x1d8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00d fa53 	bl	800eb80 <osSemaphoreRelease>
					}
					osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <BlinkTask+0x1ac>)
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	2200      	movs	r2, #0
 80016e2:	4906      	ldr	r1, [pc, #24]	; (80016fc <BlinkTask+0x1b0>)
 80016e4:	f00d fb2a 	bl	800ed3c <osMessageQueuePut>

					// empty queue
					osMessageQueueReset(blinkMsgQueueHandle);
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <BlinkTask+0x1d4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00d fc0b 	bl	800ef08 <osMessageQueueReset>

					break;
 80016f2:	bf00      	nop
		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80016f4:	e72e      	b.n	8001554 <BlinkTask+0x8>
 80016f6:	bf00      	nop
 80016f8:	200278c0 	.word	0x200278c0
 80016fc:	20027d10 	.word	0x20027d10
 8001700:	200284a4 	.word	0x200284a4
 8001704:	2000029c 	.word	0x2000029c
 8001708:	200276e0 	.word	0x200276e0
 800170c:	20000a74 	.word	0x20000a74
 8001710:	20000a78 	.word	0x20000a78
 8001714:	20000a70 	.word	0x20000a70
 8001718:	20000230 	.word	0x20000230
 800171c:	20000a6c 	.word	0x20000a6c
 8001720:	20027d00 	.word	0x20027d00
 8001724:	20027cf4 	.word	0x20027cf4

08001728 <HAL_ADC_ConvCpltCallback>:
//volatile uint8_t i = 0;
//void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
//	i++;
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_ADC_ConvCpltCallback+0x24>)
 8001732:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_ADC_ConvCpltCallback+0x28>)
 8001734:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2104      	movs	r1, #4
 800173c:	4618      	mov	r0, r3
 800173e:	f00c fd3b 	bl	800e1b8 <osThreadFlagsSet>

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20027d0c 	.word	0x20027d0c
 8001750:	20000684 	.word	0x20000684
 8001754:	20027898 	.word	0x20027898

08001758 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001764:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2104      	movs	r1, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f00c fd23 	bl	800e1b8 <osThreadFlagsSet>

}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20027d0c 	.word	0x20027d0c
 8001780:	2000029c 	.word	0x2000029c
 8001784:	20027898 	.word	0x20027898

08001788 <LL_AHB2_GRP1_EnableClock>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4313      	orrs	r3, r2
 800179e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_COMP1_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_COMP1_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_COMP1_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_COMP1_Init+0x58>)
 80017ca:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_COMP1_Init+0x50>)
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <MX_COMP1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_COMP1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_COMP1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_COMP1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_COMP1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_COMP1_Init+0x50>)
 80017f4:	2231      	movs	r2, #49	; 0x31
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_COMP1_Init+0x50>)
 80017fa:	f006 fa23 	bl	8007c44 <HAL_COMP_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 8001804:	f002 fda8 	bl	8004358 <Error_Handler>
  }

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20027d18 	.word	0x20027d18
 8001810:	40010200 	.word	0x40010200
 8001814:	00c00010 	.word	0x00c00010

08001818 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_COMP_MspInit+0x5c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d117      	bne.n	800186a <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff ffa4 	bl	8001788 <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = LH_SIG_Pin;
 8001840:	2302      	movs	r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001844:	2303      	movs	r3, #3
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LH_SIG_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f007 f845 	bl	80088e4 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	2016      	movs	r0, #22
 8001860:	f006 fcb9 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001864:	2016      	movs	r0, #22
 8001866:	f006 fcd0 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010200 	.word	0x40010200

08001878 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d02a      	beq.n	80018e8 <process_pulse_lengths+0x70>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3302      	adds	r3, #2
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d025      	beq.n	80018e8 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	881a      	ldrh	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3302      	adds	r3, #2
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	bf8c      	ite	hi
 80018aa:	2301      	movhi	r3, #1
 80018ac:	2300      	movls	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d10e      	bne.n	80018dc <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	005a      	lsls	r2, r3, #1
 80018c4:	7efb      	ldrb	r3, [r7, #27]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <process_pulse_lengths+0xd0>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e002      	b.n	80018e2 <process_pulse_lengths+0x6a>
            //UART_Print_int32_t(cur_phase_id);
        }
        else {
            self->phase_history_ = cur_more;
 80018dc:	7efa      	ldrb	r2, [r7, #27]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db26      	blt.n	800193c <process_pulse_lengths+0xc4>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	dc22      	bgt.n	800193c <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 8001912:	e013      	b.n	800193c <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4413      	add	r3, r2
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	69f9      	ldr	r1, [r7, #28]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4291      	cmp	r1, r2
 800192c:	d101      	bne.n	8001932 <process_pulse_lengths+0xba>
 800192e:	2201      	movs	r2, #1
 8001930:	e001      	b.n	8001936 <process_pulse_lengths+0xbe>
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	441a      	add	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	3724      	adds	r7, #36	; 0x24
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	080177cc 	.word	0x080177cc

0800194c <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b03      	cmp	r3, #3
 800195c:	dd06      	ble.n	800196c <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	e001      	b.n	8001970 <get_phase+0x24>
    } else {
        return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <reset>:

void reset(CyclePhaseClassifier * self) {
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <reset+0x30>)
 8001996:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	427a0000 	.word	0x427a0000

080019b0 <LL_AHB1_GRP1_EnableClock>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d4:	68fb      	ldr	r3, [r7, #12]
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019e6:	2004      	movs	r0, #4
 80019e8:	f7ff ffe2 	bl	80019b0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ffdf 	bl	80019b0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	200b      	movs	r0, #11
 80019f8:	f006 fbed 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f006 fc04 	bl	800820a <HAL_NVIC_EnableIRQ>

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <IMU_begin>:

/* Functions Definition ------------------------------------------------------*/
//Attempt communication with the device
//Return true if we got a 'Polo' back from Marco
bool IMU_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	603a      	str	r2, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	460b      	mov	r3, r1
 8001a16:	71bb      	strb	r3, [r7, #6]
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <IMU_begin+0x60>)
 8001a20:	701a      	strb	r2, [r3, #0]
//	_i2cPort = &wirePort;			//Grab which port the user wants us to use
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <IMU_begin+0x64>)
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8001a28:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <IMU_begin+0x68>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6013      	str	r3, [r2, #0]
	//But if they forget, we start the hardware here.
	//_i2cPort->begin();


	//Begin by resetting the IMU
	IMU_softReset();
 8001a2e:	f000 fa85 	bl	8001f3c <IMU_softReset>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <IMU_begin+0x6c>)
 8001a34:	22f9      	movs	r2, #249	; 0xf9
 8001a36:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <IMU_begin+0x6c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	705a      	strb	r2, [r3, #1]


	//Transmit packet on channel 2, 2 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2102      	movs	r1, #2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc14 	bl	8002270 <IMU_sendPacket>

	//Now we wait for response
	if (IMU_receivePacket() == true)
 8001a48:	f000 fb6a 	bl	8002120 <IMU_receivePacket>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <IMU_begin+0x56>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <IMU_begin+0x6c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2bf8      	cmp	r3, #248	; 0xf8
 8001a58:	d101      	bne.n	8001a5e <IMU_begin+0x56>
		{
			return (true);
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <IMU_begin+0x58>
		}
	}

	return (false); //Something went wrong
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000006 	.word	0x20000006
 8001a6c:	20027d9a 	.word	0x20027d9a
 8001a70:	20027e60 	.word	0x20027e60
 8001a74:	20027dd8 	.word	0x20027dd8

08001a78 <IMU_dataAvailable>:
//}

//Updates the latest variables if possible
//Returns false if new readings are not available
bool IMU_dataAvailable(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is not set, then we'll rely on receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (_int != 255)
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <IMU_dataAvailable+0x64>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d00d      	beq.n	8001aa0 <IMU_dataAvailable+0x28>
	{
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <IMU_dataAvailable+0x68>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <IMU_dataAvailable+0x64>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f007 f897 	bl	8008bc4 <HAL_GPIO_ReadPin>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <IMU_dataAvailable+0x28>
			return (false);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e01b      	b.n	8001ad8 <IMU_dataAvailable+0x60>
//			return (false);
	}

//	if(HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
//	{
	if (IMU_receivePacket() == true)
 8001aa0:	f000 fb3e 	bl	8002120 <IMU_receivePacket>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d015      	beq.n	8001ad6 <IMU_dataAvailable+0x5e>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <IMU_dataAvailable+0x6c>)
 8001aac:	789b      	ldrb	r3, [r3, #2]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d107      	bne.n	8001ac4 <IMU_dataAvailable+0x4c>
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <IMU_dataAvailable+0x70>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2bfb      	cmp	r3, #251	; 0xfb
 8001aba:	d103      	bne.n	8001ac4 <IMU_dataAvailable+0x4c>
		{
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001abc:	f000 f832 	bl	8001b24 <IMU_parseInputReport>
			return (true);
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e009      	b.n	8001ad8 <IMU_dataAvailable+0x60>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <IMU_dataAvailable+0x6c>)
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d103      	bne.n	8001ad6 <IMU_dataAvailable+0x5e>
		{
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001ace:	f000 f80d 	bl	8001aec <IMU_parseCommandReport>
			return (true);
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <IMU_dataAvailable+0x60>
		}
	}
//	}
	return (false);
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20027d9a 	.word	0x20027d9a
 8001ae0:	20027e60 	.word	0x20027e60
 8001ae4:	20027d48 	.word	0x20027d48
 8001ae8:	20027dd8 	.word	0x20027dd8

08001aec <IMU_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <IMU_parseCommandReport+0x30>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2bf1      	cmp	r3, #241	; 0xf1
 8001af8:	d109      	bne.n	8001b0e <IMU_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <IMU_parseCommandReport+0x30>)
 8001afc:	789b      	ldrb	r3, [r3, #2]
 8001afe:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d103      	bne.n	8001b0e <IMU_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <IMU_parseCommandReport+0x30>)
 8001b08:	795a      	ldrb	r2, [r3, #5]
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <IMU_parseCommandReport+0x34>)
 8001b0c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20027dd8 	.word	0x20027dd8
 8001b20:	20027e8b 	.word	0x20027e8b

08001b24 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001b2a:	4b96      	ldr	r3, [pc, #600]	; (8001d84 <IMU_parseInputReport+0x260>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b94      	ldr	r3, [pc, #592]	; (8001d84 <IMU_parseInputReport+0x260>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001b3c:	8a3b      	ldrh	r3, [r7, #16]
 8001b3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b42:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001b44:	8a3b      	ldrh	r3, [r7, #16]
 8001b46:	3b04      	subs	r3, #4
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 8001b4c:	4b8e      	ldr	r3, [pc, #568]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b4e:	791b      	ldrb	r3, [r3, #4]
 8001b50:	061a      	lsls	r2, r3, #24
 8001b52:	4b8d      	ldr	r3, [pc, #564]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b5c:	789b      	ldrb	r3, [r3, #2]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	4313      	orrs	r3, r2
 8001b62:	4a89      	ldr	r2, [pc, #548]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b64:	7852      	ldrb	r2, [r2, #1]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	4a88      	ldr	r2, [pc, #544]	; (8001d8c <IMU_parseInputReport+0x268>)
 8001b6a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 8001b6c:	4b86      	ldr	r3, [pc, #536]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b6e:	79db      	ldrb	r3, [r3, #7]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 8001b76:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b78:	7a9b      	ldrb	r3, [r3, #10]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b80:	7a5b      	ldrb	r3, [r3, #9]
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b8c:	7b1b      	ldrb	r3, [r3, #12]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	4b7d      	ldr	r3, [pc, #500]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001b94:	7adb      	ldrb	r3, [r3, #11]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001ba0:	7b9b      	ldrb	r3, [r3, #14]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001ba8:	7b5b      	ldrb	r3, [r3, #13]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	82bb      	strh	r3, [r7, #20]

	if (dataLength - 5 > 9)
 8001bba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bbe:	3b05      	subs	r3, #5
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	dd09      	ble.n	8001bd8 <IMU_parseInputReport+0xb4>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 8001bc4:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bc6:	7c1b      	ldrb	r3, [r3, #16]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	4b6e      	ldr	r3, [pc, #440]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bce:	7bdb      	ldrb	r3, [r3, #15]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength - 5 > 11)
 8001bd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bdc:	3b05      	subs	r3, #5
 8001bde:	2b0b      	cmp	r3, #11
 8001be0:	dd09      	ble.n	8001bf6 <IMU_parseInputReport+0xd2>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 8001be2:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001be4:	7c9b      	ldrb	r3, [r3, #18]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bec:	7c5b      	ldrb	r3, [r3, #17]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 8001bf6:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10d      	bne.n	8001c1a <IMU_parseInputReport+0xf6>
	{
		accelAccuracy = status;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <IMU_parseInputReport+0x26c>)
 8001c04:	801a      	strh	r2, [r3, #0]
		rawAccelX = data1;
 8001c06:	4a63      	ldr	r2, [pc, #396]	; (8001d94 <IMU_parseInputReport+0x270>)
 8001c08:	89bb      	ldrh	r3, [r7, #12]
 8001c0a:	8013      	strh	r3, [r2, #0]
		rawAccelY = data2;
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <IMU_parseInputReport+0x274>)
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	8013      	strh	r3, [r2, #0]
		rawAccelZ = data3;
 8001c12:	4a62      	ldr	r2, [pc, #392]	; (8001d9c <IMU_parseInputReport+0x278>)
 8001c14:	893b      	ldrh	r3, [r7, #8]
 8001c16:	8013      	strh	r3, [r2, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001c18:	e16a      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c1c:	795b      	ldrb	r3, [r3, #5]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d10d      	bne.n	8001c3e <IMU_parseInputReport+0x11a>
		accelLinAccuracy = status;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <IMU_parseInputReport+0x27c>)
 8001c28:	801a      	strh	r2, [r3, #0]
		rawLinAccelX = data1;
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <IMU_parseInputReport+0x280>)
 8001c2c:	89bb      	ldrh	r3, [r7, #12]
 8001c2e:	8013      	strh	r3, [r2, #0]
		rawLinAccelY = data2;
 8001c30:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <IMU_parseInputReport+0x284>)
 8001c32:	897b      	ldrh	r3, [r7, #10]
 8001c34:	8013      	strh	r3, [r2, #0]
		rawLinAccelZ = data3;
 8001c36:	4a5d      	ldr	r2, [pc, #372]	; (8001dac <IMU_parseInputReport+0x288>)
 8001c38:	893b      	ldrh	r3, [r7, #8]
 8001c3a:	8013      	strh	r3, [r2, #0]
}
 8001c3c:	e158      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8001c3e:	4b52      	ldr	r3, [pc, #328]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d10d      	bne.n	8001c62 <IMU_parseInputReport+0x13e>
		gyroAccuracy = status;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <IMU_parseInputReport+0x28c>)
 8001c4c:	801a      	strh	r2, [r3, #0]
		rawGyroX = data1;
 8001c4e:	4a59      	ldr	r2, [pc, #356]	; (8001db4 <IMU_parseInputReport+0x290>)
 8001c50:	89bb      	ldrh	r3, [r7, #12]
 8001c52:	8013      	strh	r3, [r2, #0]
		rawGyroY = data2;
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <IMU_parseInputReport+0x294>)
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	8013      	strh	r3, [r2, #0]
		rawGyroZ = data3;
 8001c5a:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <IMU_parseInputReport+0x298>)
 8001c5c:	893b      	ldrh	r3, [r7, #8]
 8001c5e:	8013      	strh	r3, [r2, #0]
}
 8001c60:	e146      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c64:	795b      	ldrb	r3, [r3, #5]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d10d      	bne.n	8001c86 <IMU_parseInputReport+0x162>
		magAccuracy = status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b54      	ldr	r3, [pc, #336]	; (8001dc0 <IMU_parseInputReport+0x29c>)
 8001c70:	801a      	strh	r2, [r3, #0]
		rawMagX = data1;
 8001c72:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <IMU_parseInputReport+0x2a0>)
 8001c74:	89bb      	ldrh	r3, [r7, #12]
 8001c76:	8013      	strh	r3, [r2, #0]
		rawMagY = data2;
 8001c78:	4a53      	ldr	r2, [pc, #332]	; (8001dc8 <IMU_parseInputReport+0x2a4>)
 8001c7a:	897b      	ldrh	r3, [r7, #10]
 8001c7c:	8013      	strh	r3, [r2, #0]
		rawMagZ = data3;
 8001c7e:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <IMU_parseInputReport+0x2a8>)
 8001c80:	893b      	ldrh	r3, [r7, #8]
 8001c82:	8013      	strh	r3, [r2, #0]
}
 8001c84:	e134      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c88:	795b      	ldrb	r3, [r3, #5]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d003      	beq.n	8001c96 <IMU_parseInputReport+0x172>
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001c90:	795b      	ldrb	r3, [r3, #5]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d166      	bne.n	8001d64 <IMU_parseInputReport+0x240>
		rotSample.tick_ms = HAL_GetTick();
 8001c96:	f004 fd6b 	bl	8006770 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001c9e:	615a      	str	r2, [r3, #20]
		rotSample.quatI =  IMU_qToFloat(data1, rotationVector_Q1);;
 8001ca0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 f966 	bl	8001f80 <IMU_qToFloat>
 8001cb4:	eef0 7a40 	vmov.f32	s15, s0
 8001cb8:	4b45      	ldr	r3, [pc, #276]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ =  IMU_qToFloat(data2, rotationVector_Q1);;
 8001cbe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cc2:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f000 f957 	bl	8001f80 <IMU_qToFloat>
 8001cd2:	eef0 7a40 	vmov.f32	s15, s0
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001cd8:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK =  IMU_qToFloat(data3, rotationVector_Q1);;
 8001cdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ce0:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 f948 	bl	8001f80 <IMU_qToFloat>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001cf6:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = IMU_qToFloat(data4, rotationVector_Q1);
 8001cfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cfe:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <IMU_parseInputReport+0x2b0>)
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f000 f939 	bl	8001f80 <IMU_qToFloat>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001d14:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = IMU_qToFloat(data5, 12);
 8001d18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d1c:	210c      	movs	r1, #12
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f92e 	bl	8001f80 <IMU_qToFloat>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001d2a:	edc3 7a04 	vstr	s15, [r3, #16]
		osMessageQueuePut(rotationSampleQueueHandle, &rotSample, 0U, 0);
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <IMU_parseInputReport+0x2b4>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	2300      	movs	r3, #0
 8001d34:	2200      	movs	r2, #0
 8001d36:	4926      	ldr	r1, [pc, #152]	; (8001dd0 <IMU_parseInputReport+0x2ac>)
 8001d38:	f00d f800 	bl	800ed3c <osMessageQueuePut>
		quatAccuracy = status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <IMU_parseInputReport+0x2b8>)
 8001d42:	801a      	strh	r2, [r3, #0]
		rawQuatI = data1;
 8001d44:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <IMU_parseInputReport+0x2bc>)
 8001d46:	89bb      	ldrh	r3, [r7, #12]
 8001d48:	8013      	strh	r3, [r2, #0]
		rawQuatJ = data2;
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <IMU_parseInputReport+0x2c0>)
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	8013      	strh	r3, [r2, #0]
		rawQuatK = data3;
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <IMU_parseInputReport+0x2c4>)
 8001d52:	893b      	ldrh	r3, [r7, #8]
 8001d54:	8013      	strh	r3, [r2, #0]
		rawQuatReal = data4;
 8001d56:	4a25      	ldr	r2, [pc, #148]	; (8001dec <IMU_parseInputReport+0x2c8>)
 8001d58:	8afb      	ldrh	r3, [r7, #22]
 8001d5a:	8013      	strh	r3, [r2, #0]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001d5c:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <IMU_parseInputReport+0x2cc>)
 8001d5e:	8abb      	ldrh	r3, [r7, #20]
 8001d60:	8013      	strh	r3, [r2, #0]
}
 8001d62:	e0c5      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <IMU_parseInputReport+0x264>)
 8001d66:	795b      	ldrb	r3, [r3, #5]
 8001d68:	2b11      	cmp	r3, #17
 8001d6a:	d147      	bne.n	8001dfc <IMU_parseInputReport+0x2d8>
		stepSample.tick_ms = HAL_GetTick();
 8001d6c:	f004 fd00 	bl	8006770 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <IMU_parseInputReport+0x2d0>)
 8001d74:	605a      	str	r2, [r3, #4]
		stepSample.stepCount = data3;
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <IMU_parseInputReport+0x2d0>)
 8001d78:	893b      	ldrh	r3, [r7, #8]
 8001d7a:	8013      	strh	r3, [r2, #0]
		stepCount = data3; //Bytes 8/9
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <IMU_parseInputReport+0x2d4>)
 8001d7e:	893b      	ldrh	r3, [r7, #8]
 8001d80:	8013      	strh	r3, [r2, #0]
}
 8001d82:	e0b5      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
 8001d84:	20027d48 	.word	0x20027d48
 8001d88:	20027dd8 	.word	0x20027dd8
 8001d8c:	20027d64 	.word	0x20027d64
 8001d90:	20027ea0 	.word	0x20027ea0
 8001d94:	20027e88 	.word	0x20027e88
 8001d98:	20027ea4 	.word	0x20027ea4
 8001d9c:	20027da0 	.word	0x20027da0
 8001da0:	20027d9c 	.word	0x20027d9c
 8001da4:	20027d6e 	.word	0x20027d6e
 8001da8:	20027e8c 	.word	0x20027e8c
 8001dac:	20027dca 	.word	0x20027dca
 8001db0:	20027dcc 	.word	0x20027dcc
 8001db4:	20027dce 	.word	0x20027dce
 8001db8:	20027d96 	.word	0x20027d96
 8001dbc:	20027d94 	.word	0x20027d94
 8001dc0:	20027d4c 	.word	0x20027d4c
 8001dc4:	20027d98 	.word	0x20027d98
 8001dc8:	20027e8e 	.word	0x20027e8e
 8001dcc:	20027d9e 	.word	0x20027d9e
 8001dd0:	20027db0 	.word	0x20027db0
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	200278c4 	.word	0x200278c4
 8001ddc:	20027d6a 	.word	0x20027d6a
 8001de0:	20027ea2 	.word	0x20027ea2
 8001de4:	20027dc8 	.word	0x20027dc8
 8001de8:	20027d44 	.word	0x20027d44
 8001dec:	20027d60 	.word	0x20027d60
 8001df0:	20027da2 	.word	0x20027da2
 8001df4:	20027d50 	.word	0x20027d50
 8001df8:	20027ea6 	.word	0x20027ea6
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001dfe:	795b      	ldrb	r3, [r3, #5]
 8001e00:	2b13      	cmp	r3, #19
 8001e02:	d10d      	bne.n	8001e20 <IMU_parseInputReport+0x2fc>
		stabilitySample.tick_ms = HAL_GetTick();
 8001e04:	f004 fcb4 	bl	8006770 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <IMU_parseInputReport+0x3d8>)
 8001e0c:	605a      	str	r2, [r3, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e10:	7a5a      	ldrb	r2, [r3, #9]
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <IMU_parseInputReport+0x3d8>)
 8001e14:	701a      	strb	r2, [r3, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e18:	7a5a      	ldrb	r2, [r3, #9]
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <IMU_parseInputReport+0x3dc>)
 8001e1c:	701a      	strb	r2, [r3, #0]
}
 8001e1e:	e067      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	2b1e      	cmp	r3, #30
 8001e26:	d12b      	bne.n	8001e80 <IMU_parseInputReport+0x35c>
		activitySample.tick_ms = HAL_GetTick();
 8001e28:	f004 fca2 	bl	8006770 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <IMU_parseInputReport+0x3e0>)
 8001e30:	60da      	str	r2, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e32:	2300      	movs	r3, #0
 8001e34:	74fb      	strb	r3, [r7, #19]
 8001e36:	e00c      	b.n	8001e52 <IMU_parseInputReport+0x32e>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	f103 020b 	add.w	r2, r3, #11
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <IMU_parseInputReport+0x3e4>)
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	440b      	add	r3, r1
 8001e46:	492c      	ldr	r1, [pc, #176]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e48:	5c8a      	ldrb	r2, [r1, r2]
 8001e4a:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	74fb      	strb	r3, [r7, #19]
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d9ef      	bls.n	8001e38 <IMU_parseInputReport+0x314>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e5a:	7a9a      	ldrb	r2, [r3, #10]
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <IMU_parseInputReport+0x3e8>)
 8001e5e:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <IMU_parseInputReport+0x3e4>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <IMU_parseInputReport+0x3e0>)
 8001e66:	6810      	ldr	r0, [r2, #0]
 8001e68:	6851      	ldr	r1, [r2, #4]
 8001e6a:	c303      	stmia	r3!, {r0, r1}
 8001e6c:	7a12      	ldrb	r2, [r2, #8]
 8001e6e:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, 0);
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <IMU_parseInputReport+0x3ec>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	4922      	ldr	r1, [pc, #136]	; (8001f04 <IMU_parseInputReport+0x3e0>)
 8001e7a:	f00c ff5f 	bl	800ed3c <osMessageQueuePut>
}
 8001e7e:	e037      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e82:	795b      	ldrb	r3, [r3, #5]
 8001e84:	2b14      	cmp	r3, #20
 8001e86:	d109      	bne.n	8001e9c <IMU_parseInputReport+0x378>
		memsRawAccelX = data1;
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <IMU_parseInputReport+0x3f0>)
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	8013      	strh	r3, [r2, #0]
		memsRawAccelY = data2;
 8001e8e:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <IMU_parseInputReport+0x3f4>)
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	8013      	strh	r3, [r2, #0]
		memsRawAccelZ = data3;
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <IMU_parseInputReport+0x3f8>)
 8001e96:	893b      	ldrh	r3, [r7, #8]
 8001e98:	8013      	strh	r3, [r2, #0]
}
 8001e9a:	e029      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001e9e:	795b      	ldrb	r3, [r3, #5]
 8001ea0:	2b15      	cmp	r3, #21
 8001ea2:	d109      	bne.n	8001eb8 <IMU_parseInputReport+0x394>
		memsRawGyroX = data1;
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <IMU_parseInputReport+0x3fc>)
 8001ea6:	89bb      	ldrh	r3, [r7, #12]
 8001ea8:	8013      	strh	r3, [r2, #0]
		memsRawGyroY = data2;
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <IMU_parseInputReport+0x400>)
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	8013      	strh	r3, [r2, #0]
		memsRawGyroZ = data3;
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <IMU_parseInputReport+0x404>)
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	8013      	strh	r3, [r2, #0]
}
 8001eb6:	e01b      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001eba:	795b      	ldrb	r3, [r3, #5]
 8001ebc:	2b16      	cmp	r3, #22
 8001ebe:	d109      	bne.n	8001ed4 <IMU_parseInputReport+0x3b0>
		memsRawMagX = data1;
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <IMU_parseInputReport+0x408>)
 8001ec2:	89bb      	ldrh	r3, [r7, #12]
 8001ec4:	8013      	strh	r3, [r2, #0]
		memsRawMagY = data2;
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <IMU_parseInputReport+0x40c>)
 8001ec8:	897b      	ldrh	r3, [r7, #10]
 8001eca:	8013      	strh	r3, [r2, #0]
		memsRawMagZ = data3;
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <IMU_parseInputReport+0x410>)
 8001ece:	893b      	ldrh	r3, [r7, #8]
 8001ed0:	8013      	strh	r3, [r2, #0]
}
 8001ed2:	e00d      	b.n	8001ef0 <IMU_parseInputReport+0x3cc>
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001ed6:	795b      	ldrb	r3, [r3, #5]
 8001ed8:	2bf1      	cmp	r3, #241	; 0xf1
 8001eda:	d109      	bne.n	8001ef0 <IMU_parseInputReport+0x3cc>
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001ede:	79db      	ldrb	r3, [r3, #7]
 8001ee0:	71fb      	strb	r3, [r7, #7]
		if (command == COMMAND_ME_CALIBRATE)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d103      	bne.n	8001ef0 <IMU_parseInputReport+0x3cc>
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <IMU_parseInputReport+0x3d4>)
 8001eea:	7a9a      	ldrb	r2, [r3, #10]
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <IMU_parseInputReport+0x414>)
 8001eee:	701a      	strb	r2, [r3, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20027dd8 	.word	0x20027dd8
 8001efc:	20027d58 	.word	0x20027d58
 8001f00:	20027dd2 	.word	0x20027dd2
 8001f04:	20027e90 	.word	0x20027e90
 8001f08:	20027dac 	.word	0x20027dac
 8001f0c:	20027e8a 	.word	0x20027e8a
 8001f10:	200278a4 	.word	0x200278a4
 8001f14:	20027dd0 	.word	0x20027dd0
 8001f18:	20027daa 	.word	0x20027daa
 8001f1c:	20027e5a 	.word	0x20027e5a
 8001f20:	20027d4e 	.word	0x20027d4e
 8001f24:	20027dd4 	.word	0x20027dd4
 8001f28:	20027da4 	.word	0x20027da4
 8001f2c:	20027da8 	.word	0x20027da8
 8001f30:	20027da6 	.word	0x20027da6
 8001f34:	20027d6c 	.word	0x20027d6c
 8001f38:	20027e8b 	.word	0x20027e8b

08001f3c <IMU_softReset>:
//Send command to reset IC
//Read all advertisement packets from sensor
//The sensor has been seen to reset twice if we attempt too much too quickly.
//This seems to work reliably.
void IMU_softReset(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	shtpData[0] = 1; //Reset
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <IMU_softReset+0x3c>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]

	//Attempt to start communication with sensor
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 8001f46:	2301      	movs	r3, #1
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f990 	bl	8002270 <IMU_sendPacket>

	//Read all incoming data and flush it
	HAL_Delay(200);
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f004 fc25 	bl	80067a0 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f56:	bf00      	nop
 8001f58:	f000 f8e2 	bl	8002120 <IMU_receivePacket>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1fa      	bne.n	8001f58 <IMU_softReset+0x1c>
		;
	HAL_Delay(200);
 8001f62:	20c8      	movs	r0, #200	; 0xc8
 8001f64:	f004 fc1c 	bl	80067a0 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8001f68:	bf00      	nop
 8001f6a:	f000 f8d9 	bl	8002120 <IMU_receivePacket>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1fa      	bne.n	8001f6a <IMU_softReset+0x2e>
		;
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20027dd8 	.word	0x20027dd8
 8001f7c:	00000000 	.word	0x00000000

08001f80 <IMU_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float IMU_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	80fb      	strh	r3, [r7, #6]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	717b      	strb	r3, [r7, #5]
	float qFloat = fixedPointValue;
 8001f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	edc7 7a03 	vstr	s15, [r7, #12]
	qFloat *= pow(2, qPoint * -1);
 8001fa0:	797b      	ldrb	r3, [r7, #5]
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fa47 	bl	8000438 <__aeabi_i2d>
 8001faa:	4603      	mov	r3, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	ec44 3b11 	vmov	d1, r3, r4
 8001fb2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001ff8 <IMU_qToFloat+0x78>
 8001fb6:	f013 ffc5 	bl	8015f44 <pow>
 8001fba:	ec56 5b10 	vmov	r5, r6, d0
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7fe fa4c 	bl	800045c <__aeabi_f2d>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4623      	mov	r3, r4
 8001fcc:	4628      	mov	r0, r5
 8001fce:	4631      	mov	r1, r6
 8001fd0:	f7fe fa9c 	bl	800050c <__aeabi_dmul>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4621      	mov	r1, r4
 8001fdc:	f7fe fd46 	bl	8000a6c <__aeabi_d2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]
	return (qFloat);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	ee07 3a90 	vmov	s15, r3
}
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	40000000 	.word	0x40000000

08002000 <IMU_enableRotationVector>:

//Sends the packet to enable the rotation vector
void IMU_enableRotationVector(uint16_t timeBetweenReports)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	4619      	mov	r1, r3
 800200e:	2005      	movs	r0, #5
 8002010:	f000 f81a 	bl	8002048 <IMU_setFeatureCommand_2>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <IMU_enableActivityClassifier>:
	IMU_setFeatureCommand_2(SENSOR_REPORTID_RAW_MAGNETOMETER, timeBetweenReports);
}

//Sends the packet to enable the various activity classifiers
void IMU_enableActivityClassifier(uint16_t timeBetweenReports, uint32_t activitiesToEnable, uint8_t *activityConfidences)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	81fb      	strh	r3, [r7, #14]
	_activityConfidences = activityConfidences; //Store pointer to array
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <IMU_enableActivityClassifier+0x28>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6013      	str	r3, [r2, #0]

	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4619      	mov	r1, r3
 8002036:	201e      	movs	r0, #30
 8002038:	f000 f818 	bl	800206c <IMU_setFeatureCommand_3>
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20027dac 	.word	0x20027dac

08002048 <IMU_setFeatureCommand_2>:
	return (false);
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
void IMU_setFeatureCommand_2(uint8_t reportID, uint16_t timeBetweenReports)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	80bb      	strh	r3, [r7, #4]
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 8002058:	88b9      	ldrh	r1, [r7, #4]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2200      	movs	r2, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f804 	bl	800206c <IMU_setFeatureCommand_3>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <IMU_setFeatureCommand_3>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void IMU_setFeatureCommand_3(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	603a      	str	r2, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
 8002078:	460b      	mov	r3, r1
 800207a:	80bb      	strh	r3, [r7, #4]
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]

	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 800208a:	22fd      	movs	r2, #253	; 0xfd
 800208c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 800208e:	4a23      	ldr	r2, [pc, #140]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;								   //Feature flags
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 8002096:	2200      	movs	r2, #0
 8002098:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 800209c:	2200      	movs	r2, #0
 800209e:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ac:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	121b      	asrs	r3, r3, #8
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020b6:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	141b      	asrs	r3, r3, #16
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020c0:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	0e1b      	lsrs	r3, r3, #24
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ca:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020ea:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020f4:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 80020fe:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	0e1b      	lsrs	r3, r3, #24
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <IMU_setFeatureCommand_3+0xb0>)
 8002108:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 800210a:	2302      	movs	r3, #2
 800210c:	2111      	movs	r1, #17
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f8ae 	bl	8002270 <IMU_sendPacket>
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20027dd8 	.word	0x20027dd8

08002120 <IMU_receivePacket>:
//}

//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
bool IMU_receivePacket(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af02      	add	r7, sp, #8
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <IMU_receivePacket+0x90>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <IMU_receivePacket+0x94>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f006 fd46 	bl	8008bc4 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <IMU_receivePacket+0x22>
		return (false);
 800213e:	2300      	movs	r3, #0
 8002140:	e031      	b.n	80021a6 <IMU_receivePacket+0x86>

	//Ask for four bytes to find out how much data we need to read
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <IMU_receivePacket+0x98>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f04f 31ff 	mov.w	r1, #4294967295
 800214a:	4618      	mov	r0, r3
 800214c:	f00c fcb2 	bl	800eab4 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100);
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <IMU_receivePacket+0x9c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b299      	uxth	r1, r3
 8002156:	2364      	movs	r3, #100	; 0x64
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2304      	movs	r3, #4
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <IMU_receivePacket+0xa0>)
 800215e:	4819      	ldr	r0, [pc, #100]	; (80021c4 <IMU_receivePacket+0xa4>)
 8002160:	f006 fee4 	bl	8008f2c <HAL_I2C_Master_Receive>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <IMU_receivePacket+0x98>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f00c fd09 	bl	800eb80 <osSemaphoreRelease>

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <IMU_receivePacket+0xa0>)
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <IMU_receivePacket+0xa0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	80fb      	strh	r3, [r7, #6]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002186:	80fb      	strh	r3, [r7, #6]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8002188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <IMU_receivePacket+0x74>
	{
		//Packet is empty
		return (false); //All done
 8002190:	2300      	movs	r3, #0
 8002192:	e008      	b.n	80021a6 <IMU_receivePacket+0x86>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	3b04      	subs	r3, #4
 8002198:	b29b      	uxth	r3, r3
 800219a:	80fb      	strh	r3, [r7, #6]

	IMU_getData(dataLength);
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f812 	bl	80021c8 <IMU_getData>


	return (true); //We're done!
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20027e60 	.word	0x20027e60
 80021b4:	20027d9a 	.word	0x20027d9a
 80021b8:	200278ac 	.word	0x200278ac
 80021bc:	20000006 	.word	0x20000006
 80021c0:	20027d48 	.word	0x20027d48
 80021c4:	20027ea8 	.word	0x20027ea8

080021c8 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 80021d2:	2300      	movs	r3, #0
 80021d4:	81fb      	strh	r3, [r7, #14]
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 80021d6:	e036      	b.n	8002246 <IMU_getData+0x7e>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	81bb      	strh	r3, [r7, #12]
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 80021dc:	89bb      	ldrh	r3, [r7, #12]
 80021de:	2b1c      	cmp	r3, #28
 80021e0:	d901      	bls.n	80021e6 <IMU_getData+0x1e>
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 80021e2:	231c      	movs	r3, #28
 80021e4:	81bb      	strh	r3, [r7, #12]

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <IMU_getData+0x90>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f04f 31ff 	mov.w	r1, #4294967295
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00c fc60 	bl	800eab4 <osSemaphoreAcquire>
//		taskENTER_CRITICAL();
		HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <IMU_getData+0x94>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b299      	uxth	r1, r3
 80021fa:	89bb      	ldrh	r3, [r7, #12]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3304      	adds	r3, #4
 8002200:	b2db      	uxtb	r3, r3
 8002202:	b29a      	uxth	r2, r3
 8002204:	2364      	movs	r3, #100	; 0x64
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <IMU_getData+0x98>)
 800220c:	4815      	ldr	r0, [pc, #84]	; (8002264 <IMU_getData+0x9c>)
 800220e:	f006 fe8d 	bl	8008f2c <HAL_I2C_Master_Receive>
//			osSemaphoreRelease(messageI2C_LockSem);
//			osDelay(100);
//			osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//		}
//		taskEXIT_CRITICAL();
		osSemaphoreRelease(messageI2C_LockHandle);
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <IMU_getData+0x90>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f00c fcb2 	bl	800eb80 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 800221c:	89fa      	ldrh	r2, [r7, #14]
 800221e:	89bb      	ldrh	r3, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	2b7f      	cmp	r3, #127	; 0x7f
 8002224:	dc07      	bgt.n	8002236 <IMU_getData+0x6e>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <IMU_getData+0xa0>)
 800222a:	4413      	add	r3, r2
 800222c:	89ba      	ldrh	r2, [r7, #12]
 800222e:	490f      	ldr	r1, [pc, #60]	; (800226c <IMU_getData+0xa4>)
 8002230:	4618      	mov	r0, r3
 8002232:	f013 fe73 	bl	8015f1c <memcpy>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 8002236:	89fa      	ldrh	r2, [r7, #14]
 8002238:	89bb      	ldrh	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	81fb      	strh	r3, [r7, #14]

		bytesRemaining -= numberOfBytesToRead;
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	89bb      	ldrh	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	80fb      	strh	r3, [r7, #6]
	while (bytesRemaining > 0)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1c5      	bne.n	80021d8 <IMU_getData+0x10>
	}
	return (true); //Done!
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200278ac 	.word	0x200278ac
 800225c:	20000006 	.word	0x20000006
 8002260:	20000a84 	.word	0x20000a84
 8002264:	20027ea8 	.word	0x20027ea8
 8002268:	20027dd8 	.word	0x20027dd8
 800226c:	20000a88 	.word	0x20000a88

08002270 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af02      	add	r7, sp, #8
 8002276:	4603      	mov	r3, r0
 8002278:	460a      	mov	r2, r1
 800227a:	71fb      	strb	r3, [r7, #7]
 800227c:	4613      	mov	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	3304      	adds	r3, #4
 8002284:	73fb      	strb	r3, [r7, #15]

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <IMU_sendPacket+0x84>)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	7013      	strb	r3, [r2, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	121b      	asrs	r3, r3, #8
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <IMU_sendPacket+0x84>)
 8002294:	705a      	strb	r2, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <IMU_sendPacket+0x84>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	7093      	strb	r3, [r2, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <IMU_sendPacket+0x88>)
 80022a0:	5cd2      	ldrb	r2, [r2, r3]
 80022a2:	1c51      	adds	r1, r2, #1
 80022a4:	b2c8      	uxtb	r0, r1
 80022a6:	4914      	ldr	r1, [pc, #80]	; (80022f8 <IMU_sendPacket+0x88>)
 80022a8:	54c8      	strb	r0, [r1, r3]
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <IMU_sendPacket+0x84>)
 80022ac:	70da      	strb	r2, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4912      	ldr	r1, [pc, #72]	; (80022fc <IMU_sendPacket+0x8c>)
 80022b4:	4812      	ldr	r0, [pc, #72]	; (8002300 <IMU_sendPacket+0x90>)
 80022b6:	f013 fe31 	bl	8015f1c <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <IMU_sendPacket+0x94>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f04f 31ff 	mov.w	r1, #4294967295
 80022c2:	4618      	mov	r0, r3
 80022c4:	f00c fbf6 	bl	800eab4 <osSemaphoreAcquire>
//	taskENTER_CRITICAL();
	HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 100);
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <IMU_sendPacket+0x98>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b299      	uxth	r1, r3
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <IMU_sendPacket+0x84>)
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <IMU_sendPacket+0x9c>)
 80022dc:	f006 fd32 	bl	8008d44 <HAL_I2C_Master_Transmit>
//		osSemaphoreRelease(messageI2C_LockSem);
//		osDelay(100);
//		osSemaphoreAcquire(messageI2C_LockSem, osWaitForever);
//	}
//	taskEXIT_CRITICAL();
	osSemaphoreRelease(messageI2C_LockHandle);
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <IMU_sendPacket+0x94>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00c fc4b 	bl	800eb80 <osSemaphoreRelease>

	return (true);
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20027e64 	.word	0x20027e64
 80022f8:	20000a7c 	.word	0x20000a7c
 80022fc:	20027dd8 	.word	0x20027dd8
 8002300:	20027e68 	.word	0x20027e68
 8002304:	200278ac 	.word	0x200278ac
 8002308:	20000006 	.word	0x20000006
 800230c:	20027ea8 	.word	0x20027ea8

08002310 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Stop the SysTick  to avoid the interrupt to occur while in the critical section.
   * Otherwise, this will prevent the device to enter low power mode
   * At this time, an update of the systick will not be considered
   *
   */
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002326:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800232a:	f3bf 8f6f 	isb	sy
  __DSB();
  __ISB();

  /* If a context switch is pending or a task is waiting for the scheduler
        to be unsuspended then abandon the low power entry. */
  if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800232e:	f00f f9af 	bl	8011690 <eTaskConfirmSleepModeStatus>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <vPortSuppressTicksAndSleep+0x38>
  {
    /* Restart SysTick. */
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002344:	b662      	cpsie	i
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
}
 8002346:	e021      	b.n	800238c <vPortSuppressTicksAndSleep+0x7c>
    if (xExpectedIdleTime != (~0))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d002      	beq.n	8002356 <vPortSuppressTicksAndSleep+0x46>
      LpTimerStart( xExpectedIdleTime );
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f869 	bl	8002428 <LpTimerStart>
    LpEnter( );
 8002356:	f000 f8cb 	bl	80024f0 <LpEnter>
    if (xExpectedIdleTime != (~0))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d005      	beq.n	800236e <vPortSuppressTicksAndSleep+0x5e>
      ulCompleteTickPeriods = LpGetElapsedTime( );
 8002362:	f000 f8cd 	bl	8002500 <LpGetElapsedTime>
 8002366:	60f8      	str	r0, [r7, #12]
      vTaskStepTick( ulCompleteTickPeriods );
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f00e feab 	bl	80110c4 <vTaskStepTick>
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <vPortSuppressTicksAndSleep+0x88>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <vPortSuppressTicksAndSleep+0x84>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <vPortSuppressTicksAndSleep+0x8c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <vPortSuppressTicksAndSleep+0x90>)
 8002386:	3b01      	subs	r3, #1
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	b662      	cpsie	i
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	e000e010 	.word	0xe000e010
 8002398:	e000e018 	.word	0xe000e018
 800239c:	20000aa4 	.word	0x20000aa4
 80023a0:	e000e014 	.word	0xe000e014

080023a4 <vPortSetupTimerInterrupt>:
 * However, as at that time, it is not yet known whereas the low power mode that will be used is stop mode or
 * sleep mode, it is easier and simpler to go with a low power timer as soon as the tick need to be
 * suppressed.
 */
void vPortSetupTimerInterrupt( void )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  LpTimerInit( );
 80023a8:	f000 f828 	bl	80023fc <LpTimerInit>

  /* Calculate the constants required to configure the tick interrupt. */
  ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <vPortSetupTimerInterrupt+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <vPortSetupTimerInterrupt+0x44>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <vPortSetupTimerInterrupt+0x48>)
 80023ba:	6013      	str	r3, [r2, #0]

  /* Stop and clear the SysTick. */
  portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <vPortSetupTimerInterrupt+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <vPortSetupTimerInterrupt+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

  /* Configure SysTick to interrupt at the requested rate. */
  portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <vPortSetupTimerInterrupt+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <vPortSetupTimerInterrupt+0x44>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <vPortSetupTimerInterrupt+0x54>)
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
  portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <vPortSetupTimerInterrupt+0x4c>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000078 	.word	0x20000078
 80023e8:	10624dd3 	.word	0x10624dd3
 80023ec:	20000aa4 	.word	0x20000aa4
 80023f0:	e000e010 	.word	0xe000e010
 80023f4:	e000e018 	.word	0xe000e018
 80023f8:	e000e014 	.word	0xe000e014

080023fc <LpTimerInit>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerInit( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  ( void ) HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(LpTimerContext.LpTimerFreeRTOS_Id), hw_ts_SingleShot, LpTimerCb);
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <LpTimerInit+0x14>)
 8002402:	2200      	movs	r2, #0
 8002404:	4903      	ldr	r1, [pc, #12]	; (8002414 <LpTimerInit+0x18>)
 8002406:	2000      	movs	r0, #0
 8002408:	f001 f83a 	bl	8003480 <HW_TS_Create>

  return;
 800240c:	bf00      	nop
}
 800240e:	bd80      	pop	{r7, pc}
 8002410:	08002419 	.word	0x08002419
 8002414:	20000aac 	.word	0x20000aac

08002418 <LpTimerCb>:
 *
 * @param  None
 * @retval None
 */
static void LpTimerCb( void )
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /**
   * Nothing to be done
   */

  return;
 800241c:	bf00      	nop
}
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <LpTimerStart>:
 *
 * @param  time_to_sleep : Number of FreeRTOS ticks
 * @retval None
 */
static void LpTimerStart( uint32_t time_to_sleep )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Converts the number of FreeRTOS ticks into hw timer tick */
  if(time_to_sleep <=  0x10C6)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f241 02c6 	movw	r2, #4294	; 0x10c6
 8002436:	4293      	cmp	r3, r2
 8002438:	d80c      	bhi.n	8002454 <LpTimerStart+0x2c>
  {
    /**
     * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000 * 1000 );
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <LpTimerStart+0xb8>)
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	099b      	lsrs	r3, r3, #6
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <LpTimerStart+0xbc>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	e034      	b.n	80024be <LpTimerStart+0x96>
  }
  else if(time_to_sleep <= 0x418937)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <LpTimerStart+0xc0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d81b      	bhi.n	8002494 <LpTimerStart+0x6c>
  {
    /**
     * ( time_to_sleep * 1000 ) fit a 32bits word
     */
    time_to_sleep = (time_to_sleep * 1000);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	607b      	str	r3, [r7, #4]
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	099b      	lsrs	r3, r3, #6
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <LpTimerStart+0xbc>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x418937)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <LpTimerStart+0xc0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d806      	bhi.n	800248c <LpTimerStart+0x64>
    {
      /**
       * ( time_to_sleep * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	e018      	b.n	80024be <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	e014      	b.n	80024be <LpTimerStart+0x96>
    }
  }
  else
  {
    time_to_sleep = time_to_sleep / ( CFG_TS_TICK_VAL * configTICK_RATE_HZ );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <LpTimerStart+0xbc>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	607b      	str	r3, [r7, #4]
    if(time_to_sleep <= 0x10C6)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f241 02c6 	movw	r2, #4294	; 0x10c6
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d805      	bhi.n	80024b8 <LpTimerStart+0x90>
    {
      /**
       * ( time_to_sleep * 1000 * 1000 ) fit a 32bits word
       */
      time_to_sleep = (time_to_sleep * 1000 * 1000 );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <LpTimerStart+0xb8>)
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	e002      	b.n	80024be <LpTimerStart+0x96>
    }
    else
    {
      time_to_sleep = (~0); /* Max value */
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	607b      	str	r3, [r7, #4]
    }
  }

  HW_TS_Start(LpTimerContext.LpTimerFreeRTOS_Id, time_to_sleep);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <LpTimerStart+0xc4>)
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f001 f8db 	bl	8003680 <HW_TS_Start>
   * There might be other timers already running in the timer server that may elapse
   * before this one.
   * Store how long before the next event so that on wakeup, it will be possible to calculate
   * how long the tick has been suppressed
   */
  LpTimerContext.LpTimeLeftOnEntry = HW_TS_RTC_ReadLeftTicksToCount( );
 80024ca:	f001 f95f 	bl	800378c <HW_TS_RTC_ReadLeftTicksToCount>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <LpTimerStart+0xc4>)
 80024d4:	601a      	str	r2, [r3, #0]

  return;
 80024d6:	bf00      	nop
}
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	000f4240 	.word	0x000f4240
 80024e4:	0113094d 	.word	0x0113094d
 80024e8:	00418937 	.word	0x00418937
 80024ec:	20000aa8 	.word	0x20000aa8

080024f0 <LpEnter>:
 *
 * @param  None
 * @retval None
 */
static void LpEnter( void )
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif
  return;
 80024f4:	bf00      	nop
}
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <LpGetElapsedTime>:
 *
 * @param  None
 * @retval The number of tick rate (FreeRTOS tick)
 */
static uint32_t LpGetElapsedTime( void )
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
  uint64_t return_value;

  return_value = (configTICK_RATE_HZ) * (CFG_TS_TICK_VAL) * (uint64_t)(LpTimerContext.LpTimeLeftOnEntry - HW_TS_RTC_ReadLeftTicksToCount( ));
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <LpGetElapsedTime+0x60>)
 8002508:	681c      	ldr	r4, [r3, #0]
 800250a:	f001 f93f 	bl	800378c <HW_TS_RTC_ReadLeftTicksToCount>
 800250e:	4603      	mov	r3, r0
 8002510:	1ae3      	subs	r3, r4, r3
 8002512:	f04f 0400 	mov.w	r4, #0
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <LpGetElapsedTime+0x64>)
 8002518:	fb02 f104 	mul.w	r1, r2, r4
 800251c:	2200      	movs	r2, #0
 800251e:	fb02 f203 	mul.w	r2, r2, r3
 8002522:	440a      	add	r2, r1
 8002524:	490f      	ldr	r1, [pc, #60]	; (8002564 <LpGetElapsedTime+0x64>)
 8002526:	fba3 3401 	umull	r3, r4, r3, r1
 800252a:	4422      	add	r2, r4
 800252c:	4614      	mov	r4, r2
 800252e:	e9c7 3400 	strd	r3, r4, [r7]
 8002532:	e9c7 3400 	strd	r3, r4, [r7]
  return_value = return_value / (1000 * 1000);
 8002536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <LpGetElapsedTime+0x68>)
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f7fe fae4 	bl	8000b0c <__aeabi_uldivmod>
 8002544:	4603      	mov	r3, r0
 8002546:	460c      	mov	r4, r1
 8002548:	e9c7 3400 	strd	r3, r4, [r7]
   * The system may have been out from another reason than the timer
   * Stop the timer after the elapsed time is calculated other wise, HW_TS_RTC_ReadLeftTicksToCount()
   * may return 0xFFFF ( TIMER LIST EMPTY )
   * It does not hurt stopping a timer that exists but is not running.
   */
  HW_TS_Stop(LpTimerContext.LpTimerFreeRTOS_Id);
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <LpGetElapsedTime+0x60>)
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f001 f80b 	bl	800356c <HW_TS_Stop>

  return (uint32_t)return_value;
 8002556:	683b      	ldr	r3, [r7, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	20000aa8 	.word	0x20000aa8
 8002564:	00077240 	.word	0x00077240
 8002568:	000f4240 	.word	0x000f4240

0800256c <_GeometryBuilder>:

BaseStationGeometryDef bs_1 = {{1.738303, 2.430314,  0.781285},
							  {0.285992, -0.253563, 0.924075, 0.040683, 0.966697, 0.252668, -0.957368, -0.034667, 0.286784}};
SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};

void _GeometryBuilder(GeometryBuilder *self){
 800256c:	b4b0      	push	{r4, r5, r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

	self->base_stations_[0] = bs_0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <_GeometryBuilder+0x54>)
 8002578:	461c      	mov	r4, r3
 800257a:	4615      	mov	r5, r2
 800257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->base_stations_[1] = bs_1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <_GeometryBuilder+0x58>)
 8002590:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002594:	4615      	mov	r5, r2
 8002596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800259c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	self->sensors[0] = s_loc_geo;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <_GeometryBuilder+0x5c>)
 80025aa:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80025ae:	4613      	mov	r3, r2
 80025b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bcb0      	pop	{r4, r5, r7}
 80025be:	4770      	bx	lr
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000038 	.word	0x20000038
 80025c8:	20000ab0 	.word	0x20000ab0

080025cc <consume_angles>:

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80025cc:	b5b0      	push	{r4, r5, r7, lr}
 80025ce:	b096      	sub	sp, #88	; 0x58
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    if (f->fix_level >= kCycleSynced) {
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2bc7      	cmp	r3, #199	; 0xc7
 80025dc:	f340 8093 	ble.w	8002706 <consume_angles+0x13a>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3360      	adds	r3, #96	; 0x60
 80025e4:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 80025e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	3310      	adds	r3, #16
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 80025f8:	2300      	movs	r3, #0
 80025fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fc:	e011      	b.n	8002622 <consume_angles+0x56>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002606:	3104      	adds	r1, #4
 8002608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002614:	4293      	cmp	r3, r2
 8002616:	bf38      	it	cc
 8002618:	4613      	movcc	r3, r2
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261e:	3301      	adds	r3, #1
 8002620:	64bb      	str	r3, [r7, #72]	; 0x48
 8002622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002624:	2b03      	cmp	r3, #3
 8002626:	ddea      	ble.n	80025fe <consume_angles+0x32>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 8002628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262a:	2b0b      	cmp	r3, #11
 800262c:	d86b      	bhi.n	8002706 <consume_angles+0x13a>
            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002638:	ed93 7a01 	vldr	s14, [r3, #4]
 800263c:	f107 0214 	add.w	r2, r7, #20
 8002640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002644:	4619      	mov	r1, r3
 8002646:	eef0 0a47 	vmov.f32	s1, s14
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	f000 f8e5 	bl	800281c <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265a:	edd3 7a02 	vldr	s15, [r3, #8]
 800265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002660:	ed93 7a03 	vldr	s14, [r3, #12]
 8002664:	f107 0208 	add.w	r2, r7, #8
 8002668:	f107 0320 	add.w	r3, r7, #32
 800266c:	4619      	mov	r1, r3
 800266e:	eef0 0a47 	vmov.f32	s1, s14
 8002672:	eeb0 0a67 	vmov.f32	s0, s15
 8002676:	f000 f8d1 	bl	800281c <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->vive_vars_.pos, &self->vive_vars_.pos_delta);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3370      	adds	r3, #112	; 0x70
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	327c      	adds	r2, #124	; 0x7c
 8002682:	f107 0520 	add.w	r5, r7, #32
 8002686:	f107 0408 	add.w	r4, r7, #8
 800268a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800268e:	f107 0014 	add.w	r0, r7, #20
 8002692:	9201      	str	r2, [sp, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	462b      	mov	r3, r5
 8002698:	4622      	mov	r2, r4
 800269a:	f000 f945 	bl	8002928 <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 800269e:	2300      	movs	r3, #0
 80026a0:	647b      	str	r3, [r7, #68]	; 0x44
 80026a2:	e019      	b.n	80026d8 <consume_angles+0x10c>
            	self->vive_vars_.pos[i] -= sens_def->pos[i];
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	331c      	adds	r3, #28
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c8:	331c      	adds	r3, #28
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 80026d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d4:	3301      	adds	r3, #1
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	2b02      	cmp	r3, #2
 80026dc:	dde2      	ble.n	80026a4 <consume_angles+0xd8>
            }

            self->vive_vars_.time_ms = HAL_GetTick();
 80026de:	f004 f847 	bl	8006770 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            //Put VIVE measurements in the message queue
            osMessageQueuePut(viveQueueHandle, (void *) &self->vive_vars_, NULL, 0);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <consume_angles+0x144>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80026f4:	2300      	movs	r3, #0
 80026f6:	2200      	movs	r2, #0
 80026f8:	f00c fb20 	bl	800ed3c <osMessageQueuePut>
            // tell timer function that localization is complete
			osSemaphoreRelease(locCompleteHandle);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <consume_angles+0x148>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f00c fa3d 	bl	800eb80 <osSemaphoreRelease>
        else {
            // Angles too stale - cannot calculate position anymore.

        }
    }
}
 8002706:	bf00      	nop
 8002708:	3750      	adds	r7, #80	; 0x50
 800270a:	46bd      	mov	sp, r7
 800270c:	bdb0      	pop	{r4, r5, r7, pc}
 800270e:	bf00      	nop
 8002710:	200277b0 	.word	0x200277b0
 8002714:	20027cec 	.word	0x20027cec

08002718 <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3304      	adds	r3, #4
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	3308      	adds	r3, #8
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3308      	adds	r3, #8
 800273c:	edd3 6a00 	vldr	s13, [r3]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3304      	adds	r3, #4
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3308      	adds	r3, #8
 800275a:	ed93 7a00 	vldr	s14, [r3]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	edd3 6a00 	vldr	s13, [r3]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3308      	adds	r3, #8
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3304      	adds	r3, #4
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3304      	adds	r3, #4
 800279c:	edd3 6a00 	vldr	s13, [r3]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3308      	adds	r3, #8
 80027ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b2:	edc3 7a00 	vstr	s15, [r3]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <vec_length>:

float vec_length(float *vec) {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	461a      	mov	r2, r3
 80027d0:	2103      	movs	r1, #3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f013 f8b2 	bl	801593c <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	db09      	blt.n	8002804 <vec_length+0x42>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80027f4:	f013 fd16 	bl	8016224 <sqrtf>
 80027f8:	eef0 7a40 	vmov.f32	s15, s0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	edc3 7a00 	vstr	s15, [r3]
 8002802:	e003      	b.n	800280c <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

    return res;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	ee07 3a90 	vmov	s15, r3
}
 8002812:	eeb0 0a67 	vmov.f32	s0, s15
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b09a      	sub	sp, #104	; 0x68
 8002820:	af00      	add	r7, sp, #0
 8002822:	6178      	str	r0, [r7, #20]
 8002824:	ed87 0a04 	vstr	s0, [r7, #16]
 8002828:	edc7 0a03 	vstr	s1, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8002830:	ed97 0a04 	vldr	s0, [r7, #16]
 8002834:	f013 f9ae 	bl	8015b94 <arm_cos_f32>
 8002838:	eef0 7a40 	vmov.f32	s15, s0
 800283c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002846:	ed97 0a04 	vldr	s0, [r7, #16]
 800284a:	f013 f95d 	bl	8015b08 <arm_sin_f32>
 800284e:	eef0 7a40 	vmov.f32	s15, s0
 8002852:	eef1 7a67 	vneg.f32	s15, s15
 8002856:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002860:	ed97 0a03 	vldr	s0, [r7, #12]
 8002864:	f013 f996 	bl	8015b94 <arm_cos_f32>
 8002868:	eef0 7a40 	vmov.f32	s15, s0
 800286c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002870:	ed97 0a03 	vldr	s0, [r7, #12]
 8002874:	f013 f948 	bl	8015b08 <arm_sin_f32>
 8002878:	eef0 7a40 	vmov.f32	s15, s0
 800287c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8002880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 800288c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002890:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002894:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff3d 	bl	8002718 <vec_cross_product>
    float len = vec_length(ray);
 800289e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff8d 	bl	80027c2 <vec_length>
 80028a8:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 80028ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028b0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80028bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028c0:	2203      	movs	r2, #3
 80028c2:	eeb0 0a66 	vmov.f32	s0, s13
 80028c6:	4618      	mov	r0, r3
 80028c8:	f013 fa08 	bl	8015cdc <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 80028cc:	2303      	movs	r3, #3
 80028ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80028d0:	2303      	movs	r3, #3
 80028d2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	330c      	adds	r3, #12
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 80028da:	2303      	movs	r3, #3
 80028dc:	863b      	strh	r3, [r7, #48]	; 0x30
 80028de:	2301      	movs	r3, #1
 80028e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80028e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 80028e8:	2303      	movs	r3, #3
 80028ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80028ec:	2301      	movs	r3, #1
 80028ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 80028f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80028fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002900:	4618      	mov	r0, r3
 8002902:	f013 f861 	bl	80159c8 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f107 011c 	add.w	r1, r7, #28
 8002918:	2303      	movs	r3, #3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	f013 fa7a 	bl	8015e14 <arm_add_f32>
}
 8002920:	bf00      	nop
 8002922:	3768      	adds	r7, #104	; 0x68
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b098      	sub	sp, #96	; 0x60
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8002936:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8002942:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002946:	2303      	movs	r3, #3
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f013 f96c 	bl	8015c28 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8002950:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002954:	2203      	movs	r2, #3
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	f013 fa03 	bl	8015d64 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 800295e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002962:	2203      	movs	r2, #3
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	f013 f9fc 	bl	8015d64 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 800296c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002970:	2203      	movs	r2, #3
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f013 f9f5 	bl	8015d64 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 800297a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800297e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002982:	2203      	movs	r2, #3
 8002984:	68b8      	ldr	r0, [r7, #8]
 8002986:	f013 f9ed 	bl	8015d64 <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 800298a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002992:	2203      	movs	r2, #3
 8002994:	6838      	ldr	r0, [r7, #0]
 8002996:	f013 f9e5 	bl	8015d64 <arm_dot_prod_f32>

    float denom = a * c - b * b;
 800299a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800299e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80029a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80029aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 80029ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80029be:	eef0 7ae7 	vabs.f32	s15, s15
 80029c2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002ae0 <intersect_lines+0x1b8>
 80029c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d501      	bpl.n	80029d4 <intersect_lines+0xac>
        return 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e081      	b.n	8002ad8 <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 80029d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80029e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 80029fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8002a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8002a14:	68b8      	ldr	r0, [r7, #8]
 8002a16:	f013 f961 	bl	8015cdc <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8002a1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a22:	2303      	movs	r3, #3
 8002a24:	68f9      	ldr	r1, [r7, #12]
 8002a26:	f013 f9f5 	bl	8015e14 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8002a2a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a2e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a36:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002a3a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a46:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a4e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8002a5e:	f107 031c 	add.w	r3, r7, #28
 8002a62:	2203      	movs	r2, #3
 8002a64:	4619      	mov	r1, r3
 8002a66:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	f013 f936 	bl	8015cdc <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8002a70:	f107 021c 	add.w	r2, r7, #28
 8002a74:	f107 001c 	add.w	r0, r7, #28
 8002a78:	2303      	movs	r3, #3
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	f013 f9ca 	bl	8015e14 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	f107 011c 	add.w	r1, r7, #28
 8002a94:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f013 f9bb 	bl	8015e14 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8002a9e:	f107 0310 	add.w	r3, r7, #16
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002aa6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f013 f916 	bl	8015cdc <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8002ab0:	f107 0210 	add.w	r2, r7, #16
 8002ab4:	f107 011c 	add.w	r1, r7, #28
 8002ab8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002abc:	2303      	movs	r3, #3
 8002abe:	f013 f8b3 	bl	8015c28 <arm_sub_f32>
    *dist = vec_length(tmp);
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fe7b 	bl	80027c2 <vec_length>
 8002acc:	eef0 7a40 	vmov.f32	s15, s0
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3760      	adds	r7, #96	; 0x60
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	3727c5ac 	.word	0x3727c5ac

08002ae4 <LL_AHB2_GRP1_EnableClock>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b08:	68fb      	ldr	r3, [r7, #12]
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2c:	2004      	movs	r0, #4
 8002b2e:	f7ff ffd9 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b32:	2080      	movs	r0, #128	; 0x80
 8002b34:	f7ff ffd6 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f7ff ffd3 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff ffd0 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b44:	2010      	movs	r0, #16
 8002b46:	f7ff ffcd 	bl	8002ae4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4829      	ldr	r0, [pc, #164]	; (8002c00 <MX_GPIO_Init+0xe8>)
 8002b5c:	f005 fec2 	bl	80088e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1 
 8002b60:	f240 33f3 	movw	r3, #1011	; 0x3f3
 8002b64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b66:	2303      	movs	r3, #3
 8002b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4824      	ldr	r0, [pc, #144]	; (8002c04 <MX_GPIO_Init+0xec>)
 8002b74:	f005 feb6 	bl	80088e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA6 
                           PA7 PA8 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8002b78:	f649 13dc 	movw	r3, #39388	; 0x99dc
 8002b7c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f005 fea9 	bl	80088e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002b92:	2320      	movs	r3, #32
 8002b94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_GPIO_Init+0xf0>)
 8002b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba6:	f005 fe9d 	bl	80088e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin;
 8002baa:	2304      	movs	r3, #4
 8002bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_GPIO_Init+0xf4>)
 8002bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EXPANSION_INT_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4812      	ldr	r0, [pc, #72]	; (8002c04 <MX_GPIO_Init+0xec>)
 8002bbc:	f005 fe92 	bl	80088e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480f      	ldr	r0, [pc, #60]	; (8002c10 <MX_GPIO_Init+0xf8>)
 8002bd2:	f005 fe87 	bl	80088e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2105      	movs	r1, #5
 8002bda:	2008      	movs	r0, #8
 8002bdc:	f005 fafb 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002be0:	2008      	movs	r0, #8
 8002be2:	f005 fb12 	bl	800820a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2105      	movs	r1, #5
 8002bea:	2017      	movs	r0, #23
 8002bec:	f005 faf3 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bf0:	2017      	movs	r0, #23
 8002bf2:	f005 fb0a 	bl	800820a <HAL_NVIC_EnableIRQ>

}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	48001c00 	.word	0x48001c00
 8002c04:	48000400 	.word	0x48000400
 8002c08:	10210000 	.word	0x10210000
 8002c0c:	10110000 	.word	0x10110000
 8002c10:	48001000 	.word	0x48001000

08002c14 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c22:	4905      	ldr	r1, [pc, #20]	; (8002c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	58000800 	.word	0x58000800

08002c3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4904      	ldr	r1, [pc, #16]	; (8002c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	58000800 	.word	0x58000800

08002c60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <ReadRtcSsrValue+0x3c>)
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <ReadRtcSsrValue+0x3c>)
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002c76:	e005      	b.n	8002c84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <ReadRtcSsrValue+0x3c>)
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1f5      	bne.n	8002c78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002c8c:	683b      	ldr	r3, [r7, #0]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40002800 	.word	0x40002800

08002ca0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	460a      	mov	r2, r1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002cb0:	79ba      	ldrb	r2, [r7, #6]
 8002cb2:	491d      	ldr	r1, [pc, #116]	; (8002d28 <LinkTimerAfter+0x88>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3315      	adds	r3, #21
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d009      	beq.n	8002cde <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	4916      	ldr	r1, [pc, #88]	; (8002d28 <LinkTimerAfter+0x88>)
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3314      	adds	r3, #20
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	4911      	ldr	r1, [pc, #68]	; (8002d28 <LinkTimerAfter+0x88>)
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	3315      	adds	r3, #21
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002cf2:	79fa      	ldrb	r2, [r7, #7]
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <LinkTimerAfter+0x88>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3314      	adds	r3, #20
 8002d02:	79ba      	ldrb	r2, [r7, #6]
 8002d04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002d06:	79ba      	ldrb	r2, [r7, #6]
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <LinkTimerAfter+0x88>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3315      	adds	r3, #21
 8002d16:	79fa      	ldrb	r2, [r7, #7]
 8002d18:	701a      	strb	r2, [r3, #0]

  return;
 8002d1a:	bf00      	nop
}
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000160 	.word	0x20000160

08002d2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	460a      	mov	r2, r1
 8002d36:	71fb      	strb	r3, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <LinkTimerBefore+0xb8>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	79ba      	ldrb	r2, [r7, #6]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d032      	beq.n	8002dae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002d48:	79ba      	ldrb	r2, [r7, #6]
 8002d4a:	4927      	ldr	r1, [pc, #156]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	3314      	adds	r3, #20
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	4922      	ldr	r1, [pc, #136]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3315      	adds	r3, #21
 8002d6c:	79fa      	ldrb	r2, [r7, #7]
 8002d6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	491d      	ldr	r1, [pc, #116]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3315      	adds	r3, #21
 8002d80:	79ba      	ldrb	r2, [r7, #6]
 8002d82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002d84:	79fa      	ldrb	r2, [r7, #7]
 8002d86:	4918      	ldr	r1, [pc, #96]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	3314      	adds	r3, #20
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002d98:	79ba      	ldrb	r2, [r7, #6]
 8002d9a:	4913      	ldr	r1, [pc, #76]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	3314      	adds	r3, #20
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002dac:	e014      	b.n	8002dd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002dae:	79fa      	ldrb	r2, [r7, #7]
 8002db0:	490d      	ldr	r1, [pc, #52]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3315      	adds	r3, #21
 8002dbe:	79ba      	ldrb	r2, [r7, #6]
 8002dc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002dc2:	79ba      	ldrb	r2, [r7, #6]
 8002dc4:	4908      	ldr	r1, [pc, #32]	; (8002de8 <LinkTimerBefore+0xbc>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	79fa      	ldrb	r2, [r7, #7]
 8002dd4:	701a      	strb	r2, [r3, #0]
  return;
 8002dd6:	bf00      	nop
}
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	200001f0 	.word	0x200001f0
 8002de8:	20000160 	.word	0x20000160

08002dec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002df6:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <linkTimer+0x144>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b06      	cmp	r3, #6
 8002dfe:	d118      	bne.n	8002e32 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <linkTimer+0x144>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <linkTimer+0x148>)
 8002e08:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002e0a:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <linkTimer+0x144>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	4949      	ldr	r1, [pc, #292]	; (8002f38 <linkTimer+0x14c>)
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3315      	adds	r3, #21
 8002e20:	2206      	movs	r2, #6
 8002e22:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e24:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <linkTimer+0x150>)
 8002e26:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	81fb      	strh	r3, [r7, #14]
 8002e30:	e078      	b.n	8002f24 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002e32:	f000 f909 	bl	8003048 <ReturnTimeElapsed>
 8002e36:	4603      	mov	r3, r0
 8002e38:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	493e      	ldr	r1, [pc, #248]	; (8002f38 <linkTimer+0x14c>)
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	3308      	adds	r3, #8
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	79fa      	ldrb	r2, [r7, #7]
 8002e50:	4419      	add	r1, r3
 8002e52:	4839      	ldr	r0, [pc, #228]	; (8002f38 <linkTimer+0x14c>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4403      	add	r3, r0
 8002e5e:	3308      	adds	r3, #8
 8002e60:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002e62:	79fa      	ldrb	r2, [r7, #7]
 8002e64:	4934      	ldr	r1, [pc, #208]	; (8002f38 <linkTimer+0x14c>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3308      	adds	r3, #8
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <linkTimer+0x144>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	; (8002f38 <linkTimer+0x14c>)
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d337      	bcc.n	8002f04 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002e94:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <linkTimer+0x144>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002e9a:	7b7a      	ldrb	r2, [r7, #13]
 8002e9c:	4926      	ldr	r1, [pc, #152]	; (8002f38 <linkTimer+0x14c>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3315      	adds	r3, #21
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002eae:	e013      	b.n	8002ed8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002eb0:	7b7a      	ldrb	r2, [r7, #13]
 8002eb2:	4921      	ldr	r1, [pc, #132]	; (8002f38 <linkTimer+0x14c>)
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3315      	adds	r3, #21
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002ec4:	7b7a      	ldrb	r2, [r7, #13]
 8002ec6:	491c      	ldr	r1, [pc, #112]	; (8002f38 <linkTimer+0x14c>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3315      	adds	r3, #21
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002ed8:	7b3b      	ldrb	r3, [r7, #12]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d00b      	beq.n	8002ef6 <linkTimer+0x10a>
 8002ede:	7b3a      	ldrb	r2, [r7, #12]
 8002ee0:	4915      	ldr	r1, [pc, #84]	; (8002f38 <linkTimer+0x14c>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d2dc      	bcs.n	8002eb0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002ef6:	7b7a      	ldrb	r2, [r7, #13]
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fecf 	bl	8002ca0 <LinkTimerAfter>
 8002f02:	e00f      	b.n	8002f24 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <linkTimer+0x144>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff0c 	bl	8002d2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <linkTimer+0x144>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <linkTimer+0x148>)
 8002f1c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <linkTimer+0x144>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002f24:	89fb      	ldrh	r3, [r7, #14]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200001f0 	.word	0x200001f0
 8002f34:	200001f1 	.word	0x200001f1
 8002f38:	20000160 	.word	0x20000160
 8002f3c:	200001f4 	.word	0x200001f4

08002f40 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	71fb      	strb	r3, [r7, #7]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <UnlinkTimer+0xf8>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d111      	bne.n	8002f80 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <UnlinkTimer+0xf8>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <UnlinkTimer+0xfc>)
 8002f64:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002f66:	79fa      	ldrb	r2, [r7, #7]
 8002f68:	4935      	ldr	r1, [pc, #212]	; (8003040 <UnlinkTimer+0x100>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	3315      	adds	r3, #21
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <UnlinkTimer+0xf8>)
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e03e      	b.n	8002ffe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	492f      	ldr	r1, [pc, #188]	; (8003040 <UnlinkTimer+0x100>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3314      	adds	r3, #20
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002f94:	79fa      	ldrb	r2, [r7, #7]
 8002f96:	492a      	ldr	r1, [pc, #168]	; (8003040 <UnlinkTimer+0x100>)
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3315      	adds	r3, #21
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002fa8:	79f9      	ldrb	r1, [r7, #7]
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	4824      	ldr	r0, [pc, #144]	; (8003040 <UnlinkTimer+0x100>)
 8002fae:	460b      	mov	r3, r1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	440b      	add	r3, r1
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4403      	add	r3, r0
 8002fb8:	3315      	adds	r3, #21
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	b2d8      	uxtb	r0, r3
 8002fbe:	4920      	ldr	r1, [pc, #128]	; (8003040 <UnlinkTimer+0x100>)
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3315      	adds	r3, #21
 8002fcc:	4602      	mov	r2, r0
 8002fce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002fd0:	7bbb      	ldrb	r3, [r7, #14]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d013      	beq.n	8002ffe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002fd6:	79f9      	ldrb	r1, [r7, #7]
 8002fd8:	7bba      	ldrb	r2, [r7, #14]
 8002fda:	4819      	ldr	r0, [pc, #100]	; (8003040 <UnlinkTimer+0x100>)
 8002fdc:	460b      	mov	r3, r1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4403      	add	r3, r0
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	4914      	ldr	r1, [pc, #80]	; (8003040 <UnlinkTimer+0x100>)
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ffe:	79fa      	ldrb	r2, [r7, #7]
 8003000:	490f      	ldr	r1, [pc, #60]	; (8003040 <UnlinkTimer+0x100>)
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	330c      	adds	r3, #12
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <UnlinkTimer+0xf8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b06      	cmp	r3, #6
 800301a:	d107      	bne.n	800302c <UnlinkTimer+0xec>
 800301c:	79bb      	ldrb	r3, [r7, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <UnlinkTimer+0x104>)
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	601a      	str	r2, [r3, #0]
  }

  return;
 800302a:	bf00      	nop
 800302c:	bf00      	nop
}
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	200001f0 	.word	0x200001f0
 800303c:	200001f1 	.word	0x200001f1
 8003040:	20000160 	.word	0x20000160
 8003044:	200001f4 	.word	0x200001f4

08003048 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <ReturnTimeElapsed+0x70>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d026      	beq.n	80030a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003058:	f7ff fe02 	bl	8002c60 <ReadRtcSsrValue>
 800305c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <ReturnTimeElapsed+0x70>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d805      	bhi.n	8003074 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <ReturnTimeElapsed+0x70>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	e00a      	b.n	800308a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <ReturnTimeElapsed+0x74>)
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <ReturnTimeElapsed+0x70>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	4413      	add	r3, r2
 8003088:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <ReturnTimeElapsed+0x78>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <ReturnTimeElapsed+0x7c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	40d3      	lsrs	r3, r2
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	e001      	b.n	80030aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	b29b      	uxth	r3, r3
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200001f4 	.word	0x200001f4
 80030bc:	20000ac6 	.word	0x20000ac6
 80030c0:	20000ac5 	.word	0x20000ac5
 80030c4:	20000ac4 	.word	0x20000ac4

080030c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80030d8:	f7ff fdc2 	bl	8002c60 <ReadRtcSsrValue>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <RestartWakeupCounter+0xa8>)
 80030e0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80030e2:	2003      	movs	r0, #3
 80030e4:	f005 f8b1 	bl	800824a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80030e8:	e03e      	b.n	8003168 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d803      	bhi.n	80030f8 <RestartWakeupCounter+0x30>
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <RestartWakeupCounter+0xac>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d002      	beq.n	80030fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80030fe:	bf00      	nop
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f7      	beq.n	8003100 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <RestartWakeupCounter+0xb0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003124:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <RestartWakeupCounter+0xb4>)
 8003128:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800312c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800312e:	2003      	movs	r0, #3
 8003130:	f005 f899 	bl	8008266 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <RestartWakeupCounter+0xb8>)
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	4910      	ldr	r1, [pc, #64]	; (8003180 <RestartWakeupCounter+0xb8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003144:	f7ff fd8c 	bl	8002c60 <ReadRtcSsrValue>
 8003148:	4602      	mov	r2, r0
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <RestartWakeupCounter+0xa8>)
 800314c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <RestartWakeupCounter+0xb0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003160:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003162:	f3af 8000 	nop.w
  return ;
 8003166:	bf00      	nop
}
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200001f4 	.word	0x200001f4
 8003174:	20000ac4 	.word	0x20000ac4
 8003178:	20000ac0 	.word	0x20000ac0
 800317c:	58000800 	.word	0x58000800
 8003180:	40002800 	.word	0x40002800

08003184 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <RescheduleTimerList+0x124>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d108      	bne.n	80031aa <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8003198:	bf00      	nop
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <RescheduleTimerList+0x128>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f7      	bne.n	800319a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80031aa:	4b40      	ldr	r3, [pc, #256]	; (80032ac <RescheduleTimerList+0x128>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <RescheduleTimerList+0x128>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80031be:	4b3c      	ldr	r3, [pc, #240]	; (80032b0 <RescheduleTimerList+0x12c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	493b      	ldr	r1, [pc, #236]	; (80032b4 <RescheduleTimerList+0x130>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	3308      	adds	r3, #8
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80031d8:	f7ff ff36 	bl	8003048 <ReturnTimeElapsed>
 80031dc:	4603      	mov	r3, r0
 80031de:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d205      	bcs.n	80031f4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80031ec:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <RescheduleTimerList+0x134>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e04d      	b.n	8003290 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	4a31      	ldr	r2, [pc, #196]	; (80032bc <RescheduleTimerList+0x138>)
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	b292      	uxth	r2, r2
 80031fc:	4413      	add	r3, r2
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4293      	cmp	r3, r2
 8003204:	d906      	bls.n	8003214 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <RescheduleTimerList+0x138>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <RescheduleTimerList+0x134>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e03d      	b.n	8003290 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	b29a      	uxth	r2, r3
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <RescheduleTimerList+0x134>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003224:	e034      	b.n	8003290 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	4922      	ldr	r1, [pc, #136]	; (80032b4 <RescheduleTimerList+0x130>)
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	3308      	adds	r3, #8
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	429a      	cmp	r2, r3
 800323c:	d20a      	bcs.n	8003254 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	491c      	ldr	r1, [pc, #112]	; (80032b4 <RescheduleTimerList+0x130>)
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	3308      	adds	r3, #8
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e013      	b.n	800327c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	4917      	ldr	r1, [pc, #92]	; (80032b4 <RescheduleTimerList+0x130>)
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	3308      	adds	r3, #8
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	1ac9      	subs	r1, r1, r3
 800326c:	4811      	ldr	r0, [pc, #68]	; (80032b4 <RescheduleTimerList+0x130>)
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4403      	add	r3, r0
 8003278:	3308      	adds	r3, #8
 800327a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	490d      	ldr	r1, [pc, #52]	; (80032b4 <RescheduleTimerList+0x130>)
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	3315      	adds	r3, #21
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d1c7      	bne.n	8003226 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003296:	89bb      	ldrh	r3, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff15 	bl	80030c8 <RestartWakeupCounter>

  return ;
 800329e:	bf00      	nop
}
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40002800 	.word	0x40002800
 80032ac:	20000ac0 	.word	0x20000ac0
 80032b0:	200001f0 	.word	0x200001f0
 80032b4:	20000160 	.word	0x20000160
 80032b8:	200001f8 	.word	0x200001f8
 80032bc:	20000ac8 	.word	0x20000ac8

080032c0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80032cc:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HW_TS_Init+0x194>)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80032d2:	4b60      	ldr	r3, [pc, #384]	; (8003454 <HW_TS_Init+0x194>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	22ca      	movs	r2, #202	; 0xca
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
 80032dc:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HW_TS_Init+0x194>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2253      	movs	r2, #83	; 0x53
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032e6:	4b5c      	ldr	r3, [pc, #368]	; (8003458 <HW_TS_Init+0x198>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4a5b      	ldr	r2, [pc, #364]	; (8003458 <HW_TS_Init+0x198>)
 80032ec:	f043 0320 	orr.w	r3, r3, #32
 80032f0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032f2:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HW_TS_Init+0x198>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f1c3 0304 	rsb	r3, r3, #4
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b55      	ldr	r3, [pc, #340]	; (800345c <HW_TS_Init+0x19c>)
 8003306:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HW_TS_Init+0x198>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003310:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003314:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	fa92 f2a2 	rbit	r2, r2
 800331c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	40d3      	lsrs	r3, r2
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3301      	adds	r3, #1
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HW_TS_Init+0x1a0>)
 8003330:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HW_TS_Init+0x198>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800333c:	b29b      	uxth	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HW_TS_Init+0x1a4>)
 8003344:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HW_TS_Init+0x1a4>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	3b01      	subs	r3, #1
 800334c:	4a44      	ldr	r2, [pc, #272]	; (8003460 <HW_TS_Init+0x1a0>)
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <HW_TS_Init+0x19c>)
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	40d3      	lsrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003366:	4293      	cmp	r3, r2
 8003368:	d904      	bls.n	8003374 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HW_TS_Init+0x1a8>)
 800336c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	e003      	b.n	800337c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	b29a      	uxth	r2, r3
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HW_TS_Init+0x1a8>)
 800337a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800337c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003380:	f7ff fc5c 	bl	8002c3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003384:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003388:	f7ff fc44 	bl	8002c14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d143      	bne.n	800341a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <HW_TS_Init+0x1ac>)
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003398:	4b35      	ldr	r3, [pc, #212]	; (8003470 <HW_TS_Init+0x1b0>)
 800339a:	f04f 32ff 	mov.w	r2, #4294967295
 800339e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
 80033a4:	e00c      	b.n	80033c0 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80033a6:	7dfa      	ldrb	r2, [r7, #23]
 80033a8:	4932      	ldr	r1, [pc, #200]	; (8003474 <HW_TS_Init+0x1b4>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	330c      	adds	r3, #12
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	3301      	adds	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d9ef      	bls.n	80033a6 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80033c6:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HW_TS_Init+0x1b8>)
 80033c8:	2206      	movs	r2, #6
 80033ca:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HW_TS_Init+0x194>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <HW_TS_Init+0x194>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033de:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <HW_TS_Init+0x194>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HW_TS_Init+0x194>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <HW_TS_Init+0x1bc>)
 80033f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033fc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033fe:	2003      	movs	r0, #3
 8003400:	f004 ff31 	bl	8008266 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HW_TS_Init+0x194>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HW_TS_Init+0x194>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e00a      	b.n	8003430 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HW_TS_Init+0x194>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800342a:	2003      	movs	r0, #3
 800342c:	f004 ff0d 	bl	800824a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HW_TS_Init+0x194>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	22ff      	movs	r2, #255	; 0xff
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800343a:	2200      	movs	r2, #0
 800343c:	2106      	movs	r1, #6
 800343e:	2003      	movs	r0, #3
 8003440:	f004 fec9 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003444:	2003      	movs	r0, #3
 8003446:	f004 fee0 	bl	800820a <HAL_NVIC_EnableIRQ>

  return;
 800344a:	bf00      	nop
}
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000ac0 	.word	0x20000ac0
 8003458:	40002800 	.word	0x40002800
 800345c:	20000ac4 	.word	0x20000ac4
 8003460:	20000ac5 	.word	0x20000ac5
 8003464:	20000ac6 	.word	0x20000ac6
 8003468:	20000ac8 	.word	0x20000ac8
 800346c:	200001f8 	.word	0x200001f8
 8003470:	200001f4 	.word	0x200001f4
 8003474:	20000160 	.word	0x20000160
 8003478:	200001f0 	.word	0x200001f0
 800347c:	58000800 	.word	0x58000800

08003480 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003480:	b480      	push	{r7}
 8003482:	b08b      	sub	sp, #44	; 0x2c
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003496:	f3ef 8310 	mrs	r3, PRIMASK
 800349a:	61fb      	str	r3, [r7, #28]
  return(result);
 800349c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800349e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80034a2:	e004      	b.n	80034ae <HW_TS_Create+0x2e>
  {
    loop++;
 80034a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034a8:	3301      	adds	r3, #1
 80034aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80034ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d80c      	bhi.n	80034d0 <HW_TS_Create+0x50>
 80034b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034ba:	492b      	ldr	r1, [pc, #172]	; (8003568 <HW_TS_Create+0xe8>)
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	330c      	adds	r3, #12
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e9      	bne.n	80034a4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80034d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d037      	beq.n	8003548 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034dc:	4922      	ldr	r1, [pc, #136]	; (8003568 <HW_TS_Create+0xe8>)
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	330c      	adds	r3, #12
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034fc:	491a      	ldr	r1, [pc, #104]	; (8003568 <HW_TS_Create+0xe8>)
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	3310      	adds	r3, #16
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800350e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003512:	4915      	ldr	r1, [pc, #84]	; (8003568 <HW_TS_Create+0xe8>)
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	330d      	adds	r3, #13
 8003520:	79fa      	ldrb	r2, [r7, #7]
 8003522:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003524:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003528:	490f      	ldr	r1, [pc, #60]	; (8003568 <HW_TS_Create+0xe8>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800353e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003546:	e007      	b.n	8003558 <HW_TS_Create+0xd8>
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800355c:	4618      	mov	r0, r3
 800355e:	372c      	adds	r7, #44	; 0x2c
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	20000160 	.word	0x20000160

0800356c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003576:	f3ef 8310 	mrs	r3, PRIMASK
 800357a:	60fb      	str	r3, [r7, #12]
  return(result);
 800357c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800357e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003580:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003582:	2003      	movs	r0, #3
 8003584:	f004 fe4f 	bl	8008226 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HW_TS_Stop+0xfc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	22ca      	movs	r2, #202	; 0xca
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
 8003592:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HW_TS_Stop+0xfc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2253      	movs	r2, #83	; 0x53
 800359a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800359c:	79fa      	ldrb	r2, [r7, #7]
 800359e:	4933      	ldr	r1, [pc, #204]	; (800366c <HW_TS_Stop+0x100>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	330c      	adds	r3, #12
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d148      	bne.n	8003646 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fcc1 	bl	8002f40 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HW_TS_Stop+0x104>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d135      	bne.n	8003636 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HW_TS_Stop+0x108>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d108      	bne.n	80035ea <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035d8:	bf00      	nop
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HW_TS_Stop+0xfc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f7      	bne.n	80035da <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <HW_TS_Stop+0xfc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HW_TS_Stop+0xfc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035fe:	bf00      	nop
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HW_TS_Stop+0xfc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f7      	beq.n	8003600 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003610:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HW_TS_Stop+0xfc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HW_TS_Stop+0xfc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003624:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <HW_TS_Stop+0x10c>)
 8003628:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800362c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800362e:	2003      	movs	r0, #3
 8003630:	f004 fe19 	bl	8008266 <HAL_NVIC_ClearPendingIRQ>
 8003634:	e007      	b.n	8003646 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HW_TS_Stop+0x110>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	7cfa      	ldrb	r2, [r7, #19]
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8003642:	f7ff fd9f 	bl	8003184 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HW_TS_Stop+0xfc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	22ff      	movs	r2, #255	; 0xff
 800364e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003650:	2003      	movs	r0, #3
 8003652:	f004 fdda 	bl	800820a <HAL_NVIC_EnableIRQ>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003660:	bf00      	nop
}
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000ac0 	.word	0x20000ac0
 800366c:	20000160 	.word	0x20000160
 8003670:	200001f0 	.word	0x200001f0
 8003674:	40002800 	.word	0x40002800
 8003678:	58000800 	.word	0x58000800
 800367c:	200001f1 	.word	0x200001f1

08003680 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800368c:	79fa      	ldrb	r2, [r7, #7]
 800368e:	493b      	ldr	r1, [pc, #236]	; (800377c <HW_TS_Start+0xfc>)
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	330c      	adds	r3, #12
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d103      	bne.n	80036ac <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ff60 	bl	800356c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ac:	f3ef 8310 	mrs	r3, PRIMASK
 80036b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80036b2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80036b6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80036b8:	2003      	movs	r0, #3
 80036ba:	f004 fdb4 	bl	8008226 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80036be:	4b30      	ldr	r3, [pc, #192]	; (8003780 <HW_TS_Start+0x100>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	22ca      	movs	r2, #202	; 0xca
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
 80036c8:	4b2d      	ldr	r3, [pc, #180]	; (8003780 <HW_TS_Start+0x100>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2253      	movs	r2, #83	; 0x53
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	4929      	ldr	r1, [pc, #164]	; (800377c <HW_TS_Start+0xfc>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	330c      	adds	r3, #12
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036e6:	79fa      	ldrb	r2, [r7, #7]
 80036e8:	4924      	ldr	r1, [pc, #144]	; (800377c <HW_TS_Start+0xfc>)
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3308      	adds	r3, #8
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	491f      	ldr	r1, [pc, #124]	; (800377c <HW_TS_Start+0xfc>)
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3304      	adds	r3, #4
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fb6b 	bl	8002dec <linkTimer>
 8003716:	4603      	mov	r3, r0
 8003718:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HW_TS_Start+0x104>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HW_TS_Start+0x108>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	7c7a      	ldrb	r2, [r7, #17]
 8003728:	429a      	cmp	r2, r3
 800372a:	d002      	beq.n	8003732 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800372c:	f7ff fd2a 	bl	8003184 <RescheduleTimerList>
 8003730:	e013      	b.n	800375a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003732:	79fa      	ldrb	r2, [r7, #7]
 8003734:	4911      	ldr	r1, [pc, #68]	; (800377c <HW_TS_Start+0xfc>)
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	440b      	add	r3, r1
 8003740:	3308      	adds	r3, #8
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	8a7b      	ldrh	r3, [r7, #18]
 8003746:	79fa      	ldrb	r2, [r7, #7]
 8003748:	1ac9      	subs	r1, r1, r3
 800374a:	480c      	ldr	r0, [pc, #48]	; (800377c <HW_TS_Start+0xfc>)
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4403      	add	r3, r0
 8003756:	3308      	adds	r3, #8
 8003758:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HW_TS_Start+0x100>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	22ff      	movs	r2, #255	; 0xff
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003764:	2003      	movs	r0, #3
 8003766:	f004 fd50 	bl	800820a <HAL_NVIC_EnableIRQ>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003774:	bf00      	nop
}
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000160 	.word	0x20000160
 8003780:	20000ac0 	.word	0x20000ac0
 8003784:	200001f0 	.word	0x200001f0
 8003788:	200001f1 	.word	0x200001f1

0800378c <HW_TS_RTC_ReadLeftTicksToCount>:

uint16_t HW_TS_RTC_ReadLeftTicksToCount(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003792:	f3ef 8310 	mrs	r3, PRIMASK
 8003796:	60bb      	str	r3, [r7, #8]
  return(result);
 8003798:	68bb      	ldr	r3, [r7, #8]
  uint32_t primask_bit;
  uint16_t return_value, auro_reload_value, elapsed_time_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800379a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800379c:	b672      	cpsid	i
  __disable_irq();                /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d112      	bne.n	80037d2 <HW_TS_RTC_ReadLeftTicksToCount+0x46>
  {
    auro_reload_value = (uint32_t)(READ_BIT(RTC->WUTR, RTC_WUTR_WUT));
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <HW_TS_RTC_ReadLeftTicksToCount+0x60>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	81fb      	strh	r3, [r7, #14]

    elapsed_time_value = ReturnTimeElapsed();
 80037b2:	f7ff fc49 	bl	8003048 <ReturnTimeElapsed>
 80037b6:	4603      	mov	r3, r0
 80037b8:	81bb      	strh	r3, [r7, #12]

    if(auro_reload_value > elapsed_time_value)
 80037ba:	89fa      	ldrh	r2, [r7, #14]
 80037bc:	89bb      	ldrh	r3, [r7, #12]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d904      	bls.n	80037cc <HW_TS_RTC_ReadLeftTicksToCount+0x40>
    {
      return_value = auro_reload_value - elapsed_time_value;
 80037c2:	89fa      	ldrh	r2, [r7, #14]
 80037c4:	89bb      	ldrh	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	82fb      	strh	r3, [r7, #22]
 80037ca:	e005      	b.n	80037d8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
    else
    {
      return_value = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	82fb      	strh	r3, [r7, #22]
 80037d0:	e002      	b.n	80037d8 <HW_TS_RTC_ReadLeftTicksToCount+0x4c>
    }
  }
  else
  {
    return_value = TIMER_LIST_EMPTY;
 80037d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d6:	82fb      	strh	r3, [r7, #22]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f383 8810 	msr	PRIMASK, r3
  }

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return (return_value);
 80037e2:	8afb      	ldrh	r3, [r7, #22]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40002800 	.word	0x40002800

080037f0 <LL_AHB2_GRP1_EnableClock>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4313      	orrs	r3, r2
 8003806:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800382a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003830:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4313      	orrs	r3, r2
 8003838:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4013      	ands	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <MX_I2C1_Init+0x74>)
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <MX_I2C1_Init+0x78>)
 800385c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003860:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <MX_I2C1_Init+0x7c>)
 8003862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <MX_I2C1_Init+0x74>)
 800386c:	2201      	movs	r2, #1
 800386e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003878:	2200      	movs	r2, #0
 800387a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <MX_I2C1_Init+0x74>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003884:	2200      	movs	r2, #0
 8003886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <MX_I2C1_Init+0x74>)
 800388a:	2200      	movs	r2, #0
 800388c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800388e:	480e      	ldr	r0, [pc, #56]	; (80038c8 <MX_I2C1_Init+0x74>)
 8003890:	f005 f9c8 	bl	8008c24 <HAL_I2C_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800389a:	f000 fd5d 	bl	8004358 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800389e:	2100      	movs	r1, #0
 80038a0:	4809      	ldr	r0, [pc, #36]	; (80038c8 <MX_I2C1_Init+0x74>)
 80038a2:	f007 f8c0 	bl	800aa26 <HAL_I2CEx_ConfigAnalogFilter>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80038ac:	f000 fd54 	bl	8004358 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038b0:	2100      	movs	r1, #0
 80038b2:	4805      	ldr	r0, [pc, #20]	; (80038c8 <MX_I2C1_Init+0x74>)
 80038b4:	f007 f902 	bl	800aabc <HAL_I2CEx_ConfigDigitalFilter>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038be:	f000 fd4b 	bl	8004358 <Error_Handler>
  }

}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20027ea8 	.word	0x20027ea8
 80038cc:	40005400 	.word	0x40005400
 80038d0:	00e27cae 	.word	0x00e27cae

080038d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <HAL_I2C_MspInit+0x6c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d120      	bne.n	8003938 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	2001      	movs	r0, #1
 80038f8:	f7ff ff7a 	bl	80037f0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003900:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003902:	2312      	movs	r3, #18
 8003904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800390e:	2304      	movs	r3, #4
 8003910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	4619      	mov	r1, r3
 8003918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391c:	f004 ffe2 	bl	80088e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003920:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003924:	f7ff ff7d 	bl	8003822 <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	2105      	movs	r1, #5
 800392c:	201e      	movs	r0, #30
 800392e:	f004 fc52 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003932:	201e      	movs	r0, #30
 8003934:	f004 fc69 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003938:	bf00      	nop
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40005400 	.word	0x40005400

08003944 <InertialSensingTask>:
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown
uint8_t inertialEnabled = 0;

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	inertialEnabled = 1;
 800394c:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <InertialSensingTask+0xec>)
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8003952:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003956:	2120      	movs	r1, #32
 8003958:	204a      	movs	r0, #74	; 0x4a
 800395a:	f7fe f855 	bl	8001a08 <IMU_begin>
#endif

	uint32_t evt = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

	while(1){

		/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003962:	f04f 32ff 	mov.w	r2, #4294967295
 8003966:	2100      	movs	r1, #0
 8003968:	2001      	movs	r0, #1
 800396a:	f00a fcd7 	bl	800e31c <osThreadFlagsWait>

		// configure IMU
		osDelay(500);
 800396e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003972:	f00a fd67 	bl	800e444 <osDelay>
		IMU_enableRotationVector(ROT_VEC_PERIOD);
 8003976:	2064      	movs	r0, #100	; 0x64
 8003978:	f7fe fb42 	bl	8002000 <IMU_enableRotationVector>
		osDelay(100);
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	f00a fd61 	bl	800e444 <osDelay>
		IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <InertialSensingTask+0xf0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <InertialSensingTask+0xf4>)
 8003988:	4619      	mov	r1, r3
 800398a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800398e:	f7fe fb45 	bl	800201c <IMU_enableActivityClassifier>

		// give some time for things to buffer
		// TODO: remove this to see if it still works fine
		osDelay(400);
 8003992:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003996:	f00a fd55 	bl	800e444 <osDelay>

		while(1){

			// grab packets
			osDelay(100);
 800399a:	2064      	movs	r0, #100	; 0x64
 800399c:	f00a fd52 	bl	800e444 <osDelay>
			osMessageQueueGet(rotationSampleQueueHandle, &inertialPacket.rotationMatrix, 0U, 100);
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <InertialSensingTask+0xf8>)
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	2364      	movs	r3, #100	; 0x64
 80039a6:	2200      	movs	r2, #0
 80039a8:	4925      	ldr	r1, [pc, #148]	; (8003a40 <InertialSensingTask+0xfc>)
 80039aa:	f00b fa3b 	bl	800ee24 <osMessageQueueGet>
			osMessageQueueGet(activitySampleQueueHandle, &inertialPacket.activity, 0U, 0);
 80039ae:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <InertialSensingTask+0x100>)
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	2200      	movs	r2, #0
 80039b6:	4924      	ldr	r1, [pc, #144]	; (8003a48 <InertialSensingTask+0x104>)
 80039b8:	f00b fa34 	bl	800ee24 <osMessageQueueGet>
			osMessageQueuePut(inertialSensingQueueHandle, &inertialPacket, 0U, 0);
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <InertialSensingTask+0x108>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	2300      	movs	r3, #0
 80039c2:	2200      	movs	r2, #0
 80039c4:	491e      	ldr	r1, [pc, #120]	; (8003a40 <InertialSensingTask+0xfc>)
 80039c6:	f00b f9b9 	bl	800ed3c <osMessageQueuePut>

			if( HAL_GPIO_ReadPin(IMU_INT_GPIO_Port, IMU_INT_Pin) == GPIO_PIN_RESET) IMU_dataAvailable();
 80039ca:	2120      	movs	r1, #32
 80039cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039d0:	f005 f8f8 	bl	8008bc4 <HAL_GPIO_ReadPin>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <InertialSensingTask+0x9a>
 80039da:	f7fe f84d 	bl	8001a78 <IMU_dataAvailable>

			// check for break condition
			evt = osThreadFlagsWait (0x00000002U, osFlagsWaitAny, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2002      	movs	r0, #2
 80039e4:	f00a fc9a 	bl	800e31c <osThreadFlagsWait>
 80039e8:	60f8      	str	r0, [r7, #12]

			// stop timer and put thread in idle if signal was reset
			if( (evt & 0x00000002U) == 0x00000002U){
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0d2      	beq.n	800399a <InertialSensingTask+0x56>

				// reset IMU
				IMU_softReset();
 80039f4:	f7fe faa2 	bl	8001f3c <IMU_softReset>

				// give some time to ensure no interrupts are handled
				osDelay(500);
 80039f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039fc:	f00a fd22 	bl	800e444 <osDelay>

				inertialEnabled = 0;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <InertialSensingTask+0xec>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]

				// empty queues
				osMessageQueueReset(inertialSensingQueueHandle);
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <InertialSensingTask+0x108>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f00b fa7c 	bl	800ef08 <osMessageQueueReset>
				osMessageQueueReset(activitySampleQueueHandle);
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <InertialSensingTask+0x100>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f00b fa77 	bl	800ef08 <osMessageQueueReset>
				osMessageQueueReset(rotationSampleQueueHandle);
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <InertialSensingTask+0xf8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f00b fa72 	bl	800ef08 <osMessageQueueReset>

				// clear any flags
				osThreadFlagsClear(0x0000000EU);
 8003a24:	200e      	movs	r0, #14
 8003a26:	f00a fc29 	bl	800e27c <osThreadFlagsClear>

				// exit and wait for next start condition
				break;
 8003a2a:	bf00      	nop
		osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003a2c:	e799      	b.n	8003962 <InertialSensingTask+0x1e>
 8003a2e:	bf00      	nop
 8003a30:	20000aca 	.word	0x20000aca
 8003a34:	20000068 	.word	0x20000068
 8003a38:	20027f38 	.word	0x20027f38
 8003a3c:	200278c4 	.word	0x200278c4
 8003a40:	20027efc 	.word	0x20027efc
 8003a44:	200278a4 	.word	0x200278a4
 8003a48:	20027f14 	.word	0x20027f14
 8003a4c:	200278b0 	.word	0x200278b0

08003a50 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	80fb      	strh	r3, [r7, #6]
    // if interrupt is triggered, sample!
	// todo: only do when inertial measurements are enabled?
	if((GPIO_Pin == IMU_INT_Pin) && (inertialEnabled == 1)){
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d105      	bne.n	8003a6c <HAL_GPIO_EXTI_Callback+0x1c>
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_GPIO_EXTI_Callback+0x24>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_GPIO_EXTI_Callback+0x1c>
		IMU_dataAvailable();
 8003a68:	f7fe f806 	bl	8001a78 <IMU_dataAvailable>
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000aca 	.word	0x20000aca

08003a78 <_Input>:
#include "string.h"

PulseProcessor pulse_processor;
GeometryBuilder geometry_builder;

void _Input(Input *self, uint8_t input_idx){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
	_GeometryBuilder(&geometry_builder);
 8003a84:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <_Input+0x3c>)
 8003a86:	f7fe fd71 	bl	800256c <_GeometryBuilder>
	_PulseProcessor(&pulse_processor, 1);
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	480a      	ldr	r0, [pc, #40]	; (8003ab8 <_Input+0x40>)
 8003a8e:	f000 ff19 	bl	80048c4 <_PulseProcessor>
	pulse_processor.next = &geometry_builder;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <_Input+0x40>)
 8003a94:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <_Input+0x3c>)
 8003a96:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	self->next = &pulse_processor;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a06      	ldr	r2, [pc, #24]	; (8003ab8 <_Input+0x40>)
 8003a9e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	self->input_idx_ = input_idx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408

}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20027f64 	.word	0x20027f64
 8003ab8:	20027fec 	.word	0x20027fec

08003abc <PulseHandlerTask>:
volatile uint32_t count = 0;
Pulse p;
void PulseHandlerTask(void *argument){
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
	while(1){
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8003acc:	2100      	movs	r1, #0
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f00a fc24 	bl	800e31c <osThreadFlagsWait>
		//Start interrupt
//		HAL_NVIC_EnableIRQ(COMP_IRQn);
		HAL_TIM_Base_Start(&htim16);
 8003ad4:	4818      	ldr	r0, [pc, #96]	; (8003b38 <PulseHandlerTask+0x7c>)
 8003ad6:	f009 f9bf 	bl	800ce58 <HAL_TIM_Base_Start>
		HAL_COMP_Start(&hcomp1);
 8003ada:	4818      	ldr	r0, [pc, #96]	; (8003b3c <PulseHandlerTask+0x80>)
 8003adc:	f004 f994 	bl	8007e08 <HAL_COMP_Start>
		_Input(&input0, 0);
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4817      	ldr	r0, [pc, #92]	; (8003b40 <PulseHandlerTask+0x84>)
 8003ae4:	f7ff ffc8 	bl	8003a78 <_Input>
		while(1){
			osMessageQueueGet (pulseQueueHandle, (void *) &p, NULL, osWaitForever);
 8003ae8:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <PulseHandlerTask+0x88>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	2200      	movs	r2, #0
 8003af2:	4915      	ldr	r1, [pc, #84]	; (8003b48 <PulseHandlerTask+0x8c>)
 8003af4:	f00b f996 	bl	800ee24 <osMessageQueueGet>
			consume_pulse(input0.next, &p);
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <PulseHandlerTask+0x84>)
 8003afa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003afe:	4912      	ldr	r1, [pc, #72]	; (8003b48 <PulseHandlerTask+0x8c>)
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 ff13 	bl	800492c <consume_pulse>

			evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f00a fc06 	bl	800e31c <osThreadFlagsWait>
 8003b10:	60f8      	str	r0, [r7, #12]
			if((evt & 0x00000002U) == 0x00000002U){
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0e5      	beq.n	8003ae8 <PulseHandlerTask+0x2c>
				//Stop interrupt
//				HAL_NVIC_DisableIRQ(COMP_IRQn);
				HAL_COMP_Stop(&hcomp1);
 8003b1c:	4807      	ldr	r0, [pc, #28]	; (8003b3c <PulseHandlerTask+0x80>)
 8003b1e:	f004 f9bd 	bl	8007e9c <HAL_COMP_Stop>
				HAL_TIM_Base_Stop(&htim16);
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <PulseHandlerTask+0x7c>)
 8003b24:	f009 f9c2 	bl	800ceac <HAL_TIM_Base_Stop>
				osMessageQueueReset(pulseQueueHandle);
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <PulseHandlerTask+0x88>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00b f9eb 	bl	800ef08 <osMessageQueueReset>
				break;
 8003b32:	bf00      	nop
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8003b34:	e7c8      	b.n	8003ac8 <PulseHandlerTask+0xc>
 8003b36:	bf00      	nop
 8003b38:	200284e4 	.word	0x200284e4
 8003b3c:	20027d18 	.word	0x20027d18
 8003b40:	200278c8 	.word	0x200278c8
 8003b44:	200277ac 	.word	0x200277ac
 8003b48:	20027f44 	.word	0x20027f44

08003b4c <get3D_location>:

VIVEVars vive_vars;
struct LogMessage statusMessage;
struct VIVEVars vive_loc_demo;

void get3D_location(void *arguments){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

	uint8_t blinkActive	= 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
	uint32_t blinkState;

	memcpy(&blinkState, arguments, sizeof(blinkState));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60bb      	str	r3, [r7, #8]

	// ensures semaphores are clear
	osSemaphoreAcquire(locCompleteHandle, 0);
 8003b5e:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <get3D_location+0x110>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f00a ffa5 	bl	800eab4 <osSemaphoreAcquire>
	osSemaphoreAcquire(locNotifyHandle, 0);
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <get3D_location+0x114>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f00a ff9f 	bl	800eab4 <osSemaphoreAcquire>

	osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <get3D_location+0x118>)
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4939      	ldr	r1, [pc, #228]	; (8003c68 <get3D_location+0x11c>)
 8003b82:	f00b f94f 	bl	800ee24 <osMessageQueueGet>
	if(statusMessage.blinkEnabled == 1){
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <get3D_location+0x11c>)
 8003b88:	789b      	ldrb	r3, [r3, #2]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d116      	bne.n	8003bbc <get3D_location+0x70>
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003b8e:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <get3D_location+0x118>)
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	2200      	movs	r2, #0
 8003b96:	4934      	ldr	r1, [pc, #208]	; (8003c68 <get3D_location+0x11c>)
 8003b98:	f00b f8d0 	bl	800ed3c <osMessageQueuePut>

		blinkActive = 1;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]

		// disable blink if active
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <get3D_location+0x120>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f00a fb06 	bl	800e1b8 <osThreadFlagsSet>

		// wait for blink thread to turn off
		//TODO: make safer by making a break condition
		osSemaphoreAcquire(locNotifyHandle, osWaitForever);
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <get3D_location+0x114>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00a ff7d 	bl	800eab4 <osSemaphoreAcquire>
 8003bba:	e006      	b.n	8003bca <get3D_location+0x7e>
	}
	else{
		osMessageQueuePut(statusQueueHandle, (void *) &statusMessage, 0U, 0);
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <get3D_location+0x118>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4928      	ldr	r1, [pc, #160]	; (8003c68 <get3D_location+0x11c>)
 8003bc6:	f00b f8b9 	bl	800ed3c <osMessageQueuePut>
	}

	// stop blink code if running and hold I2C bus from being used
	// 		the timeout is to ensure to turn off the thread if no signal is seen
	//TODO: optimize the timeout
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003bca:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <get3D_location+0x124>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f00a ff6e 	bl	800eab4 <osSemaphoreAcquire>

	// turn on 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000001U);
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <get3D_location+0x128>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f00a faea 	bl	800e1b8 <osThreadFlagsSet>

	// wait for completion
	osSemaphoreAcquire (locCompleteHandle, GET_3D_LOC_TIMEOUT);
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <get3D_location+0x110>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003bec:	4618      	mov	r0, r3
 8003bee:	f00a ff61 	bl	800eab4 <osSemaphoreAcquire>

#ifdef VIVE_THREAD_INFINITE_TIMEOUT
	osDelay(osWaitForever);
#endif

	if(blinkState == LIGHT_LAB_DEMO){
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d119      	bne.n	8003c2c <get3D_location+0xe0>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003bf8:	e00f      	b.n	8003c1a <get3D_location+0xce>
			if(osOK == osMessageQueueGet(viveQueueHandle, &vive_loc_demo, 0U, 1000)){
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <get3D_location+0x12c>)
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c02:	2200      	movs	r2, #0
 8003c04:	491d      	ldr	r1, [pc, #116]	; (8003c7c <get3D_location+0x130>)
 8003c06:	f00b f90d 	bl	800ee24 <osMessageQueueGet>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <get3D_location+0xce>
				APP_THREAD_SendBorderMessage(&vive_loc_demo, sizeof(VIVEVars), "capLoc");
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <get3D_location+0x134>)
 8003c12:	2118      	movs	r1, #24
 8003c14:	4819      	ldr	r0, [pc, #100]	; (8003c7c <get3D_location+0x130>)
 8003c16:	f010 fe87 	bl	8014928 <APP_THREAD_SendBorderMessage>
		while(osOK != osSemaphoreAcquire(lightingLabDemoEndHandle, 0)){
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <get3D_location+0x138>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f00a ff47 	bl	800eab4 <osSemaphoreAcquire>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <get3D_location+0xae>
//			}
		}
	}

	// release I2C handle
	osSemaphoreRelease(messageI2C_LockHandle);
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <get3D_location+0x124>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f00a ffa5 	bl	800eb80 <osSemaphoreRelease>

	// turn off 3D localization
	osThreadFlagsSet(pulseTaskHandle, 0x00000002U);
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <get3D_location+0x128>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f00a fabb 	bl	800e1b8 <osThreadFlagsSet>

	if(blinkActive){
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <get3D_location+0x108>
//		// wait for blink thread to turn off
//		//TODO: make safer by making a break condition
//		osSemaphoreAcquire(locNotifyHandle, osWaitForever);

		// enable blink thread
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <get3D_location+0x120>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00a fab2 	bl	800e1b8 <osThreadFlagsSet>
	}

}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20027cec 	.word	0x20027cec
 8003c60:	20027cf4 	.word	0x20027cf4
 8003c64:	200278c0 	.word	0x200278c0
 8003c68:	20027d10 	.word	0x20027d10
 8003c6c:	20027898 	.word	0x20027898
 8003c70:	200278ac 	.word	0x200278ac
 8003c74:	20027cf8 	.word	0x20027cf8
 8003c78:	200277b0 	.word	0x200277b0
 8003c7c:	200282bc 	.word	0x200282bc
 8003c80:	08017294 	.word	0x08017294
 8003c84:	200278b8 	.word	0x200278b8

08003c88 <enqueue_pulse>:


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
 8003c94:	4613      	mov	r3, r2
 8003c96:	803b      	strh	r3, [r7, #0]
	Pulse p_in = {self->input_idx_, start_time, len};
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003c9e:	723b      	strb	r3, [r7, #8]
 8003ca0:	887b      	ldrh	r3, [r7, #2]
 8003ca2:	817b      	strh	r3, [r7, #10]
 8003ca4:	883b      	ldrh	r3, [r7, #0]
 8003ca6:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueueHandle, (const void *) &p_in, NULL, 0);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <enqueue_pulse+0x38>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	f107 0108 	add.w	r1, r7, #8
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f00b f842 	bl	800ed3c <osMessageQueuePut>
//	count = osMessageQueueGetCount(pulseQueueHandle);
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	200277ac 	.word	0x200277ac

08003cc4 <InterProcessorTask>:
extern struct LogPacket sensorPacket;
extern struct LogMessage togLogMessageReceived;
static const struct LogMessage nullMessage = {0};
struct LogMessage commandToSend;

void InterProcessorTask(void *argument){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
	uint32_t evt = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
#ifndef DONGLE_CODE
	// ensure secondary processor is not active, trying to send data
	// 		note: this should only happen when debugging and resetting the main processor while secondary is logging
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003cd0:	4b76      	ldr	r3, [pc, #472]	; (8003eac <InterProcessorTask+0x1e8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f00a feeb 	bl	800eab4 <osSemaphoreAcquire>
	while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003cde:	bf00      	nop
 8003ce0:	2364      	movs	r3, #100	; 0x64
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2306      	movs	r3, #6
 8003ce6:	4a72      	ldr	r2, [pc, #456]	; (8003eb0 <InterProcessorTask+0x1ec>)
 8003ce8:	21e6      	movs	r1, #230	; 0xe6
 8003cea:	4872      	ldr	r0, [pc, #456]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003cec:	f005 f82a 	bl	8008d44 <HAL_I2C_Master_Transmit>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f4      	bne.n	8003ce0 <InterProcessorTask+0x1c>
	osSemaphoreRelease(messageI2C_LockHandle);
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <InterProcessorTask+0x1e8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00a ff40 	bl	800eb80 <osSemaphoreRelease>
#endif
	while(1){

		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295
 8003d04:	2100      	movs	r1, #0
 8003d06:	2001      	movs	r0, #1
 8003d08:	f00a fb08 	bl	800e31c <osThreadFlagsWait>
 8003d0c:	60f8      	str	r0, [r7, #12]

		// if signal was received successfully, start blink task
		if ( (evt & 0x00000001U) == 0x00000001U)  {
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f3      	beq.n	8003d00 <InterProcessorTask+0x3c>

			// tell secondary processor to start logging (in blocking mode)
			memcpy(&commandToSend, &togLogMessageReceived, sizeof(struct LogMessage));
 8003d18:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <InterProcessorTask+0x1f4>)
 8003d1a:	4a68      	ldr	r2, [pc, #416]	; (8003ebc <InterProcessorTask+0x1f8>)
 8003d1c:	6811      	ldr	r1, [r2, #0]
 8003d1e:	6019      	str	r1, [r3, #0]
 8003d20:	8892      	ldrh	r2, [r2, #4]
 8003d22:	809a      	strh	r2, [r3, #4]
//			osThreadFlagsClear(0x0000000FU);
			osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f00a fec1 	bl	800eab4 <osSemaphoreAcquire>
			//while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100) != HAL_OK);
			HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(togLogMessageReceived), 100);
 8003d32:	2364      	movs	r3, #100	; 0x64
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2306      	movs	r3, #6
 8003d38:	4a5f      	ldr	r2, [pc, #380]	; (8003eb8 <InterProcessorTask+0x1f4>)
 8003d3a:	21e6      	movs	r1, #230	; 0xe6
 8003d3c:	485d      	ldr	r0, [pc, #372]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003d3e:	f005 f801 	bl	8008d44 <HAL_I2C_Master_Transmit>

			osDelay(100);
 8003d42:	2064      	movs	r0, #100	; 0x64
 8003d44:	f00a fb7e 	bl	800e444 <osDelay>
			osSemaphoreRelease(messageI2C_LockHandle);
 8003d48:	4b58      	ldr	r3, [pc, #352]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f00a ff17 	bl	800eb80 <osSemaphoreRelease>

			// message passing until told to stop
			while(1){

				// grab an event flag if available
				evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	2100      	movs	r1, #0
 8003d58:	2006      	movs	r0, #6
 8003d5a:	f00a fadf 	bl	800e31c <osThreadFlagsWait>
 8003d5e:	60f8      	str	r0, [r7, #12]

				// if an interrupt is received indicating a message is waiting to be received
 				if( (evt & 0x00000004U) == 0x00000004U){
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d079      	beq.n	8003e5e <InterProcessorTask+0x19a>

 					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d6a:	4b50      	ldr	r3, [pc, #320]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d72:	4618      	mov	r0, r3
 8003d74:	f00a fe9e 	bl	800eab4 <osSemaphoreAcquire>

 					// send command packet to MCU
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003d78:	e00e      	b.n	8003d98 <InterProcessorTask+0xd4>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003d7a:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f00a fefe 	bl	800eb80 <osSemaphoreRelease>
 						osDelay(100);
 8003d84:	2064      	movs	r0, #100	; 0x64
 8003d86:	f00a fb5d 	bl	800e444 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003d8a:	4b48      	ldr	r3, [pc, #288]	; (8003eac <InterProcessorTask+0x1e8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d92:	4618      	mov	r0, r3
 8003d94:	f00a fe8e 	bl	800eab4 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &commandToSend, sizeof(struct LogMessage), 100) != HAL_OK){
 8003d98:	2364      	movs	r3, #100	; 0x64
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2306      	movs	r3, #6
 8003d9e:	4a46      	ldr	r2, [pc, #280]	; (8003eb8 <InterProcessorTask+0x1f4>)
 8003da0:	21e6      	movs	r1, #230	; 0xe6
 8003da2:	4844      	ldr	r0, [pc, #272]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003da4:	f004 ffce 	bl	8008d44 <HAL_I2C_Master_Transmit>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <InterProcessorTask+0xb6>
// 					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 					// ensure I2C is disabled
// 					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

 					// clear receiving flag
 					osThreadFlagsClear(0x00000008U);
 8003dae:	2008      	movs	r0, #8
 8003db0:	f00a fa64 	bl	800e27c <osThreadFlagsClear>
 					// grab packet from secondary MCU
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003db4:	e00e      	b.n	8003dd4 <InterProcessorTask+0x110>
 						osSemaphoreRelease(messageI2C_LockHandle);
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <InterProcessorTask+0x1e8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f00a fee0 	bl	800eb80 <osSemaphoreRelease>
 						osDelay(100);
 8003dc0:	2064      	movs	r0, #100	; 0x64
 8003dc2:	f00a fb3f 	bl	800e444 <osDelay>
 						osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003dc6:	4b39      	ldr	r3, [pc, #228]	; (8003eac <InterProcessorTask+0x1e8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f04f 31ff 	mov.w	r1, #4294967295
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f00a fe70 	bl	800eab4 <osSemaphoreAcquire>
 					while(HAL_I2C_Master_Receive_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &receivedPacket, sizeof(struct secondaryProcessorData)) != HAL_OK){
 8003dd4:	2358      	movs	r3, #88	; 0x58
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003dd8:	21e6      	movs	r1, #230	; 0xe6
 8003dda:	4836      	ldr	r0, [pc, #216]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003ddc:	f005 f99c 	bl	8009118 <HAL_I2C_Master_Receive_IT>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e7      	bne.n	8003db6 <InterProcessorTask+0xf2>
 					}
// 					taskEXIT_CRITICAL();
					// wait until packet is received
					evt = osThreadFlagsWait(0x0000000AU, osFlagsWaitAny, osWaitForever);
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	2100      	movs	r1, #0
 8003dec:	200a      	movs	r0, #10
 8003dee:	f00a fa95 	bl	800e31c <osThreadFlagsWait>
 8003df2:	60f8      	str	r0, [r7, #12]
					// ensure I2C is disabled
//					HAL_I2C_Master_Abort_IT(&hi2c1, SECONDARY_MCU_ADDRESS << 1);

					osSemaphoreRelease(messageI2C_LockHandle);
 8003df4:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <InterProcessorTask+0x1e8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f00a fec1 	bl	800eb80 <osSemaphoreRelease>


//					evt = osThreadFlagsWait(0x00000002U, osFlagsWaitAny, 0);
					// if thread was told to stop, break from while loop!
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d14e      	bne.n	8003ea6 <InterProcessorTask+0x1e2>

					// package received data into 100ms chunks and put in queue
					parsedPacket.tick_ms = receivedPacket.tick_ms;
 8003e08:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e0e:	6113      	str	r3, [r2, #16]
					parsedPacket.epoch = receivedPacket.epoch;
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e16:	6153      	str	r3, [r2, #20]

					for(int i = 0; i < 5; i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	e01c      	b.n	8003e58 <InterProcessorTask+0x194>
					{
						memcpy(&parsedPacket.temple, &receivedPacket.temp.temple[i], sizeof(struct thermopileData));
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e24:	4413      	add	r3, r2
 8003e26:	2208      	movs	r2, #8
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4826      	ldr	r0, [pc, #152]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e2c:	f012 f876 	bl	8015f1c <memcpy>
						memcpy(&parsedPacket.nose, &receivedPacket.temp.nose[i], sizeof(struct thermopileData));
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3305      	adds	r3, #5
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <InterProcessorTask+0x1fc>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4822      	ldr	r0, [pc, #136]	; (8003ec8 <InterProcessorTask+0x204>)
 8003e40:	f012 f86c 	bl	8015f1c <memcpy>

						// pass to master thread to handle
						osMessageQueuePut(interProcessorMsgQueueHandle, (void *) &parsedPacket, 0U, 0);
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <InterProcessorTask+0x208>)
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	491d      	ldr	r1, [pc, #116]	; (8003ec4 <InterProcessorTask+0x200>)
 8003e4e:	f00a ff75 	bl	800ed3c <osMessageQueuePut>
					for(int i = 0; i < 5; i++)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	dddf      	ble.n	8003e1e <InterProcessorTask+0x15a>

					}
				}

				// stop thread and clear queues
				if( (evt & 0x00000002U) == 0x00000002U){
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f43f af74 	beq.w	8003d52 <InterProcessorTask+0x8e>

					/// clear transmission flag
// 					osThreadFlagsClear(0x00000010U);
					// tell secondary processor to stop logging (in blocking mode)
					osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <InterProcessorTask+0x1e8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00a fe1e 	bl	800eab4 <osSemaphoreAcquire>
					while(HAL_I2C_Master_Transmit(&hi2c1, SECONDARY_MCU_ADDRESS << 1, (uint8_t *) &nullMessage, sizeof(togLogMessageReceived), 100) != HAL_OK);
 8003e78:	bf00      	nop
 8003e7a:	2364      	movs	r3, #100	; 0x64
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2306      	movs	r3, #6
 8003e80:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <InterProcessorTask+0x1ec>)
 8003e82:	21e6      	movs	r1, #230	; 0xe6
 8003e84:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <InterProcessorTask+0x1f0>)
 8003e86:	f004 ff5d 	bl	8008d44 <HAL_I2C_Master_Transmit>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f4      	bne.n	8003e7a <InterProcessorTask+0x1b6>
					osSemaphoreRelease(messageI2C_LockHandle);
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <InterProcessorTask+0x1e8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f00a fe73 	bl	800eb80 <osSemaphoreRelease>
					// wait until transmit is complete
//					evt = osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);

					// empty queue
					osMessageQueueReset(interProcessorMsgQueueHandle);
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <InterProcessorTask+0x208>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f00b f832 	bl	800ef08 <osMessageQueueReset>

					break;
 8003ea4:	e000      	b.n	8003ea8 <InterProcessorTask+0x1e4>
					if( (evt & 0x00000002U) == 0x00000002U ) break;
 8003ea6:	bf00      	nop
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8003ea8:	e72a      	b.n	8003d00 <InterProcessorTask+0x3c>
 8003eaa:	bf00      	nop
 8003eac:	200278ac 	.word	0x200278ac
 8003eb0:	080177d0 	.word	0x080177d0
 8003eb4:	20027ea8 	.word	0x20027ea8
 8003eb8:	2002832c 	.word	0x2002832c
 8003ebc:	200277b4 	.word	0x200277b4
 8003ec0:	200282d4 	.word	0x200282d4
 8003ec4:	20028334 	.word	0x20028334
 8003ec8:	2002833c 	.word	0x2002833c
 8003ecc:	200278bc 	.word	0x200278bc

08003ed0 <HAL_I2C_MasterTxCpltCallback>:
//	osThreadFlagsSet(interProcessorTaskHandle, 0x00000008U);
//}

volatile uint8_t test_1 = 0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	// notify sending thread that message has been sent
//	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
	osThreadFlagsSet(interProcTaskHandle, 0x00000010U);
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2110      	movs	r1, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f00a f96a 	bl	800e1b8 <osThreadFlagsSet>
	test_1 = 1;
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20027cf0 	.word	0x20027cf0
 8003ef8:	20000acb 	.word	0x20000acb

08003efc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	// notify receiving thread that a message has been received
	osThreadFlagsSet(interProcTaskHandle, 0x00000008U);
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2108      	movs	r1, #8
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f00a f954 	bl	800e1b8 <osThreadFlagsSet>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20027cf0 	.word	0x20027cf0

08003f1c <setup_LP5523>:
const uint8_t packet_array[9] = {LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN,LOG_EN};
uint8_t deviceAddress;
uint8_t led_PWM[9] = {0};
uint8_t packet;

void setup_LP5523(uint8_t ADDR){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af04      	add	r7, sp, #16
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	4b2e      	ldr	r3, [pc, #184]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f2e:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <setup_LP5523+0xd0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f00a fdbb 	bl	800eab4 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f44:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b299      	uxth	r1, r3
 8003f4a:	2364      	movs	r3, #100	; 0x64
 8003f4c:	9302      	str	r3, [sp, #8]
 8003f4e:	2301      	movs	r3, #1
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2301      	movs	r3, #1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4826      	ldr	r0, [pc, #152]	; (8003ff4 <setup_LP5523+0xd8>)
 8003f5c:	f005 f94c 	bl	80091f8 <HAL_I2C_Mem_Write>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f62:	224f      	movs	r2, #79	; 0x4f
 8003f64:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT);
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	2364      	movs	r3, #100	; 0x64
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	2301      	movs	r3, #1
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <setup_LP5523+0xd4>)
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	2236      	movs	r2, #54	; 0x36
 8003f7c:	481d      	ldr	r0, [pc, #116]	; (8003ff4 <setup_LP5523+0xd8>)
 8003f7e:	f005 f93b 	bl	80091f8 <HAL_I2C_Mem_Write>

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT);
 8003f82:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <setup_LP5523+0xcc>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b299      	uxth	r1, r3
 8003f88:	2364      	movs	r3, #100	; 0x64
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	2309      	movs	r3, #9
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <setup_LP5523+0xdc>)
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2301      	movs	r3, #1
 8003f96:	2216      	movs	r2, #22
 8003f98:	4816      	ldr	r0, [pc, #88]	; (8003ff4 <setup_LP5523+0xd8>)
 8003f9a:	f005 f92d 	bl	80091f8 <HAL_I2C_Mem_Write>

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <setup_LP5523+0xcc>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	2364      	movs	r3, #100	; 0x64
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	2309      	movs	r3, #9
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <setup_LP5523+0xe0>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	2226      	movs	r2, #38	; 0x26
 8003fb4:	480f      	ldr	r0, [pc, #60]	; (8003ff4 <setup_LP5523+0xd8>)
 8003fb6:	f005 f91f 	bl	80091f8 <HAL_I2C_Mem_Write>

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT);
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <setup_LP5523+0xcc>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b299      	uxth	r1, r3
 8003fc0:	2364      	movs	r3, #100	; 0x64
 8003fc2:	9302      	str	r3, [sp, #8]
 8003fc4:	2309      	movs	r3, #9
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <setup_LP5523+0xe4>)
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2301      	movs	r3, #1
 8003fce:	2206      	movs	r2, #6
 8003fd0:	4808      	ldr	r0, [pc, #32]	; (8003ff4 <setup_LP5523+0xd8>)
 8003fd2:	f005 f911 	bl	80091f8 <HAL_I2C_Mem_Write>

	osSemaphoreRelease(messageI2C_LockHandle);
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <setup_LP5523+0xd0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f00a fdd0 	bl	800eb80 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	2002834d 	.word	0x2002834d
 8003fec:	200278ac 	.word	0x200278ac
 8003ff0:	2002834c 	.word	0x2002834c
 8003ff4:	20027ea8 	.word	0x20027ea8
 8003ff8:	20000ae4 	.word	0x20000ae4
 8003ffc:	2000006c 	.word	0x2000006c
 8004000:	080177d8 	.word	0x080177d8

08004004 <FrontLightsSet>:
//
//  return true;
//}


void FrontLightsSet(union ColorComplex *setColors){
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af04      	add	r7, sp, #16
 800400a:	6078      	str	r0, [r7, #4]

	memcpy(led_left_PWM, setColors, 9);
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <FrontLightsSet+0x78>)
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6810      	ldr	r0, [r2, #0]
 8004012:	6851      	ldr	r1, [r2, #4]
 8004014:	c303      	stmia	r3!, {r0, r1}
 8004016:	7a12      	ldrb	r2, [r2, #8]
 8004018:	701a      	strb	r2, [r3, #0]
	memcpy(led_right_PWM, &(setColors->color[9]), 9);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0209 	add.w	r2, r3, #9
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <FrontLightsSet+0x7c>)
 8004022:	6810      	ldr	r0, [r2, #0]
 8004024:	6851      	ldr	r1, [r2, #4]
 8004026:	c303      	stmia	r3!, {r0, r1}
 8004028:	7a12      	ldrb	r2, [r2, #8]
 800402a:	701a      	strb	r2, [r3, #0]
#ifndef DONGLE_CODE
	osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <FrontLightsSet+0x80>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f04f 31ff 	mov.w	r1, #4294967295
 8004034:	4618      	mov	r0, r3
 8004036:	f00a fd3d 	bl	800eab4 <osSemaphoreAcquire>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800403a:	2364      	movs	r3, #100	; 0x64
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	2309      	movs	r3, #9
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <FrontLightsSet+0x78>)
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	2301      	movs	r3, #1
 8004048:	2216      	movs	r2, #22
 800404a:	2168      	movs	r1, #104	; 0x68
 800404c:	480e      	ldr	r0, [pc, #56]	; (8004088 <FrontLightsSet+0x84>)
 800404e:	f005 f8d3 	bl	80091f8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8004052:	2364      	movs	r3, #100	; 0x64
 8004054:	9302      	str	r3, [sp, #8]
 8004056:	2309      	movs	r3, #9
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <FrontLightsSet+0x7c>)
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2301      	movs	r3, #1
 8004060:	2216      	movs	r2, #22
 8004062:	216a      	movs	r1, #106	; 0x6a
 8004064:	4808      	ldr	r0, [pc, #32]	; (8004088 <FrontLightsSet+0x84>)
 8004066:	f005 f8c7 	bl	80091f8 <HAL_I2C_Mem_Write>
	osSemaphoreRelease(messageI2C_LockHandle);
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <FrontLightsSet+0x80>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f00a fd86 	bl	800eb80 <osSemaphoreRelease>
	    	else
	    	{
	    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	    	}
#endif
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000acc 	.word	0x20000acc
 8004080:	20000ad8 	.word	0x20000ad8
 8004084:	200278ac 	.word	0x200278ac
 8004088:	20027ea8 	.word	0x20027ea8

0800408c <ThreadFrontLightsTask>:
    };

struct test_color tempComplexLight;

void ThreadFrontLightsTask(void *argument)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af04      	add	r7, sp, #16
 8004092:	6078      	str	r0, [r7, #4]

//	osDelay(1); // added delay because it seems that semaphores arent fully initialized and code stalls when releasing semaphore
//#ifndef DONGLE_CODE
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8004094:	2034      	movs	r0, #52	; 0x34
 8004096:	f7ff ff41 	bl	8003f1c <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 800409a:	2035      	movs	r0, #53	; 0x35
 800409c:	f7ff ff3e 	bl	8003f1c <setup_LP5523>

	uint32_t lightsSimpleMessageReceived;

	while(1){

		lightsSimpleMessageReceived = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
//		tempComplexLight.right_side_r = 150;
//		tempComplexLight.right_top_r = 150;
//
//		FrontLightsSet(&tempComplexLight);

		osDelay(1);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f00a f9cd 	bl	800e444 <osDelay>

		osMessageQueueGet(lightsSimpleQueueHandle, &lightsSimpleMessageReceived, 0U, osWaitForever);
 80040aa:	4b2f      	ldr	r3, [pc, #188]	; (8004168 <ThreadFrontLightsTask+0xdc>)
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	f107 010c 	add.w	r1, r7, #12
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	2200      	movs	r2, #0
 80040b8:	f00a feb4 	bl	800ee24 <osMessageQueueGet>

		for(int i = 0; i<= 8; i++){
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e011      	b.n	80040e6 <ThreadFrontLightsTask+0x5a>
			led_left_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	425b      	negs	r3, r3
 80040ce:	b2d9      	uxtb	r1, r3
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <ThreadFrontLightsTask+0xe0>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	460a      	mov	r2, r1
 80040d8:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3301      	adds	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	ddea      	ble.n	80040c2 <ThreadFrontLightsTask+0x36>
		}

		for(int i = 0; i<= 8; i++){
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e011      	b.n	8004116 <ThreadFrontLightsTask+0x8a>
			led_right_PWM[i] = (lightsSimpleMessageReceived & 0x01) * 255;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	425b      	negs	r3, r3
 80040fe:	b2d9      	uxtb	r1, r3
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <ThreadFrontLightsTask+0xe4>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	460a      	mov	r2, r1
 8004108:	701a      	strb	r2, [r3, #0]
			lightsSimpleMessageReceived = lightsSimpleMessageReceived >> 1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i<= 8; i++){
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3301      	adds	r3, #1
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b08      	cmp	r3, #8
 800411a:	ddea      	ble.n	80040f2 <ThreadFrontLightsTask+0x66>
		}

		osSemaphoreAcquire(messageI2C_LockHandle, osWaitForever);
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <ThreadFrontLightsTask+0xe8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f04f 31ff 	mov.w	r1, #4294967295
 8004124:	4618      	mov	r0, r3
 8004126:	f00a fcc5 	bl	800eab4 <osSemaphoreAcquire>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT);
 800412a:	2364      	movs	r3, #100	; 0x64
 800412c:	9302      	str	r3, [sp, #8]
 800412e:	2309      	movs	r3, #9
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <ThreadFrontLightsTask+0xe0>)
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2301      	movs	r3, #1
 8004138:	2216      	movs	r2, #22
 800413a:	2168      	movs	r1, #104	; 0x68
 800413c:	480e      	ldr	r0, [pc, #56]	; (8004178 <ThreadFrontLightsTask+0xec>)
 800413e:	f005 f85b 	bl	80091f8 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT);
 8004142:	2364      	movs	r3, #100	; 0x64
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	2309      	movs	r3, #9
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <ThreadFrontLightsTask+0xe4>)
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2301      	movs	r3, #1
 8004150:	2216      	movs	r2, #22
 8004152:	216a      	movs	r1, #106	; 0x6a
 8004154:	4808      	ldr	r0, [pc, #32]	; (8004178 <ThreadFrontLightsTask+0xec>)
 8004156:	f005 f84f 	bl	80091f8 <HAL_I2C_Mem_Write>
		osSemaphoreRelease(messageI2C_LockHandle);
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <ThreadFrontLightsTask+0xe8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f00a fd0e 	bl	800eb80 <osSemaphoreRelease>
		lightsSimpleMessageReceived = 0;
 8004164:	e79c      	b.n	80040a0 <ThreadFrontLightsTask+0x14>
 8004166:	bf00      	nop
 8004168:	200278b4 	.word	0x200278b4
 800416c:	20000acc 	.word	0x20000acc
 8004170:	20000ad8 	.word	0x20000ad8
 8004174:	200278ac 	.word	0x200278ac
 8004178:	20027ea8 	.word	0x20027ea8

0800417c <LL_RCC_LSE_SetDriveCapability>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f023 0218 	bic.w	r2, r3, #24
 8004190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041ac:	f002 faae 	bl	800670c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041b0:	f000 f81c 	bl	80041ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041b4:	f7fe fcb0 	bl	8002b18 <MX_GPIO_Init>
  MX_DMA_Init();
 80041b8:	f7fd fc13 	bl	80019e2 <MX_DMA_Init>
  MX_ADC1_Init();
 80041bc:	f7fc fe40 	bl	8000e40 <MX_ADC1_Init>
  MX_RTC_Init();
 80041c0:	f000 fed6 	bl	8004f70 <MX_RTC_Init>
  MX_TIM2_Init();
 80041c4:	f001 fd14 	bl	8005bf0 <MX_TIM2_Init>
  MX_RF_Init();
 80041c8:	f000 feba 	bl	8004f40 <MX_RF_Init>
  MX_I2C1_Init();
 80041cc:	f7ff fb42 	bl	8003854 <MX_I2C1_Init>
  MX_COMP1_Init();
 80041d0:	f7fd faf4 	bl	80017bc <MX_COMP1_Init>
  MX_TIM16_Init();
 80041d4:	f001 fd82 	bl	8005cdc <MX_TIM16_Init>
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  MX_TSC_Init();
 80041d8:	f002 f9d6 	bl	8006588 <MX_TSC_Init>

//  HAL_IWDG_Refresh(&hiwdg);

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80041dc:	f009 fed8 	bl	800df90 <osKernelInitialize>
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80041e0:	f7fd f85e 	bl	80012a0 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 80041e4:	f009 ff08 	bl	800dff8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80041e8:	e7fe      	b.n	80041e8 <main+0x40>
	...

080041ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0ae      	sub	sp, #184	; 0xb8
 80041f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041f6:	2248      	movs	r2, #72	; 0x48
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f011 fe99 	bl	8015f32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]
 8004210:	615a      	str	r2, [r3, #20]
 8004212:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	2250      	movs	r2, #80	; 0x50
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f011 fe89 	bl	8015f32 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422e:	f043 0310 	orr.w	r3, r3, #16
 8004232:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423e:	f043 0303 	orr.w	r3, r3, #3
 8004242:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004244:	2000      	movs	r0, #0
 8004246:	f7ff ff99 	bl	800417c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <SystemClock_Config+0x144>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004252:	4a37      	ldr	r2, [pc, #220]	; (8004330 <SystemClock_Config+0x144>)
 8004254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <SystemClock_Config+0x144>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8004266:	230f      	movs	r3, #15
 8004268:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800426a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800426e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004270:	2301      	movs	r3, #1
 8004272:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004278:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800427a:	2340      	movs	r3, #64	; 0x40
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004280:	2305      	movs	r3, #5
 8004282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800428c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004290:	4618      	mov	r0, r3
 8004292:	f007 f81d 	bl	800b2d0 <HAL_RCC_OscConfig>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800429c:	f000 f85c 	bl	8004358 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80042a0:	236f      	movs	r3, #111	; 0x6f
 80042a2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80042a4:	2302      	movs	r3, #2
 80042a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042a8:	2300      	movs	r3, #0
 80042aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042ac:	2300      	movs	r3, #0
 80042ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042b0:	2300      	movs	r3, #0
 80042b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80042b4:	2300      	movs	r3, #0
 80042b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80042b8:	2300      	movs	r3, #0
 80042ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f007 fb62 	bl	800b98c <HAL_RCC_ClockConfig>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80042ce:	f000 f843 	bl	8004358 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80042d2:	f643 4304 	movw	r3, #15364	; 0x3c04
 80042d6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80042d8:	2306      	movs	r3, #6
 80042da:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80042dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80042e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80042e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80042ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80042ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80042fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 8004306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800430c:	2302      	movs	r3, #2
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8004310:	2300      	movs	r3, #0
 8004312:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f007 ff8f 	bl	800c23a <HAL_RCCEx_PeriphCLKConfig>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8004322:	f000 f819 	bl	8004358 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004326:	bf00      	nop
 8004328:	37b8      	adds	r7, #184	; 0xb8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	58000400 	.word	0x58000400

08004334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004346:	f002 fa01 	bl	800674c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40012c00 	.word	0x40012c00

08004358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <MasterThreadTask>:
uint8_t lightLabDemoEnabled = 0;
//struct SystemStatus systemStatus = { 0 };
uint32_t startTime = 0;
uint32_t viveStateVar = 0;

void MasterThreadTask(void *argument) {
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b085      	sub	sp, #20
 800436c:	af02      	add	r7, sp, #8
 800436e:	6078      	str	r0, [r7, #4]

#ifndef DONGLE_CODE
	touchSensingStart();
 8004370:	f001 fed4 	bl	800611c <touchSensingStart>
#endif

	while (1) {
		// check if the queue has a new message (a command to start/stop logging)
		//   .... this function waits forever
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 8004374:	4b5c      	ldr	r3, [pc, #368]	; (80044e8 <MasterThreadTask+0x180>)
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	2200      	movs	r2, #0
 800437e:	495b      	ldr	r1, [pc, #364]	; (80044ec <MasterThreadTask+0x184>)
 8004380:	f00a fd50 	bl	800ee24 <osMessageQueueGet>
#endif



		// pass variable to share system state
		osMessageQueueReset(statusQueueHandle);
 8004384:	4b5a      	ldr	r3, [pc, #360]	; (80044f0 <MasterThreadTask+0x188>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f00a fdbd 	bl	800ef08 <osMessageQueueReset>
		osMessageQueuePut(statusQueueHandle, (void*) &nullStatusMessage, 0U, 0);
 800438e:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <MasterThreadTask+0x188>)
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	2200      	movs	r2, #0
 8004396:	4957      	ldr	r1, [pc, #348]	; (80044f4 <MasterThreadTask+0x18c>)
 8004398:	f00a fcd0 	bl	800ed3c <osMessageQueuePut>

		// if the received command enables logging
		//    otherwise, skip if statement and wait for an enabling command
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 800439c:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <MasterThreadTask+0x190>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d141      	bne.n	8004428 <MasterThreadTask+0xc0>
 80043a4:	4b51      	ldr	r3, [pc, #324]	; (80044ec <MasterThreadTask+0x184>)
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d13d      	bne.n	8004428 <MasterThreadTask+0xc0>
			logEnabled = 1;
 80043ac:	4b52      	ldr	r3, [pc, #328]	; (80044f8 <MasterThreadTask+0x190>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]

			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80043b2:	4b52      	ldr	r3, [pc, #328]	; (80044fc <MasterThreadTask+0x194>)
 80043b4:	4a4d      	ldr	r2, [pc, #308]	; (80044ec <MasterThreadTask+0x184>)
 80043b6:	6811      	ldr	r1, [r2, #0]
 80043b8:	6019      	str	r1, [r3, #0]
 80043ba:	8892      	ldrh	r2, [r2, #4]
 80043bc:	809a      	strh	r2, [r3, #4]

			// start all sensor subsystems
			masterEnterRoutine();
 80043be:	f000 f92f 	bl	8004620 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 80043c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043c6:	f00a f83d 	bl	800e444 <osDelay>

			while (1) {
				startTime = HAL_GetTick();
 80043ca:	f002 f9d1 	bl	8006770 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <MasterThreadTask+0x198>)
 80043d2:	601a      	str	r2, [r3, #0]
				/**********************************************************************************/
				/*.... WAIT UNTIL DATA PACKET IS READY.....*/
				/**********************************************************************************/

				// grab data from sensor thread queues
				grabSensorData();
 80043d4:	f000 f8a6 	bl	8004524 <grabSensorData>

				// add all sensor data into a packet
				packetizeData(&sensorPacket, &blinkMsgReceived, &secondaryProcessorMsgReceived, &inertialMsgReceived,
 80043d8:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <MasterThreadTask+0x19c>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <MasterThreadTask+0x1a0>)
 80043de:	4a4b      	ldr	r2, [pc, #300]	; (800450c <MasterThreadTask+0x1a4>)
 80043e0:	494b      	ldr	r1, [pc, #300]	; (8004510 <MasterThreadTask+0x1a8>)
 80043e2:	484c      	ldr	r0, [pc, #304]	; (8004514 <MasterThreadTask+0x1ac>)
 80043e4:	f000 f9a4 	bl	8004730 <packetizeData>

				/**********************************************************************************/
				/*.... SEND PACKET TO BORDER ROUTER .....*/
				/**********************************************************************************/

				APP_THREAD_SendBorderPacket(&sensorPacket);
 80043e8:	484a      	ldr	r0, [pc, #296]	; (8004514 <MasterThreadTask+0x1ac>)
 80043ea:	f010 fab7 	bl	801495c <APP_THREAD_SendBorderPacket>
				/*.... CHECK IF NODE HAS BEEN REQUESTED TO STOP .....*/
				/**********************************************************************************/

				// check if the queue has a new message (potentially a command to stop logging)
				//   otherwise, timeout
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK) {
 80043ee:	4b3e      	ldr	r3, [pc, #248]	; (80044e8 <MasterThreadTask+0x180>)
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	2300      	movs	r3, #0
 80043f4:	2200      	movs	r2, #0
 80043f6:	493d      	ldr	r1, [pc, #244]	; (80044ec <MasterThreadTask+0x184>)
 80043f8:	f00a fd14 	bl	800ee24 <osMessageQueueGet>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <MasterThreadTask+0xaa>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 8004402:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <MasterThreadTask+0x184>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <MasterThreadTask+0xaa>

						masterExitRoutine();
 800440a:	f000 f957 	bl	80046bc <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 800440e:	bf00      	nop
		if (logEnabled == 0 && togLogMessageReceived.logStatus == ENABLE_LOG) {
 8004410:	e068      	b.n	80044e4 <MasterThreadTask+0x17c>
					}
				}

				// add delay to wait for next transmission period
				osDelay(PACKET_SEND_PERIOD - (HAL_GetTick() - startTime));
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <MasterThreadTask+0x198>)
 8004414:	681c      	ldr	r4, [r3, #0]
 8004416:	f002 f9ab 	bl	8006770 <HAL_GetTick>
 800441a:	4603      	mov	r3, r0
 800441c:	1ae3      	subs	r3, r4, r3
 800441e:	3364      	adds	r3, #100	; 0x64
 8004420:	4618      	mov	r0, r3
 8004422:	f00a f80f 	bl	800e444 <osDelay>
				startTime = HAL_GetTick();
 8004426:	e7d0      	b.n	80043ca <MasterThreadTask+0x62>

			}
		}
		else if (logEnabled == 1 && togLogMessageReceived.logStatus == DISABLE_LOG) {
 8004428:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <MasterThreadTask+0x190>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d109      	bne.n	8004444 <MasterThreadTask+0xdc>
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <MasterThreadTask+0x184>)
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <MasterThreadTask+0xdc>
			logEnabled = 0;
 8004438:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <MasterThreadTask+0x190>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
			masterExitRoutine();
 800443e:	f000 f93d 	bl	80046bc <masterExitRoutine>
 8004442:	e04f      	b.n	80044e4 <MasterThreadTask+0x17c>
		}
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 8004444:	4b34      	ldr	r3, [pc, #208]	; (8004518 <MasterThreadTask+0x1b0>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d139      	bne.n	80044c0 <MasterThreadTask+0x158>
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <MasterThreadTask+0x184>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d135      	bne.n	80044c0 <MasterThreadTask+0x158>
			// keep record of this message so new message doesn't overwrite
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <MasterThreadTask+0x194>)
 8004456:	4a25      	ldr	r2, [pc, #148]	; (80044ec <MasterThreadTask+0x184>)
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	6019      	str	r1, [r3, #0]
 800445c:	8892      	ldrh	r2, [r2, #4]
 800445e:	809a      	strh	r2, [r3, #4]

			// if requesting another feature to be enabled but the logging is still enabled
			if(logEnabled == 1){
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <MasterThreadTask+0x190>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d104      	bne.n	8004472 <MasterThreadTask+0x10a>
				logEnabled = 0;
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <MasterThreadTask+0x190>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
				masterExitRoutine();
 800446e:	f000 f925 	bl	80046bc <masterExitRoutine>
			}

			lightLabDemoEnabled = LIGHT_LAB_DEMO;
 8004472:	4b29      	ldr	r3, [pc, #164]	; (8004518 <MasterThreadTask+0x1b0>)
 8004474:	2202      	movs	r2, #2
 8004476:	701a      	strb	r2, [r3, #0]

			// enable functionality
			osSemaphoreAcquire(lightingLabDemoEndHandle, 0);
 8004478:	4b28      	ldr	r3, [pc, #160]	; (800451c <MasterThreadTask+0x1b4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f00a fb18 	bl	800eab4 <osSemaphoreAcquire>
			viveStateVar = lightLabDemoEnabled;
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <MasterThreadTask+0x1b0>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b25      	ldr	r3, [pc, #148]	; (8004520 <MasterThreadTask+0x1b8>)
 800448c:	601a      	str	r2, [r3, #0]

			// start all sensor subsystems
			masterEnterRoutine();
 800448e:	f000 f8c7 	bl	8004620 <masterEnterRoutine>

			// add a delay to ensure all threads are given enough time to collect initial samples
			osDelay(500);
 8004492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004496:	f009 ffd5 	bl	800e444 <osDelay>

			while(1){
				if (osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever) == osOK) {
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <MasterThreadTask+0x180>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	2200      	movs	r2, #0
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <MasterThreadTask+0x184>)
 80044a6:	f00a fcbd 	bl	800ee24 <osMessageQueueGet>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f4      	bne.n	800449a <MasterThreadTask+0x132>
					// disable threads
					if (togLogMessageReceived.status == DISABLE_SENSING) {
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <MasterThreadTask+0x184>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <MasterThreadTask+0x132>

						masterExitRoutine();
 80044b8:	f000 f900 	bl	80046bc <masterExitRoutine>

						// break out of first while loop and wait until told to start logging again
						break;
 80044bc:	bf00      	nop
		else if (lightLabDemoEnabled == 0 && togLogMessageReceived.status == LIGHT_LAB_DEMO){
 80044be:	e011      	b.n	80044e4 <MasterThreadTask+0x17c>
					}
				}
			}
		}
		else if ((lightLabDemoEnabled == LIGHT_LAB_DEMO) && (togLogMessageReceived.status == DISABLE_LOG)){
 80044c0:	4b15      	ldr	r3, [pc, #84]	; (8004518 <MasterThreadTask+0x1b0>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f47f af55 	bne.w	8004374 <MasterThreadTask+0xc>
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <MasterThreadTask+0x184>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f47f af50 	bne.w	8004374 <MasterThreadTask+0xc>

			osSemaphoreRelease(lightingLabDemoEndHandle);
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <MasterThreadTask+0x1b4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f00a fb51 	bl	800eb80 <osSemaphoreRelease>


			lightLabDemoEnabled = 0;
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <MasterThreadTask+0x1b0>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U,
 80044e4:	e746      	b.n	8004374 <MasterThreadTask+0xc>
 80044e6:	bf00      	nop
 80044e8:	20027ce4 	.word	0x20027ce4
 80044ec:	200277b4 	.word	0x200277b4
 80044f0:	200278c0 	.word	0x200278c0
 80044f4:	080177e4 	.word	0x080177e4
 80044f8:	20000aed 	.word	0x20000aed
 80044fc:	2002788c 	.word	0x2002788c
 8004500:	20000af0 	.word	0x20000af0
 8004504:	200283d0 	.word	0x200283d0
 8004508:	200283e8 	.word	0x200283e8
 800450c:	20028424 	.word	0x20028424
 8004510:	20028364 	.word	0x20028364
 8004514:	200277c0 	.word	0x200277c0
 8004518:	20000aee 	.word	0x20000aee
 800451c:	200278b8 	.word	0x200278b8
 8004520:	20000af4 	.word	0x20000af4

08004524 <grabSensorData>:
		}

	}
}

void grabSensorData(void) {
 8004524:	b5b0      	push	{r4, r5, r7, lr}
 8004526:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004528:	4b30      	ldr	r3, [pc, #192]	; (80045ec <grabSensorData+0xc8>)
 800452a:	789b      	ldrb	r3, [r3, #2]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d111      	bne.n	8004554 <grabSensorData+0x30>
		if (osOK != osMessageQueueGet(blinkMsgQueueHandle, &blinkMsgReceived, 0U, 0)) {
 8004530:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <grabSensorData+0xcc>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	2200      	movs	r2, #0
 8004538:	492e      	ldr	r1, [pc, #184]	; (80045f4 <grabSensorData+0xd0>)
 800453a:	f00a fc73 	bl	800ee24 <osMessageQueueGet>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <grabSensorData+0x30>
			memcpy(&blinkMsgReceived, &nullBlinkMsg, sizeof(struct blinkData));
 8004544:	4a2b      	ldr	r2, [pc, #172]	; (80045f4 <grabSensorData+0xd0>)
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <grabSensorData+0xd4>)
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	236c      	movs	r3, #108	; 0x6c
 800454e:	461a      	mov	r2, r3
 8004550:	f011 fce4 	bl	8015f1c <memcpy>
		}
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <grabSensorData+0xc8>)
 8004556:	78db      	ldrb	r3, [r3, #3]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d113      	bne.n	8004584 <grabSensorData+0x60>
		if (osOK != osMessageQueueGet(interProcessorMsgQueueHandle, &secondaryProcessorMsgReceived, 0U, 0)) {
 800455c:	4b27      	ldr	r3, [pc, #156]	; (80045fc <grabSensorData+0xd8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	2300      	movs	r3, #0
 8004562:	2200      	movs	r2, #0
 8004564:	4926      	ldr	r1, [pc, #152]	; (8004600 <grabSensorData+0xdc>)
 8004566:	f00a fc5d 	bl	800ee24 <osMessageQueueGet>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <grabSensorData+0x60>
			memcpy(&secondaryProcessorMsgReceived, &nullSecondaryProcessorMsgReceived,
 8004570:	4a23      	ldr	r2, [pc, #140]	; (8004600 <grabSensorData+0xdc>)
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <grabSensorData+0xe0>)
 8004574:	4614      	mov	r4, r2
 8004576:	461d      	mov	r5, r3
 8004578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800457a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800457c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004580:	e884 0003 	stmia.w	r4, {r0, r1}
					sizeof(struct parsedSecondaryProcessorPacket));
		}
	}

	if ((prevLogMessage.positionEnabled == SENSOR_ENABLE)) {
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <grabSensorData+0xc8>)
 8004586:	795b      	ldrb	r3, [r3, #5]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d113      	bne.n	80045b4 <grabSensorData+0x90>
		if (osOK != osMessageQueueGet(viveQueueHandle, &vive_loc, 0U, 0)) {
 800458c:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <grabSensorData+0xe4>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	2200      	movs	r2, #0
 8004594:	491d      	ldr	r1, [pc, #116]	; (800460c <grabSensorData+0xe8>)
 8004596:	f00a fc45 	bl	800ee24 <osMessageQueueGet>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <grabSensorData+0x90>
			memcpy(&vive_loc, &nullViveMsgReceived, sizeof(VIVEVars));
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <grabSensorData+0xe8>)
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <grabSensorData+0xec>)
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045b0:	e884 0003 	stmia.w	r4, {r0, r1}

		}
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <grabSensorData+0xc8>)
 80045b6:	791b      	ldrb	r3, [r3, #4]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d115      	bne.n	80045e8 <grabSensorData+0xc4>
		if (osOK != osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, 0)) {
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <grabSensorData+0xf0>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	2200      	movs	r2, #0
 80045c4:	4914      	ldr	r1, [pc, #80]	; (8004618 <grabSensorData+0xf4>)
 80045c6:	f00a fc2d 	bl	800ee24 <osMessageQueueGet>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <grabSensorData+0xc4>
			memcpy(&inertialMsgReceived, &nullInertialMsgReceived, sizeof(struct inertialData));
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <grabSensorData+0xf4>)
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <grabSensorData+0xf8>)
 80045d4:	4614      	mov	r4, r2
 80045d6:	461d      	mov	r5, r3
 80045d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045e4:	e884 0003 	stmia.w	r4, {r0, r1}
		}
	}
}
 80045e8:	bf00      	nop
 80045ea:	bdb0      	pop	{r4, r5, r7, pc}
 80045ec:	2002788c 	.word	0x2002788c
 80045f0:	20027d00 	.word	0x20027d00
 80045f4:	20028364 	.word	0x20028364
 80045f8:	080177ec 	.word	0x080177ec
 80045fc:	200278bc 	.word	0x200278bc
 8004600:	20028424 	.word	0x20028424
 8004604:	08017858 	.word	0x08017858
 8004608:	200277b0 	.word	0x200277b0
 800460c:	200283d0 	.word	0x200283d0
 8004610:	08017898 	.word	0x08017898
 8004614:	200278b0 	.word	0x200278b0
 8004618:	200283e8 	.word	0x200283e8
 800461c:	08017870 	.word	0x08017870

08004620 <masterEnterRoutine>:

void masterEnterRoutine(void) {
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <masterEnterRoutine+0x80>)
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <masterEnterRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000001U);
 800462c:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <masterEnterRoutine+0x84>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f009 fdc0 	bl	800e1b8 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <masterEnterRoutine+0x80>)
 800463a:	795b      	ldrb	r3, [r3, #5]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d118      	bne.n	8004672 <masterEnterRoutine+0x52>
		// update status queue to notify other threads position is active
		osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, osWaitForever);
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <masterEnterRoutine+0x88>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	2200      	movs	r2, #0
 800464a:	4918      	ldr	r1, [pc, #96]	; (80046ac <masterEnterRoutine+0x8c>)
 800464c:	f00a fbea 	bl	800ee24 <osMessageQueueGet>
		statusMessage.positionEnabled = 1;
 8004650:	4b16      	ldr	r3, [pc, #88]	; (80046ac <masterEnterRoutine+0x8c>)
 8004652:	2201      	movs	r2, #1
 8004654:	715a      	strb	r2, [r3, #5]
		osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);
 8004656:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <masterEnterRoutine+0x88>)
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	2200      	movs	r2, #0
 800465e:	4913      	ldr	r1, [pc, #76]	; (80046ac <masterEnterRoutine+0x8c>)
 8004660:	f00a fb6c 	bl	800ed3c <osMessageQueuePut>

		// start timer for 3D position sample to be taken
		osTimerStart(viveTimerHandle, VIVE_SAMPLE_PERIOD);
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <masterEnterRoutine+0x90>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800466c:	4618      	mov	r0, r3
 800466e:	f009 ffb1 	bl	800e5d4 <osTimerStart>
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <masterEnterRoutine+0x80>)
 8004674:	78db      	ldrb	r3, [r3, #3]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d105      	bne.n	8004686 <masterEnterRoutine+0x66>
		osThreadFlagsSet(interProcTaskHandle, 0x00000001U);
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <masterEnterRoutine+0x94>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f009 fd99 	bl	800e1b8 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <masterEnterRoutine+0x80>)
 8004688:	791b      	ldrb	r3, [r3, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <masterEnterRoutine+0x7a>
		osThreadFlagsSet(inertialTaskHandle, 0x00000001U);
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <masterEnterRoutine+0x98>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f009 fd8f 	bl	800e1b8 <osThreadFlagsSet>
	}
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	2002788c 	.word	0x2002788c
 80046a4:	20027898 	.word	0x20027898
 80046a8:	200278c0 	.word	0x200278c0
 80046ac:	20027d10 	.word	0x20027d10
 80046b0:	2002789c 	.word	0x2002789c
 80046b4:	20027cf0 	.word	0x20027cf0
 80046b8:	20027d08 	.word	0x20027d08

080046bc <masterExitRoutine>:

void masterExitRoutine(void) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
	if (prevLogMessage.blinkEnabled == SENSOR_ENABLE) {
 80046c0:	4b15      	ldr	r3, [pc, #84]	; (8004718 <masterExitRoutine+0x5c>)
 80046c2:	789b      	ldrb	r3, [r3, #2]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <masterExitRoutine+0x18>
		osThreadFlagsSet(blinkTaskHandle, 0x00000002U);
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <masterExitRoutine+0x60>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f009 fd72 	bl	800e1b8 <osThreadFlagsSet>
	}

	if (prevLogMessage.positionEnabled == SENSOR_ENABLE) {
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <masterExitRoutine+0x5c>)
 80046d6:	795b      	ldrb	r3, [r3, #5]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <masterExitRoutine+0x30>
		// stop timer for 3D position sensing
		osTimerStop(viveTimerHandle);
 80046dc:	4b10      	ldr	r3, [pc, #64]	; (8004720 <masterExitRoutine+0x64>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f009 ffb7 	bl	800e654 <osTimerStop>
		viveStateVar = 0;
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <masterExitRoutine+0x68>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
	}

	if ((prevLogMessage.tempEnabled == SENSOR_ENABLE)) {
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <masterExitRoutine+0x5c>)
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d105      	bne.n	8004700 <masterExitRoutine+0x44>
		osThreadFlagsSet(interProcTaskHandle, 0x00000002U);
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <masterExitRoutine+0x6c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2102      	movs	r1, #2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f009 fd5c 	bl	800e1b8 <osThreadFlagsSet>
	}

	if ((prevLogMessage.intertialEnabled == SENSOR_ENABLE)) {
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <masterExitRoutine+0x5c>)
 8004702:	791b      	ldrb	r3, [r3, #4]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <masterExitRoutine+0x58>
		osThreadFlagsSet(inertialTaskHandle, 0x00000002U);
 8004708:	4b08      	ldr	r3, [pc, #32]	; (800472c <masterExitRoutine+0x70>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f009 fd52 	bl	800e1b8 <osThreadFlagsSet>
	}

}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2002788c 	.word	0x2002788c
 800471c:	20027898 	.word	0x20027898
 8004720:	2002789c 	.word	0x2002789c
 8004724:	20000af4 	.word	0x20000af4
 8004728:	20027cf0 	.word	0x20027cf0
 800472c:	20027d08 	.word	0x20027d08

08004730 <packetizeData>:



void packetizeData(struct LogPacket *packet, struct blinkData *blink,
		struct parsedSecondaryProcessorPacket *processorMsg, struct inertialData *inertialMsg, VIVEVars *posMsg) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
	// get processor tick counts (in terms of ms)
	packet->tick_ms = HAL_GetTick();
 800473e:	f002 f817 	bl	8006770 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// get epoch time from RTC
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 800474a:	2200      	movs	r2, #0
 800474c:	4917      	ldr	r1, [pc, #92]	; (80047ac <packetizeData+0x7c>)
 800474e:	4818      	ldr	r0, [pc, #96]	; (80047b0 <packetizeData+0x80>)
 8004750:	f008 f95b 	bl	800ca0a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8004754:	2200      	movs	r2, #0
 8004756:	4917      	ldr	r1, [pc, #92]	; (80047b4 <packetizeData+0x84>)
 8004758:	4815      	ldr	r0, [pc, #84]	; (80047b0 <packetizeData+0x80>)
 800475a:	f008 fa60 	bl	800cc1e <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 800475e:	4915      	ldr	r1, [pc, #84]	; (80047b4 <packetizeData+0x84>)
 8004760:	4812      	ldr	r0, [pc, #72]	; (80047ac <packetizeData+0x7c>)
 8004762:	f000 fc35 	bl	8004fd0 <RTC_ToEpoch>
 8004766:	4602      	mov	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	// add sensor data
	memcpy(&(packet->blink), blink, sizeof(struct blinkData));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	226c      	movs	r2, #108	; 0x6c
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f011 fbd1 	bl	8015f1c <memcpy>
	memcpy(&(packet->procData), processorMsg, sizeof(struct parsedSecondaryProcessorPacket));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	336c      	adds	r3, #108	; 0x6c
 800477e:	2218      	movs	r2, #24
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f011 fbca 	bl	8015f1c <memcpy>
	memcpy(&(packet->inertial), inertialMsg, sizeof(struct inertialData));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3384      	adds	r3, #132	; 0x84
 800478c:	2228      	movs	r2, #40	; 0x28
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f011 fbc3 	bl	8015f1c <memcpy>
	memcpy(&(packet->pos), posMsg, sizeof(struct VIVEVars));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	33ac      	adds	r3, #172	; 0xac
 800479a:	2218      	movs	r2, #24
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	4618      	mov	r0, r3
 80047a0:	f011 fbbc 	bl	8015f1c <memcpy>
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20028410 	.word	0x20028410
 80047b0:	20028440 	.word	0x20028440
 80047b4:	2002843c 	.word	0x2002843c

080047b8 <vector_push>:
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

void vector_push(vector *self, Pulse *item)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
    if (self->count < MAX_CAPACITY){
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d80f      	bhi.n	80047ea <vector_push+0x32>
    	self->items[self->count++] = *item;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047ce:	1c51      	adds	r1, r2, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6619      	str	r1, [r3, #96]	; 0x60
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	440b      	add	r3, r1
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	6811      	ldr	r1, [r2, #0]
 80047e4:	6019      	str	r1, [r3, #0]
 80047e6:	8892      	ldrh	r2, [r2, #4]
 80047e8:	809a      	strh	r2, [r3, #4]
    }
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <vector_pop>:

Pulse vector_pop(vector *self){
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
	if(self->count > 0){
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01c      	beq.n	8004842 <vector_pop+0x4c>
		Pulse last = self->items[self->count - 1];
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	1e5a      	subs	r2, r3, #1
 800480e:	6839      	ldr	r1, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	18ca      	adds	r2, r1, r3
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	6810      	ldr	r0, [r2, #0]
 8004820:	6018      	str	r0, [r3, #0]
 8004822:	8892      	ldrh	r2, [r2, #4]
 8004824:	809a      	strh	r2, [r3, #4]
		self->count--;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	661a      	str	r2, [r3, #96]	; 0x60
		return last;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	461a      	mov	r2, r3
 8004834:	f107 0308 	add.w	r3, r7, #8
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	6010      	str	r0, [r2, #0]
 800483c:	889b      	ldrh	r3, [r3, #4]
 800483e:	8093      	strh	r3, [r2, #4]
 8004840:	e005      	b.n	800484e <vector_pop+0x58>
	}
	return self->items[0];
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	6810      	ldr	r0, [r2, #0]
 8004848:	6018      	str	r0, [r3, #0]
 800484a:	8892      	ldrh	r2, [r2, #4]
 800484c:	809a      	strh	r2, [r3, #4]
}
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <vector_get>:

Pulse vector_get(vector *self, int index)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
    if (index >= 0 && index < self->count){
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	db12      	blt.n	8004892 <vector_get+0x38>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d90d      	bls.n	8004892 <vector_get+0x38>
    	return self->items[index];
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	18ca      	adds	r2, r1, r3
 8004886:	4603      	mov	r3, r0
 8004888:	6811      	ldr	r1, [r2, #0]
 800488a:	6019      	str	r1, [r3, #0]
 800488c:	8892      	ldrh	r2, [r2, #4]
 800488e:	809a      	strh	r2, [r3, #4]
 8004890:	e005      	b.n	800489e <vector_get+0x44>
    }
    return self->items[0];
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	6810      	ldr	r0, [r2, #0]
 8004898:	6018      	str	r0, [r3, #0]
 800489a:	8892      	ldrh	r2, [r2, #4]
 800489c:	809a      	strh	r2, [r3, #4]
}
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <vector_clear>:

void vector_clear(vector *self){
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	self->count = 0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_PulseProcessor>:

void _PulseProcessor(PulseProcessor *self, uint32_t num_inputs){
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
	self->num_inputs_ = num_inputs;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	601a      	str	r2, [r3, #0]
	self->cycle_fix_level_ = 0;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	605a      	str	r2, [r3, #4]
	self->cycle_idx_ = 0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e00c      	b.n	8004900 <_PulseProcessor+0x3c>
		vector_clear(&self->cycle_long_pulses_[i]);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2264      	movs	r2, #100	; 0x64
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	3310      	adds	r3, #16
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4413      	add	r3, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ffd8 	bl	80048aa <vector_clear>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	ddef      	ble.n	80048e6 <_PulseProcessor+0x22>
	}
	vector_clear(&self->cycle_short_pulses_);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	33d8      	adds	r3, #216	; 0xd8
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ffcd 	bl	80048aa <vector_clear>
	vector_clear(&self->unclassified_long_pulses_);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff ffc7 	bl	80048aa <vector_clear>
	self->time_from_last_long_pulse_ = 0;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <consume_pulse>:

uint8_t prev_pulse_short = 0;
void consume_pulse(PulseProcessor *self, Pulse* p){
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
	//vector_push(&debug_ar, p);
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	889b      	ldrh	r3, [r3, #4]
 800493a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800493e:	d303      	bcc.n	8004948 <consume_pulse+0x1c>
		//Ignore very long pulses
		prev_pulse_short = 0;
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <consume_pulse+0x54>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
			process_short_pulse(self, p);
			prev_pulse_short = 1;
		}
	}
}
 8004946:	e016      	b.n	8004976 <consume_pulse+0x4a>
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	889b      	ldrh	r3, [r3, #4]
 800494c:	2b27      	cmp	r3, #39	; 0x27
 800494e:	d907      	bls.n	8004960 <consume_pulse+0x34>
		prev_pulse_short = 0;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <consume_pulse+0x54>)
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
		process_long_pulse(self, p);
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f813 	bl	8004984 <process_long_pulse>
}
 800495e:	e00a      	b.n	8004976 <consume_pulse+0x4a>
		if(prev_pulse_short != 1){ // check to make sure this isnt a duplicate pulse (if it is, ignore!)
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <consume_pulse+0x54>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d006      	beq.n	8004976 <consume_pulse+0x4a>
			process_short_pulse(self, p);
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f89c 	bl	8004aa8 <process_short_pulse>
			prev_pulse_short = 1;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <consume_pulse+0x54>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000af8 	.word	0x20000af8

08004984 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d144      	bne.n	8004a20 <process_long_pulse+0x9c>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d03f      	beq.n	8004a20 <process_long_pulse+0x9c>
			Pulse last_long_pulse = vector_pop(&self->unclassified_long_pulses_);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80049a6:	f107 0308 	add.w	r3, r7, #8
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ff22 	bl	80047f6 <vector_pop>

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse.start_time;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	885a      	ldrh	r2, [r3, #2]
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 32c8 	ldrh.w	r3, [r3, #712]	; 0x2c8
 80049c8:	461a      	mov	r2, r3
 80049ca:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80049ce:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 80049d2:	330d      	adds	r3, #13
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	617b      	str	r3, [r7, #20]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f113 0f1e 	cmn.w	r3, #30
 80049de:	db1c      	blt.n	8004a1a <process_long_pulse+0x96>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b1d      	cmp	r3, #29
 80049e4:	dc19      	bgt.n	8004a1a <process_long_pulse+0x96>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	885a      	ldrh	r2, [r3, #2]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fc ffbb 	bl	800197c <reset>

                reset_cycle_long_pulses(self);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa64 	bl	8004ed4 <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fa7c 	bl	8004f0a <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa87 	bl	8004f26 <reset_cycle_short_pulses>
 8004a18:	e002      	b.n	8004a20 <process_long_pulse+0x9c>
            }
			else{
				reset_unclassified_long_pulses(self);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa75 	bl	8004f0a <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02d      	beq.n	8004a88 <process_long_pulse+0x104>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	885a      	ldrh	r2, [r3, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	891b      	ldrh	r3, [r3, #8]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	827b      	strh	r3, [r7, #18]
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e021      	b.n	8004a82 <process_long_pulse+0xfe>
        	int16_t delta = time_from_cycle_start - long_pulse_starts[i];
 8004a3e:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <process_long_pulse+0x120>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a46:	8a7a      	ldrh	r2, [r7, #18]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	823b      	strh	r3, [r7, #16]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8004a4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a52:	f113 0f1e 	cmn.w	r3, #30
 8004a56:	db11      	blt.n	8004a7c <process_long_pulse+0xf8>
 8004a58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a5c:	2b1d      	cmp	r3, #29
 8004a5e:	dc0d      	bgt.n	8004a7c <process_long_pulse+0xf8>
                vector_push(&self->cycle_long_pulses_[i], p);
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2264      	movs	r2, #100	; 0x64
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	3310      	adds	r3, #16
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fea1 	bl	80047b8 <vector_push>
                pulse_classified = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	77fb      	strb	r3, [r7, #31]
                break;
 8004a7a:	e005      	b.n	8004a88 <process_long_pulse+0x104>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	ddda      	ble.n	8004a3e <process_long_pulse+0xba>
            }
        }
    }
    if (!pulse_classified){
 8004a88:	7ffb      	ldrb	r3, [r7, #31]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <process_long_pulse+0x118>
    	vector_push(&self->unclassified_long_pulses_, p);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fe8e 	bl	80047b8 <vector_push>
    }
}
 8004a9c:	bf00      	nop
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	080178b0 	.word	0x080178b0

08004aa8 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00f      	beq.n	8004ada <process_short_pulse+0x32>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d208      	bcs.n	8004ada <process_short_pulse+0x32>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	33d8      	adds	r3, #216	; 0xd8
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fe72 	bl	80047b8 <vector_push>

		//We can process the cycle now
		process_cycle_fix(self);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f805 	bl	8004ae4 <process_cycle_fix>
	}
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b0a2      	sub	sp, #136	; 0x88
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8004aec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8004af6:	2300      	movs	r3, #0
 8004af8:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <process_cycle_fix+0x2a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80b7 	beq.w	8004c7c <process_cycle_fix+0x198>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b09      	cmp	r3, #9
 8004b14:	d80d      	bhi.n	8004b32 <process_cycle_fix+0x4e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <process_cycle_fix+0x4e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004b32:	2300      	movs	r3, #0
 8004b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b38:	e090      	b.n	8004c5c <process_cycle_fix+0x178>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b40:	2164      	movs	r1, #100	; 0x64
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	3370      	adds	r3, #112	; 0x70
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	677b      	str	r3, [r7, #116]	; 0x74
            if (num_pulses) {
 8004b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d07e      	beq.n	8004c52 <process_cycle_fix+0x16e>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	891a      	ldrh	r2, [r3, #8]
 8004b58:	49c0      	ldr	r1, [pc, #768]	; (8004e5c <process_cycle_fix+0x378>)
 8004b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b62:	4413      	add	r3, r2
 8004b64:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b6e:	e03e      	b.n	8004bee <process_cycle_fix+0x10a>
                    const Pulse pulse = vector_get(&self->cycle_long_pulses_[b], i);
 8004b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b74:	2264      	movs	r2, #100	; 0x64
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	18d1      	adds	r1, r2, r3
 8004b80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fe66 	bl	800485a <vector_get>
                    pulse_start_corrections[b] += pulse.start_time - expected_start_time;
 8004b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b98:	4413      	add	r3, r2
 8004b9a:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004b9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004ba8:	1acb      	subs	r3, r1, r3
 8004baa:	441a      	add	r2, r3
 8004bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004bb6:	440b      	add	r3, r1
 8004bb8:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] += pulse.pulse_len;
 8004bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004bcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bd0:	4413      	add	r3, r2
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004bde:	440b      	add	r3, r1
 8004be0:	f823 2c3c 	strh.w	r2, [r3, #-60]
                for (uint32_t i = 0; i < num_pulses; i++) {
 8004be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004be8:	3301      	adds	r3, #1
 8004bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d3bb      	bcc.n	8004b70 <process_cycle_fix+0x8c>
                }
                if (num_pulses > 1) {
 8004bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d929      	bls.n	8004c52 <process_cycle_fix+0x16e>
                    pulse_start_corrections[b] /= num_pulses;
 8004bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c08:	4413      	add	r3, r2
 8004c0a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c22:	440b      	add	r3, r1
 8004c24:	f843 2c38 	str.w	r2, [r3, #-56]
                    pulse_lens[b] /= num_pulses;
 8004c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c32:	4413      	add	r3, r2
 8004c34:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f823 2c3c 	strh.w	r2, [r3, #-60]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 8004c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c56:	3301      	adds	r3, #1
 8004c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f77f af6a 	ble.w	8004b3a <process_cycle_fix+0x56>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004c74:	4619      	mov	r1, r3
 8004c76:	f7fc fdff 	bl	8001878 <process_pulse_lengths>
 8004c7a:	e008      	b.n	8004c8e <process_cycle_fix+0x1aa>
    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <process_cycle_fix+0x1aa>
    		self->cycle_fix_level_--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	1e5a      	subs	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fc fe56 	bl	800194c <get_phase>
 8004ca0:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (cycle_phase >= 0) {
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f2c0 80b5 	blt.w	8004e14 <process_cycle_fix+0x330>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 8004caa:	f107 030c 	add.w	r3, r7, #12
 8004cae:	2220      	movs	r2, #32
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f011 f93d 	bl	8015f32 <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 8004cb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc8:	105b      	asrs	r3, r3, #1
 8004cca:	66bb      	str	r3, [r7, #104]	; 0x68
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	891a      	ldrh	r2, [r3, #8]
 8004cd0:	4962      	ldr	r1, [pc, #392]	; (8004e5c <process_cycle_fix+0x378>)
 8004cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004cd8:	4413      	add	r3, r2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cf6:	e04a      	b.n	8004d8e <process_cycle_fix+0x2aa>
            Pulse p = vector_get(&self->cycle_short_pulses_, i);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 8004cfe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fda8 	bl	800485a <vector_get>
            uint32_t input_idx = p.input_idx;
 8004d0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d0e:	65fb      	str	r3, [r7, #92]	; 0x5c

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p.start_time + p.pulse_len / 2 - base_pulse_start;
 8004d10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	4413      	add	r3, r2
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 8004d26:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004d2a:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8004d2e:	d32b      	bcc.n	8004d88 <process_cycle_fix+0x2a4>
 8004d30:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004d34:	f641 2278 	movw	r2, #6776	; 0x1a78
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d825      	bhi.n	8004d88 <process_cycle_fix+0x2a4>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p.pulse_len) {
 8004d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d44:	4413      	add	r3, r2
 8004d46:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <process_cycle_fix+0x280>
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d56:	4413      	add	r3, r2
 8004d58:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004d5c:	889a      	ldrh	r2, [r3, #4]
 8004d5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d211      	bcs.n	8004d88 <process_cycle_fix+0x2a4>
					short_pulses[input_idx] = &p;
 8004d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004d72:	f843 2c7c 	str.w	r2, [r3, #-124]
					short_pulse_timings[input_idx] = pulse_timing;
 8004d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d7e:	4413      	add	r3, r2
 8004d80:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004d84:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 8004d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004d94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d3ae      	bcc.n	8004cf8 <process_cycle_fix+0x214>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d9e:	e034      	b.n	8004e0a <process_cycle_fix+0x326>
            if (short_pulses[i]) {
 8004da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004da8:	4413      	add	r3, r2
 8004daa:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d028      	beq.n	8004e04 <process_cycle_fix+0x320>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 8004db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db4:	015b      	lsls	r3, r3, #5
 8004db6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	663b      	str	r3, [r7, #96]	; 0x60
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 8004dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dc8:	4413      	add	r3, r2
 8004dca:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8004dce:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dda:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e60 <process_cycle_fix+0x37c>
 8004dde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004de2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004e64 <process_cycle_fix+0x380>
 8004de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68d9      	ldr	r1, [r3, #12]
 8004dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dfe:	3204      	adds	r2, #4
 8004e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 8004e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e06:	3301      	adds	r3, #1
 8004e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d3c5      	bcc.n	8004da0 <process_cycle_fix+0x2bc>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db06      	blt.n	8004e28 <process_cycle_fix+0x344>
 8004e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e008      	b.n	8004e3a <process_cycle_fix+0x356>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02b      	beq.n	8004e96 <process_cycle_fix+0x3b2>
        self->angles_frame_.time = self->cycle_start_time_;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	891a      	ldrh	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 8004e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db0c      	blt.n	8004e68 <process_cycle_fix+0x384>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d908      	bls.n	8004e68 <process_cycle_fix+0x384>
                                        ? kCycleSynced : kCycleSyncing;
 8004e56:	22c8      	movs	r2, #200	; 0xc8
 8004e58:	e007      	b.n	8004e6a <process_cycle_fix+0x386>
 8004e5a:	bf00      	nop
 8004e5c:	080178b0 	.word	0x080178b0
 8004e60:	40490fdb 	.word	0x40490fdb
 8004e64:	46023400 	.word	0x46023400
 8004e68:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
        self->angles_frame_.phase_id = cycle_phase;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e7e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 22cc 	ldr.w	r2, [r3, #716]	; 0x2cc
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fd fb9b 	bl	80025cc <consume_angles>

    }

    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f81c 	bl	8004ed4 <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f834 	bl	8004f0a <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f83f 	bl	8004f26 <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	891a      	ldrh	r2, [r3, #8]
 8004eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004eb8:	330d      	adds	r3, #13
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	60da      	str	r2, [r3, #12]
}
 8004eca:	bf00      	nop
 8004ecc:	3788      	adds	r7, #136	; 0x88
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop

08004ed4 <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e00c      	b.n	8004efc <reset_cycle_long_pulses+0x28>
	    vector_clear(&self->cycle_long_pulses_[i]);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2264      	movs	r2, #100	; 0x64
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	3310      	adds	r3, #16
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fcda 	bl	80048aa <vector_clear>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	ddef      	ble.n	8004ee2 <reset_cycle_long_pulses+0xe>
	}
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
	vector_clear(&self->unclassified_long_pulses_);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fcc6 	bl	80048aa <vector_clear>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
	vector_clear(&self->cycle_short_pulses_);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	33d8      	adds	r3, #216	; 0xd8
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fcb9 	bl	80048aa <vector_clear>
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0

}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f66:	bf00      	nop
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <MX_RTC_Init+0x34>)
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <MX_RTC_Init+0x38>)
 8004f78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <MX_RTC_Init+0x34>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <MX_RTC_Init+0x34>)
 8004f82:	220f      	movs	r2, #15
 8004f84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <MX_RTC_Init+0x34>)
 8004f88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004f8c:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004f8e:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <MX_RTC_Init+0x34>)
 8004f90:	f007 fbd9 	bl	800c746 <HAL_RTC_Init>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8004f9a:	f7ff f9dd 	bl	8004358 <Error_Handler>
  }

}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20028440 	.word	0x20028440
 8004fa8:	40002800 	.word	0x40002800

08004fac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <HAL_RTC_MspInit+0x20>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004fbe:	f7ff ffc6 	bl	8004f4e <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40002800 	.word	0x40002800

08004fd0 <RTC_ToEpoch>:
  }
} 

/* USER CODE BEGIN 1 */
// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	f1c3 030e 	rsb	r3, r3, #14
 8004fe2:	4a44      	ldr	r2, [pc, #272]	; (80050f4 <RTC_ToEpoch+0x124>)
 8004fe4:	fb82 1203 	smull	r1, r2, r2, r3
 8004fe8:	1052      	asrs	r2, r2, #1
 8004fea:	17db      	asrs	r3, r3, #31
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	75fb      	strb	r3, [r7, #23]
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	78db      	ldrb	r3, [r3, #3]
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8005002:	3310      	adds	r3, #16
 8005004:	82bb      	strh	r3, [r7, #20]
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	785a      	ldrb	r2, [r3, #1]
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	4619      	mov	r1, r3
 800500e:	0049      	lsls	r1, r1, #1
 8005010:	440b      	add	r3, r1
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	b2db      	uxtb	r3, r3
 8005016:	4413      	add	r3, r2
 8005018:	b2db      	uxtb	r3, r3
 800501a:	3b03      	subs	r3, #3
 800501c:	74fb      	strb	r3, [r7, #19]

	// Gregorian calendar date compute
	JDN = date->Date;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	789b      	ldrb	r3, [r3, #2]
 8005022:	60fb      	str	r3, [r7, #12]
	JDN += (153 * m + 2) / 5;
 8005024:	7cfa      	ldrb	r2, [r7, #19]
 8005026:	4613      	mov	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	4413      	add	r3, r2
 8005030:	3302      	adds	r3, #2
 8005032:	4a31      	ldr	r2, [pc, #196]	; (80050f8 <RTC_ToEpoch+0x128>)
 8005034:	fb82 1203 	smull	r1, r2, r2, r3
 8005038:	1052      	asrs	r2, r2, #1
 800503a:	17db      	asrs	r3, r3, #31
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
	JDN += 365 * y;
 8005046:	8abb      	ldrh	r3, [r7, #20]
 8005048:	f240 126d 	movw	r2, #365	; 0x16d
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	461a      	mov	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
	JDN += y / 4;
 8005058:	8abb      	ldrh	r3, [r7, #20]
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
	JDN += -y / 100;
 8005066:	8abb      	ldrh	r3, [r7, #20]
 8005068:	425b      	negs	r3, r3
 800506a:	4a24      	ldr	r2, [pc, #144]	; (80050fc <RTC_ToEpoch+0x12c>)
 800506c:	fb82 1203 	smull	r1, r2, r2, r3
 8005070:	1152      	asrs	r2, r2, #5
 8005072:	17db      	asrs	r3, r3, #31
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	461a      	mov	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
	JDN += y / 400;
 800507e:	8abb      	ldrh	r3, [r7, #20]
 8005080:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <RTC_ToEpoch+0x12c>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	b29b      	uxth	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
	JDN = JDN - 32045;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8005098:	3b2d      	subs	r3, #45	; 0x2d
 800509a:	60fb      	str	r3, [r7, #12]
	JDN = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <RTC_ToEpoch+0x130>)
 80050a0:	4413      	add	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
	JDN *= 86400;                     // Days to seconds
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a17      	ldr	r2, [pc, #92]	; (8005104 <RTC_ToEpoch+0x134>)
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	60fb      	str	r3, [r7, #12]
	JDN += time->Hours * 3600;    // ... and today seconds
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80050b8:	fb03 f302 	mul.w	r3, r3, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
	JDN += time->Minutes * 60;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	461a      	mov	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
	JDN += time->Seconds;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	789b      	ldrb	r3, [r3, #2]
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

	return JDN;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	2aaaaaab 	.word	0x2aaaaaab
 80050f8:	66666667 	.word	0x66666667
 80050fc:	51eb851f 	.word	0x51eb851f
 8005100:	ffdac274 	.word	0xffdac274
 8005104:	00015180 	.word	0x00015180

08005108 <RTC_FromEpoch>:

//
//// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b095      	sub	sp, #84	; 0x54
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	uint32_t b;
	uint32_t c;
	uint32_t d;
	uint32_t e;
	uint32_t m;
	int16_t  year  = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t  month = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t  dow   = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t  mday  = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int16_t  hour  = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  min   = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t  sec   = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint64_t JD    = 0;
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint64_t JDN   = 0;
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 800515c:	33c0      	adds	r3, #192	; 0xc0
 800515e:	4a7c      	ldr	r2, [pc, #496]	; (8005350 <RTC_FromEpoch+0x248>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	0bda      	lsrs	r2, r3, #15
 8005166:	4b7b      	ldr	r3, [pc, #492]	; (8005354 <RTC_FromEpoch+0x24c>)
 8005168:	4413      	add	r3, r2
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	JDN = JD >> 1;
 8005172:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005176:	0864      	lsrs	r4, r4, #1
 8005178:	ea4f 0333 	mov.w	r3, r3, rrx
 800517c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	4a74      	ldr	r2, [pc, #464]	; (8005358 <RTC_FromEpoch+0x250>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	b29a      	uxth	r2, r3
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	b29b      	uxth	r3, r3
 8005198:	4619      	mov	r1, r3
 800519a:	0109      	lsls	r1, r1, #4
 800519c:	1acb      	subs	r3, r1, r3
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	4a69      	ldr	r2, [pc, #420]	; (8005358 <RTC_FromEpoch+0x250>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	b29a      	uxth	r2, r3
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4619      	mov	r1, r3
 80051c4:	0109      	lsls	r1, r1, #4
 80051c6:	1acb      	subs	r3, r1, r3
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	4a60      	ldr	r2, [pc, #384]	; (800535c <RTC_FromEpoch+0x254>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	0049      	lsls	r1, r1, #1
 80051f0:	440b      	add	r3, r1
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    dow   = JDN % 7;
 80051fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005202:	f04f 0207 	mov.w	r2, #7
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	f7fb fc7f 	bl	8000b0c <__aeabi_uldivmod>
 800520e:	461c      	mov	r4, r3
 8005210:	4613      	mov	r3, r2
 8005212:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    a     = JDN + 32044;
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 800521c:	332c      	adds	r3, #44	; 0x2c
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
    b     = ((4 * a) + 3) / 146097;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	3303      	adds	r3, #3
 8005226:	4a4e      	ldr	r2, [pc, #312]	; (8005360 <RTC_FromEpoch+0x258>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	0bdb      	lsrs	r3, r3, #15
 800522e:	623b      	str	r3, [r7, #32]
    c     = a - ((146097 * b) / 4);
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	4a4c      	ldr	r2, [pc, #304]	; (8005364 <RTC_FromEpoch+0x25c>)
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	61fb      	str	r3, [r7, #28]
    d     = ((4 * c) + 3) / 1461;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	3303      	adds	r3, #3
 8005246:	4a48      	ldr	r2, [pc, #288]	; (8005368 <RTC_FromEpoch+0x260>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	09db      	lsrs	r3, r3, #7
 800524e:	61bb      	str	r3, [r7, #24]
    e     = c - ((1461 * d) / 4);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
    m     = ((5 * e) + 2) / 153;
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	3302      	adds	r3, #2
 800526c:	4a3f      	ldr	r2, [pc, #252]	; (800536c <RTC_FromEpoch+0x264>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	09db      	lsrs	r3, r3, #7
 8005274:	613b      	str	r3, [r7, #16]
    mday  = e - (((153 * m) + 2) / 5) + 1;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	b299      	uxth	r1, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	011a      	lsls	r2, r3, #4
 8005284:	4413      	add	r3, r2
 8005286:	3302      	adds	r3, #2
 8005288:	4a39      	ldr	r2, [pc, #228]	; (8005370 <RTC_FromEpoch+0x268>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	b29b      	uxth	r3, r3
 8005292:	1acb      	subs	r3, r1, r3
 8005294:	b29b      	uxth	r3, r3
 8005296:	3301      	adds	r3, #1
 8005298:	b29b      	uxth	r3, r3
 800529a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    month = m + 3 - (12 * (m / 10));
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4932      	ldr	r1, [pc, #200]	; (8005370 <RTC_FromEpoch+0x268>)
 80052a6:	fba1 1303 	umull	r1, r3, r1, r3
 80052aa:	08db      	lsrs	r3, r3, #3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4619      	mov	r1, r3
 80052b0:	0049      	lsls	r1, r1, #1
 80052b2:	440b      	add	r3, r1
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3303      	adds	r3, #3
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    year  = (100 * b) + d - 4800 + (m / 10);
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	461a      	mov	r2, r3
 80052d0:	0091      	lsls	r1, r2, #2
 80052d2:	461a      	mov	r2, r3
 80052d4:	460b      	mov	r3, r1
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	b29a      	uxth	r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4922      	ldr	r1, [pc, #136]	; (8005370 <RTC_FromEpoch+0x268>)
 80052e8:	fba1 1303 	umull	r1, r3, r1, r3
 80052ec:	08db      	lsrs	r3, r3, #3
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    date->Year    = year - 2000;
 80052fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005302:	b2db      	uxtb	r3, r3
 8005304:	3330      	adds	r3, #48	; 0x30
 8005306:	b2da      	uxtb	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	70da      	strb	r2, [r3, #3]
    date->Month   = month;
 800530c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005310:	b2da      	uxtb	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	705a      	strb	r2, [r3, #1]
    date->Date    = mday;
 8005316:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800531a:	b2da      	uxtb	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	709a      	strb	r2, [r3, #2]
    date->WeekDay = dow;
 8005320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	701a      	strb	r2, [r3, #0]
    time->Hours   = hour;
 800532a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	701a      	strb	r2, [r3, #0]
    time->Minutes = min;
 8005334:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	705a      	strb	r2, [r3, #1]
    time->Seconds = sec;
 800533e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	709a      	strb	r2, [r3, #2]
}
 8005348:	bf00      	nop
 800534a:	3754      	adds	r7, #84	; 0x54
 800534c:	46bd      	mov	sp, r7
 800534e:	bd90      	pop	{r4, r7, pc}
 8005350:	c22e4507 	.word	0xc22e4507
 8005354:	004a7b17 	.word	0x004a7b17
 8005358:	88888889 	.word	0x88888889
 800535c:	aaaaaaab 	.word	0xaaaaaaab
 8005360:	396b06bd 	.word	0x396b06bd
 8005364:	00023ab1 	.word	0x00023ab1
 8005368:	166db073 	.word	0x166db073
 800536c:	d62b80d7 	.word	0xd62b80d7
 8005370:	cccccccd 	.word	0xcccccccd

08005374 <LL_AHB3_GRP1_EnableClock>:
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4313      	orrs	r3, r2
 800538a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80053aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80053ae:	f7ff ffe1 	bl	8005374 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	210f      	movs	r1, #15
 80053b6:	f06f 0001 	mvn.w	r0, #1
 80053ba:	f002 ff0c 	bl	80081d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	210f      	movs	r1, #15
 80053c2:	202c      	movs	r0, #44	; 0x2c
 80053c4:	f002 ff07 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80053c8:	2200      	movs	r2, #0
 80053ca:	210f      	movs	r1, #15
 80053cc:	202d      	movs	r0, #45	; 0x2d
 80053ce:	f002 ff02 	bl	80081d6 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80053d2:	bf00      	nop
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80053de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4013      	ands	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80053fa:	68fb      	ldr	r3, [r7, #12]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08c      	sub	sp, #48	; 0x30
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005418:	2200      	movs	r2, #0
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	2019      	movs	r0, #25
 800541e:	f002 feda 	bl	80081d6 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8005422:	2019      	movs	r0, #25
 8005424:	f002 fef1 	bl	800820a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005428:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800542c:	f7ff ffd3 	bl	80053d6 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005430:	f107 0208 	add.w	r2, r7, #8
 8005434:	f107 030c 	add.w	r3, r7, #12
 8005438:	4611      	mov	r1, r2
 800543a:	4618      	mov	r0, r3
 800543c:	f006 fc76 	bl	800bd2c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005440:	f006 fc5e 	bl	800bd00 <HAL_RCC_GetPCLK2Freq>
 8005444:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	4a12      	ldr	r2, [pc, #72]	; (8005494 <HAL_InitTick+0x8c>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	3b01      	subs	r3, #1
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005454:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_InitTick+0x90>)
 8005456:	4a11      	ldr	r2, [pc, #68]	; (800549c <HAL_InitTick+0x94>)
 8005458:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800545a:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <HAL_InitTick+0x90>)
 800545c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005460:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005462:	4a0d      	ldr	r2, [pc, #52]	; (8005498 <HAL_InitTick+0x90>)
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_InitTick+0x90>)
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <HAL_InitTick+0x90>)
 8005470:	2200      	movs	r2, #0
 8005472:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005474:	4808      	ldr	r0, [pc, #32]	; (8005498 <HAL_InitTick+0x90>)
 8005476:	f007 fcc3 	bl	800ce00 <HAL_TIM_Base_Init>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005480:	4805      	ldr	r0, [pc, #20]	; (8005498 <HAL_InitTick+0x90>)
 8005482:	f007 fd3f 	bl	800cf04 <HAL_TIM_Base_Start_IT>
 8005486:	4603      	mov	r3, r0
 8005488:	e000      	b.n	800548c <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
}
 800548c:	4618      	mov	r0, r3
 800548e:	3730      	adds	r7, #48	; 0x30
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	431bde83 	.word	0x431bde83
 8005498:	20028464 	.word	0x20028464
 800549c:	40012c00 	.word	0x40012c00

080054a0 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e072      	b.n	8005598 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 f8a0 	bl	800660c <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6819      	ldr	r1, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80054ea:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80054f2:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80054f8:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 80054fe:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8005504:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800550a:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8005510:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	7b1b      	ldrb	r3, [r3, #12]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005530:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	43d2      	mvns	r2, r2
 8005548:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005562:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681c      	ldr	r4, [r3, #0]
 800556c:	4610      	mov	r0, r2
 800556e:	f000 f952 	bl	8005816 <TSC_extract_groups>
 8005572:	4603      	mov	r3, r0
 8005574:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0203 	bic.w	r2, r2, #3
 8005584:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2203      	movs	r2, #3
 800558c:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bd90      	pop	{r4, r7, pc}

080055a0 <HAL_TSC_Start_IT>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_TSC_Start_IT(TSC_HandleTypeDef *htsc)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));

  /* Process locked */
  __HAL_LOCK(htsc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_TSC_Start_IT+0x16>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e04b      	b.n	800564e <HAL_TSC_Start_IT+0xae>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable end of acquisition interrupt */
  __HAL_TSC_ENABLE_IT(htsc, TSC_IT_EOA);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	605a      	str	r2, [r3, #4]

  /* Enable max count error interrupt (optional) */
  if (htsc->Init.MaxCountInterrupt == ENABLE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d108      	bne.n	80055f2 <HAL_TSC_Start_IT+0x52>
  {
    __HAL_TSC_ENABLE_IT(htsc, TSC_IT_MCE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0202 	orr.w	r2, r2, #2
 80055ee:	605a      	str	r2, [r3, #4]
 80055f0:	e007      	b.n	8005602 <HAL_TSC_Start_IT+0x62>
  }
  else
  {
    __HAL_TSC_DISABLE_IT(htsc, TSC_IT_MCE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0202 	bic.w	r2, r2, #2
 8005600:	605a      	str	r2, [r3, #4]
  }

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2203      	movs	r2, #3
 8005608:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d108      	bne.n	8005624 <HAL_TSC_Start_IT+0x84>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0210 	bic.w	r2, r2, #16
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e007      	b.n	8005634 <HAL_TSC_Start_IT+0x94>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0210 	orr.w	r2, r2, #16
 8005632:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0202 	orr.w	r2, r2, #2
 8005642:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_TSC_GroupGetStatus>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Group status
  */
TSC_GroupStatusTypeDef HAL_TSC_GroupGetStatus(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group status */
  return (__HAL_TSC_GET_GROUP_STATUS(htsc, gx_index));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	3310      	adds	r3, #16
 8005672:	2101      	movs	r1, #1
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	401a      	ands	r2, r3
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	3310      	adds	r3, #16
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	429a      	cmp	r2, r3
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	685b      	ldr	r3, [r3, #4]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_TSC_IOConfig>:
  *         the configuration information for the specified TSC.
  * @param  config Pointer to the configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IOConfig(TSC_HandleTypeDef *htsc, TSC_IOConfigTypeDef *config)
{
 80056c2:	b590      	push	{r4, r7, lr}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_TSC_GROUP(config->ChannelIOs));
  assert_param(IS_TSC_GROUP(config->ShieldIOs));
  assert_param(IS_TSC_GROUP(config->SamplingIOs));

  /* Process locked */
  __HAL_LOCK(htsc);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_TSC_IOConfig+0x18>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e032      	b.n	8005740 <HAL_TSC_IOConfig+0x7e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Stop acquisition */
  __HAL_TSC_STOP_ACQ(htsc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0202 	bic.w	r2, r2, #2
 80056f0:	601a      	str	r2, [r3, #0]

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(config->ChannelIOs | config->ShieldIOs | config->SamplingIOs));
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	43d2      	mvns	r2, r2
 8005708:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (config->ChannelIOs | config->ShieldIOs);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = config->SamplingIOs;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	6892      	ldr	r2, [r2, #8]
 8005722:	621a      	str	r2, [r3, #32]

  /* Set groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(config->ChannelIOs);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681c      	ldr	r4, [r3, #0]
 800572c:	4610      	mov	r0, r2
 800572e:	f000 f872 	bl	8005816 <TSC_extract_groups>
 8005732:	4603      	mov	r3, r0
 8005734:	6323      	str	r3, [r4, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bd90      	pop	{r4, r7, pc}

08005748 <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_TSC_IODischarge+0x1a>
 800575e:	2302      	movs	r3, #2
 8005760:	e01c      	b.n	800579c <HAL_TSC_IODischarge+0x54>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (choice == ENABLE)
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d108      	bne.n	8005782 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0210 	bic.w	r2, r2, #16
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e007      	b.n	8005792 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0210 	orr.w	r2, r2, #16
 8005790:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TSC_IRQHandler>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
void HAL_TSC_IRQHandler(TSC_HandleTypeDef *htsc)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Check if the end of acquisition occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_EOA) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d103      	bne.n	80057c6 <HAL_TSC_IRQHandler+0x1e>
  {
    /* Clear EOA flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_EOA);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2201      	movs	r2, #1
 80057c4:	609a      	str	r2, [r3, #8]
  }

  /* Check if max count error occurred */
  if (__HAL_TSC_GET_FLAG(htsc, TSC_FLAG_MCE) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d10b      	bne.n	80057ec <HAL_TSC_IRQHandler+0x44>
  {
    /* Clear MCE flag */
    __HAL_TSC_CLEAR_FLAG(htsc, TSC_FLAG_MCE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2202      	movs	r2, #2
 80057da:	609a      	str	r2, [r3, #8]
    /* Change TSC state */
    htsc->State = HAL_TSC_STATE_ERROR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2203      	movs	r2, #3
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
#if (USE_HAL_TSC_REGISTER_CALLBACKS == 1)
    htsc->ErrorCallback(htsc);
#else
    /* Conversion completed callback */
    HAL_TSC_ErrorCallback(htsc);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f80c 	bl	8005802 <HAL_TSC_ErrorCallback>
#else
    /* Conversion completed callback */
    HAL_TSC_ConvCpltCallback(htsc);
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }
}
 80057ea:	e006      	b.n	80057fa <HAL_TSC_IRQHandler+0x52>
    htsc->State = HAL_TSC_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    HAL_TSC_ConvCpltCallback(htsc);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fb27 	bl	8005e48 <HAL_TSC_ConvCpltCallback>
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TSC_ErrorCallback>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval None
  */
__weak void HAL_TSC_ErrorCallback(TSC_HandleTypeDef *htsc)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htsc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TSC_ErrorCallback could be implemented in the user file.
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	e011      	b.n	800584c <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	220f      	movs	r2, #15
 800582e:	409a      	lsls	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d006      	beq.n	8005846 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8005838:	2201      	movs	r2, #1
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3301      	adds	r3, #1
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b06      	cmp	r3, #6
 8005850:	d9ea      	bls.n	8005828 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005872:	e7fe      	b.n	8005872 <HardFault_Handler+0x4>

08005874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005878:	e7fe      	b.n	8005878 <MemManage_Handler+0x4>

0800587a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800587a:	b480      	push	{r7}
 800587c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800587e:	e7fe      	b.n	800587e <BusFault_Handler+0x4>

08005880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005884:	e7fe      	b.n	8005884 <UsageFault_Handler+0x4>

08005886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005886:	b480      	push	{r7}
 8005888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800588a:	bf00      	nop
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005898:	2004      	movs	r0, #4
 800589a:	f003 f9ab 	bl	8008bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  // received message from secondary MCU that a message is ready
//  osSemaphoreRelease(interProcessorInterruptSemHandle);
  osThreadFlagsSet(interProcTaskHandle, 0x00000004U);
 800589e:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <EXTI2_IRQHandler+0x1c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2104      	movs	r1, #4
 80058a4:	4618      	mov	r0, r3
 80058a6:	f008 fc87 	bl	800e1b8 <osThreadFlagsSet>
  /* USER CODE END EXTI2_IRQn 1 */
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20027cf0 	.word	0x20027cf0

080058b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80058b8:	4802      	ldr	r0, [pc, #8]	; (80058c4 <DMA1_Channel1_IRQHandler+0x10>)
 80058ba:	f002 fec4 	bl	8008646 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80058be:	bf00      	nop
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20027744 	.word	0x20027744

080058c8 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80058cc:	4802      	ldr	r0, [pc, #8]	; (80058d8 <COMP_IRQHandler+0x10>)
 80058ce:	f002 fb19 	bl	8007f04 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20027d18 	.word	0x20027d18

080058dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80058e0:	2020      	movs	r0, #32
 80058e2:	f003 f987 	bl	8008bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80058e6:	bf00      	nop
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058f0:	4803      	ldr	r0, [pc, #12]	; (8005900 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80058f2:	f007 fc11 	bl	800d118 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80058f6:	4803      	ldr	r0, [pc, #12]	; (8005904 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80058f8:	f007 fc0e 	bl	800d118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80058fc:	bf00      	nop
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20028464 	.word	0x20028464
 8005904:	200284e4 	.word	0x200284e4

08005908 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800590c:	4802      	ldr	r0, [pc, #8]	; (8005918 <I2C1_EV_IRQHandler+0x10>)
 800590e:	f003 fd87 	bl	8009420 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20027ea8 	.word	0x20027ea8

0800591c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */
void IPCC_C1_TX_IRQHandler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8005920:	f00f fe50 	bl	80155c4 <HW_IPCC_Tx_Handler>

  return;
 8005924:	bf00      	nop
}
 8005926:	bd80      	pop	{r7, pc}

08005928 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 800592c:	f00f fdf0 	bl	8015510 <HW_IPCC_Rx_Handler>
  return;
 8005930:	bf00      	nop
}
 8005932:	bd80      	pop	{r7, pc}

08005934 <TSC_IRQHandler>:

/**
  * @brief This function handles TSC global interrupt.
  */
void TSC_IRQHandler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_IRQn 0 */

  /* USER CODE END TSC_IRQn 0 */
  HAL_TSC_IRQHandler(&htsc);
 8005938:	4802      	ldr	r0, [pc, #8]	; (8005944 <TSC_IRQHandler+0x10>)
 800593a:	f7ff ff35 	bl	80057a8 <HAL_TSC_IRQHandler>
  /* USER CODE BEGIN TSC_IRQn 1 */

  /* USER CODE END TSC_IRQn 1 */
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20028558 	.word	0x20028558

08005948 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8005948:	b40c      	push	{r2, r3}
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	4603      	mov	r3, r0
 8005952:	460a      	mov	r2, r1
 8005954:	71fb      	strb	r3, [r7, #7]
 8005956:	4613      	mov	r3, r2
 8005958:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	b002      	add	sp, #8
 8005966:	4770      	bx	lr

08005968 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800596c:	4b26      	ldr	r3, [pc, #152]	; (8005a08 <SystemInit+0xa0>)
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005972:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <SystemInit+0xa0>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	4a23      	ldr	r2, [pc, #140]	; (8005a08 <SystemInit+0xa0>)
 800597a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800597e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8005992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005996:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800599a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a6:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <SystemInit+0xa4>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059b8:	f023 0305 	bic.w	r3, r3, #5
 80059bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <SystemInit+0xa8>)
 80059da:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80059dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e0:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <SystemInit+0xa8>)
 80059e2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80059e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	2200      	movs	r2, #0
 80059fa:	619a      	str	r2, [r3, #24]
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	e000ed00 	.word	0xe000ed00
 8005a0c:	faf6fefb 	.word	0xfaf6fefb
 8005a10:	22041000 	.word	0x22041000

08005a14 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	4a47      	ldr	r2, [pc, #284]	; (8005b44 <SystemCoreClockUpdate+0x130>)
 8005a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b0c      	cmp	r3, #12
 8005a3a:	d867      	bhi.n	8005b0c <SystemCoreClockUpdate+0xf8>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <SystemCoreClockUpdate+0x30>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a79 	.word	0x08005a79
 8005a48:	08005b0d 	.word	0x08005b0d
 8005a4c:	08005b0d 	.word	0x08005b0d
 8005a50:	08005b0d 	.word	0x08005b0d
 8005a54:	08005a81 	.word	0x08005a81
 8005a58:	08005b0d 	.word	0x08005b0d
 8005a5c:	08005b0d 	.word	0x08005b0d
 8005a60:	08005b0d 	.word	0x08005b0d
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005b0d 	.word	0x08005b0d
 8005a6c:	08005b0d 	.word	0x08005b0d
 8005a70:	08005b0d 	.word	0x08005b0d
 8005a74:	08005a91 	.word	0x08005a91
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8005a78:	4a33      	ldr	r2, [pc, #204]	; (8005b48 <SystemCoreClockUpdate+0x134>)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6013      	str	r3, [r2, #0]
      break;
 8005a7e:	e049      	b.n	8005b14 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005a80:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <SystemCoreClockUpdate+0x134>)
 8005a82:	4a32      	ldr	r2, [pc, #200]	; (8005b4c <SystemCoreClockUpdate+0x138>)
 8005a84:	601a      	str	r2, [r3, #0]
      break;
 8005a86:	e045      	b.n	8005b14 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005a88:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <SystemCoreClockUpdate+0x134>)
 8005a8a:	4a31      	ldr	r2, [pc, #196]	; (8005b50 <SystemCoreClockUpdate+0x13c>)
 8005a8c:	601a      	str	r2, [r3, #0]
      break;
 8005a8e:	e041      	b.n	8005b14 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d105      	bne.n	8005abe <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8005ab2:	4a26      	ldr	r2, [pc, #152]	; (8005b4c <SystemCoreClockUpdate+0x138>)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e00d      	b.n	8005ada <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d105      	bne.n	8005ad0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <SystemCoreClockUpdate+0x13c>)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e004      	b.n	8005ada <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	0f5b      	lsrs	r3, r3, #29
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	3301      	adds	r3, #1
 8005afc:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	4a10      	ldr	r2, [pc, #64]	; (8005b48 <SystemCoreClockUpdate+0x134>)
 8005b08:	6013      	str	r3, [r2, #0]
      break;
 8005b0a:	e003      	b.n	8005b14 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8005b0c:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <SystemCoreClockUpdate+0x134>)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6013      	str	r3, [r2, #0]
      break;
 8005b12:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <SystemCoreClockUpdate+0x140>)
 8005b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b26:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <SystemCoreClockUpdate+0x134>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <SystemCoreClockUpdate+0x134>)
 8005b34:	6013      	str	r3, [r2, #0]

}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	08017914 	.word	0x08017914
 8005b48:	20000078 	.word	0x20000078
 8005b4c:	00f42400 	.word	0x00f42400
 8005b50:	01e84800 	.word	0x01e84800
 8005b54:	080178b4 	.word	0x080178b4

08005b58 <LL_AHB2_GRP1_EnableClock>:
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LL_APB1_GRP1_EnableClock>:
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4013      	ands	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005bae:	68fb      	ldr	r3, [r7, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <LL_APB2_GRP1_EnableClock>:
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005be0:	68fb      	ldr	r3, [r7, #12]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	; 0x38
 8005bf4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c04:	f107 031c 	add.w	r3, r7, #28
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c10:	463b      	mov	r3, r7
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	615a      	str	r2, [r3, #20]
 8005c20:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8005c2a:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c2c:	f240 227f 	movw	r2, #639	; 0x27f
 8005c30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c32:	4b29      	ldr	r3, [pc, #164]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8005c38:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c3a:	2209      	movs	r2, #9
 8005c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c4a:	4823      	ldr	r0, [pc, #140]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c4c:	f007 f8d8 	bl	800ce00 <HAL_TIM_Base_Init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005c56:	f7fe fb7f 	bl	8004358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c64:	4619      	mov	r1, r3
 8005c66:	481c      	ldr	r0, [pc, #112]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c68:	f007 fc8e 	bl	800d588 <HAL_TIM_ConfigClockSource>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005c72:	f7fe fb71 	bl	8004358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005c76:	4818      	ldr	r0, [pc, #96]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c78:	f007 f96e 	bl	800cf58 <HAL_TIM_PWM_Init>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005c82:	f7fe fb69 	bl	8004358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005c86:	2320      	movs	r3, #32
 8005c88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c8e:	f107 031c 	add.w	r3, r7, #28
 8005c92:	4619      	mov	r1, r3
 8005c94:	4810      	ldr	r0, [pc, #64]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005c96:	f008 f8fd 	bl	800de94 <HAL_TIMEx_MasterConfigSynchronization>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005ca0:	f7fe fb5a 	bl	8004358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ca4:	2360      	movs	r3, #96	; 0x60
 8005ca6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9;
 8005ca8:	2309      	movs	r3, #9
 8005caa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4807      	ldr	r0, [pc, #28]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005cbc:	f007 fb4c 	bl	800d358 <HAL_TIM_PWM_ConfigChannel>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005cc6:	f7fe fb47 	bl	8004358 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005cca:	4803      	ldr	r0, [pc, #12]	; (8005cd8 <MX_TIM2_Init+0xe8>)
 8005ccc:	f000 f850 	bl	8005d70 <HAL_TIM_MspPostInit>

}
 8005cd0:	bf00      	nop
 8005cd2:	3738      	adds	r7, #56	; 0x38
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	200284a4 	.word	0x200284a4

08005cdc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <MX_TIM16_Init+0x48>)
 8005ce4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005ce8:	221f      	movs	r2, #31
 8005cea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cec:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005d0c:	4804      	ldr	r0, [pc, #16]	; (8005d20 <MX_TIM16_Init+0x44>)
 8005d0e:	f007 f877 	bl	800ce00 <HAL_TIM_Base_Init>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005d18:	f7fe fb1e 	bl	8004358 <Error_Handler>
  }

}
 8005d1c:	bf00      	nop
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	200284e4 	.word	0x200284e4
 8005d24:	40014400 	.word	0x40014400

08005d28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d103      	bne.n	8005d42 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	f7ff ff25 	bl	8005b8a <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005d40:	e010      	b.n	8005d64 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM16)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <HAL_TIM_Base_MspInit+0x44>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10b      	bne.n	8005d64 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005d4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005d50:	f7ff ff34 	bl	8005bbc <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	2019      	movs	r0, #25
 8005d5a:	f002 fa3c 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005d5e:	2019      	movs	r0, #25
 8005d60:	f002 fa53 	bl	800820a <HAL_NVIC_EnableIRQ>
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40014400 	.word	0x40014400

08005d70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d112      	bne.n	8005db8 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d92:	2002      	movs	r0, #2
 8005d94:	f7ff fee0 	bl	8005b58 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d98:	2308      	movs	r3, #8
 8005d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dac:	f107 030c 	add.w	r3, r7, #12
 8005db0:	4619      	mov	r1, r3
 8005db2:	4803      	ldr	r0, [pc, #12]	; (8005dc0 <HAL_TIM_MspPostInit+0x50>)
 8005db4:	f002 fd96 	bl	80088e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005db8:	bf00      	nop
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	48000400 	.word	0x48000400

08005dc4 <HAL_COMP_TriggerCallback>:
uint16_t calibration_1 = 0;
union ColorComplex lightMessageComplexTouch = {0};
uint32_t lightsSimpleMessageReceivedTouch;
uint32_t prev_msg = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8005dcc:	4b1a      	ldr	r3, [pc, #104]	; (8005e38 <HAL_COMP_TriggerCallback+0x74>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <HAL_COMP_TriggerCallback+0x78>)
 8005dd6:	801a      	strh	r2, [r3, #0]

//	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LH_SIG_GPIO_Port, LH_SIG_Pin);
	uint32_t pin_state = HAL_COMP_GetOutputLevel(hcomp);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f002 f8c1 	bl	8007f60 <HAL_COMP_GetOutputLevel>
 8005dde:	60f8      	str	r0, [r7, #12]
	if (pin_state == COMP_OUTPUT_LEVEL_HIGH) {
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d109      	bne.n	8005dfa <HAL_COMP_TriggerCallback+0x36>
		//Rising edge
		input0.rise_time_ = timestamp;
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <HAL_COMP_TriggerCallback+0x78>)
 8005de8:	881a      	ldrh	r2, [r3, #0]
 8005dea:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <HAL_COMP_TriggerCallback+0x7c>)
 8005dec:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_COMP_TriggerCallback+0x7c>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8005df8:	e019      	b.n	8005e2e <HAL_COMP_TriggerCallback+0x6a>
	} else if (input0.rise_valid_ && pin_state == COMP_OUTPUT_LEVEL_LOW) {
 8005dfa:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <HAL_COMP_TriggerCallback+0x7c>)
 8005dfc:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d014      	beq.n	8005e2e <HAL_COMP_TriggerCallback+0x6a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d111      	bne.n	8005e2e <HAL_COMP_TriggerCallback+0x6a>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <HAL_COMP_TriggerCallback+0x7c>)
 8005e0c:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <HAL_COMP_TriggerCallback+0x78>)
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <HAL_COMP_TriggerCallback+0x7c>)
 8005e16:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4807      	ldr	r0, [pc, #28]	; (8005e40 <HAL_COMP_TriggerCallback+0x7c>)
 8005e22:	f7fd ff31 	bl	8003c88 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_COMP_TriggerCallback+0x7c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200284e4 	.word	0x200284e4
 8005e3c:	20000afa 	.word	0x20000afa
 8005e40:	200278c8 	.word	0x200278c8
 8005e44:	00000000 	.word	0x00000000

08005e48 <HAL_TSC_ConvCpltCallback>:


uint32_t temp = 0x01;
// TODO: make threshold update if "touch" is active for too long
void HAL_TSC_ConvCpltCallback(TSC_HandleTypeDef *htsc) {
 8005e48:	b5b0      	push	{r4, r5, r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	/*##-5- Discharge the touch-sensing IOs ####################################*/
	HAL_TSC_IODischarge(htsc, ENABLE);
 8005e50:	2101      	movs	r1, #1
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fc78 	bl	8005748 <HAL_TSC_IODischarge>
	/* Note: a delay can be added here */

	uint32_t uhTSCAcquisitionValue;
	TSC_GroupStatusTypeDef status = HAL_TSC_GroupGetStatus(htsc, TSC_GROUP2_IDX);
 8005e58:	2101      	movs	r1, #1
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fbfd 	bl	800565a <HAL_TSC_GroupGetStatus>
 8005e60:	4603      	mov	r3, r0
 8005e62:	75bb      	strb	r3, [r7, #22]
	uint32_t cur_time;
	/*##-6- Check if the acquisition is correct (no max count) #################*/
	if (status == TSC_GROUP_COMPLETED) {
 8005e64:	7dbb      	ldrb	r3, [r7, #22]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	f040 8115 	bne.w	8006096 <HAL_TSC_ConvCpltCallback+0x24e>
		/*##-7- Read the acquisition value #######################################*/
		uhTSCAcquisitionValue = HAL_TSC_GroupGetValue(htsc, TSC_GROUP2_IDX);
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fc15 	bl	800569e <HAL_TSC_GroupGetValue>
 8005e74:	6138      	str	r0, [r7, #16]
		uint8_t touch;
		if (cap_sensor == 0) {
 8005e76:	4ba0      	ldr	r3, [pc, #640]	; (80060f8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d17d      	bne.n	8005f7a <HAL_TSC_ConvCpltCallback+0x132>
			if(calibration_0 <= CALIBRATION_SAMPLES){
 8005e7e:	4b9f      	ldr	r3, [pc, #636]	; (80060fc <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d83a      	bhi.n	8005efc <HAL_TSC_ConvCpltCallback+0xb4>
				touch = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
				if(calibration_0 == 0){
 8005e8a:	4b9c      	ldr	r3, [pc, #624]	; (80060fc <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <HAL_TSC_ConvCpltCallback+0x5c>
					ts1_threshold = uhTSCAcquisitionValue;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9c:	4b98      	ldr	r3, [pc, #608]	; (8006100 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005e9e:	edc3 7a00 	vstr	s15, [r3]
 8005ea2:	e024      	b.n	8005eee <HAL_TSC_ConvCpltCallback+0xa6>
				}else{
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005ea4:	6938      	ldr	r0, [r7, #16]
 8005ea6:	f7fa fab7 	bl	8000418 <__aeabi_ui2d>
 8005eaa:	a38f      	add	r3, pc, #572	; (adr r3, 80060e8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa fb2c 	bl	800050c <__aeabi_dmul>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	4625      	mov	r5, r4
 8005eba:	461c      	mov	r4, r3
 8005ebc:	4b90      	ldr	r3, [pc, #576]	; (8006100 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fa facb 	bl	800045c <__aeabi_f2d>
 8005ec6:	a38a      	add	r3, pc, #552	; (adr r3, 80060f0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f7fa fb1e 	bl	800050c <__aeabi_dmul>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f7fa f962 	bl	80001a0 <__adddf3>
 8005edc:	4603      	mov	r3, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	f7fa fdc2 	bl	8000a6c <__aeabi_d2f>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	4b85      	ldr	r3, [pc, #532]	; (8006100 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005eec:	601a      	str	r2, [r3, #0]
				}
				calibration_0 += 1;
 8005eee:	4b83      	ldr	r3, [pc, #524]	; (80060fc <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	4b81      	ldr	r3, [pc, #516]	; (80060fc <HAL_TSC_ConvCpltCallback+0x2b4>)
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e0ba      	b.n	8006072 <HAL_TSC_ConvCpltCallback+0x22a>
			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts1_threshold - THRESHOLD_TOLERANCE));
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f06:	4b7e      	ldr	r3, [pc, #504]	; (8006100 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005f08:	edd3 7a00 	vldr	s15, [r3]
 8005f0c:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8006104 <HAL_TSC_ConvCpltCallback+0x2bc>
 8005f10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1c:	bf94      	ite	ls
 8005f1e:	2301      	movls	r3, #1
 8005f20:	2300      	movhi	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 80a2 	bne.w	8006072 <HAL_TSC_ConvCpltCallback+0x22a>
					ts1_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts1_threshold * (1-ALPHA_WEIGHT);
 8005f2e:	6938      	ldr	r0, [r7, #16]
 8005f30:	f7fa fa72 	bl	8000418 <__aeabi_ui2d>
 8005f34:	a36c      	add	r3, pc, #432	; (adr r3, 80060e8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa fae7 	bl	800050c <__aeabi_dmul>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	460c      	mov	r4, r1
 8005f42:	4625      	mov	r5, r4
 8005f44:	461c      	mov	r4, r3
 8005f46:	4b6e      	ldr	r3, [pc, #440]	; (8006100 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fa fa86 	bl	800045c <__aeabi_f2d>
 8005f50:	a367      	add	r3, pc, #412	; (adr r3, 80060f0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f7fa fad9 	bl	800050c <__aeabi_dmul>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7fa f91d 	bl	80001a0 <__adddf3>
 8005f66:	4603      	mov	r3, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	f7fa fd7d 	bl	8000a6c <__aeabi_d2f>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4b62      	ldr	r3, [pc, #392]	; (8006100 <HAL_TSC_ConvCpltCallback+0x2b8>)
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e07b      	b.n	8006072 <HAL_TSC_ConvCpltCallback+0x22a>
				}
			}
		} else {
			if(calibration_1 <= CALIBRATION_SAMPLES){
 8005f7a:	4b63      	ldr	r3, [pc, #396]	; (8006108 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	2b64      	cmp	r3, #100	; 0x64
 8005f80:	d83a      	bhi.n	8005ff8 <HAL_TSC_ConvCpltCallback+0x1b0>
				touch = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75fb      	strb	r3, [r7, #23]
				if(calibration_1 == 0){
 8005f86:	4b60      	ldr	r3, [pc, #384]	; (8006108 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <HAL_TSC_ConvCpltCallback+0x158>
					ts2_threshold = uhTSCAcquisitionValue;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	4b5c      	ldr	r3, [pc, #368]	; (800610c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005f9a:	edc3 7a00 	vstr	s15, [r3]
 8005f9e:	e024      	b.n	8005fea <HAL_TSC_ConvCpltCallback+0x1a2>
				}else{
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8005fa0:	6938      	ldr	r0, [r7, #16]
 8005fa2:	f7fa fa39 	bl	8000418 <__aeabi_ui2d>
 8005fa6:	a350      	add	r3, pc, #320	; (adr r3, 80060e8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa faae 	bl	800050c <__aeabi_dmul>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4625      	mov	r5, r4
 8005fb6:	461c      	mov	r4, r3
 8005fb8:	4b54      	ldr	r3, [pc, #336]	; (800610c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fa fa4d 	bl	800045c <__aeabi_f2d>
 8005fc2:	a34b      	add	r3, pc, #300	; (adr r3, 80060f0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa faa0 	bl	800050c <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	f7fa f8e4 	bl	80001a0 <__adddf3>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	4618      	mov	r0, r3
 8005fde:	4621      	mov	r1, r4
 8005fe0:	f7fa fd44 	bl	8000a6c <__aeabi_d2f>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b49      	ldr	r3, [pc, #292]	; (800610c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8005fe8:	601a      	str	r2, [r3, #0]
				}
				calibration_1 += 1;
 8005fea:	4b47      	ldr	r3, [pc, #284]	; (8006108 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	4b45      	ldr	r3, [pc, #276]	; (8006108 <HAL_TSC_ConvCpltCallback+0x2c0>)
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e03c      	b.n	8006072 <HAL_TSC_ConvCpltCallback+0x22a>

			}
			else{
				touch = (uhTSCAcquisitionValue <= (ts2_threshold - THRESHOLD_TOLERANCE));
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006002:	4b42      	ldr	r3, [pc, #264]	; (800610c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006004:	edd3 7a00 	vldr	s15, [r3]
 8006008:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006104 <HAL_TSC_ConvCpltCallback+0x2bc>
 800600c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006018:	bf94      	ite	ls
 800601a:	2301      	movls	r3, #1
 800601c:	2300      	movhi	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	75fb      	strb	r3, [r7, #23]

				// if not touched, update threshold
				if(touch == 0){
 8006022:	7dfb      	ldrb	r3, [r7, #23]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d124      	bne.n	8006072 <HAL_TSC_ConvCpltCallback+0x22a>
					ts2_threshold = uhTSCAcquisitionValue * ALPHA_WEIGHT + ts2_threshold * (1-ALPHA_WEIGHT);
 8006028:	6938      	ldr	r0, [r7, #16]
 800602a:	f7fa f9f5 	bl	8000418 <__aeabi_ui2d>
 800602e:	a32e      	add	r3, pc, #184	; (adr r3, 80060e8 <HAL_TSC_ConvCpltCallback+0x2a0>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f7fa fa6a 	bl	800050c <__aeabi_dmul>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	4625      	mov	r5, r4
 800603e:	461c      	mov	r4, r3
 8006040:	4b32      	ldr	r3, [pc, #200]	; (800610c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f7fa fa09 	bl	800045c <__aeabi_f2d>
 800604a:	a329      	add	r3, pc, #164	; (adr r3, 80060f0 <HAL_TSC_ConvCpltCallback+0x2a8>)
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f7fa fa5c 	bl	800050c <__aeabi_dmul>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4620      	mov	r0, r4
 800605a:	4629      	mov	r1, r5
 800605c:	f7fa f8a0 	bl	80001a0 <__adddf3>
 8006060:	4603      	mov	r3, r0
 8006062:	460c      	mov	r4, r1
 8006064:	4618      	mov	r0, r3
 8006066:	4621      	mov	r1, r4
 8006068:	f7fa fd00 	bl	8000a6c <__aeabi_d2f>
 800606c:	4602      	mov	r2, r0
 800606e:	4b27      	ldr	r3, [pc, #156]	; (800610c <HAL_TSC_ConvCpltCallback+0x2c4>)
 8006070:	601a      	str	r2, [r3, #0]
				}
			}
		}

		cur_time = HAL_GetTick();
 8006072:	f000 fb7d 	bl	8006770 <HAL_GetTick>
 8006076:	60f8      	str	r0, [r7, #12]
		debounce(&dbs[cap_sensor], touch, cur_time);
 8006078:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4a24      	ldr	r2, [pc, #144]	; (8006110 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8006080:	4413      	add	r3, r2
 8006082:	7df9      	ldrb	r1, [r7, #23]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fa28 	bl	80064dc <debounce>
		process_touches(&touch_detector, dbs, cur_time);
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4920      	ldr	r1, [pc, #128]	; (8006110 <HAL_TSC_ConvCpltCallback+0x2c8>)
 8006090:	4820      	ldr	r0, [pc, #128]	; (8006114 <HAL_TSC_ConvCpltCallback+0x2cc>)
 8006092:	f000 f879 	bl	8006188 <process_touches>
	}

	//Switches between the two channels to be acquired
	if (cap_sensor == 0) {
 8006096:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_TSC_ConvCpltCallback+0x264>
		IoConfig.ChannelIOs = TSC_GROUP2_IO4; /* TS4 touchkey */
 800609e:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80060a0:	2280      	movs	r2, #128	; 0x80
 80060a2:	601a      	str	r2, [r3, #0]
		cap_sensor = 1;
 80060a4:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e005      	b.n	80060b8 <HAL_TSC_ConvCpltCallback+0x270>
	} else {
		IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* TS3 touchkey */
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80060ae:	2240      	movs	r2, #64	; 0x40
 80060b0:	601a      	str	r2, [r3, #0]
		cap_sensor = 0;
 80060b2:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_TSC_ConvCpltCallback+0x2b0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_TSC_IOConfig(htsc, &IoConfig) != HAL_OK) {
 80060b8:	4917      	ldr	r1, [pc, #92]	; (8006118 <HAL_TSC_ConvCpltCallback+0x2d0>)
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fb01 	bl	80056c2 <HAL_TSC_IOConfig>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_TSC_ConvCpltCallback+0x282>
		/* Initialization Error */
		Error_Handler();
 80060c6:	f7fe f947 	bl	8004358 <Error_Handler>
	}

	/*##-9- Re-start the acquisition process ###################################*/
	if (HAL_TSC_Start_IT(htsc) != HAL_OK) {
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fa68 	bl	80055a0 <HAL_TSC_Start_IT>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_TSC_ConvCpltCallback+0x292>
		/* Acquisition Error */
		Error_Handler();
 80060d6:	f7fe f93f 	bl	8004358 <Error_Handler>
	}

}
 80060da:	bf00      	nop
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bdb0      	pop	{r4, r5, r7, pc}
 80060e2:	bf00      	nop
 80060e4:	f3af 8000 	nop.w
 80060e8:	47ae147b 	.word	0x47ae147b
 80060ec:	3f847ae1 	.word	0x3f847ae1
 80060f0:	7ae147ae 	.word	0x7ae147ae
 80060f4:	3fefae14 	.word	0x3fefae14
 80060f8:	20000afc 	.word	0x20000afc
 80060fc:	20000b10 	.word	0x20000b10
 8006100:	20028530 	.word	0x20028530
 8006104:	42700000 	.word	0x42700000
 8006108:	20000b12 	.word	0x20000b12
 800610c:	20028554 	.word	0x20028554
 8006110:	20000b00 	.word	0x20000b00
 8006114:	20028538 	.word	0x20028538
 8006118:	20028524 	.word	0x20028524

0800611c <touchSensingStart>:


void touchSensingStart(void) {
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
	ts1_threshold = 0;
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <touchSensingStart+0x5c>)
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
	ts2_threshold = 0;
 8006128:	4b14      	ldr	r3, [pc, #80]	; (800617c <touchSensingStart+0x60>)
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

	IoConfig.ChannelIOs = TSC_GROUP2_IO3; /* Start with the first channel */
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <touchSensingStart+0x64>)
 8006132:	2240      	movs	r2, #64	; 0x40
 8006134:	601a      	str	r2, [r3, #0]
	IoConfig.SamplingIOs = TSC_GROUP2_IO1;
 8006136:	4b12      	ldr	r3, [pc, #72]	; (8006180 <touchSensingStart+0x64>)
 8006138:	2210      	movs	r2, #16
 800613a:	609a      	str	r2, [r3, #8]
	IoConfig.ShieldIOs = 0;
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <touchSensingStart+0x64>)
 800613e:	2200      	movs	r2, #0
 8006140:	605a      	str	r2, [r3, #4]

	if (HAL_TSC_IOConfig(&htsc, &IoConfig) != HAL_OK) {
 8006142:	490f      	ldr	r1, [pc, #60]	; (8006180 <touchSensingStart+0x64>)
 8006144:	480f      	ldr	r0, [pc, #60]	; (8006184 <touchSensingStart+0x68>)
 8006146:	f7ff fabc 	bl	80056c2 <HAL_TSC_IOConfig>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <touchSensingStart+0x38>
		/* Initialization Error */
		Error_Handler();
 8006150:	f7fe f902 	bl	8004358 <Error_Handler>
	}

	HAL_TSC_IODischarge(&htsc, ENABLE);
 8006154:	2101      	movs	r1, #1
 8006156:	480b      	ldr	r0, [pc, #44]	; (8006184 <touchSensingStart+0x68>)
 8006158:	f7ff faf6 	bl	8005748 <HAL_TSC_IODischarge>
	HAL_Delay(5); /* 1 ms is more than enough to discharge all capacitors */
 800615c:	2005      	movs	r0, #5
 800615e:	f000 fb1f 	bl	80067a0 <HAL_Delay>
	if (HAL_TSC_Start_IT(&htsc) != HAL_OK) {
 8006162:	4808      	ldr	r0, [pc, #32]	; (8006184 <touchSensingStart+0x68>)
 8006164:	f7ff fa1c 	bl	80055a0 <HAL_TSC_Start_IT>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <touchSensingStart+0x56>
		/* Acquisition Error */
		Error_Handler();
 800616e:	f7fe f8f3 	bl	8004358 <Error_Handler>
	}
}
 8006172:	bf00      	nop
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20028530 	.word	0x20028530
 800617c:	20028554 	.word	0x20028554
 8006180:	20028524 	.word	0x20028524
 8006184:	20028558 	.word	0x20028558

08006188 <process_touches>:
}

uint8_t temp_flag = 1;
enum TouchType action = None;

void process_touches(TouchDetector *self, Debouncer *dbs, uint32_t cur_time) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b08c      	sub	sp, #48	; 0x30
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]

//	action = None;

	if (self->touch_state == Idle) {
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	7e1b      	ldrb	r3, [r3, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d123      	bne.n	80061e4 <process_touches+0x5c>
		if (dbs[0].clean_out) {
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	795b      	ldrb	r3, [r3, #5]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00c      	beq.n	80061be <process_touches+0x36>
			// front button is held

			self->touch_state = OnePressed;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 0;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	605a      	str	r2, [r3, #4]
			action = FrontHold;
 80061b6:	4b99      	ldr	r3, [pc, #612]	; (800641c <process_touches+0x294>)
 80061b8:	2205      	movs	r2, #5
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e126      	b.n	800640c <process_touches+0x284>

		} else if (dbs[1].clean_out) {
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	3308      	adds	r3, #8
 80061c2:	795b      	ldrb	r3, [r3, #5]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8121 	beq.w	800640c <process_touches+0x284>
			// back button is held

			self->touch_state = OnePressed;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	761a      	strb	r2, [r3, #24]
			self->touches[0].cap_idx = 1;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]
			self->touches[0].start_t = cur_time;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	605a      	str	r2, [r3, #4]
			action = BackHold;
 80061dc:	4b8f      	ldr	r3, [pc, #572]	; (800641c <process_touches+0x294>)
 80061de:	2206      	movs	r2, #6
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e113      	b.n	800640c <process_touches+0x284>
		}
	} else if (self->touch_state == OnePressed) {
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	7e1b      	ldrb	r3, [r3, #24]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d12d      	bne.n	8006248 <process_touches+0xc0>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f1c3 0301 	rsb	r3, r3, #1
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4413      	add	r3, r2
 80061fa:	795b      	ldrb	r3, [r3, #5]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d010      	beq.n	8006222 <process_touches+0x9a>
			self->touch_state = TwoPressed;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2202      	movs	r2, #2
 8006204:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = 1 - self->touches[0].cap_idx;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f1c3 0301 	rsb	r3, r3, #1
 800620e:	b2da      	uxtb	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	611a      	str	r2, [r3, #16]
			action = BothHold;
 800621a:	4b80      	ldr	r3, [pc, #512]	; (800641c <process_touches+0x294>)
 800621c:	2207      	movs	r2, #7
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e0f4      	b.n	800640c <process_touches+0x284>

		} else if (!dbs[self->touches[0].cap_idx].clean_out) {
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	4413      	add	r3, r2
 800622c:	795b      	ldrb	r3, [r3, #5]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 80ec 	bne.w	800640c <process_touches+0x284>
			self->touch_state = OneReleasedNoPressed;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2203      	movs	r2, #3
 8006238:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	609a      	str	r2, [r3, #8]
			action = BothRelease;
 8006240:	4b76      	ldr	r3, [pc, #472]	; (800641c <process_touches+0x294>)
 8006242:	2208      	movs	r2, #8
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e0e1      	b.n	800640c <process_touches+0x284>

		}
	} else if (self->touch_state == TwoPressed) {
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	7e1b      	ldrb	r3, [r3, #24]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d11e      	bne.n	800628e <process_touches+0x106>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	795b      	ldrb	r3, [r3, #5]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <process_touches+0xe6>
			self->touch_state = FirstReleasedSecondPressed;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2204      	movs	r2, #4
 8006264:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	609a      	str	r2, [r3, #8]
 800626c:	e0ce      	b.n	800640c <process_touches+0x284>
		} else if (!dbs[self->touches[1].cap_idx].clean_out) {
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	7b1b      	ldrb	r3, [r3, #12]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4413      	add	r3, r2
 8006278:	795b      	ldrb	r3, [r3, #5]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 80c6 	bne.w	800640c <process_touches+0x284>
			self->touch_state = SecondReleasedFirstPressed;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2205      	movs	r2, #5
 8006284:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	615a      	str	r2, [r3, #20]
 800628c:	e0be      	b.n	800640c <process_touches+0x284>
		}
	} else if (self->touch_state == OneReleasedNoPressed) {
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	7e1b      	ldrb	r3, [r3, #24]
 8006292:	2b03      	cmp	r3, #3
 8006294:	d134      	bne.n	8006300 <process_touches+0x178>
		if (dbs[1 - self->touches[0].cap_idx].clean_out) {
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f1c3 0301 	rsb	r3, r3, #1
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4413      	add	r3, r2
 80062a4:	795b      	ldrb	r3, [r3, #5]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <process_touches+0x13e>
			self->touch_state = FirstReleasedSecondPressed;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2204      	movs	r2, #4
 80062ae:	761a      	strb	r2, [r3, #24]
			self->touches[1].cap_idx = (1 - self->touches[0].cap_idx);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	f1c3 0301 	rsb	r3, r3, #1
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	731a      	strb	r2, [r3, #12]
			self->touches[1].start_t = cur_time;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	611a      	str	r2, [r3, #16]
 80062c4:	e0a2      	b.n	800640c <process_touches+0x284>
		} else if (cur_time - self->touches[0].end_t > MIN_SWIPE_GAP) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b0a      	cmp	r3, #10
 80062d0:	f240 809c 	bls.w	800640c <process_touches+0x284>
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	617b      	str	r3, [r7, #20]
			if (TAP_MIN_THRESHOLD < touch_duration && touch_duration < TAP_MAX_THRESHOLD) {
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b28      	cmp	r3, #40	; 0x28
 80062e4:	d905      	bls.n	80062f2 <process_touches+0x16a>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2bc7      	cmp	r3, #199	; 0xc7
 80062ea:	d802      	bhi.n	80062f2 <process_touches+0x16a>
				//Register a tap
				action = BothRelease;
 80062ec:	4b4b      	ldr	r3, [pc, #300]	; (800641c <process_touches+0x294>)
 80062ee:	2208      	movs	r2, #8
 80062f0:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 80062f2:	4b4b      	ldr	r3, [pc, #300]	; (8006420 <process_touches+0x298>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	761a      	strb	r2, [r3, #24]
 80062fe:	e085      	b.n	800640c <process_touches+0x284>
		}
	} else if (self->touch_state == FirstReleasedSecondPressed) {
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	7e1b      	ldrb	r3, [r3, #24]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d148      	bne.n	800639a <process_touches+0x212>
		if (!dbs[self->touches[1].cap_idx].clean_out) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	7b1b      	ldrb	r3, [r3, #12]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	795b      	ldrb	r3, [r3, #5]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d179      	bne.n	800640c <process_touches+0x284>
			self->touch_state = Idle;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	761a      	strb	r2, [r3, #24]
			self->touches[1].end_t = cur_time;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	615a      	str	r2, [r3, #20]
			action = None;
 8006324:	4b3d      	ldr	r3, [pc, #244]	; (800641c <process_touches+0x294>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	623b      	str	r3, [r7, #32]
			uint32_t touches_end_diff = self->touches[1].end_t - self->touches[0].end_t;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	61fb      	str	r3, [r7, #28]
			uint32_t touch_duration = self->touches[1].end_t - self->touches[0].start_t;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	61bb      	str	r3, [r7, #24]

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	2b28      	cmp	r3, #40	; 0x28
 8006352:	d80c      	bhi.n	800636e <process_touches+0x1e6>
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b28      	cmp	r3, #40	; 0x28
 8006358:	d809      	bhi.n	800636e <process_touches+0x1e6>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b28      	cmp	r3, #40	; 0x28
 800635e:	d906      	bls.n	800636e <process_touches+0x1e6>
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2bc7      	cmp	r3, #199	; 0xc7
 8006364:	d803      	bhi.n	800636e <process_touches+0x1e6>
				//Register a tap
				action = BothRelease;
 8006366:	4b2d      	ldr	r3, [pc, #180]	; (800641c <process_touches+0x294>)
 8006368:	2208      	movs	r2, #8
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	e011      	b.n	8006392 <process_touches+0x20a>
			}
			//Otherwise, it was a swipe. Might have to adjust these thresholds to allow swipe detection
			else if (touches_start_diff > TAP_MIN_THRESHOLD && touches_end_diff > TAP_MIN_THRESHOLD) {
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	2b28      	cmp	r3, #40	; 0x28
 8006372:	d90e      	bls.n	8006392 <process_touches+0x20a>
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2b28      	cmp	r3, #40	; 0x28
 8006378:	d90b      	bls.n	8006392 <process_touches+0x20a>
				//Register a swipe
				action = (self->touches[0].cap_idx << 1) | self->touches[1].cap_idx;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	b25a      	sxtb	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	7b1b      	ldrb	r3, [r3, #12]
 8006386:	b25b      	sxtb	r3, r3
 8006388:	4313      	orrs	r3, r2
 800638a:	b25b      	sxtb	r3, r3
 800638c:	b2da      	uxtb	r2, r3
 800638e:	4b23      	ldr	r3, [pc, #140]	; (800641c <process_touches+0x294>)
 8006390:	701a      	strb	r2, [r3, #0]
			}

			self->touch_state = Idle;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	761a      	strb	r2, [r3, #24]
 8006398:	e038      	b.n	800640c <process_touches+0x284>
		}
	} else if (self->touch_state == SecondReleasedFirstPressed) {
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	7e1b      	ldrb	r3, [r3, #24]
 800639e:	2b05      	cmp	r3, #5
 80063a0:	d134      	bne.n	800640c <process_touches+0x284>
		if (!dbs[self->touches[0].cap_idx].clean_out) {
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	4413      	add	r3, r2
 80063ac:	795b      	ldrb	r3, [r3, #5]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d12c      	bne.n	800640c <process_touches+0x284>
			self->touch_state = Idle;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	761a      	strb	r2, [r3, #24]
			self->touches[0].end_t = cur_time;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	609a      	str	r2, [r3, #8]

			uint32_t touches_start_diff = self->touches[1].start_t - self->touches[0].start_t;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint32_t touches_end_diff = self->touches[0].end_t - self->touches[1].end_t;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
			uint32_t touch_duration = self->touches[0].end_t - self->touches[0].start_t;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24

			//If touch start and touch end differences were small, then it was likely just a tap
			if ((touches_start_diff <= TAP_MIN_THRESHOLD) && (touches_end_diff <= TAP_MIN_THRESHOLD)
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	2b28      	cmp	r3, #40	; 0x28
 80063e6:	d80b      	bhi.n	8006400 <process_touches+0x278>
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	2b28      	cmp	r3, #40	; 0x28
 80063ec:	d808      	bhi.n	8006400 <process_touches+0x278>
					&& (TAP_MIN_THRESHOLD < touch_duration) && (touch_duration < TAP_MAX_THRESHOLD)) {
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	2b28      	cmp	r3, #40	; 0x28
 80063f2:	d905      	bls.n	8006400 <process_touches+0x278>
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	2bc7      	cmp	r3, #199	; 0xc7
 80063f8:	d802      	bhi.n	8006400 <process_touches+0x278>
				//Register a tap
				action = BothRelease;
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <process_touches+0x294>)
 80063fc:	2208      	movs	r2, #8
 80063fe:	701a      	strb	r2, [r3, #0]
			}
			lightsSimpleMessageReceivedTouch = 0;
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <process_touches+0x298>)
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
			self->touch_state = Idle;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	761a      	strb	r2, [r3, #24]
		}
	}

	if( action == None){
 800640c:	4b03      	ldr	r3, [pc, #12]	; (800641c <process_touches+0x294>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <process_touches+0x29c>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <process_touches+0x298>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e042      	b.n	80064a2 <process_touches+0x31a>
 800641c:	20000b18 	.word	0x20000b18
 8006420:	20028534 	.word	0x20028534

	}else if(action == SwipeForward){
 8006424:	4b29      	ldr	r3, [pc, #164]	; (80064cc <process_touches+0x344>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d103      	bne.n	8006434 <process_touches+0x2ac>
		lightsSimpleMessageReceivedTouch = 0x03; // cyan (green + blue)
 800642c:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <process_touches+0x348>)
 800642e:	2203      	movs	r2, #3
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e036      	b.n	80064a2 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x03 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x03 << 4;
	}else if(action == SwipeBackward){
 8006434:	4b25      	ldr	r3, [pc, #148]	; (80064cc <process_touches+0x344>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d103      	bne.n	8006444 <process_touches+0x2bc>
		lightsSimpleMessageReceivedTouch = (0x01 << 6) | 0x01; // orange (green + red)
 800643c:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <process_touches+0x348>)
 800643e:	2241      	movs	r2, #65	; 0x41
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e02e      	b.n	80064a2 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == FrontRelease){
 8006444:	4b21      	ldr	r3, [pc, #132]	; (80064cc <process_touches+0x344>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d103      	bne.n	8006454 <process_touches+0x2cc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 800644c:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <process_touches+0x348>)
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e026      	b.n	80064a2 <process_touches+0x31a>
	}else if(action == BackRelease){
 8006454:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <process_touches+0x344>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d103      	bne.n	8006464 <process_touches+0x2dc>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 800645c:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <process_touches+0x348>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e01e      	b.n	80064a2 <process_touches+0x31a>
	}else if(action == FrontHold){
 8006464:	4b19      	ldr	r3, [pc, #100]	; (80064cc <process_touches+0x344>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b05      	cmp	r3, #5
 800646a:	d103      	bne.n	8006474 <process_touches+0x2ec>
		lightsSimpleMessageReceivedTouch = 0x01; // green
 800646c:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <process_touches+0x348>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e016      	b.n	80064a2 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x01 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x01 << 4;
	}else if(action == BackHold){
 8006474:	4b15      	ldr	r3, [pc, #84]	; (80064cc <process_touches+0x344>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b06      	cmp	r3, #6
 800647a:	d103      	bne.n	8006484 <process_touches+0x2fc>
		lightsSimpleMessageReceivedTouch = 0x02; // blue
 800647c:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <process_touches+0x348>)
 800647e:	2202      	movs	r2, #2
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e00e      	b.n	80064a2 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= 0x02 << 2;
//		lightsSimpleMessageReceivedTouch |= 0x02 << 4;
	}else if(action == BothHold){
 8006484:	4b11      	ldr	r3, [pc, #68]	; (80064cc <process_touches+0x344>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b07      	cmp	r3, #7
 800648a:	d103      	bne.n	8006494 <process_touches+0x30c>
		lightsSimpleMessageReceivedTouch = 0x01 << 6; // red
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <process_touches+0x348>)
 800648e:	2240      	movs	r2, #64	; 0x40
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e006      	b.n	80064a2 <process_touches+0x31a>

//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 2;
//		lightsSimpleMessageReceivedTouch |= lightsSimpleMessageReceivedTouch << 4;
	}else if(action == BothRelease){
 8006494:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <process_touches+0x344>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d102      	bne.n	80064a2 <process_touches+0x31a>
		lightsSimpleMessageReceivedTouch = 0x00; // off
 800649c:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <process_touches+0x348>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
	}

	if(prev_msg != lightsSimpleMessageReceivedTouch ){
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <process_touches+0x34c>)
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <process_touches+0x348>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d00a      	beq.n	80064c4 <process_touches+0x33c>
		prev_msg = lightsSimpleMessageReceivedTouch;
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <process_touches+0x348>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a08      	ldr	r2, [pc, #32]	; (80064d4 <process_touches+0x34c>)
 80064b4:	6013      	str	r3, [r2, #0]

		osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessageReceivedTouch, 0U, 0);
 80064b6:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <process_touches+0x350>)
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	2300      	movs	r3, #0
 80064bc:	2200      	movs	r2, #0
 80064be:	4904      	ldr	r1, [pc, #16]	; (80064d0 <process_touches+0x348>)
 80064c0:	f008 fc3c 	bl	800ed3c <osMessageQueuePut>

	}

}
 80064c4:	bf00      	nop
 80064c6:	3730      	adds	r7, #48	; 0x30
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000b18 	.word	0x20000b18
 80064d0:	20028534 	.word	0x20028534
 80064d4:	20000b14 	.word	0x20000b14
 80064d8:	200278b4 	.word	0x200278b4

080064dc <debounce>:

void debounce(Debouncer *self, uint8_t noisy_in, uint32_t cur_time) {
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	460b      	mov	r3, r1
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	72fb      	strb	r3, [r7, #11]
	if (noisy_in != self->input) {
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	7afa      	ldrb	r2, [r7, #11]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d006      	beq.n	8006502 <debounce+0x26>
		self->input = noisy_in;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	7afa      	ldrb	r2, [r7, #11]
 80064f8:	711a      	strb	r2, [r3, #4]
		self->start_t = cur_time;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	601a      	str	r2, [r3, #0]
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
		self->clean_out = self->input;
	}
}
 8006500:	e009      	b.n	8006516 <debounce+0x3a>
	} else if (cur_time - self->start_t > DEBOUNCE_TIME) {
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b1e      	cmp	r3, #30
 800650c:	d903      	bls.n	8006516 <debounce+0x3a>
		self->clean_out = self->input;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	791a      	ldrb	r2, [r3, #4]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	715a      	strb	r2, [r3, #5]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <LL_AHB1_GRP1_EnableClock>:
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800652a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4313      	orrs	r3, r2
 8006538:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800653a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800653e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4013      	ands	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_AHB2_GRP1_EnableClock>:
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800655c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4313      	orrs	r3, r2
 800656a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800656c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4013      	ands	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
//  htsc.Init.MaxCountValue = TSC_MCV_511;
//  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
//  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
//  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
//  htsc.Init.MaxCountInterrupt = DISABLE;
  htsc.Instance = TSC;
 800658c:	4b1d      	ldr	r3, [pc, #116]	; (8006604 <MX_TSC_Init+0x7c>)
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <MX_TSC_Init+0x80>)
 8006590:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_4CYCLES;
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <MX_TSC_Init+0x7c>)
 8006594:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006598:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_4CYCLES;
 800659a:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <MX_TSC_Init+0x7c>)
 800659c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80065a0:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <MX_TSC_Init+0x7c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 80065a8:	4b16      	ldr	r3, [pc, #88]	; (8006604 <MX_TSC_Init+0x7c>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <MX_TSC_Init+0x7c>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80065b4:	4b13      	ldr	r3, [pc, #76]	; (8006604 <MX_TSC_Init+0x7c>)
 80065b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065ba:	619a      	str	r2, [r3, #24]
//	htsc.Init.MaxCountValue = TSC_MCV_8191;
	htsc.Init.MaxCountValue = TSC_MCV_16383;
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <MX_TSC_Init+0x7c>)
 80065be:	22c0      	movs	r2, #192	; 0xc0
 80065c0:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <MX_TSC_Init+0x7c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <MX_TSC_Init+0x7c>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <MX_TSC_Init+0x7c>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 80065d4:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <MX_TSC_Init+0x7c>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

//  htsc.Init.ChannelIOs = TSC_GROUP2_IO2|TSC_GROUP2_IO3|TSC_GROUP2_IO4;
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3|TSC_GROUP2_IO4;
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <MX_TSC_Init+0x7c>)
 80065de:	22c0      	movs	r2, #192	; 0xc0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30

  htsc.Init.ShieldIOs = 0;
 80065e2:	4b08      	ldr	r3, [pc, #32]	; (8006604 <MX_TSC_Init+0x7c>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO1;
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <MX_TSC_Init+0x7c>)
 80065ea:	2210      	movs	r2, #16
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80065ee:	4805      	ldr	r0, [pc, #20]	; (8006604 <MX_TSC_Init+0x7c>)
 80065f0:	f7fe ff56 	bl	80054a0 <HAL_TSC_Init>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80065fa:	f7fd fead 	bl	8004358 <Error_Handler>
  }

}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20028558 	.word	0x20028558
 8006608:	40024000 	.word	0x40024000

0800660c <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006614:	f107 030c 	add.w	r3, r7, #12
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	605a      	str	r2, [r3, #4]
 800661e:	609a      	str	r2, [r3, #8]
 8006620:	60da      	str	r2, [r3, #12]
 8006622:	611a      	str	r2, [r3, #16]
  if(tscHandle->Instance==TSC)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <HAL_TSC_MspInit+0x88>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d12e      	bne.n	800668c <HAL_TSC_MspInit+0x80>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 800662e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006632:	f7ff ff76 	bl	8006522 <LL_AHB1_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006636:	2002      	movs	r0, #2
 8006638:	f7ff ff8c 	bl	8006554 <LL_AHB2_GRP1_EnableClock>
    PB4     ------> TSC_G2_IO1
    PB5     ------> TSC_G2_IO2
    PB6     ------> TSC_G2_IO3
    PB7     ------> TSC_G2_IO4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800663c:	2310      	movs	r3, #16
 800663e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006640:	2312      	movs	r3, #18
 8006642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006648:	2300      	movs	r3, #0
 800664a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800664c:	2309      	movs	r3, #9
 800664e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006650:	f107 030c 	add.w	r3, r7, #12
 8006654:	4619      	mov	r1, r3
 8006656:	4810      	ldr	r0, [pc, #64]	; (8006698 <HAL_TSC_MspInit+0x8c>)
 8006658:	f002 f944 	bl	80088e4 <HAL_GPIO_Init>

//    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800665c:	23c0      	movs	r3, #192	; 0xc0
 800665e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006660:	2302      	movs	r3, #2
 8006662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006668:	2300      	movs	r3, #0
 800666a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 800666c:	2309      	movs	r3, #9
 800666e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006670:	f107 030c 	add.w	r3, r7, #12
 8006674:	4619      	mov	r1, r3
 8006676:	4808      	ldr	r0, [pc, #32]	; (8006698 <HAL_TSC_MspInit+0x8c>)
 8006678:	f002 f934 	bl	80088e4 <HAL_GPIO_Init>

    /* TSC interrupt Init */
    HAL_NVIC_SetPriority(TSC_IRQn, 5, 0);
 800667c:	2200      	movs	r2, #0
 800667e:	2105      	movs	r1, #5
 8006680:	2027      	movs	r0, #39	; 0x27
 8006682:	f001 fda8 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TSC_IRQn);
 8006686:	2027      	movs	r0, #39	; 0x27
 8006688:	f001 fdbf 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 800668c:	bf00      	nop
 800668e:	3720      	adds	r7, #32
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40024000 	.word	0x40024000
 8006698:	48000400 	.word	0x48000400

0800669c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800669c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800669e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066a0:	3304      	adds	r3, #4

080066a2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066a2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066a4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80066a6:	d3f9      	bcc.n	800669c <CopyDataInit>
  bx lr
 80066a8:	4770      	bx	lr

080066aa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80066aa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80066ac:	3004      	adds	r0, #4

080066ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80066ae:	4288      	cmp	r0, r1
  bcc FillZerobss
 80066b0:	d3fb      	bcc.n	80066aa <FillZerobss>
  bx lr
 80066b2:	4770      	bx	lr

080066b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80066b4:	480c      	ldr	r0, [pc, #48]	; (80066e8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80066b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80066b8:	480c      	ldr	r0, [pc, #48]	; (80066ec <LoopForever+0x8>)
 80066ba:	490d      	ldr	r1, [pc, #52]	; (80066f0 <LoopForever+0xc>)
 80066bc:	4a0d      	ldr	r2, [pc, #52]	; (80066f4 <LoopForever+0x10>)
 80066be:	2300      	movs	r3, #0
 80066c0:	f7ff ffef 	bl	80066a2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80066c4:	480c      	ldr	r0, [pc, #48]	; (80066f8 <LoopForever+0x14>)
 80066c6:	490d      	ldr	r1, [pc, #52]	; (80066fc <LoopForever+0x18>)
 80066c8:	2300      	movs	r3, #0
 80066ca:	f7ff fff0 	bl	80066ae <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80066ce:	480c      	ldr	r0, [pc, #48]	; (8006700 <LoopForever+0x1c>)
 80066d0:	490c      	ldr	r1, [pc, #48]	; (8006704 <LoopForever+0x20>)
 80066d2:	2300      	movs	r3, #0
 80066d4:	f7ff ffeb 	bl	80066ae <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80066d8:	f7ff f946 	bl	8005968 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80066dc:	f00f fbfa 	bl	8015ed4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80066e0:	f7fd fd62 	bl	80041a8 <main>

080066e4 <LoopForever>:

LoopForever:
  b LoopForever
 80066e4:	e7fe      	b.n	80066e4 <LoopForever>
 80066e6:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 80066e8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80066ec:	20000004 	.word	0x20000004
 80066f0:	20000160 	.word	0x20000160
 80066f4:	080182b8 	.word	0x080182b8
  INIT_BSS _sbss, _ebss
 80066f8:	20000210 	.word	0x20000210
 80066fc:	2002867c 	.word	0x2002867c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006700:	200300c4 	.word	0x200300c4
 8006704:	20030b5b 	.word	0x20030b5b

08006708 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006708:	e7fe      	b.n	8006708 <ADC1_IRQHandler>
	...

0800670c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <HAL_Init+0x3c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <HAL_Init+0x3c>)
 800671c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006720:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006722:	2003      	movs	r0, #3
 8006724:	f001 fd4c 	bl	80081c0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006728:	2000      	movs	r0, #0
 800672a:	f7fe fe6d 	bl	8005408 <HAL_InitTick>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	71fb      	strb	r3, [r7, #7]
 8006738:	e001      	b.n	800673e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800673a:	f7fe fe34 	bl	80053a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800673e:	79fb      	ldrb	r3, [r7, #7]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	58004000 	.word	0x58004000

0800674c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <HAL_IncTick+0x1c>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_IncTick+0x20>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4413      	add	r3, r2
 800675a:	4a03      	ldr	r2, [pc, #12]	; (8006768 <HAL_IncTick+0x1c>)
 800675c:	6013      	str	r3, [r2, #0]
}
 800675e:	bf00      	nop
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	2002859c 	.word	0x2002859c
 800676c:	20000080 	.word	0x20000080

08006770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  return uwTick;
 8006774:	4b03      	ldr	r3, [pc, #12]	; (8006784 <HAL_GetTick+0x14>)
 8006776:	681b      	ldr	r3, [r3, #0]
}
 8006778:	4618      	mov	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	2002859c 	.word	0x2002859c

08006788 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <HAL_GetTickPrio+0x14>)
 800678e:	681b      	ldr	r3, [r3, #0]
}
 8006790:	4618      	mov	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	2000007c 	.word	0x2000007c

080067a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80067a8:	f7ff ffe2 	bl	8006770 <HAL_GetTick>
 80067ac:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b8:	d004      	beq.n	80067c4 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <HAL_Delay+0x40>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80067c4:	bf00      	nop
 80067c6:	f7ff ffd3 	bl	8006770 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d8f7      	bhi.n	80067c6 <HAL_Delay+0x26>
    {
    }
  }
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000080 	.word	0x20000080

080067e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
//  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	609a      	str	r2, [r3, #8]
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800683c:	b490      	push	{r4, r7}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3360      	adds	r3, #96	; 0x60
 800684e:	461a      	mov	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006858:	6822      	ldr	r2, [r4, #0]
 800685a:	4b08      	ldr	r3, [pc, #32]	; (800687c <LL_ADC_SetOffset+0x40>)
 800685c:	4013      	ands	r3, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800686e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bc90      	pop	{r4, r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	03fff000 	.word	0x03fff000

08006880 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006880:	b490      	push	{r4, r7}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3360      	adds	r3, #96	; 0x60
 800688e:	461a      	mov	r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc90      	pop	{r4, r7}
 80068a6:	4770      	bx	lr

080068a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80068a8:	b490      	push	{r4, r7}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3360      	adds	r3, #96	; 0x60
 80068b8:	461a      	mov	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80068ce:	bf00      	nop
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc90      	pop	{r4, r7}
 80068d6:	4770      	bx	lr

080068d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80068fe:	b490      	push	{r4, r7}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3330      	adds	r3, #48	; 0x30
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	f003 030c 	and.w	r3, r3, #12
 800691a:	4413      	add	r3, r2
 800691c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800691e:	6822      	ldr	r2, [r4, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	211f      	movs	r1, #31
 8006928:	fa01 f303 	lsl.w	r3, r1, r3
 800692c:	43db      	mvns	r3, r3
 800692e:	401a      	ands	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0e9b      	lsrs	r3, r3, #26
 8006934:	f003 011f 	and.w	r1, r3, #31
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	fa01 f303 	lsl.w	r3, r1, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bc90      	pop	{r4, r7}
 800694e:	4770      	bx	lr

08006950 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006950:	b490      	push	{r4, r7}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3314      	adds	r3, #20
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	0e5b      	lsrs	r3, r3, #25
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	4413      	add	r3, r2
 800696e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006970:	6822      	ldr	r2, [r4, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	0d1b      	lsrs	r3, r3, #20
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2107      	movs	r1, #7
 800697c:	fa01 f303 	lsl.w	r3, r1, r3
 8006980:	43db      	mvns	r3, r3
 8006982:	401a      	ands	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	0d1b      	lsrs	r3, r3, #20
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	fa01 f303 	lsl.w	r3, r1, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bc90      	pop	{r4, r7}
 800699e:	4770      	bx	lr

080069a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b8:	43db      	mvns	r3, r3
 80069ba:	401a      	ands	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0318 	and.w	r3, r3, #24
 80069c2:	4908      	ldr	r1, [pc, #32]	; (80069e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80069c4:	40d9      	lsrs	r1, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	400b      	ands	r3, r1
 80069ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ce:	431a      	orrs	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	0007ffff 	.word	0x0007ffff

080069e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80069f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6093      	str	r3, [r2, #8]
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a20:	d101      	bne.n	8006a26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a70:	d101      	bne.n	8006a76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a98:	f043 0201 	orr.w	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ac0:	f043 0202 	orr.w	r2, r3, #2
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <LL_ADC_IsEnabled+0x18>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <LL_ADC_IsEnabled+0x1a>
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d101      	bne.n	8006b12 <LL_ADC_IsDisableOngoing+0x18>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <LL_ADC_IsDisableOngoing+0x1a>
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b34:	f043 0204 	orr.w	r2, r3, #4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b5c:	f043 0210 	orr.w	r2, r3, #16
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d101      	bne.n	8006b88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006baa:	f043 0220 	orr.w	r2, r3, #32
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d101      	bne.n	8006bd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e12a      	b.n	8006e54 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d109      	bne.n	8006c20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fa f97f 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fef1 	bl	8006a0c <LL_ADC_IsDeepPowerDownEnabled>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fed7 	bl	80069e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff ff0c 	bl	8006a5c <LL_ADC_IsInternalRegulatorEnabled>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d113      	bne.n	8006c72 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fef0 	bl	8006a34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c54:	4b81      	ldr	r3, [pc, #516]	; (8006e5c <HAL_ADC_Init+0x278>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	099b      	lsrs	r3, r3, #6
 8006c5a:	4a81      	ldr	r2, [pc, #516]	; (8006e60 <HAL_ADC_Init+0x27c>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	099b      	lsrs	r3, r3, #6
 8006c62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c64:	e002      	b.n	8006c6c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f9      	bne.n	8006c66 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fef0 	bl	8006a5c <LL_ADC_IsInternalRegulatorEnabled>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10d      	bne.n	8006c9e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f043 0210 	orr.w	r2, r3, #16
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff ff64 	bl	8006b70 <LL_ADC_REG_IsConversionOngoing>
 8006ca8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f040 80c5 	bne.w	8006e42 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f040 80c1 	bne.w	8006e42 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006cc8:	f043 0202 	orr.w	r2, r3, #2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fefd 	bl	8006ad4 <LL_ADC_IsEnabled>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ce0:	4860      	ldr	r0, [pc, #384]	; (8006e64 <HAL_ADC_Init+0x280>)
 8006ce2:	f7ff fef7 	bl	8006ad4 <LL_ADC_IsEnabled>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d105      	bne.n	8006cf8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	485d      	ldr	r0, [pc, #372]	; (8006e68 <HAL_ADC_Init+0x284>)
 8006cf4:	f7ff fd76 	bl	80067e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7e5b      	ldrb	r3, [r3, #25]
 8006cfc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006d08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006d0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d106      	bne.n	8006d34 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	045b      	lsls	r3, r3, #17
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	4b45      	ldr	r3, [pc, #276]	; (8006e6c <HAL_ADC_Init+0x288>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	69b9      	ldr	r1, [r7, #24]
 8006d60:	430b      	orrs	r3, r1
 8006d62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff ff01 	bl	8006b70 <LL_ADC_REG_IsConversionOngoing>
 8006d6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff ff22 	bl	8006bbe <LL_ADC_INJ_IsConversionOngoing>
 8006d7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d13d      	bne.n	8006dfe <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13a      	bne.n	8006dfe <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006d8c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d94:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da4:	f023 0302 	bic.w	r3, r3, #2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	69b9      	ldr	r1, [r7, #24]
 8006dae:	430b      	orrs	r3, r1
 8006db0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d118      	bne.n	8006dee <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006dc6:	f023 0304 	bic.w	r3, r3, #4
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006dd2:	4311      	orrs	r1, r2
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006dd8:	4311      	orrs	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006dde:	430a      	orrs	r2, r1
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	611a      	str	r2, [r3, #16]
 8006dec:	e007      	b.n	8006dfe <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d10c      	bne.n	8006e20 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	f023 010f 	bic.w	r1, r3, #15
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e1e:	e007      	b.n	8006e30 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 020f 	bic.w	r2, r2, #15
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e34:	f023 0303 	bic.w	r3, r3, #3
 8006e38:	f043 0201 	orr.w	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	655a      	str	r2, [r3, #84]	; 0x54
 8006e40:	e007      	b.n	8006e52 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	f043 0210 	orr.w	r2, r3, #16
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000078 	.word	0x20000078
 8006e60:	053e2d63 	.word	0x053e2d63
 8006e64:	50040000 	.word	0x50040000
 8006e68:	50040300 	.word	0x50040300
 8006e6c:	fff0c007 	.word	0xfff0c007

08006e70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fe75 	bl	8006b70 <LL_ADC_REG_IsConversionOngoing>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d167      	bne.n	8006f5c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_ADC_Start_DMA+0x2a>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e063      	b.n	8006f62 <HAL_ADC_Start_DMA+0xf2>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fcc2 	bl	800782c <ADC_Enable>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d14f      	bne.n	8006f52 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	f023 0206 	bic.w	r2, r3, #6
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	659a      	str	r2, [r3, #88]	; 0x58
 8006ede:	e002      	b.n	8006ee6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <HAL_ADC_Start_DMA+0xfc>)
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <HAL_ADC_Start_DMA+0x100>)
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <HAL_ADC_Start_DMA+0x104>)
 8006efc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	221c      	movs	r2, #28
 8006f04:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0210 	orr.w	r2, r2, #16
 8006f1c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0201 	orr.w	r2, r2, #1
 8006f2c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3340      	adds	r3, #64	; 0x40
 8006f38:	4619      	mov	r1, r3
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f001 fa49 	bl	80083d4 <HAL_DMA_Start_IT>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fde8 	bl	8006b20 <LL_ADC_REG_StartConversion>
 8006f50:	e006      	b.n	8006f60 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006f5a:	e001      	b.n	8006f60 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08007991 	.word	0x08007991
 8006f70:	08007a69 	.word	0x08007a69
 8006f74:	08007a85 	.word	0x08007a85

08006f78 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <HAL_ADC_Stop_DMA+0x16>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e051      	b.n	8007032 <HAL_ADC_Stop_DMA+0xba>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006f96:	2103      	movs	r1, #3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb93 	bl	80076c4 <ADC_ConversionStop>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d13f      	bne.n	8007028 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d10f      	bne.n	8006fe6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fa7d 	bl	80084ca <HAL_DMA_Abort>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0210 	bic.w	r2, r2, #16
 8006ff4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fc6f 	bl	80078e0 <ADC_Disable>
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	e002      	b.n	800700e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fc69 	bl	80078e0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f043 0201 	orr.w	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
	...

08007050 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b0a6      	sub	sp, #152	; 0x98
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_ADC_ConfigChannel+0x22>
 800706e:	2302      	movs	r3, #2
 8007070:	e31e      	b.n	80076b0 <HAL_ADC_ConfigChannel+0x660>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fd76 	bl	8006b70 <LL_ADC_REG_IsConversionOngoing>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 8303 	bne.w	8007692 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6859      	ldr	r1, [r3, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	f7ff fc30 	bl	80068fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fd64 	bl	8006b70 <LL_ADC_REG_IsConversionOngoing>
 80070a8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fd84 	bl	8006bbe <LL_ADC_INJ_IsConversionOngoing>
 80070b6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80070ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f040 8148 	bne.w	8007354 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8143 	bne.w	8007354 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6819      	ldr	r1, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	461a      	mov	r2, r3
 80070dc:	f7ff fc38 	bl	8006950 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d00a      	beq.n	8007118 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6919      	ldr	r1, [r3, #16]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007112:	f7ff fb93 	bl	800683c <LL_ADC_SetOffset>
 8007116:	e11d      	b.n	8007354 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fbae 	bl	8006880 <LL_ADC_GetOffsetChannel>
 8007124:	4603      	mov	r3, r0
 8007126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <HAL_ADC_ConfigChannel+0xf4>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2100      	movs	r1, #0
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fba3 	bl	8006880 <LL_ADC_GetOffsetChannel>
 800713a:	4603      	mov	r3, r0
 800713c:	0e9b      	lsrs	r3, r3, #26
 800713e:	f003 021f 	and.w	r2, r3, #31
 8007142:	e012      	b.n	800716a <HAL_ADC_ConfigChannel+0x11a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff fb98 	bl	8006880 <LL_ADC_GetOffsetChannel>
 8007150:	4603      	mov	r3, r0
 8007152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007156:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800715a:	fa93 f3a3 	rbit	r3, r3
 800715e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007162:	fab3 f383 	clz	r3, r3
 8007166:	b2db      	uxtb	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <HAL_ADC_ConfigChannel+0x132>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	0e9b      	lsrs	r3, r3, #26
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	e00a      	b.n	8007198 <HAL_ADC_ConfigChannel+0x148>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800718a:	fa93 f3a3 	rbit	r3, r3
 800718e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8007190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007192:	fab3 f383 	clz	r3, r3
 8007196:	b2db      	uxtb	r3, r3
 8007198:	429a      	cmp	r2, r3
 800719a:	d106      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff fb7f 	bl	80068a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2101      	movs	r1, #1
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fb65 	bl	8006880 <LL_ADC_GetOffsetChannel>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <HAL_ADC_ConfigChannel+0x186>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2101      	movs	r1, #1
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fb5a 	bl	8006880 <LL_ADC_GetOffsetChannel>
 80071cc:	4603      	mov	r3, r0
 80071ce:	0e9b      	lsrs	r3, r3, #26
 80071d0:	f003 021f 	and.w	r2, r3, #31
 80071d4:	e010      	b.n	80071f8 <HAL_ADC_ConfigChannel+0x1a8>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2101      	movs	r1, #1
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fb4f 	bl	8006880 <LL_ADC_GetOffsetChannel>
 80071e2:	4603      	mov	r3, r0
 80071e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071e8:	fa93 f3a3 	rbit	r3, r3
 80071ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80071ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f0:	fab3 f383 	clz	r3, r3
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007200:	2b00      	cmp	r3, #0
 8007202:	d105      	bne.n	8007210 <HAL_ADC_ConfigChannel+0x1c0>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	0e9b      	lsrs	r3, r3, #26
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	e00a      	b.n	8007226 <HAL_ADC_ConfigChannel+0x1d6>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007218:	fa93 f3a3 	rbit	r3, r3
 800721c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800721e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007220:	fab3 f383 	clz	r3, r3
 8007224:	b2db      	uxtb	r3, r3
 8007226:	429a      	cmp	r2, r3
 8007228:	d106      	bne.n	8007238 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	2101      	movs	r1, #1
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fb38 	bl	80068a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2102      	movs	r1, #2
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fb1e 	bl	8006880 <LL_ADC_GetOffsetChannel>
 8007244:	4603      	mov	r3, r0
 8007246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <HAL_ADC_ConfigChannel+0x214>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2102      	movs	r1, #2
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fb13 	bl	8006880 <LL_ADC_GetOffsetChannel>
 800725a:	4603      	mov	r3, r0
 800725c:	0e9b      	lsrs	r3, r3, #26
 800725e:	f003 021f 	and.w	r2, r3, #31
 8007262:	e010      	b.n	8007286 <HAL_ADC_ConfigChannel+0x236>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2102      	movs	r1, #2
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fb08 	bl	8006880 <LL_ADC_GetOffsetChannel>
 8007270:	4603      	mov	r3, r0
 8007272:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007276:	fa93 f3a3 	rbit	r3, r3
 800727a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800727c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800727e:	fab3 f383 	clz	r3, r3
 8007282:	b2db      	uxtb	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <HAL_ADC_ConfigChannel+0x24e>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	0e9b      	lsrs	r3, r3, #26
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	e00a      	b.n	80072b4 <HAL_ADC_ConfigChannel+0x264>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072a6:	fa93 f3a3 	rbit	r3, r3
 80072aa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80072ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ae:	fab3 f383 	clz	r3, r3
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d106      	bne.n	80072c6 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2200      	movs	r2, #0
 80072be:	2102      	movs	r1, #2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff faf1 	bl	80068a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2103      	movs	r1, #3
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fad7 	bl	8006880 <LL_ADC_GetOffsetChannel>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <HAL_ADC_ConfigChannel+0x2a2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2103      	movs	r1, #3
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff facc 	bl	8006880 <LL_ADC_GetOffsetChannel>
 80072e8:	4603      	mov	r3, r0
 80072ea:	0e9b      	lsrs	r3, r3, #26
 80072ec:	f003 021f 	and.w	r2, r3, #31
 80072f0:	e010      	b.n	8007314 <HAL_ADC_ConfigChannel+0x2c4>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2103      	movs	r1, #3
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff fac1 	bl	8006880 <LL_ADC_GetOffsetChannel>
 80072fe:	4603      	mov	r3, r0
 8007300:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007304:	fa93 f3a3 	rbit	r3, r3
 8007308:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800730a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730c:	fab3 f383 	clz	r3, r3
 8007310:	b2db      	uxtb	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <HAL_ADC_ConfigChannel+0x2dc>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	0e9b      	lsrs	r3, r3, #26
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	e00a      	b.n	8007342 <HAL_ADC_ConfigChannel+0x2f2>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007334:	fa93 f3a3 	rbit	r3, r3
 8007338:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800733a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800733c:	fab3 f383 	clz	r3, r3
 8007340:	b2db      	uxtb	r3, r3
 8007342:	429a      	cmp	r2, r3
 8007344:	d106      	bne.n	8007354 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2200      	movs	r2, #0
 800734c:	2103      	movs	r1, #3
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff faaa 	bl	80068a8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fbbb 	bl	8006ad4 <LL_ADC_IsEnabled>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 819f 	bne.w	80076a4 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6819      	ldr	r1, [r3, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	461a      	mov	r2, r3
 8007374:	f7ff fb14 	bl	80069a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4aab      	ldr	r2, [pc, #684]	; (800762c <HAL_ADC_ConfigChannel+0x5dc>)
 800737e:	4293      	cmp	r3, r2
 8007380:	f040 80fd 	bne.w	800757e <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <HAL_ADC_ConfigChannel+0x35c>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	0e9b      	lsrs	r3, r3, #26
 800739a:	3301      	adds	r3, #1
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	2b09      	cmp	r3, #9
 80073a2:	bf94      	ite	ls
 80073a4:	2301      	movls	r3, #1
 80073a6:	2300      	movhi	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	e012      	b.n	80073d2 <HAL_ADC_ConfigChannel+0x382>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b4:	fa93 f3a3 	rbit	r3, r3
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80073ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073bc:	fab3 f383 	clz	r3, r3
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	3301      	adds	r3, #1
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	bf94      	ite	ls
 80073cc:	2301      	movls	r3, #1
 80073ce:	2300      	movhi	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d064      	beq.n	80074a0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d107      	bne.n	80073f2 <HAL_ADC_ConfigChannel+0x3a2>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	0e9b      	lsrs	r3, r3, #26
 80073e8:	3301      	adds	r3, #1
 80073ea:	069b      	lsls	r3, r3, #26
 80073ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073f0:	e00e      	b.n	8007410 <HAL_ADC_ConfigChannel+0x3c0>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	fa93 f3a3 	rbit	r3, r3
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007402:	fab3 f383 	clz	r3, r3
 8007406:	b2db      	uxtb	r3, r3
 8007408:	3301      	adds	r3, #1
 800740a:	069b      	lsls	r3, r3, #26
 800740c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x3e0>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	0e9b      	lsrs	r3, r3, #26
 8007422:	3301      	adds	r3, #1
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	2101      	movs	r1, #1
 800742a:	fa01 f303 	lsl.w	r3, r1, r3
 800742e:	e010      	b.n	8007452 <HAL_ADC_ConfigChannel+0x402>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	fa93 f3a3 	rbit	r3, r3
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	fab3 f383 	clz	r3, r3
 8007444:	b2db      	uxtb	r3, r3
 8007446:	3301      	adds	r3, #1
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	2101      	movs	r1, #1
 800744e:	fa01 f303 	lsl.w	r3, r1, r3
 8007452:	ea42 0103 	orr.w	r1, r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x428>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	0e9b      	lsrs	r3, r3, #26
 8007468:	3301      	adds	r3, #1
 800746a:	f003 021f 	and.w	r2, r3, #31
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	051b      	lsls	r3, r3, #20
 8007476:	e011      	b.n	800749c <HAL_ADC_ConfigChannel+0x44c>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	fa93 f3a3 	rbit	r3, r3
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	fab3 f383 	clz	r3, r3
 800748c:	b2db      	uxtb	r3, r3
 800748e:	3301      	adds	r3, #1
 8007490:	f003 021f 	and.w	r2, r3, #31
 8007494:	4613      	mov	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4413      	add	r3, r2
 800749a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800749c:	430b      	orrs	r3, r1
 800749e:	e069      	b.n	8007574 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d107      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x46c>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	0e9b      	lsrs	r3, r3, #26
 80074b2:	3301      	adds	r3, #1
 80074b4:	069b      	lsls	r3, r3, #26
 80074b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074ba:	e00e      	b.n	80074da <HAL_ADC_ConfigChannel+0x48a>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	fa93 f3a3 	rbit	r3, r3
 80074c8:	61fb      	str	r3, [r7, #28]
  return result;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	fab3 f383 	clz	r3, r3
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3301      	adds	r3, #1
 80074d4:	069b      	lsls	r3, r3, #26
 80074d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <HAL_ADC_ConfigChannel+0x4aa>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	0e9b      	lsrs	r3, r3, #26
 80074ec:	3301      	adds	r3, #1
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	2101      	movs	r1, #1
 80074f4:	fa01 f303 	lsl.w	r3, r1, r3
 80074f8:	e010      	b.n	800751c <HAL_ADC_ConfigChannel+0x4cc>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	fa93 f3a3 	rbit	r3, r3
 8007506:	617b      	str	r3, [r7, #20]
  return result;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	fab3 f383 	clz	r3, r3
 800750e:	b2db      	uxtb	r3, r3
 8007510:	3301      	adds	r3, #1
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	2101      	movs	r1, #1
 8007518:	fa01 f303 	lsl.w	r3, r1, r3
 800751c:	ea42 0103 	orr.w	r1, r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <HAL_ADC_ConfigChannel+0x4f8>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	0e9b      	lsrs	r3, r3, #26
 8007532:	3301      	adds	r3, #1
 8007534:	f003 021f 	and.w	r2, r3, #31
 8007538:	4613      	mov	r3, r2
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	4413      	add	r3, r2
 800753e:	3b1e      	subs	r3, #30
 8007540:	051b      	lsls	r3, r3, #20
 8007542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007546:	e014      	b.n	8007572 <HAL_ADC_ConfigChannel+0x522>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	fa93 f3a3 	rbit	r3, r3
 8007554:	60fb      	str	r3, [r7, #12]
  return result;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	fab3 f383 	clz	r3, r3
 800755c:	b2db      	uxtb	r3, r3
 800755e:	3301      	adds	r3, #1
 8007560:	f003 021f 	and.w	r2, r3, #31
 8007564:	4613      	mov	r3, r2
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	4413      	add	r3, r2
 800756a:	3b1e      	subs	r3, #30
 800756c:	051b      	lsls	r3, r3, #20
 800756e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007572:	430b      	orrs	r3, r1
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	6892      	ldr	r2, [r2, #8]
 8007578:	4619      	mov	r1, r3
 800757a:	f7ff f9e9 	bl	8006950 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <HAL_ADC_ConfigChannel+0x5e0>)
 8007584:	4013      	ands	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 808c 	beq.w	80076a4 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800758c:	4829      	ldr	r0, [pc, #164]	; (8007634 <HAL_ADC_ConfigChannel+0x5e4>)
 800758e:	f7ff f947 	bl	8006820 <LL_ADC_GetCommonPathInternalCh>
 8007592:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007596:	4828      	ldr	r0, [pc, #160]	; (8007638 <HAL_ADC_ConfigChannel+0x5e8>)
 8007598:	f7ff fa9c 	bl	8006ad4 <LL_ADC_IsEnabled>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d16d      	bne.n	800767e <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a25      	ldr	r2, [pc, #148]	; (800763c <HAL_ADC_ConfigChannel+0x5ec>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d126      	bne.n	80075fa <HAL_ADC_ConfigChannel+0x5aa>
 80075ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d120      	bne.n	80075fa <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <HAL_ADC_ConfigChannel+0x5e8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d170      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80075c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075ca:	4619      	mov	r1, r3
 80075cc:	4819      	ldr	r0, [pc, #100]	; (8007634 <HAL_ADC_ConfigChannel+0x5e4>)
 80075ce:	f7ff f914 	bl	80067fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <HAL_ADC_ConfigChannel+0x5f0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	099b      	lsrs	r3, r3, #6
 80075d8:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <HAL_ADC_ConfigChannel+0x5f4>)
 80075da:	fba2 2303 	umull	r2, r3, r2, r3
 80075de:	099a      	lsrs	r2, r3, #6
 80075e0:	4613      	mov	r3, r2
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80075ea:	e002      	b.n	80075f2 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f9      	bne.n	80075ec <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075f8:	e054      	b.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a12      	ldr	r2, [pc, #72]	; (8007648 <HAL_ADC_ConfigChannel+0x5f8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d123      	bne.n	800764c <HAL_ADC_ConfigChannel+0x5fc>
 8007604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11d      	bne.n	800764c <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a08      	ldr	r2, [pc, #32]	; (8007638 <HAL_ADC_ConfigChannel+0x5e8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d144      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800761a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800761e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007622:	4619      	mov	r1, r3
 8007624:	4803      	ldr	r0, [pc, #12]	; (8007634 <HAL_ADC_ConfigChannel+0x5e4>)
 8007626:	f7ff f8e8 	bl	80067fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800762a:	e03b      	b.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
 800762c:	407f0000 	.word	0x407f0000
 8007630:	80080000 	.word	0x80080000
 8007634:	50040300 	.word	0x50040300
 8007638:	50040000 	.word	0x50040000
 800763c:	c7520000 	.word	0xc7520000
 8007640:	20000078 	.word	0x20000078
 8007644:	053e2d63 	.word	0x053e2d63
 8007648:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_ADC_ConfigChannel+0x668>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d126      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
 8007656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800765a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d120      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a15      	ldr	r2, [pc, #84]	; (80076bc <HAL_ADC_ConfigChannel+0x66c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d11b      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800766c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007670:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007674:	4619      	mov	r1, r3
 8007676:	4812      	ldr	r0, [pc, #72]	; (80076c0 <HAL_ADC_ConfigChannel+0x670>)
 8007678:	f7ff f8bf 	bl	80067fa <LL_ADC_SetCommonPathInternalCh>
 800767c:	e012      	b.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	f043 0220 	orr.w	r2, r3, #32
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007690:	e008      	b.n	80076a4 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f043 0220 	orr.w	r2, r3, #32
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80076ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3798      	adds	r7, #152	; 0x98
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	80000001 	.word	0x80000001
 80076bc:	50040000 	.word	0x50040000
 80076c0:	50040300 	.word	0x50040300

080076c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fa48 	bl	8006b70 <LL_ADC_REG_IsConversionOngoing>
 80076e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fa69 	bl	8006bbe <LL_ADC_INJ_IsConversionOngoing>
 80076ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8090 	beq.w	800781c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02a      	beq.n	8007760 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7e5b      	ldrb	r3, [r3, #25]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d126      	bne.n	8007760 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7e1b      	ldrb	r3, [r3, #24]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d122      	bne.n	8007760 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800771a:	2301      	movs	r3, #1
 800771c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800771e:	e014      	b.n	800774a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	4a41      	ldr	r2, [pc, #260]	; (8007828 <ADC_ConversionStop+0x164>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d90d      	bls.n	8007744 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	f043 0210 	orr.w	r2, r3, #16
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007738:	f043 0201 	orr.w	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e06c      	b.n	800781e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	d1e3      	bne.n	8007720 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2240      	movs	r2, #64	; 0x40
 800775e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d014      	beq.n	8007790 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fa00 	bl	8006b70 <LL_ADC_REG_IsConversionOngoing>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00c      	beq.n	8007790 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff f9bd 	bl	8006afa <LL_ADC_IsDisableOngoing>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff f9dc 	bl	8006b48 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d014      	beq.n	80077c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff fa0f 	bl	8006bbe <LL_ADC_INJ_IsConversionOngoing>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00c      	beq.n	80077c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff f9a5 	bl	8006afa <LL_ADC_IsDisableOngoing>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff f9eb 	bl	8006b96 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d004      	beq.n	80077d0 <ADC_ConversionStop+0x10c>
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d105      	bne.n	80077d6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80077ca:	230c      	movs	r3, #12
 80077cc:	617b      	str	r3, [r7, #20]
        break;
 80077ce:	e005      	b.n	80077dc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80077d0:	2308      	movs	r3, #8
 80077d2:	617b      	str	r3, [r7, #20]
        break;
 80077d4:	e002      	b.n	80077dc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80077d6:	2304      	movs	r3, #4
 80077d8:	617b      	str	r3, [r7, #20]
        break;
 80077da:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80077dc:	f7fe ffc8 	bl	8006770 <HAL_GetTick>
 80077e0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80077e2:	e014      	b.n	800780e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80077e4:	f7fe ffc4 	bl	8006770 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d90d      	bls.n	800780e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f6:	f043 0210 	orr.w	r2, r3, #16
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007802:	f043 0201 	orr.w	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e007      	b.n	800781e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e3      	bne.n	80077e4 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	a33fffff 	.word	0xa33fffff

0800782c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff f94b 	bl	8006ad4 <LL_ADC_IsEnabled>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d146      	bne.n	80078d2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	4b24      	ldr	r3, [pc, #144]	; (80078dc <ADC_Enable+0xb0>)
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00d      	beq.n	800786e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f043 0210 	orr.w	r2, r3, #16
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007862:	f043 0201 	orr.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e032      	b.n	80078d4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff f906 	bl	8006a84 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007878:	f7fe ff7a 	bl	8006770 <HAL_GetTick>
 800787c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800787e:	e021      	b.n	80078c4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff f925 	bl	8006ad4 <LL_ADC_IsEnabled>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff f8f5 	bl	8006a84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800789a:	f7fe ff69 	bl	8006770 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d90d      	bls.n	80078c4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	f043 0210 	orr.w	r2, r3, #16
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b8:	f043 0201 	orr.w	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e007      	b.n	80078d4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d1d6      	bne.n	8007880 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	8000003f 	.word	0x8000003f

080078e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff f904 	bl	8006afa <LL_ADC_IsDisableOngoing>
 80078f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff f8eb 	bl	8006ad4 <LL_ADC_IsEnabled>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d040      	beq.n	8007986 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d13d      	bne.n	8007986 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 030d 	and.w	r3, r3, #13
 8007914:	2b01      	cmp	r3, #1
 8007916:	d10c      	bne.n	8007932 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff f8c5 	bl	8006aac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2203      	movs	r2, #3
 8007928:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800792a:	f7fe ff21 	bl	8006770 <HAL_GetTick>
 800792e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007930:	e022      	b.n	8007978 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f043 0210 	orr.w	r2, r3, #16
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007942:	f043 0201 	orr.w	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e01c      	b.n	8007988 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800794e:	f7fe ff0f 	bl	8006770 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d90d      	bls.n	8007978 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007960:	f043 0210 	orr.w	r2, r3, #16
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796c:	f043 0201 	orr.w	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e007      	b.n	8007988 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e3      	bne.n	800794e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d14b      	bne.n	8007a42 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d021      	beq.n	8007a08 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe ff85 	bl	80068d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d032      	beq.n	8007a3a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d12b      	bne.n	8007a3a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11f      	bne.n	8007a3a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fe:	f043 0201 	orr.w	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
 8007a06:	e018      	b.n	8007a3a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d111      	bne.n	8007a3a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	f043 0201 	orr.w	r2, r3, #1
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7f9 fe74 	bl	8001728 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007a40:	e00e      	b.n	8007a60 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f7ff faf3 	bl	800703a <HAL_ADC_ErrorCallback>
}
 8007a54:	e004      	b.n	8007a60 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
}
 8007a60:	bf00      	nop
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7f9 fe6e 	bl	8001758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa2:	f043 0204 	orr.w	r2, r3, #4
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f7ff fac5 	bl	800703a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <LL_EXTI_EnableIT_0_31>:
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <LL_EXTI_EnableIT_0_31+0x24>)
 8007ac2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007ac6:	4905      	ldr	r1, [pc, #20]	; (8007adc <LL_EXTI_EnableIT_0_31+0x24>)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	58000800 	.word	0x58000800

08007ae0 <LL_EXTI_DisableIT_0_31>:
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <LL_EXTI_DisableIT_0_31+0x28>)
 8007aea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	43db      	mvns	r3, r3
 8007af2:	4905      	ldr	r1, [pc, #20]	; (8007b08 <LL_EXTI_DisableIT_0_31+0x28>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007afa:	bf00      	nop
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	58000800 	.word	0x58000800

08007b0c <LL_EXTI_EnableEvent_0_31>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007b16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b1a:	4905      	ldr	r1, [pc, #20]	; (8007b30 <LL_EXTI_EnableEvent_0_31+0x24>)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	58000800 	.word	0x58000800

08007b34 <LL_EXTI_DisableEvent_0_31>:
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007b3c:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <LL_EXTI_DisableEvent_0_31+0x28>)
 8007b3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	43db      	mvns	r3, r3
 8007b46:	4905      	ldr	r1, [pc, #20]	; (8007b5c <LL_EXTI_DisableEvent_0_31+0x28>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	58000800 	.word	0x58000800

08007b60 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	4904      	ldr	r1, [pc, #16]	; (8007b80 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	600b      	str	r3, [r1, #0]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	58000800 	.word	0x58000800

08007b84 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007b8c:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	43db      	mvns	r3, r3
 8007b94:	4904      	ldr	r1, [pc, #16]	; (8007ba8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007b96:	4013      	ands	r3, r2
 8007b98:	600b      	str	r3, [r1, #0]

}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	58000800 	.word	0x58000800

08007bac <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	4904      	ldr	r1, [pc, #16]	; (8007bcc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	604b      	str	r3, [r1, #4]
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	58000800 	.word	0x58000800

08007bd0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	43db      	mvns	r3, r3
 8007be0:	4904      	ldr	r1, [pc, #16]	; (8007bf4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	604b      	str	r3, [r1, #4]
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	58000800 	.word	0x58000800

08007bf8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4013      	ands	r3, r2
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d101      	bne.n	8007c12 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e000      	b.n	8007c14 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	58000800 	.word	0x58000800

08007c24 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007c2c:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60d3      	str	r3, [r2, #12]
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	58000800 	.word	0x58000800

08007c44 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	77fb      	strb	r3, [r7, #31]
 8007c5e:	e0c4      	b.n	8007dea <HAL_COMP_Init+0x1a6>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c6e:	d102      	bne.n	8007c76 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e0b9      	b.n	8007dea <HAL_COMP_Init+0x1a6>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7f9 fdc1 	bl	8001818 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ca0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691a      	ldr	r2, [r3, #16]
               | hcomp->Init.InputPlus
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	4b49      	ldr	r3, [pc, #292]	; (8007df4 <HAL_COMP_Init+0x1b0>)
 8007cce:	4013      	ands	r3, r2
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	6979      	ldr	r1, [r7, #20]
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	6013      	str	r3, [r2, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce2:	d106      	bne.n	8007cf2 <HAL_COMP_Init+0xae>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007ce4:	4b44      	ldr	r3, [pc, #272]	; (8007df8 <HAL_COMP_Init+0x1b4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a43      	ldr	r2, [pc, #268]	; (8007df8 <HAL_COMP_Init+0x1b4>)
 8007cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	e005      	b.n	8007cfe <HAL_COMP_Init+0xba>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007cf2:	4b41      	ldr	r3, [pc, #260]	; (8007df8 <HAL_COMP_Init+0x1b4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a40      	ldr	r2, [pc, #256]	; (8007df8 <HAL_COMP_Init+0x1b4>)
 8007cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cfc:	6013      	str	r3, [r2, #0]
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_COMP_Init+0xf4>
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d112      	bne.n	8007d38 <HAL_COMP_Init+0xf4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007d12:	4b3a      	ldr	r3, [pc, #232]	; (8007dfc <HAL_COMP_Init+0x1b8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	099b      	lsrs	r3, r3, #6
 8007d18:	4a39      	ldr	r2, [pc, #228]	; (8007e00 <HAL_COMP_Init+0x1bc>)
 8007d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1e:	099a      	lsrs	r2, r3, #6
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d2a:	e002      	b.n	8007d32 <HAL_COMP_Init+0xee>
      {
        wait_loop_index--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1f9      	bne.n	8007d2c <HAL_COMP_Init+0xe8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a31      	ldr	r2, [pc, #196]	; (8007e04 <HAL_COMP_Init+0x1c0>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d102      	bne.n	8007d48 <HAL_COMP_Init+0x104>
 8007d42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d46:	e001      	b.n	8007d4c <HAL_COMP_Init+0x108>
 8007d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d4c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d037      	beq.n	8007dca <HAL_COMP_Init+0x186>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_COMP_Init+0x12a>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007d66:	6938      	ldr	r0, [r7, #16]
 8007d68:	f7ff fefa 	bl	8007b60 <LL_EXTI_EnableRisingTrig_0_31>
 8007d6c:	e002      	b.n	8007d74 <HAL_COMP_Init+0x130>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007d6e:	6938      	ldr	r0, [r7, #16]
 8007d70:	f7ff ff08 	bl	8007b84 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007d80:	6938      	ldr	r0, [r7, #16]
 8007d82:	f7ff ff13 	bl	8007bac <LL_EXTI_EnableFallingTrig_0_31>
 8007d86:	e002      	b.n	8007d8e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007d88:	6938      	ldr	r0, [r7, #16]
 8007d8a:	f7ff ff21 	bl	8007bd0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007d8e:	6938      	ldr	r0, [r7, #16]
 8007d90:	f7ff ff48 	bl	8007c24 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_COMP_Init+0x164>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007da0:	6938      	ldr	r0, [r7, #16]
 8007da2:	f7ff feb3 	bl	8007b0c <LL_EXTI_EnableEvent_0_31>
 8007da6:	e002      	b.n	8007dae <HAL_COMP_Init+0x16a>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007da8:	6938      	ldr	r0, [r7, #16]
 8007daa:	f7ff fec3 	bl	8007b34 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007dba:	6938      	ldr	r0, [r7, #16]
 8007dbc:	f7ff fe7c 	bl	8007ab8 <LL_EXTI_EnableIT_0_31>
 8007dc0:	e009      	b.n	8007dd6 <HAL_COMP_Init+0x192>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007dc2:	6938      	ldr	r0, [r7, #16]
 8007dc4:	f7ff fe8c 	bl	8007ae0 <LL_EXTI_DisableIT_0_31>
 8007dc8:	e005      	b.n	8007dd6 <HAL_COMP_Init+0x192>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f7ff feb2 	bl	8007b34 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007dd0:	6938      	ldr	r0, [r7, #16]
 8007dd2:	f7ff fe85 	bl	8007ae0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <HAL_COMP_Init+0x1a6>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	f9207c03 	.word	0xf9207c03
 8007df8:	40010204 	.word	0x40010204
 8007dfc:	20000078 	.word	0x20000078
 8007e00:	053e2d63 	.word	0x053e2d63
 8007e04:	40010200 	.word	0x40010200

08007e08 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d102      	bne.n	8007e24 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	73fb      	strb	r3, [r7, #15]
 8007e22:	e02f      	b.n	8007e84 <HAL_COMP_Start+0x7c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e32:	d102      	bne.n	8007e3a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
 8007e38:	e024      	b.n	8007e84 <HAL_COMP_Start+0x7c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d11c      	bne.n	8007e80 <HAL_COMP_Start+0x78>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0201 	orr.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <HAL_COMP_Start+0x8c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	099b      	lsrs	r3, r3, #6
 8007e64:	4a0c      	ldr	r2, [pc, #48]	; (8007e98 <HAL_COMP_Start+0x90>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	099b      	lsrs	r3, r3, #6
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007e70:	e002      	b.n	8007e78 <HAL_COMP_Start+0x70>
      {
        wait_loop_index--;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f9      	bne.n	8007e72 <HAL_COMP_Start+0x6a>
 8007e7e:	e001      	b.n	8007e84 <HAL_COMP_Start+0x7c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000078 	.word	0x20000078
 8007e98:	053e2d63 	.word	0x053e2d63

08007e9c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	73fb      	strb	r3, [r7, #15]
 8007eb2:	e01f      	b.n	8007ef4 <HAL_COMP_Stop+0x58>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ec2:	d102      	bne.n	8007eca <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
 8007ec8:	e014      	b.n	8007ef4 <HAL_COMP_Stop+0x58>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <HAL_COMP_Stop+0x54>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007eee:	e001      	b.n	8007ef4 <HAL_COMP_Stop+0x58>
    }
    else
    {
      status = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <HAL_COMP_IRQHandler+0x54>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d102      	bne.n	8007f1c <HAL_COMP_IRQHandler+0x18>
 8007f16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f1a:	e001      	b.n	8007f20 <HAL_COMP_IRQHandler+0x1c>
 8007f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f20:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fe68 	bl	8007bf8 <LL_EXTI_IsActiveFlag_0_31>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d010      	beq.n	8007f50 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <HAL_COMP_IRQHandler+0x58>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8007f3a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8007f3e:	f7ff fe71 	bl	8007c24 <LL_EXTI_ClearFlag_0_31>
 8007f42:	e002      	b.n	8007f4a <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff fe6d 	bl	8007c24 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fd ff3a 	bl	8005dc4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	40010200 	.word	0x40010200
 8007f5c:	40010204 	.word	0x40010204

08007f60 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	0f9b      	lsrs	r3, r3, #30
 8007f70:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fb2:	4a04      	ldr	r2, [pc, #16]	; (8007fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	60d3      	str	r3, [r2, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	e000ed00 	.word	0xe000ed00

08007fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fcc:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	f003 0307 	and.w	r3, r3, #7
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	e000ed00 	.word	0xe000ed00

08007fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	db0b      	blt.n	800800e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	f003 021f 	and.w	r2, r3, #31
 8007ffc:	4907      	ldr	r1, [pc, #28]	; (800801c <__NVIC_EnableIRQ+0x38>)
 8007ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	2001      	movs	r0, #1
 8008006:	fa00 f202 	lsl.w	r2, r0, r2
 800800a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	e000e100 	.word	0xe000e100

08008020 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800802a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802e:	2b00      	cmp	r3, #0
 8008030:	db10      	blt.n	8008054 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	f003 021f 	and.w	r2, r3, #31
 8008038:	4909      	ldr	r1, [pc, #36]	; (8008060 <__NVIC_DisableIRQ+0x40>)
 800803a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	2001      	movs	r0, #1
 8008042:	fa00 f202 	lsl.w	r2, r0, r2
 8008046:	3320      	adds	r3, #32
 8008048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800804c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008050:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	e000e100 	.word	0xe000e100

08008064 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800806e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008072:	2b00      	cmp	r3, #0
 8008074:	db0c      	blt.n	8008090 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	f003 021f 	and.w	r2, r3, #31
 800807c:	4907      	ldr	r1, [pc, #28]	; (800809c <__NVIC_SetPendingIRQ+0x38>)
 800807e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	2001      	movs	r0, #1
 8008086:	fa00 f202 	lsl.w	r2, r0, r2
 800808a:	3340      	adds	r3, #64	; 0x40
 800808c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	e000e100 	.word	0xe000e100

080080a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	db0c      	blt.n	80080cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	f003 021f 	and.w	r2, r3, #31
 80080b8:	4907      	ldr	r1, [pc, #28]	; (80080d8 <__NVIC_ClearPendingIRQ+0x38>)
 80080ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	2001      	movs	r0, #1
 80080c2:	fa00 f202 	lsl.w	r2, r0, r2
 80080c6:	3360      	adds	r3, #96	; 0x60
 80080c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	e000e100 	.word	0xe000e100

080080dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	db0a      	blt.n	8008106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	490c      	ldr	r1, [pc, #48]	; (8008128 <__NVIC_SetPriority+0x4c>)
 80080f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080fa:	0112      	lsls	r2, r2, #4
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	440b      	add	r3, r1
 8008100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008104:	e00a      	b.n	800811c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	b2da      	uxtb	r2, r3
 800810a:	4908      	ldr	r1, [pc, #32]	; (800812c <__NVIC_SetPriority+0x50>)
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	3b04      	subs	r3, #4
 8008114:	0112      	lsls	r2, r2, #4
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	440b      	add	r3, r1
 800811a:	761a      	strb	r2, [r3, #24]
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	e000e100 	.word	0xe000e100
 800812c:	e000ed00 	.word	0xe000ed00

08008130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008130:	b480      	push	{r7}
 8008132:	b089      	sub	sp, #36	; 0x24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f1c3 0307 	rsb	r3, r3, #7
 800814a:	2b04      	cmp	r3, #4
 800814c:	bf28      	it	cs
 800814e:	2304      	movcs	r3, #4
 8008150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	3304      	adds	r3, #4
 8008156:	2b06      	cmp	r3, #6
 8008158:	d902      	bls.n	8008160 <NVIC_EncodePriority+0x30>
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	3b03      	subs	r3, #3
 800815e:	e000      	b.n	8008162 <NVIC_EncodePriority+0x32>
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	43da      	mvns	r2, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	401a      	ands	r2, r3
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008178:	f04f 31ff 	mov.w	r1, #4294967295
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	fa01 f303 	lsl.w	r3, r1, r3
 8008182:	43d9      	mvns	r1, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008188:	4313      	orrs	r3, r2
         );
}
 800818a:	4618      	mov	r0, r3
 800818c:	3724      	adds	r7, #36	; 0x24
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800819c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <__NVIC_SystemReset+0x20>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80081a8:	4903      	ldr	r1, [pc, #12]	; (80081b8 <__NVIC_SystemReset+0x20>)
 80081aa:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__NVIC_SystemReset+0x24>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60cb      	str	r3, [r1, #12]
 80081b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <__NVIC_SystemReset+0x1c>
 80081b8:	e000ed00 	.word	0xe000ed00
 80081bc:	05fa0004 	.word	0x05fa0004

080081c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff fed9 	bl	8007f80 <__NVIC_SetPriorityGrouping>
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b086      	sub	sp, #24
 80081da:	af00      	add	r7, sp, #0
 80081dc:	4603      	mov	r3, r0
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80081e4:	f7ff fef0 	bl	8007fc8 <__NVIC_GetPriorityGrouping>
 80081e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	6978      	ldr	r0, [r7, #20]
 80081f0:	f7ff ff9e 	bl	8008130 <NVIC_EncodePriority>
 80081f4:	4602      	mov	r2, r0
 80081f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081fa:	4611      	mov	r1, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff ff6d 	bl	80080dc <__NVIC_SetPriority>
}
 8008202:	bf00      	nop
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	4603      	mov	r3, r0
 8008212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fee3 	bl	8007fe4 <__NVIC_EnableIRQ>
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	4603      	mov	r3, r0
 800822e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff fef3 	bl	8008020 <__NVIC_DisableIRQ>
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008246:	f7ff ffa7 	bl	8008198 <__NVIC_SystemReset>

0800824a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	4603      	mov	r3, r0
 8008252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff ff03 	bl	8008064 <__NVIC_SetPendingIRQ>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	4603      	mov	r3, r0
 800826e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff ff13 	bl	80080a0 <__NVIC_ClearPendingIRQ>
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e08d      	b.n	80083b2 <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	4b47      	ldr	r3, [pc, #284]	; (80083bc <HAL_DMA_Init+0x138>)
 800829e:	429a      	cmp	r2, r3
 80082a0:	d80f      	bhi.n	80082c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	4b45      	ldr	r3, [pc, #276]	; (80083c0 <HAL_DMA_Init+0x13c>)
 80082aa:	4413      	add	r3, r2
 80082ac:	4a45      	ldr	r2, [pc, #276]	; (80083c4 <HAL_DMA_Init+0x140>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	091b      	lsrs	r3, r3, #4
 80082b4:	009a      	lsls	r2, r3, #2
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a42      	ldr	r2, [pc, #264]	; (80083c8 <HAL_DMA_Init+0x144>)
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
 80082c0:	e00e      	b.n	80082e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	4b40      	ldr	r3, [pc, #256]	; (80083cc <HAL_DMA_Init+0x148>)
 80082ca:	4413      	add	r3, r2
 80082cc:	4a3d      	ldr	r2, [pc, #244]	; (80083c4 <HAL_DMA_Init+0x140>)
 80082ce:	fba2 2303 	umull	r2, r3, r2, r3
 80082d2:	091b      	lsrs	r3, r3, #4
 80082d4:	009a      	lsls	r2, r3, #2
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a3c      	ldr	r2, [pc, #240]	; (80083d0 <HAL_DMA_Init+0x14c>)
 80082de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80082f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800831c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa74 	bl	8008820 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008340:	d102      	bne.n	8008348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800835c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d010      	beq.n	8008388 <HAL_DMA_Init+0x104>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b04      	cmp	r3, #4
 800836c:	d80c      	bhi.n	8008388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa94 	bl	800889c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008384:	605a      	str	r2, [r3, #4]
 8008386:	e008      	b.n	800839a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	40020407 	.word	0x40020407
 80083c0:	bffdfff8 	.word	0xbffdfff8
 80083c4:	cccccccd 	.word	0xcccccccd
 80083c8:	40020000 	.word	0x40020000
 80083cc:	bffdfbf8 	.word	0xbffdfbf8
 80083d0:	40020400 	.word	0x40020400

080083d4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_DMA_Start_IT+0x20>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e066      	b.n	80084c2 <HAL_DMA_Start_IT+0xee>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b01      	cmp	r3, #1
 8008406:	d155      	bne.n	80084b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0201 	bic.w	r2, r2, #1
 8008424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f9b9 	bl	80087a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 020e 	orr.w	r2, r2, #14
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e00f      	b.n	800846c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0204 	bic.w	r2, r2, #4
 800845a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 020a 	orr.w	r2, r2, #10
 800846a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d007      	beq.n	800848a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0201 	orr.w	r2, r2, #1
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	e005      	b.n	80084c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80084bc:	2302      	movs	r3, #2
 80084be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e04f      	b.n	800857c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d008      	beq.n	80084fa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2204      	movs	r2, #4
 80084ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e040      	b.n	800857c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 020e 	bic.w	r2, r2, #14
 8008508:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008518:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0201 	bic.w	r2, r2, #1
 8008528:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852e:	f003 021c 	and.w	r2, r3, #28
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	2101      	movs	r1, #1
 8008538:	fa01 f202 	lsl.w	r2, r1, r2
 800853c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008546:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00c      	beq.n	800856a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800855e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008568:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d005      	beq.n	80085ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2204      	movs	r2, #4
 80085a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
 80085aa:	e047      	b.n	800863c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 020e 	bic.w	r2, r2, #14
 80085ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e0:	f003 021c 	and.w	r2, r3, #28
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	2101      	movs	r1, #1
 80085ea:	fa01 f202 	lsl.w	r2, r1, r2
 80085ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008610:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800861a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
    }
  }
  return status;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	f003 031c 	and.w	r3, r3, #28
 8008666:	2204      	movs	r2, #4
 8008668:	409a      	lsls	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4013      	ands	r3, r2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d026      	beq.n	80086c0 <HAL_DMA_IRQHandler+0x7a>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b00      	cmp	r3, #0
 800867a:	d021      	beq.n	80086c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b00      	cmp	r3, #0
 8008688:	d107      	bne.n	800869a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0204 	bic.w	r2, r2, #4
 8008698:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869e:	f003 021c 	and.w	r2, r3, #28
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	2104      	movs	r1, #4
 80086a8:	fa01 f202 	lsl.w	r2, r1, r2
 80086ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d071      	beq.n	800879a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80086be:	e06c      	b.n	800879a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c4:	f003 031c 	and.w	r3, r3, #28
 80086c8:	2202      	movs	r2, #2
 80086ca:	409a      	lsls	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d02e      	beq.n	8008732 <HAL_DMA_IRQHandler+0xec>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d029      	beq.n	8008732 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10b      	bne.n	8008704 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 020a 	bic.w	r2, r2, #10
 80086fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008708:	f003 021c 	and.w	r2, r3, #28
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008710:	2102      	movs	r1, #2
 8008712:	fa01 f202 	lsl.w	r2, r1, r2
 8008716:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d038      	beq.n	800879a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008730:	e033      	b.n	800879a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008736:	f003 031c 	and.w	r3, r3, #28
 800873a:	2208      	movs	r2, #8
 800873c:	409a      	lsls	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4013      	ands	r3, r2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02a      	beq.n	800879c <HAL_DMA_IRQHandler+0x156>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d025      	beq.n	800879c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 020e 	bic.w	r2, r2, #14
 800875e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008764:	f003 021c 	and.w	r2, r3, #28
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	2101      	movs	r1, #1
 800876e:	fa01 f202 	lsl.w	r2, r1, r2
 8008772:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878e:	2b00      	cmp	r3, #0
 8008790:	d004      	beq.n	800879c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800879a:	bf00      	nop
 800879c:	bf00      	nop
}
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80087cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d2:	f003 021c 	and.w	r2, r3, #28
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	2101      	movs	r1, #1
 80087dc:	fa01 f202 	lsl.w	r2, r1, r2
 80087e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	2b10      	cmp	r3, #16
 80087f0:	d108      	bne.n	8008804 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008802:	e007      	b.n	8008814 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	60da      	str	r2, [r3, #12]
}
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	4b17      	ldr	r3, [pc, #92]	; (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008830:	429a      	cmp	r2, r3
 8008832:	d80a      	bhi.n	800884a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008838:	089b      	lsrs	r3, r3, #2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008840:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6493      	str	r3, [r2, #72]	; 0x48
 8008848:	e007      	b.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	089b      	lsrs	r3, r3, #2
 8008850:	009a      	lsls	r2, r3, #2
 8008852:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008854:	4413      	add	r3, r2
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	3b08      	subs	r3, #8
 8008862:	4a0c      	ldr	r2, [pc, #48]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008864:	fba2 2303 	umull	r2, r3, r2, r3
 8008868:	091b      	lsrs	r3, r3, #4
 800886a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008870:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f003 031c 	and.w	r3, r3, #28
 8008878:	2201      	movs	r2, #1
 800887a:	409a      	lsls	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008880:	bf00      	nop
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	40020407 	.word	0x40020407
 8008890:	4002081c 	.word	0x4002081c
 8008894:	cccccccd 	.word	0xcccccccd
 8008898:	40020880 	.word	0x40020880

0800889c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	461a      	mov	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a08      	ldr	r2, [pc, #32]	; (80088e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80088be:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	2201      	movs	r2, #1
 80088ca:	409a      	lsls	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80088d0:	bf00      	nop
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	1000823f 	.word	0x1000823f
 80088e0:	40020940 	.word	0x40020940

080088e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088ee:	2300      	movs	r3, #0
 80088f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088f2:	e14c      	b.n	8008b8e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	2101      	movs	r1, #1
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008900:	4013      	ands	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 813e 	beq.w	8008b88 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d003      	beq.n	800891c <HAL_GPIO_Init+0x38>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b12      	cmp	r3, #18
 800891a:	d123      	bne.n	8008964 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	08da      	lsrs	r2, r3, #3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3208      	adds	r2, #8
 8008924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008928:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	220f      	movs	r2, #15
 8008934:	fa02 f303 	lsl.w	r3, r2, r3
 8008938:	43db      	mvns	r3, r3
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4013      	ands	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	691a      	ldr	r2, [r3, #16]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	fa02 f303 	lsl.w	r3, r2, r3
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	08da      	lsrs	r2, r3, #3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3208      	adds	r2, #8
 800895e:	6939      	ldr	r1, [r7, #16]
 8008960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	2203      	movs	r2, #3
 8008970:	fa02 f303 	lsl.w	r3, r2, r3
 8008974:	43db      	mvns	r3, r3
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4013      	ands	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f003 0203 	and.w	r2, r3, #3
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d00b      	beq.n	80089b8 <HAL_GPIO_Init+0xd4>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d007      	beq.n	80089b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089ac:	2b11      	cmp	r3, #17
 80089ae:	d003      	beq.n	80089b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2b12      	cmp	r3, #18
 80089b6:	d130      	bne.n	8008a1a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	2203      	movs	r2, #3
 80089c4:	fa02 f303 	lsl.w	r3, r2, r3
 80089c8:	43db      	mvns	r3, r3
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4013      	ands	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4313      	orrs	r3, r2
 80089e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089ee:	2201      	movs	r2, #1
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	43db      	mvns	r3, r3
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	4013      	ands	r3, r2
 80089fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	091b      	lsrs	r3, r3, #4
 8008a04:	f003 0201 	and.w	r2, r3, #1
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	2203      	movs	r2, #3
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 8098 	beq.w	8008b88 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008a58:	4a54      	ldr	r2, [pc, #336]	; (8008bac <HAL_GPIO_Init+0x2c8>)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	089b      	lsrs	r3, r3, #2
 8008a5e:	3302      	adds	r3, #2
 8008a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	220f      	movs	r2, #15
 8008a70:	fa02 f303 	lsl.w	r3, r2, r3
 8008a74:	43db      	mvns	r3, r3
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	4013      	ands	r3, r2
 8008a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008a82:	d019      	beq.n	8008ab8 <HAL_GPIO_Init+0x1d4>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a4a      	ldr	r2, [pc, #296]	; (8008bb0 <HAL_GPIO_Init+0x2cc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d013      	beq.n	8008ab4 <HAL_GPIO_Init+0x1d0>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a49      	ldr	r2, [pc, #292]	; (8008bb4 <HAL_GPIO_Init+0x2d0>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00d      	beq.n	8008ab0 <HAL_GPIO_Init+0x1cc>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a48      	ldr	r2, [pc, #288]	; (8008bb8 <HAL_GPIO_Init+0x2d4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d007      	beq.n	8008aac <HAL_GPIO_Init+0x1c8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a47      	ldr	r2, [pc, #284]	; (8008bbc <HAL_GPIO_Init+0x2d8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d101      	bne.n	8008aa8 <HAL_GPIO_Init+0x1c4>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	e008      	b.n	8008aba <HAL_GPIO_Init+0x1d6>
 8008aa8:	2307      	movs	r3, #7
 8008aaa:	e006      	b.n	8008aba <HAL_GPIO_Init+0x1d6>
 8008aac:	2303      	movs	r3, #3
 8008aae:	e004      	b.n	8008aba <HAL_GPIO_Init+0x1d6>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e002      	b.n	8008aba <HAL_GPIO_Init+0x1d6>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e000      	b.n	8008aba <HAL_GPIO_Init+0x1d6>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	f002 0203 	and.w	r2, r2, #3
 8008ac0:	0092      	lsls	r2, r2, #2
 8008ac2:	4093      	lsls	r3, r2
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008aca:	4938      	ldr	r1, [pc, #224]	; (8008bac <HAL_GPIO_Init+0x2c8>)
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	089b      	lsrs	r3, r3, #2
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ad8:	4b39      	ldr	r3, [pc, #228]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	43db      	mvns	r3, r3
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008afe:	4a30      	ldr	r2, [pc, #192]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008b06:	4b2e      	ldr	r3, [pc, #184]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	43db      	mvns	r3, r3
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4013      	ands	r3, r2
 8008b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b2c:	4a24      	ldr	r2, [pc, #144]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b34:	4b22      	ldr	r3, [pc, #136]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4013      	ands	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008b58:	4a19      	ldr	r2, [pc, #100]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b5e:	4b18      	ldr	r3, [pc, #96]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	43db      	mvns	r3, r3
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008b82:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <HAL_GPIO_Init+0x2dc>)
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f47f aeab 	bne.w	80088f4 <HAL_GPIO_Init+0x10>
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	371c      	adds	r7, #28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	48000400 	.word	0x48000400
 8008bb4:	48000800 	.word	0x48000800
 8008bb8:	48000c00 	.word	0x48000c00
 8008bbc:	48001000 	.word	0x48001000
 8008bc0:	58000800 	.word	0x58000800

08008bc4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	887b      	ldrh	r3, [r7, #2]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
 8008be0:	e001      	b.n	8008be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008bfe:	4b08      	ldr	r3, [pc, #32]	; (8008c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d006      	beq.n	8008c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c0a:	4a05      	ldr	r2, [pc, #20]	; (8008c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c0c:	88fb      	ldrh	r3, [r7, #6]
 8008c0e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c10:	88fb      	ldrh	r3, [r7, #6]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fa ff1c 	bl	8003a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	58000800 	.word	0x58000800

08008c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e081      	b.n	8008d3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fa fe42 	bl	80038d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2224      	movs	r2, #36	; 0x24
 8008c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0201 	bic.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d107      	bne.n	8008c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c9a:	609a      	str	r2, [r3, #8]
 8008c9c:	e006      	b.n	8008cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d104      	bne.n	8008cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6812      	ldr	r2, [r2, #0]
 8008cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691a      	ldr	r2, [r3, #16]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	ea42 0103 	orr.w	r1, r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	021a      	lsls	r2, r3, #8
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	69d9      	ldr	r1, [r3, #28]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a1a      	ldr	r2, [r3, #32]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0201 	orr.w	r2, r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	607a      	str	r2, [r7, #4]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	460b      	mov	r3, r1
 8008d52:	817b      	strh	r3, [r7, #10]
 8008d54:	4613      	mov	r3, r2
 8008d56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	f040 80da 	bne.w	8008f1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d101      	bne.n	8008d74 <HAL_I2C_Master_Transmit+0x30>
 8008d70:	2302      	movs	r3, #2
 8008d72:	e0d3      	b.n	8008f1c <HAL_I2C_Master_Transmit+0x1d8>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d7c:	f7fd fcf8 	bl	8006770 <HAL_GetTick>
 8008d80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	2319      	movs	r3, #25
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f001 fbba 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e0be      	b.n	8008f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2221      	movs	r2, #33	; 0x21
 8008da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2210      	movs	r2, #16
 8008daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	893a      	ldrh	r2, [r7, #8]
 8008dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2bff      	cmp	r3, #255	; 0xff
 8008dce:	d90e      	bls.n	8008dee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	22ff      	movs	r2, #255	; 0xff
 8008dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	8979      	ldrh	r1, [r7, #10]
 8008dde:	4b51      	ldr	r3, [pc, #324]	; (8008f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f001 fd1c 	bl	800a824 <I2C_TransferConfig>
 8008dec:	e06c      	b.n	8008ec8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	8979      	ldrh	r1, [r7, #10]
 8008e00:	4b48      	ldr	r3, [pc, #288]	; (8008f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f001 fd0b 	bl	800a824 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008e0e:	e05b      	b.n	8008ec8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	6a39      	ldr	r1, [r7, #32]
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f001 fbb7 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e07b      	b.n	8008f1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d034      	beq.n	8008ec8 <HAL_I2C_Master_Transmit+0x184>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d130      	bne.n	8008ec8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2180      	movs	r1, #128	; 0x80
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 fb49 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e04d      	b.n	8008f1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	2bff      	cmp	r3, #255	; 0xff
 8008e88:	d90e      	bls.n	8008ea8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	22ff      	movs	r2, #255	; 0xff
 8008e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	8979      	ldrh	r1, [r7, #10]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f001 fcbf 	bl	800a824 <I2C_TransferConfig>
 8008ea6:	e00f      	b.n	8008ec8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	8979      	ldrh	r1, [r7, #10]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f001 fcae 	bl	800a824 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d19e      	bne.n	8008e10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	6a39      	ldr	r1, [r7, #32]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f001 fb96 	bl	800a608 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e01a      	b.n	8008f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2220      	movs	r2, #32
 8008eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <HAL_I2C_Master_Transmit+0x1e4>)
 8008efa:	400b      	ands	r3, r1
 8008efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	e000      	b.n	8008f1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008f1a:	2302      	movs	r3, #2
  }
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	80002000 	.word	0x80002000
 8008f28:	fe00e800 	.word	0xfe00e800

08008f2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	461a      	mov	r2, r3
 8008f38:	460b      	mov	r3, r1
 8008f3a:	817b      	strh	r3, [r7, #10]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	f040 80db 	bne.w	8009104 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_I2C_Master_Receive+0x30>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e0d4      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f64:	f7fd fc04 	bl	8006770 <HAL_GetTick>
 8008f68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2319      	movs	r3, #25
 8008f70:	2201      	movs	r2, #1
 8008f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f001 fac6 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e0bf      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2222      	movs	r2, #34	; 0x22
 8008f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2210      	movs	r2, #16
 8008f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	893a      	ldrh	r2, [r7, #8]
 8008fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2bff      	cmp	r3, #255	; 0xff
 8008fb6:	d90e      	bls.n	8008fd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	22ff      	movs	r2, #255	; 0xff
 8008fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	8979      	ldrh	r1, [r7, #10]
 8008fc6:	4b52      	ldr	r3, [pc, #328]	; (8009110 <HAL_I2C_Master_Receive+0x1e4>)
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f001 fc28 	bl	800a824 <I2C_TransferConfig>
 8008fd4:	e06d      	b.n	80090b2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	8979      	ldrh	r1, [r7, #10]
 8008fe8:	4b49      	ldr	r3, [pc, #292]	; (8009110 <HAL_I2C_Master_Receive+0x1e4>)
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f001 fc17 	bl	800a824 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8008ff6:	e05c      	b.n	80090b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	6a39      	ldr	r1, [r7, #32]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f001 fb3f 	bl	800a680 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e07c      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009042:	b29b      	uxth	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d034      	beq.n	80090b2 <HAL_I2C_Master_Receive+0x186>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800904c:	2b00      	cmp	r3, #0
 800904e:	d130      	bne.n	80090b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	2200      	movs	r2, #0
 8009058:	2180      	movs	r1, #128	; 0x80
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f001 fa54 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e04d      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906e:	b29b      	uxth	r3, r3
 8009070:	2bff      	cmp	r3, #255	; 0xff
 8009072:	d90e      	bls.n	8009092 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	22ff      	movs	r2, #255	; 0xff
 8009078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800907e:	b2da      	uxtb	r2, r3
 8009080:	8979      	ldrh	r1, [r7, #10]
 8009082:	2300      	movs	r3, #0
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f001 fbca 	bl	800a824 <I2C_TransferConfig>
 8009090:	e00f      	b.n	80090b2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	8979      	ldrh	r1, [r7, #10]
 80090a4:	2300      	movs	r3, #0
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f001 fbb9 	bl	800a824 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d19d      	bne.n	8008ff8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	6a39      	ldr	r1, [r7, #32]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f001 faa1 	bl	800a608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e01a      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2220      	movs	r2, #32
 80090d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6859      	ldr	r1, [r3, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <HAL_I2C_Master_Receive+0x1e8>)
 80090e4:	400b      	ands	r3, r1
 80090e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	e000      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009104:	2302      	movs	r3, #2
  }
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	80002400 	.word	0x80002400
 8009114:	fe00e800 	.word	0xfe00e800

08009118 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af02      	add	r7, sp, #8
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	607a      	str	r2, [r7, #4]
 8009122:	461a      	mov	r2, r3
 8009124:	460b      	mov	r3, r1
 8009126:	817b      	strh	r3, [r7, #10]
 8009128:	4613      	mov	r3, r2
 800912a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b20      	cmp	r3, #32
 8009136:	d153      	bne.n	80091e0 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009146:	d101      	bne.n	800914c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8009148:	2302      	movs	r3, #2
 800914a:	e04a      	b.n	80091e2 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_I2C_Master_Receive_IT+0x42>
 8009156:	2302      	movs	r3, #2
 8009158:	e043      	b.n	80091e2 <HAL_I2C_Master_Receive_IT+0xca>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2222      	movs	r2, #34	; 0x22
 8009166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2210      	movs	r2, #16
 800916e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	893a      	ldrh	r2, [r7, #8]
 8009182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a19      	ldr	r2, [pc, #100]	; (80091ec <HAL_I2C_Master_Receive_IT+0xd4>)
 8009188:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4a18      	ldr	r2, [pc, #96]	; (80091f0 <HAL_I2C_Master_Receive_IT+0xd8>)
 800918e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009194:	b29b      	uxth	r3, r3
 8009196:	2bff      	cmp	r3, #255	; 0xff
 8009198:	d906      	bls.n	80091a8 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	22ff      	movs	r2, #255	; 0xff
 800919e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80091a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091a4:	617b      	str	r3, [r7, #20]
 80091a6:	e007      	b.n	80091b8 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80091b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091b6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	8979      	ldrh	r1, [r7, #10]
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <HAL_I2C_Master_Receive_IT+0xdc>)
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f001 fb2c 	bl	800a824 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80091d4:	2102      	movs	r1, #2
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f001 fb52 	bl	800a880 <I2C_Enable_IRQ>

    return HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	e000      	b.n	80091e2 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80091e0:	2302      	movs	r3, #2
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	ffff0000 	.word	0xffff0000
 80091f0:	080094fd 	.word	0x080094fd
 80091f4:	80002400 	.word	0x80002400

080091f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af02      	add	r7, sp, #8
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	461a      	mov	r2, r3
 8009206:	4603      	mov	r3, r0
 8009208:	817b      	strh	r3, [r7, #10]
 800920a:	460b      	mov	r3, r1
 800920c:	813b      	strh	r3, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b20      	cmp	r3, #32
 800921c:	f040 80f9 	bne.w	8009412 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_I2C_Mem_Write+0x34>
 8009226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	d105      	bne.n	8009238 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009232:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e0ed      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_I2C_Mem_Write+0x4e>
 8009242:	2302      	movs	r3, #2
 8009244:	e0e6      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800924e:	f7fd fa8f 	bl	8006770 <HAL_GetTick>
 8009252:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	2319      	movs	r3, #25
 800925a:	2201      	movs	r2, #1
 800925c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f001 f951 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e0d1      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2221      	movs	r2, #33	; 0x21
 8009274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2240      	movs	r2, #64	; 0x40
 800927c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a3a      	ldr	r2, [r7, #32]
 800928a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009298:	88f8      	ldrh	r0, [r7, #6]
 800929a:	893a      	ldrh	r2, [r7, #8]
 800929c:	8979      	ldrh	r1, [r7, #10]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	4603      	mov	r3, r0
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 fd0f 	bl	8009ccc <I2C_RequestMemoryWrite>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e0a9      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2bff      	cmp	r3, #255	; 0xff
 80092c8:	d90e      	bls.n	80092e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	22ff      	movs	r2, #255	; 0xff
 80092ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	8979      	ldrh	r1, [r7, #10]
 80092d8:	2300      	movs	r3, #0
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f001 fa9f 	bl	800a824 <I2C_TransferConfig>
 80092e6:	e00f      	b.n	8009308 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	8979      	ldrh	r1, [r7, #10]
 80092fa:	2300      	movs	r3, #0
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f001 fa8e 	bl	800a824 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f001 f93b 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e07b      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	781a      	ldrb	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009336:	b29b      	uxth	r3, r3
 8009338:	3b01      	subs	r3, #1
 800933a:	b29a      	uxth	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009344:	3b01      	subs	r3, #1
 8009346:	b29a      	uxth	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d034      	beq.n	80093c0 <HAL_I2C_Mem_Write+0x1c8>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d130      	bne.n	80093c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	2200      	movs	r2, #0
 8009366:	2180      	movs	r1, #128	; 0x80
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f001 f8cd 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e04d      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937c:	b29b      	uxth	r3, r3
 800937e:	2bff      	cmp	r3, #255	; 0xff
 8009380:	d90e      	bls.n	80093a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	22ff      	movs	r2, #255	; 0xff
 8009386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938c:	b2da      	uxtb	r2, r3
 800938e:	8979      	ldrh	r1, [r7, #10]
 8009390:	2300      	movs	r3, #0
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f001 fa43 	bl	800a824 <I2C_TransferConfig>
 800939e:	e00f      	b.n	80093c0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	8979      	ldrh	r1, [r7, #10]
 80093b2:	2300      	movs	r3, #0
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f001 fa32 	bl	800a824 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d19e      	bne.n	8009308 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f001 f91a 	bl	800a608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e01a      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2220      	movs	r2, #32
 80093e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6859      	ldr	r1, [r3, #4]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	4b0a      	ldr	r3, [pc, #40]	; (800941c <HAL_I2C_Mem_Write+0x224>)
 80093f2:	400b      	ands	r3, r1
 80093f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	e000      	b.n	8009414 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009412:	2302      	movs	r3, #2
  }
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	fe00e800 	.word	0xfe00e800

08009420 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	2b00      	cmp	r3, #0
 800943e:	d005      	beq.n	800944c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
  }
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
 8009488:	4613      	mov	r3, r2
 800948a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af02      	add	r7, sp, #8
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <I2C_Master_ISR_IT+0x1e>
 8009516:	2302      	movs	r3, #2
 8009518:	e115      	b.n	8009746 <I2C_Master_ISR_IT+0x24a>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	091b      	lsrs	r3, r3, #4
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d013      	beq.n	8009556 <I2C_Master_ISR_IT+0x5a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	091b      	lsrs	r3, r3, #4
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00d      	beq.n	8009556 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2210      	movs	r2, #16
 8009540:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009546:	f043 0204 	orr.w	r2, r3, #4
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 ff92 	bl	800a478 <I2C_Flush_TXDR>
 8009554:	e0e2      	b.n	800971c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	089b      	lsrs	r3, r3, #2
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d023      	beq.n	80095aa <I2C_Master_ISR_IT+0xae>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	089b      	lsrs	r3, r3, #2
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	d01d      	beq.n	80095aa <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f023 0304 	bic.w	r3, r3, #4
 8009574:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	b2d2      	uxtb	r2, r2
 8009582:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009592:	3b01      	subs	r3, #1
 8009594:	b29a      	uxth	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959e:	b29b      	uxth	r3, r3
 80095a0:	3b01      	subs	r3, #1
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095a8:	e0b8      	b.n	800971c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	085b      	lsrs	r3, r3, #1
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d01e      	beq.n	80095f4 <I2C_Master_ISR_IT+0xf8>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	085b      	lsrs	r3, r3, #1
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d018      	beq.n	80095f4 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	781a      	ldrb	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095dc:	3b01      	subs	r3, #1
 80095de:	b29a      	uxth	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095f2:	e093      	b.n	800971c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	09db      	lsrs	r3, r3, #7
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d05e      	beq.n	80096be <I2C_Master_ISR_IT+0x1c2>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	099b      	lsrs	r3, r3, #6
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d058      	beq.n	80096be <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009610:	b29b      	uxth	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d041      	beq.n	800969a <I2C_Master_ISR_IT+0x19e>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961a:	2b00      	cmp	r3, #0
 800961c:	d13d      	bne.n	800969a <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800962a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009630:	b29b      	uxth	r3, r3
 8009632:	2bff      	cmp	r3, #255	; 0xff
 8009634:	d90e      	bls.n	8009654 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	22ff      	movs	r2, #255	; 0xff
 800963a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009640:	b2da      	uxtb	r2, r3
 8009642:	8a79      	ldrh	r1, [r7, #18]
 8009644:	2300      	movs	r3, #0
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f001 f8e9 	bl	800a824 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009652:	e033      	b.n	80096bc <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009658:	b29a      	uxth	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009662:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009666:	d00c      	beq.n	8009682 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966c:	b2da      	uxtb	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009672:	8a79      	ldrh	r1, [r7, #18]
 8009674:	2300      	movs	r3, #0
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4603      	mov	r3, r0
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f001 f8d2 	bl	800a824 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009680:	e01c      	b.n	80096bc <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009686:	b2da      	uxtb	r2, r3
 8009688:	8a79      	ldrh	r1, [r7, #18]
 800968a:	2300      	movs	r3, #0
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f001 f8c6 	bl	800a824 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009698:	e010      	b.n	80096bc <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096a8:	d003      	beq.n	80096b2 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 fbe4 	bl	8009e78 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096b0:	e034      	b.n	800971c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80096b2:	2140      	movs	r1, #64	; 0x40
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 fe1f 	bl	800a2f8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096ba:	e02f      	b.n	800971c <I2C_Master_ISR_IT+0x220>
 80096bc:	e02e      	b.n	800971c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	099b      	lsrs	r3, r3, #6
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d028      	beq.n	800971c <I2C_Master_ISR_IT+0x220>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	099b      	lsrs	r3, r3, #6
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d022      	beq.n	800971c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096da:	b29b      	uxth	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d119      	bne.n	8009714 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096ee:	d015      	beq.n	800971c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096f8:	d108      	bne.n	800970c <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	e007      	b.n	800971c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fbb3 	bl	8009e78 <I2C_ITMasterSeqCplt>
 8009712:	e003      	b.n	800971c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009714:	2140      	movs	r1, #64	; 0x40
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 fdee 	bl	800a2f8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	095b      	lsrs	r3, r3, #5
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d009      	beq.n	800973c <I2C_Master_ISR_IT+0x240>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009734:	6979      	ldr	r1, [r7, #20]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 fc18 	bl	8009f6c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b086      	sub	sp, #24
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <I2C_Slave_ISR_IT+0x24>
 800976e:	2302      	movs	r3, #2
 8009770:	e0ec      	b.n	800994c <I2C_Slave_ISR_IT+0x1fe>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	095b      	lsrs	r3, r3, #5
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d009      	beq.n	800979a <I2C_Slave_ISR_IT+0x4c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	095b      	lsrs	r3, r3, #5
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009792:	6939      	ldr	r1, [r7, #16]
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 fc85 	bl	800a0a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	091b      	lsrs	r3, r3, #4
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d04d      	beq.n	8009842 <I2C_Slave_ISR_IT+0xf4>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	091b      	lsrs	r3, r3, #4
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d047      	beq.n	8009842 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d128      	bne.n	800980e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b28      	cmp	r3, #40	; 0x28
 80097c6:	d108      	bne.n	80097da <I2C_Slave_ISR_IT+0x8c>
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097ce:	d104      	bne.n	80097da <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80097d0:	6939      	ldr	r1, [r7, #16]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fd3c 	bl	800a250 <I2C_ITListenCplt>
 80097d8:	e032      	b.n	8009840 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b29      	cmp	r3, #41	; 0x29
 80097e4:	d10e      	bne.n	8009804 <I2C_Slave_ISR_IT+0xb6>
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097ec:	d00a      	beq.n	8009804 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2210      	movs	r2, #16
 80097f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 fe3e 	bl	800a478 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fb78 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
 8009802:	e01d      	b.n	8009840 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2210      	movs	r2, #16
 800980a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800980c:	e096      	b.n	800993c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2210      	movs	r2, #16
 8009814:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	f043 0204 	orr.w	r2, r3, #4
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <I2C_Slave_ISR_IT+0xe4>
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800982e:	f040 8085 	bne.w	800993c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009836:	4619      	mov	r1, r3
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 fd5d 	bl	800a2f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800983e:	e07d      	b.n	800993c <I2C_Slave_ISR_IT+0x1ee>
 8009840:	e07c      	b.n	800993c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	089b      	lsrs	r3, r3, #2
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d030      	beq.n	80098b0 <I2C_Slave_ISR_IT+0x162>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	089b      	lsrs	r3, r3, #2
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d02a      	beq.n	80098b0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985e:	b29b      	uxth	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d018      	beq.n	8009896 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800988c:	b29b      	uxth	r3, r3
 800988e:	3b01      	subs	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800989a:	b29b      	uxth	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d14f      	bne.n	8009940 <I2C_Slave_ISR_IT+0x1f2>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098a6:	d04b      	beq.n	8009940 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fb22 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80098ae:	e047      	b.n	8009940 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	08db      	lsrs	r3, r3, #3
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <I2C_Slave_ISR_IT+0x184>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	08db      	lsrs	r3, r3, #3
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d004      	beq.n	80098d2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80098c8:	6939      	ldr	r1, [r7, #16]
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fa52 	bl	8009d74 <I2C_ITAddrCplt>
 80098d0:	e037      	b.n	8009942 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	085b      	lsrs	r3, r3, #1
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d031      	beq.n	8009942 <I2C_Slave_ISR_IT+0x1f4>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	085b      	lsrs	r3, r3, #1
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d02b      	beq.n	8009942 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d018      	beq.n	8009926 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	781a      	ldrb	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990e:	b29b      	uxth	r3, r3
 8009910:	3b01      	subs	r3, #1
 8009912:	b29a      	uxth	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991c:	3b01      	subs	r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	851a      	strh	r2, [r3, #40]	; 0x28
 8009924:	e00d      	b.n	8009942 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800992c:	d002      	beq.n	8009934 <I2C_Slave_ISR_IT+0x1e6>
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d106      	bne.n	8009942 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fadc 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
 800993a:	e002      	b.n	8009942 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800993c:	bf00      	nop
 800993e:	e000      	b.n	8009942 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8009940:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af02      	add	r7, sp, #8
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009966:	2b01      	cmp	r3, #1
 8009968:	d101      	bne.n	800996e <I2C_Master_ISR_DMA+0x1a>
 800996a:	2302      	movs	r3, #2
 800996c:	e0e1      	b.n	8009b32 <I2C_Master_ISR_DMA+0x1de>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	091b      	lsrs	r3, r3, #4
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d017      	beq.n	80099b2 <I2C_Master_ISR_DMA+0x5e>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	091b      	lsrs	r3, r3, #4
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d011      	beq.n	80099b2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2210      	movs	r2, #16
 8009994:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800999a:	f043 0204 	orr.w	r2, r3, #4
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80099a2:	2112      	movs	r1, #18
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 ff6b 	bl	800a880 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 fd64 	bl	800a478 <I2C_Flush_TXDR>
 80099b0:	e0ba      	b.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	09db      	lsrs	r3, r3, #7
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d072      	beq.n	8009aa4 <I2C_Master_ISR_DMA+0x150>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	099b      	lsrs	r3, r3, #6
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d06c      	beq.n	8009aa4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099de:	b29b      	uxth	r3, r3
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d04e      	beq.n	8009a82 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099f0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2bff      	cmp	r3, #255	; 0xff
 80099fa:	d906      	bls.n	8009a0a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	22ff      	movs	r2, #255	; 0xff
 8009a00:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	e010      	b.n	8009a2c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a1c:	d003      	beq.n	8009a26 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	e002      	b.n	8009a2c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a2a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	8a79      	ldrh	r1, [r7, #18]
 8009a34:	2300      	movs	r3, #0
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fef2 	bl	800a824 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b22      	cmp	r3, #34	; 0x22
 8009a5c:	d108      	bne.n	8009a70 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009a6e:	e05b      	b.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a7e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009a80:	e052      	b.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a90:	d003      	beq.n	8009a9a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f9f0 	bl	8009e78 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009a98:	e046      	b.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009a9a:	2140      	movs	r1, #64	; 0x40
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 fc2b 	bl	800a2f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009aa2:	e041      	b.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	099b      	lsrs	r3, r3, #6
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d029      	beq.n	8009b04 <I2C_Master_ISR_DMA+0x1b0>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	099b      	lsrs	r3, r3, #6
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d023      	beq.n	8009b04 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d119      	bne.n	8009afa <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ad4:	d027      	beq.n	8009b26 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ade:	d108      	bne.n	8009af2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009aee:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009af0:	e019      	b.n	8009b26 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 f9c0 	bl	8009e78 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009af8:	e015      	b.n	8009b26 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009afa:	2140      	movs	r1, #64	; 0x40
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fbfb 	bl	800a2f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009b02:	e010      	b.n	8009b26 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	095b      	lsrs	r3, r3, #5
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d005      	beq.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fa24 	bl	8009f6c <I2C_ITMasterCplt>
 8009b24:	e000      	b.n	8009b28 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009b26:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b086      	sub	sp, #24
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d101      	bne.n	8009b5e <I2C_Slave_ISR_DMA+0x24>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e0b1      	b.n	8009cc2 <I2C_Slave_ISR_DMA+0x188>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d009      	beq.n	8009b86 <I2C_Slave_ISR_DMA+0x4c>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	095b      	lsrs	r3, r3, #5
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f000 fa8f 	bl	800a0a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	091b      	lsrs	r3, r3, #4
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 8082 	beq.w	8009c98 <I2C_Slave_ISR_DMA+0x15e>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	091b      	lsrs	r3, r3, #4
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d07b      	beq.n	8009c98 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	0b9b      	lsrs	r3, r3, #14
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d105      	bne.n	8009bb8 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	0bdb      	lsrs	r3, r3, #15
 8009bb0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d068      	beq.n	8009c8a <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00d      	beq.n	8009bdc <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	0bdb      	lsrs	r3, r3, #15
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00d      	beq.n	8009c00 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	0b9b      	lsrs	r3, r3, #14
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d128      	bne.n	8009c58 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b28      	cmp	r3, #40	; 0x28
 8009c10:	d108      	bne.n	8009c24 <I2C_Slave_ISR_DMA+0xea>
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c18:	d104      	bne.n	8009c24 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009c1a:	68b9      	ldr	r1, [r7, #8]
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 fb17 	bl	800a250 <I2C_ITListenCplt>
 8009c22:	e031      	b.n	8009c88 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b29      	cmp	r3, #41	; 0x29
 8009c2e:	d10e      	bne.n	8009c4e <I2C_Slave_ISR_DMA+0x114>
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009c36:	d00a      	beq.n	8009c4e <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fc19 	bl	800a478 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 f953 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
 8009c4c:	e01c      	b.n	8009c88 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2210      	movs	r2, #16
 8009c54:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009c56:	e01d      	b.n	8009c94 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2210      	movs	r2, #16
 8009c5e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c64:	f043 0204 	orr.w	r2, r3, #4
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <I2C_Slave_ISR_DMA+0x140>
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c78:	d10c      	bne.n	8009c94 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c7e:	4619      	mov	r1, r3
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fb39 	bl	800a2f8 <I2C_ITError>
      if (treatdmanack == 1U)
 8009c86:	e005      	b.n	8009c94 <I2C_Slave_ISR_DMA+0x15a>
 8009c88:	e004      	b.n	8009c94 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2210      	movs	r2, #16
 8009c90:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009c92:	e011      	b.n	8009cb8 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8009c94:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009c96:	e00f      	b.n	8009cb8 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	08db      	lsrs	r3, r3, #3
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d009      	beq.n	8009cb8 <I2C_Slave_ISR_DMA+0x17e>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	08db      	lsrs	r3, r3, #3
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d003      	beq.n	8009cb8 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f85e 	bl	8009d74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4603      	mov	r3, r0
 8009cdc:	817b      	strh	r3, [r7, #10]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	813b      	strh	r3, [r7, #8]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ce6:	88fb      	ldrh	r3, [r7, #6]
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	8979      	ldrh	r1, [r7, #10]
 8009cec:	4b20      	ldr	r3, [pc, #128]	; (8009d70 <I2C_RequestMemoryWrite+0xa4>)
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 fd95 	bl	800a824 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	69b9      	ldr	r1, [r7, #24]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fc42 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e02c      	b.n	8009d68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d0e:	88fb      	ldrh	r3, [r7, #6]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d105      	bne.n	8009d20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d14:	893b      	ldrh	r3, [r7, #8]
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8009d1e:	e015      	b.n	8009d4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009d20:	893b      	ldrh	r3, [r7, #8]
 8009d22:	0a1b      	lsrs	r3, r3, #8
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	69b9      	ldr	r1, [r7, #24]
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fc28 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e012      	b.n	8009d68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009d42:	893b      	ldrh	r3, [r7, #8]
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2200      	movs	r2, #0
 8009d54:	2180      	movs	r1, #128	; 0x80
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fbd6 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e000      	b.n	8009d68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	80002000 	.word	0x80002000

08009d74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009d8a:	2b28      	cmp	r3, #40	; 0x28
 8009d8c:	d168      	bne.n	8009e60 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	0c1b      	lsrs	r3, r3, #16
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	0c1b      	lsrs	r3, r3, #16
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009dac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009dc8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d137      	bne.n	8009e42 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8009dd2:	897b      	ldrh	r3, [r7, #10]
 8009dd4:	09db      	lsrs	r3, r3, #7
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	89bb      	ldrh	r3, [r7, #12]
 8009dda:	4053      	eors	r3, r2
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	f003 0306 	and.w	r3, r3, #6
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11c      	bne.n	8009e20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009de6:	897b      	ldrh	r3, [r7, #10]
 8009de8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d139      	bne.n	8009e70 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2208      	movs	r2, #8
 8009e08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e12:	89ba      	ldrh	r2, [r7, #12]
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff fb2f 	bl	800947c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009e1e:	e027      	b.n	8009e70 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8009e20:	893b      	ldrh	r3, [r7, #8]
 8009e22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009e24:	2104      	movs	r1, #4
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fd98 	bl	800a95c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e34:	89ba      	ldrh	r2, [r7, #12]
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff fb1e 	bl	800947c <HAL_I2C_AddrCallback>
}
 8009e40:	e016      	b.n	8009e70 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009e42:	2104      	movs	r1, #4
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fd89 	bl	800a95c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009e52:	89ba      	ldrh	r2, [r7, #12]
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff fb0f 	bl	800947c <HAL_I2C_AddrCallback>
}
 8009e5e:	e007      	b.n	8009e70 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2208      	movs	r2, #8
 8009e66:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b21      	cmp	r3, #33	; 0x21
 8009e92:	d115      	bne.n	8009ec0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2211      	movs	r2, #17
 8009ea0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fd56 	bl	800a95c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fa f809 	bl	8003ed0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ebe:	e014      	b.n	8009eea <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2212      	movs	r2, #18
 8009ecc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009ed4:	2102      	movs	r1, #2
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fd40 	bl	800a95c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7fa f809 	bl	8003efc <HAL_I2C_MasterRxCpltCallback>
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b29      	cmp	r3, #41	; 0x29
 8009f0c:	d112      	bne.n	8009f34 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2228      	movs	r2, #40	; 0x28
 8009f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2221      	movs	r2, #33	; 0x21
 8009f1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fd1c 	bl	800a95c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff fa91 	bl	8009454 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f32:	e017      	b.n	8009f64 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f3e:	d111      	bne.n	8009f64 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2228      	movs	r2, #40	; 0x28
 8009f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2222      	movs	r2, #34	; 0x22
 8009f4c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009f4e:	2102      	movs	r1, #2
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fd03 	bl	800a95c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fa82 	bl	8009468 <HAL_I2C_SlaveRxCpltCallback>
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6859      	ldr	r1, [r3, #4]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	4b44      	ldr	r3, [pc, #272]	; (800a09c <I2C_ITMasterCplt+0x130>)
 8009f8a:	400b      	ands	r3, r1
 8009f8c:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a40      	ldr	r2, [pc, #256]	; (800a0a0 <I2C_ITMasterCplt+0x134>)
 8009f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	091b      	lsrs	r3, r3, #4
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d009      	beq.n	8009fc0 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2210      	movs	r2, #16
 8009fb2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb8:	f043 0204 	orr.w	r2, r3, #4
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fa59 	bl	800a478 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009fc6:	2103      	movs	r1, #3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fcc7 	bl	800a95c <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b60      	cmp	r3, #96	; 0x60
 8009fde:	d002      	beq.n	8009fe6 <I2C_ITMasterCplt+0x7a>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d006      	beq.n	8009ff4 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f983 	bl	800a2f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009ff2:	e04e      	b.n	800a092 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b21      	cmp	r3, #33	; 0x21
 8009ffe:	d121      	bne.n	800a044 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2220      	movs	r2, #32
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b40      	cmp	r3, #64	; 0x40
 800a012:	d10b      	bne.n	800a02c <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff fa41 	bl	80094ac <HAL_I2C_MemTxCpltCallback>
}
 800a02a:	e032      	b.n	800a092 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7f9 ff47 	bl	8003ed0 <HAL_I2C_MasterTxCpltCallback>
}
 800a042:	e026      	b.n	800a092 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b22      	cmp	r3, #34	; 0x22
 800a04e:	d120      	bne.n	800a092 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2220      	movs	r2, #32
 800a054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b40      	cmp	r3, #64	; 0x40
 800a062:	d10b      	bne.n	800a07c <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7ff fa23 	bl	80094c0 <HAL_I2C_MemRxCpltCallback>
}
 800a07a:	e00a      	b.n	800a092 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7f9 ff35 	bl	8003efc <HAL_I2C_MasterRxCpltCallback>
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	fe00e800 	.word	0xfe00e800
 800a0a0:	ffff0000 	.word	0xffff0000

0800a0a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a0c2:	2107      	movs	r1, #7
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fc49 	bl	800a95c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6859      	ldr	r1, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	4b58      	ldr	r3, [pc, #352]	; (800a248 <I2C_ITSlaveCplt+0x1a4>)
 800a0e6:	400b      	ands	r3, r1
 800a0e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f9c4 	bl	800a478 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	0b9b      	lsrs	r3, r3, #14
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00b      	beq.n	800a114 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a100:	2b00      	cmp	r3, #0
 800a102:	d018      	beq.n	800a136 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a112:	e010      	b.n	800a136 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	0bdb      	lsrs	r3, r3, #15
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d006      	beq.n	800a136 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	b29a      	uxth	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	089b      	lsrs	r3, r3, #2
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d020      	beq.n	800a184 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f023 0304 	bic.w	r3, r3, #4
 800a148:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	b2d2      	uxtb	r2, r2
 800a156:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00c      	beq.n	800a184 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a16e:	3b01      	subs	r3, #1
 800a170:	b29a      	uxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	3b01      	subs	r3, #1
 800a17e:	b29a      	uxth	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a188:	b29b      	uxth	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a192:	f043 0204 	orr.w	r2, r3, #4
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d010      	beq.n	800a1d8 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f89b 	bl	800a2f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b28      	cmp	r3, #40	; 0x28
 800a1cc:	d138      	bne.n	800a240 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f83d 	bl	800a250 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a1d6:	e033      	b.n	800a240 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1e0:	d011      	beq.n	800a206 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff fe85 	bl	8009ef2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a18      	ldr	r2, [pc, #96]	; (800a24c <I2C_ITSlaveCplt+0x1a8>)
 800a1ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff f94a 	bl	8009498 <HAL_I2C_ListenCpltCallback>
}
 800a204:	e01c      	b.n	800a240 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b22      	cmp	r3, #34	; 0x22
 800a210:	d10b      	bne.n	800a22a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2220      	movs	r2, #32
 800a216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff f920 	bl	8009468 <HAL_I2C_SlaveRxCpltCallback>
}
 800a228:	e00a      	b.n	800a240 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2220      	movs	r2, #32
 800a22e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff f90a 	bl	8009454 <HAL_I2C_SlaveTxCpltCallback>
}
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	fe00e800 	.word	0xfe00e800
 800a24c:	ffff0000 	.word	0xffff0000

0800a250 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a25      	ldr	r2, [pc, #148]	; (800a2f4 <I2C_ITListenCplt+0xa4>)
 800a25e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	089b      	lsrs	r3, r3, #2
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	d022      	beq.n	800a2ce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a292:	b2d2      	uxtb	r2, r2
 800a294:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d012      	beq.n	800a2ce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c6:	f043 0204 	orr.w	r2, r3, #4
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a2ce:	2107      	movs	r1, #7
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fb43 	bl	800a95c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2210      	movs	r2, #16
 800a2dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff f8d6 	bl	8009498 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a2ec:	bf00      	nop
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	ffff0000 	.word	0xffff0000

0800a2f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a308:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a55      	ldr	r2, [pc, #340]	; (800a46c <I2C_ITError+0x174>)
 800a316:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	431a      	orrs	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b28      	cmp	r3, #40	; 0x28
 800a32e:	d005      	beq.n	800a33c <I2C_ITError+0x44>
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	2b29      	cmp	r3, #41	; 0x29
 800a334:	d002      	beq.n	800a33c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	2b2a      	cmp	r3, #42	; 0x2a
 800a33a:	d10e      	bne.n	800a35a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a33c:	2103      	movs	r1, #3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fb0c 	bl	800a95c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2228      	movs	r2, #40	; 0x28
 800a348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a46      	ldr	r2, [pc, #280]	; (800a470 <I2C_ITError+0x178>)
 800a356:	635a      	str	r2, [r3, #52]	; 0x34
 800a358:	e013      	b.n	800a382 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a35a:	2107      	movs	r1, #7
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fafd 	bl	800a95c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b60      	cmp	r3, #96	; 0x60
 800a36c:	d003      	beq.n	800a376 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2220      	movs	r2, #32
 800a372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a38c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a390:	d123      	bne.n	800a3da <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a3a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d05c      	beq.n	800a464 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	4a31      	ldr	r2, [pc, #196]	; (800a474 <I2C_ITError+0x17c>)
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe f8e2 	bl	8008588 <HAL_DMA_Abort_IT>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d04c      	beq.n	800a464 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a3d8:	e044      	b.n	800a464 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3e8:	d123      	bne.n	800a432 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3f8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d030      	beq.n	800a464 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a406:	4a1b      	ldr	r2, [pc, #108]	; (800a474 <I2C_ITError+0x17c>)
 800a408:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe f8b6 	bl	8008588 <HAL_DMA_Abort_IT>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d020      	beq.n	800a464 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a42c:	4610      	mov	r0, r2
 800a42e:	4798      	blx	r3
}
 800a430:	e018      	b.n	800a464 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b60      	cmp	r3, #96	; 0x60
 800a43c:	d10b      	bne.n	800a456 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2220      	movs	r2, #32
 800a442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff f84a 	bl	80094e8 <HAL_I2C_AbortCpltCallback>
}
 800a454:	e006      	b.n	800a464 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff f838 	bl	80094d4 <HAL_I2C_ErrorCallback>
}
 800a464:	bf00      	nop
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	ffff0000 	.word	0xffff0000
 800a470:	0800974f 	.word	0x0800974f
 800a474:	0800a4c1 	.word	0x0800a4c1

0800a478 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d103      	bne.n	800a496 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2200      	movs	r2, #0
 800a494:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d007      	beq.n	800a4b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	699a      	ldr	r2, [r3, #24]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0201 	orr.w	r2, r2, #1
 800a4b2:	619a      	str	r2, [r3, #24]
  }
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4da:	2200      	movs	r2, #0
 800a4dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b60      	cmp	r3, #96	; 0x60
 800a4e8:	d107      	bne.n	800a4fa <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7fe fff8 	bl	80094e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a4f8:	e002      	b.n	800a500 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f7fe ffea 	bl	80094d4 <HAL_I2C_ErrorCallback>
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	4613      	mov	r3, r2
 800a516:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a518:	e022      	b.n	800a560 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a520:	d01e      	beq.n	800a560 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a522:	f7fc f925 	bl	8006770 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d113      	bne.n	800a560 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53c:	f043 0220 	orr.w	r2, r3, #32
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2220      	movs	r2, #32
 800a548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e00f      	b.n	800a580 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699a      	ldr	r2, [r3, #24]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	4013      	ands	r3, r2
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	bf0c      	ite	eq
 800a570:	2301      	moveq	r3, #1
 800a572:	2300      	movne	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	461a      	mov	r2, r3
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d0cd      	beq.n	800a51a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a594:	e02c      	b.n	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f8dc 	bl	800a758 <I2C_IsAcknowledgeFailed>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e02a      	b.n	800a600 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b0:	d01e      	beq.n	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b2:	f7fc f8dd 	bl	8006770 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d302      	bcc.n	800a5c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d113      	bne.n	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5cc:	f043 0220 	orr.w	r2, r3, #32
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e007      	b.n	800a600 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d1cb      	bne.n	800a596 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a614:	e028      	b.n	800a668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	68b9      	ldr	r1, [r7, #8]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f89c 	bl	800a758 <I2C_IsAcknowledgeFailed>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e026      	b.n	800a678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62a:	f7fc f8a1 	bl	8006770 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d113      	bne.n	800a668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a644:	f043 0220 	orr.w	r2, r3, #32
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e007      	b.n	800a678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b20      	cmp	r3, #32
 800a674:	d1cf      	bne.n	800a616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a68c:	e055      	b.n	800a73a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 f860 	bl	800a758 <I2C_IsAcknowledgeFailed>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e053      	b.n	800a74a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	f003 0320 	and.w	r3, r3, #32
 800a6ac:	2b20      	cmp	r3, #32
 800a6ae:	d129      	bne.n	800a704 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d105      	bne.n	800a6ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e03f      	b.n	800a74a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6859      	ldr	r1, [r3, #4]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	4b1d      	ldr	r3, [pc, #116]	; (800a754 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800a6de:	400b      	ands	r3, r1
 800a6e0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e022      	b.n	800a74a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a704:	f7fc f834 	bl	8006770 <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	d302      	bcc.n	800a71a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10f      	bne.n	800a73a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71e:	f043 0220 	orr.w	r2, r3, #32
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2220      	movs	r2, #32
 800a72a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	e007      	b.n	800a74a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b04      	cmp	r3, #4
 800a746:	d1a2      	bne.n	800a68e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	fe00e800 	.word	0xfe00e800

0800a758 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	f003 0310 	and.w	r3, r3, #16
 800a76e:	2b10      	cmp	r3, #16
 800a770:	d151      	bne.n	800a816 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a772:	e022      	b.n	800a7ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77a:	d01e      	beq.n	800a7ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a77c:	f7fb fff8 	bl	8006770 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d302      	bcc.n	800a792 <I2C_IsAcknowledgeFailed+0x3a>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d113      	bne.n	800a7ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a796:	f043 0220 	orr.w	r2, r3, #32
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e02e      	b.n	800a818 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d1d5      	bne.n	800a774 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2210      	movs	r2, #16
 800a7ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f7ff fe4d 	bl	800a478 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6859      	ldr	r1, [r3, #4]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b0d      	ldr	r3, [pc, #52]	; (800a820 <I2C_IsAcknowledgeFailed+0xc8>)
 800a7ea:	400b      	ands	r3, r1
 800a7ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f2:	f043 0204 	orr.w	r2, r3, #4
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	fe00e800 	.word	0xfe00e800

0800a824 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	607b      	str	r3, [r7, #4]
 800a82e:	460b      	mov	r3, r1
 800a830:	817b      	strh	r3, [r7, #10]
 800a832:	4613      	mov	r3, r2
 800a834:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	0d5b      	lsrs	r3, r3, #21
 800a840:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a844:	4b0d      	ldr	r3, [pc, #52]	; (800a87c <I2C_TransferConfig+0x58>)
 800a846:	430b      	orrs	r3, r1
 800a848:	43db      	mvns	r3, r3
 800a84a:	ea02 0103 	and.w	r1, r2, r3
 800a84e:	897b      	ldrh	r3, [r7, #10]
 800a850:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a854:	7a7b      	ldrb	r3, [r7, #9]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a85c:	431a      	orrs	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	431a      	orrs	r2, r3
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	431a      	orrs	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	03ff63ff 	.word	0x03ff63ff

0800a880 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a894:	4a2f      	ldr	r2, [pc, #188]	; (800a954 <I2C_Enable_IRQ+0xd4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d004      	beq.n	800a8a4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a89e:	4a2e      	ldr	r2, [pc, #184]	; (800a958 <I2C_Enable_IRQ+0xd8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d124      	bne.n	800a8ee <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a8a4:	887b      	ldrh	r3, [r7, #2]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a8b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800a8b6:	887b      	ldrh	r3, [r7, #2]
 800a8b8:	f003 0311 	and.w	r3, r3, #17
 800a8bc:	2b11      	cmp	r3, #17
 800a8be:	d103      	bne.n	800a8c8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a8c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a8c8:	887b      	ldrh	r3, [r7, #2]
 800a8ca:	f003 0312 	and.w	r3, r3, #18
 800a8ce:	2b12      	cmp	r3, #18
 800a8d0:	d103      	bne.n	800a8da <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f043 0320 	orr.w	r3, r3, #32
 800a8d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a8da:	887b      	ldrh	r3, [r7, #2]
 800a8dc:	f003 0312 	and.w	r3, r3, #18
 800a8e0:	2b12      	cmp	r3, #18
 800a8e2:	d128      	bne.n	800a936 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ea:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a8ec:	e023      	b.n	800a936 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a8ee:	887b      	ldrh	r3, [r7, #2]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a8fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a900:	887b      	ldrh	r3, [r7, #2]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a910:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a912:	887b      	ldrh	r3, [r7, #2]
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a922:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a924:	887b      	ldrh	r3, [r7, #2]
 800a926:	f003 0312 	and.w	r3, r3, #18
 800a92a:	2b12      	cmp	r3, #18
 800a92c:	d103      	bne.n	800a936 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f043 0320 	orr.w	r3, r3, #32
 800a934:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	6819      	ldr	r1, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	430a      	orrs	r2, r1
 800a944:	601a      	str	r2, [r3, #0]
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	08009955 	.word	0x08009955
 800a958:	08009b3b 	.word	0x08009b3b

0800a95c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a96c:	887b      	ldrh	r3, [r7, #2]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00f      	beq.n	800a996 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a97c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a98a:	2b28      	cmp	r3, #40	; 0x28
 800a98c:	d003      	beq.n	800a996 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a994:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a996:	887b      	ldrh	r3, [r7, #2]
 800a998:	f003 0302 	and.w	r3, r3, #2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00f      	beq.n	800a9c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a9a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a9b4:	2b28      	cmp	r3, #40	; 0x28
 800a9b6:	d003      	beq.n	800a9c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a9be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a9c0:	887b      	ldrh	r3, [r7, #2]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d003      	beq.n	800a9d2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a9d0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800a9d2:	887b      	ldrh	r3, [r7, #2]
 800a9d4:	f003 0311 	and.w	r3, r3, #17
 800a9d8:	2b11      	cmp	r3, #17
 800a9da:	d103      	bne.n	800a9e4 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a9e2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800a9e4:	887b      	ldrh	r3, [r7, #2]
 800a9e6:	f003 0312 	and.w	r3, r3, #18
 800a9ea:	2b12      	cmp	r3, #18
 800a9ec:	d103      	bne.n	800a9f6 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f043 0320 	orr.w	r3, r3, #32
 800a9f4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800a9f6:	887b      	ldrh	r3, [r7, #2]
 800a9f8:	f003 0312 	and.w	r3, r3, #18
 800a9fc:	2b12      	cmp	r3, #18
 800a9fe:	d103      	bne.n	800aa08 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa06:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6819      	ldr	r1, [r3, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	43da      	mvns	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	400a      	ands	r2, r1
 800aa18:	601a      	str	r2, [r3, #0]
}
 800aa1a:	bf00      	nop
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b20      	cmp	r3, #32
 800aa3a:	d138      	bne.n	800aaae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e032      	b.n	800aab0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2224      	movs	r2, #36	; 0x24
 800aa56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6819      	ldr	r1, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f042 0201 	orr.w	r2, r2, #1
 800aa98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e000      	b.n	800aab0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aaae:	2302      	movs	r3, #2
  }
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b20      	cmp	r3, #32
 800aad0:	d139      	bne.n	800ab46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d101      	bne.n	800aae0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aadc:	2302      	movs	r3, #2
 800aade:	e033      	b.n	800ab48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2224      	movs	r2, #36	; 0x24
 800aaec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 0201 	bic.w	r2, r2, #1
 800aafe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ab0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	021b      	lsls	r3, r3, #8
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0201 	orr.w	r2, r2, #1
 800ab30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e000      	b.n	800ab48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab46:	2302      	movs	r3, #2
  }
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab58:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a04      	ldr	r2, [pc, #16]	; (800ab70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ab5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab62:	6013      	str	r3, [r2, #0]
}
 800ab64:	bf00      	nop
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	58000400 	.word	0x58000400

0800ab74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <HAL_PWREx_GetVoltageRange+0x18>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	58000400 	.word	0x58000400

0800ab90 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800ab94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aba2:	d101      	bne.n	800aba8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800aba4:	2301      	movs	r3, #1
 800aba6:	e000      	b.n	800abaa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <LL_RCC_HSE_EnableBypass>:
{
 800abb4:	b480      	push	{r7}
 800abb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800abb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abc6:	6013      	str	r3, [r2, #0]
}
 800abc8:	bf00      	nop
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <LL_RCC_HSE_DisableBypass>:
{
 800abd2:	b480      	push	{r7}
 800abd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800abd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abe4:	6013      	str	r3, [r2, #0]
}
 800abe6:	bf00      	nop
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <LL_RCC_HSE_Enable>:
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800abf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac02:	6013      	str	r3, [r2, #0]
}
 800ac04:	bf00      	nop
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <LL_RCC_HSE_Disable>:
{
 800ac0e:	b480      	push	{r7}
 800ac10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ac12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac20:	6013      	str	r3, [r2, #0]
}
 800ac22:	bf00      	nop
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <LL_RCC_HSE_IsReady>:
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ac30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac3e:	d101      	bne.n	800ac44 <LL_RCC_HSE_IsReady+0x18>
 800ac40:	2301      	movs	r3, #1
 800ac42:	e000      	b.n	800ac46 <LL_RCC_HSE_IsReady+0x1a>
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <LL_RCC_HSI_Enable>:
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ac54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac62:	6013      	str	r3, [r2, #0]
}
 800ac64:	bf00      	nop
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <LL_RCC_HSI_Disable>:
{
 800ac6e:	b480      	push	{r7}
 800ac70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800ac72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac80:	6013      	str	r3, [r2, #0]
}
 800ac82:	bf00      	nop
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <LL_RCC_HSI_IsReady>:
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ac90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac9e:	d101      	bne.n	800aca4 <LL_RCC_HSI_IsReady+0x18>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e000      	b.n	800aca6 <LL_RCC_HSI_IsReady+0x1a>
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800acb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	061b      	lsls	r3, r3, #24
 800acc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800acca:	4313      	orrs	r3, r2
 800accc:	604b      	str	r3, [r1, #4]
}
 800acce:	bf00      	nop
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <LL_RCC_HSI48_Enable>:
{
 800acda:	b480      	push	{r7}
 800acdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800acde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ace2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ace6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800acf2:	bf00      	nop
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <LL_RCC_HSI48_Disable>:
{
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ad00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad0c:	f023 0301 	bic.w	r3, r3, #1
 800ad10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800ad14:	bf00      	nop
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <LL_RCC_HSI48_IsReady>:
{
 800ad1e:	b480      	push	{r7}
 800ad20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ad22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad2a:	f003 0302 	and.w	r3, r3, #2
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d101      	bne.n	800ad36 <LL_RCC_HSI48_IsReady+0x18>
 800ad32:	2301      	movs	r3, #1
 800ad34:	e000      	b.n	800ad38 <LL_RCC_HSI48_IsReady+0x1a>
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <LL_RCC_LSE_Enable>:
{
 800ad42:	b480      	push	{r7}
 800ad44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad52:	f043 0301 	orr.w	r3, r3, #1
 800ad56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ad5a:	bf00      	nop
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <LL_RCC_LSE_Disable>:
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ad68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad74:	f023 0301 	bic.w	r3, r3, #1
 800ad78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ad7c:	bf00      	nop
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <LL_RCC_LSE_EnableBypass>:
{
 800ad86:	b480      	push	{r7}
 800ad88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ad8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad96:	f043 0304 	orr.w	r3, r3, #4
 800ad9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ad9e:	bf00      	nop
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <LL_RCC_LSE_DisableBypass>:
{
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800adac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800adb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800adb8:	f023 0304 	bic.w	r3, r3, #4
 800adbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800adc0:	bf00      	nop
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <LL_RCC_LSE_IsReady>:
{
 800adca:	b480      	push	{r7}
 800adcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800adce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800add2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b02      	cmp	r3, #2
 800addc:	d101      	bne.n	800ade2 <LL_RCC_LSE_IsReady+0x18>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <LL_RCC_LSE_IsReady+0x1a>
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <LL_RCC_LSI1_Enable>:
{
 800adee:	b480      	push	{r7}
 800adf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800adf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800adf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800adfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800adfe:	f043 0301 	orr.w	r3, r3, #1
 800ae02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ae06:	bf00      	nop
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <LL_RCC_LSI1_Disable>:
{
 800ae10:	b480      	push	{r7}
 800ae12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ae14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ae28:	bf00      	nop
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <LL_RCC_LSI1_IsReady>:
{
 800ae32:	b480      	push	{r7}
 800ae34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ae36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d101      	bne.n	800ae4a <LL_RCC_LSI1_IsReady+0x18>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <LL_RCC_LSI1_IsReady+0x1a>
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <LL_RCC_LSI2_Enable>:
{
 800ae56:	b480      	push	{r7}
 800ae58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ae5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae66:	f043 0304 	orr.w	r3, r3, #4
 800ae6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ae6e:	bf00      	nop
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <LL_RCC_LSI2_Disable>:
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ae7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae88:	f023 0304 	bic.w	r3, r3, #4
 800ae8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ae90:	bf00      	nop
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <LL_RCC_LSI2_IsReady>:
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ae9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d101      	bne.n	800aeb2 <LL_RCC_LSI2_IsReady+0x18>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e000      	b.n	800aeb4 <LL_RCC_LSI2_IsReady+0x1a>
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <LL_RCC_LSI2_SetTrimming>:
{
 800aebe:	b480      	push	{r7}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800aec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aeca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aece:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	021b      	lsls	r3, r3, #8
 800aed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aeda:	4313      	orrs	r3, r2
 800aedc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <LL_RCC_MSI_Enable>:
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800aef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aefa:	f043 0301 	orr.w	r3, r3, #1
 800aefe:	6013      	str	r3, [r2, #0]
}
 800af00:	bf00      	nop
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <LL_RCC_MSI_Disable>:
{
 800af0a:	b480      	push	{r7}
 800af0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800af0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af18:	f023 0301 	bic.w	r3, r3, #1
 800af1c:	6013      	str	r3, [r2, #0]
}
 800af1e:	bf00      	nop
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <LL_RCC_MSI_IsReady>:
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800af2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b02      	cmp	r3, #2
 800af38:	d101      	bne.n	800af3e <LL_RCC_MSI_IsReady+0x16>
 800af3a:	2301      	movs	r3, #1
 800af3c:	e000      	b.n	800af40 <LL_RCC_MSI_IsReady+0x18>
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <LL_RCC_MSI_SetRange>:
{
 800af4a:	b480      	push	{r7}
 800af4c:	b083      	sub	sp, #12
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800af52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4313      	orrs	r3, r2
 800af64:	600b      	str	r3, [r1, #0]
}
 800af66:	bf00      	nop
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <LL_RCC_MSI_GetRange>:
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800af78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af82:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2bb0      	cmp	r3, #176	; 0xb0
 800af88:	d901      	bls.n	800af8e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800af8a:	23b0      	movs	r3, #176	; 0xb0
 800af8c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800af8e:	687b      	ldr	r3, [r7, #4]
}
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <LL_RCC_MSI_SetCalibTrimming>:
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800afa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	021b      	lsls	r3, r3, #8
 800afb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800afb6:	4313      	orrs	r3, r2
 800afb8:	604b      	str	r3, [r1, #4]
}
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <LL_RCC_SetSysClkSource>:
{
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800afce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f023 0203 	bic.w	r2, r3, #3
 800afd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4313      	orrs	r3, r2
 800afe0:	608b      	str	r3, [r1, #8]
}
 800afe2:	bf00      	nop
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <LL_RCC_GetSysClkSource>:
{
 800afee:	b480      	push	{r7}
 800aff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800aff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f003 030c 	and.w	r3, r3, #12
}
 800affc:	4618      	mov	r0, r3
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <LL_RCC_SetAHBPrescaler>:
{
 800b006:	b480      	push	{r7}
 800b008:	b083      	sub	sp, #12
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b00e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4313      	orrs	r3, r2
 800b020:	608b      	str	r3, [r1, #8]
}
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <LL_C2_RCC_SetAHBPrescaler>:
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b03a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b03e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4313      	orrs	r3, r2
 800b04a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b04e:	bf00      	nop
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <LL_RCC_SetAHB4Prescaler>:
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b066:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b06a:	f023 020f 	bic.w	r2, r3, #15
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	091b      	lsrs	r3, r3, #4
 800b072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b076:	4313      	orrs	r3, r2
 800b078:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <LL_RCC_SetAPB1Prescaler>:
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b09a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	608b      	str	r3, [r1, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <LL_RCC_SetAPB2Prescaler>:
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b0b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b0c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	608b      	str	r3, [r1, #8]
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <LL_RCC_GetAHBPrescaler>:
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b0dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <LL_C2_RCC_GetAHBPrescaler>:
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800b0f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b0fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b100:	4618      	mov	r0, r3
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <LL_RCC_GetAHB4Prescaler>:
{
 800b10a:	b480      	push	{r7}
 800b10c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b10e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b112:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <LL_RCC_GetAPB1Prescaler>:
{
 800b126:	b480      	push	{r7}
 800b128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800b134:	4618      	mov	r0, r3
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <LL_RCC_GetAPB2Prescaler>:
{
 800b13e:	b480      	push	{r7}
 800b140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b156:	b480      	push	{r7}
 800b158:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b15a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b168:	6013      	str	r3, [r2, #0]
}
 800b16a:	bf00      	nop
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b186:	6013      	str	r3, [r2, #0]
}
 800b188:	bf00      	nop
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b192:	b480      	push	{r7}
 800b194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1a4:	d101      	bne.n	800b1aa <LL_RCC_PLL_IsReady+0x18>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <LL_RCC_PLL_IsReady+0x1a>
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b1ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	0a1b      	lsrs	r3, r3, #8
 800b1c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b1d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b1ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b200:	b480      	push	{r7}
 800b202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f003 0303 	and.w	r3, r3, #3
}
 800b20e:	4618      	mov	r0, r3
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22a:	d101      	bne.n	800b230 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b22c:	2301      	movs	r3, #1
 800b22e:	e000      	b.n	800b232 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b244:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b24c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b250:	d101      	bne.n	800b256 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b252:	2301      	movs	r3, #1
 800b254:	e000      	b.n	800b258 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b262:	b480      	push	{r7}
 800b264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b26a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b26e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b276:	d101      	bne.n	800b27c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b288:	b480      	push	{r7}
 800b28a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b29a:	d101      	bne.n	800b2a0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b29c:	2301      	movs	r3, #1
 800b29e:	e000      	b.n	800b2a2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b2b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2be:	d101      	bne.n	800b2c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2d0:	b590      	push	{r4, r7, lr}
 800b2d2:	b08b      	sub	sp, #44	; 0x2c
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e34b      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0320 	and.w	r3, r3, #32
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 808f 	beq.w	800b40e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2f0:	f7ff fe7d 	bl	800afee <LL_RCC_GetSysClkSource>
 800b2f4:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2f6:	f7ff ff83 	bl	800b200 <LL_RCC_PLL_GetMainSource>
 800b2fa:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d005      	beq.n	800b30e <HAL_RCC_OscConfig+0x3e>
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	2b0c      	cmp	r3, #12
 800b306:	d149      	bne.n	800b39c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d146      	bne.n	800b39c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b30e:	f7ff fe0b 	bl	800af28 <LL_RCC_MSI_IsReady>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d005      	beq.n	800b324 <HAL_RCC_OscConfig+0x54>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e32a      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b328:	f7ff fe23 	bl	800af72 <LL_RCC_MSI_GetRange>
 800b32c:	4603      	mov	r3, r0
 800b32e:	429c      	cmp	r4, r3
 800b330:	d914      	bls.n	800b35c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fd2a 	bl	800bd90 <RCC_SetFlashLatencyFromMSIRange>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e319      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fdfd 	bl	800af4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff fe21 	bl	800af9c <LL_RCC_MSI_SetCalibTrimming>
 800b35a:	e013      	b.n	800b384 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fdf2 	bl	800af4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff fe16 	bl	800af9c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	4618      	mov	r0, r3
 800b376:	f000 fd0b 	bl	800bd90 <RCC_SetFlashLatencyFromMSIRange>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e2fa      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800b384:	f7fa fb46 	bl	8005a14 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b388:	4bb4      	ldr	r3, [pc, #720]	; (800b65c <HAL_RCC_OscConfig+0x38c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fa f83b 	bl	8005408 <HAL_InitTick>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d039      	beq.n	800b40c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e2ee      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d01e      	beq.n	800b3e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b3a4:	f7ff fda2 	bl	800aeec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b3a8:	f7fb f9e2 	bl	8006770 <HAL_GetTick>
 800b3ac:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b3ae:	e008      	b.n	800b3c2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b3b0:	f7fb f9de 	bl	8006770 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d901      	bls.n	800b3c2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e2db      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b3c2:	f7ff fdb1 	bl	800af28 <LL_RCC_MSI_IsReady>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d0f1      	beq.n	800b3b0 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff fdba 	bl	800af4a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff fdde 	bl	800af9c <LL_RCC_MSI_SetCalibTrimming>
 800b3e0:	e015      	b.n	800b40e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b3e2:	f7ff fd92 	bl	800af0a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b3e6:	f7fb f9c3 	bl	8006770 <HAL_GetTick>
 800b3ea:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b3ec:	e008      	b.n	800b400 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b3ee:	f7fb f9bf 	bl	8006770 <HAL_GetTick>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d901      	bls.n	800b400 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e2bc      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b400:	f7ff fd92 	bl	800af28 <LL_RCC_MSI_IsReady>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1f1      	bne.n	800b3ee <HAL_RCC_OscConfig+0x11e>
 800b40a:	e000      	b.n	800b40e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b40c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d05a      	beq.n	800b4d0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b41a:	f7ff fde8 	bl	800afee <LL_RCC_GetSysClkSource>
 800b41e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b420:	f7ff feee 	bl	800b200 <LL_RCC_PLL_GetMainSource>
 800b424:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	2b08      	cmp	r3, #8
 800b42a:	d005      	beq.n	800b438 <HAL_RCC_OscConfig+0x168>
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	2b0c      	cmp	r3, #12
 800b430:	d10d      	bne.n	800b44e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b03      	cmp	r3, #3
 800b436:	d10a      	bne.n	800b44e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b438:	f7ff fbf8 	bl	800ac2c <LL_RCC_HSE_IsReady>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d045      	beq.n	800b4ce <HAL_RCC_OscConfig+0x1fe>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d141      	bne.n	800b4ce <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e295      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b456:	d102      	bne.n	800b45e <HAL_RCC_OscConfig+0x18e>
 800b458:	f7ff fbca 	bl	800abf0 <LL_RCC_HSE_Enable>
 800b45c:	e00d      	b.n	800b47a <HAL_RCC_OscConfig+0x1aa>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b466:	d104      	bne.n	800b472 <HAL_RCC_OscConfig+0x1a2>
 800b468:	f7ff fba4 	bl	800abb4 <LL_RCC_HSE_EnableBypass>
 800b46c:	f7ff fbc0 	bl	800abf0 <LL_RCC_HSE_Enable>
 800b470:	e003      	b.n	800b47a <HAL_RCC_OscConfig+0x1aa>
 800b472:	f7ff fbcc 	bl	800ac0e <LL_RCC_HSE_Disable>
 800b476:	f7ff fbac 	bl	800abd2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d012      	beq.n	800b4a8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b482:	f7fb f975 	bl	8006770 <HAL_GetTick>
 800b486:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b488:	e008      	b.n	800b49c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b48a:	f7fb f971 	bl	8006770 <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b64      	cmp	r3, #100	; 0x64
 800b496:	d901      	bls.n	800b49c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e26e      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b49c:	f7ff fbc6 	bl	800ac2c <LL_RCC_HSE_IsReady>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0f1      	beq.n	800b48a <HAL_RCC_OscConfig+0x1ba>
 800b4a6:	e013      	b.n	800b4d0 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a8:	f7fb f962 	bl	8006770 <HAL_GetTick>
 800b4ac:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4b0:	f7fb f95e 	bl	8006770 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b64      	cmp	r3, #100	; 0x64
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e25b      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b4c2:	f7ff fbb3 	bl	800ac2c <LL_RCC_HSE_IsReady>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f1      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x1e0>
 800b4cc:	e000      	b.n	800b4d0 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d051      	beq.n	800b580 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4dc:	f7ff fd87 	bl	800afee <LL_RCC_GetSysClkSource>
 800b4e0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b4e2:	f7ff fe8d 	bl	800b200 <LL_RCC_PLL_GetMainSource>
 800b4e6:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d005      	beq.n	800b4fa <HAL_RCC_OscConfig+0x22a>
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b0c      	cmp	r3, #12
 800b4f2:	d113      	bne.n	800b51c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d110      	bne.n	800b51c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4fa:	f7ff fbc7 	bl	800ac8c <LL_RCC_HSI_IsReady>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d005      	beq.n	800b510 <HAL_RCC_OscConfig+0x240>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e234      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff fbcb 	bl	800acb0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b51a:	e031      	b.n	800b580 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d019      	beq.n	800b558 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b524:	f7ff fb94 	bl	800ac50 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b528:	f7fb f922 	bl	8006770 <HAL_GetTick>
 800b52c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b52e:	e008      	b.n	800b542 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b530:	f7fb f91e 	bl	8006770 <HAL_GetTick>
 800b534:	4602      	mov	r2, r0
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d901      	bls.n	800b542 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e21b      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b542:	f7ff fba3 	bl	800ac8c <LL_RCC_HSI_IsReady>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d0f1      	beq.n	800b530 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff fbad 	bl	800acb0 <LL_RCC_HSI_SetCalibTrimming>
 800b556:	e013      	b.n	800b580 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b558:	f7ff fb89 	bl	800ac6e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b55c:	f7fb f908 	bl	8006770 <HAL_GetTick>
 800b560:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b562:	e008      	b.n	800b576 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b564:	f7fb f904 	bl	8006770 <HAL_GetTick>
 800b568:	4602      	mov	r2, r0
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d901      	bls.n	800b576 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e201      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b576:	f7ff fb89 	bl	800ac8c <LL_RCC_HSI_IsReady>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1f1      	bne.n	800b564 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0308 	and.w	r3, r3, #8
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d106      	bne.n	800b59a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 80a2 	beq.w	800b6de <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d075      	beq.n	800b68e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0310 	and.w	r3, r3, #16
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d046      	beq.n	800b63c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b5ae:	f7ff fc40 	bl	800ae32 <LL_RCC_LSI1_IsReady>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d113      	bne.n	800b5e0 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b5b8:	f7ff fc19 	bl	800adee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b5bc:	f7fb f8d8 	bl	8006770 <HAL_GetTick>
 800b5c0:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b5c2:	e008      	b.n	800b5d6 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b5c4:	f7fb f8d4 	bl	8006770 <HAL_GetTick>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d901      	bls.n	800b5d6 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e1d1      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b5d6:	f7ff fc2c 	bl	800ae32 <LL_RCC_LSI1_IsReady>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d0f1      	beq.n	800b5c4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b5e0:	f7ff fc39 	bl	800ae56 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5e4:	f7fb f8c4 	bl	8006770 <HAL_GetTick>
 800b5e8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b5ea:	e008      	b.n	800b5fe <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b5ec:	f7fb f8c0 	bl	8006770 <HAL_GetTick>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d901      	bls.n	800b5fe <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e1bd      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b5fe:	f7ff fc4c 	bl	800ae9a <LL_RCC_LSI2_IsReady>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0f1      	beq.n	800b5ec <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff fc56 	bl	800aebe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b612:	f7ff fbfd 	bl	800ae10 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b616:	f7fb f8ab 	bl	8006770 <HAL_GetTick>
 800b61a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b61c:	e008      	b.n	800b630 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b61e:	f7fb f8a7 	bl	8006770 <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d901      	bls.n	800b630 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e1a4      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b630:	f7ff fbff 	bl	800ae32 <LL_RCC_LSI1_IsReady>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1f1      	bne.n	800b61e <HAL_RCC_OscConfig+0x34e>
 800b63a:	e050      	b.n	800b6de <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b63c:	f7ff fbd7 	bl	800adee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b640:	f7fb f896 	bl	8006770 <HAL_GetTick>
 800b644:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b646:	e00b      	b.n	800b660 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b648:	f7fb f892 	bl	8006770 <HAL_GetTick>
 800b64c:	4602      	mov	r2, r0
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	2b02      	cmp	r3, #2
 800b654:	d904      	bls.n	800b660 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800b656:	2303      	movs	r3, #3
 800b658:	e18f      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
 800b65a:	bf00      	nop
 800b65c:	2000007c 	.word	0x2000007c
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b660:	f7ff fbe7 	bl	800ae32 <LL_RCC_LSI1_IsReady>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0ee      	beq.n	800b648 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b66a:	f7ff fc05 	bl	800ae78 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b66e:	e008      	b.n	800b682 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b670:	f7fb f87e 	bl	8006770 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d901      	bls.n	800b682 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e17b      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b682:	f7ff fc0a 	bl	800ae9a <LL_RCC_LSI2_IsReady>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1f1      	bne.n	800b670 <HAL_RCC_OscConfig+0x3a0>
 800b68c:	e027      	b.n	800b6de <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b68e:	f7ff fbf3 	bl	800ae78 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b692:	f7fb f86d 	bl	8006770 <HAL_GetTick>
 800b696:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b698:	e008      	b.n	800b6ac <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b69a:	f7fb f869 	bl	8006770 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	d901      	bls.n	800b6ac <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e166      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b6ac:	f7ff fbf5 	bl	800ae9a <LL_RCC_LSI2_IsReady>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1f1      	bne.n	800b69a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b6b6:	f7ff fbab 	bl	800ae10 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ba:	f7fb f859 	bl	8006770 <HAL_GetTick>
 800b6be:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b6c0:	e008      	b.n	800b6d4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b6c2:	f7fb f855 	bl	8006770 <HAL_GetTick>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d901      	bls.n	800b6d4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e152      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b6d4:	f7ff fbad 	bl	800ae32 <LL_RCC_LSI1_IsReady>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1f1      	bne.n	800b6c2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0304 	and.w	r3, r3, #4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d05b      	beq.n	800b7a2 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6ea:	4ba6      	ldr	r3, [pc, #664]	; (800b984 <HAL_RCC_OscConfig+0x6b4>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d114      	bne.n	800b720 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b6f6:	f7ff fa2d 	bl	800ab54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6fa:	f7fb f839 	bl	8006770 <HAL_GetTick>
 800b6fe:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b700:	e008      	b.n	800b714 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b702:	f7fb f835 	bl	8006770 <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d901      	bls.n	800b714 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e132      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b714:	4b9b      	ldr	r3, [pc, #620]	; (800b984 <HAL_RCC_OscConfig+0x6b4>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0f0      	beq.n	800b702 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d102      	bne.n	800b72e <HAL_RCC_OscConfig+0x45e>
 800b728:	f7ff fb0b 	bl	800ad42 <LL_RCC_LSE_Enable>
 800b72c:	e00c      	b.n	800b748 <HAL_RCC_OscConfig+0x478>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b05      	cmp	r3, #5
 800b734:	d104      	bne.n	800b740 <HAL_RCC_OscConfig+0x470>
 800b736:	f7ff fb26 	bl	800ad86 <LL_RCC_LSE_EnableBypass>
 800b73a:	f7ff fb02 	bl	800ad42 <LL_RCC_LSE_Enable>
 800b73e:	e003      	b.n	800b748 <HAL_RCC_OscConfig+0x478>
 800b740:	f7ff fb10 	bl	800ad64 <LL_RCC_LSE_Disable>
 800b744:	f7ff fb30 	bl	800ada8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d014      	beq.n	800b77a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b750:	f7fb f80e 	bl	8006770 <HAL_GetTick>
 800b754:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b756:	e00a      	b.n	800b76e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b758:	f7fb f80a 	bl	8006770 <HAL_GetTick>
 800b75c:	4602      	mov	r2, r0
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	f241 3288 	movw	r2, #5000	; 0x1388
 800b766:	4293      	cmp	r3, r2
 800b768:	d901      	bls.n	800b76e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e105      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b76e:	f7ff fb2c 	bl	800adca <LL_RCC_LSE_IsReady>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d0ef      	beq.n	800b758 <HAL_RCC_OscConfig+0x488>
 800b778:	e013      	b.n	800b7a2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b77a:	f7fa fff9 	bl	8006770 <HAL_GetTick>
 800b77e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b780:	e00a      	b.n	800b798 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b782:	f7fa fff5 	bl	8006770 <HAL_GetTick>
 800b786:	4602      	mov	r2, r0
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b790:	4293      	cmp	r3, r2
 800b792:	d901      	bls.n	800b798 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e0f0      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b798:	f7ff fb17 	bl	800adca <LL_RCC_LSE_IsReady>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1ef      	bne.n	800b782 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d02c      	beq.n	800b808 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d014      	beq.n	800b7e0 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b7b6:	f7ff fa90 	bl	800acda <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ba:	f7fa ffd9 	bl	8006770 <HAL_GetTick>
 800b7be:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b7c0:	e008      	b.n	800b7d4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7c2:	f7fa ffd5 	bl	8006770 <HAL_GetTick>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d901      	bls.n	800b7d4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e0d2      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b7d4:	f7ff faa3 	bl	800ad1e <LL_RCC_HSI48_IsReady>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0f1      	beq.n	800b7c2 <HAL_RCC_OscConfig+0x4f2>
 800b7de:	e013      	b.n	800b808 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b7e0:	f7ff fa8c 	bl	800acfc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7e4:	f7fa ffc4 	bl	8006770 <HAL_GetTick>
 800b7e8:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b7ea:	e008      	b.n	800b7fe <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7ec:	f7fa ffc0 	bl	8006770 <HAL_GetTick>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d901      	bls.n	800b7fe <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	e0bd      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b7fe:	f7ff fa8e 	bl	800ad1e <LL_RCC_HSI48_IsReady>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1f1      	bne.n	800b7ec <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 80b3 	beq.w	800b978 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b812:	f7ff fbec 	bl	800afee <LL_RCC_GetSysClkSource>
 800b816:	4603      	mov	r3, r0
 800b818:	2b0c      	cmp	r3, #12
 800b81a:	d076      	beq.n	800b90a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	2b02      	cmp	r3, #2
 800b822:	d14b      	bne.n	800b8bc <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b824:	f7ff fca6 	bl	800b174 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b828:	f7fa ffa2 	bl	8006770 <HAL_GetTick>
 800b82c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800b82e:	e008      	b.n	800b842 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b830:	f7fa ff9e 	bl	8006770 <HAL_GetTick>
 800b834:	4602      	mov	r2, r0
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d901      	bls.n	800b842 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800b83e:	2303      	movs	r3, #3
 800b840:	e09b      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800b842:	f7ff fca6 	bl	800b192 <LL_RCC_PLL_IsReady>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f1      	bne.n	800b830 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b84c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b850:	68da      	ldr	r2, [r3, #12]
 800b852:	4b4d      	ldr	r3, [pc, #308]	; (800b988 <HAL_RCC_OscConfig+0x6b8>)
 800b854:	4013      	ands	r3, r2
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b85e:	4311      	orrs	r1, r2
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b864:	0212      	lsls	r2, r2, #8
 800b866:	4311      	orrs	r1, r2
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b86c:	4311      	orrs	r1, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b872:	4311      	orrs	r1, r2
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b878:	430a      	orrs	r2, r1
 800b87a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b87e:	4313      	orrs	r3, r2
 800b880:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b882:	f7ff fc68 	bl	800b156 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b894:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b896:	f7fa ff6b 	bl	8006770 <HAL_GetTick>
 800b89a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800b89c:	e008      	b.n	800b8b0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b89e:	f7fa ff67 	bl	8006770 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d901      	bls.n	800b8b0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e064      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800b8b0:	f7ff fc6f 	bl	800b192 <LL_RCC_PLL_IsReady>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0f1      	beq.n	800b89e <HAL_RCC_OscConfig+0x5ce>
 800b8ba:	e05d      	b.n	800b978 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8bc:	f7ff fc5a 	bl	800b174 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800b8c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8ca:	f023 0303 	bic.w	r3, r3, #3
 800b8ce:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800b8d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b8da:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800b8de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8e2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e4:	f7fa ff44 	bl	8006770 <HAL_GetTick>
 800b8e8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800b8ea:	e008      	b.n	800b8fe <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8ec:	f7fa ff40 	bl	8006770 <HAL_GetTick>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d901      	bls.n	800b8fe <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e03d      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800b8fe:	f7ff fc48 	bl	800b192 <LL_RCC_PLL_IsReady>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f1      	bne.n	800b8ec <HAL_RCC_OscConfig+0x61c>
 800b908:	e036      	b.n	800b978 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d101      	bne.n	800b916 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e031      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800b916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f003 0203 	and.w	r2, r3, #3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b928:	429a      	cmp	r2, r3
 800b92a:	d123      	bne.n	800b974 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b936:	429a      	cmp	r2, r3
 800b938:	d11c      	bne.n	800b974 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	0a1b      	lsrs	r3, r3, #8
 800b93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b946:	429a      	cmp	r2, r3
 800b948:	d114      	bne.n	800b974 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b954:	429a      	cmp	r2, r3
 800b956:	d10d      	bne.n	800b974 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b962:	429a      	cmp	r2, r3
 800b964:	d106      	bne.n	800b974 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b970:	429a      	cmp	r2, r3
 800b972:	d001      	beq.n	800b978 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	372c      	adds	r7, #44	; 0x2c
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd90      	pop	{r4, r7, pc}
 800b982:	bf00      	nop
 800b984:	58000400 	.word	0x58000400
 800b988:	11c1808c 	.word	0x11c1808c

0800b98c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d101      	bne.n	800b9a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e12a      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9a0:	4b97      	ldr	r3, [pc, #604]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0307 	and.w	r3, r3, #7
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d91b      	bls.n	800b9e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ae:	4b94      	ldr	r3, [pc, #592]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f023 0207 	bic.w	r2, r3, #7
 800b9b6:	4992      	ldr	r1, [pc, #584]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9be:	f7fa fed7 	bl	8006770 <HAL_GetTick>
 800b9c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9c4:	e008      	b.n	800b9d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b9c6:	f7fa fed3 	bl	8006770 <HAL_GetTick>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d901      	bls.n	800b9d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	e10e      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9d8:	4b89      	ldr	r3, [pc, #548]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0307 	and.w	r3, r3, #7
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d1ef      	bne.n	800b9c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d016      	beq.n	800ba20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff fb05 	bl	800b006 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b9fc:	f7fa feb8 	bl	8006770 <HAL_GetTick>
 800ba00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ba02:	e008      	b.n	800ba16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba04:	f7fa feb4 	bl	8006770 <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d901      	bls.n	800ba16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e0ef      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ba16:	f7ff fbff 	bl	800b218 <LL_RCC_IsActiveFlag_HPRE>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0f1      	beq.n	800ba04 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 0320 	and.w	r3, r3, #32
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d016      	beq.n	800ba5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fafc 	bl	800b02e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ba36:	f7fa fe9b 	bl	8006770 <HAL_GetTick>
 800ba3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ba3c:	e008      	b.n	800ba50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba3e:	f7fa fe97 	bl	8006770 <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d901      	bls.n	800ba50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e0d2      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ba50:	f7ff fbf4 	bl	800b23c <LL_RCC_IsActiveFlag_C2HPRE>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0f1      	beq.n	800ba3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d016      	beq.n	800ba94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff faf5 	bl	800b05a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ba70:	f7fa fe7e 	bl	8006770 <HAL_GetTick>
 800ba74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ba76:	e008      	b.n	800ba8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba78:	f7fa fe7a 	bl	8006770 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d901      	bls.n	800ba8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e0b5      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ba8a:	f7ff fbea 	bl	800b262 <LL_RCC_IsActiveFlag_SHDHPRE>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d0f1      	beq.n	800ba78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d016      	beq.n	800bace <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff faef 	bl	800b088 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800baaa:	f7fa fe61 	bl	8006770 <HAL_GetTick>
 800baae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bab0:	e008      	b.n	800bac4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bab2:	f7fa fe5d 	bl	8006770 <HAL_GetTick>
 800bab6:	4602      	mov	r2, r0
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	2b02      	cmp	r3, #2
 800babe:	d901      	bls.n	800bac4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800bac0:	2303      	movs	r3, #3
 800bac2:	e098      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bac4:	f7ff fbe0 	bl	800b288 <LL_RCC_IsActiveFlag_PPRE1>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0f1      	beq.n	800bab2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 0308 	and.w	r3, r3, #8
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d017      	beq.n	800bb0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fae5 	bl	800b0b0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bae6:	f7fa fe43 	bl	8006770 <HAL_GetTick>
 800baea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800baec:	e008      	b.n	800bb00 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800baee:	f7fa fe3f 	bl	8006770 <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d901      	bls.n	800bb00 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e07a      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bb00:	f7ff fbd4 	bl	800b2ac <LL_RCC_IsActiveFlag_PPRE2>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0f1      	beq.n	800baee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d043      	beq.n	800bb9e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d106      	bne.n	800bb2c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800bb1e:	f7ff f885 	bl	800ac2c <LL_RCC_HSE_IsReady>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d11e      	bne.n	800bb66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e064      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d106      	bne.n	800bb42 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800bb34:	f7ff fb2d 	bl	800b192 <LL_RCC_PLL_IsReady>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d113      	bne.n	800bb66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e059      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800bb4a:	f7ff f9ed 	bl	800af28 <LL_RCC_MSI_IsReady>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d108      	bne.n	800bb66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e04e      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800bb58:	f7ff f898 	bl	800ac8c <LL_RCC_HSI_IsReady>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e047      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff fa2b 	bl	800afc6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb70:	f7fa fdfe 	bl	8006770 <HAL_GetTick>
 800bb74:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb76:	e00a      	b.n	800bb8e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb78:	f7fa fdfa 	bl	8006770 <HAL_GetTick>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d901      	bls.n	800bb8e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e033      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb8e:	f7ff fa2e 	bl	800afee <LL_RCC_GetSysClkSource>
 800bb92:	4602      	mov	r2, r0
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d1ec      	bne.n	800bb78 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb9e:	4b18      	ldr	r3, [pc, #96]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0307 	and.w	r3, r3, #7
 800bba6:	683a      	ldr	r2, [r7, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d21b      	bcs.n	800bbe4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbac:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f023 0207 	bic.w	r2, r3, #7
 800bbb4:	4912      	ldr	r1, [pc, #72]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbbc:	f7fa fdd8 	bl	8006770 <HAL_GetTick>
 800bbc0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbc2:	e008      	b.n	800bbd6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bbc4:	f7fa fdd4 	bl	8006770 <HAL_GetTick>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d901      	bls.n	800bbd6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	e00f      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbd6:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <HAL_RCC_ClockConfig+0x274>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d1ef      	bne.n	800bbc4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800bbe4:	f7f9 ff16 	bl	8005a14 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800bbe8:	f7fa fdce 	bl	8006788 <HAL_GetTickPrio>
 800bbec:	4603      	mov	r3, r0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7f9 fc0a 	bl	8005408 <HAL_InitTick>
 800bbf4:	4603      	mov	r3, r0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	58004000 	.word	0x58004000

0800bc04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc04:	b590      	push	{r4, r7, lr}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc0a:	f7ff f9f0 	bl	800afee <LL_RCC_GetSysClkSource>
 800bc0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10a      	bne.n	800bc2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bc16:	f7ff f9ac 	bl	800af72 <LL_RCC_MSI_GetRange>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	091b      	lsrs	r3, r3, #4
 800bc1e:	f003 030f 	and.w	r3, r3, #15
 800bc22:	4a2a      	ldr	r2, [pc, #168]	; (800bccc <HAL_RCC_GetSysClockFreq+0xc8>)
 800bc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc28:	60fb      	str	r3, [r7, #12]
 800bc2a:	e04a      	b.n	800bcc2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d102      	bne.n	800bc38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bc32:	4b27      	ldr	r3, [pc, #156]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	e044      	b.n	800bcc2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b08      	cmp	r3, #8
 800bc3c:	d10a      	bne.n	800bc54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bc3e:	f7fe ffa7 	bl	800ab90 <LL_RCC_HSE_IsEnabledDiv2>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d102      	bne.n	800bc4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800bc48:	4b21      	ldr	r3, [pc, #132]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	e039      	b.n	800bcc2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800bc4e:	4b21      	ldr	r3, [pc, #132]	; (800bcd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e036      	b.n	800bcc2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800bc54:	f7ff fad4 	bl	800b200 <LL_RCC_PLL_GetMainSource>
 800bc58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d002      	beq.n	800bc66 <HAL_RCC_GetSysClockFreq+0x62>
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d003      	beq.n	800bc6c <HAL_RCC_GetSysClockFreq+0x68>
 800bc64:	e00d      	b.n	800bc82 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800bc66:	4b1a      	ldr	r3, [pc, #104]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bc68:	60bb      	str	r3, [r7, #8]
        break;
 800bc6a:	e015      	b.n	800bc98 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bc6c:	f7fe ff90 	bl	800ab90 <LL_RCC_HSE_IsEnabledDiv2>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d102      	bne.n	800bc7c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800bc76:	4b16      	ldr	r3, [pc, #88]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bc78:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800bc7a:	e00d      	b.n	800bc98 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800bc7c:	4b15      	ldr	r3, [pc, #84]	; (800bcd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800bc7e:	60bb      	str	r3, [r7, #8]
        break;
 800bc80:	e00a      	b.n	800bc98 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bc82:	f7ff f976 	bl	800af72 <LL_RCC_MSI_GetRange>
 800bc86:	4603      	mov	r3, r0
 800bc88:	091b      	lsrs	r3, r3, #4
 800bc8a:	f003 030f 	and.w	r3, r3, #15
 800bc8e:	4a0f      	ldr	r2, [pc, #60]	; (800bccc <HAL_RCC_GetSysClockFreq+0xc8>)
 800bc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc94:	60bb      	str	r3, [r7, #8]
        break;
 800bc96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800bc98:	f7ff fa8d 	bl	800b1b6 <LL_RCC_PLL_GetN>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	fb03 f402 	mul.w	r4, r3, r2
 800bca4:	f7ff faa0 	bl	800b1e8 <LL_RCC_PLL_GetDivider>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	091b      	lsrs	r3, r3, #4
 800bcac:	3301      	adds	r3, #1
 800bcae:	fbb4 f4f3 	udiv	r4, r4, r3
 800bcb2:	f7ff fa8d 	bl	800b1d0 <LL_RCC_PLL_GetR>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	0f5b      	lsrs	r3, r3, #29
 800bcba:	3301      	adds	r3, #1
 800bcbc:	fbb4 f3f3 	udiv	r3, r4, r3
 800bcc0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd90      	pop	{r4, r7, pc}
 800bccc:	08017914 	.word	0x08017914
 800bcd0:	00f42400 	.word	0x00f42400
 800bcd4:	01e84800 	.word	0x01e84800

0800bcd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bcd8:	b598      	push	{r3, r4, r7, lr}
 800bcda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800bcdc:	f7ff ff92 	bl	800bc04 <HAL_RCC_GetSysClockFreq>
 800bce0:	4604      	mov	r4, r0
 800bce2:	f7ff f9f9 	bl	800b0d8 <LL_RCC_GetAHBPrescaler>
 800bce6:	4603      	mov	r3, r0
 800bce8:	091b      	lsrs	r3, r3, #4
 800bcea:	f003 030f 	and.w	r3, r3, #15
 800bcee:	4a03      	ldr	r2, [pc, #12]	; (800bcfc <HAL_RCC_GetHCLKFreq+0x24>)
 800bcf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcf4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	bd98      	pop	{r3, r4, r7, pc}
 800bcfc:	080178b4 	.word	0x080178b4

0800bd00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd00:	b598      	push	{r3, r4, r7, lr}
 800bd02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800bd04:	f7ff ffe8 	bl	800bcd8 <HAL_RCC_GetHCLKFreq>
 800bd08:	4604      	mov	r4, r0
 800bd0a:	f7ff fa18 	bl	800b13e <LL_RCC_GetAPB2Prescaler>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	0adb      	lsrs	r3, r3, #11
 800bd12:	f003 0307 	and.w	r3, r3, #7
 800bd16:	4a04      	ldr	r2, [pc, #16]	; (800bd28 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd1c:	f003 031f 	and.w	r3, r3, #31
 800bd20:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	bd98      	pop	{r3, r4, r7, pc}
 800bd28:	080178f4 	.word	0x080178f4

0800bd2c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	226f      	movs	r2, #111	; 0x6f
 800bd3a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800bd3c:	f7ff f957 	bl	800afee <LL_RCC_GetSysClkSource>
 800bd40:	4602      	mov	r2, r0
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800bd46:	f7ff f9c7 	bl	800b0d8 <LL_RCC_GetAHBPrescaler>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800bd50:	f7ff f9e9 	bl	800b126 <LL_RCC_GetAPB1Prescaler>
 800bd54:	4602      	mov	r2, r0
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800bd5a:	f7ff f9f0 	bl	800b13e <LL_RCC_GetAPB2Prescaler>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800bd64:	f7ff f9c4 	bl	800b0f0 <LL_C2_RCC_GetAHBPrescaler>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800bd6e:	f7ff f9cc 	bl	800b10a <LL_RCC_GetAHB4Prescaler>
 800bd72:	4602      	mov	r2, r0
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800bd78:	4b04      	ldr	r3, [pc, #16]	; (800bd8c <HAL_RCC_GetClockConfig+0x60>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 0207 	and.w	r2, r3, #7
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	58004000 	.word	0x58004000

0800bd90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800bd90:	b590      	push	{r4, r7, lr}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2bb0      	cmp	r3, #176	; 0xb0
 800bd9c:	d903      	bls.n	800bda6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800bd9e:	4b15      	ldr	r3, [pc, #84]	; (800bdf4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda2:	60fb      	str	r3, [r7, #12]
 800bda4:	e007      	b.n	800bdb6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	091b      	lsrs	r3, r3, #4
 800bdaa:	f003 030f 	and.w	r3, r3, #15
 800bdae:	4a11      	ldr	r2, [pc, #68]	; (800bdf4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdb4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800bdb6:	f7ff f9a8 	bl	800b10a <LL_RCC_GetAHB4Prescaler>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	091b      	lsrs	r3, r3, #4
 800bdbe:	f003 030f 	and.w	r3, r3, #15
 800bdc2:	4a0d      	ldr	r2, [pc, #52]	; (800bdf8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800bdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	4a0a      	ldr	r2, [pc, #40]	; (800bdfc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800bdd4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd8:	0c9c      	lsrs	r4, r3, #18
 800bdda:	f7fe fecb 	bl	800ab74 <HAL_PWREx_GetVoltageRange>
 800bdde:	4603      	mov	r3, r0
 800bde0:	4619      	mov	r1, r3
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 f80c 	bl	800be00 <RCC_SetFlashLatency>
 800bde8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd90      	pop	{r4, r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	08017914 	.word	0x08017914
 800bdf8:	080178b4 	.word	0x080178b4
 800bdfc:	431bde83 	.word	0x431bde83

0800be00 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800be00:	b590      	push	{r4, r7, lr}
 800be02:	b093      	sub	sp, #76	; 0x4c
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800be0a:	4b39      	ldr	r3, [pc, #228]	; (800bef0 <RCC_SetFlashLatency+0xf0>)
 800be0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800be10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800be16:	4a37      	ldr	r2, [pc, #220]	; (800bef4 <RCC_SetFlashLatency+0xf4>)
 800be18:	f107 031c 	add.w	r3, r7, #28
 800be1c:	ca07      	ldmia	r2, {r0, r1, r2}
 800be1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800be22:	4b35      	ldr	r3, [pc, #212]	; (800bef8 <RCC_SetFlashLatency+0xf8>)
 800be24:	f107 040c 	add.w	r4, r7, #12
 800be28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800be2e:	2300      	movs	r3, #0
 800be30:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be38:	d11c      	bne.n	800be74 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800be3a:	2300      	movs	r3, #0
 800be3c:	643b      	str	r3, [r7, #64]	; 0x40
 800be3e:	e015      	b.n	800be6c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800be40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800be48:	4413      	add	r3, r2
 800be4a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	429a      	cmp	r2, r3
 800be52:	d808      	bhi.n	800be66 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800be54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800be5c:	4413      	add	r3, r2
 800be5e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800be62:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800be64:	e022      	b.n	800beac <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800be66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be68:	3301      	adds	r3, #1
 800be6a:	643b      	str	r3, [r7, #64]	; 0x40
 800be6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be6e:	2b03      	cmp	r3, #3
 800be70:	d9e6      	bls.n	800be40 <RCC_SetFlashLatency+0x40>
 800be72:	e01b      	b.n	800beac <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800be74:	2300      	movs	r3, #0
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be78:	e015      	b.n	800bea6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800be7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800be82:	4413      	add	r3, r2
 800be84:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d808      	bhi.n	800bea0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800be8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800be96:	4413      	add	r3, r2
 800be98:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800be9c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800be9e:	e005      	b.n	800beac <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea2:	3301      	adds	r3, #1
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d9e6      	bls.n	800be7a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800beac:	4b13      	ldr	r3, [pc, #76]	; (800befc <RCC_SetFlashLatency+0xfc>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f023 0207 	bic.w	r2, r3, #7
 800beb4:	4911      	ldr	r1, [pc, #68]	; (800befc <RCC_SetFlashLatency+0xfc>)
 800beb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beb8:	4313      	orrs	r3, r2
 800beba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bebc:	f7fa fc58 	bl	8006770 <HAL_GetTick>
 800bec0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bec2:	e008      	b.n	800bed6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bec4:	f7fa fc54 	bl	8006770 <HAL_GetTick>
 800bec8:	4602      	mov	r2, r0
 800beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d901      	bls.n	800bed6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800bed2:	2303      	movs	r3, #3
 800bed4:	e007      	b.n	800bee6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bed6:	4b09      	ldr	r3, [pc, #36]	; (800befc <RCC_SetFlashLatency+0xfc>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0307 	and.w	r3, r3, #7
 800bede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d1ef      	bne.n	800bec4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	374c      	adds	r7, #76	; 0x4c
 800beea:	46bd      	mov	sp, r7
 800beec:	bd90      	pop	{r4, r7, pc}
 800beee:	bf00      	nop
 800bef0:	0801729c 	.word	0x0801729c
 800bef4:	080172ac 	.word	0x080172ac
 800bef8:	080172b8 	.word	0x080172b8
 800befc:	58004000 	.word	0x58004000

0800bf00 <LL_RCC_LSE_IsEnabled>:
{
 800bf00:	b480      	push	{r7}
 800bf02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bf04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf0c:	f003 0301 	and.w	r3, r3, #1
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d101      	bne.n	800bf18 <LL_RCC_LSE_IsEnabled+0x18>
 800bf14:	2301      	movs	r3, #1
 800bf16:	e000      	b.n	800bf1a <LL_RCC_LSE_IsEnabled+0x1a>
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <LL_RCC_LSE_IsReady>:
{
 800bf24:	b480      	push	{r7}
 800bf26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bf28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf30:	f003 0302 	and.w	r3, r3, #2
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d101      	bne.n	800bf3c <LL_RCC_LSE_IsReady+0x18>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e000      	b.n	800bf3e <LL_RCC_LSE_IsReady+0x1a>
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <LL_RCC_SetRFWKPClockSource>:
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800bf50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bf5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <LL_RCC_SetSMPSClockSource>:
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bf7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	f023 0203 	bic.w	r2, r3, #3
 800bf86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <LL_RCC_SetSMPSPrescaler>:
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bfa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfaa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bfae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <LL_RCC_SetUSARTClockSource>:
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bfcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfd4:	f023 0203 	bic.w	r2, r3, #3
 800bfd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <LL_RCC_SetLPUARTClockSource>:
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c000:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <LL_RCC_SetI2CClockSource>:
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c028:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	091b      	lsrs	r3, r3, #4
 800c030:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c034:	43db      	mvns	r3, r3
 800c036:	401a      	ands	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800c040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c044:	4313      	orrs	r3, r2
 800c046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c04a:	bf00      	nop
 800c04c:	370c      	adds	r7, #12
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <LL_RCC_SetLPTIMClockSource>:
{
 800c056:	b480      	push	{r7}
 800c058:	b083      	sub	sp, #12
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c05e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c062:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	0c1b      	lsrs	r3, r3, #16
 800c06a:	041b      	lsls	r3, r3, #16
 800c06c:	43db      	mvns	r3, r3
 800c06e:	401a      	ands	r2, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	041b      	lsls	r3, r3, #16
 800c074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c078:	4313      	orrs	r3, r2
 800c07a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c07e:	bf00      	nop
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <LL_RCC_SetSAIClockSource>:
{
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c09a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c09e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c0aa:	bf00      	nop
 800c0ac:	370c      	adds	r7, #12
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <LL_RCC_SetRNGClockSource>:
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b083      	sub	sp, #12
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c0be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c0ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <LL_RCC_SetCLK48ClockSource>:
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b083      	sub	sp, #12
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c0ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c0f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <LL_RCC_SetUSBClockSource>:
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b082      	sub	sp, #8
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff ffe3 	bl	800c0e2 <LL_RCC_SetCLK48ClockSource>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <LL_RCC_SetADCClockSource>:
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c12c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c134:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4313      	orrs	r3, r2
 800c140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <LL_RCC_SetRTCClockSource>:
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <LL_RCC_GetRTCClockSource>:
{
 800c17c:	b480      	push	{r7}
 800c17e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c188:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <LL_RCC_ForceBackupDomainReset>:
{
 800c196:	b480      	push	{r7}
 800c198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c19a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c1ae:	bf00      	nop
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c1bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c1d0:	bf00      	nop
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <LL_RCC_PLLSAI1_Enable>:
{
 800c1da:	b480      	push	{r7}
 800c1dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c1de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1ec:	6013      	str	r3, [r2, #0]
}
 800c1ee:	bf00      	nop
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <LL_RCC_PLLSAI1_Disable>:
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c1fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c20a:	6013      	str	r3, [r2, #0]
}
 800c20c:	bf00      	nop
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <LL_RCC_PLLSAI1_IsReady>:
{
 800c216:	b480      	push	{r7}
 800c218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c21a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c228:	d101      	bne.n	800c22e <LL_RCC_PLLSAI1_IsReady+0x18>
 800c22a:	2301      	movs	r3, #1
 800c22c:	e000      	b.n	800c230 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b088      	sub	sp, #32
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c242:	2300      	movs	r3, #0
 800c244:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c246:	2300      	movs	r3, #0
 800c248:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c252:	2b00      	cmp	r3, #0
 800c254:	d033      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c25e:	d00c      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x40>
 800c260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c264:	d802      	bhi.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x32>
 800c266:	2b00      	cmp	r3, #0
 800c268:	d010      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c26a:	e017      	b.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x62>
 800c26c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c270:	d017      	beq.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800c272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c276:	d016      	beq.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800c278:	e010      	b.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800c27a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c288:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c28a:	e00d      	b.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3304      	adds	r3, #4
 800c290:	4618      	mov	r0, r3
 800c292:	f000 f947 	bl	800c524 <RCCEx_PLLSAI1_ConfigNP>
 800c296:	4603      	mov	r3, r0
 800c298:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c29a:	e005      	b.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	77fb      	strb	r3, [r7, #31]
        break;
 800c2a0:	e002      	b.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800c2a2:	bf00      	nop
 800c2a4:	e000      	b.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800c2a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2a8:	7ffb      	ldrb	r3, [r7, #31]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d105      	bne.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fee9 	bl	800c08a <LL_RCC_SetSAIClockSource>
 800c2b8:	e001      	b.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ba:	7ffb      	ldrb	r3, [r7, #31]
 800c2bc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d046      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c2ca:	f7ff ff57 	bl	800c17c <LL_RCC_GetRTCClockSource>
 800c2ce:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d03c      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c2da:	f7fe fc3b 	bl	800ab54 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d105      	bne.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7ff ff31 	bl	800c150 <LL_RCC_SetRTCClockSource>
 800c2ee:	e02e      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c2f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2f8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c2fa:	f7ff ff4c 	bl	800c196 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c2fe:	f7ff ff5b 	bl	800c1b8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30c:	4313      	orrs	r3, r2
 800c30e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c31a:	f7ff fdf1 	bl	800bf00 <LL_RCC_LSE_IsEnabled>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b01      	cmp	r3, #1
 800c322:	d114      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c324:	f7fa fa24 	bl	8006770 <HAL_GetTick>
 800c328:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c32a:	e00b      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c32c:	f7fa fa20 	bl	8006770 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	f241 3288 	movw	r2, #5000	; 0x1388
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d902      	bls.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	77fb      	strb	r3, [r7, #31]
              break;
 800c342:	e004      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c344:	f7ff fdee 	bl	800bf24 <LL_RCC_LSE_IsReady>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d1ee      	bne.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c34e:	7ffb      	ldrb	r3, [r7, #31]
 800c350:	77bb      	strb	r3, [r7, #30]
 800c352:	e001      	b.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c354:	7ffb      	ldrb	r3, [r7, #31]
 800c356:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff fe2b 	bl	800bfc4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 0302 	and.w	r3, r3, #2
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	69db      	ldr	r3, [r3, #28]
 800c37e:	4618      	mov	r0, r3
 800c380:	f7ff fe36 	bl	800bff0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0310 	and.w	r3, r3, #16
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d004      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff fe5e 	bl	800c056 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0320 	and.w	r3, r3, #32
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d004      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fe53 	bl	800c056 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d004      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff fe2b 	bl	800c01c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 0308 	and.w	r3, r3, #8
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d004      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fe20 	bl	800c01c <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d022      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7ff fe8e 	bl	800c10e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3fa:	d107      	bne.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c3fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c40a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c414:	d10b      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3304      	adds	r3, #4
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 f8dd 	bl	800c5da <RCCEx_PLLSAI1_ConfigNQ>
 800c420:	4603      	mov	r3, r0
 800c422:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c424:	7ffb      	ldrb	r3, [r7, #31]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 800c42a:	7ffb      	ldrb	r3, [r7, #31]
 800c42c:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c436:	2b00      	cmp	r3, #0
 800c438:	d02b      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c442:	d008      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c44c:	d003      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c452:	2b00      	cmp	r3, #0
 800c454:	d105      	bne.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff fe2b 	bl	800c0b6 <LL_RCC_SetRNGClockSource>
 800c460:	e00a      	b.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c46a:	60fb      	str	r3, [r7, #12]
 800c46c:	2000      	movs	r0, #0
 800c46e:	f7ff fe22 	bl	800c0b6 <LL_RCC_SetRNGClockSource>
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f7ff fe35 	bl	800c0e2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800c480:	d107      	bne.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c48c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c490:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d022      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff fe3e 	bl	800c124 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4b0:	d107      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c4b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c4bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4c0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4ca:	d10b      	bne.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 f8dd 	bl	800c690 <RCCEx_PLLSAI1_ConfigNR>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c4da:	7ffb      	ldrb	r3, [r7, #31]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800c4e0:	7ffb      	ldrb	r3, [r7, #31]
 800c4e2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d004      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff fd27 	bl	800bf48 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d009      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fd46 	bl	800bf9c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff fd2d 	bl	800bf74 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 800c51a:	7fbb      	ldrb	r3, [r7, #30]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3720      	adds	r7, #32
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c530:	f7ff fe62 	bl	800c1f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c534:	f7fa f91c 	bl	8006770 <HAL_GetTick>
 800c538:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c53a:	e009      	b.n	800c550 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c53c:	f7fa f918 	bl	8006770 <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	2b02      	cmp	r3, #2
 800c548:	d902      	bls.n	800c550 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	73fb      	strb	r3, [r7, #15]
      break;
 800c54e:	e004      	b.n	800c55a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c550:	f7ff fe61 	bl	800c216 <LL_RCC_PLLSAI1_IsReady>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1f0      	bne.n	800c53c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d137      	bne.n	800c5d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	021b      	lsls	r3, r3, #8
 800c570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c574:	4313      	orrs	r3, r2
 800c576:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c58a:	4313      	orrs	r3, r2
 800c58c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c58e:	f7ff fe24 	bl	800c1da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c592:	f7fa f8ed 	bl	8006770 <HAL_GetTick>
 800c596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c598:	e009      	b.n	800c5ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c59a:	f7fa f8e9 	bl	8006770 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d902      	bls.n	800c5ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	73fb      	strb	r3, [r7, #15]
        break;
 800c5ac:	e004      	b.n	800c5b8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c5ae:	f7ff fe32 	bl	800c216 <LL_RCC_PLLSAI1_IsReady>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d1f0      	bne.n	800c59a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d108      	bne.n	800c5d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c5be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5c2:	691a      	ldr	r2, [r3, #16]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c5e6:	f7ff fe07 	bl	800c1f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c5ea:	f7fa f8c1 	bl	8006770 <HAL_GetTick>
 800c5ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c5f0:	e009      	b.n	800c606 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c5f2:	f7fa f8bd 	bl	8006770 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d902      	bls.n	800c606 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	73fb      	strb	r3, [r7, #15]
      break;
 800c604:	e004      	b.n	800c610 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c606:	f7ff fe06 	bl	800c216 <LL_RCC_PLLSAI1_IsReady>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1f0      	bne.n	800c5f2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d137      	bne.n	800c686 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	021b      	lsls	r3, r3, #8
 800c626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c62a:	4313      	orrs	r3, r2
 800c62c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c62e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c640:	4313      	orrs	r3, r2
 800c642:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c644:	f7ff fdc9 	bl	800c1da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c648:	f7fa f892 	bl	8006770 <HAL_GetTick>
 800c64c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c64e:	e009      	b.n	800c664 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c650:	f7fa f88e 	bl	8006770 <HAL_GetTick>
 800c654:	4602      	mov	r2, r0
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d902      	bls.n	800c664 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c65e:	2303      	movs	r3, #3
 800c660:	73fb      	strb	r3, [r7, #15]
        break;
 800c662:	e004      	b.n	800c66e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c664:	f7ff fdd7 	bl	800c216 <LL_RCC_PLLSAI1_IsReady>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d1f0      	bne.n	800c650 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d108      	bne.n	800c686 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c678:	691a      	ldr	r2, [r3, #16]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c682:	4313      	orrs	r3, r2
 800c684:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c686:	7bfb      	ldrb	r3, [r7, #15]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c69c:	f7ff fdac 	bl	800c1f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6a0:	f7fa f866 	bl	8006770 <HAL_GetTick>
 800c6a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c6a6:	e009      	b.n	800c6bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c6a8:	f7fa f862 	bl	8006770 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d902      	bls.n	800c6bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c6ba:	e004      	b.n	800c6c6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c6bc:	f7ff fdab 	bl	800c216 <LL_RCC_PLLSAI1_IsReady>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1f0      	bne.n	800c6a8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d137      	bne.n	800c73c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c6cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	021b      	lsls	r3, r3, #8
 800c6dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c6e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c6fa:	f7ff fd6e 	bl	800c1da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6fe:	f7fa f837 	bl	8006770 <HAL_GetTick>
 800c702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c704:	e009      	b.n	800c71a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c706:	f7fa f833 	bl	8006770 <HAL_GetTick>
 800c70a:	4602      	mov	r2, r0
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	2b02      	cmp	r3, #2
 800c712:	d902      	bls.n	800c71a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c714:	2303      	movs	r3, #3
 800c716:	73fb      	strb	r3, [r7, #15]
        break;
 800c718:	e004      	b.n	800c724 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c71a:	f7ff fd7c 	bl	800c216 <LL_RCC_PLLSAI1_IsReady>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b01      	cmp	r3, #1
 800c722:	d1f0      	bne.n	800c706 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d108      	bne.n	800c73c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c72a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c72e:	691a      	ldr	r2, [r3, #16]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c738:	4313      	orrs	r3, r2
 800c73a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b082      	sub	sp, #8
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d101      	bne.n	800c758 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c754:	2301      	movs	r3, #1
 800c756:	e090      	b.n	800c87a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d106      	bne.n	800c772 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7f8 fc1d 	bl	8004fac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2202      	movs	r2, #2
 800c776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	22ca      	movs	r2, #202	; 0xca
 800c780:	625a      	str	r2, [r3, #36]	; 0x24
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2253      	movs	r2, #83	; 0x53
 800c788:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 faba 	bl	800cd04 <RTC_EnterInitMode>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d009      	beq.n	800c7aa <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	22ff      	movs	r2, #255	; 0xff
 800c79c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2204      	movs	r2, #4
 800c7a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e067      	b.n	800c87a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	6812      	ldr	r2, [r2, #0]
 800c7b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	6899      	ldr	r1, [r3, #8]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685a      	ldr	r2, [r3, #4]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	68d2      	ldr	r2, [r2, #12]
 800c7e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	6919      	ldr	r1, [r3, #16]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	041a      	lsls	r2, r3, #16
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68da      	ldr	r2, [r3, #12]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c808:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f022 0203 	bic.w	r2, r2, #3
 800c818:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	69da      	ldr	r2, [r3, #28]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	695b      	ldr	r3, [r3, #20]
 800c828:	431a      	orrs	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	430a      	orrs	r2, r1
 800c830:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f003 0320 	and.w	r3, r3, #32
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d113      	bne.n	800c868 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fa39 	bl	800ccb8 <HAL_RTC_WaitForSynchro>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00d      	beq.n	800c868 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	22ff      	movs	r2, #255	; 0xff
 800c852:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2204      	movs	r2, #4
 800c858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e008      	b.n	800c87a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	22ff      	movs	r2, #255	; 0xff
 800c86e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800c878:	2300      	movs	r3, #0
  }
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c882:	b590      	push	{r4, r7, lr}
 800c884:	b087      	sub	sp, #28
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d101      	bne.n	800c89c <HAL_RTC_SetTime+0x1a>
 800c898:	2302      	movs	r3, #2
 800c89a:	e0b2      	b.n	800ca02 <HAL_RTC_SetTime+0x180>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d126      	bne.n	800c900 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d102      	bne.n	800c8c6 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 fa44 	bl	800cd58 <RTC_ByteToBcd2>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	785b      	ldrb	r3, [r3, #1]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 fa3d 	bl	800cd58 <RTC_ByteToBcd2>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c8e2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	789b      	ldrb	r3, [r3, #2]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f000 fa35 	bl	800cd58 <RTC_ByteToBcd2>
 800c8ee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c8f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	78db      	ldrb	r3, [r3, #3]
 800c8f8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	617b      	str	r3, [r7, #20]
 800c8fe:	e018      	b.n	800c932 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d102      	bne.n	800c914 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2200      	movs	r2, #0
 800c912:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	785b      	ldrb	r3, [r3, #1]
 800c91e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c920:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c926:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	78db      	ldrb	r3, [r3, #3]
 800c92c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c92e:	4313      	orrs	r3, r2
 800c930:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	22ca      	movs	r2, #202	; 0xca
 800c938:	625a      	str	r2, [r3, #36]	; 0x24
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2253      	movs	r2, #83	; 0x53
 800c940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 f9de 	bl	800cd04 <RTC_EnterInitMode>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00d      	beq.n	800c96a <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	22ff      	movs	r2, #255	; 0xff
 800c954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2204      	movs	r2, #4
 800c95a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e04b      	b.n	800ca02 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c974:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c978:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	689a      	ldr	r2, [r3, #8]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c988:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6899      	ldr	r1, [r3, #8]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	431a      	orrs	r2, r3
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	430a      	orrs	r2, r1
 800c9a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68da      	ldr	r2, [r3, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f003 0320 	and.w	r3, r3, #32
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d113      	bne.n	800c9e8 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 f979 	bl	800ccb8 <HAL_RTC_WaitForSynchro>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00d      	beq.n	800c9e8 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	22ff      	movs	r2, #255	; 0xff
 800c9d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2204      	movs	r2, #4
 800c9d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e00c      	b.n	800ca02 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	22ff      	movs	r2, #255	; 0xff
 800c9ee:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800ca00:	2300      	movs	r3, #0
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd90      	pop	{r4, r7, pc}

0800ca0a <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b086      	sub	sp, #24
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	60b9      	str	r1, [r7, #8]
 800ca14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca38:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	0c1b      	lsrs	r3, r3, #16
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	0a1b      	lsrs	r3, r3, #8
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	0c1b      	lsrs	r3, r3, #16
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d11a      	bne.n	800cab8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f986 	bl	800cd98 <RTC_Bcd2ToByte>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	461a      	mov	r2, r3
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	785b      	ldrb	r3, [r3, #1]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 f97d 	bl	800cd98 <RTC_Bcd2ToByte>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	461a      	mov	r2, r3
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	789b      	ldrb	r3, [r3, #2]
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 f974 	bl	800cd98 <RTC_Bcd2ToByte>
 800cab0:	4603      	mov	r3, r0
 800cab2:	461a      	mov	r2, r3
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cac2:	b590      	push	{r4, r7, lr}
 800cac4:	b087      	sub	sp, #28
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	60f8      	str	r0, [r7, #12]
 800caca:	60b9      	str	r1, [r7, #8]
 800cacc:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d101      	bne.n	800cadc <HAL_RTC_SetDate+0x1a>
 800cad8:	2302      	movs	r3, #2
 800cada:	e09c      	b.n	800cc16 <HAL_RTC_SetDate+0x154>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2202      	movs	r2, #2
 800cae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10e      	bne.n	800cb10 <HAL_RTC_SetDate+0x4e>
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	785b      	ldrb	r3, [r3, #1]
 800caf6:	f003 0310 	and.w	r3, r3, #16
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d008      	beq.n	800cb10 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	785b      	ldrb	r3, [r3, #1]
 800cb02:	f023 0310 	bic.w	r3, r3, #16
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	330a      	adds	r3, #10
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d11c      	bne.n	800cb50 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	78db      	ldrb	r3, [r3, #3]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 f91c 	bl	800cd58 <RTC_ByteToBcd2>
 800cb20:	4603      	mov	r3, r0
 800cb22:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 f915 	bl	800cd58 <RTC_ByteToBcd2>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb32:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	789b      	ldrb	r3, [r3, #2]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 f90d 	bl	800cd58 <RTC_ByteToBcd2>
 800cb3e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cb40:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	617b      	str	r3, [r7, #20]
 800cb4e:	e00e      	b.n	800cb6e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	78db      	ldrb	r3, [r3, #3]
 800cb54:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cb5c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800cb62:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	22ca      	movs	r2, #202	; 0xca
 800cb74:	625a      	str	r2, [r3, #36]	; 0x24
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2253      	movs	r2, #83	; 0x53
 800cb7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f000 f8c0 	bl	800cd04 <RTC_EnterInitMode>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00d      	beq.n	800cba6 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	22ff      	movs	r2, #255	; 0xff
 800cb90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2204      	movs	r2, #4
 800cb96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e037      	b.n	800cc16 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cbb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cbb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68da      	ldr	r2, [r3, #12]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbc4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f003 0320 	and.w	r3, r3, #32
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d113      	bne.n	800cbfc <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f86f 	bl	800ccb8 <HAL_RTC_WaitForSynchro>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00d      	beq.n	800cbfc <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	22ff      	movs	r2, #255	; 0xff
 800cbe6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2204      	movs	r2, #4
 800cbec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e00c      	b.n	800cc16 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	22ff      	movs	r2, #255	; 0xff
 800cc02:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800cc14:	2300      	movs	r3, #0
  }
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	371c      	adds	r7, #28
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd90      	pop	{r4, r7, pc}

0800cc1e <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc38:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	0c1b      	lsrs	r3, r3, #16
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	0a1b      	lsrs	r3, r3, #8
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	f003 031f 	and.w	r3, r3, #31
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	0b5b      	lsrs	r3, r3, #13
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f003 0307 	and.w	r3, r3, #7
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d11a      	bne.n	800ccae <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	78db      	ldrb	r3, [r3, #3]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 f88b 	bl	800cd98 <RTC_Bcd2ToByte>
 800cc82:	4603      	mov	r3, r0
 800cc84:	461a      	mov	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	785b      	ldrb	r3, [r3, #1]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 f882 	bl	800cd98 <RTC_Bcd2ToByte>
 800cc94:	4603      	mov	r3, r0
 800cc96:	461a      	mov	r2, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	789b      	ldrb	r3, [r3, #2]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 f879 	bl	800cd98 <RTC_Bcd2ToByte>
 800cca6:	4603      	mov	r3, r0
 800cca8:	461a      	mov	r2, r3
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68da      	ldr	r2, [r3, #12]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ccce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ccd0:	f7f9 fd4e 	bl	8006770 <HAL_GetTick>
 800ccd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ccd6:	e009      	b.n	800ccec <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ccd8:	f7f9 fd4a 	bl	8006770 <HAL_GetTick>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cce6:	d901      	bls.n	800ccec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e007      	b.n	800ccfc <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0ee      	beq.n	800ccd8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d119      	bne.n	800cd4e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cd24:	f7f9 fd24 	bl	8006770 <HAL_GetTick>
 800cd28:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd2a:	e009      	b.n	800cd40 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd2c:	f7f9 fd20 	bl	8006770 <HAL_GetTick>
 800cd30:	4602      	mov	r2, r0
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd3a:	d901      	bls.n	800cd40 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e007      	b.n	800cd50 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0ee      	beq.n	800cd2c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	4603      	mov	r3, r0
 800cd60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800cd66:	79fb      	ldrb	r3, [r7, #7]
 800cd68:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800cd6a:	e005      	b.n	800cd78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800cd72:	7afb      	ldrb	r3, [r7, #11]
 800cd74:	3b0a      	subs	r3, #10
 800cd76:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800cd78:	7afb      	ldrb	r3, [r7, #11]
 800cd7a:	2b09      	cmp	r3, #9
 800cd7c:	d8f6      	bhi.n	800cd6c <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	011b      	lsls	r3, r3, #4
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	7afb      	ldrb	r3, [r7, #11]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	b2db      	uxtb	r3, r3
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	091b      	lsrs	r3, r3, #4
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	461a      	mov	r2, r3
 800cdaa:	4613      	mov	r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4413      	add	r3, r2
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	79fb      	ldrb	r3, [r7, #7]
 800cdba:	f003 030f 	and.w	r3, r3, #15
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	4413      	add	r3, r2
 800cdc2:	b2db      	uxtb	r3, r3
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3350      	adds	r3, #80	; 0x50
 800cde2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	697a      	ldr	r2, [r7, #20]
 800cdea:	4413      	add	r3, r2
 800cdec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	601a      	str	r2, [r3, #0]
}
 800cdf4:	bf00      	nop
 800cdf6:	371c      	adds	r7, #28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e01d      	b.n	800ce4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7f8 ff7e 	bl	8005d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	f000 fc84 	bl	800d74c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
	...

0800ce58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2202      	movs	r2, #2
 800ce64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	689a      	ldr	r2, [r3, #8]
 800ce6e:	4b0e      	ldr	r3, [pc, #56]	; (800cea8 <HAL_TIM_Base_Start+0x50>)
 800ce70:	4013      	ands	r3, r2
 800ce72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b06      	cmp	r3, #6
 800ce78:	d00b      	beq.n	800ce92 <HAL_TIM_Base_Start+0x3a>
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce80:	d007      	beq.n	800ce92 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f042 0201 	orr.w	r2, r2, #1
 800ce90:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2201      	movs	r2, #1
 800ce96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	00010007 	.word	0x00010007

0800ceac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2202      	movs	r2, #2
 800ceb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6a1a      	ldr	r2, [r3, #32]
 800cec2:	f241 1311 	movw	r3, #4369	; 0x1111
 800cec6:	4013      	ands	r3, r2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10f      	bne.n	800ceec <HAL_TIM_Base_Stop+0x40>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6a1a      	ldr	r2, [r3, #32]
 800ced2:	f240 4344 	movw	r3, #1092	; 0x444
 800ced6:	4013      	ands	r3, r2
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d107      	bne.n	800ceec <HAL_TIM_Base_Stop+0x40>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f022 0201 	bic.w	r2, r2, #1
 800ceea:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
	...

0800cf04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68da      	ldr	r2, [r3, #12]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f042 0201 	orr.w	r2, r2, #1
 800cf1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689a      	ldr	r2, [r3, #8]
 800cf22:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <HAL_TIM_Base_Start_IT+0x50>)
 800cf24:	4013      	ands	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b06      	cmp	r3, #6
 800cf2c:	d00b      	beq.n	800cf46 <HAL_TIM_Base_Start_IT+0x42>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf34:	d007      	beq.n	800cf46 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f042 0201 	orr.w	r2, r2, #1
 800cf44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	00010007 	.word	0x00010007

0800cf58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e01d      	b.n	800cfa6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d106      	bne.n	800cf84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 f815 	bl	800cfae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2202      	movs	r2, #2
 800cf88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	3304      	adds	r3, #4
 800cf94:	4619      	mov	r1, r3
 800cf96:	4610      	mov	r0, r2
 800cf98:	f000 fbd8 	bl	800d74c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b083      	sub	sp, #12
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
	...

0800cfc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 ff36 	bl	800de48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a19      	ldr	r2, [pc, #100]	; (800d048 <HAL_TIM_PWM_Start+0x84>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d009      	beq.n	800cffa <HAL_TIM_PWM_Start+0x36>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a18      	ldr	r2, [pc, #96]	; (800d04c <HAL_TIM_PWM_Start+0x88>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d004      	beq.n	800cffa <HAL_TIM_PWM_Start+0x36>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a16      	ldr	r2, [pc, #88]	; (800d050 <HAL_TIM_PWM_Start+0x8c>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d101      	bne.n	800cffe <HAL_TIM_PWM_Start+0x3a>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e000      	b.n	800d000 <HAL_TIM_PWM_Start+0x3c>
 800cffe:	2300      	movs	r3, #0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d007      	beq.n	800d014 <HAL_TIM_PWM_Start+0x50>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d012:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	689a      	ldr	r2, [r3, #8]
 800d01a:	4b0e      	ldr	r3, [pc, #56]	; (800d054 <HAL_TIM_PWM_Start+0x90>)
 800d01c:	4013      	ands	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b06      	cmp	r3, #6
 800d024:	d00b      	beq.n	800d03e <HAL_TIM_PWM_Start+0x7a>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d02c:	d007      	beq.n	800d03e <HAL_TIM_PWM_Start+0x7a>
  {
    __HAL_TIM_ENABLE(htim);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f042 0201 	orr.w	r2, r2, #1
 800d03c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	40012c00 	.word	0x40012c00
 800d04c:	40014400 	.word	0x40014400
 800d050:	40014800 	.word	0x40014800
 800d054:	00010007 	.word	0x00010007

0800d058 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2200      	movs	r2, #0
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 feec 	bl	800de48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a25      	ldr	r2, [pc, #148]	; (800d10c <HAL_TIM_PWM_Stop+0xb4>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d009      	beq.n	800d08e <HAL_TIM_PWM_Stop+0x36>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a24      	ldr	r2, [pc, #144]	; (800d110 <HAL_TIM_PWM_Stop+0xb8>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d004      	beq.n	800d08e <HAL_TIM_PWM_Stop+0x36>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a22      	ldr	r2, [pc, #136]	; (800d114 <HAL_TIM_PWM_Stop+0xbc>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d101      	bne.n	800d092 <HAL_TIM_PWM_Stop+0x3a>
 800d08e:	2301      	movs	r3, #1
 800d090:	e000      	b.n	800d094 <HAL_TIM_PWM_Stop+0x3c>
 800d092:	2300      	movs	r3, #0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d017      	beq.n	800d0c8 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6a1a      	ldr	r2, [r3, #32]
 800d09e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10f      	bne.n	800d0c8 <HAL_TIM_PWM_Stop+0x70>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6a1a      	ldr	r2, [r3, #32]
 800d0ae:	f240 4344 	movw	r3, #1092	; 0x444
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d107      	bne.n	800d0c8 <HAL_TIM_PWM_Stop+0x70>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	6a1a      	ldr	r2, [r3, #32]
 800d0ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10f      	bne.n	800d0f8 <HAL_TIM_PWM_Stop+0xa0>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6a1a      	ldr	r2, [r3, #32]
 800d0de:	f240 4344 	movw	r3, #1092	; 0x444
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d107      	bne.n	800d0f8 <HAL_TIM_PWM_Stop+0xa0>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f022 0201 	bic.w	r2, r2, #1
 800d0f6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	40012c00 	.word	0x40012c00
 800d110:	40014400 	.word	0x40014400
 800d114:	40014800 	.word	0x40014800

0800d118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	f003 0302 	and.w	r3, r3, #2
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d122      	bne.n	800d174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	f003 0302 	and.w	r3, r3, #2
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d11b      	bne.n	800d174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f06f 0202 	mvn.w	r2, #2
 800d144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	f003 0303 	and.w	r3, r3, #3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fad7 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d160:	e005      	b.n	800d16e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fac9 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fada 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	f003 0304 	and.w	r3, r3, #4
 800d17e:	2b04      	cmp	r3, #4
 800d180:	d122      	bne.n	800d1c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	f003 0304 	and.w	r3, r3, #4
 800d18c:	2b04      	cmp	r3, #4
 800d18e:	d11b      	bne.n	800d1c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f06f 0204 	mvn.w	r2, #4
 800d198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2202      	movs	r2, #2
 800d19e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 faad 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d1b4:	e005      	b.n	800d1c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fa9f 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fab0 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	f003 0308 	and.w	r3, r3, #8
 800d1d2:	2b08      	cmp	r3, #8
 800d1d4:	d122      	bne.n	800d21c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	f003 0308 	and.w	r3, r3, #8
 800d1e0:	2b08      	cmp	r3, #8
 800d1e2:	d11b      	bne.n	800d21c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f06f 0208 	mvn.w	r2, #8
 800d1ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2204      	movs	r2, #4
 800d1f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	f003 0303 	and.w	r3, r3, #3
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d003      	beq.n	800d20a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fa83 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d208:	e005      	b.n	800d216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 fa75 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 fa86 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	f003 0310 	and.w	r3, r3, #16
 800d226:	2b10      	cmp	r3, #16
 800d228:	d122      	bne.n	800d270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	f003 0310 	and.w	r3, r3, #16
 800d234:	2b10      	cmp	r3, #16
 800d236:	d11b      	bne.n	800d270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f06f 0210 	mvn.w	r2, #16
 800d240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2208      	movs	r2, #8
 800d246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 fa59 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d25c:	e005      	b.n	800d26a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fa4b 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 fa5c 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d10e      	bne.n	800d29c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	f003 0301 	and.w	r3, r3, #1
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d107      	bne.n	800d29c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f06f 0201 	mvn.w	r2, #1
 800d294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7f7 f84c 	bl	8004334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2a6:	2b80      	cmp	r3, #128	; 0x80
 800d2a8:	d10e      	bne.n	800d2c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b4:	2b80      	cmp	r3, #128	; 0x80
 800d2b6:	d107      	bne.n	800d2c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fe50 	bl	800df68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2d6:	d10e      	bne.n	800d2f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2e2:	2b80      	cmp	r3, #128	; 0x80
 800d2e4:	d107      	bne.n	800d2f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fe43 	bl	800df7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d300:	2b40      	cmp	r3, #64	; 0x40
 800d302:	d10e      	bne.n	800d322 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30e:	2b40      	cmp	r3, #64	; 0x40
 800d310:	d107      	bne.n	800d322 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 fa0a 	bl	800d736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	f003 0320 	and.w	r3, r3, #32
 800d32c:	2b20      	cmp	r3, #32
 800d32e:	d10e      	bne.n	800d34e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	f003 0320 	and.w	r3, r3, #32
 800d33a:	2b20      	cmp	r3, #32
 800d33c:	d107      	bne.n	800d34e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f06f 0220 	mvn.w	r2, #32
 800d346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fe03 	bl	800df54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d34e:	bf00      	nop
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d101      	bne.n	800d372 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d36e:	2302      	movs	r3, #2
 800d370:	e105      	b.n	800d57e <HAL_TIM_PWM_ConfigChannel+0x226>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2201      	movs	r2, #1
 800d376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2202      	movs	r2, #2
 800d37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b14      	cmp	r3, #20
 800d386:	f200 80f0 	bhi.w	800d56a <HAL_TIM_PWM_ConfigChannel+0x212>
 800d38a:	a201      	add	r2, pc, #4	; (adr r2, 800d390 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d390:	0800d3e5 	.word	0x0800d3e5
 800d394:	0800d56b 	.word	0x0800d56b
 800d398:	0800d56b 	.word	0x0800d56b
 800d39c:	0800d56b 	.word	0x0800d56b
 800d3a0:	0800d425 	.word	0x0800d425
 800d3a4:	0800d56b 	.word	0x0800d56b
 800d3a8:	0800d56b 	.word	0x0800d56b
 800d3ac:	0800d56b 	.word	0x0800d56b
 800d3b0:	0800d467 	.word	0x0800d467
 800d3b4:	0800d56b 	.word	0x0800d56b
 800d3b8:	0800d56b 	.word	0x0800d56b
 800d3bc:	0800d56b 	.word	0x0800d56b
 800d3c0:	0800d4a7 	.word	0x0800d4a7
 800d3c4:	0800d56b 	.word	0x0800d56b
 800d3c8:	0800d56b 	.word	0x0800d56b
 800d3cc:	0800d56b 	.word	0x0800d56b
 800d3d0:	0800d4e9 	.word	0x0800d4e9
 800d3d4:	0800d56b 	.word	0x0800d56b
 800d3d8:	0800d56b 	.word	0x0800d56b
 800d3dc:	0800d56b 	.word	0x0800d56b
 800d3e0:	0800d529 	.word	0x0800d529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68b9      	ldr	r1, [r7, #8]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fa12 	bl	800d814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	699a      	ldr	r2, [r3, #24]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f042 0208 	orr.w	r2, r2, #8
 800d3fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	699a      	ldr	r2, [r3, #24]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f022 0204 	bic.w	r2, r2, #4
 800d40e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6999      	ldr	r1, [r3, #24]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	691a      	ldr	r2, [r3, #16]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	430a      	orrs	r2, r1
 800d420:	619a      	str	r2, [r3, #24]
      break;
 800d422:	e0a3      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68b9      	ldr	r1, [r7, #8]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fa6e 	bl	800d90c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d43e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	699a      	ldr	r2, [r3, #24]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d44e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6999      	ldr	r1, [r3, #24]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	021a      	lsls	r2, r3, #8
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	430a      	orrs	r2, r1
 800d462:	619a      	str	r2, [r3, #24]
      break;
 800d464:	e082      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 fac7 	bl	800da00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	69da      	ldr	r2, [r3, #28]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f042 0208 	orr.w	r2, r2, #8
 800d480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	69da      	ldr	r2, [r3, #28]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f022 0204 	bic.w	r2, r2, #4
 800d490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	69d9      	ldr	r1, [r3, #28]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	430a      	orrs	r2, r1
 800d4a2:	61da      	str	r2, [r3, #28]
      break;
 800d4a4:	e062      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68b9      	ldr	r1, [r7, #8]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fb1f 	bl	800daf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	69da      	ldr	r2, [r3, #28]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	69da      	ldr	r2, [r3, #28]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	69d9      	ldr	r1, [r3, #28]
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	021a      	lsls	r2, r3, #8
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	61da      	str	r2, [r3, #28]
      break;
 800d4e6:	e041      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68b9      	ldr	r1, [r7, #8]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 fb5c 	bl	800dbac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f042 0208 	orr.w	r2, r2, #8
 800d502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f022 0204 	bic.w	r2, r2, #4
 800d512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	691a      	ldr	r2, [r3, #16]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d526:	e021      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 fb94 	bl	800dc5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d542:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	021a      	lsls	r2, r3, #8
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	430a      	orrs	r2, r1
 800d566:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d568:	e000      	b.n	800d56c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800d56a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop

0800d588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d101      	bne.n	800d5a0 <HAL_TIM_ConfigClockSource+0x18>
 800d59c:	2302      	movs	r3, #2
 800d59e:	e0a8      	b.n	800d6f2 <HAL_TIM_ConfigClockSource+0x16a>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800d5be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d5c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b40      	cmp	r3, #64	; 0x40
 800d5da:	d067      	beq.n	800d6ac <HAL_TIM_ConfigClockSource+0x124>
 800d5dc:	2b40      	cmp	r3, #64	; 0x40
 800d5de:	d80b      	bhi.n	800d5f8 <HAL_TIM_ConfigClockSource+0x70>
 800d5e0:	2b10      	cmp	r3, #16
 800d5e2:	d073      	beq.n	800d6cc <HAL_TIM_ConfigClockSource+0x144>
 800d5e4:	2b10      	cmp	r3, #16
 800d5e6:	d802      	bhi.n	800d5ee <HAL_TIM_ConfigClockSource+0x66>
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d06f      	beq.n	800d6cc <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d5ec:	e078      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d5ee:	2b20      	cmp	r3, #32
 800d5f0:	d06c      	beq.n	800d6cc <HAL_TIM_ConfigClockSource+0x144>
 800d5f2:	2b30      	cmp	r3, #48	; 0x30
 800d5f4:	d06a      	beq.n	800d6cc <HAL_TIM_ConfigClockSource+0x144>
      break;
 800d5f6:	e073      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d5f8:	2b70      	cmp	r3, #112	; 0x70
 800d5fa:	d00d      	beq.n	800d618 <HAL_TIM_ConfigClockSource+0x90>
 800d5fc:	2b70      	cmp	r3, #112	; 0x70
 800d5fe:	d804      	bhi.n	800d60a <HAL_TIM_ConfigClockSource+0x82>
 800d600:	2b50      	cmp	r3, #80	; 0x50
 800d602:	d033      	beq.n	800d66c <HAL_TIM_ConfigClockSource+0xe4>
 800d604:	2b60      	cmp	r3, #96	; 0x60
 800d606:	d041      	beq.n	800d68c <HAL_TIM_ConfigClockSource+0x104>
      break;
 800d608:	e06a      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800d60a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d60e:	d066      	beq.n	800d6de <HAL_TIM_ConfigClockSource+0x156>
 800d610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d614:	d017      	beq.n	800d646 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800d616:	e063      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6818      	ldr	r0, [r3, #0]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	6899      	ldr	r1, [r3, #8]
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	685a      	ldr	r2, [r3, #4]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	f000 fbee 	bl	800de08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d63a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	609a      	str	r2, [r3, #8]
      break;
 800d644:	e04c      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	6899      	ldr	r1, [r3, #8]
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	f000 fbd7 	bl	800de08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	689a      	ldr	r2, [r3, #8]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d668:	609a      	str	r2, [r3, #8]
      break;
 800d66a:	e039      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6818      	ldr	r0, [r3, #0]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	6859      	ldr	r1, [r3, #4]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	461a      	mov	r2, r3
 800d67a:	f000 fb49 	bl	800dd10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2150      	movs	r1, #80	; 0x50
 800d684:	4618      	mov	r0, r3
 800d686:	f000 fba2 	bl	800ddce <TIM_ITRx_SetConfig>
      break;
 800d68a:	e029      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6818      	ldr	r0, [r3, #0]
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	6859      	ldr	r1, [r3, #4]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	461a      	mov	r2, r3
 800d69a:	f000 fb68 	bl	800dd6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2160      	movs	r1, #96	; 0x60
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f000 fb92 	bl	800ddce <TIM_ITRx_SetConfig>
      break;
 800d6aa:	e019      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6818      	ldr	r0, [r3, #0]
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	6859      	ldr	r1, [r3, #4]
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	f000 fb29 	bl	800dd10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2140      	movs	r1, #64	; 0x40
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 fb82 	bl	800ddce <TIM_ITRx_SetConfig>
      break;
 800d6ca:	e009      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	f000 fb79 	bl	800ddce <TIM_ITRx_SetConfig>
      break;
 800d6dc:	e000      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800d6de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b083      	sub	sp, #12
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d702:	bf00      	nop
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d70e:	b480      	push	{r7}
 800d710:	b083      	sub	sp, #12
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d716:	bf00      	nop
 800d718:	370c      	adds	r7, #12
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d722:	b480      	push	{r7}
 800d724:	b083      	sub	sp, #12
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d72a:	bf00      	nop
 800d72c:	370c      	adds	r7, #12
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d736:	b480      	push	{r7}
 800d738:	b083      	sub	sp, #12
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d73e:	bf00      	nop
 800d740:	370c      	adds	r7, #12
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
	...

0800d74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a2a      	ldr	r2, [pc, #168]	; (800d808 <TIM_Base_SetConfig+0xbc>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d003      	beq.n	800d76c <TIM_Base_SetConfig+0x20>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d76a:	d108      	bne.n	800d77e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a21      	ldr	r2, [pc, #132]	; (800d808 <TIM_Base_SetConfig+0xbc>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d00b      	beq.n	800d79e <TIM_Base_SetConfig+0x52>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d78c:	d007      	beq.n	800d79e <TIM_Base_SetConfig+0x52>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a1e      	ldr	r2, [pc, #120]	; (800d80c <TIM_Base_SetConfig+0xc0>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d003      	beq.n	800d79e <TIM_Base_SetConfig+0x52>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a1d      	ldr	r2, [pc, #116]	; (800d810 <TIM_Base_SetConfig+0xc4>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d108      	bne.n	800d7b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	689a      	ldr	r2, [r3, #8]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a0c      	ldr	r2, [pc, #48]	; (800d808 <TIM_Base_SetConfig+0xbc>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d007      	beq.n	800d7ec <TIM_Base_SetConfig+0xa0>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a0b      	ldr	r2, [pc, #44]	; (800d80c <TIM_Base_SetConfig+0xc0>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d003      	beq.n	800d7ec <TIM_Base_SetConfig+0xa0>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4a0a      	ldr	r2, [pc, #40]	; (800d810 <TIM_Base_SetConfig+0xc4>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d103      	bne.n	800d7f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	691a      	ldr	r2, [r3, #16]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	615a      	str	r2, [r3, #20]
}
 800d7fa:	bf00      	nop
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	40012c00 	.word	0x40012c00
 800d80c:	40014400 	.word	0x40014400
 800d810:	40014800 	.word	0x40014800

0800d814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d814:	b480      	push	{r7}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	f023 0201 	bic.w	r2, r3, #1
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f023 0303 	bic.w	r3, r3, #3
 800d84e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	4313      	orrs	r3, r2
 800d858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f023 0302 	bic.w	r3, r3, #2
 800d860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	4313      	orrs	r3, r2
 800d86a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a24      	ldr	r2, [pc, #144]	; (800d900 <TIM_OC1_SetConfig+0xec>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d007      	beq.n	800d884 <TIM_OC1_SetConfig+0x70>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a23      	ldr	r2, [pc, #140]	; (800d904 <TIM_OC1_SetConfig+0xf0>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d003      	beq.n	800d884 <TIM_OC1_SetConfig+0x70>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a22      	ldr	r2, [pc, #136]	; (800d908 <TIM_OC1_SetConfig+0xf4>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d10c      	bne.n	800d89e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	f023 0308 	bic.w	r3, r3, #8
 800d88a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	4313      	orrs	r3, r2
 800d894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f023 0304 	bic.w	r3, r3, #4
 800d89c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a17      	ldr	r2, [pc, #92]	; (800d900 <TIM_OC1_SetConfig+0xec>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d007      	beq.n	800d8b6 <TIM_OC1_SetConfig+0xa2>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a17      	ldr	r2, [pc, #92]	; (800d908 <TIM_OC1_SetConfig+0xf4>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d003      	beq.n	800d8b6 <TIM_OC1_SetConfig+0xa2>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4a14      	ldr	r2, [pc, #80]	; (800d904 <TIM_OC1_SetConfig+0xf0>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d111      	bne.n	800d8da <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	693a      	ldr	r2, [r7, #16]
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	685a      	ldr	r2, [r3, #4]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	621a      	str	r2, [r3, #32]
}
 800d8f4:	bf00      	nop
 800d8f6:	371c      	adds	r7, #28
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	40012c00 	.word	0x40012c00
 800d904:	40014800 	.word	0x40014800
 800d908:	40014400 	.word	0x40014400

0800d90c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b087      	sub	sp, #28
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a1b      	ldr	r3, [r3, #32]
 800d91a:	f023 0210 	bic.w	r2, r3, #16
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6a1b      	ldr	r3, [r3, #32]
 800d926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d93a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d93e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	021b      	lsls	r3, r3, #8
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	4313      	orrs	r3, r2
 800d952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f023 0320 	bic.w	r3, r3, #32
 800d95a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	011b      	lsls	r3, r3, #4
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	4313      	orrs	r3, r2
 800d966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a22      	ldr	r2, [pc, #136]	; (800d9f4 <TIM_OC2_SetConfig+0xe8>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d10d      	bne.n	800d98c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	697a      	ldr	r2, [r7, #20]
 800d980:	4313      	orrs	r3, r2
 800d982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d98a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a19      	ldr	r2, [pc, #100]	; (800d9f4 <TIM_OC2_SetConfig+0xe8>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d007      	beq.n	800d9a4 <TIM_OC2_SetConfig+0x98>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a18      	ldr	r2, [pc, #96]	; (800d9f8 <TIM_OC2_SetConfig+0xec>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d003      	beq.n	800d9a4 <TIM_OC2_SetConfig+0x98>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a17      	ldr	r2, [pc, #92]	; (800d9fc <TIM_OC2_SetConfig+0xf0>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d113      	bne.n	800d9cc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	695b      	ldr	r3, [r3, #20]
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	693a      	ldr	r2, [r7, #16]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	699b      	ldr	r3, [r3, #24]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	693a      	ldr	r2, [r7, #16]
 800d9d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	621a      	str	r2, [r3, #32]
}
 800d9e6:	bf00      	nop
 800d9e8:	371c      	adds	r7, #28
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	40012c00 	.word	0x40012c00
 800d9f8:	40014400 	.word	0x40014400
 800d9fc:	40014800 	.word	0x40014800

0800da00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6a1b      	ldr	r3, [r3, #32]
 800da1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	69db      	ldr	r3, [r3, #28]
 800da26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f023 0303 	bic.w	r3, r3, #3
 800da3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	4313      	orrs	r3, r2
 800da44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	021b      	lsls	r3, r3, #8
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	4313      	orrs	r3, r2
 800da58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a21      	ldr	r2, [pc, #132]	; (800dae4 <TIM_OC3_SetConfig+0xe4>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d10d      	bne.n	800da7e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	021b      	lsls	r3, r3, #8
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	4313      	orrs	r3, r2
 800da74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4a18      	ldr	r2, [pc, #96]	; (800dae4 <TIM_OC3_SetConfig+0xe4>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d007      	beq.n	800da96 <TIM_OC3_SetConfig+0x96>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a17      	ldr	r2, [pc, #92]	; (800dae8 <TIM_OC3_SetConfig+0xe8>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d003      	beq.n	800da96 <TIM_OC3_SetConfig+0x96>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a16      	ldr	r2, [pc, #88]	; (800daec <TIM_OC3_SetConfig+0xec>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d113      	bne.n	800dabe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800daa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	011b      	lsls	r3, r3, #4
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	4313      	orrs	r3, r2
 800dab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	699b      	ldr	r3, [r3, #24]
 800dab6:	011b      	lsls	r3, r3, #4
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	4313      	orrs	r3, r2
 800dabc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	697a      	ldr	r2, [r7, #20]
 800dad6:	621a      	str	r2, [r3, #32]
}
 800dad8:	bf00      	nop
 800dada:	371c      	adds	r7, #28
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	40012c00 	.word	0x40012c00
 800dae8:	40014400 	.word	0x40014400
 800daec:	40014800 	.word	0x40014800

0800daf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b087      	sub	sp, #28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	021b      	lsls	r3, r3, #8
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	4313      	orrs	r3, r2
 800db36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	031b      	lsls	r3, r3, #12
 800db46:	693a      	ldr	r2, [r7, #16]
 800db48:	4313      	orrs	r3, r2
 800db4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a14      	ldr	r2, [pc, #80]	; (800dba0 <TIM_OC4_SetConfig+0xb0>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d007      	beq.n	800db64 <TIM_OC4_SetConfig+0x74>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a13      	ldr	r2, [pc, #76]	; (800dba4 <TIM_OC4_SetConfig+0xb4>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d003      	beq.n	800db64 <TIM_OC4_SetConfig+0x74>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a12      	ldr	r2, [pc, #72]	; (800dba8 <TIM_OC4_SetConfig+0xb8>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d109      	bne.n	800db78 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	019b      	lsls	r3, r3, #6
 800db72:	697a      	ldr	r2, [r7, #20]
 800db74:	4313      	orrs	r3, r2
 800db76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	693a      	ldr	r2, [r7, #16]
 800db90:	621a      	str	r2, [r3, #32]
}
 800db92:	bf00      	nop
 800db94:	371c      	adds	r7, #28
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	40012c00 	.word	0x40012c00
 800dba4:	40014400 	.word	0x40014400
 800dba8:	40014800 	.word	0x40014800

0800dbac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b087      	sub	sp, #28
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dbf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	041b      	lsls	r3, r3, #16
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4a13      	ldr	r2, [pc, #76]	; (800dc50 <TIM_OC5_SetConfig+0xa4>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d007      	beq.n	800dc16 <TIM_OC5_SetConfig+0x6a>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a12      	ldr	r2, [pc, #72]	; (800dc54 <TIM_OC5_SetConfig+0xa8>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d003      	beq.n	800dc16 <TIM_OC5_SetConfig+0x6a>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a11      	ldr	r2, [pc, #68]	; (800dc58 <TIM_OC5_SetConfig+0xac>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d109      	bne.n	800dc2a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	021b      	lsls	r3, r3, #8
 800dc24:	697a      	ldr	r2, [r7, #20]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	697a      	ldr	r2, [r7, #20]
 800dc2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	621a      	str	r2, [r3, #32]
}
 800dc44:	bf00      	nop
 800dc46:	371c      	adds	r7, #28
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	40012c00 	.word	0x40012c00
 800dc54:	40014400 	.word	0x40014400
 800dc58:	40014800 	.word	0x40014800

0800dc5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b087      	sub	sp, #28
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a1b      	ldr	r3, [r3, #32]
 800dc76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dc8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	021b      	lsls	r3, r3, #8
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	051b      	lsls	r3, r3, #20
 800dcaa:	693a      	ldr	r2, [r7, #16]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a14      	ldr	r2, [pc, #80]	; (800dd04 <TIM_OC6_SetConfig+0xa8>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d007      	beq.n	800dcc8 <TIM_OC6_SetConfig+0x6c>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a13      	ldr	r2, [pc, #76]	; (800dd08 <TIM_OC6_SetConfig+0xac>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d003      	beq.n	800dcc8 <TIM_OC6_SetConfig+0x6c>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a12      	ldr	r2, [pc, #72]	; (800dd0c <TIM_OC6_SetConfig+0xb0>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d109      	bne.n	800dcdc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	695b      	ldr	r3, [r3, #20]
 800dcd4:	029b      	lsls	r3, r3, #10
 800dcd6:	697a      	ldr	r2, [r7, #20]
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	685a      	ldr	r2, [r3, #4]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	693a      	ldr	r2, [r7, #16]
 800dcf4:	621a      	str	r2, [r3, #32]
}
 800dcf6:	bf00      	nop
 800dcf8:	371c      	adds	r7, #28
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	40012c00 	.word	0x40012c00
 800dd08:	40014400 	.word	0x40014400
 800dd0c:	40014800 	.word	0x40014800

0800dd10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b087      	sub	sp, #28
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6a1b      	ldr	r3, [r3, #32]
 800dd20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	6a1b      	ldr	r3, [r3, #32]
 800dd26:	f023 0201 	bic.w	r2, r3, #1
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	699b      	ldr	r3, [r3, #24]
 800dd32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	011b      	lsls	r3, r3, #4
 800dd40:	693a      	ldr	r2, [r7, #16]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f023 030a 	bic.w	r3, r3, #10
 800dd4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd4e:	697a      	ldr	r2, [r7, #20]
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	693a      	ldr	r2, [r7, #16]
 800dd5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	621a      	str	r2, [r3, #32]
}
 800dd62:	bf00      	nop
 800dd64:	371c      	adds	r7, #28
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr

0800dd6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd6e:	b480      	push	{r7}
 800dd70:	b087      	sub	sp, #28
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60f8      	str	r0, [r7, #12]
 800dd76:	60b9      	str	r1, [r7, #8]
 800dd78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6a1b      	ldr	r3, [r3, #32]
 800dd7e:	f023 0210 	bic.w	r2, r3, #16
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	699b      	ldr	r3, [r3, #24]
 800dd8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6a1b      	ldr	r3, [r3, #32]
 800dd90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	031b      	lsls	r3, r3, #12
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ddaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	621a      	str	r2, [r3, #32]
}
 800ddc2:	bf00      	nop
 800ddc4:	371c      	adds	r7, #28
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b085      	sub	sp, #20
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800dde4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dde8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	f043 0307 	orr.w	r3, r3, #7
 800ddf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	609a      	str	r2, [r3, #8]
}
 800ddfc:	bf00      	nop
 800ddfe:	3714      	adds	r7, #20
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de08:	b480      	push	{r7}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
 800de14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	021a      	lsls	r2, r3, #8
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	431a      	orrs	r2, r3
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	4313      	orrs	r3, r2
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	4313      	orrs	r3, r2
 800de34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	697a      	ldr	r2, [r7, #20]
 800de3a:	609a      	str	r2, [r3, #8]
}
 800de3c:	bf00      	nop
 800de3e:	371c      	adds	r7, #28
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800de48:	b480      	push	{r7}
 800de4a:	b087      	sub	sp, #28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	f003 031f 	and.w	r3, r3, #31
 800de5a:	2201      	movs	r2, #1
 800de5c:	fa02 f303 	lsl.w	r3, r2, r3
 800de60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6a1a      	ldr	r2, [r3, #32]
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	43db      	mvns	r3, r3
 800de6a:	401a      	ands	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6a1a      	ldr	r2, [r3, #32]
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	f003 031f 	and.w	r3, r3, #31
 800de7a:	6879      	ldr	r1, [r7, #4]
 800de7c:	fa01 f303 	lsl.w	r3, r1, r3
 800de80:	431a      	orrs	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	621a      	str	r2, [r3, #32]
}
 800de86:	bf00      	nop
 800de88:	371c      	adds	r7, #28
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
	...

0800de94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de94:	b480      	push	{r7}
 800de96:	b085      	sub	sp, #20
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d101      	bne.n	800deac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dea8:	2302      	movs	r3, #2
 800deaa:	e04a      	b.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2202      	movs	r2, #2
 800deb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a1f      	ldr	r2, [pc, #124]	; (800df50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d108      	bne.n	800dee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dedc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800deee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	4313      	orrs	r3, r2
 800def8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a12      	ldr	r2, [pc, #72]	; (800df50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d004      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df14:	d10c      	bne.n	800df30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	4313      	orrs	r3, r2
 800df26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3714      	adds	r7, #20
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	40012c00 	.word	0x40012c00

0800df54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df70:	bf00      	nop
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df84:	bf00      	nop
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df96:	f3ef 8305 	mrs	r3, IPSR
 800df9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800df9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10f      	bne.n	800dfc2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfa2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfa6:	607b      	str	r3, [r7, #4]
  return(result);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d109      	bne.n	800dfc2 <osKernelInitialize+0x32>
 800dfae:	4b11      	ldr	r3, [pc, #68]	; (800dff4 <osKernelInitialize+0x64>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	d109      	bne.n	800dfca <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfb6:	f3ef 8311 	mrs	r3, BASEPRI
 800dfba:	603b      	str	r3, [r7, #0]
  return(result);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d003      	beq.n	800dfca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800dfc2:	f06f 0305 	mvn.w	r3, #5
 800dfc6:	60fb      	str	r3, [r7, #12]
 800dfc8:	e00c      	b.n	800dfe4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dfca:	4b0a      	ldr	r3, [pc, #40]	; (800dff4 <osKernelInitialize+0x64>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d105      	bne.n	800dfde <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800dfd2:	4b08      	ldr	r3, [pc, #32]	; (800dff4 <osKernelInitialize+0x64>)
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	60fb      	str	r3, [r7, #12]
 800dfdc:	e002      	b.n	800dfe4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dfde:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	20000b1c 	.word	0x20000b1c

0800dff8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dffe:	f3ef 8305 	mrs	r3, IPSR
 800e002:	60bb      	str	r3, [r7, #8]
  return(result);
 800e004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10f      	bne.n	800e02a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e00a:	f3ef 8310 	mrs	r3, PRIMASK
 800e00e:	607b      	str	r3, [r7, #4]
  return(result);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d109      	bne.n	800e02a <osKernelStart+0x32>
 800e016:	4b11      	ldr	r3, [pc, #68]	; (800e05c <osKernelStart+0x64>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	d109      	bne.n	800e032 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e01e:	f3ef 8311 	mrs	r3, BASEPRI
 800e022:	603b      	str	r3, [r7, #0]
  return(result);
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d003      	beq.n	800e032 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e02a:	f06f 0305 	mvn.w	r3, #5
 800e02e:	60fb      	str	r3, [r7, #12]
 800e030:	e00e      	b.n	800e050 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800e032:	4b0a      	ldr	r3, [pc, #40]	; (800e05c <osKernelStart+0x64>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b01      	cmp	r3, #1
 800e038:	d107      	bne.n	800e04a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800e03a:	4b08      	ldr	r3, [pc, #32]	; (800e05c <osKernelStart+0x64>)
 800e03c:	2202      	movs	r2, #2
 800e03e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800e040:	f002 fee8 	bl	8010e14 <vTaskStartScheduler>
      stat = osOK;
 800e044:	2300      	movs	r3, #0
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	e002      	b.n	800e050 <osKernelStart+0x58>
    } else {
      stat = osError;
 800e04a:	f04f 33ff 	mov.w	r3, #4294967295
 800e04e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e050:	68fb      	ldr	r3, [r7, #12]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	20000b1c 	.word	0x20000b1c

0800e060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e060:	b580      	push	{r7, lr}
 800e062:	b092      	sub	sp, #72	; 0x48
 800e064:	af04      	add	r7, sp, #16
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e070:	f3ef 8305 	mrs	r3, IPSR
 800e074:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f040 8095 	bne.w	800e1a8 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e07e:	f3ef 8310 	mrs	r3, PRIMASK
 800e082:	623b      	str	r3, [r7, #32]
  return(result);
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	2b00      	cmp	r3, #0
 800e088:	f040 808e 	bne.w	800e1a8 <osThreadNew+0x148>
 800e08c:	4b49      	ldr	r3, [pc, #292]	; (800e1b4 <osThreadNew+0x154>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b02      	cmp	r3, #2
 800e092:	d106      	bne.n	800e0a2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e094:	f3ef 8311 	mrs	r3, BASEPRI
 800e098:	61fb      	str	r3, [r7, #28]
  return(result);
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 8083 	bne.w	800e1a8 <osThreadNew+0x148>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d07f      	beq.n	800e1a8 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800e0a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0ac:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800e0ae:	2318      	movs	r3, #24
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800e0b6:	f107 031b 	add.w	r3, r7, #27
 800e0ba:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800e0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d045      	beq.n	800e154 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d002      	beq.n	800e0d6 <osThreadNew+0x76>
        name = attr->name;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d008      	beq.n	800e0fc <osThreadNew+0x9c>
 800e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ec:	2b38      	cmp	r3, #56	; 0x38
 800e0ee:	d805      	bhi.n	800e0fc <osThreadNew+0x9c>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <osThreadNew+0xa0>
        return (NULL);
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	e054      	b.n	800e1aa <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	695b      	ldr	r3, [r3, #20]
 800e10c:	089b      	lsrs	r3, r3, #2
 800e10e:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00e      	beq.n	800e136 <osThreadNew+0xd6>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	2b63      	cmp	r3, #99	; 0x63
 800e11e:	d90a      	bls.n	800e136 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e124:	2b00      	cmp	r3, #0
 800e126:	d006      	beq.n	800e136 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <osThreadNew+0xd6>
        mem = 1;
 800e130:	2301      	movs	r3, #1
 800e132:	62bb      	str	r3, [r7, #40]	; 0x28
 800e134:	e010      	b.n	800e158 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	689b      	ldr	r3, [r3, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10c      	bne.n	800e158 <osThreadNew+0xf8>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d108      	bne.n	800e158 <osThreadNew+0xf8>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d104      	bne.n	800e158 <osThreadNew+0xf8>
          mem = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	62bb      	str	r3, [r7, #40]	; 0x28
 800e152:	e001      	b.n	800e158 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d110      	bne.n	800e180 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e166:	9202      	str	r2, [sp, #8]
 800e168:	9301      	str	r3, [sp, #4]
 800e16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e172:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f002 fc7f 	bl	8010a78 <xTaskCreateStatic>
 800e17a:	4603      	mov	r3, r0
 800e17c:	617b      	str	r3, [r7, #20]
 800e17e:	e013      	b.n	800e1a8 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 800e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e182:	2b00      	cmp	r3, #0
 800e184:	d110      	bne.n	800e1a8 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	b29a      	uxth	r2, r3
 800e18a:	f107 0314 	add.w	r3, r7, #20
 800e18e:	9301      	str	r3, [sp, #4]
 800e190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f002 fcc6 	bl	8010b2a <xTaskCreate>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d001      	beq.n	800e1a8 <osThreadNew+0x148>
          hTask = NULL;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e1a8:	697b      	ldr	r3, [r7, #20]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3738      	adds	r7, #56	; 0x38
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20000b1c 	.word	0x20000b1c

0800e1b8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08a      	sub	sp, #40	; 0x28
 800e1bc:	af02      	add	r7, sp, #8
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <osThreadFlagsSet+0x1a>
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	da03      	bge.n	800e1da <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e1d2:	f06f 0303 	mvn.w	r3, #3
 800e1d6:	60fb      	str	r3, [r7, #12]
 800e1d8:	e046      	b.n	800e268 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800e1da:	f04f 33ff 	mov.w	r3, #4294967295
 800e1de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1e0:	f3ef 8305 	mrs	r3, IPSR
 800e1e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e1e6:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10f      	bne.n	800e20c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e1f0:	617b      	str	r3, [r7, #20]
  return(result);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d109      	bne.n	800e20c <osThreadFlagsSet+0x54>
 800e1f8:	4b1e      	ldr	r3, [pc, #120]	; (800e274 <osThreadFlagsSet+0xbc>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d126      	bne.n	800e24e <osThreadFlagsSet+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e200:	f3ef 8311 	mrs	r3, BASEPRI
 800e204:	613b      	str	r3, [r7, #16]
  return(result);
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d020      	beq.n	800e24e <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800e20c:	2300      	movs	r3, #0
 800e20e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e210:	f107 0308 	add.w	r3, r7, #8
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	2300      	movs	r3, #0
 800e218:	2201      	movs	r2, #1
 800e21a:	6839      	ldr	r1, [r7, #0]
 800e21c:	69f8      	ldr	r0, [r7, #28]
 800e21e:	f003 fdc3 	bl	8011da8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e222:	f107 020c 	add.w	r2, r7, #12
 800e226:	2300      	movs	r3, #0
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	4613      	mov	r3, r2
 800e22c:	2200      	movs	r2, #0
 800e22e:	2100      	movs	r1, #0
 800e230:	69f8      	ldr	r0, [r7, #28]
 800e232:	f003 fdb9 	bl	8011da8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d015      	beq.n	800e268 <osThreadFlagsSet+0xb0>
 800e23c:	4b0e      	ldr	r3, [pc, #56]	; (800e278 <osThreadFlagsSet+0xc0>)
 800e23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	e00c      	b.n	800e268 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e24e:	2300      	movs	r3, #0
 800e250:	2201      	movs	r2, #1
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	69f8      	ldr	r0, [r7, #28]
 800e256:	f003 fd03 	bl	8011c60 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e25a:	f107 030c 	add.w	r3, r7, #12
 800e25e:	2200      	movs	r2, #0
 800e260:	2100      	movs	r1, #0
 800e262:	69f8      	ldr	r0, [r7, #28]
 800e264:	f003 fcfc 	bl	8011c60 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e268:	68fb      	ldr	r3, [r7, #12]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3720      	adds	r7, #32
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	20000b1c 	.word	0x20000b1c
 800e278:	e000ed04 	.word	0xe000ed04

0800e27c <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b088      	sub	sp, #32
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e284:	f3ef 8305 	mrs	r3, IPSR
 800e288:	617b      	str	r3, [r7, #20]
  return(result);
 800e28a:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10f      	bne.n	800e2b0 <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e290:	f3ef 8310 	mrs	r3, PRIMASK
 800e294:	613b      	str	r3, [r7, #16]
  return(result);
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d109      	bne.n	800e2b0 <osThreadFlagsClear+0x34>
 800e29c:	4b1e      	ldr	r3, [pc, #120]	; (800e318 <osThreadFlagsClear+0x9c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d109      	bne.n	800e2b8 <osThreadFlagsClear+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e2a4:	f3ef 8311 	mrs	r3, BASEPRI
 800e2a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d003      	beq.n	800e2b8 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 800e2b0:	f06f 0305 	mvn.w	r3, #5
 800e2b4:	61fb      	str	r3, [r7, #28]
 800e2b6:	e02a      	b.n	800e30e <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	da03      	bge.n	800e2c6 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800e2be:	f06f 0303 	mvn.w	r3, #3
 800e2c2:	61fb      	str	r3, [r7, #28]
 800e2c4:	e023      	b.n	800e30e <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e2c6:	f003 fad1 	bl	801186c <xTaskGetCurrentTaskHandle>
 800e2ca:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800e2cc:	f107 0308 	add.w	r3, r7, #8
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	69b8      	ldr	r0, [r7, #24]
 800e2d6:	f003 fcc3 	bl	8011c60 <xTaskGenericNotify>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d113      	bne.n	800e308 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	43da      	mvns	r2, r3
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2203      	movs	r2, #3
 800e2f4:	69b8      	ldr	r0, [r7, #24]
 800e2f6:	f003 fcb3 	bl	8011c60 <xTaskGenericNotify>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d006      	beq.n	800e30e <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 800e300:	f04f 33ff 	mov.w	r3, #4294967295
 800e304:	61fb      	str	r3, [r7, #28]
 800e306:	e002      	b.n	800e30e <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800e308:	f04f 33ff 	mov.w	r3, #4294967295
 800e30c:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800e30e:	69fb      	ldr	r3, [r7, #28]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3720      	adds	r7, #32
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	20000b1c 	.word	0x20000b1c

0800e31c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b08e      	sub	sp, #56	; 0x38
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e328:	f3ef 8305 	mrs	r3, IPSR
 800e32c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e32e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e330:	2b00      	cmp	r3, #0
 800e332:	d10f      	bne.n	800e354 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e334:	f3ef 8310 	mrs	r3, PRIMASK
 800e338:	61bb      	str	r3, [r7, #24]
  return(result);
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d109      	bne.n	800e354 <osThreadFlagsWait+0x38>
 800e340:	4b3f      	ldr	r3, [pc, #252]	; (800e440 <osThreadFlagsWait+0x124>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b02      	cmp	r3, #2
 800e346:	d109      	bne.n	800e35c <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e348:	f3ef 8311 	mrs	r3, BASEPRI
 800e34c:	617b      	str	r3, [r7, #20]
  return(result);
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d003      	beq.n	800e35c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800e354:	f06f 0305 	mvn.w	r3, #5
 800e358:	637b      	str	r3, [r7, #52]	; 0x34
 800e35a:	e06b      	b.n	800e434 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	da03      	bge.n	800e36a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800e362:	f06f 0303 	mvn.w	r3, #3
 800e366:	637b      	str	r3, [r7, #52]	; 0x34
 800e368:	e064      	b.n	800e434 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	f003 0302 	and.w	r3, r3, #2
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800e374:	2300      	movs	r3, #0
 800e376:	633b      	str	r3, [r7, #48]	; 0x30
 800e378:	e001      	b.n	800e37e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800e37e:	2300      	movs	r3, #0
 800e380:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800e386:	f002 fe8d 	bl	80110a4 <xTaskGetTickCount>
 800e38a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e38c:	f107 0210 	add.w	r2, r7, #16
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e394:	2000      	movs	r0, #0
 800e396:	f003 fc09 	bl	8011bac <xTaskNotifyWait>
 800e39a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d137      	bne.n	800e412 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800e3a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	f003 0301 	and.w	r3, r3, #1
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00c      	beq.n	800e3d6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d032      	beq.n	800e42e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10f      	bne.n	800e3ee <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e3ce:	f06f 0302 	mvn.w	r3, #2
 800e3d2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e3d4:	e02e      	b.n	800e434 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e3d6:	68fa      	ldr	r2, [r7, #12]
 800e3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3da:	4013      	ands	r3, r2
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d128      	bne.n	800e432 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d103      	bne.n	800e3ee <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800e3e6:	f06f 0302 	mvn.w	r3, #2
 800e3ea:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800e3ec:	e022      	b.n	800e434 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e3ee:	f002 fe59 	bl	80110a4 <xTaskGetTickCount>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800e3fa:	6a3a      	ldr	r2, [r7, #32]
 800e3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d902      	bls.n	800e408 <osThreadFlagsWait+0xec>
          tout  = 0;
 800e402:	2300      	movs	r3, #0
 800e404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e406:	e00e      	b.n	800e426 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800e408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e410:	e009      	b.n	800e426 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d103      	bne.n	800e420 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800e418:	f06f 0302 	mvn.w	r3, #2
 800e41c:	637b      	str	r3, [r7, #52]	; 0x34
 800e41e:	e002      	b.n	800e426 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e420:	f06f 0301 	mvn.w	r3, #1
 800e424:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1af      	bne.n	800e38c <osThreadFlagsWait+0x70>
 800e42c:	e002      	b.n	800e434 <osThreadFlagsWait+0x118>
            break;
 800e42e:	bf00      	nop
 800e430:	e000      	b.n	800e434 <osThreadFlagsWait+0x118>
            break;
 800e432:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e436:	4618      	mov	r0, r3
 800e438:	3738      	adds	r7, #56	; 0x38
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	20000b1c 	.word	0x20000b1c

0800e444 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e44c:	f3ef 8305 	mrs	r3, IPSR
 800e450:	613b      	str	r3, [r7, #16]
  return(result);
 800e452:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10f      	bne.n	800e478 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e458:	f3ef 8310 	mrs	r3, PRIMASK
 800e45c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d109      	bne.n	800e478 <osDelay+0x34>
 800e464:	4b0d      	ldr	r3, [pc, #52]	; (800e49c <osDelay+0x58>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d109      	bne.n	800e480 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e46c:	f3ef 8311 	mrs	r3, BASEPRI
 800e470:	60bb      	str	r3, [r7, #8]
  return(result);
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d003      	beq.n	800e480 <osDelay+0x3c>
    stat = osErrorISR;
 800e478:	f06f 0305 	mvn.w	r3, #5
 800e47c:	617b      	str	r3, [r7, #20]
 800e47e:	e007      	b.n	800e490 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e480:	2300      	movs	r3, #0
 800e482:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f002 fc8e 	bl	8010dac <vTaskDelay>
    }
  }

  return (stat);
 800e490:	697b      	ldr	r3, [r7, #20]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	20000b1c 	.word	0x20000b1c

0800e4a0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f004 f955 	bl	8012758 <pvTimerGetTimerID>
 800e4ae:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d005      	beq.n	800e4c2 <TimerCallback+0x22>
    callb->func (callb->arg);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68fa      	ldr	r2, [r7, #12]
 800e4bc:	6852      	ldr	r2, [r2, #4]
 800e4be:	4610      	mov	r0, r2
 800e4c0:	4798      	blx	r3
  }
}
 800e4c2:	bf00      	nop
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
	...

0800e4cc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b08e      	sub	sp, #56	; 0x38
 800e4d0:	af02      	add	r7, sp, #8
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	607a      	str	r2, [r7, #4]
 800e4d6:	603b      	str	r3, [r7, #0]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4e0:	f3ef 8305 	mrs	r3, IPSR
 800e4e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e4e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d16a      	bne.n	800e5c2 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e4f0:	617b      	str	r3, [r7, #20]
  return(result);
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d164      	bne.n	800e5c2 <osTimerNew+0xf6>
 800e4f8:	4b34      	ldr	r3, [pc, #208]	; (800e5cc <osTimerNew+0x100>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b02      	cmp	r3, #2
 800e4fe:	d105      	bne.n	800e50c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e500:	f3ef 8311 	mrs	r3, BASEPRI
 800e504:	613b      	str	r3, [r7, #16]
  return(result);
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d15a      	bne.n	800e5c2 <osTimerNew+0xf6>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d057      	beq.n	800e5c2 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e512:	2008      	movs	r0, #8
 800e514:	f000 fd60 	bl	800efd8 <pvPortMalloc>
 800e518:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d050      	beq.n	800e5c2 <osTimerNew+0xf6>
      callb->func = func;
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e52c:	7afb      	ldrb	r3, [r7, #11]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d102      	bne.n	800e538 <osTimerNew+0x6c>
        reload = pdFALSE;
 800e532:	2300      	movs	r3, #0
 800e534:	627b      	str	r3, [r7, #36]	; 0x24
 800e536:	e001      	b.n	800e53c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800e538:	2301      	movs	r3, #1
 800e53a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295
 800e540:	623b      	str	r3, [r7, #32]
      name = NULL;
 800e542:	2300      	movs	r3, #0
 800e544:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d01c      	beq.n	800e586 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <osTimerNew+0x8e>
          name = attr->name;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d006      	beq.n	800e570 <osTimerNew+0xa4>
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	2b2f      	cmp	r3, #47	; 0x2f
 800e568:	d902      	bls.n	800e570 <osTimerNew+0xa4>
          mem = 1;
 800e56a:	2301      	movs	r3, #1
 800e56c:	623b      	str	r3, [r7, #32]
 800e56e:	e00c      	b.n	800e58a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d108      	bne.n	800e58a <osTimerNew+0xbe>
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d104      	bne.n	800e58a <osTimerNew+0xbe>
            mem = 0;
 800e580:	2300      	movs	r3, #0
 800e582:	623b      	str	r3, [r7, #32]
 800e584:	e001      	b.n	800e58a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800e58a:	6a3b      	ldr	r3, [r7, #32]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d10c      	bne.n	800e5aa <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	4b0e      	ldr	r3, [pc, #56]	; (800e5d0 <osTimerNew+0x104>)
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e59e:	2101      	movs	r1, #1
 800e5a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5a2:	f003 fd86 	bl	80120b2 <xTimerCreateStatic>
 800e5a6:	62b8      	str	r0, [r7, #40]	; 0x28
 800e5a8:	e00b      	b.n	800e5c2 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d108      	bne.n	800e5c2 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e5b0:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <osTimerNew+0x104>)
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5bc:	f003 fd58 	bl	8012070 <xTimerCreate>
 800e5c0:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3730      	adds	r7, #48	; 0x30
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20000b1c 	.word	0x20000b1c
 800e5d0:	0800e4a1 	.word	0x0800e4a1

0800e5d4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08a      	sub	sp, #40	; 0x28
 800e5d8:	af02      	add	r7, sp, #8
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5e2:	f3ef 8305 	mrs	r3, IPSR
 800e5e6:	617b      	str	r3, [r7, #20]
  return(result);
 800e5e8:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10f      	bne.n	800e60e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e5f2:	613b      	str	r3, [r7, #16]
  return(result);
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d109      	bne.n	800e60e <osTimerStart+0x3a>
 800e5fa:	4b15      	ldr	r3, [pc, #84]	; (800e650 <osTimerStart+0x7c>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	d109      	bne.n	800e616 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e602:	f3ef 8311 	mrs	r3, BASEPRI
 800e606:	60fb      	str	r3, [r7, #12]
  return(result);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d003      	beq.n	800e616 <osTimerStart+0x42>
    stat = osErrorISR;
 800e60e:	f06f 0305 	mvn.w	r3, #5
 800e612:	61fb      	str	r3, [r7, #28]
 800e614:	e017      	b.n	800e646 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d103      	bne.n	800e624 <osTimerStart+0x50>
    stat = osErrorParameter;
 800e61c:	f06f 0303 	mvn.w	r3, #3
 800e620:	61fb      	str	r3, [r7, #28]
 800e622:	e010      	b.n	800e646 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e624:	2300      	movs	r3, #0
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	2300      	movs	r3, #0
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	2104      	movs	r1, #4
 800e62e:	69b8      	ldr	r0, [r7, #24]
 800e630:	f003 fdac 	bl	801218c <xTimerGenericCommand>
 800e634:	4603      	mov	r3, r0
 800e636:	2b01      	cmp	r3, #1
 800e638:	d102      	bne.n	800e640 <osTimerStart+0x6c>
      stat = osOK;
 800e63a:	2300      	movs	r3, #0
 800e63c:	61fb      	str	r3, [r7, #28]
 800e63e:	e002      	b.n	800e646 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800e640:	f06f 0302 	mvn.w	r3, #2
 800e644:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800e646:	69fb      	ldr	r3, [r7, #28]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3720      	adds	r7, #32
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	20000b1c 	.word	0x20000b1c

0800e654 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800e654:	b580      	push	{r7, lr}
 800e656:	b08a      	sub	sp, #40	; 0x28
 800e658:	af02      	add	r7, sp, #8
 800e65a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e660:	f3ef 8305 	mrs	r3, IPSR
 800e664:	617b      	str	r3, [r7, #20]
  return(result);
 800e666:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10f      	bne.n	800e68c <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e66c:	f3ef 8310 	mrs	r3, PRIMASK
 800e670:	613b      	str	r3, [r7, #16]
  return(result);
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d109      	bne.n	800e68c <osTimerStop+0x38>
 800e678:	4b1a      	ldr	r3, [pc, #104]	; (800e6e4 <osTimerStop+0x90>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d109      	bne.n	800e694 <osTimerStop+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e680:	f3ef 8311 	mrs	r3, BASEPRI
 800e684:	60fb      	str	r3, [r7, #12]
  return(result);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d003      	beq.n	800e694 <osTimerStop+0x40>
    stat = osErrorISR;
 800e68c:	f06f 0305 	mvn.w	r3, #5
 800e690:	61fb      	str	r3, [r7, #28]
 800e692:	e021      	b.n	800e6d8 <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d103      	bne.n	800e6a2 <osTimerStop+0x4e>
    stat = osErrorParameter;
 800e69a:	f06f 0303 	mvn.w	r3, #3
 800e69e:	61fb      	str	r3, [r7, #28]
 800e6a0:	e01a      	b.n	800e6d8 <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800e6a2:	69b8      	ldr	r0, [r7, #24]
 800e6a4:	f004 f834 	bl	8012710 <xTimerIsTimerActive>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d103      	bne.n	800e6b6 <osTimerStop+0x62>
      stat = osErrorResource;
 800e6ae:	f06f 0302 	mvn.w	r3, #2
 800e6b2:	61fb      	str	r3, [r7, #28]
 800e6b4:	e010      	b.n	800e6d8 <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	2200      	movs	r2, #0
 800e6be:	2103      	movs	r1, #3
 800e6c0:	69b8      	ldr	r0, [r7, #24]
 800e6c2:	f003 fd63 	bl	801218c <xTimerGenericCommand>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d102      	bne.n	800e6d2 <osTimerStop+0x7e>
        stat = osOK;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	61fb      	str	r3, [r7, #28]
 800e6d0:	e002      	b.n	800e6d8 <osTimerStop+0x84>
      } else {
        stat = osError;
 800e6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e6d8:	69fb      	ldr	r3, [r7, #28]
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3720      	adds	r7, #32
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	20000b1c 	.word	0x20000b1c

0800e6e8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b08a      	sub	sp, #40	; 0x28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6f4:	f3ef 8305 	mrs	r3, IPSR
 800e6f8:	613b      	str	r3, [r7, #16]
  return(result);
 800e6fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f040 8085 	bne.w	800e80c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e702:	f3ef 8310 	mrs	r3, PRIMASK
 800e706:	60fb      	str	r3, [r7, #12]
  return(result);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d17e      	bne.n	800e80c <osMutexNew+0x124>
 800e70e:	4b42      	ldr	r3, [pc, #264]	; (800e818 <osMutexNew+0x130>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b02      	cmp	r3, #2
 800e714:	d105      	bne.n	800e722 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e716:	f3ef 8311 	mrs	r3, BASEPRI
 800e71a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d174      	bne.n	800e80c <osMutexNew+0x124>
    if (attr != NULL) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d003      	beq.n	800e730 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	623b      	str	r3, [r7, #32]
 800e72e:	e001      	b.n	800e734 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e730:	2300      	movs	r3, #0
 800e732:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e734:	6a3b      	ldr	r3, [r7, #32]
 800e736:	f003 0301 	and.w	r3, r3, #1
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <osMutexNew+0x5c>
      rmtx = 1U;
 800e73e:	2301      	movs	r3, #1
 800e740:	61fb      	str	r3, [r7, #28]
 800e742:	e001      	b.n	800e748 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e744:	2300      	movs	r3, #0
 800e746:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e748:	6a3b      	ldr	r3, [r7, #32]
 800e74a:	f003 0308 	and.w	r3, r3, #8
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d15c      	bne.n	800e80c <osMutexNew+0x124>
      mem = -1;
 800e752:	f04f 33ff 	mov.w	r3, #4294967295
 800e756:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d015      	beq.n	800e78a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d006      	beq.n	800e774 <osMutexNew+0x8c>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	2b4f      	cmp	r3, #79	; 0x4f
 800e76c:	d902      	bls.n	800e774 <osMutexNew+0x8c>
          mem = 1;
 800e76e:	2301      	movs	r3, #1
 800e770:	61bb      	str	r3, [r7, #24]
 800e772:	e00c      	b.n	800e78e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d108      	bne.n	800e78e <osMutexNew+0xa6>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d104      	bne.n	800e78e <osMutexNew+0xa6>
            mem = 0;
 800e784:	2300      	movs	r3, #0
 800e786:	61bb      	str	r3, [r7, #24]
 800e788:	e001      	b.n	800e78e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e78a:	2300      	movs	r3, #0
 800e78c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d112      	bne.n	800e7ba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d007      	beq.n	800e7aa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	2004      	movs	r0, #4
 800e7a2:	f001 fa35 	bl	800fc10 <xQueueCreateMutexStatic>
 800e7a6:	6278      	str	r0, [r7, #36]	; 0x24
 800e7a8:	e016      	b.n	800e7d8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	f001 fa2d 	bl	800fc10 <xQueueCreateMutexStatic>
 800e7b6:	6278      	str	r0, [r7, #36]	; 0x24
 800e7b8:	e00e      	b.n	800e7d8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10b      	bne.n	800e7d8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d004      	beq.n	800e7d0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e7c6:	2004      	movs	r0, #4
 800e7c8:	f001 fa0a 	bl	800fbe0 <xQueueCreateMutex>
 800e7cc:	6278      	str	r0, [r7, #36]	; 0x24
 800e7ce:	e003      	b.n	800e7d8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e7d0:	2001      	movs	r0, #1
 800e7d2:	f001 fa05 	bl	800fbe0 <xQueueCreateMutex>
 800e7d6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00c      	beq.n	800e7f8 <osMutexNew+0x110>
        if (attr != NULL) {
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d003      	beq.n	800e7ec <osMutexNew+0x104>
          name = attr->name;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	617b      	str	r3, [r7, #20]
 800e7ea:	e001      	b.n	800e7f0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e7f0:	6979      	ldr	r1, [r7, #20]
 800e7f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7f4:	f002 f8ba 	bl	801096c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d006      	beq.n	800e80c <osMutexNew+0x124>
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d003      	beq.n	800e80c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	f043 0301 	orr.w	r3, r3, #1
 800e80a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3728      	adds	r7, #40	; 0x28
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	20000b1c 	.word	0x20000b1c

0800e81c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f023 0301 	bic.w	r3, r3, #1
 800e82c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f003 0301 	and.w	r3, r3, #1
 800e834:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e836:	2300      	movs	r3, #0
 800e838:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e83a:	f3ef 8305 	mrs	r3, IPSR
 800e83e:	613b      	str	r3, [r7, #16]
  return(result);
 800e840:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10f      	bne.n	800e866 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e846:	f3ef 8310 	mrs	r3, PRIMASK
 800e84a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d109      	bne.n	800e866 <osMutexAcquire+0x4a>
 800e852:	4b20      	ldr	r3, [pc, #128]	; (800e8d4 <osMutexAcquire+0xb8>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b02      	cmp	r3, #2
 800e858:	d109      	bne.n	800e86e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e85a:	f3ef 8311 	mrs	r3, BASEPRI
 800e85e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d003      	beq.n	800e86e <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e866:	f06f 0305 	mvn.w	r3, #5
 800e86a:	61fb      	str	r3, [r7, #28]
 800e86c:	e02c      	b.n	800e8c8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d103      	bne.n	800e87c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e874:	f06f 0303 	mvn.w	r3, #3
 800e878:	61fb      	str	r3, [r7, #28]
 800e87a:	e025      	b.n	800e8c8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d011      	beq.n	800e8a6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e882:	6839      	ldr	r1, [r7, #0]
 800e884:	69b8      	ldr	r0, [r7, #24]
 800e886:	f001 fa11 	bl	800fcac <xQueueTakeMutexRecursive>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d01b      	beq.n	800e8c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e896:	f06f 0301 	mvn.w	r3, #1
 800e89a:	61fb      	str	r3, [r7, #28]
 800e89c:	e014      	b.n	800e8c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e89e:	f06f 0302 	mvn.w	r3, #2
 800e8a2:	61fb      	str	r3, [r7, #28]
 800e8a4:	e010      	b.n	800e8c8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	69b8      	ldr	r0, [r7, #24]
 800e8aa:	f001 fd8f 	bl	80103cc <xQueueSemaphoreTake>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d009      	beq.n	800e8c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e8ba:	f06f 0301 	mvn.w	r3, #1
 800e8be:	61fb      	str	r3, [r7, #28]
 800e8c0:	e002      	b.n	800e8c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e8c2:	f06f 0302 	mvn.w	r3, #2
 800e8c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e8c8:	69fb      	ldr	r3, [r7, #28]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3720      	adds	r7, #32
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20000b1c 	.word	0x20000b1c

0800e8d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b088      	sub	sp, #32
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f023 0301 	bic.w	r3, r3, #1
 800e8e6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8f4:	f3ef 8305 	mrs	r3, IPSR
 800e8f8:	613b      	str	r3, [r7, #16]
  return(result);
 800e8fa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10f      	bne.n	800e920 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e900:	f3ef 8310 	mrs	r3, PRIMASK
 800e904:	60fb      	str	r3, [r7, #12]
  return(result);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d109      	bne.n	800e920 <osMutexRelease+0x48>
 800e90c:	4b19      	ldr	r3, [pc, #100]	; (800e974 <osMutexRelease+0x9c>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b02      	cmp	r3, #2
 800e912:	d109      	bne.n	800e928 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e914:	f3ef 8311 	mrs	r3, BASEPRI
 800e918:	60bb      	str	r3, [r7, #8]
  return(result);
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d003      	beq.n	800e928 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e920:	f06f 0305 	mvn.w	r3, #5
 800e924:	61fb      	str	r3, [r7, #28]
 800e926:	e01f      	b.n	800e968 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d103      	bne.n	800e936 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e92e:	f06f 0303 	mvn.w	r3, #3
 800e932:	61fb      	str	r3, [r7, #28]
 800e934:	e018      	b.n	800e968 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d009      	beq.n	800e950 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e93c:	69b8      	ldr	r0, [r7, #24]
 800e93e:	f001 f982 	bl	800fc46 <xQueueGiveMutexRecursive>
 800e942:	4603      	mov	r3, r0
 800e944:	2b01      	cmp	r3, #1
 800e946:	d00f      	beq.n	800e968 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e948:	f06f 0302 	mvn.w	r3, #2
 800e94c:	61fb      	str	r3, [r7, #28]
 800e94e:	e00b      	b.n	800e968 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e950:	2300      	movs	r3, #0
 800e952:	2200      	movs	r2, #0
 800e954:	2100      	movs	r1, #0
 800e956:	69b8      	ldr	r0, [r7, #24]
 800e958:	f001 fa44 	bl	800fde4 <xQueueGenericSend>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d002      	beq.n	800e968 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e962:	f06f 0302 	mvn.w	r3, #2
 800e966:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e968:	69fb      	ldr	r3, [r7, #28]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3720      	adds	r7, #32
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20000b1c 	.word	0x20000b1c

0800e978 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08c      	sub	sp, #48	; 0x30
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e984:	2300      	movs	r3, #0
 800e986:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e988:	f3ef 8305 	mrs	r3, IPSR
 800e98c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e98e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e990:	2b00      	cmp	r3, #0
 800e992:	f040 8088 	bne.w	800eaa6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e996:	f3ef 8310 	mrs	r3, PRIMASK
 800e99a:	617b      	str	r3, [r7, #20]
  return(result);
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f040 8081 	bne.w	800eaa6 <osSemaphoreNew+0x12e>
 800e9a4:	4b42      	ldr	r3, [pc, #264]	; (800eab0 <osSemaphoreNew+0x138>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d105      	bne.n	800e9b8 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9ac:	f3ef 8311 	mrs	r3, BASEPRI
 800e9b0:	613b      	str	r3, [r7, #16]
  return(result);
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d176      	bne.n	800eaa6 <osSemaphoreNew+0x12e>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d073      	beq.n	800eaa6 <osSemaphoreNew+0x12e>
 800e9be:	68ba      	ldr	r2, [r7, #8]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d86f      	bhi.n	800eaa6 <osSemaphoreNew+0x12e>
    mem = -1;
 800e9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ca:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d015      	beq.n	800e9fe <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d006      	beq.n	800e9e8 <osSemaphoreNew+0x70>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	2b4f      	cmp	r3, #79	; 0x4f
 800e9e0:	d902      	bls.n	800e9e8 <osSemaphoreNew+0x70>
        mem = 1;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	623b      	str	r3, [r7, #32]
 800e9e6:	e00c      	b.n	800ea02 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d108      	bne.n	800ea02 <osSemaphoreNew+0x8a>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d104      	bne.n	800ea02 <osSemaphoreNew+0x8a>
          mem = 0;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	623b      	str	r3, [r7, #32]
 800e9fc:	e001      	b.n	800ea02 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea08:	d04d      	beq.n	800eaa6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d129      	bne.n	800ea64 <osSemaphoreNew+0xec>
        if (mem == 1) {
 800ea10:	6a3b      	ldr	r3, [r7, #32]
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d10b      	bne.n	800ea2e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	689a      	ldr	r2, [r3, #8]
 800ea1a:	2303      	movs	r3, #3
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	2200      	movs	r2, #0
 800ea22:	2100      	movs	r1, #0
 800ea24:	2001      	movs	r0, #1
 800ea26:	f000 ffef 	bl	800fa08 <xQueueGenericCreateStatic>
 800ea2a:	6278      	str	r0, [r7, #36]	; 0x24
 800ea2c:	e005      	b.n	800ea3a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ea2e:	2203      	movs	r2, #3
 800ea30:	2100      	movs	r1, #0
 800ea32:	2001      	movs	r0, #1
 800ea34:	f001 f85a 	bl	800faec <xQueueGenericCreate>
 800ea38:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d022      	beq.n	800ea86 <osSemaphoreNew+0x10e>
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d01f      	beq.n	800ea86 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ea46:	2300      	movs	r3, #0
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea4e:	f001 f9c9 	bl	800fde4 <xQueueGenericSend>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d016      	beq.n	800ea86 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800ea58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea5a:	f001 fe3c 	bl	80106d6 <vQueueDelete>
            hSemaphore = NULL;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	627b      	str	r3, [r7, #36]	; 0x24
 800ea62:	e010      	b.n	800ea86 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d108      	bne.n	800ea7c <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	68b9      	ldr	r1, [r7, #8]
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f001 f94f 	bl	800fd16 <xQueueCreateCountingSemaphoreStatic>
 800ea78:	6278      	str	r0, [r7, #36]	; 0x24
 800ea7a:	e004      	b.n	800ea86 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ea7c:	68b9      	ldr	r1, [r7, #8]
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f001 f97e 	bl	800fd80 <xQueueCreateCountingSemaphore>
 800ea84:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00c      	beq.n	800eaa6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <osSemaphoreNew+0x122>
          name = attr->name;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	61fb      	str	r3, [r7, #28]
 800ea98:	e001      	b.n	800ea9e <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ea9e:	69f9      	ldr	r1, [r7, #28]
 800eaa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaa2:	f001 ff63 	bl	801096c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3728      	adds	r7, #40	; 0x28
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20000b1c 	.word	0x20000b1c

0800eab4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eacc:	f06f 0303 	mvn.w	r3, #3
 800ead0:	61fb      	str	r3, [r7, #28]
 800ead2:	e04b      	b.n	800eb6c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ead4:	f3ef 8305 	mrs	r3, IPSR
 800ead8:	617b      	str	r3, [r7, #20]
  return(result);
 800eada:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10f      	bne.n	800eb00 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eae0:	f3ef 8310 	mrs	r3, PRIMASK
 800eae4:	613b      	str	r3, [r7, #16]
  return(result);
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d109      	bne.n	800eb00 <osSemaphoreAcquire+0x4c>
 800eaec:	4b22      	ldr	r3, [pc, #136]	; (800eb78 <osSemaphoreAcquire+0xc4>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d128      	bne.n	800eb46 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eaf4:	f3ef 8311 	mrs	r3, BASEPRI
 800eaf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d022      	beq.n	800eb46 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800eb06:	f06f 0303 	mvn.w	r3, #3
 800eb0a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eb0c:	e02d      	b.n	800eb6a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eb12:	f107 0308 	add.w	r3, r7, #8
 800eb16:	461a      	mov	r2, r3
 800eb18:	2100      	movs	r1, #0
 800eb1a:	69b8      	ldr	r0, [r7, #24]
 800eb1c:	f001 fd5e 	bl	80105dc <xQueueReceiveFromISR>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d003      	beq.n	800eb2e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800eb26:	f06f 0302 	mvn.w	r3, #2
 800eb2a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eb2c:	e01d      	b.n	800eb6a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d01a      	beq.n	800eb6a <osSemaphoreAcquire+0xb6>
 800eb34:	4b11      	ldr	r3, [pc, #68]	; (800eb7c <osSemaphoreAcquire+0xc8>)
 800eb36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb3a:	601a      	str	r2, [r3, #0]
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800eb44:	e011      	b.n	800eb6a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800eb46:	6839      	ldr	r1, [r7, #0]
 800eb48:	69b8      	ldr	r0, [r7, #24]
 800eb4a:	f001 fc3f 	bl	80103cc <xQueueSemaphoreTake>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d00b      	beq.n	800eb6c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d003      	beq.n	800eb62 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800eb5a:	f06f 0301 	mvn.w	r3, #1
 800eb5e:	61fb      	str	r3, [r7, #28]
 800eb60:	e004      	b.n	800eb6c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800eb62:	f06f 0302 	mvn.w	r3, #2
 800eb66:	61fb      	str	r3, [r7, #28]
 800eb68:	e000      	b.n	800eb6c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800eb6a:	bf00      	nop
      }
    }
  }

  return (stat);
 800eb6c:	69fb      	ldr	r3, [r7, #28]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3720      	adds	r7, #32
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	20000b1c 	.word	0x20000b1c
 800eb7c:	e000ed04 	.word	0xe000ed04

0800eb80 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b088      	sub	sp, #32
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d103      	bne.n	800eb9e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800eb96:	f06f 0303 	mvn.w	r3, #3
 800eb9a:	61fb      	str	r3, [r7, #28]
 800eb9c:	e03e      	b.n	800ec1c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb9e:	f3ef 8305 	mrs	r3, IPSR
 800eba2:	617b      	str	r3, [r7, #20]
  return(result);
 800eba4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10f      	bne.n	800ebca <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ebae:	613b      	str	r3, [r7, #16]
  return(result);
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d109      	bne.n	800ebca <osSemaphoreRelease+0x4a>
 800ebb6:	4b1c      	ldr	r3, [pc, #112]	; (800ec28 <osSemaphoreRelease+0xa8>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d120      	bne.n	800ec00 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebbe:	f3ef 8311 	mrs	r3, BASEPRI
 800ebc2:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d01a      	beq.n	800ec00 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ebce:	f107 0308 	add.w	r3, r7, #8
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	69b8      	ldr	r0, [r7, #24]
 800ebd6:	f001 fa93 	bl	8010100 <xQueueGiveFromISR>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d003      	beq.n	800ebe8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ebe0:	f06f 0302 	mvn.w	r3, #2
 800ebe4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ebe6:	e018      	b.n	800ec1a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d015      	beq.n	800ec1a <osSemaphoreRelease+0x9a>
 800ebee:	4b0f      	ldr	r3, [pc, #60]	; (800ec2c <osSemaphoreRelease+0xac>)
 800ebf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ebfe:	e00c      	b.n	800ec1a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ec00:	2300      	movs	r3, #0
 800ec02:	2200      	movs	r2, #0
 800ec04:	2100      	movs	r1, #0
 800ec06:	69b8      	ldr	r0, [r7, #24]
 800ec08:	f001 f8ec 	bl	800fde4 <xQueueGenericSend>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d004      	beq.n	800ec1c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ec12:	f06f 0302 	mvn.w	r3, #2
 800ec16:	61fb      	str	r3, [r7, #28]
 800ec18:	e000      	b.n	800ec1c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ec1a:	bf00      	nop
    }
  }

  return (stat);
 800ec1c:	69fb      	ldr	r3, [r7, #28]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3720      	adds	r7, #32
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20000b1c 	.word	0x20000b1c
 800ec2c:	e000ed04 	.word	0xe000ed04

0800ec30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08c      	sub	sp, #48	; 0x30
 800ec34:	af02      	add	r7, sp, #8
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec40:	f3ef 8305 	mrs	r3, IPSR
 800ec44:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d170      	bne.n	800ed2e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec50:	617b      	str	r3, [r7, #20]
  return(result);
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d16a      	bne.n	800ed2e <osMessageQueueNew+0xfe>
 800ec58:	4b37      	ldr	r3, [pc, #220]	; (800ed38 <osMessageQueueNew+0x108>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d105      	bne.n	800ec6c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec60:	f3ef 8311 	mrs	r3, BASEPRI
 800ec64:	613b      	str	r3, [r7, #16]
  return(result);
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d160      	bne.n	800ed2e <osMessageQueueNew+0xfe>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d05d      	beq.n	800ed2e <osMessageQueueNew+0xfe>
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d05a      	beq.n	800ed2e <osMessageQueueNew+0xfe>
    mem = -1;
 800ec78:	f04f 33ff 	mov.w	r3, #4294967295
 800ec7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d029      	beq.n	800ecd8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d012      	beq.n	800ecb2 <osMessageQueueNew+0x82>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	2b4f      	cmp	r3, #79	; 0x4f
 800ec92:	d90e      	bls.n	800ecb2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d00a      	beq.n	800ecb2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	695a      	ldr	r2, [r3, #20]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	68b9      	ldr	r1, [r7, #8]
 800eca4:	fb01 f303 	mul.w	r3, r1, r3
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d302      	bcc.n	800ecb2 <osMessageQueueNew+0x82>
        mem = 1;
 800ecac:	2301      	movs	r3, #1
 800ecae:	623b      	str	r3, [r7, #32]
 800ecb0:	e014      	b.n	800ecdc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	689b      	ldr	r3, [r3, #8]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d110      	bne.n	800ecdc <osMessageQueueNew+0xac>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10c      	bne.n	800ecdc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d108      	bne.n	800ecdc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	695b      	ldr	r3, [r3, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d104      	bne.n	800ecdc <osMessageQueueNew+0xac>
          mem = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	623b      	str	r3, [r7, #32]
 800ecd6:	e001      	b.n	800ecdc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ecdc:	6a3b      	ldr	r3, [r7, #32]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d10c      	bne.n	800ecfc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	691a      	ldr	r2, [r3, #16]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6899      	ldr	r1, [r3, #8]
 800ecea:	2300      	movs	r3, #0
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	460b      	mov	r3, r1
 800ecf0:	68b9      	ldr	r1, [r7, #8]
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f000 fe88 	bl	800fa08 <xQueueGenericCreateStatic>
 800ecf8:	6278      	str	r0, [r7, #36]	; 0x24
 800ecfa:	e008      	b.n	800ed0e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ecfc:	6a3b      	ldr	r3, [r7, #32]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d105      	bne.n	800ed0e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ed02:	2200      	movs	r2, #0
 800ed04:	68b9      	ldr	r1, [r7, #8]
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f000 fef0 	bl	800faec <xQueueGenericCreate>
 800ed0c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00c      	beq.n	800ed2e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d003      	beq.n	800ed22 <osMessageQueueNew+0xf2>
        name = attr->name;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	61fb      	str	r3, [r7, #28]
 800ed20:	e001      	b.n	800ed26 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed26:	69f9      	ldr	r1, [r7, #28]
 800ed28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed2a:	f001 fe1f 	bl	801096c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3728      	adds	r7, #40	; 0x28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	20000b1c 	.word	0x20000b1c

0800ed3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b08a      	sub	sp, #40	; 0x28
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	603b      	str	r3, [r7, #0]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed54:	f3ef 8305 	mrs	r3, IPSR
 800ed58:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed5a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10f      	bne.n	800ed80 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed60:	f3ef 8310 	mrs	r3, PRIMASK
 800ed64:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d109      	bne.n	800ed80 <osMessageQueuePut+0x44>
 800ed6c:	4b2b      	ldr	r3, [pc, #172]	; (800ee1c <osMessageQueuePut+0xe0>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d12e      	bne.n	800edd2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed74:	f3ef 8311 	mrs	r3, BASEPRI
 800ed78:	617b      	str	r3, [r7, #20]
  return(result);
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d028      	beq.n	800edd2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d005      	beq.n	800ed92 <osMessageQueuePut+0x56>
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d002      	beq.n	800ed92 <osMessageQueuePut+0x56>
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d003      	beq.n	800ed9a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ed92:	f06f 0303 	mvn.w	r3, #3
 800ed96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed98:	e039      	b.n	800ee0e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ed9e:	f107 0210 	add.w	r2, r7, #16
 800eda2:	2300      	movs	r3, #0
 800eda4:	68b9      	ldr	r1, [r7, #8]
 800eda6:	6a38      	ldr	r0, [r7, #32]
 800eda8:	f001 f916 	bl	800ffd8 <xQueueGenericSendFromISR>
 800edac:	4603      	mov	r3, r0
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d003      	beq.n	800edba <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800edb2:	f06f 0302 	mvn.w	r3, #2
 800edb6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edb8:	e029      	b.n	800ee0e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d026      	beq.n	800ee0e <osMessageQueuePut+0xd2>
 800edc0:	4b17      	ldr	r3, [pc, #92]	; (800ee20 <osMessageQueuePut+0xe4>)
 800edc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edc6:	601a      	str	r2, [r3, #0]
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edd0:	e01d      	b.n	800ee0e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d002      	beq.n	800edde <osMessageQueuePut+0xa2>
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d103      	bne.n	800ede6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800edde:	f06f 0303 	mvn.w	r3, #3
 800ede2:	627b      	str	r3, [r7, #36]	; 0x24
 800ede4:	e014      	b.n	800ee10 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ede6:	2300      	movs	r3, #0
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	68b9      	ldr	r1, [r7, #8]
 800edec:	6a38      	ldr	r0, [r7, #32]
 800edee:	f000 fff9 	bl	800fde4 <xQueueGenericSend>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d00b      	beq.n	800ee10 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d003      	beq.n	800ee06 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800edfe:	f06f 0301 	mvn.w	r3, #1
 800ee02:	627b      	str	r3, [r7, #36]	; 0x24
 800ee04:	e004      	b.n	800ee10 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ee06:	f06f 0302 	mvn.w	r3, #2
 800ee0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee0c:	e000      	b.n	800ee10 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3728      	adds	r7, #40	; 0x28
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20000b1c 	.word	0x20000b1c
 800ee20:	e000ed04 	.word	0xe000ed04

0800ee24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b08a      	sub	sp, #40	; 0x28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee3a:	f3ef 8305 	mrs	r3, IPSR
 800ee3e:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee40:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10f      	bne.n	800ee66 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee46:	f3ef 8310 	mrs	r3, PRIMASK
 800ee4a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d109      	bne.n	800ee66 <osMessageQueueGet+0x42>
 800ee52:	4b2b      	ldr	r3, [pc, #172]	; (800ef00 <osMessageQueueGet+0xdc>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d12e      	bne.n	800eeb8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee5a:	f3ef 8311 	mrs	r3, BASEPRI
 800ee5e:	617b      	str	r3, [r7, #20]
  return(result);
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d028      	beq.n	800eeb8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d005      	beq.n	800ee78 <osMessageQueueGet+0x54>
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <osMessageQueueGet+0x54>
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ee78:	f06f 0303 	mvn.w	r3, #3
 800ee7c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee7e:	e038      	b.n	800eef2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ee80:	2300      	movs	r3, #0
 800ee82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ee84:	f107 0310 	add.w	r3, r7, #16
 800ee88:	461a      	mov	r2, r3
 800ee8a:	68b9      	ldr	r1, [r7, #8]
 800ee8c:	6a38      	ldr	r0, [r7, #32]
 800ee8e:	f001 fba5 	bl	80105dc <xQueueReceiveFromISR>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d003      	beq.n	800eea0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ee98:	f06f 0302 	mvn.w	r3, #2
 800ee9c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee9e:	e028      	b.n	800eef2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d025      	beq.n	800eef2 <osMessageQueueGet+0xce>
 800eea6:	4b17      	ldr	r3, [pc, #92]	; (800ef04 <osMessageQueueGet+0xe0>)
 800eea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eeb6:	e01c      	b.n	800eef2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eeb8:	6a3b      	ldr	r3, [r7, #32]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d002      	beq.n	800eec4 <osMessageQueueGet+0xa0>
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d103      	bne.n	800eecc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800eec4:	f06f 0303 	mvn.w	r3, #3
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24
 800eeca:	e013      	b.n	800eef4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	68b9      	ldr	r1, [r7, #8]
 800eed0:	6a38      	ldr	r0, [r7, #32]
 800eed2:	f001 f99f 	bl	8010214 <xQueueReceive>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d00b      	beq.n	800eef4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d003      	beq.n	800eeea <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800eee2:	f06f 0301 	mvn.w	r3, #1
 800eee6:	627b      	str	r3, [r7, #36]	; 0x24
 800eee8:	e004      	b.n	800eef4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800eeea:	f06f 0302 	mvn.w	r3, #2
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
 800eef0:	e000      	b.n	800eef4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eef2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3728      	adds	r7, #40	; 0x28
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20000b1c 	.word	0x20000b1c
 800ef04:	e000ed04 	.word	0xe000ed04

0800ef08 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef14:	f3ef 8305 	mrs	r3, IPSR
 800ef18:	617b      	str	r3, [r7, #20]
  return(result);
 800ef1a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10f      	bne.n	800ef40 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef20:	f3ef 8310 	mrs	r3, PRIMASK
 800ef24:	613b      	str	r3, [r7, #16]
  return(result);
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d109      	bne.n	800ef40 <osMessageQueueReset+0x38>
 800ef2c:	4b0f      	ldr	r3, [pc, #60]	; (800ef6c <osMessageQueueReset+0x64>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d109      	bne.n	800ef48 <osMessageQueueReset+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef34:	f3ef 8311 	mrs	r3, BASEPRI
 800ef38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d003      	beq.n	800ef48 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 800ef40:	f06f 0305 	mvn.w	r3, #5
 800ef44:	61fb      	str	r3, [r7, #28]
 800ef46:	e00c      	b.n	800ef62 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d103      	bne.n	800ef56 <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 800ef4e:	f06f 0303 	mvn.w	r3, #3
 800ef52:	61fb      	str	r3, [r7, #28]
 800ef54:	e005      	b.n	800ef62 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 800ef56:	2300      	movs	r3, #0
 800ef58:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	69b8      	ldr	r0, [r7, #24]
 800ef5e:	f000 fceb 	bl	800f938 <xQueueGenericReset>
  }

  return (stat);
 800ef62:	69fb      	ldr	r3, [r7, #28]
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3720      	adds	r7, #32
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	20000b1c 	.word	0x20000b1c

0800ef70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	4a07      	ldr	r2, [pc, #28]	; (800ef9c <vApplicationGetIdleTaskMemory+0x2c>)
 800ef80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	4a06      	ldr	r2, [pc, #24]	; (800efa0 <vApplicationGetIdleTaskMemory+0x30>)
 800ef86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef8e:	601a      	str	r2, [r3, #0]
}
 800ef90:	bf00      	nop
 800ef92:	3714      	adds	r7, #20
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr
 800ef9c:	20000b20 	.word	0x20000b20
 800efa0:	20000b84 	.word	0x20000b84

0800efa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4a07      	ldr	r2, [pc, #28]	; (800efd0 <vApplicationGetTimerTaskMemory+0x2c>)
 800efb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	4a06      	ldr	r2, [pc, #24]	; (800efd4 <vApplicationGetTimerTaskMemory+0x30>)
 800efba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800efc2:	601a      	str	r2, [r3, #0]
}
 800efc4:	bf00      	nop
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr
 800efd0:	20001384 	.word	0x20001384
 800efd4:	200013e8 	.word	0x200013e8

0800efd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800efe0:	2300      	movs	r3, #0
 800efe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800efe4:	f001 ff7c 	bl	8010ee0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800efe8:	4b59      	ldr	r3, [pc, #356]	; (800f150 <pvPortMalloc+0x178>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d101      	bne.n	800eff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eff0:	f000 f910 	bl	800f214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eff4:	4b57      	ldr	r3, [pc, #348]	; (800f154 <pvPortMalloc+0x17c>)
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4013      	ands	r3, r2
 800effc:	2b00      	cmp	r3, #0
 800effe:	f040 808c 	bne.w	800f11a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d01c      	beq.n	800f042 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f008:	2208      	movs	r2, #8
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4413      	add	r3, r2
 800f00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f003 0307 	and.w	r3, r3, #7
 800f016:	2b00      	cmp	r3, #0
 800f018:	d013      	beq.n	800f042 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f023 0307 	bic.w	r3, r3, #7
 800f020:	3308      	adds	r3, #8
 800f022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f003 0307 	and.w	r3, r3, #7
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d009      	beq.n	800f042 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	617b      	str	r3, [r7, #20]
 800f040:	e7fe      	b.n	800f040 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d068      	beq.n	800f11a <pvPortMalloc+0x142>
 800f048:	4b43      	ldr	r3, [pc, #268]	; (800f158 <pvPortMalloc+0x180>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d863      	bhi.n	800f11a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f052:	4b42      	ldr	r3, [pc, #264]	; (800f15c <pvPortMalloc+0x184>)
 800f054:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f056:	4b41      	ldr	r3, [pc, #260]	; (800f15c <pvPortMalloc+0x184>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f05c:	e004      	b.n	800f068 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f060:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d903      	bls.n	800f07a <pvPortMalloc+0xa2>
 800f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1f1      	bne.n	800f05e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f07a:	4b35      	ldr	r3, [pc, #212]	; (800f150 <pvPortMalloc+0x178>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f080:	429a      	cmp	r2, r3
 800f082:	d04a      	beq.n	800f11a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f084:	6a3b      	ldr	r3, [r7, #32]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2208      	movs	r2, #8
 800f08a:	4413      	add	r3, r2
 800f08c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	6a3b      	ldr	r3, [r7, #32]
 800f094:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	685a      	ldr	r2, [r3, #4]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	1ad2      	subs	r2, r2, r3
 800f09e:	2308      	movs	r3, #8
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d91e      	bls.n	800f0e4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	f003 0307 	and.w	r3, r3, #7
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d009      	beq.n	800f0cc <pvPortMalloc+0xf4>
 800f0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	613b      	str	r3, [r7, #16]
 800f0ca:	e7fe      	b.n	800f0ca <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	685a      	ldr	r2, [r3, #4]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	1ad2      	subs	r2, r2, r3
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0de:	69b8      	ldr	r0, [r7, #24]
 800f0e0:	f000 f8fc 	bl	800f2dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0e4:	4b1c      	ldr	r3, [pc, #112]	; (800f158 <pvPortMalloc+0x180>)
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	1ad3      	subs	r3, r2, r3
 800f0ee:	4a1a      	ldr	r2, [pc, #104]	; (800f158 <pvPortMalloc+0x180>)
 800f0f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0f2:	4b19      	ldr	r3, [pc, #100]	; (800f158 <pvPortMalloc+0x180>)
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	4b1a      	ldr	r3, [pc, #104]	; (800f160 <pvPortMalloc+0x188>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d203      	bcs.n	800f106 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0fe:	4b16      	ldr	r3, [pc, #88]	; (800f158 <pvPortMalloc+0x180>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a17      	ldr	r2, [pc, #92]	; (800f160 <pvPortMalloc+0x188>)
 800f104:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f108:	685a      	ldr	r2, [r3, #4]
 800f10a:	4b12      	ldr	r3, [pc, #72]	; (800f154 <pvPortMalloc+0x17c>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	431a      	orrs	r2, r3
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	2200      	movs	r2, #0
 800f118:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f11a:	f001 ff27 	bl	8010f6c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d101      	bne.n	800f128 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f124:	f7f2 f8ac 	bl	8001280 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	f003 0307 	and.w	r3, r3, #7
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d009      	beq.n	800f146 <pvPortMalloc+0x16e>
 800f132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	e7fe      	b.n	800f144 <pvPortMalloc+0x16c>
	return pvReturn;
 800f146:	69fb      	ldr	r3, [r7, #28]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3728      	adds	r7, #40	; 0x28
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	20026de0 	.word	0x20026de0
 800f154:	20026dec 	.word	0x20026dec
 800f158:	20026de4 	.word	0x20026de4
 800f15c:	20026dd8 	.word	0x20026dd8
 800f160:	20026de8 	.word	0x20026de8

0800f164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b086      	sub	sp, #24
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d046      	beq.n	800f204 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f176:	2308      	movs	r3, #8
 800f178:	425b      	negs	r3, r3
 800f17a:	697a      	ldr	r2, [r7, #20]
 800f17c:	4413      	add	r3, r2
 800f17e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	685a      	ldr	r2, [r3, #4]
 800f188:	4b20      	ldr	r3, [pc, #128]	; (800f20c <vPortFree+0xa8>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4013      	ands	r3, r2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d109      	bne.n	800f1a6 <vPortFree+0x42>
 800f192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f196:	f383 8811 	msr	BASEPRI, r3
 800f19a:	f3bf 8f6f 	isb	sy
 800f19e:	f3bf 8f4f 	dsb	sy
 800f1a2:	60fb      	str	r3, [r7, #12]
 800f1a4:	e7fe      	b.n	800f1a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d009      	beq.n	800f1c2 <vPortFree+0x5e>
 800f1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b2:	f383 8811 	msr	BASEPRI, r3
 800f1b6:	f3bf 8f6f 	isb	sy
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	60bb      	str	r3, [r7, #8]
 800f1c0:	e7fe      	b.n	800f1c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	4b11      	ldr	r3, [pc, #68]	; (800f20c <vPortFree+0xa8>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d019      	beq.n	800f204 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d115      	bne.n	800f204 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	4b0b      	ldr	r3, [pc, #44]	; (800f20c <vPortFree+0xa8>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	43db      	mvns	r3, r3
 800f1e2:	401a      	ands	r2, r3
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f1e8:	f001 fe7a 	bl	8010ee0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	4b07      	ldr	r3, [pc, #28]	; (800f210 <vPortFree+0xac>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	4a06      	ldr	r2, [pc, #24]	; (800f210 <vPortFree+0xac>)
 800f1f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1fa:	6938      	ldr	r0, [r7, #16]
 800f1fc:	f000 f86e 	bl	800f2dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f200:	f001 feb4 	bl	8010f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f204:	bf00      	nop
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20026dec 	.word	0x20026dec
 800f210:	20026de4 	.word	0x20026de4

0800f214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f214:	b480      	push	{r7}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f21a:	4b29      	ldr	r3, [pc, #164]	; (800f2c0 <prvHeapInit+0xac>)
 800f21c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f21e:	4b29      	ldr	r3, [pc, #164]	; (800f2c4 <prvHeapInit+0xb0>)
 800f220:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f003 0307 	and.w	r3, r3, #7
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00c      	beq.n	800f246 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3307      	adds	r3, #7
 800f230:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f023 0307 	bic.w	r3, r3, #7
 800f238:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	4a20      	ldr	r2, [pc, #128]	; (800f2c4 <prvHeapInit+0xb0>)
 800f242:	4413      	add	r3, r2
 800f244:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f24a:	4a1f      	ldr	r2, [pc, #124]	; (800f2c8 <prvHeapInit+0xb4>)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f250:	4b1d      	ldr	r3, [pc, #116]	; (800f2c8 <prvHeapInit+0xb4>)
 800f252:	2200      	movs	r2, #0
 800f254:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	4413      	add	r3, r2
 800f25c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f25e:	2208      	movs	r2, #8
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	1a9b      	subs	r3, r3, r2
 800f264:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f023 0307 	bic.w	r3, r3, #7
 800f26c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	4a16      	ldr	r2, [pc, #88]	; (800f2cc <prvHeapInit+0xb8>)
 800f272:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f274:	4b15      	ldr	r3, [pc, #84]	; (800f2cc <prvHeapInit+0xb8>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2200      	movs	r2, #0
 800f27a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f27c:	4b13      	ldr	r3, [pc, #76]	; (800f2cc <prvHeapInit+0xb8>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2200      	movs	r2, #0
 800f282:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	1ad2      	subs	r2, r2, r3
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f292:	4b0e      	ldr	r3, [pc, #56]	; (800f2cc <prvHeapInit+0xb8>)
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	4a0c      	ldr	r2, [pc, #48]	; (800f2d0 <prvHeapInit+0xbc>)
 800f2a0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	4a0b      	ldr	r2, [pc, #44]	; (800f2d4 <prvHeapInit+0xc0>)
 800f2a8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f2aa:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <prvHeapInit+0xc4>)
 800f2ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f2b0:	601a      	str	r2, [r3, #0]
}
 800f2b2:	bf00      	nop
 800f2b4:	3714      	adds	r7, #20
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	000249f0 	.word	0x000249f0
 800f2c4:	200023e8 	.word	0x200023e8
 800f2c8:	20026dd8 	.word	0x20026dd8
 800f2cc:	20026de0 	.word	0x20026de0
 800f2d0:	20026de8 	.word	0x20026de8
 800f2d4:	20026de4 	.word	0x20026de4
 800f2d8:	20026dec 	.word	0x20026dec

0800f2dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2e4:	4b28      	ldr	r3, [pc, #160]	; (800f388 <prvInsertBlockIntoFreeList+0xac>)
 800f2e6:	60fb      	str	r3, [r7, #12]
 800f2e8:	e002      	b.n	800f2f0 <prvInsertBlockIntoFreeList+0x14>
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d8f7      	bhi.n	800f2ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	4413      	add	r3, r2
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d108      	bne.n	800f31e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	685a      	ldr	r2, [r3, #4]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	441a      	add	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	68ba      	ldr	r2, [r7, #8]
 800f328:	441a      	add	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d118      	bne.n	800f364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	4b15      	ldr	r3, [pc, #84]	; (800f38c <prvInsertBlockIntoFreeList+0xb0>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d00d      	beq.n	800f35a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	441a      	add	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	601a      	str	r2, [r3, #0]
 800f358:	e008      	b.n	800f36c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f35a:	4b0c      	ldr	r3, [pc, #48]	; (800f38c <prvInsertBlockIntoFreeList+0xb0>)
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	601a      	str	r2, [r3, #0]
 800f362:	e003      	b.n	800f36c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	429a      	cmp	r2, r3
 800f372:	d002      	beq.n	800f37a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f37a:	bf00      	nop
 800f37c:	3714      	adds	r7, #20
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	20026dd8 	.word	0x20026dd8
 800f38c:	20026de0 	.word	0x20026de0

0800f390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f103 0208 	add.w	r2, r3, #8
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f103 0208 	add.w	r2, r3, #8
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f103 0208 	add.w	r2, r3, #8
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3c4:	bf00      	nop
 800f3c6:	370c      	adds	r7, #12
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3de:	bf00      	nop
 800f3e0:	370c      	adds	r7, #12
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3ea:	b480      	push	{r7}
 800f3ec:	b085      	sub	sp, #20
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	689a      	ldr	r2, [r3, #8]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	683a      	ldr	r2, [r7, #0]
 800f40e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	683a      	ldr	r2, [r7, #0]
 800f414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	1c5a      	adds	r2, r3, #1
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	601a      	str	r2, [r3, #0]
}
 800f426:	bf00      	nop
 800f428:	3714      	adds	r7, #20
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr

0800f432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f432:	b480      	push	{r7}
 800f434:	b085      	sub	sp, #20
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f448:	d103      	bne.n	800f452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	60fb      	str	r3, [r7, #12]
 800f450:	e00c      	b.n	800f46c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	3308      	adds	r3, #8
 800f456:	60fb      	str	r3, [r7, #12]
 800f458:	e002      	b.n	800f460 <vListInsert+0x2e>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	60fb      	str	r3, [r7, #12]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	68ba      	ldr	r2, [r7, #8]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d2f6      	bcs.n	800f45a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	685a      	ldr	r2, [r3, #4]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	683a      	ldr	r2, [r7, #0]
 800f47a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	683a      	ldr	r2, [r7, #0]
 800f486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	1c5a      	adds	r2, r3, #1
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	601a      	str	r2, [r3, #0]
}
 800f498:	bf00      	nop
 800f49a:	3714      	adds	r7, #20
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	6892      	ldr	r2, [r2, #8]
 800f4ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	6852      	ldr	r2, [r2, #4]
 800f4c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d103      	bne.n	800f4d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	689a      	ldr	r2, [r3, #8]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	1e5a      	subs	r2, r3, #1
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3714      	adds	r7, #20
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	3b04      	subs	r3, #4
 800f508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3b04      	subs	r3, #4
 800f516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	f023 0201 	bic.w	r2, r3, #1
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	3b04      	subs	r3, #4
 800f526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f528:	4a0c      	ldr	r2, [pc, #48]	; (800f55c <pxPortInitialiseStack+0x64>)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3b14      	subs	r3, #20
 800f532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3b04      	subs	r3, #4
 800f53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f06f 0202 	mvn.w	r2, #2
 800f546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3b20      	subs	r3, #32
 800f54c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f54e:	68fb      	ldr	r3, [r7, #12]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3714      	adds	r7, #20
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	0800f561 	.word	0x0800f561

0800f560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f56a:	4b11      	ldr	r3, [pc, #68]	; (800f5b0 <prvTaskExitError+0x50>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f572:	d009      	beq.n	800f588 <prvTaskExitError+0x28>
 800f574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f578:	f383 8811 	msr	BASEPRI, r3
 800f57c:	f3bf 8f6f 	isb	sy
 800f580:	f3bf 8f4f 	dsb	sy
 800f584:	60fb      	str	r3, [r7, #12]
 800f586:	e7fe      	b.n	800f586 <prvTaskExitError+0x26>
 800f588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58c:	f383 8811 	msr	BASEPRI, r3
 800f590:	f3bf 8f6f 	isb	sy
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f59a:	bf00      	nop
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d0fc      	beq.n	800f59c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5a2:	bf00      	nop
 800f5a4:	3714      	adds	r7, #20
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	20000084 	.word	0x20000084
	...

0800f5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5c0:	4b07      	ldr	r3, [pc, #28]	; (800f5e0 <pxCurrentTCBConst2>)
 800f5c2:	6819      	ldr	r1, [r3, #0]
 800f5c4:	6808      	ldr	r0, [r1, #0]
 800f5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ca:	f380 8809 	msr	PSP, r0
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f04f 0000 	mov.w	r0, #0
 800f5d6:	f380 8811 	msr	BASEPRI, r0
 800f5da:	4770      	bx	lr
 800f5dc:	f3af 8000 	nop.w

0800f5e0 <pxCurrentTCBConst2>:
 800f5e0:	20026df8 	.word	0x20026df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5e4:	bf00      	nop
 800f5e6:	bf00      	nop

0800f5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5e8:	4808      	ldr	r0, [pc, #32]	; (800f60c <prvPortStartFirstTask+0x24>)
 800f5ea:	6800      	ldr	r0, [r0, #0]
 800f5ec:	6800      	ldr	r0, [r0, #0]
 800f5ee:	f380 8808 	msr	MSP, r0
 800f5f2:	f04f 0000 	mov.w	r0, #0
 800f5f6:	f380 8814 	msr	CONTROL, r0
 800f5fa:	b662      	cpsie	i
 800f5fc:	b661      	cpsie	f
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	df00      	svc	0
 800f608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f60a:	bf00      	nop
 800f60c:	e000ed08 	.word	0xe000ed08

0800f610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f616:	4b44      	ldr	r3, [pc, #272]	; (800f728 <xPortStartScheduler+0x118>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a44      	ldr	r2, [pc, #272]	; (800f72c <xPortStartScheduler+0x11c>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d109      	bne.n	800f634 <xPortStartScheduler+0x24>
 800f620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f624:	f383 8811 	msr	BASEPRI, r3
 800f628:	f3bf 8f6f 	isb	sy
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	613b      	str	r3, [r7, #16]
 800f632:	e7fe      	b.n	800f632 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f634:	4b3c      	ldr	r3, [pc, #240]	; (800f728 <xPortStartScheduler+0x118>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a3d      	ldr	r2, [pc, #244]	; (800f730 <xPortStartScheduler+0x120>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d109      	bne.n	800f652 <xPortStartScheduler+0x42>
 800f63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f642:	f383 8811 	msr	BASEPRI, r3
 800f646:	f3bf 8f6f 	isb	sy
 800f64a:	f3bf 8f4f 	dsb	sy
 800f64e:	60fb      	str	r3, [r7, #12]
 800f650:	e7fe      	b.n	800f650 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f652:	4b38      	ldr	r3, [pc, #224]	; (800f734 <xPortStartScheduler+0x124>)
 800f654:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	22ff      	movs	r2, #255	; 0xff
 800f662:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f66c:	78fb      	ldrb	r3, [r7, #3]
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f674:	b2da      	uxtb	r2, r3
 800f676:	4b30      	ldr	r3, [pc, #192]	; (800f738 <xPortStartScheduler+0x128>)
 800f678:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f67a:	4b30      	ldr	r3, [pc, #192]	; (800f73c <xPortStartScheduler+0x12c>)
 800f67c:	2207      	movs	r2, #7
 800f67e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f680:	e009      	b.n	800f696 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f682:	4b2e      	ldr	r3, [pc, #184]	; (800f73c <xPortStartScheduler+0x12c>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	3b01      	subs	r3, #1
 800f688:	4a2c      	ldr	r2, [pc, #176]	; (800f73c <xPortStartScheduler+0x12c>)
 800f68a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f68c:	78fb      	ldrb	r3, [r7, #3]
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	005b      	lsls	r3, r3, #1
 800f692:	b2db      	uxtb	r3, r3
 800f694:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f696:	78fb      	ldrb	r3, [r7, #3]
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f69e:	2b80      	cmp	r3, #128	; 0x80
 800f6a0:	d0ef      	beq.n	800f682 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6a2:	4b26      	ldr	r3, [pc, #152]	; (800f73c <xPortStartScheduler+0x12c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f1c3 0307 	rsb	r3, r3, #7
 800f6aa:	2b04      	cmp	r3, #4
 800f6ac:	d009      	beq.n	800f6c2 <xPortStartScheduler+0xb2>
 800f6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b2:	f383 8811 	msr	BASEPRI, r3
 800f6b6:	f3bf 8f6f 	isb	sy
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	60bb      	str	r3, [r7, #8]
 800f6c0:	e7fe      	b.n	800f6c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6c2:	4b1e      	ldr	r3, [pc, #120]	; (800f73c <xPortStartScheduler+0x12c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	021b      	lsls	r3, r3, #8
 800f6c8:	4a1c      	ldr	r2, [pc, #112]	; (800f73c <xPortStartScheduler+0x12c>)
 800f6ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6cc:	4b1b      	ldr	r3, [pc, #108]	; (800f73c <xPortStartScheduler+0x12c>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6d4:	4a19      	ldr	r2, [pc, #100]	; (800f73c <xPortStartScheduler+0x12c>)
 800f6d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6e0:	4b17      	ldr	r3, [pc, #92]	; (800f740 <xPortStartScheduler+0x130>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a16      	ldr	r2, [pc, #88]	; (800f740 <xPortStartScheduler+0x130>)
 800f6e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6ec:	4b14      	ldr	r3, [pc, #80]	; (800f740 <xPortStartScheduler+0x130>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a13      	ldr	r2, [pc, #76]	; (800f740 <xPortStartScheduler+0x130>)
 800f6f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6f8:	f7f2 fe54 	bl	80023a4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6fc:	4b11      	ldr	r3, [pc, #68]	; (800f744 <xPortStartScheduler+0x134>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f702:	f000 f8d1 	bl	800f8a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f706:	4b10      	ldr	r3, [pc, #64]	; (800f748 <xPortStartScheduler+0x138>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a0f      	ldr	r2, [pc, #60]	; (800f748 <xPortStartScheduler+0x138>)
 800f70c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f710:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f712:	f7ff ff69 	bl	800f5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f716:	f001 fdc1 	bl	801129c <vTaskSwitchContext>
	prvTaskExitError();
 800f71a:	f7ff ff21 	bl	800f560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	e000ed00 	.word	0xe000ed00
 800f72c:	410fc271 	.word	0x410fc271
 800f730:	410fc270 	.word	0x410fc270
 800f734:	e000e400 	.word	0xe000e400
 800f738:	20026df0 	.word	0x20026df0
 800f73c:	20026df4 	.word	0x20026df4
 800f740:	e000ed20 	.word	0xe000ed20
 800f744:	20000084 	.word	0x20000084
 800f748:	e000ef34 	.word	0xe000ef34

0800f74c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f756:	f383 8811 	msr	BASEPRI, r3
 800f75a:	f3bf 8f6f 	isb	sy
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f764:	4b0e      	ldr	r3, [pc, #56]	; (800f7a0 <vPortEnterCritical+0x54>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	3301      	adds	r3, #1
 800f76a:	4a0d      	ldr	r2, [pc, #52]	; (800f7a0 <vPortEnterCritical+0x54>)
 800f76c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f76e:	4b0c      	ldr	r3, [pc, #48]	; (800f7a0 <vPortEnterCritical+0x54>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b01      	cmp	r3, #1
 800f774:	d10e      	bne.n	800f794 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f776:	4b0b      	ldr	r3, [pc, #44]	; (800f7a4 <vPortEnterCritical+0x58>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d009      	beq.n	800f794 <vPortEnterCritical+0x48>
 800f780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	603b      	str	r3, [r7, #0]
 800f792:	e7fe      	b.n	800f792 <vPortEnterCritical+0x46>
	}
}
 800f794:	bf00      	nop
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	20000084 	.word	0x20000084
 800f7a4:	e000ed04 	.word	0xe000ed04

0800f7a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f7ae:	4b11      	ldr	r3, [pc, #68]	; (800f7f4 <vPortExitCritical+0x4c>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d109      	bne.n	800f7ca <vPortExitCritical+0x22>
 800f7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ba:	f383 8811 	msr	BASEPRI, r3
 800f7be:	f3bf 8f6f 	isb	sy
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	607b      	str	r3, [r7, #4]
 800f7c8:	e7fe      	b.n	800f7c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f7ca:	4b0a      	ldr	r3, [pc, #40]	; (800f7f4 <vPortExitCritical+0x4c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	4a08      	ldr	r2, [pc, #32]	; (800f7f4 <vPortExitCritical+0x4c>)
 800f7d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f7d4:	4b07      	ldr	r3, [pc, #28]	; (800f7f4 <vPortExitCritical+0x4c>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d104      	bne.n	800f7e6 <vPortExitCritical+0x3e>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f7e6:	bf00      	nop
 800f7e8:	370c      	adds	r7, #12
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
 800f7f4:	20000084 	.word	0x20000084
	...

0800f800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f800:	f3ef 8009 	mrs	r0, PSP
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	4b15      	ldr	r3, [pc, #84]	; (800f860 <pxCurrentTCBConst>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	f01e 0f10 	tst.w	lr, #16
 800f810:	bf08      	it	eq
 800f812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81a:	6010      	str	r0, [r2, #0]
 800f81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f824:	f380 8811 	msr	BASEPRI, r0
 800f828:	f3bf 8f4f 	dsb	sy
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f001 fd34 	bl	801129c <vTaskSwitchContext>
 800f834:	f04f 0000 	mov.w	r0, #0
 800f838:	f380 8811 	msr	BASEPRI, r0
 800f83c:	bc09      	pop	{r0, r3}
 800f83e:	6819      	ldr	r1, [r3, #0]
 800f840:	6808      	ldr	r0, [r1, #0]
 800f842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f846:	f01e 0f10 	tst.w	lr, #16
 800f84a:	bf08      	it	eq
 800f84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f850:	f380 8809 	msr	PSP, r0
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	f3af 8000 	nop.w

0800f860 <pxCurrentTCBConst>:
 800f860:	20026df8 	.word	0x20026df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f864:	bf00      	nop
 800f866:	bf00      	nop

0800f868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
	__asm volatile
 800f86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f880:	f001 fc46 	bl	8011110 <xTaskIncrementTick>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d003      	beq.n	800f892 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f88a:	4b06      	ldr	r3, [pc, #24]	; (800f8a4 <SysTick_Handler+0x3c>)
 800f88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	2300      	movs	r3, #0
 800f894:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f89c:	bf00      	nop
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	e000ed04 	.word	0xe000ed04

0800f8a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f8a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8b8 <vPortEnableVFP+0x10>
 800f8ac:	6801      	ldr	r1, [r0, #0]
 800f8ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8b2:	6001      	str	r1, [r0, #0]
 800f8b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8b6:	bf00      	nop
 800f8b8:	e000ed88 	.word	0xe000ed88

0800f8bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8bc:	b480      	push	{r7}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8c2:	f3ef 8305 	mrs	r3, IPSR
 800f8c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2b0f      	cmp	r3, #15
 800f8cc:	d913      	bls.n	800f8f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8ce:	4a16      	ldr	r2, [pc, #88]	; (800f928 <vPortValidateInterruptPriority+0x6c>)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8d8:	4b14      	ldr	r3, [pc, #80]	; (800f92c <vPortValidateInterruptPriority+0x70>)
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	7afa      	ldrb	r2, [r7, #11]
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d209      	bcs.n	800f8f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e6:	f383 8811 	msr	BASEPRI, r3
 800f8ea:	f3bf 8f6f 	isb	sy
 800f8ee:	f3bf 8f4f 	dsb	sy
 800f8f2:	607b      	str	r3, [r7, #4]
 800f8f4:	e7fe      	b.n	800f8f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8f6:	4b0e      	ldr	r3, [pc, #56]	; (800f930 <vPortValidateInterruptPriority+0x74>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8fe:	4b0d      	ldr	r3, [pc, #52]	; (800f934 <vPortValidateInterruptPriority+0x78>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	429a      	cmp	r2, r3
 800f904:	d909      	bls.n	800f91a <vPortValidateInterruptPriority+0x5e>
 800f906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	603b      	str	r3, [r7, #0]
 800f918:	e7fe      	b.n	800f918 <vPortValidateInterruptPriority+0x5c>
	}
 800f91a:	bf00      	nop
 800f91c:	3714      	adds	r7, #20
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr
 800f926:	bf00      	nop
 800f928:	e000e3f0 	.word	0xe000e3f0
 800f92c:	20026df0 	.word	0x20026df0
 800f930:	e000ed0c 	.word	0xe000ed0c
 800f934:	20026df4 	.word	0x20026df4

0800f938 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d109      	bne.n	800f960 <xQueueGenericReset+0x28>
 800f94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	60bb      	str	r3, [r7, #8]
 800f95e:	e7fe      	b.n	800f95e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f960:	f7ff fef4 	bl	800f74c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f96c:	68f9      	ldr	r1, [r7, #12]
 800f96e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f970:	fb01 f303 	mul.w	r3, r1, r3
 800f974:	441a      	add	r2, r3
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2200      	movs	r2, #0
 800f97e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f990:	3b01      	subs	r3, #1
 800f992:	68f9      	ldr	r1, [r7, #12]
 800f994:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f996:	fb01 f303 	mul.w	r3, r1, r3
 800f99a:	441a      	add	r2, r3
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	22ff      	movs	r2, #255	; 0xff
 800f9a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	22ff      	movs	r2, #255	; 0xff
 800f9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d114      	bne.n	800f9e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d01a      	beq.n	800f9f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	3310      	adds	r3, #16
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f001 fd40 	bl	8011448 <xTaskRemoveFromEventList>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d012      	beq.n	800f9f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f9ce:	4b0d      	ldr	r3, [pc, #52]	; (800fa04 <xQueueGenericReset+0xcc>)
 800f9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	f3bf 8f6f 	isb	sy
 800f9de:	e009      	b.n	800f9f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	3310      	adds	r3, #16
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff fcd3 	bl	800f390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	3324      	adds	r3, #36	; 0x24
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7ff fcce 	bl	800f390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f9f4:	f7ff fed8 	bl	800f7a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f9f8:	2301      	movs	r3, #1
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08e      	sub	sp, #56	; 0x38
 800fa0c:	af02      	add	r7, sp, #8
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
 800fa14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d109      	bne.n	800fa30 <xQueueGenericCreateStatic+0x28>
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa2e:	e7fe      	b.n	800fa2e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d109      	bne.n	800fa4a <xQueueGenericCreateStatic+0x42>
 800fa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	627b      	str	r3, [r7, #36]	; 0x24
 800fa48:	e7fe      	b.n	800fa48 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <xQueueGenericCreateStatic+0x4e>
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <xQueueGenericCreateStatic+0x52>
 800fa56:	2301      	movs	r3, #1
 800fa58:	e000      	b.n	800fa5c <xQueueGenericCreateStatic+0x54>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d109      	bne.n	800fa74 <xQueueGenericCreateStatic+0x6c>
 800fa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa64:	f383 8811 	msr	BASEPRI, r3
 800fa68:	f3bf 8f6f 	isb	sy
 800fa6c:	f3bf 8f4f 	dsb	sy
 800fa70:	623b      	str	r3, [r7, #32]
 800fa72:	e7fe      	b.n	800fa72 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d102      	bne.n	800fa80 <xQueueGenericCreateStatic+0x78>
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d101      	bne.n	800fa84 <xQueueGenericCreateStatic+0x7c>
 800fa80:	2301      	movs	r3, #1
 800fa82:	e000      	b.n	800fa86 <xQueueGenericCreateStatic+0x7e>
 800fa84:	2300      	movs	r3, #0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d109      	bne.n	800fa9e <xQueueGenericCreateStatic+0x96>
 800fa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8e:	f383 8811 	msr	BASEPRI, r3
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	f3bf 8f4f 	dsb	sy
 800fa9a:	61fb      	str	r3, [r7, #28]
 800fa9c:	e7fe      	b.n	800fa9c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fa9e:	2350      	movs	r3, #80	; 0x50
 800faa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2b50      	cmp	r3, #80	; 0x50
 800faa6:	d009      	beq.n	800fabc <xQueueGenericCreateStatic+0xb4>
 800faa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	61bb      	str	r3, [r7, #24]
 800faba:	e7fe      	b.n	800faba <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00d      	beq.n	800fae2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	2201      	movs	r2, #1
 800faca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800face:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	4613      	mov	r3, r2
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	68b9      	ldr	r1, [r7, #8]
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f000 f842 	bl	800fb66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800fae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3730      	adds	r7, #48	; 0x30
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800faec:	b580      	push	{r7, lr}
 800faee:	b08a      	sub	sp, #40	; 0x28
 800faf0:	af02      	add	r7, sp, #8
 800faf2:	60f8      	str	r0, [r7, #12]
 800faf4:	60b9      	str	r1, [r7, #8]
 800faf6:	4613      	mov	r3, r2
 800faf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d109      	bne.n	800fb14 <xQueueGenericCreate+0x28>
 800fb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb04:	f383 8811 	msr	BASEPRI, r3
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	613b      	str	r3, [r7, #16]
 800fb12:	e7fe      	b.n	800fb12 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d102      	bne.n	800fb20 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	61fb      	str	r3, [r7, #28]
 800fb1e:	e004      	b.n	800fb2a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	fb02 f303 	mul.w	r3, r2, r3
 800fb28:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	3350      	adds	r3, #80	; 0x50
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff fa52 	bl	800efd8 <pvPortMalloc>
 800fb34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00f      	beq.n	800fb5c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800fb3c:	69bb      	ldr	r3, [r7, #24]
 800fb3e:	3350      	adds	r3, #80	; 0x50
 800fb40:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	2200      	movs	r2, #0
 800fb46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb4a:	79fa      	ldrb	r2, [r7, #7]
 800fb4c:	69bb      	ldr	r3, [r7, #24]
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	4613      	mov	r3, r2
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	68b9      	ldr	r1, [r7, #8]
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f000 f805 	bl	800fb66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800fb5c:	69bb      	ldr	r3, [r7, #24]
	}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3720      	adds	r7, #32
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b084      	sub	sp, #16
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	60f8      	str	r0, [r7, #12]
 800fb6e:	60b9      	str	r1, [r7, #8]
 800fb70:	607a      	str	r2, [r7, #4]
 800fb72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d103      	bne.n	800fb82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	69ba      	ldr	r2, [r7, #24]
 800fb7e:	601a      	str	r2, [r3, #0]
 800fb80:	e002      	b.n	800fb88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	68fa      	ldr	r2, [r7, #12]
 800fb8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fb94:	2101      	movs	r1, #1
 800fb96:	69b8      	ldr	r0, [r7, #24]
 800fb98:	f7ff fece 	bl	800f938 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	78fa      	ldrb	r2, [r7, #3]
 800fba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fba4:	bf00      	nop
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00e      	beq.n	800fbd8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fbcc:	2300      	movs	r3, #0
 800fbce:	2200      	movs	r2, #0
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 f906 	bl	800fde4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fbd8:	bf00      	nop
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fbea:	2301      	movs	r3, #1
 800fbec:	617b      	str	r3, [r7, #20]
 800fbee:	2300      	movs	r3, #0
 800fbf0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	6939      	ldr	r1, [r7, #16]
 800fbf8:	6978      	ldr	r0, [r7, #20]
 800fbfa:	f7ff ff77 	bl	800faec <xQueueGenericCreate>
 800fbfe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f7ff ffd3 	bl	800fbac <prvInitialiseMutex>

		return pxNewQueue;
 800fc06:	68fb      	ldr	r3, [r7, #12]
	}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3718      	adds	r7, #24
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b088      	sub	sp, #32
 800fc14:	af02      	add	r7, sp, #8
 800fc16:	4603      	mov	r3, r0
 800fc18:	6039      	str	r1, [r7, #0]
 800fc1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	617b      	str	r3, [r7, #20]
 800fc20:	2300      	movs	r3, #0
 800fc22:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fc24:	79fb      	ldrb	r3, [r7, #7]
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	6939      	ldr	r1, [r7, #16]
 800fc2e:	6978      	ldr	r0, [r7, #20]
 800fc30:	f7ff feea 	bl	800fa08 <xQueueGenericCreateStatic>
 800fc34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7ff ffb8 	bl	800fbac <prvInitialiseMutex>

		return pxNewQueue;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
	}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3718      	adds	r7, #24
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fc46:	b590      	push	{r4, r7, lr}
 800fc48:	b087      	sub	sp, #28
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d109      	bne.n	800fc6c <xQueueGiveMutexRecursive+0x26>
 800fc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5c:	f383 8811 	msr	BASEPRI, r3
 800fc60:	f3bf 8f6f 	isb	sy
 800fc64:	f3bf 8f4f 	dsb	sy
 800fc68:	60fb      	str	r3, [r7, #12]
 800fc6a:	e7fe      	b.n	800fc6a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	685c      	ldr	r4, [r3, #4]
 800fc70:	f001 fdfc 	bl	801186c <xTaskGetCurrentTaskHandle>
 800fc74:	4603      	mov	r3, r0
 800fc76:	429c      	cmp	r4, r3
 800fc78:	d111      	bne.n	800fc9e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	1e5a      	subs	r2, r3, #1
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d105      	bne.n	800fc98 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	2200      	movs	r2, #0
 800fc90:	2100      	movs	r1, #0
 800fc92:	6938      	ldr	r0, [r7, #16]
 800fc94:	f000 f8a6 	bl	800fde4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fc98:	2301      	movs	r3, #1
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	e001      	b.n	800fca2 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fca2:	697b      	ldr	r3, [r7, #20]
	}
 800fca4:	4618      	mov	r0, r3
 800fca6:	371c      	adds	r7, #28
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd90      	pop	{r4, r7, pc}

0800fcac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fcac:	b590      	push	{r4, r7, lr}
 800fcae:	b087      	sub	sp, #28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d109      	bne.n	800fcd4 <xQueueTakeMutexRecursive+0x28>
 800fcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	60fb      	str	r3, [r7, #12]
 800fcd2:	e7fe      	b.n	800fcd2 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	685c      	ldr	r4, [r3, #4]
 800fcd8:	f001 fdc8 	bl	801186c <xTaskGetCurrentTaskHandle>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	429c      	cmp	r4, r3
 800fce0:	d107      	bne.n	800fcf2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	1c5a      	adds	r2, r3, #1
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fcec:	2301      	movs	r3, #1
 800fcee:	617b      	str	r3, [r7, #20]
 800fcf0:	e00c      	b.n	800fd0c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fcf2:	6839      	ldr	r1, [r7, #0]
 800fcf4:	6938      	ldr	r0, [r7, #16]
 800fcf6:	f000 fb69 	bl	80103cc <xQueueSemaphoreTake>
 800fcfa:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d004      	beq.n	800fd0c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	68db      	ldr	r3, [r3, #12]
 800fd06:	1c5a      	adds	r2, r3, #1
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fd0c:	697b      	ldr	r3, [r7, #20]
	}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	371c      	adds	r7, #28
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd90      	pop	{r4, r7, pc}

0800fd16 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b08a      	sub	sp, #40	; 0x28
 800fd1a:	af02      	add	r7, sp, #8
 800fd1c:	60f8      	str	r0, [r7, #12]
 800fd1e:	60b9      	str	r1, [r7, #8]
 800fd20:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d109      	bne.n	800fd3c <xQueueCreateCountingSemaphoreStatic+0x26>
 800fd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2c:	f383 8811 	msr	BASEPRI, r3
 800fd30:	f3bf 8f6f 	isb	sy
 800fd34:	f3bf 8f4f 	dsb	sy
 800fd38:	61bb      	str	r3, [r7, #24]
 800fd3a:	e7fe      	b.n	800fd3a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d909      	bls.n	800fd58 <xQueueCreateCountingSemaphoreStatic+0x42>
 800fd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd48:	f383 8811 	msr	BASEPRI, r3
 800fd4c:	f3bf 8f6f 	isb	sy
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	617b      	str	r3, [r7, #20]
 800fd56:	e7fe      	b.n	800fd56 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd58:	2302      	movs	r3, #2
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	2100      	movs	r1, #0
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7ff fe50 	bl	800fa08 <xQueueGenericCreateStatic>
 800fd68:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	68ba      	ldr	r2, [r7, #8]
 800fd74:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fd76:	69fb      	ldr	r3, [r7, #28]
	}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3720      	adds	r7, #32
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d109      	bne.n	800fda4 <xQueueCreateCountingSemaphore+0x24>
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	613b      	str	r3, [r7, #16]
 800fda2:	e7fe      	b.n	800fda2 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d909      	bls.n	800fdc0 <xQueueCreateCountingSemaphore+0x40>
 800fdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb0:	f383 8811 	msr	BASEPRI, r3
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	60fb      	str	r3, [r7, #12]
 800fdbe:	e7fe      	b.n	800fdbe <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	2100      	movs	r1, #0
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff fe91 	bl	800faec <xQueueGenericCreate>
 800fdca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d002      	beq.n	800fdd8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fdd8:	697b      	ldr	r3, [r7, #20]
	}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3718      	adds	r7, #24
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
	...

0800fde4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08e      	sub	sp, #56	; 0x38
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
 800fdf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d109      	bne.n	800fe14 <xQueueGenericSend+0x30>
 800fe00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe12:	e7fe      	b.n	800fe12 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d103      	bne.n	800fe22 <xQueueGenericSend+0x3e>
 800fe1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d101      	bne.n	800fe26 <xQueueGenericSend+0x42>
 800fe22:	2301      	movs	r3, #1
 800fe24:	e000      	b.n	800fe28 <xQueueGenericSend+0x44>
 800fe26:	2300      	movs	r3, #0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d109      	bne.n	800fe40 <xQueueGenericSend+0x5c>
 800fe2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	627b      	str	r3, [r7, #36]	; 0x24
 800fe3e:	e7fe      	b.n	800fe3e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d103      	bne.n	800fe4e <xQueueGenericSend+0x6a>
 800fe46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d101      	bne.n	800fe52 <xQueueGenericSend+0x6e>
 800fe4e:	2301      	movs	r3, #1
 800fe50:	e000      	b.n	800fe54 <xQueueGenericSend+0x70>
 800fe52:	2300      	movs	r3, #0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d109      	bne.n	800fe6c <xQueueGenericSend+0x88>
 800fe58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5c:	f383 8811 	msr	BASEPRI, r3
 800fe60:	f3bf 8f6f 	isb	sy
 800fe64:	f3bf 8f4f 	dsb	sy
 800fe68:	623b      	str	r3, [r7, #32]
 800fe6a:	e7fe      	b.n	800fe6a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe6c:	f001 fd0e 	bl	801188c <xTaskGetSchedulerState>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d102      	bne.n	800fe7c <xQueueGenericSend+0x98>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d101      	bne.n	800fe80 <xQueueGenericSend+0x9c>
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	e000      	b.n	800fe82 <xQueueGenericSend+0x9e>
 800fe80:	2300      	movs	r3, #0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d109      	bne.n	800fe9a <xQueueGenericSend+0xb6>
 800fe86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
 800fe96:	61fb      	str	r3, [r7, #28]
 800fe98:	e7fe      	b.n	800fe98 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe9a:	f7ff fc57 	bl	800f74c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d302      	bcc.n	800feb0 <xQueueGenericSend+0xcc>
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	2b02      	cmp	r3, #2
 800feae:	d129      	bne.n	800ff04 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	68b9      	ldr	r1, [r7, #8]
 800feb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feb6:	f000 fc48 	bl	801074a <prvCopyDataToQueue>
 800feba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800febc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800febe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d010      	beq.n	800fee6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec6:	3324      	adds	r3, #36	; 0x24
 800fec8:	4618      	mov	r0, r3
 800feca:	f001 fabd 	bl	8011448 <xTaskRemoveFromEventList>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d013      	beq.n	800fefc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fed4:	4b3f      	ldr	r3, [pc, #252]	; (800ffd4 <xQueueGenericSend+0x1f0>)
 800fed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feda:	601a      	str	r2, [r3, #0]
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	e00a      	b.n	800fefc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d007      	beq.n	800fefc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800feec:	4b39      	ldr	r3, [pc, #228]	; (800ffd4 <xQueueGenericSend+0x1f0>)
 800feee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fefc:	f7ff fc54 	bl	800f7a8 <vPortExitCritical>
				return pdPASS;
 800ff00:	2301      	movs	r3, #1
 800ff02:	e063      	b.n	800ffcc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d103      	bne.n	800ff12 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff0a:	f7ff fc4d 	bl	800f7a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	e05c      	b.n	800ffcc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d106      	bne.n	800ff26 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff18:	f107 0314 	add.w	r3, r7, #20
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f001 faf7 	bl	8011510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff22:	2301      	movs	r3, #1
 800ff24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff26:	f7ff fc3f 	bl	800f7a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff2a:	f000 ffd9 	bl	8010ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff2e:	f7ff fc0d 	bl	800f74c <vPortEnterCritical>
 800ff32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff38:	b25b      	sxtb	r3, r3
 800ff3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff3e:	d103      	bne.n	800ff48 <xQueueGenericSend+0x164>
 800ff40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff42:	2200      	movs	r2, #0
 800ff44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff4e:	b25b      	sxtb	r3, r3
 800ff50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff54:	d103      	bne.n	800ff5e <xQueueGenericSend+0x17a>
 800ff56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff5e:	f7ff fc23 	bl	800f7a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff62:	1d3a      	adds	r2, r7, #4
 800ff64:	f107 0314 	add.w	r3, r7, #20
 800ff68:	4611      	mov	r1, r2
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f001 fae6 	bl	801153c <xTaskCheckForTimeOut>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d124      	bne.n	800ffc0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ff76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff78:	f000 fcdf 	bl	801093a <prvIsQueueFull>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d018      	beq.n	800ffb4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ff82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff84:	3310      	adds	r3, #16
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	4611      	mov	r1, r2
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f001 fa0e 	bl	80113ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ff90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff92:	f000 fc6a 	bl	801086a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ff96:	f000 ffe9 	bl	8010f6c <xTaskResumeAll>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f47f af7c 	bne.w	800fe9a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ffa2:	4b0c      	ldr	r3, [pc, #48]	; (800ffd4 <xQueueGenericSend+0x1f0>)
 800ffa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffa8:	601a      	str	r2, [r3, #0]
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	f3bf 8f6f 	isb	sy
 800ffb2:	e772      	b.n	800fe9a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ffb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffb6:	f000 fc58 	bl	801086a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffba:	f000 ffd7 	bl	8010f6c <xTaskResumeAll>
 800ffbe:	e76c      	b.n	800fe9a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ffc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffc2:	f000 fc52 	bl	801086a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffc6:	f000 ffd1 	bl	8010f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ffca:	2300      	movs	r3, #0
		}
	}
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3738      	adds	r7, #56	; 0x38
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	e000ed04 	.word	0xe000ed04

0800ffd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b08e      	sub	sp, #56	; 0x38
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
 800ffe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d109      	bne.n	8010004 <xQueueGenericSendFromISR+0x2c>
 800fff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	627b      	str	r3, [r7, #36]	; 0x24
 8010002:	e7fe      	b.n	8010002 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d103      	bne.n	8010012 <xQueueGenericSendFromISR+0x3a>
 801000a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <xQueueGenericSendFromISR+0x3e>
 8010012:	2301      	movs	r3, #1
 8010014:	e000      	b.n	8010018 <xQueueGenericSendFromISR+0x40>
 8010016:	2300      	movs	r3, #0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d109      	bne.n	8010030 <xQueueGenericSendFromISR+0x58>
 801001c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	623b      	str	r3, [r7, #32]
 801002e:	e7fe      	b.n	801002e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	2b02      	cmp	r3, #2
 8010034:	d103      	bne.n	801003e <xQueueGenericSendFromISR+0x66>
 8010036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801003a:	2b01      	cmp	r3, #1
 801003c:	d101      	bne.n	8010042 <xQueueGenericSendFromISR+0x6a>
 801003e:	2301      	movs	r3, #1
 8010040:	e000      	b.n	8010044 <xQueueGenericSendFromISR+0x6c>
 8010042:	2300      	movs	r3, #0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d109      	bne.n	801005c <xQueueGenericSendFromISR+0x84>
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	61fb      	str	r3, [r7, #28]
 801005a:	e7fe      	b.n	801005a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801005c:	f7ff fc2e 	bl	800f8bc <vPortValidateInterruptPriority>
	__asm volatile
 8010060:	f3ef 8211 	mrs	r2, BASEPRI
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	61ba      	str	r2, [r7, #24]
 8010076:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010078:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801007a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801007c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010084:	429a      	cmp	r2, r3
 8010086:	d302      	bcc.n	801008e <xQueueGenericSendFromISR+0xb6>
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2b02      	cmp	r3, #2
 801008c:	d12c      	bne.n	80100e8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801008e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010098:	683a      	ldr	r2, [r7, #0]
 801009a:	68b9      	ldr	r1, [r7, #8]
 801009c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801009e:	f000 fb54 	bl	801074a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80100a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80100a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100aa:	d112      	bne.n	80100d2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d016      	beq.n	80100e2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b6:	3324      	adds	r3, #36	; 0x24
 80100b8:	4618      	mov	r0, r3
 80100ba:	f001 f9c5 	bl	8011448 <xTaskRemoveFromEventList>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00e      	beq.n	80100e2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00b      	beq.n	80100e2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2201      	movs	r2, #1
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	e007      	b.n	80100e2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80100d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80100d6:	3301      	adds	r3, #1
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	b25a      	sxtb	r2, r3
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80100e2:	2301      	movs	r3, #1
 80100e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80100e6:	e001      	b.n	80100ec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80100e8:	2300      	movs	r3, #0
 80100ea:	637b      	str	r3, [r7, #52]	; 0x34
 80100ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ee:	613b      	str	r3, [r7, #16]
	__asm volatile
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3738      	adds	r7, #56	; 0x38
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b08e      	sub	sp, #56	; 0x38
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801010e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010110:	2b00      	cmp	r3, #0
 8010112:	d109      	bne.n	8010128 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010118:	f383 8811 	msr	BASEPRI, r3
 801011c:	f3bf 8f6f 	isb	sy
 8010120:	f3bf 8f4f 	dsb	sy
 8010124:	623b      	str	r3, [r7, #32]
 8010126:	e7fe      	b.n	8010126 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801012c:	2b00      	cmp	r3, #0
 801012e:	d009      	beq.n	8010144 <xQueueGiveFromISR+0x44>
 8010130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010134:	f383 8811 	msr	BASEPRI, r3
 8010138:	f3bf 8f6f 	isb	sy
 801013c:	f3bf 8f4f 	dsb	sy
 8010140:	61fb      	str	r3, [r7, #28]
 8010142:	e7fe      	b.n	8010142 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d103      	bne.n	8010154 <xQueueGiveFromISR+0x54>
 801014c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d101      	bne.n	8010158 <xQueueGiveFromISR+0x58>
 8010154:	2301      	movs	r3, #1
 8010156:	e000      	b.n	801015a <xQueueGiveFromISR+0x5a>
 8010158:	2300      	movs	r3, #0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d109      	bne.n	8010172 <xQueueGiveFromISR+0x72>
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	61bb      	str	r3, [r7, #24]
 8010170:	e7fe      	b.n	8010170 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010172:	f7ff fba3 	bl	800f8bc <vPortValidateInterruptPriority>
	__asm volatile
 8010176:	f3ef 8211 	mrs	r2, BASEPRI
 801017a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017e:	f383 8811 	msr	BASEPRI, r3
 8010182:	f3bf 8f6f 	isb	sy
 8010186:	f3bf 8f4f 	dsb	sy
 801018a:	617a      	str	r2, [r7, #20]
 801018c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801018e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010190:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010196:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801019c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801019e:	429a      	cmp	r2, r3
 80101a0:	d22b      	bcs.n	80101fa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80101a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80101b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101bc:	d112      	bne.n	80101e4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d016      	beq.n	80101f4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	3324      	adds	r3, #36	; 0x24
 80101ca:	4618      	mov	r0, r3
 80101cc:	f001 f93c 	bl	8011448 <xTaskRemoveFromEventList>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00e      	beq.n	80101f4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00b      	beq.n	80101f4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	2201      	movs	r2, #1
 80101e0:	601a      	str	r2, [r3, #0]
 80101e2:	e007      	b.n	80101f4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80101e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101e8:	3301      	adds	r3, #1
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	b25a      	sxtb	r2, r3
 80101ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80101f4:	2301      	movs	r3, #1
 80101f6:	637b      	str	r3, [r7, #52]	; 0x34
 80101f8:	e001      	b.n	80101fe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101fa:	2300      	movs	r3, #0
 80101fc:	637b      	str	r3, [r7, #52]	; 0x34
 80101fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010200:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801020a:	4618      	mov	r0, r3
 801020c:	3738      	adds	r7, #56	; 0x38
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
	...

08010214 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b08c      	sub	sp, #48	; 0x30
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010220:	2300      	movs	r3, #0
 8010222:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022a:	2b00      	cmp	r3, #0
 801022c:	d109      	bne.n	8010242 <xQueueReceive+0x2e>
	__asm volatile
 801022e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	623b      	str	r3, [r7, #32]
 8010240:	e7fe      	b.n	8010240 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d103      	bne.n	8010250 <xQueueReceive+0x3c>
 8010248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801024c:	2b00      	cmp	r3, #0
 801024e:	d101      	bne.n	8010254 <xQueueReceive+0x40>
 8010250:	2301      	movs	r3, #1
 8010252:	e000      	b.n	8010256 <xQueueReceive+0x42>
 8010254:	2300      	movs	r3, #0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d109      	bne.n	801026e <xQueueReceive+0x5a>
 801025a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	61fb      	str	r3, [r7, #28]
 801026c:	e7fe      	b.n	801026c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801026e:	f001 fb0d 	bl	801188c <xTaskGetSchedulerState>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d102      	bne.n	801027e <xQueueReceive+0x6a>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d101      	bne.n	8010282 <xQueueReceive+0x6e>
 801027e:	2301      	movs	r3, #1
 8010280:	e000      	b.n	8010284 <xQueueReceive+0x70>
 8010282:	2300      	movs	r3, #0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d109      	bne.n	801029c <xQueueReceive+0x88>
 8010288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028c:	f383 8811 	msr	BASEPRI, r3
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	61bb      	str	r3, [r7, #24]
 801029a:	e7fe      	b.n	801029a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801029c:	f7ff fa56 	bl	800f74c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d01f      	beq.n	80102ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102ac:	68b9      	ldr	r1, [r7, #8]
 80102ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102b0:	f000 fab5 	bl	801081e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b6:	1e5a      	subs	r2, r3, #1
 80102b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102be:	691b      	ldr	r3, [r3, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d00f      	beq.n	80102e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c6:	3310      	adds	r3, #16
 80102c8:	4618      	mov	r0, r3
 80102ca:	f001 f8bd 	bl	8011448 <xTaskRemoveFromEventList>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d007      	beq.n	80102e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102d4:	4b3c      	ldr	r3, [pc, #240]	; (80103c8 <xQueueReceive+0x1b4>)
 80102d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102da:	601a      	str	r2, [r3, #0]
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102e4:	f7ff fa60 	bl	800f7a8 <vPortExitCritical>
				return pdPASS;
 80102e8:	2301      	movs	r3, #1
 80102ea:	e069      	b.n	80103c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d103      	bne.n	80102fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102f2:	f7ff fa59 	bl	800f7a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102f6:	2300      	movs	r3, #0
 80102f8:	e062      	b.n	80103c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d106      	bne.n	801030e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010300:	f107 0310 	add.w	r3, r7, #16
 8010304:	4618      	mov	r0, r3
 8010306:	f001 f903 	bl	8011510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801030a:	2301      	movs	r3, #1
 801030c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801030e:	f7ff fa4b 	bl	800f7a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010312:	f000 fde5 	bl	8010ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010316:	f7ff fa19 	bl	800f74c <vPortEnterCritical>
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010320:	b25b      	sxtb	r3, r3
 8010322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010326:	d103      	bne.n	8010330 <xQueueReceive+0x11c>
 8010328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032a:	2200      	movs	r2, #0
 801032c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010336:	b25b      	sxtb	r3, r3
 8010338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801033c:	d103      	bne.n	8010346 <xQueueReceive+0x132>
 801033e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010346:	f7ff fa2f 	bl	800f7a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801034a:	1d3a      	adds	r2, r7, #4
 801034c:	f107 0310 	add.w	r3, r7, #16
 8010350:	4611      	mov	r1, r2
 8010352:	4618      	mov	r0, r3
 8010354:	f001 f8f2 	bl	801153c <xTaskCheckForTimeOut>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d123      	bne.n	80103a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801035e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010360:	f000 fad5 	bl	801090e <prvIsQueueEmpty>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d017      	beq.n	801039a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	3324      	adds	r3, #36	; 0x24
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	4611      	mov	r1, r2
 8010372:	4618      	mov	r0, r3
 8010374:	f001 f81a 	bl	80113ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801037a:	f000 fa76 	bl	801086a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801037e:	f000 fdf5 	bl	8010f6c <xTaskResumeAll>
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d189      	bne.n	801029c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010388:	4b0f      	ldr	r3, [pc, #60]	; (80103c8 <xQueueReceive+0x1b4>)
 801038a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801038e:	601a      	str	r2, [r3, #0]
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	e780      	b.n	801029c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801039a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801039c:	f000 fa65 	bl	801086a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103a0:	f000 fde4 	bl	8010f6c <xTaskResumeAll>
 80103a4:	e77a      	b.n	801029c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80103a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103a8:	f000 fa5f 	bl	801086a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103ac:	f000 fdde 	bl	8010f6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103b2:	f000 faac 	bl	801090e <prvIsQueueEmpty>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f43f af6f 	beq.w	801029c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3730      	adds	r7, #48	; 0x30
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	e000ed04 	.word	0xe000ed04

080103cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b08e      	sub	sp, #56	; 0x38
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80103d6:	2300      	movs	r3, #0
 80103d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80103de:	2300      	movs	r3, #0
 80103e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80103e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d109      	bne.n	80103fc <xQueueSemaphoreTake+0x30>
 80103e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	623b      	str	r3, [r7, #32]
 80103fa:	e7fe      	b.n	80103fa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80103fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010400:	2b00      	cmp	r3, #0
 8010402:	d009      	beq.n	8010418 <xQueueSemaphoreTake+0x4c>
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	61fb      	str	r3, [r7, #28]
 8010416:	e7fe      	b.n	8010416 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010418:	f001 fa38 	bl	801188c <xTaskGetSchedulerState>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d102      	bne.n	8010428 <xQueueSemaphoreTake+0x5c>
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d101      	bne.n	801042c <xQueueSemaphoreTake+0x60>
 8010428:	2301      	movs	r3, #1
 801042a:	e000      	b.n	801042e <xQueueSemaphoreTake+0x62>
 801042c:	2300      	movs	r3, #0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d109      	bne.n	8010446 <xQueueSemaphoreTake+0x7a>
 8010432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010436:	f383 8811 	msr	BASEPRI, r3
 801043a:	f3bf 8f6f 	isb	sy
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	61bb      	str	r3, [r7, #24]
 8010444:	e7fe      	b.n	8010444 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010446:	f7ff f981 	bl	800f74c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801044a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010452:	2b00      	cmp	r3, #0
 8010454:	d024      	beq.n	80104a0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010458:	1e5a      	subs	r2, r3, #1
 801045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801045e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d104      	bne.n	8010470 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010466:	f001 fb8d 	bl	8011b84 <pvTaskIncrementMutexHeldCount>
 801046a:	4602      	mov	r2, r0
 801046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d00f      	beq.n	8010498 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	3310      	adds	r3, #16
 801047c:	4618      	mov	r0, r3
 801047e:	f000 ffe3 	bl	8011448 <xTaskRemoveFromEventList>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d007      	beq.n	8010498 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010488:	4b53      	ldr	r3, [pc, #332]	; (80105d8 <xQueueSemaphoreTake+0x20c>)
 801048a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801048e:	601a      	str	r2, [r3, #0]
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010498:	f7ff f986 	bl	800f7a8 <vPortExitCritical>
				return pdPASS;
 801049c:	2301      	movs	r3, #1
 801049e:	e096      	b.n	80105ce <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d110      	bne.n	80104c8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80104a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d009      	beq.n	80104c0 <xQueueSemaphoreTake+0xf4>
 80104ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b0:	f383 8811 	msr	BASEPRI, r3
 80104b4:	f3bf 8f6f 	isb	sy
 80104b8:	f3bf 8f4f 	dsb	sy
 80104bc:	617b      	str	r3, [r7, #20]
 80104be:	e7fe      	b.n	80104be <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80104c0:	f7ff f972 	bl	800f7a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104c4:	2300      	movs	r3, #0
 80104c6:	e082      	b.n	80105ce <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d106      	bne.n	80104dc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104ce:	f107 030c 	add.w	r3, r7, #12
 80104d2:	4618      	mov	r0, r3
 80104d4:	f001 f81c 	bl	8011510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80104d8:	2301      	movs	r3, #1
 80104da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80104dc:	f7ff f964 	bl	800f7a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104e0:	f000 fcfe 	bl	8010ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104e4:	f7ff f932 	bl	800f74c <vPortEnterCritical>
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104ee:	b25b      	sxtb	r3, r3
 80104f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f4:	d103      	bne.n	80104fe <xQueueSemaphoreTake+0x132>
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f8:	2200      	movs	r2, #0
 80104fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010504:	b25b      	sxtb	r3, r3
 8010506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801050a:	d103      	bne.n	8010514 <xQueueSemaphoreTake+0x148>
 801050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050e:	2200      	movs	r2, #0
 8010510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010514:	f7ff f948 	bl	800f7a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010518:	463a      	mov	r2, r7
 801051a:	f107 030c 	add.w	r3, r7, #12
 801051e:	4611      	mov	r1, r2
 8010520:	4618      	mov	r0, r3
 8010522:	f001 f80b 	bl	801153c <xTaskCheckForTimeOut>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d132      	bne.n	8010592 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801052c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801052e:	f000 f9ee 	bl	801090e <prvIsQueueEmpty>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d026      	beq.n	8010586 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d109      	bne.n	8010554 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010540:	f7ff f904 	bl	800f74c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	4618      	mov	r0, r3
 801054a:	f001 f9bd 	bl	80118c8 <xTaskPriorityInherit>
 801054e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010550:	f7ff f92a 	bl	800f7a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010556:	3324      	adds	r3, #36	; 0x24
 8010558:	683a      	ldr	r2, [r7, #0]
 801055a:	4611      	mov	r1, r2
 801055c:	4618      	mov	r0, r3
 801055e:	f000 ff25 	bl	80113ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010564:	f000 f981 	bl	801086a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010568:	f000 fd00 	bl	8010f6c <xTaskResumeAll>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	f47f af69 	bne.w	8010446 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010574:	4b18      	ldr	r3, [pc, #96]	; (80105d8 <xQueueSemaphoreTake+0x20c>)
 8010576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801057a:	601a      	str	r2, [r3, #0]
 801057c:	f3bf 8f4f 	dsb	sy
 8010580:	f3bf 8f6f 	isb	sy
 8010584:	e75f      	b.n	8010446 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010588:	f000 f96f 	bl	801086a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801058c:	f000 fcee 	bl	8010f6c <xTaskResumeAll>
 8010590:	e759      	b.n	8010446 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010594:	f000 f969 	bl	801086a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010598:	f000 fce8 	bl	8010f6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801059c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801059e:	f000 f9b6 	bl	801090e <prvIsQueueEmpty>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f43f af4e 	beq.w	8010446 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80105aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00d      	beq.n	80105cc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80105b0:	f7ff f8cc 	bl	800f74c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80105b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105b6:	f000 f8b0 	bl	801071a <prvGetDisinheritPriorityAfterTimeout>
 80105ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105c2:	4618      	mov	r0, r3
 80105c4:	f001 fa5a 	bl	8011a7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80105c8:	f7ff f8ee 	bl	800f7a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80105cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3738      	adds	r7, #56	; 0x38
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	e000ed04 	.word	0xe000ed04

080105dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b08e      	sub	sp, #56	; 0x38
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80105ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d109      	bne.n	8010606 <xQueueReceiveFromISR+0x2a>
 80105f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f6:	f383 8811 	msr	BASEPRI, r3
 80105fa:	f3bf 8f6f 	isb	sy
 80105fe:	f3bf 8f4f 	dsb	sy
 8010602:	623b      	str	r3, [r7, #32]
 8010604:	e7fe      	b.n	8010604 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d103      	bne.n	8010614 <xQueueReceiveFromISR+0x38>
 801060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010610:	2b00      	cmp	r3, #0
 8010612:	d101      	bne.n	8010618 <xQueueReceiveFromISR+0x3c>
 8010614:	2301      	movs	r3, #1
 8010616:	e000      	b.n	801061a <xQueueReceiveFromISR+0x3e>
 8010618:	2300      	movs	r3, #0
 801061a:	2b00      	cmp	r3, #0
 801061c:	d109      	bne.n	8010632 <xQueueReceiveFromISR+0x56>
 801061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	61fb      	str	r3, [r7, #28]
 8010630:	e7fe      	b.n	8010630 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010632:	f7ff f943 	bl	800f8bc <vPortValidateInterruptPriority>
	__asm volatile
 8010636:	f3ef 8211 	mrs	r2, BASEPRI
 801063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063e:	f383 8811 	msr	BASEPRI, r3
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	61ba      	str	r2, [r7, #24]
 801064c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801064e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010656:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065a:	2b00      	cmp	r3, #0
 801065c:	d02f      	beq.n	80106be <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010668:	68b9      	ldr	r1, [r7, #8]
 801066a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801066c:	f000 f8d7 	bl	801081e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	1e5a      	subs	r2, r3, #1
 8010674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010676:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010680:	d112      	bne.n	80106a8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d016      	beq.n	80106b8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	3310      	adds	r3, #16
 801068e:	4618      	mov	r0, r3
 8010690:	f000 feda 	bl	8011448 <xTaskRemoveFromEventList>
 8010694:	4603      	mov	r3, r0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00e      	beq.n	80106b8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00b      	beq.n	80106b8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	601a      	str	r2, [r3, #0]
 80106a6:	e007      	b.n	80106b8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ac:	3301      	adds	r3, #1
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	b25a      	sxtb	r2, r3
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80106b8:	2301      	movs	r3, #1
 80106ba:	637b      	str	r3, [r7, #52]	; 0x34
 80106bc:	e001      	b.n	80106c2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80106be:	2300      	movs	r3, #0
 80106c0:	637b      	str	r3, [r7, #52]	; 0x34
 80106c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3738      	adds	r7, #56	; 0x38
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b084      	sub	sp, #16
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d109      	bne.n	80106fc <vQueueDelete+0x26>
	__asm volatile
 80106e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ec:	f383 8811 	msr	BASEPRI, r3
 80106f0:	f3bf 8f6f 	isb	sy
 80106f4:	f3bf 8f4f 	dsb	sy
 80106f8:	60bb      	str	r3, [r7, #8]
 80106fa:	e7fe      	b.n	80106fa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	f000 f95d 	bl	80109bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010708:	2b00      	cmp	r3, #0
 801070a:	d102      	bne.n	8010712 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f7fe fd29 	bl	800f164 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010712:	bf00      	nop
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801071a:	b480      	push	{r7}
 801071c:	b085      	sub	sp, #20
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010726:	2b00      	cmp	r3, #0
 8010728:	d006      	beq.n	8010738 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010734:	60fb      	str	r3, [r7, #12]
 8010736:	e001      	b.n	801073c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010738:	2300      	movs	r3, #0
 801073a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801073c:	68fb      	ldr	r3, [r7, #12]
	}
 801073e:	4618      	mov	r0, r3
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr

0801074a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b086      	sub	sp, #24
 801074e:	af00      	add	r7, sp, #0
 8010750:	60f8      	str	r0, [r7, #12]
 8010752:	60b9      	str	r1, [r7, #8]
 8010754:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010756:	2300      	movs	r3, #0
 8010758:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801075e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10d      	bne.n	8010784 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d14d      	bne.n	801080c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	f001 f915 	bl	80119a4 <xTaskPriorityDisinherit>
 801077a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2200      	movs	r2, #0
 8010780:	605a      	str	r2, [r3, #4]
 8010782:	e043      	b.n	801080c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d119      	bne.n	80107be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6898      	ldr	r0, [r3, #8]
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010792:	461a      	mov	r2, r3
 8010794:	68b9      	ldr	r1, [r7, #8]
 8010796:	f005 fbc1 	bl	8015f1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	689a      	ldr	r2, [r3, #8]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a2:	441a      	add	r2, r3
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	689a      	ldr	r2, [r3, #8]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d32b      	bcc.n	801080c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	609a      	str	r2, [r3, #8]
 80107bc:	e026      	b.n	801080c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	68d8      	ldr	r0, [r3, #12]
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c6:	461a      	mov	r2, r3
 80107c8:	68b9      	ldr	r1, [r7, #8]
 80107ca:	f005 fba7 	bl	8015f1c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	68da      	ldr	r2, [r3, #12]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d6:	425b      	negs	r3, r3
 80107d8:	441a      	add	r2, r3
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	68da      	ldr	r2, [r3, #12]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d207      	bcs.n	80107fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	685a      	ldr	r2, [r3, #4]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f2:	425b      	negs	r3, r3
 80107f4:	441a      	add	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2b02      	cmp	r3, #2
 80107fe:	d105      	bne.n	801080c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d002      	beq.n	801080c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	3b01      	subs	r3, #1
 801080a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	1c5a      	adds	r2, r3, #1
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010814:	697b      	ldr	r3, [r7, #20]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3718      	adds	r7, #24
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b082      	sub	sp, #8
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082c:	2b00      	cmp	r3, #0
 801082e:	d018      	beq.n	8010862 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	68da      	ldr	r2, [r3, #12]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010838:	441a      	add	r2, r3
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	68da      	ldr	r2, [r3, #12]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	429a      	cmp	r2, r3
 8010848:	d303      	bcc.n	8010852 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	68d9      	ldr	r1, [r3, #12]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801085a:	461a      	mov	r2, r3
 801085c:	6838      	ldr	r0, [r7, #0]
 801085e:	f005 fb5d 	bl	8015f1c <memcpy>
	}
}
 8010862:	bf00      	nop
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801086a:	b580      	push	{r7, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010872:	f7fe ff6b 	bl	800f74c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801087c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801087e:	e011      	b.n	80108a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010884:	2b00      	cmp	r3, #0
 8010886:	d012      	beq.n	80108ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	3324      	adds	r3, #36	; 0x24
 801088c:	4618      	mov	r0, r3
 801088e:	f000 fddb 	bl	8011448 <xTaskRemoveFromEventList>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d001      	beq.n	801089c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010898:	f000 feb0 	bl	80115fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	3b01      	subs	r3, #1
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	dce9      	bgt.n	8010880 <prvUnlockQueue+0x16>
 80108ac:	e000      	b.n	80108b0 <prvUnlockQueue+0x46>
					break;
 80108ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	22ff      	movs	r2, #255	; 0xff
 80108b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80108b8:	f7fe ff76 	bl	800f7a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108bc:	f7fe ff46 	bl	800f74c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108c8:	e011      	b.n	80108ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d012      	beq.n	80108f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	3310      	adds	r3, #16
 80108d6:	4618      	mov	r0, r3
 80108d8:	f000 fdb6 	bl	8011448 <xTaskRemoveFromEventList>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d001      	beq.n	80108e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80108e2:	f000 fe8b 	bl	80115fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	dce9      	bgt.n	80108ca <prvUnlockQueue+0x60>
 80108f6:	e000      	b.n	80108fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80108f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	22ff      	movs	r2, #255	; 0xff
 80108fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010902:	f7fe ff51 	bl	800f7a8 <vPortExitCritical>
}
 8010906:	bf00      	nop
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b084      	sub	sp, #16
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010916:	f7fe ff19 	bl	800f74c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801091e:	2b00      	cmp	r3, #0
 8010920:	d102      	bne.n	8010928 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010922:	2301      	movs	r3, #1
 8010924:	60fb      	str	r3, [r7, #12]
 8010926:	e001      	b.n	801092c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010928:	2300      	movs	r3, #0
 801092a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801092c:	f7fe ff3c 	bl	800f7a8 <vPortExitCritical>

	return xReturn;
 8010930:	68fb      	ldr	r3, [r7, #12]
}
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b084      	sub	sp, #16
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010942:	f7fe ff03 	bl	800f74c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801094e:	429a      	cmp	r2, r3
 8010950:	d102      	bne.n	8010958 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010952:	2301      	movs	r3, #1
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	e001      	b.n	801095c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010958:	2300      	movs	r3, #0
 801095a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801095c:	f7fe ff24 	bl	800f7a8 <vPortExitCritical>

	return xReturn;
 8010960:	68fb      	ldr	r3, [r7, #12]
}
 8010962:	4618      	mov	r0, r3
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
	...

0801096c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010976:	2300      	movs	r3, #0
 8010978:	60fb      	str	r3, [r7, #12]
 801097a:	e014      	b.n	80109a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801097c:	4a0e      	ldr	r2, [pc, #56]	; (80109b8 <vQueueAddToRegistry+0x4c>)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10b      	bne.n	80109a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010988:	490b      	ldr	r1, [pc, #44]	; (80109b8 <vQueueAddToRegistry+0x4c>)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	683a      	ldr	r2, [r7, #0]
 801098e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010992:	4a09      	ldr	r2, [pc, #36]	; (80109b8 <vQueueAddToRegistry+0x4c>)
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	4413      	add	r3, r2
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801099e:	e005      	b.n	80109ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	3301      	adds	r3, #1
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b0b      	cmp	r3, #11
 80109aa:	d9e7      	bls.n	801097c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80109ac:	bf00      	nop
 80109ae:	3714      	adds	r7, #20
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr
 80109b8:	200285a0 	.word	0x200285a0

080109bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80109bc:	b480      	push	{r7}
 80109be:	b085      	sub	sp, #20
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109c4:	2300      	movs	r3, #0
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	e016      	b.n	80109f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80109ca:	4a10      	ldr	r2, [pc, #64]	; (8010a0c <vQueueUnregisterQueue+0x50>)
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4413      	add	r3, r2
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d10b      	bne.n	80109f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80109da:	4a0c      	ldr	r2, [pc, #48]	; (8010a0c <vQueueUnregisterQueue+0x50>)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2100      	movs	r1, #0
 80109e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80109e4:	4a09      	ldr	r2, [pc, #36]	; (8010a0c <vQueueUnregisterQueue+0x50>)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	00db      	lsls	r3, r3, #3
 80109ea:	4413      	add	r3, r2
 80109ec:	2200      	movs	r2, #0
 80109ee:	605a      	str	r2, [r3, #4]
				break;
 80109f0:	e005      	b.n	80109fe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	3301      	adds	r3, #1
 80109f6:	60fb      	str	r3, [r7, #12]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2b0b      	cmp	r3, #11
 80109fc:	d9e5      	bls.n	80109ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80109fe:	bf00      	nop
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	200285a0 	.word	0x200285a0

08010a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b086      	sub	sp, #24
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010a20:	f7fe fe94 	bl	800f74c <vPortEnterCritical>
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a2a:	b25b      	sxtb	r3, r3
 8010a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a30:	d103      	bne.n	8010a3a <vQueueWaitForMessageRestricted+0x2a>
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	2200      	movs	r2, #0
 8010a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a40:	b25b      	sxtb	r3, r3
 8010a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a46:	d103      	bne.n	8010a50 <vQueueWaitForMessageRestricted+0x40>
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a50:	f7fe feaa 	bl	800f7a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d106      	bne.n	8010a6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	3324      	adds	r3, #36	; 0x24
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	68b9      	ldr	r1, [r7, #8]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 fcc5 	bl	80113f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a6a:	6978      	ldr	r0, [r7, #20]
 8010a6c:	f7ff fefd 	bl	801086a <prvUnlockQueue>
	}
 8010a70:	bf00      	nop
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08e      	sub	sp, #56	; 0x38
 8010a7c:	af04      	add	r7, sp, #16
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
 8010a84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d109      	bne.n	8010aa0 <xTaskCreateStatic+0x28>
 8010a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a90:	f383 8811 	msr	BASEPRI, r3
 8010a94:	f3bf 8f6f 	isb	sy
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	623b      	str	r3, [r7, #32]
 8010a9e:	e7fe      	b.n	8010a9e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d109      	bne.n	8010aba <xTaskCreateStatic+0x42>
 8010aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aaa:	f383 8811 	msr	BASEPRI, r3
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	61fb      	str	r3, [r7, #28]
 8010ab8:	e7fe      	b.n	8010ab8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010aba:	2364      	movs	r3, #100	; 0x64
 8010abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	2b64      	cmp	r3, #100	; 0x64
 8010ac2:	d009      	beq.n	8010ad8 <xTaskCreateStatic+0x60>
 8010ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac8:	f383 8811 	msr	BASEPRI, r3
 8010acc:	f3bf 8f6f 	isb	sy
 8010ad0:	f3bf 8f4f 	dsb	sy
 8010ad4:	61bb      	str	r3, [r7, #24]
 8010ad6:	e7fe      	b.n	8010ad6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d01e      	beq.n	8010b1c <xTaskCreateStatic+0xa4>
 8010ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d01b      	beq.n	8010b1c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010aec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	2202      	movs	r2, #2
 8010af2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010af6:	2300      	movs	r3, #0
 8010af8:	9303      	str	r3, [sp, #12]
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	9302      	str	r3, [sp, #8]
 8010afe:	f107 0314 	add.w	r3, r7, #20
 8010b02:	9301      	str	r3, [sp, #4]
 8010b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	68b9      	ldr	r1, [r7, #8]
 8010b0e:	68f8      	ldr	r0, [r7, #12]
 8010b10:	f000 f850 	bl	8010bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b16:	f000 f8d9 	bl	8010ccc <prvAddNewTaskToReadyList>
 8010b1a:	e001      	b.n	8010b20 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010b20:	697b      	ldr	r3, [r7, #20]
	}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3728      	adds	r7, #40	; 0x28
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b08c      	sub	sp, #48	; 0x30
 8010b2e:	af04      	add	r7, sp, #16
 8010b30:	60f8      	str	r0, [r7, #12]
 8010b32:	60b9      	str	r1, [r7, #8]
 8010b34:	603b      	str	r3, [r7, #0]
 8010b36:	4613      	mov	r3, r2
 8010b38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b3a:	88fb      	ldrh	r3, [r7, #6]
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fe fa4a 	bl	800efd8 <pvPortMalloc>
 8010b44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00e      	beq.n	8010b6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010b4c:	2064      	movs	r0, #100	; 0x64
 8010b4e:	f7fe fa43 	bl	800efd8 <pvPortMalloc>
 8010b52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d003      	beq.n	8010b62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	697a      	ldr	r2, [r7, #20]
 8010b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8010b60:	e005      	b.n	8010b6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b62:	6978      	ldr	r0, [r7, #20]
 8010b64:	f7fe fafe 	bl	800f164 <vPortFree>
 8010b68:	e001      	b.n	8010b6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d017      	beq.n	8010ba4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	2200      	movs	r2, #0
 8010b78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b7c:	88fa      	ldrh	r2, [r7, #6]
 8010b7e:	2300      	movs	r3, #0
 8010b80:	9303      	str	r3, [sp, #12]
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	9302      	str	r3, [sp, #8]
 8010b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	68b9      	ldr	r1, [r7, #8]
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f000 f80e 	bl	8010bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b98:	69f8      	ldr	r0, [r7, #28]
 8010b9a:	f000 f897 	bl	8010ccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	61bb      	str	r3, [r7, #24]
 8010ba2:	e002      	b.n	8010baa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010baa:	69bb      	ldr	r3, [r7, #24]
	}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3720      	adds	r7, #32
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b088      	sub	sp, #32
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
 8010bc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	461a      	mov	r2, r3
 8010bcc:	21a5      	movs	r1, #165	; 0xa5
 8010bce:	f005 f9b0 	bl	8015f32 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010bdc:	3b01      	subs	r3, #1
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	4413      	add	r3, r2
 8010be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	f023 0307 	bic.w	r3, r3, #7
 8010bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	f003 0307 	and.w	r3, r3, #7
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d009      	beq.n	8010c0a <prvInitialiseNewTask+0x56>
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	617b      	str	r3, [r7, #20]
 8010c08:	e7fe      	b.n	8010c08 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8010c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0c:	69ba      	ldr	r2, [r7, #24]
 8010c0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c10:	2300      	movs	r3, #0
 8010c12:	61fb      	str	r3, [r7, #28]
 8010c14:	e012      	b.n	8010c3c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c16:	68ba      	ldr	r2, [r7, #8]
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	7819      	ldrb	r1, [r3, #0]
 8010c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	4413      	add	r3, r2
 8010c24:	3334      	adds	r3, #52	; 0x34
 8010c26:	460a      	mov	r2, r1
 8010c28:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010c2a:	68ba      	ldr	r2, [r7, #8]
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	4413      	add	r3, r2
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d006      	beq.n	8010c44 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	61fb      	str	r3, [r7, #28]
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	2b0f      	cmp	r3, #15
 8010c40:	d9e9      	bls.n	8010c16 <prvInitialiseNewTask+0x62>
 8010c42:	e000      	b.n	8010c46 <prvInitialiseNewTask+0x92>
		{
			break;
 8010c44:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	2b37      	cmp	r3, #55	; 0x37
 8010c52:	d901      	bls.n	8010c58 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c54:	2337      	movs	r3, #55	; 0x37
 8010c56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c62:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	2200      	movs	r2, #0
 8010c68:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7fe fbae 	bl	800f3d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	3318      	adds	r3, #24
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7fe fba9 	bl	800f3d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c96:	2200      	movs	r2, #0
 8010c98:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ca8:	683a      	ldr	r2, [r7, #0]
 8010caa:	68f9      	ldr	r1, [r7, #12]
 8010cac:	69b8      	ldr	r0, [r7, #24]
 8010cae:	f7fe fc23 	bl	800f4f8 <pxPortInitialiseStack>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d002      	beq.n	8010cc4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cc4:	bf00      	nop
 8010cc6:	3720      	adds	r7, #32
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010cd4:	f7fe fd3a 	bl	800f74c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010cd8:	4b2d      	ldr	r3, [pc, #180]	; (8010d90 <prvAddNewTaskToReadyList+0xc4>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	4a2c      	ldr	r2, [pc, #176]	; (8010d90 <prvAddNewTaskToReadyList+0xc4>)
 8010ce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ce2:	4b2c      	ldr	r3, [pc, #176]	; (8010d94 <prvAddNewTaskToReadyList+0xc8>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d109      	bne.n	8010cfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010cea:	4a2a      	ldr	r2, [pc, #168]	; (8010d94 <prvAddNewTaskToReadyList+0xc8>)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010cf0:	4b27      	ldr	r3, [pc, #156]	; (8010d90 <prvAddNewTaskToReadyList+0xc4>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d110      	bne.n	8010d1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010cf8:	f000 fcf8 	bl	80116ec <prvInitialiseTaskLists>
 8010cfc:	e00d      	b.n	8010d1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010cfe:	4b26      	ldr	r3, [pc, #152]	; (8010d98 <prvAddNewTaskToReadyList+0xcc>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d109      	bne.n	8010d1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d06:	4b23      	ldr	r3, [pc, #140]	; (8010d94 <prvAddNewTaskToReadyList+0xc8>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d802      	bhi.n	8010d1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d14:	4a1f      	ldr	r2, [pc, #124]	; (8010d94 <prvAddNewTaskToReadyList+0xc8>)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d1a:	4b20      	ldr	r3, [pc, #128]	; (8010d9c <prvAddNewTaskToReadyList+0xd0>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	4a1e      	ldr	r2, [pc, #120]	; (8010d9c <prvAddNewTaskToReadyList+0xd0>)
 8010d22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d24:	4b1d      	ldr	r3, [pc, #116]	; (8010d9c <prvAddNewTaskToReadyList+0xd0>)
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d30:	4b1b      	ldr	r3, [pc, #108]	; (8010da0 <prvAddNewTaskToReadyList+0xd4>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d903      	bls.n	8010d40 <prvAddNewTaskToReadyList+0x74>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d3c:	4a18      	ldr	r2, [pc, #96]	; (8010da0 <prvAddNewTaskToReadyList+0xd4>)
 8010d3e:	6013      	str	r3, [r2, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d44:	4613      	mov	r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4413      	add	r3, r2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4a15      	ldr	r2, [pc, #84]	; (8010da4 <prvAddNewTaskToReadyList+0xd8>)
 8010d4e:	441a      	add	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	3304      	adds	r3, #4
 8010d54:	4619      	mov	r1, r3
 8010d56:	4610      	mov	r0, r2
 8010d58:	f7fe fb47 	bl	800f3ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d5c:	f7fe fd24 	bl	800f7a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d60:	4b0d      	ldr	r3, [pc, #52]	; (8010d98 <prvAddNewTaskToReadyList+0xcc>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00e      	beq.n	8010d86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d68:	4b0a      	ldr	r3, [pc, #40]	; (8010d94 <prvAddNewTaskToReadyList+0xc8>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d207      	bcs.n	8010d86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d76:	4b0c      	ldr	r3, [pc, #48]	; (8010da8 <prvAddNewTaskToReadyList+0xdc>)
 8010d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d7c:	601a      	str	r2, [r3, #0]
 8010d7e:	f3bf 8f4f 	dsb	sy
 8010d82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d86:	bf00      	nop
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	200272cc 	.word	0x200272cc
 8010d94:	20026df8 	.word	0x20026df8
 8010d98:	200272d8 	.word	0x200272d8
 8010d9c:	200272e8 	.word	0x200272e8
 8010da0:	200272d4 	.word	0x200272d4
 8010da4:	20026dfc 	.word	0x20026dfc
 8010da8:	e000ed04 	.word	0xe000ed04

08010dac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010db4:	2300      	movs	r3, #0
 8010db6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d016      	beq.n	8010dec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010dbe:	4b13      	ldr	r3, [pc, #76]	; (8010e0c <vTaskDelay+0x60>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d009      	beq.n	8010dda <vTaskDelay+0x2e>
 8010dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	60bb      	str	r3, [r7, #8]
 8010dd8:	e7fe      	b.n	8010dd8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010dda:	f000 f881 	bl	8010ee0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010dde:	2100      	movs	r1, #0
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f001 f8a9 	bl	8011f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010de6:	f000 f8c1 	bl	8010f6c <xTaskResumeAll>
 8010dea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d107      	bne.n	8010e02 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010df2:	4b07      	ldr	r3, [pc, #28]	; (8010e10 <vTaskDelay+0x64>)
 8010df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e02:	bf00      	nop
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	200272f4 	.word	0x200272f4
 8010e10:	e000ed04 	.word	0xe000ed04

08010e14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08a      	sub	sp, #40	; 0x28
 8010e18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e22:	463a      	mov	r2, r7
 8010e24:	1d39      	adds	r1, r7, #4
 8010e26:	f107 0308 	add.w	r3, r7, #8
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe f8a0 	bl	800ef70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010e30:	6839      	ldr	r1, [r7, #0]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	68ba      	ldr	r2, [r7, #8]
 8010e36:	9202      	str	r2, [sp, #8]
 8010e38:	9301      	str	r3, [sp, #4]
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	9300      	str	r3, [sp, #0]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	460a      	mov	r2, r1
 8010e42:	4921      	ldr	r1, [pc, #132]	; (8010ec8 <vTaskStartScheduler+0xb4>)
 8010e44:	4821      	ldr	r0, [pc, #132]	; (8010ecc <vTaskStartScheduler+0xb8>)
 8010e46:	f7ff fe17 	bl	8010a78 <xTaskCreateStatic>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	4b20      	ldr	r3, [pc, #128]	; (8010ed0 <vTaskStartScheduler+0xbc>)
 8010e4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010e50:	4b1f      	ldr	r3, [pc, #124]	; (8010ed0 <vTaskStartScheduler+0xbc>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	617b      	str	r3, [r7, #20]
 8010e5c:	e001      	b.n	8010e62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d102      	bne.n	8010e6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010e68:	f001 f8ba 	bl	8011fe0 <xTimerCreateTimerTask>
 8010e6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	d117      	bne.n	8010ea4 <vTaskStartScheduler+0x90>
 8010e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e78:	f383 8811 	msr	BASEPRI, r3
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	f3bf 8f4f 	dsb	sy
 8010e84:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010e86:	4b13      	ldr	r3, [pc, #76]	; (8010ed4 <vTaskStartScheduler+0xc0>)
 8010e88:	f04f 32ff 	mov.w	r2, #4294967295
 8010e8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010e8e:	4b12      	ldr	r3, [pc, #72]	; (8010ed8 <vTaskStartScheduler+0xc4>)
 8010e90:	2201      	movs	r2, #1
 8010e92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010e94:	4b11      	ldr	r3, [pc, #68]	; (8010edc <vTaskStartScheduler+0xc8>)
 8010e96:	2200      	movs	r2, #0
 8010e98:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010e9a:	f7f0 f9c8 	bl	800122e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010e9e:	f7fe fbb7 	bl	800f610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010ea2:	e00d      	b.n	8010ec0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eaa:	d109      	bne.n	8010ec0 <vTaskStartScheduler+0xac>
 8010eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb0:	f383 8811 	msr	BASEPRI, r3
 8010eb4:	f3bf 8f6f 	isb	sy
 8010eb8:	f3bf 8f4f 	dsb	sy
 8010ebc:	60fb      	str	r3, [r7, #12]
 8010ebe:	e7fe      	b.n	8010ebe <vTaskStartScheduler+0xaa>
}
 8010ec0:	bf00      	nop
 8010ec2:	3718      	adds	r7, #24
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	080172c8 	.word	0x080172c8
 8010ecc:	08011615 	.word	0x08011615
 8010ed0:	200272f0 	.word	0x200272f0
 8010ed4:	200272ec 	.word	0x200272ec
 8010ed8:	200272d8 	.word	0x200272d8
 8010edc:	200272d0 	.word	0x200272d0

08010ee0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010ee4:	4b04      	ldr	r3, [pc, #16]	; (8010ef8 <vTaskSuspendAll+0x18>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	4a03      	ldr	r2, [pc, #12]	; (8010ef8 <vTaskSuspendAll+0x18>)
 8010eec:	6013      	str	r3, [r2, #0]
}
 8010eee:	bf00      	nop
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr
 8010ef8:	200272f4 	.word	0x200272f4

08010efc <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8010f02:	2300      	movs	r3, #0
 8010f04:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8010f06:	4b14      	ldr	r3, [pc, #80]	; (8010f58 <prvGetExpectedIdleTime+0x5c>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8010f12:	4b12      	ldr	r3, [pc, #72]	; (8010f5c <prvGetExpectedIdleTime+0x60>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d002      	beq.n	8010f22 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	607b      	str	r3, [r7, #4]
 8010f20:	e012      	b.n	8010f48 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8010f22:	4b0f      	ldr	r3, [pc, #60]	; (8010f60 <prvGetExpectedIdleTime+0x64>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d902      	bls.n	8010f30 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	607b      	str	r3, [r7, #4]
 8010f2e:	e00b      	b.n	8010f48 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d002      	beq.n	8010f3c <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	607b      	str	r3, [r7, #4]
 8010f3a:	e005      	b.n	8010f48 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{

			xReturn = xNextTaskUnblockTime - xTickCount;
 8010f3c:	4b09      	ldr	r3, [pc, #36]	; (8010f64 <prvGetExpectedIdleTime+0x68>)
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	4b09      	ldr	r3, [pc, #36]	; (8010f68 <prvGetExpectedIdleTime+0x6c>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8010f48:	687b      	ldr	r3, [r7, #4]
	}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr
 8010f56:	bf00      	nop
 8010f58:	200272d4 	.word	0x200272d4
 8010f5c:	20026df8 	.word	0x20026df8
 8010f60:	20026dfc 	.word	0x20026dfc
 8010f64:	200272ec 	.word	0x200272ec
 8010f68:	200272d0 	.word	0x200272d0

08010f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010f72:	2300      	movs	r3, #0
 8010f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f76:	2300      	movs	r3, #0
 8010f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f7a:	4b41      	ldr	r3, [pc, #260]	; (8011080 <xTaskResumeAll+0x114>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d109      	bne.n	8010f96 <xTaskResumeAll+0x2a>
 8010f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	603b      	str	r3, [r7, #0]
 8010f94:	e7fe      	b.n	8010f94 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010f96:	f7fe fbd9 	bl	800f74c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010f9a:	4b39      	ldr	r3, [pc, #228]	; (8011080 <xTaskResumeAll+0x114>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	4a37      	ldr	r2, [pc, #220]	; (8011080 <xTaskResumeAll+0x114>)
 8010fa2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fa4:	4b36      	ldr	r3, [pc, #216]	; (8011080 <xTaskResumeAll+0x114>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d162      	bne.n	8011072 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010fac:	4b35      	ldr	r3, [pc, #212]	; (8011084 <xTaskResumeAll+0x118>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d05e      	beq.n	8011072 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fb4:	e02f      	b.n	8011016 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010fb6:	4b34      	ldr	r3, [pc, #208]	; (8011088 <xTaskResumeAll+0x11c>)
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3318      	adds	r3, #24
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fa6e 	bl	800f4a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	3304      	adds	r3, #4
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fe fa69 	bl	800f4a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fd6:	4b2d      	ldr	r3, [pc, #180]	; (801108c <xTaskResumeAll+0x120>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d903      	bls.n	8010fe6 <xTaskResumeAll+0x7a>
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fe2:	4a2a      	ldr	r2, [pc, #168]	; (801108c <xTaskResumeAll+0x120>)
 8010fe4:	6013      	str	r3, [r2, #0]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fea:	4613      	mov	r3, r2
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	4413      	add	r3, r2
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	4a27      	ldr	r2, [pc, #156]	; (8011090 <xTaskResumeAll+0x124>)
 8010ff4:	441a      	add	r2, r3
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	4610      	mov	r0, r2
 8010ffe:	f7fe f9f4 	bl	800f3ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011006:	4b23      	ldr	r3, [pc, #140]	; (8011094 <xTaskResumeAll+0x128>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100c:	429a      	cmp	r2, r3
 801100e:	d302      	bcc.n	8011016 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011010:	4b21      	ldr	r3, [pc, #132]	; (8011098 <xTaskResumeAll+0x12c>)
 8011012:	2201      	movs	r2, #1
 8011014:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011016:	4b1c      	ldr	r3, [pc, #112]	; (8011088 <xTaskResumeAll+0x11c>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d1cb      	bne.n	8010fb6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d001      	beq.n	8011028 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011024:	f000 fbfc 	bl	8011820 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011028:	4b1c      	ldr	r3, [pc, #112]	; (801109c <xTaskResumeAll+0x130>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d010      	beq.n	8011056 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011034:	f000 f86c 	bl	8011110 <xTaskIncrementTick>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d002      	beq.n	8011044 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801103e:	4b16      	ldr	r3, [pc, #88]	; (8011098 <xTaskResumeAll+0x12c>)
 8011040:	2201      	movs	r2, #1
 8011042:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	3b01      	subs	r3, #1
 8011048:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1f1      	bne.n	8011034 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011050:	4b12      	ldr	r3, [pc, #72]	; (801109c <xTaskResumeAll+0x130>)
 8011052:	2200      	movs	r2, #0
 8011054:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011056:	4b10      	ldr	r3, [pc, #64]	; (8011098 <xTaskResumeAll+0x12c>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d009      	beq.n	8011072 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801105e:	2301      	movs	r3, #1
 8011060:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011062:	4b0f      	ldr	r3, [pc, #60]	; (80110a0 <xTaskResumeAll+0x134>)
 8011064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011068:	601a      	str	r2, [r3, #0]
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011072:	f7fe fb99 	bl	800f7a8 <vPortExitCritical>

	return xAlreadyYielded;
 8011076:	68bb      	ldr	r3, [r7, #8]
}
 8011078:	4618      	mov	r0, r3
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	200272f4 	.word	0x200272f4
 8011084:	200272cc 	.word	0x200272cc
 8011088:	2002728c 	.word	0x2002728c
 801108c:	200272d4 	.word	0x200272d4
 8011090:	20026dfc 	.word	0x20026dfc
 8011094:	20026df8 	.word	0x20026df8
 8011098:	200272e0 	.word	0x200272e0
 801109c:	200272dc 	.word	0x200272dc
 80110a0:	e000ed04 	.word	0xe000ed04

080110a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80110a4:	b480      	push	{r7}
 80110a6:	b083      	sub	sp, #12
 80110a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80110aa:	4b05      	ldr	r3, [pc, #20]	; (80110c0 <xTaskGetTickCount+0x1c>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80110b0:	687b      	ldr	r3, [r7, #4]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	370c      	adds	r7, #12
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	200272d0 	.word	0x200272d0

080110c4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80110cc:	4b0e      	ldr	r3, [pc, #56]	; (8011108 <vTaskStepTick+0x44>)
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	441a      	add	r2, r3
 80110d4:	4b0d      	ldr	r3, [pc, #52]	; (801110c <vTaskStepTick+0x48>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d909      	bls.n	80110f0 <vTaskStepTick+0x2c>
 80110dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e0:	f383 8811 	msr	BASEPRI, r3
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	60fb      	str	r3, [r7, #12]
 80110ee:	e7fe      	b.n	80110ee <vTaskStepTick+0x2a>
		xTickCount += xTicksToJump;
 80110f0:	4b05      	ldr	r3, [pc, #20]	; (8011108 <vTaskStepTick+0x44>)
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4413      	add	r3, r2
 80110f8:	4a03      	ldr	r2, [pc, #12]	; (8011108 <vTaskStepTick+0x44>)
 80110fa:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80110fc:	bf00      	nop
 80110fe:	3714      	adds	r7, #20
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	200272d0 	.word	0x200272d0
 801110c:	200272ec 	.word	0x200272ec

08011110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011116:	2300      	movs	r3, #0
 8011118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801111a:	4b55      	ldr	r3, [pc, #340]	; (8011270 <xTaskIncrementTick+0x160>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	f040 8093 	bne.w	801124a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011124:	4b53      	ldr	r3, [pc, #332]	; (8011274 <xTaskIncrementTick+0x164>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	3301      	adds	r3, #1
 801112a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801112c:	4a51      	ldr	r2, [pc, #324]	; (8011274 <xTaskIncrementTick+0x164>)
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d11f      	bne.n	8011178 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011138:	4b4f      	ldr	r3, [pc, #316]	; (8011278 <xTaskIncrementTick+0x168>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d009      	beq.n	8011156 <xTaskIncrementTick+0x46>
 8011142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011146:	f383 8811 	msr	BASEPRI, r3
 801114a:	f3bf 8f6f 	isb	sy
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	603b      	str	r3, [r7, #0]
 8011154:	e7fe      	b.n	8011154 <xTaskIncrementTick+0x44>
 8011156:	4b48      	ldr	r3, [pc, #288]	; (8011278 <xTaskIncrementTick+0x168>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	4b47      	ldr	r3, [pc, #284]	; (801127c <xTaskIncrementTick+0x16c>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a45      	ldr	r2, [pc, #276]	; (8011278 <xTaskIncrementTick+0x168>)
 8011162:	6013      	str	r3, [r2, #0]
 8011164:	4a45      	ldr	r2, [pc, #276]	; (801127c <xTaskIncrementTick+0x16c>)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6013      	str	r3, [r2, #0]
 801116a:	4b45      	ldr	r3, [pc, #276]	; (8011280 <xTaskIncrementTick+0x170>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	3301      	adds	r3, #1
 8011170:	4a43      	ldr	r2, [pc, #268]	; (8011280 <xTaskIncrementTick+0x170>)
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	f000 fb54 	bl	8011820 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011178:	4b42      	ldr	r3, [pc, #264]	; (8011284 <xTaskIncrementTick+0x174>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	693a      	ldr	r2, [r7, #16]
 801117e:	429a      	cmp	r2, r3
 8011180:	d34e      	bcc.n	8011220 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011182:	4b3d      	ldr	r3, [pc, #244]	; (8011278 <xTaskIncrementTick+0x168>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d101      	bne.n	8011190 <xTaskIncrementTick+0x80>
 801118c:	2301      	movs	r3, #1
 801118e:	e000      	b.n	8011192 <xTaskIncrementTick+0x82>
 8011190:	2300      	movs	r3, #0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d004      	beq.n	80111a0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011196:	4b3b      	ldr	r3, [pc, #236]	; (8011284 <xTaskIncrementTick+0x174>)
 8011198:	f04f 32ff 	mov.w	r2, #4294967295
 801119c:	601a      	str	r2, [r3, #0]
					break;
 801119e:	e03f      	b.n	8011220 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80111a0:	4b35      	ldr	r3, [pc, #212]	; (8011278 <xTaskIncrementTick+0x168>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80111b0:	693a      	ldr	r2, [r7, #16]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d203      	bcs.n	80111c0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80111b8:	4a32      	ldr	r2, [pc, #200]	; (8011284 <xTaskIncrementTick+0x174>)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6013      	str	r3, [r2, #0]
						break;
 80111be:	e02f      	b.n	8011220 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	3304      	adds	r3, #4
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fe f96d 	bl	800f4a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d004      	beq.n	80111dc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	3318      	adds	r3, #24
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fe f964 	bl	800f4a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e0:	4b29      	ldr	r3, [pc, #164]	; (8011288 <xTaskIncrementTick+0x178>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d903      	bls.n	80111f0 <xTaskIncrementTick+0xe0>
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ec:	4a26      	ldr	r2, [pc, #152]	; (8011288 <xTaskIncrementTick+0x178>)
 80111ee:	6013      	str	r3, [r2, #0]
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111f4:	4613      	mov	r3, r2
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	4413      	add	r3, r2
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	4a23      	ldr	r2, [pc, #140]	; (801128c <xTaskIncrementTick+0x17c>)
 80111fe:	441a      	add	r2, r3
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	3304      	adds	r3, #4
 8011204:	4619      	mov	r1, r3
 8011206:	4610      	mov	r0, r2
 8011208:	f7fe f8ef 	bl	800f3ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011210:	4b1f      	ldr	r3, [pc, #124]	; (8011290 <xTaskIncrementTick+0x180>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011216:	429a      	cmp	r2, r3
 8011218:	d3b3      	bcc.n	8011182 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801121a:	2301      	movs	r3, #1
 801121c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801121e:	e7b0      	b.n	8011182 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011220:	4b1b      	ldr	r3, [pc, #108]	; (8011290 <xTaskIncrementTick+0x180>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011226:	4919      	ldr	r1, [pc, #100]	; (801128c <xTaskIncrementTick+0x17c>)
 8011228:	4613      	mov	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	4413      	add	r3, r2
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	440b      	add	r3, r1
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d901      	bls.n	801123c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8011238:	2301      	movs	r3, #1
 801123a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 801123c:	4b15      	ldr	r3, [pc, #84]	; (8011294 <xTaskIncrementTick+0x184>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d109      	bne.n	8011258 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8011244:	f7f0 f801 	bl	800124a <vApplicationTickHook>
 8011248:	e006      	b.n	8011258 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801124a:	4b12      	ldr	r3, [pc, #72]	; (8011294 <xTaskIncrementTick+0x184>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	3301      	adds	r3, #1
 8011250:	4a10      	ldr	r2, [pc, #64]	; (8011294 <xTaskIncrementTick+0x184>)
 8011252:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8011254:	f7ef fff9 	bl	800124a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011258:	4b0f      	ldr	r3, [pc, #60]	; (8011298 <xTaskIncrementTick+0x188>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8011260:	2301      	movs	r3, #1
 8011262:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011264:	697b      	ldr	r3, [r7, #20]
}
 8011266:	4618      	mov	r0, r3
 8011268:	3718      	adds	r7, #24
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	200272f4 	.word	0x200272f4
 8011274:	200272d0 	.word	0x200272d0
 8011278:	20027284 	.word	0x20027284
 801127c:	20027288 	.word	0x20027288
 8011280:	200272e4 	.word	0x200272e4
 8011284:	200272ec 	.word	0x200272ec
 8011288:	200272d4 	.word	0x200272d4
 801128c:	20026dfc 	.word	0x20026dfc
 8011290:	20026df8 	.word	0x20026df8
 8011294:	200272dc 	.word	0x200272dc
 8011298:	200272e0 	.word	0x200272e0

0801129c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80112a2:	4b3b      	ldr	r3, [pc, #236]	; (8011390 <vTaskSwitchContext+0xf4>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80112aa:	4b3a      	ldr	r3, [pc, #232]	; (8011394 <vTaskSwitchContext+0xf8>)
 80112ac:	2201      	movs	r2, #1
 80112ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80112b0:	e06a      	b.n	8011388 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 80112b2:	4b38      	ldr	r3, [pc, #224]	; (8011394 <vTaskSwitchContext+0xf8>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80112b8:	f7ef ffc0 	bl	800123c <getRunTimeCounterValue>
 80112bc:	4602      	mov	r2, r0
 80112be:	4b36      	ldr	r3, [pc, #216]	; (8011398 <vTaskSwitchContext+0xfc>)
 80112c0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80112c2:	4b35      	ldr	r3, [pc, #212]	; (8011398 <vTaskSwitchContext+0xfc>)
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	4b35      	ldr	r3, [pc, #212]	; (801139c <vTaskSwitchContext+0x100>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d909      	bls.n	80112e2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80112ce:	4b34      	ldr	r3, [pc, #208]	; (80113a0 <vTaskSwitchContext+0x104>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80112d4:	4a30      	ldr	r2, [pc, #192]	; (8011398 <vTaskSwitchContext+0xfc>)
 80112d6:	6810      	ldr	r0, [r2, #0]
 80112d8:	4a30      	ldr	r2, [pc, #192]	; (801139c <vTaskSwitchContext+0x100>)
 80112da:	6812      	ldr	r2, [r2, #0]
 80112dc:	1a82      	subs	r2, r0, r2
 80112de:	440a      	add	r2, r1
 80112e0:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80112e2:	4b2d      	ldr	r3, [pc, #180]	; (8011398 <vTaskSwitchContext+0xfc>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4a2d      	ldr	r2, [pc, #180]	; (801139c <vTaskSwitchContext+0x100>)
 80112e8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80112ea:	4b2d      	ldr	r3, [pc, #180]	; (80113a0 <vTaskSwitchContext+0x104>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	4b2b      	ldr	r3, [pc, #172]	; (80113a0 <vTaskSwitchContext+0x104>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d808      	bhi.n	801130c <vTaskSwitchContext+0x70>
 80112fa:	4b29      	ldr	r3, [pc, #164]	; (80113a0 <vTaskSwitchContext+0x104>)
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	4b28      	ldr	r3, [pc, #160]	; (80113a0 <vTaskSwitchContext+0x104>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	3334      	adds	r3, #52	; 0x34
 8011304:	4619      	mov	r1, r3
 8011306:	4610      	mov	r0, r2
 8011308:	f7ef ffa6 	bl	8001258 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801130c:	4b25      	ldr	r3, [pc, #148]	; (80113a4 <vTaskSwitchContext+0x108>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	60fb      	str	r3, [r7, #12]
 8011312:	e00f      	b.n	8011334 <vTaskSwitchContext+0x98>
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d109      	bne.n	801132e <vTaskSwitchContext+0x92>
 801131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131e:	f383 8811 	msr	BASEPRI, r3
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	f3bf 8f4f 	dsb	sy
 801132a:	607b      	str	r3, [r7, #4]
 801132c:	e7fe      	b.n	801132c <vTaskSwitchContext+0x90>
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	3b01      	subs	r3, #1
 8011332:	60fb      	str	r3, [r7, #12]
 8011334:	491c      	ldr	r1, [pc, #112]	; (80113a8 <vTaskSwitchContext+0x10c>)
 8011336:	68fa      	ldr	r2, [r7, #12]
 8011338:	4613      	mov	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	4413      	add	r3, r2
 801133e:	009b      	lsls	r3, r3, #2
 8011340:	440b      	add	r3, r1
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d0e5      	beq.n	8011314 <vTaskSwitchContext+0x78>
 8011348:	68fa      	ldr	r2, [r7, #12]
 801134a:	4613      	mov	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4413      	add	r3, r2
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	4a15      	ldr	r2, [pc, #84]	; (80113a8 <vTaskSwitchContext+0x10c>)
 8011354:	4413      	add	r3, r2
 8011356:	60bb      	str	r3, [r7, #8]
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	605a      	str	r2, [r3, #4]
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	685a      	ldr	r2, [r3, #4]
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	3308      	adds	r3, #8
 801136a:	429a      	cmp	r2, r3
 801136c:	d104      	bne.n	8011378 <vTaskSwitchContext+0xdc>
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	685a      	ldr	r2, [r3, #4]
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	605a      	str	r2, [r3, #4]
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	4a08      	ldr	r2, [pc, #32]	; (80113a0 <vTaskSwitchContext+0x104>)
 8011380:	6013      	str	r3, [r2, #0]
 8011382:	4a08      	ldr	r2, [pc, #32]	; (80113a4 <vTaskSwitchContext+0x108>)
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6013      	str	r3, [r2, #0]
}
 8011388:	bf00      	nop
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	200272f4 	.word	0x200272f4
 8011394:	200272e0 	.word	0x200272e0
 8011398:	200272fc 	.word	0x200272fc
 801139c:	200272f8 	.word	0x200272f8
 80113a0:	20026df8 	.word	0x20026df8
 80113a4:	200272d4 	.word	0x200272d4
 80113a8:	20026dfc 	.word	0x20026dfc

080113ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d109      	bne.n	80113d0 <vTaskPlaceOnEventList+0x24>
 80113bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c0:	f383 8811 	msr	BASEPRI, r3
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	60fb      	str	r3, [r7, #12]
 80113ce:	e7fe      	b.n	80113ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80113d0:	4b07      	ldr	r3, [pc, #28]	; (80113f0 <vTaskPlaceOnEventList+0x44>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3318      	adds	r3, #24
 80113d6:	4619      	mov	r1, r3
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7fe f82a 	bl	800f432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80113de:	2101      	movs	r1, #1
 80113e0:	6838      	ldr	r0, [r7, #0]
 80113e2:	f000 fda9 	bl	8011f38 <prvAddCurrentTaskToDelayedList>
}
 80113e6:	bf00      	nop
 80113e8:	3710      	adds	r7, #16
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	20026df8 	.word	0x20026df8

080113f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d109      	bne.n	801141a <vTaskPlaceOnEventListRestricted+0x26>
 8011406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801140a:	f383 8811 	msr	BASEPRI, r3
 801140e:	f3bf 8f6f 	isb	sy
 8011412:	f3bf 8f4f 	dsb	sy
 8011416:	617b      	str	r3, [r7, #20]
 8011418:	e7fe      	b.n	8011418 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801141a:	4b0a      	ldr	r3, [pc, #40]	; (8011444 <vTaskPlaceOnEventListRestricted+0x50>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	3318      	adds	r3, #24
 8011420:	4619      	mov	r1, r3
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f7fd ffe1 	bl	800f3ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d002      	beq.n	8011434 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801142e:	f04f 33ff 	mov.w	r3, #4294967295
 8011432:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011434:	6879      	ldr	r1, [r7, #4]
 8011436:	68b8      	ldr	r0, [r7, #8]
 8011438:	f000 fd7e 	bl	8011f38 <prvAddCurrentTaskToDelayedList>
	}
 801143c:	bf00      	nop
 801143e:	3718      	adds	r7, #24
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	20026df8 	.word	0x20026df8

08011448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b086      	sub	sp, #24
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d109      	bne.n	8011472 <xTaskRemoveFromEventList+0x2a>
 801145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011462:	f383 8811 	msr	BASEPRI, r3
 8011466:	f3bf 8f6f 	isb	sy
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	60fb      	str	r3, [r7, #12]
 8011470:	e7fe      	b.n	8011470 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	3318      	adds	r3, #24
 8011476:	4618      	mov	r0, r3
 8011478:	f7fe f814 	bl	800f4a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801147c:	4b1e      	ldr	r3, [pc, #120]	; (80114f8 <xTaskRemoveFromEventList+0xb0>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d11d      	bne.n	80114c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	3304      	adds	r3, #4
 8011488:	4618      	mov	r0, r3
 801148a:	f7fe f80b 	bl	800f4a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011492:	4b1a      	ldr	r3, [pc, #104]	; (80114fc <xTaskRemoveFromEventList+0xb4>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	429a      	cmp	r2, r3
 8011498:	d903      	bls.n	80114a2 <xTaskRemoveFromEventList+0x5a>
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149e:	4a17      	ldr	r2, [pc, #92]	; (80114fc <xTaskRemoveFromEventList+0xb4>)
 80114a0:	6013      	str	r3, [r2, #0]
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a6:	4613      	mov	r3, r2
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	4413      	add	r3, r2
 80114ac:	009b      	lsls	r3, r3, #2
 80114ae:	4a14      	ldr	r2, [pc, #80]	; (8011500 <xTaskRemoveFromEventList+0xb8>)
 80114b0:	441a      	add	r2, r3
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	3304      	adds	r3, #4
 80114b6:	4619      	mov	r1, r3
 80114b8:	4610      	mov	r0, r2
 80114ba:	f7fd ff96 	bl	800f3ea <vListInsertEnd>
 80114be:	e005      	b.n	80114cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	3318      	adds	r3, #24
 80114c4:	4619      	mov	r1, r3
 80114c6:	480f      	ldr	r0, [pc, #60]	; (8011504 <xTaskRemoveFromEventList+0xbc>)
 80114c8:	f7fd ff8f 	bl	800f3ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d0:	4b0d      	ldr	r3, [pc, #52]	; (8011508 <xTaskRemoveFromEventList+0xc0>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d905      	bls.n	80114e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80114da:	2301      	movs	r3, #1
 80114dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80114de:	4b0b      	ldr	r3, [pc, #44]	; (801150c <xTaskRemoveFromEventList+0xc4>)
 80114e0:	2201      	movs	r2, #1
 80114e2:	601a      	str	r2, [r3, #0]
 80114e4:	e001      	b.n	80114ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80114e6:	2300      	movs	r3, #0
 80114e8:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 80114ea:	f000 f999 	bl	8011820 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 80114ee:	697b      	ldr	r3, [r7, #20]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3718      	adds	r7, #24
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	200272f4 	.word	0x200272f4
 80114fc:	200272d4 	.word	0x200272d4
 8011500:	20026dfc 	.word	0x20026dfc
 8011504:	2002728c 	.word	0x2002728c
 8011508:	20026df8 	.word	0x20026df8
 801150c:	200272e0 	.word	0x200272e0

08011510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011518:	4b06      	ldr	r3, [pc, #24]	; (8011534 <vTaskInternalSetTimeOutState+0x24>)
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011520:	4b05      	ldr	r3, [pc, #20]	; (8011538 <vTaskInternalSetTimeOutState+0x28>)
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	605a      	str	r2, [r3, #4]
}
 8011528:	bf00      	nop
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr
 8011534:	200272e4 	.word	0x200272e4
 8011538:	200272d0 	.word	0x200272d0

0801153c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b088      	sub	sp, #32
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d109      	bne.n	8011560 <xTaskCheckForTimeOut+0x24>
 801154c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011550:	f383 8811 	msr	BASEPRI, r3
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	613b      	str	r3, [r7, #16]
 801155e:	e7fe      	b.n	801155e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d109      	bne.n	801157a <xTaskCheckForTimeOut+0x3e>
 8011566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156a:	f383 8811 	msr	BASEPRI, r3
 801156e:	f3bf 8f6f 	isb	sy
 8011572:	f3bf 8f4f 	dsb	sy
 8011576:	60fb      	str	r3, [r7, #12]
 8011578:	e7fe      	b.n	8011578 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801157a:	f7fe f8e7 	bl	800f74c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801157e:	4b1d      	ldr	r3, [pc, #116]	; (80115f4 <xTaskCheckForTimeOut+0xb8>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	69ba      	ldr	r2, [r7, #24]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011596:	d102      	bne.n	801159e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011598:	2300      	movs	r3, #0
 801159a:	61fb      	str	r3, [r7, #28]
 801159c:	e023      	b.n	80115e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	4b15      	ldr	r3, [pc, #84]	; (80115f8 <xTaskCheckForTimeOut+0xbc>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	429a      	cmp	r2, r3
 80115a8:	d007      	beq.n	80115ba <xTaskCheckForTimeOut+0x7e>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	69ba      	ldr	r2, [r7, #24]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d302      	bcc.n	80115ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80115b4:	2301      	movs	r3, #1
 80115b6:	61fb      	str	r3, [r7, #28]
 80115b8:	e015      	b.n	80115e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	697a      	ldr	r2, [r7, #20]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d20b      	bcs.n	80115dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	1ad2      	subs	r2, r2, r3
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7ff ff9d 	bl	8011510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80115d6:	2300      	movs	r3, #0
 80115d8:	61fb      	str	r3, [r7, #28]
 80115da:	e004      	b.n	80115e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	2200      	movs	r2, #0
 80115e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80115e2:	2301      	movs	r3, #1
 80115e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80115e6:	f7fe f8df 	bl	800f7a8 <vPortExitCritical>

	return xReturn;
 80115ea:	69fb      	ldr	r3, [r7, #28]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3720      	adds	r7, #32
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	200272d0 	.word	0x200272d0
 80115f8:	200272e4 	.word	0x200272e4

080115fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80115fc:	b480      	push	{r7}
 80115fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011600:	4b03      	ldr	r3, [pc, #12]	; (8011610 <vTaskMissedYield+0x14>)
 8011602:	2201      	movs	r2, #1
 8011604:	601a      	str	r2, [r3, #0]
}
 8011606:	bf00      	nop
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	200272e0 	.word	0x200272e0

08011614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801161c:	f000 f8a6 	bl	801176c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011620:	4b17      	ldr	r3, [pc, #92]	; (8011680 <prvIdleTask+0x6c>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	2b01      	cmp	r3, #1
 8011626:	d907      	bls.n	8011638 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011628:	4b16      	ldr	r3, [pc, #88]	; (8011684 <prvIdleTask+0x70>)
 801162a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801162e:	601a      	str	r2, [r3, #0]
 8011630:	f3bf 8f4f 	dsb	sy
 8011634:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8011638:	f7ff fc60 	bl	8010efc <prvGetExpectedIdleTime>
 801163c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d9eb      	bls.n	801161c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8011644:	f7ff fc4c 	bl	8010ee0 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8011648:	4b0f      	ldr	r3, [pc, #60]	; (8011688 <prvIdleTask+0x74>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	4b0f      	ldr	r3, [pc, #60]	; (801168c <prvIdleTask+0x78>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	429a      	cmp	r2, r3
 8011652:	d209      	bcs.n	8011668 <prvIdleTask+0x54>
 8011654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011658:	f383 8811 	msr	BASEPRI, r3
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	60bb      	str	r3, [r7, #8]
 8011666:	e7fe      	b.n	8011666 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8011668:	f7ff fc48 	bl	8010efc <prvGetExpectedIdleTime>
 801166c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d902      	bls.n	801167a <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f7f0 fe4b 	bl	8002310 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801167a:	f7ff fc77 	bl	8010f6c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801167e:	e7cd      	b.n	801161c <prvIdleTask+0x8>
 8011680:	20026dfc 	.word	0x20026dfc
 8011684:	e000ed04 	.word	0xe000ed04
 8011688:	200272ec 	.word	0x200272ec
 801168c:	200272d0 	.word	0x200272d0

08011690 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8011696:	2301      	movs	r3, #1
 8011698:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 801169a:	2301      	movs	r3, #1
 801169c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 801169e:	4b0f      	ldr	r3, [pc, #60]	; (80116dc <eTaskConfirmSleepModeStatus+0x4c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d002      	beq.n	80116ac <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80116a6:	2300      	movs	r3, #0
 80116a8:	71fb      	strb	r3, [r7, #7]
 80116aa:	e010      	b.n	80116ce <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80116ac:	4b0c      	ldr	r3, [pc, #48]	; (80116e0 <eTaskConfirmSleepModeStatus+0x50>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d002      	beq.n	80116ba <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80116b4:	2300      	movs	r3, #0
 80116b6:	71fb      	strb	r3, [r7, #7]
 80116b8:	e009      	b.n	80116ce <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80116ba:	4b0a      	ldr	r3, [pc, #40]	; (80116e4 <eTaskConfirmSleepModeStatus+0x54>)
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	4b0a      	ldr	r3, [pc, #40]	; (80116e8 <eTaskConfirmSleepModeStatus+0x58>)
 80116c0:	6819      	ldr	r1, [r3, #0]
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	1acb      	subs	r3, r1, r3
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d101      	bne.n	80116ce <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80116ca:	2302      	movs	r3, #2
 80116cc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80116ce:	79fb      	ldrb	r3, [r7, #7]
	}
 80116d0:	4618      	mov	r0, r3
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	2002728c 	.word	0x2002728c
 80116e0:	200272e0 	.word	0x200272e0
 80116e4:	200272b8 	.word	0x200272b8
 80116e8:	200272cc 	.word	0x200272cc

080116ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116f2:	2300      	movs	r3, #0
 80116f4:	607b      	str	r3, [r7, #4]
 80116f6:	e00c      	b.n	8011712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	4613      	mov	r3, r2
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	4413      	add	r3, r2
 8011700:	009b      	lsls	r3, r3, #2
 8011702:	4a12      	ldr	r2, [pc, #72]	; (801174c <prvInitialiseTaskLists+0x60>)
 8011704:	4413      	add	r3, r2
 8011706:	4618      	mov	r0, r3
 8011708:	f7fd fe42 	bl	800f390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	3301      	adds	r3, #1
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b37      	cmp	r3, #55	; 0x37
 8011716:	d9ef      	bls.n	80116f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011718:	480d      	ldr	r0, [pc, #52]	; (8011750 <prvInitialiseTaskLists+0x64>)
 801171a:	f7fd fe39 	bl	800f390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801171e:	480d      	ldr	r0, [pc, #52]	; (8011754 <prvInitialiseTaskLists+0x68>)
 8011720:	f7fd fe36 	bl	800f390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011724:	480c      	ldr	r0, [pc, #48]	; (8011758 <prvInitialiseTaskLists+0x6c>)
 8011726:	f7fd fe33 	bl	800f390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801172a:	480c      	ldr	r0, [pc, #48]	; (801175c <prvInitialiseTaskLists+0x70>)
 801172c:	f7fd fe30 	bl	800f390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011730:	480b      	ldr	r0, [pc, #44]	; (8011760 <prvInitialiseTaskLists+0x74>)
 8011732:	f7fd fe2d 	bl	800f390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011736:	4b0b      	ldr	r3, [pc, #44]	; (8011764 <prvInitialiseTaskLists+0x78>)
 8011738:	4a05      	ldr	r2, [pc, #20]	; (8011750 <prvInitialiseTaskLists+0x64>)
 801173a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801173c:	4b0a      	ldr	r3, [pc, #40]	; (8011768 <prvInitialiseTaskLists+0x7c>)
 801173e:	4a05      	ldr	r2, [pc, #20]	; (8011754 <prvInitialiseTaskLists+0x68>)
 8011740:	601a      	str	r2, [r3, #0]
}
 8011742:	bf00      	nop
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	20026dfc 	.word	0x20026dfc
 8011750:	2002725c 	.word	0x2002725c
 8011754:	20027270 	.word	0x20027270
 8011758:	2002728c 	.word	0x2002728c
 801175c:	200272a0 	.word	0x200272a0
 8011760:	200272b8 	.word	0x200272b8
 8011764:	20027284 	.word	0x20027284
 8011768:	20027288 	.word	0x20027288

0801176c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011772:	e019      	b.n	80117a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011774:	f7fd ffea 	bl	800f74c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011778:	4b0f      	ldr	r3, [pc, #60]	; (80117b8 <prvCheckTasksWaitingTermination+0x4c>)
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3304      	adds	r3, #4
 8011784:	4618      	mov	r0, r3
 8011786:	f7fd fe8d 	bl	800f4a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801178a:	4b0c      	ldr	r3, [pc, #48]	; (80117bc <prvCheckTasksWaitingTermination+0x50>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3b01      	subs	r3, #1
 8011790:	4a0a      	ldr	r2, [pc, #40]	; (80117bc <prvCheckTasksWaitingTermination+0x50>)
 8011792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011794:	4b0a      	ldr	r3, [pc, #40]	; (80117c0 <prvCheckTasksWaitingTermination+0x54>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	3b01      	subs	r3, #1
 801179a:	4a09      	ldr	r2, [pc, #36]	; (80117c0 <prvCheckTasksWaitingTermination+0x54>)
 801179c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801179e:	f7fe f803 	bl	800f7a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 f80e 	bl	80117c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117a8:	4b05      	ldr	r3, [pc, #20]	; (80117c0 <prvCheckTasksWaitingTermination+0x54>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d1e1      	bne.n	8011774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117b0:	bf00      	nop
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	200272a0 	.word	0x200272a0
 80117bc:	200272cc 	.word	0x200272cc
 80117c0:	200272b4 	.word	0x200272b4

080117c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d108      	bne.n	80117e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fd fcc2 	bl	800f164 <vPortFree>
				vPortFree( pxTCB );
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f7fd fcbf 	bl	800f164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80117e6:	e017      	b.n	8011818 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d103      	bne.n	80117fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7fd fcb6 	bl	800f164 <vPortFree>
	}
 80117f8:	e00e      	b.n	8011818 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011800:	2b02      	cmp	r3, #2
 8011802:	d009      	beq.n	8011818 <prvDeleteTCB+0x54>
 8011804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011808:	f383 8811 	msr	BASEPRI, r3
 801180c:	f3bf 8f6f 	isb	sy
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	60fb      	str	r3, [r7, #12]
 8011816:	e7fe      	b.n	8011816 <prvDeleteTCB+0x52>
	}
 8011818:	bf00      	nop
 801181a:	3710      	adds	r7, #16
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011826:	4b0f      	ldr	r3, [pc, #60]	; (8011864 <prvResetNextTaskUnblockTime+0x44>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d101      	bne.n	8011834 <prvResetNextTaskUnblockTime+0x14>
 8011830:	2301      	movs	r3, #1
 8011832:	e000      	b.n	8011836 <prvResetNextTaskUnblockTime+0x16>
 8011834:	2300      	movs	r3, #0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d004      	beq.n	8011844 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801183a:	4b0b      	ldr	r3, [pc, #44]	; (8011868 <prvResetNextTaskUnblockTime+0x48>)
 801183c:	f04f 32ff 	mov.w	r2, #4294967295
 8011840:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011842:	e008      	b.n	8011856 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011844:	4b07      	ldr	r3, [pc, #28]	; (8011864 <prvResetNextTaskUnblockTime+0x44>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	68db      	ldr	r3, [r3, #12]
 801184c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	4a05      	ldr	r2, [pc, #20]	; (8011868 <prvResetNextTaskUnblockTime+0x48>)
 8011854:	6013      	str	r3, [r2, #0]
}
 8011856:	bf00      	nop
 8011858:	370c      	adds	r7, #12
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	20027284 	.word	0x20027284
 8011868:	200272ec 	.word	0x200272ec

0801186c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011872:	4b05      	ldr	r3, [pc, #20]	; (8011888 <xTaskGetCurrentTaskHandle+0x1c>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011878:	687b      	ldr	r3, [r7, #4]
	}
 801187a:	4618      	mov	r0, r3
 801187c:	370c      	adds	r7, #12
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	20026df8 	.word	0x20026df8

0801188c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011892:	4b0b      	ldr	r3, [pc, #44]	; (80118c0 <xTaskGetSchedulerState+0x34>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d102      	bne.n	80118a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801189a:	2301      	movs	r3, #1
 801189c:	607b      	str	r3, [r7, #4]
 801189e:	e008      	b.n	80118b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118a0:	4b08      	ldr	r3, [pc, #32]	; (80118c4 <xTaskGetSchedulerState+0x38>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d102      	bne.n	80118ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118a8:	2302      	movs	r3, #2
 80118aa:	607b      	str	r3, [r7, #4]
 80118ac:	e001      	b.n	80118b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118ae:	2300      	movs	r3, #0
 80118b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118b2:	687b      	ldr	r3, [r7, #4]
	}
 80118b4:	4618      	mov	r0, r3
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	200272d8 	.word	0x200272d8
 80118c4:	200272f4 	.word	0x200272f4

080118c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80118d4:	2300      	movs	r3, #0
 80118d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d056      	beq.n	801198c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e2:	4b2d      	ldr	r3, [pc, #180]	; (8011998 <xTaskPriorityInherit+0xd0>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d246      	bcs.n	801197a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	699b      	ldr	r3, [r3, #24]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	db06      	blt.n	8011902 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f4:	4b28      	ldr	r3, [pc, #160]	; (8011998 <xTaskPriorityInherit+0xd0>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	6959      	ldr	r1, [r3, #20]
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801190a:	4613      	mov	r3, r2
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	4413      	add	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4a22      	ldr	r2, [pc, #136]	; (801199c <xTaskPriorityInherit+0xd4>)
 8011914:	4413      	add	r3, r2
 8011916:	4299      	cmp	r1, r3
 8011918:	d101      	bne.n	801191e <xTaskPriorityInherit+0x56>
 801191a:	2301      	movs	r3, #1
 801191c:	e000      	b.n	8011920 <xTaskPriorityInherit+0x58>
 801191e:	2300      	movs	r3, #0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d022      	beq.n	801196a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	3304      	adds	r3, #4
 8011928:	4618      	mov	r0, r3
 801192a:	f7fd fdbb 	bl	800f4a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801192e:	4b1a      	ldr	r3, [pc, #104]	; (8011998 <xTaskPriorityInherit+0xd0>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801193c:	4b18      	ldr	r3, [pc, #96]	; (80119a0 <xTaskPriorityInherit+0xd8>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	429a      	cmp	r2, r3
 8011942:	d903      	bls.n	801194c <xTaskPriorityInherit+0x84>
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011948:	4a15      	ldr	r2, [pc, #84]	; (80119a0 <xTaskPriorityInherit+0xd8>)
 801194a:	6013      	str	r3, [r2, #0]
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011950:	4613      	mov	r3, r2
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	4413      	add	r3, r2
 8011956:	009b      	lsls	r3, r3, #2
 8011958:	4a10      	ldr	r2, [pc, #64]	; (801199c <xTaskPriorityInherit+0xd4>)
 801195a:	441a      	add	r2, r3
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	3304      	adds	r3, #4
 8011960:	4619      	mov	r1, r3
 8011962:	4610      	mov	r0, r2
 8011964:	f7fd fd41 	bl	800f3ea <vListInsertEnd>
 8011968:	e004      	b.n	8011974 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801196a:	4b0b      	ldr	r3, [pc, #44]	; (8011998 <xTaskPriorityInherit+0xd0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011974:	2301      	movs	r3, #1
 8011976:	60fb      	str	r3, [r7, #12]
 8011978:	e008      	b.n	801198c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801197e:	4b06      	ldr	r3, [pc, #24]	; (8011998 <xTaskPriorityInherit+0xd0>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011984:	429a      	cmp	r2, r3
 8011986:	d201      	bcs.n	801198c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011988:	2301      	movs	r3, #1
 801198a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801198c:	68fb      	ldr	r3, [r7, #12]
	}
 801198e:	4618      	mov	r0, r3
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	20026df8 	.word	0x20026df8
 801199c:	20026dfc 	.word	0x20026dfc
 80119a0:	200272d4 	.word	0x200272d4

080119a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b086      	sub	sp, #24
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119b0:	2300      	movs	r3, #0
 80119b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d054      	beq.n	8011a64 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80119ba:	4b2d      	ldr	r3, [pc, #180]	; (8011a70 <xTaskPriorityDisinherit+0xcc>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	693a      	ldr	r2, [r7, #16]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d009      	beq.n	80119d8 <xTaskPriorityDisinherit+0x34>
 80119c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c8:	f383 8811 	msr	BASEPRI, r3
 80119cc:	f3bf 8f6f 	isb	sy
 80119d0:	f3bf 8f4f 	dsb	sy
 80119d4:	60fb      	str	r3, [r7, #12]
 80119d6:	e7fe      	b.n	80119d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d109      	bne.n	80119f4 <xTaskPriorityDisinherit+0x50>
 80119e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e4:	f383 8811 	msr	BASEPRI, r3
 80119e8:	f3bf 8f6f 	isb	sy
 80119ec:	f3bf 8f4f 	dsb	sy
 80119f0:	60bb      	str	r3, [r7, #8]
 80119f2:	e7fe      	b.n	80119f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119f8:	1e5a      	subs	r2, r3, #1
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d02c      	beq.n	8011a64 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d128      	bne.n	8011a64 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	3304      	adds	r3, #4
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fd fd44 	bl	800f4a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a34:	4b0f      	ldr	r3, [pc, #60]	; (8011a74 <xTaskPriorityDisinherit+0xd0>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d903      	bls.n	8011a44 <xTaskPriorityDisinherit+0xa0>
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a40:	4a0c      	ldr	r2, [pc, #48]	; (8011a74 <xTaskPriorityDisinherit+0xd0>)
 8011a42:	6013      	str	r3, [r2, #0]
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a48:	4613      	mov	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	4a09      	ldr	r2, [pc, #36]	; (8011a78 <xTaskPriorityDisinherit+0xd4>)
 8011a52:	441a      	add	r2, r3
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	3304      	adds	r3, #4
 8011a58:	4619      	mov	r1, r3
 8011a5a:	4610      	mov	r0, r2
 8011a5c:	f7fd fcc5 	bl	800f3ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a60:	2301      	movs	r3, #1
 8011a62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a64:	697b      	ldr	r3, [r7, #20]
	}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3718      	adds	r7, #24
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	20026df8 	.word	0x20026df8
 8011a74:	200272d4 	.word	0x200272d4
 8011a78:	20026dfc 	.word	0x20026dfc

08011a7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b088      	sub	sp, #32
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d06d      	beq.n	8011b70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d109      	bne.n	8011ab0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8011a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa0:	f383 8811 	msr	BASEPRI, r3
 8011aa4:	f3bf 8f6f 	isb	sy
 8011aa8:	f3bf 8f4f 	dsb	sy
 8011aac:	60fb      	str	r3, [r7, #12]
 8011aae:	e7fe      	b.n	8011aae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d902      	bls.n	8011ac0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	61fb      	str	r3, [r7, #28]
 8011abe:	e002      	b.n	8011ac6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ac4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aca:	69fa      	ldr	r2, [r7, #28]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d04f      	beq.n	8011b70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ad4:	697a      	ldr	r2, [r7, #20]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d14a      	bne.n	8011b70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011ada:	4b27      	ldr	r3, [pc, #156]	; (8011b78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	69ba      	ldr	r2, [r7, #24]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d109      	bne.n	8011af8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	60bb      	str	r3, [r7, #8]
 8011af6:	e7fe      	b.n	8011af6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	69fa      	ldr	r2, [r7, #28]
 8011b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b04:	69bb      	ldr	r3, [r7, #24]
 8011b06:	699b      	ldr	r3, [r3, #24]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	db04      	blt.n	8011b16 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	6959      	ldr	r1, [r3, #20]
 8011b1a:	693a      	ldr	r2, [r7, #16]
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	4a15      	ldr	r2, [pc, #84]	; (8011b7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b26:	4413      	add	r3, r2
 8011b28:	4299      	cmp	r1, r3
 8011b2a:	d101      	bne.n	8011b30 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e000      	b.n	8011b32 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8011b30:	2300      	movs	r3, #0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d01c      	beq.n	8011b70 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	3304      	adds	r3, #4
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7fd fcb2 	bl	800f4a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b44:	4b0e      	ldr	r3, [pc, #56]	; (8011b80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d903      	bls.n	8011b54 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b50:	4a0b      	ldr	r2, [pc, #44]	; (8011b80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b52:	6013      	str	r3, [r2, #0]
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b58:	4613      	mov	r3, r2
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	4413      	add	r3, r2
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	4a06      	ldr	r2, [pc, #24]	; (8011b7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b62:	441a      	add	r2, r3
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	3304      	adds	r3, #4
 8011b68:	4619      	mov	r1, r3
 8011b6a:	4610      	mov	r0, r2
 8011b6c:	f7fd fc3d 	bl	800f3ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b70:	bf00      	nop
 8011b72:	3720      	adds	r7, #32
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	20026df8 	.word	0x20026df8
 8011b7c:	20026dfc 	.word	0x20026dfc
 8011b80:	200272d4 	.word	0x200272d4

08011b84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011b84:	b480      	push	{r7}
 8011b86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011b88:	4b07      	ldr	r3, [pc, #28]	; (8011ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d004      	beq.n	8011b9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011b90:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b96:	3201      	adds	r2, #1
 8011b98:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8011b9a:	4b03      	ldr	r3, [pc, #12]	; (8011ba8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
	}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	20026df8 	.word	0x20026df8

08011bac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	607a      	str	r2, [r7, #4]
 8011bb8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011bba:	f7fd fdc7 	bl	800f74c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011bbe:	4b26      	ldr	r3, [pc, #152]	; (8011c58 <xTaskNotifyWait+0xac>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	2b02      	cmp	r3, #2
 8011bca:	d01a      	beq.n	8011c02 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011bcc:	4b22      	ldr	r3, [pc, #136]	; (8011c58 <xTaskNotifyWait+0xac>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	43d2      	mvns	r2, r2
 8011bd6:	400a      	ands	r2, r1
 8011bd8:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011bda:	4b1f      	ldr	r3, [pc, #124]	; (8011c58 <xTaskNotifyWait+0xac>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2201      	movs	r2, #1
 8011be0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00b      	beq.n	8011c02 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011bea:	2101      	movs	r1, #1
 8011bec:	6838      	ldr	r0, [r7, #0]
 8011bee:	f000 f9a3 	bl	8011f38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011bf2:	4b1a      	ldr	r3, [pc, #104]	; (8011c5c <xTaskNotifyWait+0xb0>)
 8011bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	f3bf 8f4f 	dsb	sy
 8011bfe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011c02:	f7fd fdd1 	bl	800f7a8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011c06:	f7fd fda1 	bl	800f74c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d004      	beq.n	8011c1a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011c10:	4b11      	ldr	r3, [pc, #68]	; (8011c58 <xTaskNotifyWait+0xac>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011c1a:	4b0f      	ldr	r3, [pc, #60]	; (8011c58 <xTaskNotifyWait+0xac>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	2b02      	cmp	r3, #2
 8011c26:	d002      	beq.n	8011c2e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	617b      	str	r3, [r7, #20]
 8011c2c:	e008      	b.n	8011c40 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011c2e:	4b0a      	ldr	r3, [pc, #40]	; (8011c58 <xTaskNotifyWait+0xac>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011c34:	68ba      	ldr	r2, [r7, #8]
 8011c36:	43d2      	mvns	r2, r2
 8011c38:	400a      	ands	r2, r1
 8011c3a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c40:	4b05      	ldr	r3, [pc, #20]	; (8011c58 <xTaskNotifyWait+0xac>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2200      	movs	r2, #0
 8011c46:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 8011c4a:	f7fd fdad 	bl	800f7a8 <vPortExitCritical>

		return xReturn;
 8011c4e:	697b      	ldr	r3, [r7, #20]
	}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3718      	adds	r7, #24
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	20026df8 	.word	0x20026df8
 8011c5c:	e000ed04 	.word	0xe000ed04

08011c60 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b08a      	sub	sp, #40	; 0x28
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	603b      	str	r3, [r7, #0]
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011c70:	2301      	movs	r3, #1
 8011c72:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d109      	bne.n	8011c8e <xTaskGenericNotify+0x2e>
 8011c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7e:	f383 8811 	msr	BASEPRI, r3
 8011c82:	f3bf 8f6f 	isb	sy
 8011c86:	f3bf 8f4f 	dsb	sy
 8011c8a:	61bb      	str	r3, [r7, #24]
 8011c8c:	e7fe      	b.n	8011c8c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011c92:	f7fd fd5b 	bl	800f74c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d003      	beq.n	8011ca4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011ca4:	6a3b      	ldr	r3, [r7, #32]
 8011ca6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011caa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	2202      	movs	r2, #2
 8011cb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8011cb4:	79fb      	ldrb	r3, [r7, #7]
 8011cb6:	2b04      	cmp	r3, #4
 8011cb8:	d827      	bhi.n	8011d0a <xTaskGenericNotify+0xaa>
 8011cba:	a201      	add	r2, pc, #4	; (adr r2, 8011cc0 <xTaskGenericNotify+0x60>)
 8011cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc0:	08011d0b 	.word	0x08011d0b
 8011cc4:	08011cd5 	.word	0x08011cd5
 8011cc8:	08011ce3 	.word	0x08011ce3
 8011ccc:	08011cef 	.word	0x08011cef
 8011cd0:	08011cf7 	.word	0x08011cf7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011cd4:	6a3b      	ldr	r3, [r7, #32]
 8011cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	431a      	orrs	r2, r3
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011ce0:	e013      	b.n	8011d0a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011ce2:	6a3b      	ldr	r3, [r7, #32]
 8011ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ce6:	1c5a      	adds	r2, r3, #1
 8011ce8:	6a3b      	ldr	r3, [r7, #32]
 8011cea:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011cec:	e00d      	b.n	8011d0a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011cf4:	e009      	b.n	8011d0a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011cf6:	7ffb      	ldrb	r3, [r7, #31]
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d003      	beq.n	8011d04 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011d02:	e001      	b.n	8011d08 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8011d04:	2300      	movs	r3, #0
 8011d06:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011d08:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011d0a:	7ffb      	ldrb	r3, [r7, #31]
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d13b      	bne.n	8011d88 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d10:	6a3b      	ldr	r3, [r7, #32]
 8011d12:	3304      	adds	r3, #4
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fd fbc5 	bl	800f4a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011d1a:	6a3b      	ldr	r3, [r7, #32]
 8011d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d1e:	4b1e      	ldr	r3, [pc, #120]	; (8011d98 <xTaskGenericNotify+0x138>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d903      	bls.n	8011d2e <xTaskGenericNotify+0xce>
 8011d26:	6a3b      	ldr	r3, [r7, #32]
 8011d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d2a:	4a1b      	ldr	r2, [pc, #108]	; (8011d98 <xTaskGenericNotify+0x138>)
 8011d2c:	6013      	str	r3, [r2, #0]
 8011d2e:	6a3b      	ldr	r3, [r7, #32]
 8011d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d32:	4613      	mov	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	4413      	add	r3, r2
 8011d38:	009b      	lsls	r3, r3, #2
 8011d3a:	4a18      	ldr	r2, [pc, #96]	; (8011d9c <xTaskGenericNotify+0x13c>)
 8011d3c:	441a      	add	r2, r3
 8011d3e:	6a3b      	ldr	r3, [r7, #32]
 8011d40:	3304      	adds	r3, #4
 8011d42:	4619      	mov	r1, r3
 8011d44:	4610      	mov	r0, r2
 8011d46:	f7fd fb50 	bl	800f3ea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011d4a:	6a3b      	ldr	r3, [r7, #32]
 8011d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d009      	beq.n	8011d66 <xTaskGenericNotify+0x106>
 8011d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d56:	f383 8811 	msr	BASEPRI, r3
 8011d5a:	f3bf 8f6f 	isb	sy
 8011d5e:	f3bf 8f4f 	dsb	sy
 8011d62:	617b      	str	r3, [r7, #20]
 8011d64:	e7fe      	b.n	8011d64 <xTaskGenericNotify+0x104>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8011d66:	f7ff fd5b 	bl	8011820 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d6e:	4b0c      	ldr	r3, [pc, #48]	; (8011da0 <xTaskGenericNotify+0x140>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d907      	bls.n	8011d88 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011d78:	4b0a      	ldr	r3, [pc, #40]	; (8011da4 <xTaskGenericNotify+0x144>)
 8011d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d7e:	601a      	str	r2, [r3, #0]
 8011d80:	f3bf 8f4f 	dsb	sy
 8011d84:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011d88:	f7fd fd0e 	bl	800f7a8 <vPortExitCritical>

		return xReturn;
 8011d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3728      	adds	r7, #40	; 0x28
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	200272d4 	.word	0x200272d4
 8011d9c:	20026dfc 	.word	0x20026dfc
 8011da0:	20026df8 	.word	0x20026df8
 8011da4:	e000ed04 	.word	0xe000ed04

08011da8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b08e      	sub	sp, #56	; 0x38
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	603b      	str	r3, [r7, #0]
 8011db4:	4613      	mov	r3, r2
 8011db6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011db8:	2301      	movs	r3, #1
 8011dba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d109      	bne.n	8011dd6 <xTaskGenericNotifyFromISR+0x2e>
 8011dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc6:	f383 8811 	msr	BASEPRI, r3
 8011dca:	f3bf 8f6f 	isb	sy
 8011dce:	f3bf 8f4f 	dsb	sy
 8011dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8011dd4:	e7fe      	b.n	8011dd4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dd6:	f7fd fd71 	bl	800f8bc <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011dde:	f3ef 8211 	mrs	r2, BASEPRI
 8011de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de6:	f383 8811 	msr	BASEPRI, r3
 8011dea:	f3bf 8f6f 	isb	sy
 8011dee:	f3bf 8f4f 	dsb	sy
 8011df2:	623a      	str	r2, [r7, #32]
 8011df4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011df6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011df8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d003      	beq.n	8011e08 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8011e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e14:	2202      	movs	r2, #2
 8011e16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 8011e1a:	79fb      	ldrb	r3, [r7, #7]
 8011e1c:	2b04      	cmp	r3, #4
 8011e1e:	d829      	bhi.n	8011e74 <xTaskGenericNotifyFromISR+0xcc>
 8011e20:	a201      	add	r2, pc, #4	; (adr r2, 8011e28 <xTaskGenericNotifyFromISR+0x80>)
 8011e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e26:	bf00      	nop
 8011e28:	08011e75 	.word	0x08011e75
 8011e2c:	08011e3d 	.word	0x08011e3d
 8011e30:	08011e4b 	.word	0x08011e4b
 8011e34:	08011e57 	.word	0x08011e57
 8011e38:	08011e5f 	.word	0x08011e5f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	431a      	orrs	r2, r3
 8011e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e46:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e48:	e014      	b.n	8011e74 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e4e:	1c5a      	adds	r2, r3, #1
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e54:	e00e      	b.n	8011e74 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 8011e5c:	e00a      	b.n	8011e74 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e62:	2b02      	cmp	r3, #2
 8011e64:	d003      	beq.n	8011e6e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011e6c:	e001      	b.n	8011e72 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011e72:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d146      	bne.n	8011f0a <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d009      	beq.n	8011e98 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8011e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e88:	f383 8811 	msr	BASEPRI, r3
 8011e8c:	f3bf 8f6f 	isb	sy
 8011e90:	f3bf 8f4f 	dsb	sy
 8011e94:	61bb      	str	r3, [r7, #24]
 8011e96:	e7fe      	b.n	8011e96 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e98:	4b21      	ldr	r3, [pc, #132]	; (8011f20 <xTaskGenericNotifyFromISR+0x178>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d11d      	bne.n	8011edc <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea2:	3304      	adds	r3, #4
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fd fafd 	bl	800f4a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eae:	4b1d      	ldr	r3, [pc, #116]	; (8011f24 <xTaskGenericNotifyFromISR+0x17c>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d903      	bls.n	8011ebe <xTaskGenericNotifyFromISR+0x116>
 8011eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eba:	4a1a      	ldr	r2, [pc, #104]	; (8011f24 <xTaskGenericNotifyFromISR+0x17c>)
 8011ebc:	6013      	str	r3, [r2, #0]
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	009b      	lsls	r3, r3, #2
 8011ec6:	4413      	add	r3, r2
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	4a17      	ldr	r2, [pc, #92]	; (8011f28 <xTaskGenericNotifyFromISR+0x180>)
 8011ecc:	441a      	add	r2, r3
 8011ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	4619      	mov	r1, r3
 8011ed4:	4610      	mov	r0, r2
 8011ed6:	f7fd fa88 	bl	800f3ea <vListInsertEnd>
 8011eda:	e005      	b.n	8011ee8 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ede:	3318      	adds	r3, #24
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4812      	ldr	r0, [pc, #72]	; (8011f2c <xTaskGenericNotifyFromISR+0x184>)
 8011ee4:	f7fd fa81 	bl	800f3ea <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eec:	4b10      	ldr	r3, [pc, #64]	; (8011f30 <xTaskGenericNotifyFromISR+0x188>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d909      	bls.n	8011f0a <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d003      	beq.n	8011f04 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011efe:	2201      	movs	r2, #1
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	e002      	b.n	8011f0a <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8011f04:	4b0b      	ldr	r3, [pc, #44]	; (8011f34 <xTaskGenericNotifyFromISR+0x18c>)
 8011f06:	2201      	movs	r2, #1
 8011f08:	601a      	str	r2, [r3, #0]
 8011f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3738      	adds	r7, #56	; 0x38
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	200272f4 	.word	0x200272f4
 8011f24:	200272d4 	.word	0x200272d4
 8011f28:	20026dfc 	.word	0x20026dfc
 8011f2c:	2002728c 	.word	0x2002728c
 8011f30:	20026df8 	.word	0x20026df8
 8011f34:	200272e0 	.word	0x200272e0

08011f38 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f42:	4b21      	ldr	r3, [pc, #132]	; (8011fc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f48:	4b20      	ldr	r3, [pc, #128]	; (8011fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	3304      	adds	r3, #4
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fd faa8 	bl	800f4a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f5a:	d10a      	bne.n	8011f72 <prvAddCurrentTaskToDelayedList+0x3a>
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d007      	beq.n	8011f72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f62:	4b1a      	ldr	r3, [pc, #104]	; (8011fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	3304      	adds	r3, #4
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4819      	ldr	r0, [pc, #100]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8011f6c:	f7fd fa3d 	bl	800f3ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f70:	e026      	b.n	8011fc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	4413      	add	r3, r2
 8011f78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f7a:	4b14      	ldr	r3, [pc, #80]	; (8011fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	68ba      	ldr	r2, [r7, #8]
 8011f80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f82:	68ba      	ldr	r2, [r7, #8]
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d209      	bcs.n	8011f9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f8a:	4b12      	ldr	r3, [pc, #72]	; (8011fd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	4b0f      	ldr	r3, [pc, #60]	; (8011fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	3304      	adds	r3, #4
 8011f94:	4619      	mov	r1, r3
 8011f96:	4610      	mov	r0, r2
 8011f98:	f7fd fa4b 	bl	800f432 <vListInsert>
}
 8011f9c:	e010      	b.n	8011fc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f9e:	4b0e      	ldr	r3, [pc, #56]	; (8011fd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	4b0a      	ldr	r3, [pc, #40]	; (8011fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	3304      	adds	r3, #4
 8011fa8:	4619      	mov	r1, r3
 8011faa:	4610      	mov	r0, r2
 8011fac:	f7fd fa41 	bl	800f432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	; (8011fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d202      	bcs.n	8011fc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011fba:	4a08      	ldr	r2, [pc, #32]	; (8011fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	6013      	str	r3, [r2, #0]
}
 8011fc0:	bf00      	nop
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	200272d0 	.word	0x200272d0
 8011fcc:	20026df8 	.word	0x20026df8
 8011fd0:	200272b8 	.word	0x200272b8
 8011fd4:	20027288 	.word	0x20027288
 8011fd8:	20027284 	.word	0x20027284
 8011fdc:	200272ec 	.word	0x200272ec

08011fe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b08a      	sub	sp, #40	; 0x28
 8011fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011fea:	f000 fb51 	bl	8012690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011fee:	4b1c      	ldr	r3, [pc, #112]	; (8012060 <xTimerCreateTimerTask+0x80>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d021      	beq.n	801203a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011ffe:	1d3a      	adds	r2, r7, #4
 8012000:	f107 0108 	add.w	r1, r7, #8
 8012004:	f107 030c 	add.w	r3, r7, #12
 8012008:	4618      	mov	r0, r3
 801200a:	f7fc ffcb 	bl	800efa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801200e:	6879      	ldr	r1, [r7, #4]
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	9202      	str	r2, [sp, #8]
 8012016:	9301      	str	r3, [sp, #4]
 8012018:	2302      	movs	r3, #2
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	2300      	movs	r3, #0
 801201e:	460a      	mov	r2, r1
 8012020:	4910      	ldr	r1, [pc, #64]	; (8012064 <xTimerCreateTimerTask+0x84>)
 8012022:	4811      	ldr	r0, [pc, #68]	; (8012068 <xTimerCreateTimerTask+0x88>)
 8012024:	f7fe fd28 	bl	8010a78 <xTaskCreateStatic>
 8012028:	4602      	mov	r2, r0
 801202a:	4b10      	ldr	r3, [pc, #64]	; (801206c <xTimerCreateTimerTask+0x8c>)
 801202c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801202e:	4b0f      	ldr	r3, [pc, #60]	; (801206c <xTimerCreateTimerTask+0x8c>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d001      	beq.n	801203a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012036:	2301      	movs	r3, #1
 8012038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d109      	bne.n	8012054 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	613b      	str	r3, [r7, #16]
 8012052:	e7fe      	b.n	8012052 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012054:	697b      	ldr	r3, [r7, #20]
}
 8012056:	4618      	mov	r0, r3
 8012058:	3718      	adds	r7, #24
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	20027330 	.word	0x20027330
 8012064:	080172d0 	.word	0x080172d0
 8012068:	080122a5 	.word	0x080122a5
 801206c:	20027334 	.word	0x20027334

08012070 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012070:	b580      	push	{r7, lr}
 8012072:	b088      	sub	sp, #32
 8012074:	af02      	add	r7, sp, #8
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	607a      	str	r2, [r7, #4]
 801207c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801207e:	2030      	movs	r0, #48	; 0x30
 8012080:	f7fc ffaa 	bl	800efd8 <pvPortMalloc>
 8012084:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00d      	beq.n	80120a8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	9301      	str	r3, [sp, #4]
 8012090:	6a3b      	ldr	r3, [r7, #32]
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	68b9      	ldr	r1, [r7, #8]
 801209a:	68f8      	ldr	r0, [r7, #12]
 801209c:	f000 f844 	bl	8012128 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	2200      	movs	r2, #0
 80120a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80120a8:	697b      	ldr	r3, [r7, #20]
	}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3718      	adds	r7, #24
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b08a      	sub	sp, #40	; 0x28
 80120b6:	af02      	add	r7, sp, #8
 80120b8:	60f8      	str	r0, [r7, #12]
 80120ba:	60b9      	str	r1, [r7, #8]
 80120bc:	607a      	str	r2, [r7, #4]
 80120be:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80120c0:	2330      	movs	r3, #48	; 0x30
 80120c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	2b30      	cmp	r3, #48	; 0x30
 80120c8:	d009      	beq.n	80120de <xTimerCreateStatic+0x2c>
 80120ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ce:	f383 8811 	msr	BASEPRI, r3
 80120d2:	f3bf 8f6f 	isb	sy
 80120d6:	f3bf 8f4f 	dsb	sy
 80120da:	61bb      	str	r3, [r7, #24]
 80120dc:	e7fe      	b.n	80120dc <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80120de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d109      	bne.n	80120f8 <xTimerCreateStatic+0x46>
 80120e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e8:	f383 8811 	msr	BASEPRI, r3
 80120ec:	f3bf 8f6f 	isb	sy
 80120f0:	f3bf 8f4f 	dsb	sy
 80120f4:	617b      	str	r3, [r7, #20]
 80120f6:	e7fe      	b.n	80120f6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d00d      	beq.n	801211e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	9301      	str	r3, [sp, #4]
 8012106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012108:	9300      	str	r3, [sp, #0]
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	68b9      	ldr	r1, [r7, #8]
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f000 f809 	bl	8012128 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	2201      	movs	r2, #1
 801211a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 801211e:	69fb      	ldr	r3, [r7, #28]
	}
 8012120:	4618      	mov	r0, r3
 8012122:	3720      	adds	r7, #32
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b086      	sub	sp, #24
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d109      	bne.n	8012150 <prvInitialiseNewTimer+0x28>
 801213c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012140:	f383 8811 	msr	BASEPRI, r3
 8012144:	f3bf 8f6f 	isb	sy
 8012148:	f3bf 8f4f 	dsb	sy
 801214c:	617b      	str	r3, [r7, #20]
 801214e:	e7fe      	b.n	801214e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8012150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012152:	2b00      	cmp	r3, #0
 8012154:	d015      	beq.n	8012182 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012156:	f000 fa9b 	bl	8012690 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	68fa      	ldr	r2, [r7, #12]
 801215e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012162:	68ba      	ldr	r2, [r7, #8]
 8012164:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8012166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012168:	687a      	ldr	r2, [r7, #4]
 801216a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216e:	683a      	ldr	r2, [r7, #0]
 8012170:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012174:	6a3a      	ldr	r2, [r7, #32]
 8012176:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217a:	3304      	adds	r3, #4
 801217c:	4618      	mov	r0, r3
 801217e:	f7fd f927 	bl	800f3d0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012182:	bf00      	nop
 8012184:	3718      	adds	r7, #24
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
	...

0801218c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b08a      	sub	sp, #40	; 0x28
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
 8012198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801219a:	2300      	movs	r3, #0
 801219c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d109      	bne.n	80121b8 <xTimerGenericCommand+0x2c>
 80121a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a8:	f383 8811 	msr	BASEPRI, r3
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	f3bf 8f4f 	dsb	sy
 80121b4:	623b      	str	r3, [r7, #32]
 80121b6:	e7fe      	b.n	80121b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80121b8:	4b19      	ldr	r3, [pc, #100]	; (8012220 <xTimerGenericCommand+0x94>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d02a      	beq.n	8012216 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	2b05      	cmp	r3, #5
 80121d0:	dc18      	bgt.n	8012204 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80121d2:	f7ff fb5b 	bl	801188c <xTaskGetSchedulerState>
 80121d6:	4603      	mov	r3, r0
 80121d8:	2b02      	cmp	r3, #2
 80121da:	d109      	bne.n	80121f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80121dc:	4b10      	ldr	r3, [pc, #64]	; (8012220 <xTimerGenericCommand+0x94>)
 80121de:	6818      	ldr	r0, [r3, #0]
 80121e0:	f107 0110 	add.w	r1, r7, #16
 80121e4:	2300      	movs	r3, #0
 80121e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121e8:	f7fd fdfc 	bl	800fde4 <xQueueGenericSend>
 80121ec:	6278      	str	r0, [r7, #36]	; 0x24
 80121ee:	e012      	b.n	8012216 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80121f0:	4b0b      	ldr	r3, [pc, #44]	; (8012220 <xTimerGenericCommand+0x94>)
 80121f2:	6818      	ldr	r0, [r3, #0]
 80121f4:	f107 0110 	add.w	r1, r7, #16
 80121f8:	2300      	movs	r3, #0
 80121fa:	2200      	movs	r2, #0
 80121fc:	f7fd fdf2 	bl	800fde4 <xQueueGenericSend>
 8012200:	6278      	str	r0, [r7, #36]	; 0x24
 8012202:	e008      	b.n	8012216 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012204:	4b06      	ldr	r3, [pc, #24]	; (8012220 <xTimerGenericCommand+0x94>)
 8012206:	6818      	ldr	r0, [r3, #0]
 8012208:	f107 0110 	add.w	r1, r7, #16
 801220c:	2300      	movs	r3, #0
 801220e:	683a      	ldr	r2, [r7, #0]
 8012210:	f7fd fee2 	bl	800ffd8 <xQueueGenericSendFromISR>
 8012214:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012218:	4618      	mov	r0, r3
 801221a:	3728      	adds	r7, #40	; 0x28
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	20027330 	.word	0x20027330

08012224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b088      	sub	sp, #32
 8012228:	af02      	add	r7, sp, #8
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801222e:	4b1c      	ldr	r3, [pc, #112]	; (80122a0 <prvProcessExpiredTimer+0x7c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	3304      	adds	r3, #4
 801223c:	4618      	mov	r0, r3
 801223e:	f7fd f931 	bl	800f4a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	69db      	ldr	r3, [r3, #28]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d121      	bne.n	801228e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	699a      	ldr	r2, [r3, #24]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	18d1      	adds	r1, r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	683a      	ldr	r2, [r7, #0]
 8012256:	6978      	ldr	r0, [r7, #20]
 8012258:	f000 f8c8 	bl	80123ec <prvInsertTimerInActiveList>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d015      	beq.n	801228e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012262:	2300      	movs	r3, #0
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	2300      	movs	r3, #0
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	2100      	movs	r1, #0
 801226c:	6978      	ldr	r0, [r7, #20]
 801226e:	f7ff ff8d 	bl	801218c <xTimerGenericCommand>
 8012272:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d109      	bne.n	801228e <prvProcessExpiredTimer+0x6a>
 801227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801227e:	f383 8811 	msr	BASEPRI, r3
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	f3bf 8f4f 	dsb	sy
 801228a:	60fb      	str	r3, [r7, #12]
 801228c:	e7fe      	b.n	801228c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012292:	6978      	ldr	r0, [r7, #20]
 8012294:	4798      	blx	r3
}
 8012296:	bf00      	nop
 8012298:	3718      	adds	r7, #24
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	20027328 	.word	0x20027328

080122a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80122ac:	f107 0308 	add.w	r3, r7, #8
 80122b0:	4618      	mov	r0, r3
 80122b2:	f000 f857 	bl	8012364 <prvGetNextExpireTime>
 80122b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	4619      	mov	r1, r3
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f000 f803 	bl	80122c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80122c2:	f000 f8d5 	bl	8012470 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80122c6:	e7f1      	b.n	80122ac <prvTimerTask+0x8>

080122c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80122d2:	f7fe fe05 	bl	8010ee0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80122d6:	f107 0308 	add.w	r3, r7, #8
 80122da:	4618      	mov	r0, r3
 80122dc:	f000 f866 	bl	80123ac <prvSampleTimeNow>
 80122e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d130      	bne.n	801234a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d10a      	bne.n	8012304 <prvProcessTimerOrBlockTask+0x3c>
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d806      	bhi.n	8012304 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80122f6:	f7fe fe39 	bl	8010f6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80122fa:	68f9      	ldr	r1, [r7, #12]
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f7ff ff91 	bl	8012224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012302:	e024      	b.n	801234e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d008      	beq.n	801231c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801230a:	4b13      	ldr	r3, [pc, #76]	; (8012358 <prvProcessTimerOrBlockTask+0x90>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	bf0c      	ite	eq
 8012314:	2301      	moveq	r3, #1
 8012316:	2300      	movne	r3, #0
 8012318:	b2db      	uxtb	r3, r3
 801231a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801231c:	4b0f      	ldr	r3, [pc, #60]	; (801235c <prvProcessTimerOrBlockTask+0x94>)
 801231e:	6818      	ldr	r0, [r3, #0]
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	1ad3      	subs	r3, r2, r3
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	4619      	mov	r1, r3
 801232a:	f7fe fb71 	bl	8010a10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801232e:	f7fe fe1d 	bl	8010f6c <xTaskResumeAll>
 8012332:	4603      	mov	r3, r0
 8012334:	2b00      	cmp	r3, #0
 8012336:	d10a      	bne.n	801234e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012338:	4b09      	ldr	r3, [pc, #36]	; (8012360 <prvProcessTimerOrBlockTask+0x98>)
 801233a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801233e:	601a      	str	r2, [r3, #0]
 8012340:	f3bf 8f4f 	dsb	sy
 8012344:	f3bf 8f6f 	isb	sy
}
 8012348:	e001      	b.n	801234e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801234a:	f7fe fe0f 	bl	8010f6c <xTaskResumeAll>
}
 801234e:	bf00      	nop
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	2002732c 	.word	0x2002732c
 801235c:	20027330 	.word	0x20027330
 8012360:	e000ed04 	.word	0xe000ed04

08012364 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801236c:	4b0e      	ldr	r3, [pc, #56]	; (80123a8 <prvGetNextExpireTime+0x44>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	bf0c      	ite	eq
 8012376:	2301      	moveq	r3, #1
 8012378:	2300      	movne	r3, #0
 801237a:	b2db      	uxtb	r3, r3
 801237c:	461a      	mov	r2, r3
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d105      	bne.n	8012396 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801238a:	4b07      	ldr	r3, [pc, #28]	; (80123a8 <prvGetNextExpireTime+0x44>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	60fb      	str	r3, [r7, #12]
 8012394:	e001      	b.n	801239a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012396:	2300      	movs	r3, #0
 8012398:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801239a:	68fb      	ldr	r3, [r7, #12]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3714      	adds	r7, #20
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr
 80123a8:	20027328 	.word	0x20027328

080123ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80123b4:	f7fe fe76 	bl	80110a4 <xTaskGetTickCount>
 80123b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80123ba:	4b0b      	ldr	r3, [pc, #44]	; (80123e8 <prvSampleTimeNow+0x3c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68fa      	ldr	r2, [r7, #12]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d205      	bcs.n	80123d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80123c4:	f000 f904 	bl	80125d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2201      	movs	r2, #1
 80123cc:	601a      	str	r2, [r3, #0]
 80123ce:	e002      	b.n	80123d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80123d6:	4a04      	ldr	r2, [pc, #16]	; (80123e8 <prvSampleTimeNow+0x3c>)
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80123dc:	68fb      	ldr	r3, [r7, #12]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	20027338 	.word	0x20027338

080123ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80123fa:	2300      	movs	r3, #0
 80123fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	429a      	cmp	r2, r3
 8012410:	d812      	bhi.n	8012438 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	1ad2      	subs	r2, r2, r3
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	699b      	ldr	r3, [r3, #24]
 801241c:	429a      	cmp	r2, r3
 801241e:	d302      	bcc.n	8012426 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012420:	2301      	movs	r3, #1
 8012422:	617b      	str	r3, [r7, #20]
 8012424:	e01b      	b.n	801245e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012426:	4b10      	ldr	r3, [pc, #64]	; (8012468 <prvInsertTimerInActiveList+0x7c>)
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	3304      	adds	r3, #4
 801242e:	4619      	mov	r1, r3
 8012430:	4610      	mov	r0, r2
 8012432:	f7fc fffe 	bl	800f432 <vListInsert>
 8012436:	e012      	b.n	801245e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012438:	687a      	ldr	r2, [r7, #4]
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	429a      	cmp	r2, r3
 801243e:	d206      	bcs.n	801244e <prvInsertTimerInActiveList+0x62>
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	429a      	cmp	r2, r3
 8012446:	d302      	bcc.n	801244e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012448:	2301      	movs	r3, #1
 801244a:	617b      	str	r3, [r7, #20]
 801244c:	e007      	b.n	801245e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801244e:	4b07      	ldr	r3, [pc, #28]	; (801246c <prvInsertTimerInActiveList+0x80>)
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	3304      	adds	r3, #4
 8012456:	4619      	mov	r1, r3
 8012458:	4610      	mov	r0, r2
 801245a:	f7fc ffea 	bl	800f432 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801245e:	697b      	ldr	r3, [r7, #20]
}
 8012460:	4618      	mov	r0, r3
 8012462:	3718      	adds	r7, #24
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	2002732c 	.word	0x2002732c
 801246c:	20027328 	.word	0x20027328

08012470 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b08e      	sub	sp, #56	; 0x38
 8012474:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012476:	e099      	b.n	80125ac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2b00      	cmp	r3, #0
 801247c:	da17      	bge.n	80124ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801247e:	1d3b      	adds	r3, r7, #4
 8012480:	3304      	adds	r3, #4
 8012482:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012486:	2b00      	cmp	r3, #0
 8012488:	d109      	bne.n	801249e <prvProcessReceivedCommands+0x2e>
 801248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248e:	f383 8811 	msr	BASEPRI, r3
 8012492:	f3bf 8f6f 	isb	sy
 8012496:	f3bf 8f4f 	dsb	sy
 801249a:	61fb      	str	r3, [r7, #28]
 801249c:	e7fe      	b.n	801249c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124a4:	6850      	ldr	r0, [r2, #4]
 80124a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124a8:	6892      	ldr	r2, [r2, #8]
 80124aa:	4611      	mov	r1, r2
 80124ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	db7a      	blt.n	80125aa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80124b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ba:	695b      	ldr	r3, [r3, #20]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d004      	beq.n	80124ca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c2:	3304      	adds	r3, #4
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7fc ffed 	bl	800f4a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80124ca:	463b      	mov	r3, r7
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7ff ff6d 	bl	80123ac <prvSampleTimeNow>
 80124d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b09      	cmp	r3, #9
 80124d8:	d868      	bhi.n	80125ac <prvProcessReceivedCommands+0x13c>
 80124da:	a201      	add	r2, pc, #4	; (adr r2, 80124e0 <prvProcessReceivedCommands+0x70>)
 80124dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e0:	08012509 	.word	0x08012509
 80124e4:	08012509 	.word	0x08012509
 80124e8:	08012509 	.word	0x08012509
 80124ec:	080125ad 	.word	0x080125ad
 80124f0:	08012563 	.word	0x08012563
 80124f4:	08012599 	.word	0x08012599
 80124f8:	08012509 	.word	0x08012509
 80124fc:	08012509 	.word	0x08012509
 8012500:	080125ad 	.word	0x080125ad
 8012504:	08012563 	.word	0x08012563
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250c:	699b      	ldr	r3, [r3, #24]
 801250e:	18d1      	adds	r1, r2, r3
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012516:	f7ff ff69 	bl	80123ec <prvInsertTimerInActiveList>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d045      	beq.n	80125ac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012526:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8012528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252a:	69db      	ldr	r3, [r3, #28]
 801252c:	2b01      	cmp	r3, #1
 801252e:	d13d      	bne.n	80125ac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012530:	68ba      	ldr	r2, [r7, #8]
 8012532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012534:	699b      	ldr	r3, [r3, #24]
 8012536:	441a      	add	r2, r3
 8012538:	2300      	movs	r3, #0
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	2300      	movs	r3, #0
 801253e:	2100      	movs	r1, #0
 8012540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012542:	f7ff fe23 	bl	801218c <xTimerGenericCommand>
 8012546:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012548:	6a3b      	ldr	r3, [r7, #32]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d12e      	bne.n	80125ac <prvProcessReceivedCommands+0x13c>
 801254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012552:	f383 8811 	msr	BASEPRI, r3
 8012556:	f3bf 8f6f 	isb	sy
 801255a:	f3bf 8f4f 	dsb	sy
 801255e:	61bb      	str	r3, [r7, #24]
 8012560:	e7fe      	b.n	8012560 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012562:	68ba      	ldr	r2, [r7, #8]
 8012564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012566:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256a:	699b      	ldr	r3, [r3, #24]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d109      	bne.n	8012584 <prvProcessReceivedCommands+0x114>
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	617b      	str	r3, [r7, #20]
 8012582:	e7fe      	b.n	8012582 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012586:	699a      	ldr	r2, [r3, #24]
 8012588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258a:	18d1      	adds	r1, r2, r3
 801258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012592:	f7ff ff2b 	bl	80123ec <prvInsertTimerInActiveList>
					break;
 8012596:	e009      	b.n	80125ac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d104      	bne.n	80125ac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80125a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125a4:	f7fc fdde 	bl	800f164 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80125a8:	e000      	b.n	80125ac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80125aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80125ac:	4b07      	ldr	r3, [pc, #28]	; (80125cc <prvProcessReceivedCommands+0x15c>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	1d39      	adds	r1, r7, #4
 80125b2:	2200      	movs	r2, #0
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fd fe2d 	bl	8010214 <xQueueReceive>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	f47f af5b 	bne.w	8012478 <prvProcessReceivedCommands+0x8>
	}
}
 80125c2:	bf00      	nop
 80125c4:	3730      	adds	r7, #48	; 0x30
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	20027330 	.word	0x20027330

080125d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b088      	sub	sp, #32
 80125d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125d6:	e044      	b.n	8012662 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125d8:	4b2b      	ldr	r3, [pc, #172]	; (8012688 <prvSwitchTimerLists+0xb8>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125e2:	4b29      	ldr	r3, [pc, #164]	; (8012688 <prvSwitchTimerLists+0xb8>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	68db      	ldr	r3, [r3, #12]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	3304      	adds	r3, #4
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7fc ff57 	bl	800f4a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125fa:	68f8      	ldr	r0, [r7, #12]
 80125fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	69db      	ldr	r3, [r3, #28]
 8012602:	2b01      	cmp	r3, #1
 8012604:	d12d      	bne.n	8012662 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	699b      	ldr	r3, [r3, #24]
 801260a:	693a      	ldr	r2, [r7, #16]
 801260c:	4413      	add	r3, r2
 801260e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	429a      	cmp	r2, r3
 8012616:	d90e      	bls.n	8012636 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	68ba      	ldr	r2, [r7, #8]
 801261c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	68fa      	ldr	r2, [r7, #12]
 8012622:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012624:	4b18      	ldr	r3, [pc, #96]	; (8012688 <prvSwitchTimerLists+0xb8>)
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	3304      	adds	r3, #4
 801262c:	4619      	mov	r1, r3
 801262e:	4610      	mov	r0, r2
 8012630:	f7fc feff 	bl	800f432 <vListInsert>
 8012634:	e015      	b.n	8012662 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012636:	2300      	movs	r3, #0
 8012638:	9300      	str	r3, [sp, #0]
 801263a:	2300      	movs	r3, #0
 801263c:	693a      	ldr	r2, [r7, #16]
 801263e:	2100      	movs	r1, #0
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f7ff fda3 	bl	801218c <xTimerGenericCommand>
 8012646:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d109      	bne.n	8012662 <prvSwitchTimerLists+0x92>
 801264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012652:	f383 8811 	msr	BASEPRI, r3
 8012656:	f3bf 8f6f 	isb	sy
 801265a:	f3bf 8f4f 	dsb	sy
 801265e:	603b      	str	r3, [r7, #0]
 8012660:	e7fe      	b.n	8012660 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012662:	4b09      	ldr	r3, [pc, #36]	; (8012688 <prvSwitchTimerLists+0xb8>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1b5      	bne.n	80125d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801266c:	4b06      	ldr	r3, [pc, #24]	; (8012688 <prvSwitchTimerLists+0xb8>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012672:	4b06      	ldr	r3, [pc, #24]	; (801268c <prvSwitchTimerLists+0xbc>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4a04      	ldr	r2, [pc, #16]	; (8012688 <prvSwitchTimerLists+0xb8>)
 8012678:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801267a:	4a04      	ldr	r2, [pc, #16]	; (801268c <prvSwitchTimerLists+0xbc>)
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	6013      	str	r3, [r2, #0]
}
 8012680:	bf00      	nop
 8012682:	3718      	adds	r7, #24
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	20027328 	.word	0x20027328
 801268c:	2002732c 	.word	0x2002732c

08012690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012696:	f7fd f859 	bl	800f74c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801269a:	4b15      	ldr	r3, [pc, #84]	; (80126f0 <prvCheckForValidListAndQueue+0x60>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d120      	bne.n	80126e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80126a2:	4814      	ldr	r0, [pc, #80]	; (80126f4 <prvCheckForValidListAndQueue+0x64>)
 80126a4:	f7fc fe74 	bl	800f390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80126a8:	4813      	ldr	r0, [pc, #76]	; (80126f8 <prvCheckForValidListAndQueue+0x68>)
 80126aa:	f7fc fe71 	bl	800f390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80126ae:	4b13      	ldr	r3, [pc, #76]	; (80126fc <prvCheckForValidListAndQueue+0x6c>)
 80126b0:	4a10      	ldr	r2, [pc, #64]	; (80126f4 <prvCheckForValidListAndQueue+0x64>)
 80126b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80126b4:	4b12      	ldr	r3, [pc, #72]	; (8012700 <prvCheckForValidListAndQueue+0x70>)
 80126b6:	4a10      	ldr	r2, [pc, #64]	; (80126f8 <prvCheckForValidListAndQueue+0x68>)
 80126b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80126ba:	2300      	movs	r3, #0
 80126bc:	9300      	str	r3, [sp, #0]
 80126be:	4b11      	ldr	r3, [pc, #68]	; (8012704 <prvCheckForValidListAndQueue+0x74>)
 80126c0:	4a11      	ldr	r2, [pc, #68]	; (8012708 <prvCheckForValidListAndQueue+0x78>)
 80126c2:	2110      	movs	r1, #16
 80126c4:	200a      	movs	r0, #10
 80126c6:	f7fd f99f 	bl	800fa08 <xQueueGenericCreateStatic>
 80126ca:	4602      	mov	r2, r0
 80126cc:	4b08      	ldr	r3, [pc, #32]	; (80126f0 <prvCheckForValidListAndQueue+0x60>)
 80126ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80126d0:	4b07      	ldr	r3, [pc, #28]	; (80126f0 <prvCheckForValidListAndQueue+0x60>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d005      	beq.n	80126e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80126d8:	4b05      	ldr	r3, [pc, #20]	; (80126f0 <prvCheckForValidListAndQueue+0x60>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	490b      	ldr	r1, [pc, #44]	; (801270c <prvCheckForValidListAndQueue+0x7c>)
 80126de:	4618      	mov	r0, r3
 80126e0:	f7fe f944 	bl	801096c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80126e4:	f7fd f860 	bl	800f7a8 <vPortExitCritical>
}
 80126e8:	bf00      	nop
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	20027330 	.word	0x20027330
 80126f4:	20027300 	.word	0x20027300
 80126f8:	20027314 	.word	0x20027314
 80126fc:	20027328 	.word	0x20027328
 8012700:	2002732c 	.word	0x2002732c
 8012704:	200273dc 	.word	0x200273dc
 8012708:	2002733c 	.word	0x2002733c
 801270c:	080172d8 	.word	0x080172d8

08012710 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b086      	sub	sp, #24
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d109      	bne.n	8012736 <xTimerIsTimerActive+0x26>
 8012722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012726:	f383 8811 	msr	BASEPRI, r3
 801272a:	f3bf 8f6f 	isb	sy
 801272e:	f3bf 8f4f 	dsb	sy
 8012732:	60fb      	str	r3, [r7, #12]
 8012734:	e7fe      	b.n	8012734 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8012736:	f7fd f809 	bl	800f74c <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	695b      	ldr	r3, [r3, #20]
 801273e:	2b00      	cmp	r3, #0
 8012740:	bf14      	ite	ne
 8012742:	2301      	movne	r3, #1
 8012744:	2300      	moveq	r3, #0
 8012746:	b2db      	uxtb	r3, r3
 8012748:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801274a:	f7fd f82d 	bl	800f7a8 <vPortExitCritical>

	return xTimerIsInActiveList;
 801274e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8012750:	4618      	mov	r0, r3
 8012752:	3718      	adds	r7, #24
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b086      	sub	sp, #24
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d109      	bne.n	801277e <pvTimerGetTimerID+0x26>
 801276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801276e:	f383 8811 	msr	BASEPRI, r3
 8012772:	f3bf 8f6f 	isb	sy
 8012776:	f3bf 8f4f 	dsb	sy
 801277a:	60fb      	str	r3, [r7, #12]
 801277c:	e7fe      	b.n	801277c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 801277e:	f7fc ffe5 	bl	800f74c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	6a1b      	ldr	r3, [r3, #32]
 8012786:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012788:	f7fd f80e 	bl	800f7a8 <vPortExitCritical>

	return pvReturn;
 801278c:	693b      	ldr	r3, [r7, #16]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <otChildSupervisionSetInterval>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetInterval(otInstance *aInstance, uint16_t aInterval)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b084      	sub	sp, #16
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	460b      	mov	r3, r1
 80127a0:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 80127a2:	f002 fce7 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80127a6:	f002 fc83 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 80127aa:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_INTERVAL;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80127b4:	701a      	strb	r2, [r3, #0]
 80127b6:	2200      	movs	r2, #0
 80127b8:	f042 0201 	orr.w	r2, r2, #1
 80127bc:	705a      	strb	r2, [r3, #1]
 80127be:	2200      	movs	r2, #0
 80127c0:	709a      	strb	r2, [r3, #2]
 80127c2:	2200      	movs	r2, #0
 80127c4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2200      	movs	r2, #0
 80127ca:	f042 0201 	orr.w	r2, r2, #1
 80127ce:	711a      	strb	r2, [r3, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	715a      	strb	r2, [r3, #5]
 80127d4:	2200      	movs	r2, #0
 80127d6:	719a      	strb	r2, [r3, #6]
 80127d8:	2200      	movs	r2, #0
 80127da:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aInterval;
 80127dc:	887a      	ldrh	r2, [r7, #2]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80127e2:	f002 fc89 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80127e6:	f002 fc6f 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80127ea:	60f8      	str	r0, [r7, #12]
}
 80127ec:	bf00      	nop
 80127ee:	3710      	adds	r7, #16
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <otChildSupervisionSetCheckTimeout>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (uint16_t)p_ot_req->Data[0];
}

void otChildSupervisionSetCheckTimeout(otInstance *aInstance, uint16_t aTimeout)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012800:	f002 fcb8 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012804:	f002 fc54 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012808:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_CHILD_SUPERVISION_SET_CHECK_TIMEOUT;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2200      	movs	r2, #0
 801280e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8012812:	701a      	strb	r2, [r3, #0]
 8012814:	2200      	movs	r2, #0
 8012816:	f042 0201 	orr.w	r2, r2, #1
 801281a:	705a      	strb	r2, [r3, #1]
 801281c:	2200      	movs	r2, #0
 801281e:	709a      	strb	r2, [r3, #2]
 8012820:	2200      	movs	r2, #0
 8012822:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	2200      	movs	r2, #0
 8012828:	f042 0201 	orr.w	r2, r2, #1
 801282c:	711a      	strb	r2, [r3, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	715a      	strb	r2, [r3, #5]
 8012832:	2200      	movs	r2, #0
 8012834:	719a      	strb	r2, [r3, #6]
 8012836:	2200      	movs	r2, #0
 8012838:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aTimeout;
 801283a:	887a      	ldrh	r2, [r7, #2]
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012840:	f002 fc5a 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012844:	f002 fc40 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012848:	60f8      	str	r0, [r7, #12]
}
 801284a:	bf00      	nop
 801284c:	3710      	adds	r7, #16
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}

08012852 <otCoapHeaderInit>:


#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 8012852:	b580      	push	{r7, lr}
 8012854:	b084      	sub	sp, #16
 8012856:	af00      	add	r7, sp, #0
 8012858:	6078      	str	r0, [r7, #4]
 801285a:	460b      	mov	r3, r1
 801285c:	70fb      	strb	r3, [r7, #3]
 801285e:	4613      	mov	r3, r2
 8012860:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012862:	f002 fc87 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012866:	f002 fc23 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 801286a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2200      	movs	r2, #0
 8012870:	f062 0260 	orn	r2, r2, #96	; 0x60
 8012874:	701a      	strb	r2, [r3, #0]
 8012876:	2200      	movs	r2, #0
 8012878:	705a      	strb	r2, [r3, #1]
 801287a:	2200      	movs	r2, #0
 801287c:	709a      	strb	r2, [r3, #2]
 801287e:	2200      	movs	r2, #0
 8012880:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	2200      	movs	r2, #0
 8012886:	f042 0203 	orr.w	r2, r2, #3
 801288a:	711a      	strb	r2, [r3, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	715a      	strb	r2, [r3, #5]
 8012890:	2200      	movs	r2, #0
 8012892:	719a      	strb	r2, [r3, #6]
 8012894:	2200      	movs	r2, #0
 8012896:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 801289e:	78fa      	ldrb	r2, [r7, #3]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 80128a4:	78ba      	ldrb	r2, [r7, #2]
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 80128aa:	f002 fc25 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80128ae:	f002 fc0b 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80128b2:	60f8      	str	r0, [r7, #12]
}
 80128b4:	bf00      	nop
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b086      	sub	sp, #24
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	4613      	mov	r3, r2
 80128c8:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 80128ca:	f002 fc53 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80128ce:	f002 fbef 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 80128d2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	2200      	movs	r2, #0
 80128d8:	f062 025f 	orn	r2, r2, #95	; 0x5f
 80128dc:	701a      	strb	r2, [r3, #0]
 80128de:	2200      	movs	r2, #0
 80128e0:	705a      	strb	r2, [r3, #1]
 80128e2:	2200      	movs	r2, #0
 80128e4:	709a      	strb	r2, [r3, #2]
 80128e6:	2200      	movs	r2, #0
 80128e8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	2200      	movs	r2, #0
 80128ee:	f042 0203 	orr.w	r2, r2, #3
 80128f2:	711a      	strb	r2, [r3, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	715a      	strb	r2, [r3, #5]
 80128f8:	2200      	movs	r2, #0
 80128fa:	719a      	strb	r2, [r3, #6]
 80128fc:	2200      	movs	r2, #0
 80128fe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012900:	68fa      	ldr	r2, [r7, #12]
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 8012906:	68ba      	ldr	r2, [r7, #8]
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 801290c:	79fa      	ldrb	r2, [r7, #7]
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 8012912:	f002 fbf1 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012916:	f002 fbd7 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 801291a:	6178      	str	r0, [r7, #20]
}
 801291c:	bf00      	nop
 801291e:	3718      	adds	r7, #24
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	460b      	mov	r3, r1
 801292e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8012930:	f002 fc20 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012934:	f002 fbbc 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012938:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2200      	movs	r2, #0
 801293e:	f062 025e 	orn	r2, r2, #94	; 0x5e
 8012942:	701a      	strb	r2, [r3, #0]
 8012944:	2200      	movs	r2, #0
 8012946:	705a      	strb	r2, [r3, #1]
 8012948:	2200      	movs	r2, #0
 801294a:	709a      	strb	r2, [r3, #2]
 801294c:	2200      	movs	r2, #0
 801294e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2200      	movs	r2, #0
 8012954:	f042 0202 	orr.w	r2, r2, #2
 8012958:	711a      	strb	r2, [r3, #4]
 801295a:	2200      	movs	r2, #0
 801295c:	715a      	strb	r2, [r3, #5]
 801295e:	2200      	movs	r2, #0
 8012960:	719a      	strb	r2, [r3, #6]
 8012962:	2200      	movs	r2, #0
 8012964:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 801296c:	78fa      	ldrb	r2, [r7, #3]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012972:	f002 fbc1 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012976:	f002 fba7 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 801297a:	60f8      	str	r0, [r7, #12]
}
 801297c:	bf00      	nop
 801297e:	3710      	adds	r7, #16
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	460b      	mov	r3, r1
 801298e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 8012990:	f002 fbf0 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012994:	f002 fb8c 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012998:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	2200      	movs	r2, #0
 801299e:	f062 025d 	orn	r2, r2, #93	; 0x5d
 80129a2:	701a      	strb	r2, [r3, #0]
 80129a4:	2200      	movs	r2, #0
 80129a6:	705a      	strb	r2, [r3, #1]
 80129a8:	2200      	movs	r2, #0
 80129aa:	709a      	strb	r2, [r3, #2]
 80129ac:	2200      	movs	r2, #0
 80129ae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2200      	movs	r2, #0
 80129b4:	f042 0202 	orr.w	r2, r2, #2
 80129b8:	711a      	strb	r2, [r3, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	715a      	strb	r2, [r3, #5]
 80129be:	2200      	movs	r2, #0
 80129c0:	719a      	strb	r2, [r3, #6]
 80129c2:	2200      	movs	r2, #0
 80129c4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 80129cc:	78fa      	ldrb	r2, [r7, #3]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 80129d2:	f002 fb91 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80129d6:	f002 fb77 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80129da:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	b2db      	uxtb	r3, r3
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b084      	sub	sp, #16
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
 80129f2:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 80129f4:	f002 fbbe 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80129f8:	f002 fb5a 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 80129fc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2200      	movs	r2, #0
 8012a02:	f062 0250 	orn	r2, r2, #80	; 0x50
 8012a06:	701a      	strb	r2, [r3, #0]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	705a      	strb	r2, [r3, #1]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	709a      	strb	r2, [r3, #2]
 8012a10:	2200      	movs	r2, #0
 8012a12:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2200      	movs	r2, #0
 8012a18:	f042 0202 	orr.w	r2, r2, #2
 8012a1c:	711a      	strb	r2, [r3, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	715a      	strb	r2, [r3, #5]
 8012a22:	2200      	movs	r2, #0
 8012a24:	719a      	strb	r2, [r3, #6]
 8012a26:	2200      	movs	r2, #0
 8012a28:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 8012a30:	683a      	ldr	r2, [r7, #0]
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012a36:	f002 fb5f 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012a3a:	f002 fb45 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012a3e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	b2db      	uxtb	r3, r3
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	3710      	adds	r7, #16
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}

08012a4e <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 8012a4e:	b580      	push	{r7, lr}
 8012a50:	b084      	sub	sp, #16
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012a56:	f002 fb8d 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012a5a:	f002 fb29 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012a5e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2200      	movs	r2, #0
 8012a64:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8012a68:	701a      	strb	r2, [r3, #0]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	705a      	strb	r2, [r3, #1]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	709a      	strb	r2, [r3, #2]
 8012a72:	2200      	movs	r2, #0
 8012a74:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f042 0201 	orr.w	r2, r2, #1
 8012a7e:	711a      	strb	r2, [r3, #4]
 8012a80:	2200      	movs	r2, #0
 8012a82:	715a      	strb	r2, [r3, #5]
 8012a84:	2200      	movs	r2, #0
 8012a86:	719a      	strb	r2, [r3, #6]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012a92:	f002 fb31 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012a96:	f002 fb17 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012a9a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	689b      	ldr	r3, [r3, #8]
 8012aa0:	b2db      	uxtb	r3, r3
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3710      	adds	r7, #16
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}

08012aaa <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b084      	sub	sp, #16
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012ab6:	f002 fb5d 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012aba:	f002 faf9 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012abe:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	f062 0256 	orn	r2, r2, #86	; 0x56
 8012ac8:	701a      	strb	r2, [r3, #0]
 8012aca:	2200      	movs	r2, #0
 8012acc:	705a      	strb	r2, [r3, #1]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	709a      	strb	r2, [r3, #2]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	f042 0202 	orr.w	r2, r2, #2
 8012ade:	711a      	strb	r2, [r3, #4]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	715a      	strb	r2, [r3, #5]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	719a      	strb	r2, [r3, #6]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 8012af2:	887a      	ldrh	r2, [r7, #2]
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012af8:	f002 fafe 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012afc:	f002 fae4 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012b00:	60f8      	str	r0, [r7, #12]
}
 8012b02:	bf00      	nop
 8012b04:	3710      	adds	r7, #16
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b084      	sub	sp, #16
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012b12:	f002 fb2f 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012b16:	f002 facb 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012b1a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f062 0261 	orn	r2, r2, #97	; 0x61
 8012b24:	701a      	strb	r2, [r3, #0]
 8012b26:	2200      	movs	r2, #0
 8012b28:	705a      	strb	r2, [r3, #1]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	709a      	strb	r2, [r3, #2]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2200      	movs	r2, #0
 8012b36:	f042 0201 	orr.w	r2, r2, #1
 8012b3a:	711a      	strb	r2, [r3, #4]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	715a      	strb	r2, [r3, #5]
 8012b40:	2200      	movs	r2, #0
 8012b42:	719a      	strb	r2, [r3, #6]
 8012b44:	2200      	movs	r2, #0
 8012b46:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012b4e:	f002 fad3 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012b52:	f002 fab9 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012b56:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	689b      	ldr	r3, [r3, #8]
 8012b5c:	b2db      	uxtb	r3, r3
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3710      	adds	r7, #16
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b084      	sub	sp, #16
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012b6e:	f002 fb01 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012b72:	f002 fa9d 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012b76:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8012b80:	701a      	strb	r2, [r3, #0]
 8012b82:	2200      	movs	r2, #0
 8012b84:	705a      	strb	r2, [r3, #1]
 8012b86:	2200      	movs	r2, #0
 8012b88:	709a      	strb	r2, [r3, #2]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2200      	movs	r2, #0
 8012b92:	f042 0201 	orr.w	r2, r2, #1
 8012b96:	711a      	strb	r2, [r3, #4]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	715a      	strb	r2, [r3, #5]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	719a      	strb	r2, [r3, #6]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012baa:	f002 faa5 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012bae:	f002 fa8b 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012bb2:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	b2db      	uxtb	r3, r3
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3710      	adds	r7, #16
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}

08012bc2 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 8012bc2:	b580      	push	{r7, lr}
 8012bc4:	b084      	sub	sp, #16
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012bca:	f002 fad3 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012bce:	f002 fa6f 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012bd2:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	f062 0255 	orn	r2, r2, #85	; 0x55
 8012bdc:	701a      	strb	r2, [r3, #0]
 8012bde:	2200      	movs	r2, #0
 8012be0:	705a      	strb	r2, [r3, #1]
 8012be2:	2200      	movs	r2, #0
 8012be4:	709a      	strb	r2, [r3, #2]
 8012be6:	2200      	movs	r2, #0
 8012be8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	2200      	movs	r2, #0
 8012bee:	f042 0201 	orr.w	r2, r2, #1
 8012bf2:	711a      	strb	r2, [r3, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	715a      	strb	r2, [r3, #5]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	719a      	strb	r2, [r3, #6]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012c06:	f002 fa77 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012c0a:	f002 fa5d 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012c0e:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	689b      	ldr	r3, [r3, #8]
 8012c14:	b29b      	uxth	r3, r3
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3710      	adds	r7, #16
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}

08012c1e <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b084      	sub	sp, #16
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012c26:	f002 faa5 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012c2a:	f002 fa41 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012c2e:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	2200      	movs	r2, #0
 8012c34:	f062 0254 	orn	r2, r2, #84	; 0x54
 8012c38:	701a      	strb	r2, [r3, #0]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	705a      	strb	r2, [r3, #1]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	709a      	strb	r2, [r3, #2]
 8012c42:	2200      	movs	r2, #0
 8012c44:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	f042 0201 	orr.w	r2, r2, #1
 8012c4e:	711a      	strb	r2, [r3, #4]
 8012c50:	2200      	movs	r2, #0
 8012c52:	715a      	strb	r2, [r3, #5]
 8012c54:	2200      	movs	r2, #0
 8012c56:	719a      	strb	r2, [r3, #6]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012c62:	f002 fa49 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012c66:	f002 fa2f 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012c6a:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	b2db      	uxtb	r3, r3
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3710      	adds	r7, #16
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b084      	sub	sp, #16
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012c82:	f002 fa77 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012c86:	f002 fa13 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012c8a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	2200      	movs	r2, #0
 8012c90:	f062 0253 	orn	r2, r2, #83	; 0x53
 8012c94:	701a      	strb	r2, [r3, #0]
 8012c96:	2200      	movs	r2, #0
 8012c98:	705a      	strb	r2, [r3, #1]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	709a      	strb	r2, [r3, #2]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	f042 0201 	orr.w	r2, r2, #1
 8012caa:	711a      	strb	r2, [r3, #4]
 8012cac:	2200      	movs	r2, #0
 8012cae:	715a      	strb	r2, [r3, #5]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	719a      	strb	r2, [r3, #6]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012cbe:	f002 fa1b 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012cc2:	f002 fa01 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012cc6:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	689b      	ldr	r3, [r3, #8]
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012cde:	f002 fa49 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ce2:	f002 f9e5 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012ce6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f062 0259 	orn	r2, r2, #89	; 0x59
 8012cf0:	701a      	strb	r2, [r3, #0]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	705a      	strb	r2, [r3, #1]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	709a      	strb	r2, [r3, #2]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2200      	movs	r2, #0
 8012d02:	f042 0201 	orr.w	r2, r2, #1
 8012d06:	711a      	strb	r2, [r3, #4]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	715a      	strb	r2, [r3, #5]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	719a      	strb	r2, [r3, #6]
 8012d10:	2200      	movs	r2, #0
 8012d12:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 8012d14:	683a      	ldr	r2, [r7, #0]
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012d1a:	f002 f9ed 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012d1e:	f002 f9d3 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012d22:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	689b      	ldr	r3, [r3, #8]

}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3710      	adds	r7, #16
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	60b9      	str	r1, [r7, #8]
 8012d3a:	607a      	str	r2, [r7, #4]
 8012d3c:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 8012d3e:	f002 fa19 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012d42:	f002 f9b5 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012d46:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	f062 0258 	orn	r2, r2, #88	; 0x58
 8012d50:	701a      	strb	r2, [r3, #0]
 8012d52:	2200      	movs	r2, #0
 8012d54:	705a      	strb	r2, [r3, #1]
 8012d56:	2200      	movs	r2, #0
 8012d58:	709a      	strb	r2, [r3, #2]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	2200      	movs	r2, #0
 8012d62:	f042 0203 	orr.w	r2, r2, #3
 8012d66:	711a      	strb	r2, [r3, #4]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	715a      	strb	r2, [r3, #5]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	719a      	strb	r2, [r3, #6]
 8012d70:	2200      	movs	r2, #0
 8012d72:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012d74:	68ba      	ldr	r2, [r7, #8]
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 8012d86:	6a3a      	ldr	r2, [r7, #32]
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8012d8c:	f002 f9b4 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012d90:	f002 f99a 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012d94:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	689b      	ldr	r3, [r3, #8]
 8012d9a:	b2db      	uxtb	r3, r3
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3718      	adds	r7, #24
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	460b      	mov	r3, r1
 8012dae:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 8012db0:	f002 f9e0 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012db4:	f002 f97c 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012db8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f062 024b 	orn	r2, r2, #75	; 0x4b
 8012dc2:	701a      	strb	r2, [r3, #0]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	705a      	strb	r2, [r3, #1]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	709a      	strb	r2, [r3, #2]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f042 0201 	orr.w	r2, r2, #1
 8012dd8:	711a      	strb	r2, [r3, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	715a      	strb	r2, [r3, #5]
 8012dde:	2200      	movs	r2, #0
 8012de0:	719a      	strb	r2, [r3, #6]
 8012de2:	2200      	movs	r2, #0
 8012de4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 8012de6:	887a      	ldrh	r2, [r7, #2]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012dec:	f002 f984 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012df0:	f002 f96a 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012df4:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	689b      	ldr	r3, [r3, #8]
 8012dfa:	b2db      	uxtb	r3, r3
}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	3710      	adds	r7, #16
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 8012e0e:	f002 f9b1 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e12:	f002 f94d 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012e16:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f062 0249 	orn	r2, r2, #73	; 0x49
 8012e20:	701a      	strb	r2, [r3, #0]
 8012e22:	2200      	movs	r2, #0
 8012e24:	705a      	strb	r2, [r3, #1]
 8012e26:	2200      	movs	r2, #0
 8012e28:	709a      	strb	r2, [r3, #2]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2200      	movs	r2, #0
 8012e32:	f042 0201 	orr.w	r2, r2, #1
 8012e36:	711a      	strb	r2, [r3, #4]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	715a      	strb	r2, [r3, #5]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	719a      	strb	r2, [r3, #6]
 8012e40:	2200      	movs	r2, #0
 8012e42:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 8012e44:	683a      	ldr	r2, [r7, #0]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012e4a:	f002 f955 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012e4e:	f002 f93b 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012e52:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	689b      	ldr	r3, [r3, #8]
 8012e58:	b2db      	uxtb	r3, r3
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3710      	adds	r7, #16
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}

08012e62 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 8012e62:	b580      	push	{r7, lr}
 8012e64:	b086      	sub	sp, #24
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	60f8      	str	r0, [r7, #12]
 8012e6a:	60b9      	str	r1, [r7, #8]
 8012e6c:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012e6e:	f002 f981 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012e72:	f002 f91d 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012e76:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f062 0257 	orn	r2, r2, #87	; 0x57
 8012e80:	701a      	strb	r2, [r3, #0]
 8012e82:	2200      	movs	r2, #0
 8012e84:	705a      	strb	r2, [r3, #1]
 8012e86:	2200      	movs	r2, #0
 8012e88:	709a      	strb	r2, [r3, #2]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	2200      	movs	r2, #0
 8012e92:	f042 0202 	orr.w	r2, r2, #2
 8012e96:	711a      	strb	r2, [r3, #4]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	715a      	strb	r2, [r3, #5]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	719a      	strb	r2, [r3, #6]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8012ea4:	68ba      	ldr	r2, [r7, #8]
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 8012eb0:	f002 f922 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012eb4:	f002 f908 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012eb8:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	689b      	ldr	r3, [r3, #8]
 8012ebe:	b2db      	uxtb	r3, r3
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3718      	adds	r7, #24
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 8012ece:	f002 f951 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012ed2:	f002 f8ed 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012ed6:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2200      	movs	r2, #0
 8012edc:	f062 026b 	orn	r2, r2, #107	; 0x6b
 8012ee0:	701a      	strb	r2, [r3, #0]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	705a      	strb	r2, [r3, #1]
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	709a      	strb	r2, [r3, #2]
 8012eea:	2200      	movs	r2, #0
 8012eec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	711a      	strb	r2, [r3, #4]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	715a      	strb	r2, [r3, #5]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	719a      	strb	r2, [r3, #6]
 8012efc:	2200      	movs	r2, #0
 8012efe:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012f00:	f002 f8fa 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f04:	f002 f8e0 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f08:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	689b      	ldr	r3, [r3, #8]
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3708      	adds	r7, #8
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b084      	sub	sp, #16
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012f1e:	f002 f929 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f22:	f002 f8c5 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012f26:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f062 0269 	orn	r2, r2, #105	; 0x69
 8012f30:	701a      	strb	r2, [r3, #0]
 8012f32:	2200      	movs	r2, #0
 8012f34:	705a      	strb	r2, [r3, #1]
 8012f36:	2200      	movs	r2, #0
 8012f38:	709a      	strb	r2, [r3, #2]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2200      	movs	r2, #0
 8012f42:	711a      	strb	r2, [r3, #4]
 8012f44:	2200      	movs	r2, #0
 8012f46:	715a      	strb	r2, [r3, #5]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	719a      	strb	r2, [r3, #6]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 8012f50:	f002 f8d2 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012f54:	f002 f8b8 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012f58:	60f8      	str	r0, [r7, #12]
}
 8012f5a:	bf00      	nop
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
	...

08012f64 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b086      	sub	sp, #24
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 8012f70:	f002 f900 	bl	8015174 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 8012f74:	4a15      	ldr	r2, [pc, #84]	; (8012fcc <otSetStateChangedCallback+0x68>)
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012f7a:	f002 f899 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012f7e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	2200      	movs	r2, #0
 8012f84:	f062 0268 	orn	r2, r2, #104	; 0x68
 8012f88:	701a      	strb	r2, [r3, #0]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	705a      	strb	r2, [r3, #1]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	709a      	strb	r2, [r3, #2]
 8012f92:	2200      	movs	r2, #0
 8012f94:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	f042 0201 	orr.w	r2, r2, #1
 8012f9e:	711a      	strb	r2, [r3, #4]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	715a      	strb	r2, [r3, #5]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	719a      	strb	r2, [r3, #6]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 8012fac:	687a      	ldr	r2, [r7, #4]
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8012fb2:	f002 f8a1 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8012fb6:	f002 f887 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8012fba:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	689b      	ldr	r3, [r3, #8]
 8012fc0:	b2db      	uxtb	r3, r3
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3718      	adds	r7, #24
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	2002742c 	.word	0x2002742c

08012fd0 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b084      	sub	sp, #16
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8012fd8:	f002 f8cc 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8012fdc:	f002 f868 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8012fe0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	f062 0264 	orn	r2, r2, #100	; 0x64
 8012fea:	701a      	strb	r2, [r3, #0]
 8012fec:	2200      	movs	r2, #0
 8012fee:	705a      	strb	r2, [r3, #1]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	709a      	strb	r2, [r3, #2]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	711a      	strb	r2, [r3, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	715a      	strb	r2, [r3, #5]
 8013002:	2200      	movs	r2, #0
 8013004:	719a      	strb	r2, [r3, #6]
 8013006:	2200      	movs	r2, #0
 8013008:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 801300a:	f002 f875 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801300e:	f002 f85b 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013012:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	b2db      	uxtb	r3, r3
}
 801301a:	4618      	mov	r0, r3
 801301c:	3710      	adds	r7, #16
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}

08013022 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013022:	b580      	push	{r7, lr}
 8013024:	b084      	sub	sp, #16
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]
 801302a:	460b      	mov	r3, r1
 801302c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801302e:	f002 f8a1 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013032:	f002 f83d 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013036:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2200      	movs	r2, #0
 801303c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8013040:	701a      	strb	r2, [r3, #0]
 8013042:	2200      	movs	r2, #0
 8013044:	705a      	strb	r2, [r3, #1]
 8013046:	2200      	movs	r2, #0
 8013048:	709a      	strb	r2, [r3, #2]
 801304a:	2200      	movs	r2, #0
 801304c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2200      	movs	r2, #0
 8013052:	f042 0201 	orr.w	r2, r2, #1
 8013056:	711a      	strb	r2, [r3, #4]
 8013058:	2200      	movs	r2, #0
 801305a:	715a      	strb	r2, [r3, #5]
 801305c:	2200      	movs	r2, #0
 801305e:	719a      	strb	r2, [r3, #6]
 8013060:	2200      	movs	r2, #0
 8013062:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013064:	78fa      	ldrb	r2, [r7, #3]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801306a:	f002 f845 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801306e:	f002 f82b 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013072:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	689b      	ldr	r3, [r3, #8]
 8013078:	b2db      	uxtb	r3, r3
}
 801307a:	4618      	mov	r0, r3
 801307c:	3710      	adds	r7, #16
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <otIp6IsAddressEqual>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint16_t *)p_ot_req->Data[0];
}

OTAPI bool OTCALL otIp6IsAddressEqual(const otIp6Address *a, const otIp6Address *b)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b084      	sub	sp, #16
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
 801308a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 801308c:	f002 f872 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013090:	f002 f80e 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013094:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ADDRESS_EQUAL;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2200      	movs	r2, #0
 801309a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 801309e:	701a      	strb	r2, [r3, #0]
 80130a0:	2200      	movs	r2, #0
 80130a2:	705a      	strb	r2, [r3, #1]
 80130a4:	2200      	movs	r2, #0
 80130a6:	709a      	strb	r2, [r3, #2]
 80130a8:	2200      	movs	r2, #0
 80130aa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2200      	movs	r2, #0
 80130b0:	f042 0202 	orr.w	r2, r2, #2
 80130b4:	711a      	strb	r2, [r3, #4]
 80130b6:	2200      	movs	r2, #0
 80130b8:	715a      	strb	r2, [r3, #5]
 80130ba:	2200      	movs	r2, #0
 80130bc:	719a      	strb	r2, [r3, #6]
 80130be:	2200      	movs	r2, #0
 80130c0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)a;
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t)b;
 80130c8:	683a      	ldr	r2, [r7, #0]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 80130ce:	f002 f813 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80130d2:	f001 fff9 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80130d6:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	689b      	ldr	r3, [r3, #8]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	bf14      	ite	ne
 80130e0:	2301      	movne	r3, #1
 80130e2:	2300      	moveq	r3, #0
 80130e4:	b2db      	uxtb	r3, r3
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}

080130ee <otIp6AddressFromString>:

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b084      	sub	sp, #16
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
 80130f6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 80130f8:	f002 f83c 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80130fc:	f001 ffd8 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013100:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2200      	movs	r2, #0
 8013106:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 801310a:	701a      	strb	r2, [r3, #0]
 801310c:	2200      	movs	r2, #0
 801310e:	705a      	strb	r2, [r3, #1]
 8013110:	2200      	movs	r2, #0
 8013112:	709a      	strb	r2, [r3, #2]
 8013114:	2200      	movs	r2, #0
 8013116:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2200      	movs	r2, #0
 801311c:	f042 0202 	orr.w	r2, r2, #2
 8013120:	711a      	strb	r2, [r3, #4]
 8013122:	2200      	movs	r2, #0
 8013124:	715a      	strb	r2, [r3, #5]
 8013126:	2200      	movs	r2, #0
 8013128:	719a      	strb	r2, [r3, #6]
 801312a:	2200      	movs	r2, #0
 801312c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 801312e:	687a      	ldr	r2, [r7, #4]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 8013134:	683a      	ldr	r2, [r7, #0]
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 801313a:	f001 ffdd 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801313e:	f001 ffc3 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013142:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	689b      	ldr	r3, [r3, #8]
 8013148:	b2db      	uxtb	r3, r3
}
 801314a:	4618      	mov	r0, r3
 801314c:	3710      	adds	r7, #16
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}

08013152 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 8013152:	b580      	push	{r7, lr}
 8013154:	b084      	sub	sp, #16
 8013156:	af00      	add	r7, sp, #0
 8013158:	6078      	str	r0, [r7, #4]
 801315a:	460b      	mov	r3, r1
 801315c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 801315e:	f002 f809 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013162:	f001 ffa5 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013166:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2200      	movs	r2, #0
 801316c:	f042 0208 	orr.w	r2, r2, #8
 8013170:	701a      	strb	r2, [r3, #0]
 8013172:	2200      	movs	r2, #0
 8013174:	705a      	strb	r2, [r3, #1]
 8013176:	2200      	movs	r2, #0
 8013178:	709a      	strb	r2, [r3, #2]
 801317a:	2200      	movs	r2, #0
 801317c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2200      	movs	r2, #0
 8013182:	f042 0201 	orr.w	r2, r2, #1
 8013186:	711a      	strb	r2, [r3, #4]
 8013188:	2200      	movs	r2, #0
 801318a:	715a      	strb	r2, [r3, #5]
 801318c:	2200      	movs	r2, #0
 801318e:	719a      	strb	r2, [r3, #6]
 8013190:	2200      	movs	r2, #0
 8013192:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 8013194:	78fa      	ldrb	r2, [r7, #3]
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 801319a:	f001 ffad 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801319e:	f001 ff93 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80131a2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	689b      	ldr	r3, [r3, #8]
 80131a8:	b2db      	uxtb	r3, r3
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	460b      	mov	r3, r1
 80131bc:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 80131be:	f001 ffd9 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80131c2:	f001 ff75 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 80131c6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2200      	movs	r2, #0
 80131cc:	f042 020f 	orr.w	r2, r2, #15
 80131d0:	701a      	strb	r2, [r3, #0]
 80131d2:	2200      	movs	r2, #0
 80131d4:	705a      	strb	r2, [r3, #1]
 80131d6:	2200      	movs	r2, #0
 80131d8:	709a      	strb	r2, [r3, #2]
 80131da:	2200      	movs	r2, #0
 80131dc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	2200      	movs	r2, #0
 80131e2:	f042 0201 	orr.w	r2, r2, #1
 80131e6:	711a      	strb	r2, [r3, #4]
 80131e8:	2200      	movs	r2, #0
 80131ea:	715a      	strb	r2, [r3, #5]
 80131ec:	2200      	movs	r2, #0
 80131ee:	719a      	strb	r2, [r3, #6]
 80131f0:	2200      	movs	r2, #0
 80131f2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 80131f4:	887a      	ldrh	r2, [r7, #2]
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 80131fa:	f001 ff7d 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80131fe:	f001 ff63 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013202:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	689b      	ldr	r3, [r3, #8]
 8013208:	b2db      	uxtb	r3, r3
}
 801320a:	4618      	mov	r0, r3
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b084      	sub	sp, #16
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 801321a:	f001 ffab 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801321e:	f001 ff47 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013222:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2200      	movs	r2, #0
 8013228:	f062 0246 	orn	r2, r2, #70	; 0x46
 801322c:	701a      	strb	r2, [r3, #0]
 801322e:	2200      	movs	r2, #0
 8013230:	705a      	strb	r2, [r3, #1]
 8013232:	2200      	movs	r2, #0
 8013234:	709a      	strb	r2, [r3, #2]
 8013236:	2200      	movs	r2, #0
 8013238:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2200      	movs	r2, #0
 801323e:	f042 0201 	orr.w	r2, r2, #1
 8013242:	711a      	strb	r2, [r3, #4]
 8013244:	2200      	movs	r2, #0
 8013246:	715a      	strb	r2, [r3, #5]
 8013248:	2200      	movs	r2, #0
 801324a:	719a      	strb	r2, [r3, #6]
 801324c:	2200      	movs	r2, #0
 801324e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 8013256:	f001 ff4f 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801325a:	f001 ff35 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 801325e:	60f8      	str	r0, [r7, #12]
}
 8013260:	bf00      	nop
 8013262:	3710      	adds	r7, #16
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}

08013268 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 8013270:	f001 ff80 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013274:	f001 ff1c 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013278:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2200      	movs	r2, #0
 801327e:	f062 0243 	orn	r2, r2, #67	; 0x43
 8013282:	701a      	strb	r2, [r3, #0]
 8013284:	2200      	movs	r2, #0
 8013286:	705a      	strb	r2, [r3, #1]
 8013288:	2200      	movs	r2, #0
 801328a:	709a      	strb	r2, [r3, #2]
 801328c:	2200      	movs	r2, #0
 801328e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	2200      	movs	r2, #0
 8013294:	f042 0201 	orr.w	r2, r2, #1
 8013298:	711a      	strb	r2, [r3, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	715a      	strb	r2, [r3, #5]
 801329e:	2200      	movs	r2, #0
 80132a0:	719a      	strb	r2, [r3, #6]
 80132a2:	2200      	movs	r2, #0
 80132a4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 80132ac:	f001 ff24 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80132b0:	f001 ff0a 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80132b4:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	b29b      	uxth	r3, r3
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3710      	adds	r7, #16
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	4613      	mov	r3, r2
 80132d0:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 80132d2:	f001 ff4f 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 80132d6:	f001 feeb 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 80132da:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	2200      	movs	r2, #0
 80132e0:	f062 023e 	orn	r2, r2, #62	; 0x3e
 80132e4:	701a      	strb	r2, [r3, #0]
 80132e6:	2200      	movs	r2, #0
 80132e8:	705a      	strb	r2, [r3, #1]
 80132ea:	2200      	movs	r2, #0
 80132ec:	709a      	strb	r2, [r3, #2]
 80132ee:	2200      	movs	r2, #0
 80132f0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	2200      	movs	r2, #0
 80132f6:	f042 0203 	orr.w	r2, r2, #3
 80132fa:	711a      	strb	r2, [r3, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	715a      	strb	r2, [r3, #5]
 8013300:	2200      	movs	r2, #0
 8013302:	719a      	strb	r2, [r3, #6]
 8013304:	2200      	movs	r2, #0
 8013306:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 8013314:	88fa      	ldrh	r2, [r7, #6]
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 801331a:	f001 feed 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 801331e:	f001 fed3 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013322:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	b2db      	uxtb	r3, r3
}
 801332a:	4618      	mov	r0, r3
 801332c:	3718      	adds	r7, #24
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 8013332:	b580      	push	{r7, lr}
 8013334:	b086      	sub	sp, #24
 8013336:	af00      	add	r7, sp, #0
 8013338:	60f8      	str	r0, [r7, #12]
 801333a:	607a      	str	r2, [r7, #4]
 801333c:	461a      	mov	r2, r3
 801333e:	460b      	mov	r3, r1
 8013340:	817b      	strh	r3, [r7, #10]
 8013342:	4613      	mov	r3, r2
 8013344:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 8013346:	f001 ff15 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 801334a:	f001 feb1 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 801334e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	2200      	movs	r2, #0
 8013354:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8013358:	701a      	strb	r2, [r3, #0]
 801335a:	2200      	movs	r2, #0
 801335c:	705a      	strb	r2, [r3, #1]
 801335e:	2200      	movs	r2, #0
 8013360:	709a      	strb	r2, [r3, #2]
 8013362:	2200      	movs	r2, #0
 8013364:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	2200      	movs	r2, #0
 801336a:	f042 0204 	orr.w	r2, r2, #4
 801336e:	711a      	strb	r2, [r3, #4]
 8013370:	2200      	movs	r2, #0
 8013372:	715a      	strb	r2, [r3, #5]
 8013374:	2200      	movs	r2, #0
 8013376:	719a      	strb	r2, [r3, #6]
 8013378:	2200      	movs	r2, #0
 801337a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 801337c:	68fa      	ldr	r2, [r7, #12]
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 8013382:	897a      	ldrh	r2, [r7, #10]
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 801338e:	893a      	ldrh	r2, [r7, #8]
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 8013394:	f001 feb0 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013398:	f001 fe96 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 801339c:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	689b      	ldr	r3, [r3, #8]
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3718      	adds	r7, #24
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
	...

080133ac <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 80133ac:	b5b0      	push	{r4, r5, r7, lr}
 80133ae:	b084      	sub	sp, #16
 80133b0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80133b2:	2300      	movs	r3, #0
 80133b4:	71fb      	strb	r3, [r7, #7]

    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 80133b6:	f001 fe93 	bl	80150e0 <THREAD_Get_NotificationPayloadBuffer>
 80133ba:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	3b01      	subs	r3, #1
 80133c2:	2b14      	cmp	r3, #20
 80133c4:	f200 8172 	bhi.w	80136ac <OpenThread_CallBack_Processing+0x300>
 80133c8:	a201      	add	r2, pc, #4	; (adr r2, 80133d0 <OpenThread_CallBack_Processing+0x24>)
 80133ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ce:	bf00      	nop
 80133d0:	08013425 	.word	0x08013425
 80133d4:	08013441 	.word	0x08013441
 80133d8:	0801346d 	.word	0x0801346d
 80133dc:	080134a1 	.word	0x080134a1
 80133e0:	080134ad 	.word	0x080134ad
 80133e4:	080134cb 	.word	0x080134cb
 80133e8:	080134e9 	.word	0x080134e9
 80133ec:	08013507 	.word	0x08013507
 80133f0:	08013525 	.word	0x08013525
 80133f4:	08013543 	.word	0x08013543
 80133f8:	08013565 	.word	0x08013565
 80133fc:	08013583 	.word	0x08013583
 8013400:	080136ad 	.word	0x080136ad
 8013404:	080135a9 	.word	0x080135a9
 8013408:	080135dd 	.word	0x080135dd
 801340c:	08013605 	.word	0x08013605
 8013410:	08013623 	.word	0x08013623
 8013414:	08013647 	.word	0x08013647
 8013418:	0801366f 	.word	0x0801366f
 801341c:	080136ad 	.word	0x080136ad
 8013420:	0801368d 	.word	0x0801368d
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 8013424:	4ba3      	ldr	r3, [pc, #652]	; (80136b4 <OpenThread_CallBack_Processing+0x308>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	f000 8167 	beq.w	80136fc <OpenThread_CallBack_Processing+0x350>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801342e:	4ba1      	ldr	r3, [pc, #644]	; (80136b4 <OpenThread_CallBack_Processing+0x308>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	683a      	ldr	r2, [r7, #0]
 8013434:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 8013436:	683a      	ldr	r2, [r7, #0]
 8013438:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 801343a:	4611      	mov	r1, r2
 801343c:	4798      	blx	r3
        }
        break;
 801343e:	e15d      	b.n	80136fc <OpenThread_CallBack_Processing+0x350>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        coapRequestHandlerCb = (CoapRequestHandlerCallback) p_notification->Data[0];
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	689b      	ldr	r3, [r3, #8]
 8013444:	461a      	mov	r2, r3
 8013446:	4b9c      	ldr	r3, [pc, #624]	; (80136b8 <OpenThread_CallBack_Processing+0x30c>)
 8013448:	601a      	str	r2, [r3, #0]

        if (coapRequestHandlerCb != NULL)
 801344a:	4b9b      	ldr	r3, [pc, #620]	; (80136b8 <OpenThread_CallBack_Processing+0x30c>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	f000 8156 	beq.w	8013700 <OpenThread_CallBack_Processing+0x354>
        {
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013454:	4b98      	ldr	r3, [pc, #608]	; (80136b8 <OpenThread_CallBack_Processing+0x30c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	683a      	ldr	r2, [r7, #0]
 801345a:	68d2      	ldr	r2, [r2, #12]
 801345c:	4610      	mov	r0, r2
                    (otMessage *) p_notification->Data[2],
 801345e:	683a      	ldr	r2, [r7, #0]
 8013460:	6912      	ldr	r2, [r2, #16]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013462:	4611      	mov	r1, r2
                    (otMessageInfo *) p_notification->Data[3]);
 8013464:	683a      	ldr	r2, [r7, #0]
 8013466:	6952      	ldr	r2, [r2, #20]
            coapRequestHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013468:	4798      	blx	r3
        }
        break;
 801346a:	e149      	b.n	8013700 <OpenThread_CallBack_Processing+0x354>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
        coapResponseHandlerCb = (CoapResponseHandlerCallback) p_notification->Data[0];
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	689b      	ldr	r3, [r3, #8]
 8013470:	461a      	mov	r2, r3
 8013472:	4b92      	ldr	r3, [pc, #584]	; (80136bc <OpenThread_CallBack_Processing+0x310>)
 8013474:	601a      	str	r2, [r3, #0]
        if (coapResponseHandlerCb != NULL)
 8013476:	4b91      	ldr	r3, [pc, #580]	; (80136bc <OpenThread_CallBack_Processing+0x310>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	f000 8142 	beq.w	8013704 <OpenThread_CallBack_Processing+0x358>
        {
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013480:	4b8e      	ldr	r3, [pc, #568]	; (80136bc <OpenThread_CallBack_Processing+0x310>)
 8013482:	681c      	ldr	r4, [r3, #0]
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	4618      	mov	r0, r3
                    (otMessage *) p_notification->Data[2],
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801348e:	4619      	mov	r1, r3
                    (otMessageInfo *) p_notification->Data[3],
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 8013494:	461a      	mov	r2, r3
                    (otError) p_notification->Data[4]);
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb( (otCoapHeader *) p_notification->Data[1],
 801349a:	b2db      	uxtb	r3, r3
 801349c:	47a0      	blx	r4
        }
        break;
 801349e:	e131      	b.n	8013704 <OpenThread_CallBack_Processing+0x358>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 80134a0:	2001      	movs	r0, #1
 80134a2:	f000 f99b 	bl	80137dc <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 80134a6:	f7f4 fecc 	bl	8008242 <HAL_NVIC_SystemReset>
        break;
 80134aa:	e14a      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 80134ac:	4b84      	ldr	r3, [pc, #528]	; (80136c0 <OpenThread_CallBack_Processing+0x314>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f000 8129 	beq.w	8013708 <OpenThread_CallBack_Processing+0x35c>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80134b6:	4b82      	ldr	r3, [pc, #520]	; (80136c0 <OpenThread_CallBack_Processing+0x314>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	683a      	ldr	r2, [r7, #0]
 80134bc:	6892      	ldr	r2, [r2, #8]
 80134be:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80134c0:	683a      	ldr	r2, [r7, #0]
 80134c2:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 80134c4:	4611      	mov	r1, r2
 80134c6:	4798      	blx	r3
        }
        break;
 80134c8:	e11e      	b.n	8013708 <OpenThread_CallBack_Processing+0x35c>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 80134ca:	4b7e      	ldr	r3, [pc, #504]	; (80136c4 <OpenThread_CallBack_Processing+0x318>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	f000 811c 	beq.w	801370c <OpenThread_CallBack_Processing+0x360>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80134d4:	4b7b      	ldr	r3, [pc, #492]	; (80136c4 <OpenThread_CallBack_Processing+0x318>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	683a      	ldr	r2, [r7, #0]
 80134da:	6892      	ldr	r2, [r2, #8]
 80134dc:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 80134de:	683a      	ldr	r2, [r7, #0]
 80134e0:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 80134e2:	2000      	movs	r0, #0
 80134e4:	4798      	blx	r3
        }
        break;
 80134e6:	e111      	b.n	801370c <OpenThread_CallBack_Processing+0x360>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 80134e8:	4b77      	ldr	r3, [pc, #476]	; (80136c8 <OpenThread_CallBack_Processing+0x31c>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	f000 810f 	beq.w	8013710 <OpenThread_CallBack_Processing+0x364>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 80134f2:	4b75      	ldr	r3, [pc, #468]	; (80136c8 <OpenThread_CallBack_Processing+0x31c>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	683a      	ldr	r2, [r7, #0]
 80134f8:	6892      	ldr	r2, [r2, #8]
 80134fa:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 80134fc:	683a      	ldr	r2, [r7, #0]
 80134fe:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 8013500:	4611      	mov	r1, r2
 8013502:	4798      	blx	r3
        }
        break;
 8013504:	e104      	b.n	8013710 <OpenThread_CallBack_Processing+0x364>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 8013506:	4b71      	ldr	r3, [pc, #452]	; (80136cc <OpenThread_CallBack_Processing+0x320>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	f000 8102 	beq.w	8013714 <OpenThread_CallBack_Processing+0x368>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 8013510:	4b6e      	ldr	r3, [pc, #440]	; (80136cc <OpenThread_CallBack_Processing+0x320>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	683a      	ldr	r2, [r7, #0]
 8013516:	6892      	ldr	r2, [r2, #8]
 8013518:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 801351a:	683a      	ldr	r2, [r7, #0]
 801351c:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 801351e:	4611      	mov	r1, r2
 8013520:	4798      	blx	r3
        }
        break;
 8013522:	e0f7      	b.n	8013714 <OpenThread_CallBack_Processing+0x368>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 8013524:	4b6a      	ldr	r3, [pc, #424]	; (80136d0 <OpenThread_CallBack_Processing+0x324>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	f000 80f5 	beq.w	8013718 <OpenThread_CallBack_Processing+0x36c>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801352e:	4b68      	ldr	r3, [pc, #416]	; (80136d0 <OpenThread_CallBack_Processing+0x324>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	683a      	ldr	r2, [r7, #0]
 8013534:	6892      	ldr	r2, [r2, #8]
 8013536:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 8013538:	683a      	ldr	r2, [r7, #0]
 801353a:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 801353c:	4611      	mov	r1, r2
 801353e:	4798      	blx	r3
        }
        break;
 8013540:	e0ea      	b.n	8013718 <OpenThread_CallBack_Processing+0x36c>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 8013542:	4b64      	ldr	r3, [pc, #400]	; (80136d4 <OpenThread_CallBack_Processing+0x328>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	f000 80e8 	beq.w	801371c <OpenThread_CallBack_Processing+0x370>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801354c:	4b61      	ldr	r3, [pc, #388]	; (80136d4 <OpenThread_CallBack_Processing+0x328>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	683a      	ldr	r2, [r7, #0]
 8013552:	6892      	ldr	r2, [r2, #8]
 8013554:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 8013556:	683a      	ldr	r2, [r7, #0]
 8013558:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 801355a:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 801355c:	683a      	ldr	r2, [r7, #0]
 801355e:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 8013560:	4798      	blx	r3
        }
        break;
 8013562:	e0db      	b.n	801371c <OpenThread_CallBack_Processing+0x370>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 8013564:	4b5c      	ldr	r3, [pc, #368]	; (80136d8 <OpenThread_CallBack_Processing+0x32c>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	f000 80d9 	beq.w	8013720 <OpenThread_CallBack_Processing+0x374>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801356e:	4b5a      	ldr	r3, [pc, #360]	; (80136d8 <OpenThread_CallBack_Processing+0x32c>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	683a      	ldr	r2, [r7, #0]
 8013574:	6892      	ldr	r2, [r2, #8]
 8013576:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 8013578:	683a      	ldr	r2, [r7, #0]
 801357a:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 801357c:	4611      	mov	r1, r2
 801357e:	4798      	blx	r3
        }
        break;
 8013580:	e0ce      	b.n	8013720 <OpenThread_CallBack_Processing+0x374>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 8013582:	4b56      	ldr	r3, [pc, #344]	; (80136dc <OpenThread_CallBack_Processing+0x330>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	f000 80cc 	beq.w	8013724 <OpenThread_CallBack_Processing+0x378>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801358c:	4b53      	ldr	r3, [pc, #332]	; (80136dc <OpenThread_CallBack_Processing+0x330>)
 801358e:	681c      	ldr	r4, [r3, #0]
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 8013598:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 801359e:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 80135a4:	47a0      	blx	r4
        }
        break;
 80135a6:	e0bd      	b.n	8013724 <OpenThread_CallBack_Processing+0x378>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 80135a8:	4b4d      	ldr	r3, [pc, #308]	; (80136e0 <OpenThread_CallBack_Processing+0x334>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	f000 80bb 	beq.w	8013728 <OpenThread_CallBack_Processing+0x37c>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80135b2:	4b4b      	ldr	r3, [pc, #300]	; (80136e0 <OpenThread_CallBack_Processing+0x334>)
 80135b4:	681c      	ldr	r4, [r3, #0]
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80135c0:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80135c6:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	4613      	mov	r3, r2
 80135d6:	462a      	mov	r2, r5
 80135d8:	47a0      	blx	r4
        }
        break;
 80135da:	e0a5      	b.n	8013728 <OpenThread_CallBack_Processing+0x37c>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 80135dc:	4b41      	ldr	r3, [pc, #260]	; (80136e4 <OpenThread_CallBack_Processing+0x338>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	f000 80a3 	beq.w	801372c <OpenThread_CallBack_Processing+0x380>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80135e6:	4b3f      	ldr	r3, [pc, #252]	; (80136e4 <OpenThread_CallBack_Processing+0x338>)
 80135e8:	681c      	ldr	r4, [r3, #0]
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80135f4:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 80135fa:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 8013600:	47a0      	blx	r4
        }
        break;
 8013602:	e093      	b.n	801372c <OpenThread_CallBack_Processing+0x380>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 8013604:	4b38      	ldr	r3, [pc, #224]	; (80136e8 <OpenThread_CallBack_Processing+0x33c>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 8091 	beq.w	8013730 <OpenThread_CallBack_Processing+0x384>
        {
            otJoinerCb((otError) p_notification->Data[0],
 801360e:	4b36      	ldr	r3, [pc, #216]	; (80136e8 <OpenThread_CallBack_Processing+0x33c>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	683a      	ldr	r2, [r7, #0]
 8013614:	6892      	ldr	r2, [r2, #8]
 8013616:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 8013618:	683a      	ldr	r2, [r7, #0]
 801361a:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 801361c:	4611      	mov	r1, r2
 801361e:	4798      	blx	r3
        }
        break;
 8013620:	e086      	b.n	8013730 <OpenThread_CallBack_Processing+0x384>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 8013622:	4b32      	ldr	r3, [pc, #200]	; (80136ec <OpenThread_CallBack_Processing+0x340>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	f000 8084 	beq.w	8013734 <OpenThread_CallBack_Processing+0x388>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801362c:	4b2f      	ldr	r3, [pc, #188]	; (80136ec <OpenThread_CallBack_Processing+0x340>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	683a      	ldr	r2, [r7, #0]
 8013632:	6892      	ldr	r2, [r2, #8]
 8013634:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 8013636:	683a      	ldr	r2, [r7, #0]
 8013638:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 801363a:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 801363c:	683a      	ldr	r2, [r7, #0]
 801363e:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 8013640:	b2d2      	uxtb	r2, r2
 8013642:	4798      	blx	r3
        }
        break;
 8013644:	e076      	b.n	8013734 <OpenThread_CallBack_Processing+0x388>
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 8013646:	4b2a      	ldr	r3, [pc, #168]	; (80136f0 <OpenThread_CallBack_Processing+0x344>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d074      	beq.n	8013738 <OpenThread_CallBack_Processing+0x38c>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801364e:	4b28      	ldr	r3, [pc, #160]	; (80136f0 <OpenThread_CallBack_Processing+0x344>)
 8013650:	681c      	ldr	r4, [r3, #0]
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	689b      	ldr	r3, [r3, #8]
 8013656:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 801365c:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013662:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 8013668:	b2db      	uxtb	r3, r3
 801366a:	47a0      	blx	r4
        }
        break;
 801366c:	e064      	b.n	8013738 <OpenThread_CallBack_Processing+0x38c>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 801366e:	4b21      	ldr	r3, [pc, #132]	; (80136f4 <OpenThread_CallBack_Processing+0x348>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d062      	beq.n	801373c <OpenThread_CallBack_Processing+0x390>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013676:	4b1f      	ldr	r3, [pc, #124]	; (80136f4 <OpenThread_CallBack_Processing+0x348>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	683a      	ldr	r2, [r7, #0]
 801367c:	6892      	ldr	r2, [r2, #8]
 801367e:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 8013684:	b252      	sxtb	r2, r2
 8013686:	4611      	mov	r1, r2
 8013688:	4798      	blx	r3
        }
        break;
 801368a:	e057      	b.n	801373c <OpenThread_CallBack_Processing+0x390>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 801368c:	4b1a      	ldr	r3, [pc, #104]	; (80136f8 <OpenThread_CallBack_Processing+0x34c>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d055      	beq.n	8013740 <OpenThread_CallBack_Processing+0x394>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 8013694:	4b18      	ldr	r3, [pc, #96]	; (80136f8 <OpenThread_CallBack_Processing+0x34c>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	683a      	ldr	r2, [r7, #0]
 801369a:	6892      	ldr	r2, [r2, #8]
 801369c:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 801369e:	683a      	ldr	r2, [r7, #0]
 80136a0:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80136a2:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 80136a4:	683a      	ldr	r2, [r7, #0]
 80136a6:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 80136a8:	4798      	blx	r3
        }
        break;
 80136aa:	e049      	b.n	8013740 <OpenThread_CallBack_Processing+0x394>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 80136ac:	2301      	movs	r3, #1
 80136ae:	71fb      	strb	r3, [r7, #7]
        break;
 80136b0:	e047      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
 80136b2:	bf00      	nop
 80136b4:	2002742c 	.word	0x2002742c
 80136b8:	2002746c 	.word	0x2002746c
 80136bc:	20027470 	.word	0x20027470
 80136c0:	20027434 	.word	0x20027434
 80136c4:	20027430 	.word	0x20027430
 80136c8:	20027438 	.word	0x20027438
 80136cc:	2002743c 	.word	0x2002743c
 80136d0:	20027440 	.word	0x20027440
 80136d4:	20027444 	.word	0x20027444
 80136d8:	20027448 	.word	0x20027448
 80136dc:	2002744c 	.word	0x2002744c
 80136e0:	20027450 	.word	0x20027450
 80136e4:	20027454 	.word	0x20027454
 80136e8:	20027458 	.word	0x20027458
 80136ec:	2002745c 	.word	0x2002745c
 80136f0:	20027460 	.word	0x20027460
 80136f4:	20027464 	.word	0x20027464
 80136f8:	20027468 	.word	0x20027468
        break;
 80136fc:	bf00      	nop
 80136fe:	e020      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013700:	bf00      	nop
 8013702:	e01e      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013704:	bf00      	nop
 8013706:	e01c      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013708:	bf00      	nop
 801370a:	e01a      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 801370c:	bf00      	nop
 801370e:	e018      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013710:	bf00      	nop
 8013712:	e016      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013714:	bf00      	nop
 8013716:	e014      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013718:	bf00      	nop
 801371a:	e012      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 801371c:	bf00      	nop
 801371e:	e010      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013720:	bf00      	nop
 8013722:	e00e      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013724:	bf00      	nop
 8013726:	e00c      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013728:	bf00      	nop
 801372a:	e00a      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 801372c:	bf00      	nop
 801372e:	e008      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013730:	bf00      	nop
 8013732:	e006      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013734:	bf00      	nop
 8013736:	e004      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013738:	bf00      	nop
 801373a:	e002      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 801373c:	bf00      	nop
 801373e:	e000      	b.n	8013742 <OpenThread_CallBack_Processing+0x396>
        break;
 8013740:	bf00      	nop
    }

    TL_THREAD_SendAck();
 8013742:	f000 fcc1 	bl	80140c8 <TL_THREAD_SendAck>
    return status;
 8013746:	79fb      	ldrb	r3, [r7, #7]

}
 8013748:	4618      	mov	r0, r3
 801374a:	3708      	adds	r7, #8
 801374c:	46bd      	mov	sp, r7
 801374e:	bdb0      	pop	{r4, r5, r7, pc}

08013750 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	460b      	mov	r3, r1
 801375a:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 801375c:	f001 fd0a 	bl	8015174 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013760:	f001 fca6 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013764:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2200      	movs	r2, #0
 801376a:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 801376e:	701a      	strb	r2, [r3, #0]
 8013770:	2200      	movs	r2, #0
 8013772:	f042 0201 	orr.w	r2, r2, #1
 8013776:	705a      	strb	r2, [r3, #1]
 8013778:	2200      	movs	r2, #0
 801377a:	709a      	strb	r2, [r3, #2]
 801377c:	2200      	movs	r2, #0
 801377e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2200      	movs	r2, #0
 8013784:	f042 0201 	orr.w	r2, r2, #1
 8013788:	711a      	strb	r2, [r3, #4]
 801378a:	2200      	movs	r2, #0
 801378c:	715a      	strb	r2, [r3, #5]
 801378e:	2200      	movs	r2, #0
 8013790:	719a      	strb	r2, [r3, #6]
 8013792:	2200      	movs	r2, #0
 8013794:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 8013796:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 801379e:	f001 fcab 	bl	80150f8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 80137a2:	f001 fc91 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 80137a6:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	b2db      	uxtb	r3, r3
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b086      	sub	sp, #24
 80137ba:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80137bc:	1d3b      	adds	r3, r7, #4
 80137be:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2200      	movs	r2, #0
 80137c4:	2100      	movs	r1, #0
 80137c6:	f64f 4067 	movw	r0, #64615	; 0xfc67
 80137ca:	f000 f915 	bl	80139f8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	330b      	adds	r3, #11
 80137d2:	78db      	ldrb	r3, [r3, #3]
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b088      	sub	sp, #32
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	4603      	mov	r3, r0
 80137e4:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80137e6:	f107 030c 	add.w	r3, r7, #12
 80137ea:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 80137ec:	79fb      	ldrb	r3, [r7, #7]
 80137ee:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 80137f0:	f107 020c 	add.w	r2, r7, #12
 80137f4:	69fb      	ldr	r3, [r7, #28]
 80137f6:	2101      	movs	r1, #1
 80137f8:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 80137fc:	f000 f8fc 	bl	80139f8 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	330b      	adds	r3, #11
 8013804:	78db      	ldrb	r3, [r3, #3]
}
 8013806:	4618      	mov	r0, r3
 8013808:	3720      	adds	r7, #32
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
	...

08013810 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8013810:	b480      	push	{r7}
 8013812:	b089      	sub	sp, #36	; 0x24
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8013818:	2300      	movs	r3, #0
 801381a:	61fb      	str	r3, [r7, #28]
  MB_RefTable_t * p_RefTable = NULL;
 801381c:	2300      	movs	r3, #0
 801381e:	61bb      	str	r3, [r7, #24]
  uint32_t version = 0;
 8013820:	2300      	movs	r3, #0
 8013822:	617b      	str	r3, [r7, #20]
  uint32_t memorySize = 0;
 8013824:	2300      	movs	r3, #0
 8013826:	613b      	str	r3, [r7, #16]
  uint32_t infoStack = 0;
 8013828:	2300      	movs	r3, #0
 801382a:	60fb      	str	r3, [r7, #12]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801382c:	4b3c      	ldr	r3, [pc, #240]	; (8013920 <SHCI_GetWirelessFwInfo+0x110>)
 801382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013830:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013834:	61fb      	str	r3, [r7, #28]
  p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8013836:	69fb      	ldr	r3, [r7, #28]
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801383e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8013842:	61bb      	str	r3, [r7, #24]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	691b      	ldr	r3, [r3, #16]
 801384a:	617b      	str	r3, [r7, #20]
  pWirelessInfo->VersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	0e1b      	lsrs	r3, r3, #24
 8013850:	b2da      	uxtb	r2, r3
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	0c1b      	lsrs	r3, r3, #16
 801385a:	b2da      	uxtb	r2, r3
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	0a1b      	lsrs	r3, r3, #8
 8013864:	b2da      	uxtb	r2, r3
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	091b      	lsrs	r3, r3, #4
 801386e:	b2db      	uxtb	r3, r3
 8013870:	f003 030f 	and.w	r3, r3, #15
 8013874:	b2da      	uxtb	r2, r3
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	b2db      	uxtb	r3, r3
 801387e:	f003 030f 	and.w	r3, r3, #15
 8013882:	b2da      	uxtb	r2, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	711a      	strb	r2, [r3, #4]

  memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	695b      	ldr	r3, [r3, #20]
 801388e:	613b      	str	r3, [r7, #16]
  pWirelessInfo->MemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	0e1b      	lsrs	r3, r3, #24
 8013894:	b2da      	uxtb	r2, r3
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	0c1b      	lsrs	r3, r3, #16
 801389e:	b2da      	uxtb	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	0a1b      	lsrs	r3, r3, #8
 80138a8:	b2da      	uxtb	r2, r3
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	b2da      	uxtb	r2, r3
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	721a      	strb	r2, [r3, #8]

  infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	699b      	ldr	r3, [r3, #24]
 80138bc:	60fb      	str	r3, [r7, #12]
  pWirelessInfo->StackType          = ((infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	b2da      	uxtb	r2, r3
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80138c6:	69bb      	ldr	r3, [r7, #24]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	617b      	str	r3, [r7, #20]
  pWirelessInfo->FusVersionMajor       = ((version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	0e1b      	lsrs	r3, r3, #24
 80138d2:	b2da      	uxtb	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	0c1b      	lsrs	r3, r3, #16
 80138dc:	b2da      	uxtb	r2, r3
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	0a1b      	lsrs	r3, r3, #8
 80138e6:	b2da      	uxtb	r2, r3
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	731a      	strb	r2, [r3, #12]

  memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	689b      	ldr	r3, [r3, #8]
 80138f2:	613b      	str	r3, [r7, #16]
  pWirelessInfo->FusMemorySizeSram2B   = ((memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	0e1b      	lsrs	r3, r3, #24
 80138f8:	b2da      	uxtb	r2, r3
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	0c1b      	lsrs	r3, r3, #16
 8013902:	b2da      	uxtb	r2, r3
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	b2da      	uxtb	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8013910:	2300      	movs	r3, #0
}
 8013912:	4618      	mov	r0, r3
 8013914:	3724      	adds	r7, #36	; 0x24
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop
 8013920:	58004000 	.word	0x58004000

08013924 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	4a08      	ldr	r2, [pc, #32]	; (8013954 <shci_init+0x30>)
 8013934:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8013936:	4a08      	ldr	r2, [pc, #32]	; (8013958 <shci_init+0x34>)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801393c:	4806      	ldr	r0, [pc, #24]	; (8013958 <shci_init+0x34>)
 801393e:	f000 f911 	bl	8013b64 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	4618      	mov	r0, r3
 8013948:	f000 f894 	bl	8013a74 <TlInit>

  return;
 801394c:	bf00      	nop
}
 801394e:	3708      	adds	r7, #8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	20027494 	.word	0x20027494
 8013958:	20027474 	.word	0x20027474

0801395c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b084      	sub	sp, #16
 8013960:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013962:	4822      	ldr	r0, [pc, #136]	; (80139ec <shci_user_evt_proc+0x90>)
 8013964:	f000 f922 	bl	8013bac <LST_is_empty>
 8013968:	4603      	mov	r3, r0
 801396a:	2b00      	cmp	r3, #0
 801396c:	d12b      	bne.n	80139c6 <shci_user_evt_proc+0x6a>
 801396e:	4b20      	ldr	r3, [pc, #128]	; (80139f0 <shci_user_evt_proc+0x94>)
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d027      	beq.n	80139c6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8013976:	f107 030c 	add.w	r3, r7, #12
 801397a:	4619      	mov	r1, r3
 801397c:	481b      	ldr	r0, [pc, #108]	; (80139ec <shci_user_evt_proc+0x90>)
 801397e:	f000 f99c 	bl	8013cba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8013982:	4b1c      	ldr	r3, [pc, #112]	; (80139f4 <shci_user_evt_proc+0x98>)
 8013984:	69db      	ldr	r3, [r3, #28]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00c      	beq.n	80139a4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801398e:	2301      	movs	r3, #1
 8013990:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8013992:	4b18      	ldr	r3, [pc, #96]	; (80139f4 <shci_user_evt_proc+0x98>)
 8013994:	69db      	ldr	r3, [r3, #28]
 8013996:	1d3a      	adds	r2, r7, #4
 8013998:	4610      	mov	r0, r2
 801399a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801399c:	793a      	ldrb	r2, [r7, #4]
 801399e:	4b14      	ldr	r3, [pc, #80]	; (80139f0 <shci_user_evt_proc+0x94>)
 80139a0:	701a      	strb	r2, [r3, #0]
 80139a2:	e002      	b.n	80139aa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80139a4:	4b12      	ldr	r3, [pc, #72]	; (80139f0 <shci_user_evt_proc+0x94>)
 80139a6:	2201      	movs	r2, #1
 80139a8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80139aa:	4b11      	ldr	r3, [pc, #68]	; (80139f0 <shci_user_evt_proc+0x94>)
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d004      	beq.n	80139bc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f000 fc03 	bl	80141c0 <TL_MM_EvtDone>
 80139ba:	e004      	b.n	80139c6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	4619      	mov	r1, r3
 80139c0:	480a      	ldr	r0, [pc, #40]	; (80139ec <shci_user_evt_proc+0x90>)
 80139c2:	f000 f913 	bl	8013bec <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80139c6:	4809      	ldr	r0, [pc, #36]	; (80139ec <shci_user_evt_proc+0x90>)
 80139c8:	f000 f8f0 	bl	8013bac <LST_is_empty>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d107      	bne.n	80139e2 <shci_user_evt_proc+0x86>
 80139d2:	4b07      	ldr	r3, [pc, #28]	; (80139f0 <shci_user_evt_proc+0x94>)
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d003      	beq.n	80139e2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80139da:	4804      	ldr	r0, [pc, #16]	; (80139ec <shci_user_evt_proc+0x90>)
 80139dc:	f7ed fbea 	bl	80011b4 <shci_notify_asynch_evt>
  }


  return;
 80139e0:	bf00      	nop
 80139e2:	bf00      	nop
}
 80139e4:	3710      	adds	r7, #16
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	200001fc 	.word	0x200001fc
 80139f0:	2000020c 	.word	0x2000020c
 80139f4:	20027474 	.word	0x20027474

080139f8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60ba      	str	r2, [r7, #8]
 8013a00:	607b      	str	r3, [r7, #4]
 8013a02:	4603      	mov	r3, r0
 8013a04:	81fb      	strh	r3, [r7, #14]
 8013a06:	460b      	mov	r3, r1
 8013a08:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	f000 f864 	bl	8013ad8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8013a10:	4b16      	ldr	r3, [pc, #88]	; (8013a6c <shci_send+0x74>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	89fa      	ldrh	r2, [r7, #14]
 8013a16:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8013a1a:	4b14      	ldr	r3, [pc, #80]	; (8013a6c <shci_send+0x74>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	7b7a      	ldrb	r2, [r7, #13]
 8013a20:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8013a22:	4b12      	ldr	r3, [pc, #72]	; (8013a6c <shci_send+0x74>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	330c      	adds	r3, #12
 8013a28:	7b7a      	ldrb	r2, [r7, #13]
 8013a2a:	68b9      	ldr	r1, [r7, #8]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f002 fa75 	bl	8015f1c <memcpy>

  shciContext.io.Send(0,0);
 8013a32:	4b0f      	ldr	r3, [pc, #60]	; (8013a70 <shci_send+0x78>)
 8013a34:	691b      	ldr	r3, [r3, #16]
 8013a36:	2100      	movs	r1, #0
 8013a38:	2000      	movs	r0, #0
 8013a3a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8013a3c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8013a40:	f7ed fbd8 	bl	80011f4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f103 0008 	add.w	r0, r3, #8
 8013a4a:	4b08      	ldr	r3, [pc, #32]	; (8013a6c <shci_send+0x74>)
 8013a4c:	6819      	ldr	r1, [r3, #0]
 8013a4e:	4b07      	ldr	r3, [pc, #28]	; (8013a6c <shci_send+0x74>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	789b      	ldrb	r3, [r3, #2]
 8013a54:	3303      	adds	r3, #3
 8013a56:	461a      	mov	r2, r3
 8013a58:	f002 fa60 	bl	8015f1c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013a5c:	2001      	movs	r0, #1
 8013a5e:	f000 f83b 	bl	8013ad8 <Cmd_SetStatus>

  return;
 8013a62:	bf00      	nop
}
 8013a64:	3710      	adds	r7, #16
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	20000208 	.word	0x20000208
 8013a70:	20027474 	.word	0x20027474

08013a74 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b086      	sub	sp, #24
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8013a7c:	4a10      	ldr	r2, [pc, #64]	; (8013ac0 <TlInit+0x4c>)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013a82:	4810      	ldr	r0, [pc, #64]	; (8013ac4 <TlInit+0x50>)
 8013a84:	f000 f882 	bl	8013b8c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013a88:	2001      	movs	r0, #1
 8013a8a:	f000 f825 	bl	8013ad8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013a8e:	4b0e      	ldr	r3, [pc, #56]	; (8013ac8 <TlInit+0x54>)
 8013a90:	2201      	movs	r2, #1
 8013a92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013a94:	4b0d      	ldr	r3, [pc, #52]	; (8013acc <TlInit+0x58>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d00c      	beq.n	8013ab6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013aa0:	4b0b      	ldr	r3, [pc, #44]	; (8013ad0 <TlInit+0x5c>)
 8013aa2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8013aa4:	4b0b      	ldr	r3, [pc, #44]	; (8013ad4 <TlInit+0x60>)
 8013aa6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013aa8:	4b08      	ldr	r3, [pc, #32]	; (8013acc <TlInit+0x58>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	f107 020c 	add.w	r2, r7, #12
 8013ab0:	4610      	mov	r0, r2
 8013ab2:	4798      	blx	r3
  }

  return;
 8013ab4:	bf00      	nop
 8013ab6:	bf00      	nop
}
 8013ab8:	3718      	adds	r7, #24
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	20000208 	.word	0x20000208
 8013ac4:	200001fc 	.word	0x200001fc
 8013ac8:	2000020c 	.word	0x2000020c
 8013acc:	20027474 	.word	0x20027474
 8013ad0:	08013b29 	.word	0x08013b29
 8013ad4:	08013b41 	.word	0x08013b41

08013ad8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	4603      	mov	r3, r0
 8013ae0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8013ae2:	79fb      	ldrb	r3, [r7, #7]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d10b      	bne.n	8013b00 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013ae8:	4b0d      	ldr	r3, [pc, #52]	; (8013b20 <Cmd_SetStatus+0x48>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d003      	beq.n	8013af8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8013af0:	4b0b      	ldr	r3, [pc, #44]	; (8013b20 <Cmd_SetStatus+0x48>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	2000      	movs	r0, #0
 8013af6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013af8:	4b0a      	ldr	r3, [pc, #40]	; (8013b24 <Cmd_SetStatus+0x4c>)
 8013afa:	2200      	movs	r2, #0
 8013afc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8013afe:	e00b      	b.n	8013b18 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013b00:	4b08      	ldr	r3, [pc, #32]	; (8013b24 <Cmd_SetStatus+0x4c>)
 8013b02:	2201      	movs	r2, #1
 8013b04:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013b06:	4b06      	ldr	r3, [pc, #24]	; (8013b20 <Cmd_SetStatus+0x48>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d004      	beq.n	8013b18 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8013b0e:	4b04      	ldr	r3, [pc, #16]	; (8013b20 <Cmd_SetStatus+0x48>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2001      	movs	r0, #1
 8013b14:	4798      	blx	r3
  return;
 8013b16:	bf00      	nop
 8013b18:	bf00      	nop
}
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	20027494 	.word	0x20027494
 8013b24:	20000204 	.word	0x20000204

08013b28 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8013b30:	2000      	movs	r0, #0
 8013b32:	f7ed fb4f 	bl	80011d4 <shci_cmd_resp_release>

  return;
 8013b36:	bf00      	nop
}
 8013b38:	3708      	adds	r7, #8
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
	...

08013b40 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013b48:	6879      	ldr	r1, [r7, #4]
 8013b4a:	4805      	ldr	r0, [pc, #20]	; (8013b60 <TlUserEvtReceived+0x20>)
 8013b4c:	f000 f872 	bl	8013c34 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013b50:	4803      	ldr	r0, [pc, #12]	; (8013b60 <TlUserEvtReceived+0x20>)
 8013b52:	f7ed fb2f 	bl	80011b4 <shci_notify_asynch_evt>

  return;
 8013b56:	bf00      	nop
}
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	200001fc 	.word	0x200001fc

08013b64 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4a05      	ldr	r2, [pc, #20]	; (8013b84 <shci_register_io_bus+0x20>)
 8013b70:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4a04      	ldr	r2, [pc, #16]	; (8013b88 <shci_register_io_bus+0x24>)
 8013b76:	611a      	str	r2, [r3, #16]

  return;
 8013b78:	bf00      	nop
}
 8013b7a:	370c      	adds	r7, #12
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr
 8013b84:	08013f85 	.word	0x08013f85
 8013b88:	08013fd9 	.word	0x08013fd9

08013b8c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	605a      	str	r2, [r3, #4]
}
 8013ba0:	bf00      	nop
 8013ba2:	370c      	adds	r7, #12
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b087      	sub	sp, #28
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8013bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8013bba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013bbe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	687a      	ldr	r2, [r7, #4]
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	d102      	bne.n	8013bd0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	75fb      	strb	r3, [r7, #23]
 8013bce:	e001      	b.n	8013bd4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	75fb      	strb	r3, [r7, #23]
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8013bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	371c      	adds	r7, #28
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr

08013bec <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b087      	sub	sp, #28
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8013bfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8013bfc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c00:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	687a      	ldr	r2, [r7, #4]
 8013c0e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	683a      	ldr	r2, [r7, #0]
 8013c14:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	683a      	ldr	r2, [r7, #0]
 8013c1c:	605a      	str	r2, [r3, #4]
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013c28:	bf00      	nop
 8013c2a:	371c      	adds	r7, #28
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8013c34:	b480      	push	{r7}
 8013c36:	b087      	sub	sp, #28
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8013c42:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c44:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013c46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c48:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	685a      	ldr	r2, [r3, #4]
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	683a      	ldr	r2, [r7, #0]
 8013c5c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	683a      	ldr	r2, [r7, #0]
 8013c64:	601a      	str	r2, [r3, #0]
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013c70:	bf00      	nop
 8013c72:	371c      	adds	r7, #28
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b087      	sub	sp, #28
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c84:	f3ef 8310 	mrs	r3, PRIMASK
 8013c88:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c8e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	687a      	ldr	r2, [r7, #4]
 8013c96:	6812      	ldr	r2, [r2, #0]
 8013c98:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	6852      	ldr	r2, [r2, #4]
 8013ca2:	605a      	str	r2, [r3, #4]
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013cae:	bf00      	nop
 8013cb0:	371c      	adds	r7, #28
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr

08013cba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b086      	sub	sp, #24
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
 8013cc2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8013cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8013cca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013ccc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013cce:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7ff ffcd 	bl	8013c7c <LST_remove_node>
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013cec:	bf00      	nop
 8013cee:	3718      	adds	r7, #24
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 8013d00:	f001 fa38 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d04:	f001 f9d4 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013d08:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8013d12:	701a      	strb	r2, [r3, #0]
 8013d14:	2200      	movs	r2, #0
 8013d16:	705a      	strb	r2, [r3, #1]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	709a      	strb	r2, [r3, #2]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2200      	movs	r2, #0
 8013d24:	f042 0201 	orr.w	r2, r2, #1
 8013d28:	711a      	strb	r2, [r3, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	715a      	strb	r2, [r3, #5]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	719a      	strb	r2, [r3, #6]
 8013d32:	2200      	movs	r2, #0
 8013d34:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 8013d36:	78fa      	ldrb	r2, [r7, #3]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013d3c:	f001 f9dc 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d40:	f001 f9c2 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013d44:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	b2db      	uxtb	r3, r3
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3710      	adds	r7, #16
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013d5e:	f001 fa09 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013d62:	f001 f9a5 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013d66:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8013d70:	701a      	strb	r2, [r3, #0]
 8013d72:	2200      	movs	r2, #0
 8013d74:	705a      	strb	r2, [r3, #1]
 8013d76:	2200      	movs	r2, #0
 8013d78:	709a      	strb	r2, [r3, #2]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2200      	movs	r2, #0
 8013d82:	f042 0201 	orr.w	r2, r2, #1
 8013d86:	711a      	strb	r2, [r3, #4]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	715a      	strb	r2, [r3, #5]
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	719a      	strb	r2, [r3, #6]
 8013d90:	2200      	movs	r2, #0
 8013d92:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 8013d94:	683a      	ldr	r2, [r7, #0]
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013d9a:	f001 f9ad 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013d9e:	f001 f993 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013da2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	b2db      	uxtb	r3, r3
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3710      	adds	r7, #16
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}

08013db2 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b084      	sub	sp, #16
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
 8013dba:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013dbc:	f001 f9da 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013dc0:	f001 f976 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013dc4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8013dce:	701a      	strb	r2, [r3, #0]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	705a      	strb	r2, [r3, #1]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	709a      	strb	r2, [r3, #2]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f042 0201 	orr.w	r2, r2, #1
 8013de4:	711a      	strb	r2, [r3, #4]
 8013de6:	2200      	movs	r2, #0
 8013de8:	715a      	strb	r2, [r3, #5]
 8013dea:	2200      	movs	r2, #0
 8013dec:	719a      	strb	r2, [r3, #6]
 8013dee:	2200      	movs	r2, #0
 8013df0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 8013df2:	683a      	ldr	r2, [r7, #0]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013df8:	f001 f97e 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013dfc:	f001 f964 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e00:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	689b      	ldr	r3, [r3, #8]
 8013e06:	b2db      	uxtb	r3, r3
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3710      	adds	r7, #16
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8013e1a:	f001 f9ab 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013e1e:	f001 f947 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013e22:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2200      	movs	r2, #0
 8013e28:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8013e2c:	701a      	strb	r2, [r3, #0]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	705a      	strb	r2, [r3, #1]
 8013e32:	2200      	movs	r2, #0
 8013e34:	709a      	strb	r2, [r3, #2]
 8013e36:	2200      	movs	r2, #0
 8013e38:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	f042 0201 	orr.w	r2, r2, #1
 8013e42:	711a      	strb	r2, [r3, #4]
 8013e44:	2200      	movs	r2, #0
 8013e46:	715a      	strb	r2, [r3, #5]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	719a      	strb	r2, [r3, #6]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 8013e50:	683a      	ldr	r2, [r7, #0]
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8013e56:	f001 f94f 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013e5a:	f001 f935 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013e5e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	689b      	ldr	r3, [r3, #8]
 8013e64:	b2db      	uxtb	r3, r3
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3710      	adds	r7, #16
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}

08013e6e <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 8013e6e:	b580      	push	{r7, lr}
 8013e70:	b084      	sub	sp, #16
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8013e76:	f001 f97d 	bl	8015174 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8013e7a:	f001 f919 	bl	80150b0 <THREAD_Get_OTCmdPayloadBuffer>
 8013e7e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2200      	movs	r2, #0
 8013e84:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 8013e88:	701a      	strb	r2, [r3, #0]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	705a      	strb	r2, [r3, #1]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	709a      	strb	r2, [r3, #2]
 8013e92:	2200      	movs	r2, #0
 8013e94:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	711a      	strb	r2, [r3, #4]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	715a      	strb	r2, [r3, #5]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	719a      	strb	r2, [r3, #6]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8013ea8:	f001 f926 	bl	80150f8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8013eac:	f001 f90c 	bl	80150c8 <THREAD_Get_OTCmdRspPayloadBuffer>
 8013eb0:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	689b      	ldr	r3, [r3, #8]
 8013eb6:	b2db      	uxtb	r3, r3
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3710      	adds	r7, #16
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8013ec4:	f001 fbda 	bl	801567c <HW_IPCC_Enable>

  return;
 8013ec8:	bf00      	nop
}
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <TL_Init>:


void TL_Init( void )
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8013ed0:	4b0f      	ldr	r3, [pc, #60]	; (8013f10 <TL_Init+0x44>)
 8013ed2:	4a10      	ldr	r2, [pc, #64]	; (8013f14 <TL_Init+0x48>)
 8013ed4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8013ed6:	4b0e      	ldr	r3, [pc, #56]	; (8013f10 <TL_Init+0x44>)
 8013ed8:	4a0f      	ldr	r2, [pc, #60]	; (8013f18 <TL_Init+0x4c>)
 8013eda:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013edc:	4b0c      	ldr	r3, [pc, #48]	; (8013f10 <TL_Init+0x44>)
 8013ede:	4a0f      	ldr	r2, [pc, #60]	; (8013f1c <TL_Init+0x50>)
 8013ee0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013ee2:	4b0b      	ldr	r3, [pc, #44]	; (8013f10 <TL_Init+0x44>)
 8013ee4:	4a0e      	ldr	r2, [pc, #56]	; (8013f20 <TL_Init+0x54>)
 8013ee6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013ee8:	4b09      	ldr	r3, [pc, #36]	; (8013f10 <TL_Init+0x44>)
 8013eea:	4a0e      	ldr	r2, [pc, #56]	; (8013f24 <TL_Init+0x58>)
 8013eec:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013eee:	4b08      	ldr	r3, [pc, #32]	; (8013f10 <TL_Init+0x44>)
 8013ef0:	4a0d      	ldr	r2, [pc, #52]	; (8013f28 <TL_Init+0x5c>)
 8013ef2:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8013ef4:	4b06      	ldr	r3, [pc, #24]	; (8013f10 <TL_Init+0x44>)
 8013ef6:	4a0d      	ldr	r2, [pc, #52]	; (8013f2c <TL_Init+0x60>)
 8013ef8:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013efa:	4b05      	ldr	r3, [pc, #20]	; (8013f10 <TL_Init+0x44>)
 8013efc:	4a0c      	ldr	r2, [pc, #48]	; (8013f30 <TL_Init+0x64>)
 8013efe:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8013f00:	4b03      	ldr	r3, [pc, #12]	; (8013f10 <TL_Init+0x44>)
 8013f02:	4a0c      	ldr	r2, [pc, #48]	; (8013f34 <TL_Init+0x68>)
 8013f04:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013f06:	f001 fbc9 	bl	801569c <HW_IPCC_Init>

  return;
 8013f0a:	bf00      	nop
}
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	20030000 	.word	0x20030000
 8013f14:	20030024 	.word	0x20030024
 8013f18:	20030044 	.word	0x20030044
 8013f1c:	20030054 	.word	0x20030054
 8013f20:	20030060 	.word	0x20030060
 8013f24:	20030068 	.word	0x20030068
 8013f28:	20030070 	.word	0x20030070
 8013f2c:	2003008c 	.word	0x2003008c
 8013f30:	20030090 	.word	0x20030090
 8013f34:	2003009c 	.word	0x2003009c

08013f38 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8013f3e:	e009      	b.n	8013f54 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8013f40:	1d3b      	adds	r3, r7, #4
 8013f42:	4619      	mov	r1, r3
 8013f44:	4808      	ldr	r0, [pc, #32]	; (8013f68 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013f46:	f7ff feb8 	bl	8013cba <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8013f4a:	4b08      	ldr	r3, [pc, #32]	; (8013f6c <HW_IPCC_BLE_RxEvtNot+0x34>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	4610      	mov	r0, r2
 8013f52:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013f54:	4804      	ldr	r0, [pc, #16]	; (8013f68 <HW_IPCC_BLE_RxEvtNot+0x30>)
 8013f56:	f7ff fe29 	bl	8013bac <LST_is_empty>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d0ef      	beq.n	8013f40 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8013f60:	bf00      	nop
}
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}
 8013f68:	20030828 	.word	0x20030828
 8013f6c:	200274a0 	.word	0x200274a0

08013f70 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013f74:	4b02      	ldr	r3, [pc, #8]	; (8013f80 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4798      	blx	r3

  return;
 8013f7a:	bf00      	nop
}
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	200274a4 	.word	0x200274a4

08013f84 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8013f90:	480d      	ldr	r0, [pc, #52]	; (8013fc8 <TL_SYS_Init+0x44>)
 8013f92:	f7ff fdfb 	bl	8013b8c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8013f96:	4b0d      	ldr	r3, [pc, #52]	; (8013fcc <TL_SYS_Init+0x48>)
 8013f98:	68db      	ldr	r3, [r3, #12]
 8013f9a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	689a      	ldr	r2, [r3, #8]
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	4a08      	ldr	r2, [pc, #32]	; (8013fc8 <TL_SYS_Init+0x44>)
 8013fa8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8013faa:	f001 fba5 	bl	80156f8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	4a07      	ldr	r2, [pc, #28]	; (8013fd0 <TL_SYS_Init+0x4c>)
 8013fb4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	4a06      	ldr	r2, [pc, #24]	; (8013fd4 <TL_SYS_Init+0x50>)
 8013fbc:	6013      	str	r3, [r2, #0]

  return 0;
 8013fbe:	2300      	movs	r3, #0
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	20030830 	.word	0x20030830
 8013fcc:	20030000 	.word	0x20030000
 8013fd0:	200274a8 	.word	0x200274a8
 8013fd4:	200274ac 	.word	0x200274ac

08013fd8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b082      	sub	sp, #8
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013fe4:	4b05      	ldr	r3, [pc, #20]	; (8013ffc <TL_SYS_SendCmd+0x24>)
 8013fe6:	68db      	ldr	r3, [r3, #12]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	2210      	movs	r2, #16
 8013fec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8013fee:	f001 fb8d 	bl	801570c <HW_IPCC_SYS_SendCmd>

  return 0;
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	20030000 	.word	0x20030000

08014000 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8014004:	4b04      	ldr	r3, [pc, #16]	; (8014018 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	4a04      	ldr	r2, [pc, #16]	; (801401c <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 801400a:	68d2      	ldr	r2, [r2, #12]
 801400c:	6812      	ldr	r2, [r2, #0]
 801400e:	4610      	mov	r0, r2
 8014010:	4798      	blx	r3

  return;
 8014012:	bf00      	nop
}
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	200274a8 	.word	0x200274a8
 801401c:	20030000 	.word	0x20030000

08014020 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014026:	e009      	b.n	801403c <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8014028:	1d3b      	adds	r3, r7, #4
 801402a:	4619      	mov	r1, r3
 801402c:	4808      	ldr	r0, [pc, #32]	; (8014050 <HW_IPCC_SYS_EvtNot+0x30>)
 801402e:	f7ff fe44 	bl	8013cba <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8014032:	4b08      	ldr	r3, [pc, #32]	; (8014054 <HW_IPCC_SYS_EvtNot+0x34>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	4610      	mov	r0, r2
 801403a:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801403c:	4804      	ldr	r0, [pc, #16]	; (8014050 <HW_IPCC_SYS_EvtNot+0x30>)
 801403e:	f7ff fdb5 	bl	8013bac <LST_is_empty>
 8014042:	4603      	mov	r3, r0
 8014044:	2b00      	cmp	r3, #0
 8014046:	d0ef      	beq.n	8014028 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014048:	bf00      	nop
}
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}
 8014050:	20030830 	.word	0x20030830
 8014054:	200274ac 	.word	0x200274ac

08014058 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8014060:	4b0a      	ldr	r3, [pc, #40]	; (801408c <TL_THREAD_Init+0x34>)
 8014062:	689b      	ldr	r3, [r3, #8]
 8014064:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	685a      	ldr	r2, [r3, #4]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	689a      	ldr	r2, [r3, #8]
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 801407e:	f001 fb6b 	bl	8015758 <HW_IPCC_THREAD_Init>

  return;
 8014082:	bf00      	nop
}
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	20030000 	.word	0x20030000

08014090 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8014094:	4b04      	ldr	r3, [pc, #16]	; (80140a8 <TL_OT_SendCmd+0x18>)
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	689b      	ldr	r3, [r3, #8]
 801409a:	2208      	movs	r2, #8
 801409c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 801409e:	f001 fb69 	bl	8015774 <HW_IPCC_OT_SendCmd>

  return;
 80140a2:	bf00      	nop
}
 80140a4:	bd80      	pop	{r7, pc}
 80140a6:	bf00      	nop
 80140a8:	20030000 	.word	0x20030000

080140ac <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80140b0:	4b04      	ldr	r3, [pc, #16]	; (80140c4 <TL_CLI_SendCmd+0x18>)
 80140b2:	689b      	ldr	r3, [r3, #8]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	220a      	movs	r2, #10
 80140b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80140ba:	f001 fb69 	bl	8015790 <HW_IPCC_CLI_SendCmd>

  return;
 80140be:	bf00      	nop
}
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	20030000 	.word	0x20030000

080140c8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140cc:	4b04      	ldr	r3, [pc, #16]	; (80140e0 <TL_THREAD_SendAck+0x18>)
 80140ce:	689b      	ldr	r3, [r3, #8]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	220d      	movs	r2, #13
 80140d4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80140d6:	f001 fb65 	bl	80157a4 <HW_IPCC_THREAD_SendAck>

  return;
 80140da:	bf00      	nop
}
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	20030000 	.word	0x20030000

080140e4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140e8:	4b04      	ldr	r3, [pc, #16]	; (80140fc <TL_THREAD_CliSendAck+0x18>)
 80140ea:	689b      	ldr	r3, [r3, #8]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	220d      	movs	r2, #13
 80140f0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 80140f2:	f001 fb65 	bl	80157c0 <HW_IPCC_THREAD_CliSendAck>

  return;
 80140f6:	bf00      	nop
}
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	20030000 	.word	0x20030000

08014100 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8014104:	4b03      	ldr	r3, [pc, #12]	; (8014114 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8014106:	689b      	ldr	r3, [r3, #8]
 8014108:	689b      	ldr	r3, [r3, #8]
 801410a:	4618      	mov	r0, r3
 801410c:	f001 f818 	bl	8015140 <TL_OT_CmdEvtReceived>

  return;
 8014110:	bf00      	nop
}
 8014112:	bd80      	pop	{r7, pc}
 8014114:	20030000 	.word	0x20030000

08014118 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 801411c:	4b03      	ldr	r3, [pc, #12]	; (801412c <HW_IPCC_THREAD_EvtNot+0x14>)
 801411e:	689b      	ldr	r3, [r3, #8]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	4618      	mov	r0, r3
 8014124:	f001 f816 	bl	8015154 <TL_THREAD_NotReceived>

  return;
 8014128:	bf00      	nop
}
 801412a:	bd80      	pop	{r7, pc}
 801412c:	20030000 	.word	0x20030000

08014130 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8014130:	b580      	push	{r7, lr}
 8014132:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8014134:	4b03      	ldr	r3, [pc, #12]	; (8014144 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8014136:	689b      	ldr	r3, [r3, #8]
 8014138:	685b      	ldr	r3, [r3, #4]
 801413a:	4618      	mov	r0, r3
 801413c:	f001 f8b8 	bl	80152b0 <TL_THREAD_CliNotReceived>

  return;
 8014140:	bf00      	nop
}
 8014142:	bd80      	pop	{r7, pc}
 8014144:	20030000 	.word	0x20030000

08014148 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014150:	4817      	ldr	r0, [pc, #92]	; (80141b0 <TL_MM_Init+0x68>)
 8014152:	f7ff fd1b 	bl	8013b8c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014156:	4817      	ldr	r0, [pc, #92]	; (80141b4 <TL_MM_Init+0x6c>)
 8014158:	f7ff fd18 	bl	8013b8c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801415c:	4b16      	ldr	r3, [pc, #88]	; (80141b8 <TL_MM_Init+0x70>)
 801415e:	691b      	ldr	r3, [r3, #16]
 8014160:	4a16      	ldr	r2, [pc, #88]	; (80141bc <TL_MM_Init+0x74>)
 8014162:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014164:	4b15      	ldr	r3, [pc, #84]	; (80141bc <TL_MM_Init+0x74>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	687a      	ldr	r2, [r7, #4]
 801416a:	6892      	ldr	r2, [r2, #8]
 801416c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801416e:	4b13      	ldr	r3, [pc, #76]	; (80141bc <TL_MM_Init+0x74>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	68d2      	ldr	r2, [r2, #12]
 8014176:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014178:	4b10      	ldr	r3, [pc, #64]	; (80141bc <TL_MM_Init+0x74>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4a0c      	ldr	r2, [pc, #48]	; (80141b0 <TL_MM_Init+0x68>)
 801417e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014180:	4b0e      	ldr	r3, [pc, #56]	; (80141bc <TL_MM_Init+0x74>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	6812      	ldr	r2, [r2, #0]
 8014188:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801418a:	4b0c      	ldr	r3, [pc, #48]	; (80141bc <TL_MM_Init+0x74>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	6852      	ldr	r2, [r2, #4]
 8014192:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8014194:	4b09      	ldr	r3, [pc, #36]	; (80141bc <TL_MM_Init+0x74>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	6912      	ldr	r2, [r2, #16]
 801419c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801419e:	4b07      	ldr	r3, [pc, #28]	; (80141bc <TL_MM_Init+0x74>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	6952      	ldr	r2, [r2, #20]
 80141a6:	619a      	str	r2, [r3, #24]

  return;
 80141a8:	bf00      	nop
}
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	200300a8 	.word	0x200300a8
 80141b4:	20027498 	.word	0x20027498
 80141b8:	20030000 	.word	0x20030000
 80141bc:	200274b0 	.word	0x200274b0

080141c0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80141c8:	6879      	ldr	r1, [r7, #4]
 80141ca:	4805      	ldr	r0, [pc, #20]	; (80141e0 <TL_MM_EvtDone+0x20>)
 80141cc:	f7ff fd32 	bl	8013c34 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80141d0:	4804      	ldr	r0, [pc, #16]	; (80141e4 <TL_MM_EvtDone+0x24>)
 80141d2:	f001 fb27 	bl	8015824 <HW_IPCC_MM_SendFreeBuf>

  return;
 80141d6:	bf00      	nop
}
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	20027498 	.word	0x20027498
 80141e4:	080141e9 	.word	0x080141e9

080141e8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80141ee:	e00c      	b.n	801420a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80141f0:	1d3b      	adds	r3, r7, #4
 80141f2:	4619      	mov	r1, r3
 80141f4:	480a      	ldr	r0, [pc, #40]	; (8014220 <SendFreeBuf+0x38>)
 80141f6:	f7ff fd60 	bl	8013cba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80141fa:	4b0a      	ldr	r3, [pc, #40]	; (8014224 <SendFreeBuf+0x3c>)
 80141fc:	691b      	ldr	r3, [r3, #16]
 80141fe:	691b      	ldr	r3, [r3, #16]
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	4611      	mov	r1, r2
 8014204:	4618      	mov	r0, r3
 8014206:	f7ff fd15 	bl	8013c34 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801420a:	4805      	ldr	r0, [pc, #20]	; (8014220 <SendFreeBuf+0x38>)
 801420c:	f7ff fcce 	bl	8013bac <LST_is_empty>
 8014210:	4603      	mov	r3, r0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d0ec      	beq.n	80141f0 <SendFreeBuf+0x8>
  }

  return;
 8014216:	bf00      	nop
}
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	20027498 	.word	0x20027498
 8014224:	20030000 	.word	0x20030000

08014228 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8014228:	b580      	push	{r7, lr}
 801422a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801422c:	4805      	ldr	r0, [pc, #20]	; (8014244 <TL_TRACES_Init+0x1c>)
 801422e:	f7ff fcad 	bl	8013b8c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8014232:	4b05      	ldr	r3, [pc, #20]	; (8014248 <TL_TRACES_Init+0x20>)
 8014234:	695b      	ldr	r3, [r3, #20]
 8014236:	4a03      	ldr	r2, [pc, #12]	; (8014244 <TL_TRACES_Init+0x1c>)
 8014238:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801423a:	f001 fb29 	bl	8015890 <HW_IPCC_TRACES_Init>

  return;
 801423e:	bf00      	nop
}
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	200300b0 	.word	0x200300b0
 8014248:	20030000 	.word	0x20030000

0801424c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014252:	e008      	b.n	8014266 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8014254:	1d3b      	adds	r3, r7, #4
 8014256:	4619      	mov	r1, r3
 8014258:	4808      	ldr	r0, [pc, #32]	; (801427c <HW_IPCC_TRACES_EvtNot+0x30>)
 801425a:	f7ff fd2e 	bl	8013cba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4618      	mov	r0, r3
 8014262:	f7ec ffd9 	bl	8001218 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014266:	4805      	ldr	r0, [pc, #20]	; (801427c <HW_IPCC_TRACES_EvtNot+0x30>)
 8014268:	f7ff fca0 	bl	8013bac <LST_is_empty>
 801426c:	4603      	mov	r3, r0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d0f0      	beq.n	8014254 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8014272:	bf00      	nop
}
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	200300b0 	.word	0x200300b0

08014280 <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8014286:	f000 fa21 	bl	80146cc <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 801428a:	480e      	ldr	r0, [pc, #56]	; (80142c4 <APP_THREAD_Init+0x44>)
 801428c:	f000 ff00 	bl	8015090 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8014290:	2101      	movs	r1, #1
 8014292:	2002      	movs	r0, #2
 8014294:	f001 fb24 	bl	80158e0 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8014298:	f000 fff2 	bl	8015280 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 801429c:	f000 ffde 	bl	801525c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 80142a0:	f7ff fa89 	bl	80137b6 <SHCI_C2_THREAD_Init>
 80142a4:	4603      	mov	r3, r0
 80142a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 80142a8:	4a07      	ldr	r2, [pc, #28]	; (80142c8 <APP_THREAD_Init+0x48>)
 80142aa:	2100      	movs	r1, #0
 80142ac:	4807      	ldr	r0, [pc, #28]	; (80142cc <APP_THREAD_Init+0x4c>)
 80142ae:	f7f9 fed7 	bl	800e060 <osThreadNew>
 80142b2:	4602      	mov	r2, r0
 80142b4:	4b06      	ldr	r3, [pc, #24]	; (80142d0 <APP_THREAD_Init+0x50>)
 80142b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 80142b8:	f000 f892 	bl	80143e0 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 80142bc:	bf00      	nop
 80142be:	3708      	adds	r7, #8
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	20030838 	.word	0x20030838
 80142c8:	08017954 	.word	0x08017954
 80142cc:	08014789 	.word	0x08014789
 80142d0:	200275c8 	.word	0x200275c8

080142d4 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2b1a      	cmp	r3, #26
 80142e2:	d861      	bhi.n	80143a8 <APP_THREAD_Error+0xd4>
 80142e4:	a201      	add	r2, pc, #4	; (adr r2, 80142ec <APP_THREAD_Error+0x18>)
 80142e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142ea:	bf00      	nop
 80142ec:	08014359 	.word	0x08014359
 80142f0:	08014363 	.word	0x08014363
 80142f4:	0801436d 	.word	0x0801436d
 80142f8:	08014377 	.word	0x08014377
 80142fc:	08014381 	.word	0x08014381
 8014300:	0801438b 	.word	0x0801438b
 8014304:	08014395 	.word	0x08014395
 8014308:	080143a9 	.word	0x080143a9
 801430c:	080143a9 	.word	0x080143a9
 8014310:	080143a9 	.word	0x080143a9
 8014314:	080143a9 	.word	0x080143a9
 8014318:	080143a9 	.word	0x080143a9
 801431c:	080143a9 	.word	0x080143a9
 8014320:	080143a9 	.word	0x080143a9
 8014324:	080143a9 	.word	0x080143a9
 8014328:	080143a9 	.word	0x080143a9
 801432c:	080143a9 	.word	0x080143a9
 8014330:	080143a9 	.word	0x080143a9
 8014334:	080143a9 	.word	0x080143a9
 8014338:	080143a9 	.word	0x080143a9
 801433c:	080143a9 	.word	0x080143a9
 8014340:	080143a9 	.word	0x080143a9
 8014344:	080143a9 	.word	0x080143a9
 8014348:	080143a9 	.word	0x080143a9
 801434c:	080143a9 	.word	0x080143a9
 8014350:	080143a9 	.word	0x080143a9
 8014354:	0801439f 	.word	0x0801439f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8014358:	6839      	ldr	r1, [r7, #0]
 801435a:	4818      	ldr	r0, [pc, #96]	; (80143bc <APP_THREAD_Error+0xe8>)
 801435c:	f000 f9aa 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 8014360:	e027      	b.n	80143b2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	4816      	ldr	r0, [pc, #88]	; (80143c0 <APP_THREAD_Error+0xec>)
 8014366:	f000 f9a5 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 801436a:	e022      	b.n	80143b2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 801436c:	6839      	ldr	r1, [r7, #0]
 801436e:	4815      	ldr	r0, [pc, #84]	; (80143c4 <APP_THREAD_Error+0xf0>)
 8014370:	f000 f9a0 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 8014374:	e01d      	b.n	80143b2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8014376:	6839      	ldr	r1, [r7, #0]
 8014378:	4813      	ldr	r0, [pc, #76]	; (80143c8 <APP_THREAD_Error+0xf4>)
 801437a:	f000 f99b 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 801437e:	e018      	b.n	80143b2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8014380:	6839      	ldr	r1, [r7, #0]
 8014382:	4812      	ldr	r0, [pc, #72]	; (80143cc <APP_THREAD_Error+0xf8>)
 8014384:	f000 f996 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 8014388:	e013      	b.n	80143b2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 801438a:	6839      	ldr	r1, [r7, #0]
 801438c:	4810      	ldr	r0, [pc, #64]	; (80143d0 <APP_THREAD_Error+0xfc>)
 801438e:	f000 f991 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 8014392:	e00e      	b.n	80143b2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8014394:	6839      	ldr	r1, [r7, #0]
 8014396:	480f      	ldr	r0, [pc, #60]	; (80143d4 <APP_THREAD_Error+0x100>)
 8014398:	f000 f98c 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 801439c:	e009      	b.n	80143b2 <APP_THREAD_Error+0xde>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801439e:	6839      	ldr	r1, [r7, #0]
 80143a0:	480d      	ldr	r0, [pc, #52]	; (80143d8 <APP_THREAD_Error+0x104>)
 80143a2:	f000 f987 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 80143a6:	e004      	b.n	80143b2 <APP_THREAD_Error+0xde>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 80143a8:	2100      	movs	r1, #0
 80143aa:	480c      	ldr	r0, [pc, #48]	; (80143dc <APP_THREAD_Error+0x108>)
 80143ac:	f000 f982 	bl	80146b4 <APP_THREAD_TraceError>
    break;
 80143b0:	bf00      	nop
  }
}
 80143b2:	bf00      	nop
 80143b4:	3708      	adds	r7, #8
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	08017340 	.word	0x08017340
 80143c0:	08017364 	.word	0x08017364
 80143c4:	08017388 	.word	0x08017388
 80143c8:	080173a8 	.word	0x080173a8
 80143cc:	080173c8 	.word	0x080173c8
 80143d0:	080173e8 	.word	0x080173e8
 80143d4:	08017404 	.word	0x08017404
 80143d8:	08017430 	.word	0x08017430
 80143dc:	08017454 	.word	0x08017454

080143e0 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80143e0:	b590      	push	{r4, r7, lr}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 80143e6:	2000      	movs	r0, #0
 80143e8:	f7fe fdf2 	bl	8012fd0 <otInstanceErasePersistentInfo>
 80143ec:	4603      	mov	r3, r0
 80143ee:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80143f0:	79fb      	ldrb	r3, [r7, #7]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d004      	beq.n	8014400 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 80143f6:	79fb      	ldrb	r3, [r7, #7]
 80143f8:	4619      	mov	r1, r3
 80143fa:	2006      	movs	r0, #6
 80143fc:	f7ff ff6a 	bl	80142d4 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8014400:	2000      	movs	r0, #0
 8014402:	f7fe fd88 	bl	8012f16 <otInstanceFinalize>
  otInstanceInitSingle();
 8014406:	f7fe fd5f 	bl	8012ec8 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 801440a:	2200      	movs	r2, #0
 801440c:	497b      	ldr	r1, [pc, #492]	; (80145fc <APP_THREAD_DeviceConfig+0x21c>)
 801440e:	2000      	movs	r0, #0
 8014410:	f7fe fda8 	bl	8012f64 <otSetStateChangedCallback>
 8014414:	4603      	mov	r3, r0
 8014416:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014418:	79fb      	ldrb	r3, [r7, #7]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d004      	beq.n	8014428 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 801441e:	79fb      	ldrb	r3, [r7, #7]
 8014420:	4619      	mov	r1, r3
 8014422:	2001      	movs	r0, #1
 8014424:	f7ff ff56 	bl	80142d4 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8014428:	2117      	movs	r1, #23
 801442a:	2000      	movs	r0, #0
 801442c:	f7fe fe91 	bl	8013152 <otLinkSetChannel>
 8014430:	4603      	mov	r3, r0
 8014432:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014434:	79fb      	ldrb	r3, [r7, #7]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d004      	beq.n	8014444 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 801443a:	79fb      	ldrb	r3, [r7, #7]
 801443c:	4619      	mov	r1, r3
 801443e:	2002      	movs	r0, #2
 8014440:	f7ff ff48 	bl	80142d4 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8014444:	f241 2134 	movw	r1, #4660	; 0x1234
 8014448:	2000      	movs	r0, #0
 801444a:	f7fe feb2 	bl	80131b2 <otLinkSetPanId>
 801444e:	4603      	mov	r3, r0
 8014450:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014452:	79fb      	ldrb	r3, [r7, #7]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d004      	beq.n	8014462 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8014458:	79fb      	ldrb	r3, [r7, #7]
 801445a:	4619      	mov	r1, r3
 801445c:	2003      	movs	r0, #3
 801445e:	f7ff ff39 	bl	80142d4 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8014462:	2101      	movs	r1, #1
 8014464:	2000      	movs	r0, #0
 8014466:	f7fe fddc 	bl	8013022 <otIp6SetEnabled>
 801446a:	4603      	mov	r3, r0
 801446c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801446e:	79fb      	ldrb	r3, [r7, #7]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d004      	beq.n	801447e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8014474:	79fb      	ldrb	r3, [r7, #7]
 8014476:	4619      	mov	r1, r3
 8014478:	2004      	movs	r0, #4
 801447a:	f7ff ff2b 	bl	80142d4 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801447e:	2101      	movs	r1, #1
 8014480:	2000      	movs	r0, #0
 8014482:	f7ff fc37 	bl	8013cf4 <otThreadSetEnabled>
 8014486:	4603      	mov	r3, r0
 8014488:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801448a:	79fb      	ldrb	r3, [r7, #7]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d004      	beq.n	801449a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014490:	79fb      	ldrb	r3, [r7, #7]
 8014492:	4619      	mov	r1, r3
 8014494:	2005      	movs	r0, #5
 8014496:	f7ff ff1d 	bl	80142d4 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
	error = otThreadSetEnabled(NULL, false);
 801449a:	2100      	movs	r1, #0
 801449c:	2000      	movs	r0, #0
 801449e:	f7ff fc29 	bl	8013cf4 <otThreadSetEnabled>
 80144a2:	4603      	mov	r3, r0
 80144a4:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80144a6:	79fb      	ldrb	r3, [r7, #7]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d004      	beq.n	80144b6 <APP_THREAD_DeviceConfig+0xd6>
		APP_THREAD_Error(ERR_THREAD_START, error);
 80144ac:	79fb      	ldrb	r3, [r7, #7]
 80144ae:	4619      	mov	r1, r3
 80144b0:	2005      	movs	r0, #5
 80144b2:	f7ff ff0f 	bl	80142d4 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, false);
 80144b6:	2100      	movs	r1, #0
 80144b8:	2000      	movs	r0, #0
 80144ba:	f7fe fdb2 	bl	8013022 <otIp6SetEnabled>
 80144be:	4603      	mov	r3, r0
 80144c0:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80144c2:	79fb      	ldrb	r3, [r7, #7]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d004      	beq.n	80144d2 <APP_THREAD_DeviceConfig+0xf2>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 80144c8:	79fb      	ldrb	r3, [r7, #7]
 80144ca:	4619      	mov	r1, r3
 80144cc:	2004      	movs	r0, #4
 80144ce:	f7ff ff01 	bl	80142d4 <APP_THREAD_Error>
	}

	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 80144d2:	2106      	movs	r1, #6
 80144d4:	2000      	movs	r0, #0
 80144d6:	f7ff f93b 	bl	8013750 <otPlatRadioSetTransmitPower>
 80144da:	4603      	mov	r3, r0
 80144dc:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 80144de:	79fb      	ldrb	r3, [r7, #7]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d004      	beq.n	80144ee <APP_THREAD_DeviceConfig+0x10e>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80144e4:	79fb      	ldrb	r3, [r7, #7]
 80144e6:	4619      	mov	r1, r3
 80144e8:	2002      	movs	r0, #2
 80144ea:	f7ff fef3 	bl	80142d4 <APP_THREAD_Error>
	}

	otChildSupervisionSetCheckTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 80144ee:	2103      	movs	r1, #3
 80144f0:	2000      	movs	r0, #0
 80144f2:	f7fe f97f 	bl	80127f4 <otChildSupervisionSetCheckTimeout>
	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);
 80144f6:	2102      	movs	r1, #2
 80144f8:	2000      	movs	r0, #0
 80144fa:	f7fe f94c 	bl	8012796 <otChildSupervisionSetInterval>

//   error = otIp6AddressFromString("ff12::1", &multicastAddr);
//   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

	error = otThreadSetMasterKey(NULL, &masterKey);
 80144fe:	4940      	ldr	r1, [pc, #256]	; (8014600 <APP_THREAD_DeviceConfig+0x220>)
 8014500:	2000      	movs	r0, #0
 8014502:	f7ff fc56 	bl	8013db2 <otThreadSetMasterKey>
 8014506:	4603      	mov	r3, r0
 8014508:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801450a:	79fb      	ldrb	r3, [r7, #7]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d004      	beq.n	801451a <APP_THREAD_DeviceConfig+0x13a>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014510:	79fb      	ldrb	r3, [r7, #7]
 8014512:	4619      	mov	r1, r3
 8014514:	2002      	movs	r0, #2
 8014516:	f7ff fedd 	bl	80142d4 <APP_THREAD_Error>
	}

	error = otThreadSetNetworkName(NULL, networkName);
 801451a:	493a      	ldr	r1, [pc, #232]	; (8014604 <APP_THREAD_DeviceConfig+0x224>)
 801451c:	2000      	movs	r0, #0
 801451e:	f7ff fc77 	bl	8013e10 <otThreadSetNetworkName>
 8014522:	4603      	mov	r3, r0
 8014524:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8014526:	79fb      	ldrb	r3, [r7, #7]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d004      	beq.n	8014536 <APP_THREAD_DeviceConfig+0x156>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 801452c:	79fb      	ldrb	r3, [r7, #7]
 801452e:	4619      	mov	r1, r3
 8014530:	2002      	movs	r0, #2
 8014532:	f7ff fecf 	bl	80142d4 <APP_THREAD_Error>
	}
	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 8014536:	4934      	ldr	r1, [pc, #208]	; (8014608 <APP_THREAD_DeviceConfig+0x228>)
 8014538:	2000      	movs	r0, #0
 801453a:	f7ff fc0b 	bl	8013d54 <otThreadSetExtendedPanId>
 801453e:	4603      	mov	r3, r0
 8014540:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 8014542:	79fb      	ldrb	r3, [r7, #7]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d004      	beq.n	8014552 <APP_THREAD_DeviceConfig+0x172>
		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014548:	79fb      	ldrb	r3, [r7, #7]
 801454a:	4619      	mov	r1, r3
 801454c:	2002      	movs	r0, #2
 801454e:	f7ff fec1 	bl	80142d4 <APP_THREAD_Error>
	}

	error = otIp6SetEnabled(NULL, true);
 8014552:	2101      	movs	r1, #1
 8014554:	2000      	movs	r0, #0
 8014556:	f7fe fd64 	bl	8013022 <otIp6SetEnabled>
 801455a:	4603      	mov	r3, r0
 801455c:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801455e:	79fb      	ldrb	r3, [r7, #7]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d004      	beq.n	801456e <APP_THREAD_DeviceConfig+0x18e>
		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8014564:	79fb      	ldrb	r3, [r7, #7]
 8014566:	4619      	mov	r1, r3
 8014568:	2004      	movs	r0, #4
 801456a:	f7ff feb3 	bl	80142d4 <APP_THREAD_Error>
	}

	error = otThreadSetEnabled(NULL, true);
 801456e:	2101      	movs	r1, #1
 8014570:	2000      	movs	r0, #0
 8014572:	f7ff fbbf 	bl	8013cf4 <otThreadSetEnabled>
 8014576:	4603      	mov	r3, r0
 8014578:	71fb      	strb	r3, [r7, #7]
	if (error != OT_ERROR_NONE) {
 801457a:	79fb      	ldrb	r3, [r7, #7]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d004      	beq.n	801458a <APP_THREAD_DeviceConfig+0x1aa>
		APP_THREAD_Error(ERR_THREAD_START, error);
 8014580:	79fb      	ldrb	r3, [r7, #7]
 8014582:	4619      	mov	r1, r3
 8014584:	2005      	movs	r0, #5
 8014586:	f7ff fea5 	bl	80142d4 <APP_THREAD_Error>
	}

	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 801458a:	f241 6133 	movw	r1, #5683	; 0x1633
 801458e:	2000      	movs	r0, #0
 8014590:	f7fe fc08 	bl	8012da4 <otCoapStart>
 8014594:	4603      	mov	r3, r0
 8014596:	71fb      	strb	r3, [r7, #7]
	//  error = otCoapAddResource(NULL, &OT_Light_Ressource);
	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
 8014598:	491c      	ldr	r1, [pc, #112]	; (801460c <APP_THREAD_DeviceConfig+0x22c>)
 801459a:	2000      	movs	r0, #0
 801459c:	f7fe fc32 	bl	8012e04 <otCoapAddResource>
 80145a0:	4603      	mov	r3, r0
 80145a2:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
 80145a4:	491a      	ldr	r1, [pc, #104]	; (8014610 <APP_THREAD_DeviceConfig+0x230>)
 80145a6:	2000      	movs	r0, #0
 80145a8:	f7fe fc2c 	bl	8012e04 <otCoapAddResource>
 80145ac:	4603      	mov	r3, r0
 80145ae:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
 80145b0:	4918      	ldr	r1, [pc, #96]	; (8014614 <APP_THREAD_DeviceConfig+0x234>)
 80145b2:	2000      	movs	r0, #0
 80145b4:	f7fe fc26 	bl	8012e04 <otCoapAddResource>
 80145b8:	4603      	mov	r3, r0
 80145ba:	71fb      	strb	r3, [r7, #7]
	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);
 80145bc:	4916      	ldr	r1, [pc, #88]	; (8014618 <APP_THREAD_DeviceConfig+0x238>)
 80145be:	2000      	movs	r0, #0
 80145c0:	f7fe fc20 	bl	8012e04 <otCoapAddResource>
 80145c4:	4603      	mov	r3, r0
 80145c6:	71fb      	strb	r3, [r7, #7]
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaProvisioning);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaParameters);
	  error = otCoapAddResource(NULL, &OT_RessourceFuotaSend);
#endif
#ifndef DONGLE_CODE
    error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
 80145c8:	4914      	ldr	r1, [pc, #80]	; (801461c <APP_THREAD_DeviceConfig+0x23c>)
 80145ca:	2000      	movs	r0, #0
 80145cc:	f7fe fc1a 	bl	8012e04 <otCoapAddResource>
 80145d0:	4603      	mov	r3, r0
 80145d2:	71fb      	strb	r3, [r7, #7]
#endif
	// set default multicast address for border router
//    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
	otIp6AddressFromString("ff03::1", &multicastAddr);
 80145d4:	4912      	ldr	r1, [pc, #72]	; (8014620 <APP_THREAD_DeviceConfig+0x240>)
 80145d6:	4813      	ldr	r0, [pc, #76]	; (8014624 <APP_THREAD_DeviceConfig+0x244>)
 80145d8:	f7fe fd89 	bl	80130ee <otIp6AddressFromString>
	memcpy(&borderRouter.ipv6, &multicastAddr, sizeof(multicastAddr));
 80145dc:	4a12      	ldr	r2, [pc, #72]	; (8014628 <APP_THREAD_DeviceConfig+0x248>)
 80145de:	4b10      	ldr	r3, [pc, #64]	; (8014620 <APP_THREAD_DeviceConfig+0x240>)
 80145e0:	4614      	mov	r4, r2
 80145e2:	6818      	ldr	r0, [r3, #0]
 80145e4:	6859      	ldr	r1, [r3, #4]
 80145e6:	689a      	ldr	r2, [r3, #8]
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// set UID in local state variable
//	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
//	 = UID64_BASE;
	stm32UID(msgSendMyIP.uid);
 80145ec:	480f      	ldr	r0, [pc, #60]	; (801462c <APP_THREAD_DeviceConfig+0x24c>)
 80145ee:	f000 f8e5 	bl	80147bc <stm32UID>

  /* USER CODE END DEVICECONFIG */
}
 80145f2:	bf00      	nop
 80145f4:	370c      	adds	r7, #12
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd90      	pop	{r4, r7, pc}
 80145fa:	bf00      	nop
 80145fc:	08014631 	.word	0x08014631
 8014600:	080179cc 	.word	0x080179cc
 8014604:	080179e4 	.word	0x080179e4
 8014608:	080179dc 	.word	0x080179dc
 801460c:	20000088 	.word	0x20000088
 8014610:	20000098 	.word	0x20000098
 8014614:	200000a8 	.word	0x200000a8
 8014618:	200000b8 	.word	0x200000b8
 801461c:	200000c8 	.word	0x200000c8
 8014620:	20028644 	.word	0x20028644
 8014624:	08017464 	.word	0x08017464
 8014628:	20027698 	.word	0x20027698
 801462c:	200000f0 	.word	0x200000f0

08014630 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8014630:	b590      	push	{r4, r7, lr}
 8014632:	b083      	sub	sp, #12
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	f003 0304 	and.w	r3, r3, #4
 8014640:	2b00      	cmp	r3, #0
 8014642:	d02f      	beq.n	80146a4 <APP_THREAD_StateNotif+0x74>
  {
    switch (otThreadGetDeviceRole(NULL))
 8014644:	2000      	movs	r0, #0
 8014646:	f7ff fc12 	bl	8013e6e <otThreadGetDeviceRole>
 801464a:	4603      	mov	r3, r0
 801464c:	2b04      	cmp	r3, #4
 801464e:	d826      	bhi.n	801469e <APP_THREAD_StateNotif+0x6e>
 8014650:	a201      	add	r2, pc, #4	; (adr r2, 8014658 <APP_THREAD_StateNotif+0x28>)
 8014652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014656:	bf00      	nop
 8014658:	0801466d 	.word	0x0801466d
 801465c:	0801467d 	.word	0x0801467d
 8014660:	0801468d 	.word	0x0801468d
 8014664:	08014693 	.word	0x08014693
 8014668:	08014699 	.word	0x08014699
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
			borderRouter.epoch = 0;
 801466c:	4a10      	ldr	r2, [pc, #64]	; (80146b0 <APP_THREAD_StateNotif+0x80>)
 801466e:	f04f 0300 	mov.w	r3, #0
 8014672:	f04f 0400 	mov.w	r4, #0
 8014676:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 801467a:	e014      	b.n	80146a6 <APP_THREAD_StateNotif+0x76>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
			borderRouter.epoch = 0;
 801467c:	4a0c      	ldr	r2, [pc, #48]	; (80146b0 <APP_THREAD_StateNotif+0x80>)
 801467e:	f04f 0300 	mov.w	r3, #0
 8014682:	f04f 0400 	mov.w	r4, #0
 8014686:	e9c2 3404 	strd	r3, r4, [r2, #16]
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 801468a:	e00c      	b.n	80146a6 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_Off(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 801468c:	f000 f90a 	bl	80148a4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8014690:	e009      	b.n	80146a6 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_Off(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8014692:	f000 f907 	bl	80148a4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8014696:	e006      	b.n	80146a6 <APP_THREAD_StateNotif+0x76>
#ifdef DONGLE_CODE
			BSP_LED_On(LED_GREEN);
			BSP_LED_Off(LED_RED);
			BSP_LED_On(LED_BLUE);
#endif
			APP_THREAD_UpdateBorderRouter();
 8014698:	f000 f904 	bl	80148a4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 801469c:	e003      	b.n	80146a6 <APP_THREAD_StateNotif+0x76>
    default:
      /* USER CODE BEGIN DEFAULT */
			APP_THREAD_UpdateBorderRouter();
 801469e:	f000 f901 	bl	80148a4 <APP_THREAD_UpdateBorderRouter>
      /* USER CODE END DEFAULT */
      break;
 80146a2:	e000      	b.n	80146a6 <APP_THREAD_StateNotif+0x76>
    }
  }
 80146a4:	bf00      	nop
}
 80146a6:	bf00      	nop
 80146a8:	370c      	adds	r7, #12
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd90      	pop	{r4, r7, pc}
 80146ae:	bf00      	nop
 80146b0:	20027698 	.word	0x20027698

080146b4 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 80146b4:	b480      	push	{r7}
 80146b6:	b083      	sub	sp, #12
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 80146be:	bf00      	nop
 80146c0:	370c      	adds	r7, #12
 80146c2:	46bd      	mov	sp, r7
 80146c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c8:	4770      	bx	lr
	...

080146cc <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b088      	sub	sp, #32
 80146d0:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 80146d2:	1d3b      	adds	r3, r7, #4
 80146d4:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80146d6:	6978      	ldr	r0, [r7, #20]
 80146d8:	f7ff f89a 	bl	8013810 <SHCI_GetWirelessFwInfo>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d004      	beq.n	80146ec <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80146e2:	2101      	movs	r1, #1
 80146e4:	201a      	movs	r0, #26
 80146e6:	f7ff fdf5 	bl	80142d4 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80146ea:	e03d      	b.n	8014768 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 80146ec:	4a20      	ldr	r2, [pc, #128]	; (8014770 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80146ee:	2101      	movs	r1, #1
 80146f0:	2000      	movs	r0, #0
 80146f2:	f7f1 f929 	bl	8005948 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80146f6:	4a1f      	ldr	r2, [pc, #124]	; (8014774 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80146f8:	2101      	movs	r1, #1
 80146fa:	2000      	movs	r0, #0
 80146fc:	f7f1 f924 	bl	8005948 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	4619      	mov	r1, r3
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	785b      	ldrb	r3, [r3, #1]
 801470a:	461a      	mov	r2, r3
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	789b      	ldrb	r3, [r3, #2]
 8014710:	9301      	str	r3, [sp, #4]
 8014712:	9200      	str	r2, [sp, #0]
 8014714:	460b      	mov	r3, r1
 8014716:	4a18      	ldr	r2, [pc, #96]	; (8014778 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8014718:	2101      	movs	r1, #1
 801471a:	2000      	movs	r0, #0
 801471c:	f7f1 f914 	bl	8005948 <logApplication>
    switch(p_wireless_info->StackType)
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	7a5b      	ldrb	r3, [r3, #9]
 8014724:	2b11      	cmp	r3, #17
 8014726:	d009      	beq.n	801473c <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8014728:	2b50      	cmp	r3, #80	; 0x50
 801472a:	d00d      	beq.n	8014748 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 801472c:	2b10      	cmp	r3, #16
 801472e:	d111      	bne.n	8014754 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8014730:	4a12      	ldr	r2, [pc, #72]	; (801477c <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8014732:	2101      	movs	r1, #1
 8014734:	2000      	movs	r0, #0
 8014736:	f7f1 f907 	bl	8005948 <logApplication>
      break;
 801473a:	e010      	b.n	801475e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 801473c:	4a10      	ldr	r2, [pc, #64]	; (8014780 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 801473e:	2101      	movs	r1, #1
 8014740:	2000      	movs	r0, #0
 8014742:	f7f1 f901 	bl	8005948 <logApplication>
      break;
 8014746:	e00a      	b.n	801475e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8014748:	4a0e      	ldr	r2, [pc, #56]	; (8014784 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801474a:	2101      	movs	r1, #1
 801474c:	2000      	movs	r0, #0
 801474e:	f7f1 f8fb 	bl	8005948 <logApplication>
      break;
 8014752:	e004      	b.n	801475e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014754:	2101      	movs	r1, #1
 8014756:	201a      	movs	r0, #26
 8014758:	f7ff fdbc 	bl	80142d4 <APP_THREAD_Error>
      break;
 801475c:	bf00      	nop
    APP_DBG("**********************************************************");
 801475e:	4a04      	ldr	r2, [pc, #16]	; (8014770 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014760:	2101      	movs	r1, #1
 8014762:	2000      	movs	r0, #0
 8014764:	f7f1 f8f0 	bl	8005948 <logApplication>
}
 8014768:	bf00      	nop
 801476a:	3718      	adds	r7, #24
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	0801746c 	.word	0x0801746c
 8014774:	080174a8 	.word	0x080174a8
 8014778:	080174c4 	.word	0x080174c4
 801477c:	080174dc 	.word	0x080174dc
 8014780:	080174f4 	.word	0x080174f4
 8014784:	0801750c 	.word	0x0801750c

08014788 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014790:	f04f 32ff 	mov.w	r2, #4294967295
 8014794:	2101      	movs	r1, #1
 8014796:	2001      	movs	r0, #1
 8014798:	f7f9 fdc0 	bl	800e31c <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 801479c:	f000 fda2 	bl	80152e4 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80147a0:	e7f6      	b.n	8014790 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

080147a2 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 80147a2:	b580      	push	{r7, lr}
 80147a4:	b082      	sub	sp, #8
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80147aa:	f04f 32ff 	mov.w	r2, #4294967295
 80147ae:	2101      	movs	r1, #1
 80147b0:	2001      	movs	r0, #1
 80147b2:	f7f9 fdb3 	bl	800e31c <osThreadFlagsWait>
    Send_CLI_To_M0();
 80147b6:	f000 fd17 	bl	80151e8 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80147ba:	e7f6      	b.n	80147aa <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

080147bc <stm32UID>:
  }
}
#endif /* (CFG_FULL_LOW_POWER == 0) */

/* USER CODE BEGIN FREERTOS_WRAPPER_FUNCTIONS */
void stm32UID(uint8_t* uid) {
 80147bc:	b480      	push	{r7}
 80147be:	b085      	sub	sp, #20
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < 12; i++) {
 80147c4:	2300      	movs	r3, #0
 80147c6:	73fb      	strb	r3, [r7, #15]
 80147c8:	e00c      	b.n	80147e4 <stm32UID+0x28>
    uid[i] = *(volatile uint8_t *)(UID_BASE + i);
 80147ca:	7bfa      	ldrb	r2, [r7, #15]
 80147cc:	4b0a      	ldr	r3, [pc, #40]	; (80147f8 <stm32UID+0x3c>)
 80147ce:	4413      	add	r3, r2
 80147d0:	4619      	mov	r1, r3
 80147d2:	7bfb      	ldrb	r3, [r7, #15]
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	4413      	add	r3, r2
 80147d8:	780a      	ldrb	r2, [r1, #0]
 80147da:	b2d2      	uxtb	r2, r2
 80147dc:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 12; i++) {
 80147de:	7bfb      	ldrb	r3, [r7, #15]
 80147e0:	3301      	adds	r3, #1
 80147e2:	73fb      	strb	r3, [r7, #15]
 80147e4:	7bfb      	ldrb	r3, [r7, #15]
 80147e6:	2b0b      	cmp	r3, #11
 80147e8:	d9ef      	bls.n	80147ca <stm32UID+0xe>
    }
  }
 80147ea:	bf00      	nop
 80147ec:	3714      	adds	r7, #20
 80147ee:	46bd      	mov	sp, r7
 80147f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f4:	4770      	bx	lr
 80147f6:	bf00      	nop
 80147f8:	1fff7590 	.word	0x1fff7590

080147fc <APP_THREAD_DummyRespHandler>:
  return;
}
#endif

static void APP_THREAD_DummyRespHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 80147fc:	b480      	push	{r7}
 80147fe:	b085      	sub	sp, #20
 8014800:	af00      	add	r7, sp, #0
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
 8014808:	603b      	str	r3, [r7, #0]
	UNUSED(p_context);
	UNUSED(pHeader);
	UNUSED(pMessage);
	UNUSED(pMessageInfo);
	UNUSED(Result);
}
 801480a:	bf00      	nop
 801480c:	3714      	adds	r7, #20
 801480e:	46bd      	mov	sp, r7
 8014810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014814:	4770      	bx	lr
	...

08014818 <APP_THREAD_CoapRespHandler_UpdateBorderRouter>:

volatile uint16_t test_num;
static void APP_THREAD_CoapRespHandler_UpdateBorderRouter(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo, otError Result) {
 8014818:	b5b0      	push	{r4, r5, r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
 8014824:	70fb      	strb	r3, [r7, #3]

//	taskENTER_CRITICAL();
//	test_num = otMessageGetLength(pMessage);
//	test_num = otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal));

	if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8014826:	68b8      	ldr	r0, [r7, #8]
 8014828:	f7fe fd1e 	bl	8013268 <otMessageGetOffset>
 801482c:	4603      	mov	r3, r0
 801482e:	4619      	mov	r1, r3
 8014830:	2318      	movs	r3, #24
 8014832:	4a0e      	ldr	r2, [pc, #56]	; (801486c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8014834:	68b8      	ldr	r0, [r7, #8]
 8014836:	f7fe fd7c 	bl	8013332 <otMessageRead>
 801483a:	4603      	mov	r3, r0
 801483c:	2b18      	cmp	r3, #24
 801483e:	d110      	bne.n	8014862 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x4a>
			== sizeof(receivedSystemCal)) {

			// if successful, update border router state variable
			memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8014840:	4a0b      	ldr	r2, [pc, #44]	; (8014870 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8014842:	4b0a      	ldr	r3, [pc, #40]	; (801486c <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x54>)
 8014844:	4614      	mov	r4, r2
 8014846:	461d      	mov	r5, r3
 8014848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801484a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801484c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014850:	e884 0003 	stmia.w	r4, {r0, r1}

			// update the onboard RTC unix time
			updateRTC(borderRouter.epoch);
 8014854:	4b06      	ldr	r3, [pc, #24]	; (8014870 <APP_THREAD_CoapRespHandler_UpdateBorderRouter+0x58>)
 8014856:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801485a:	4618      	mov	r0, r3
 801485c:	4621      	mov	r1, r4
 801485e:	f000 f9af 	bl	8014bc0 <updateRTC>
	}
//	taskEXIT_CRITICAL();
}
 8014862:	bf00      	nop
 8014864:	3710      	adds	r7, #16
 8014866:	46bd      	mov	sp, r7
 8014868:	bdb0      	pop	{r4, r5, r7, pc}
 801486a:	bf00      	nop
 801486c:	200276b0 	.word	0x200276b0
 8014870:	20027698 	.word	0x20027698

08014874 <APP_THREAD_DummyReqHandler>:
 * @brief Dummy request handler
 * @param
 * @retval None
 */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014874:	b480      	push	{r7}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
 8014880:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 8014882:	4a06      	ldr	r2, [pc, #24]	; (801489c <APP_THREAD_DummyReqHandler+0x28>)
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 8014888:	4a05      	ldr	r2, [pc, #20]	; (80148a0 <APP_THREAD_DummyReqHandler+0x2c>)
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6013      	str	r3, [r2, #0]
}
 801488e:	bf00      	nop
 8014890:	3714      	adds	r7, #20
 8014892:	46bd      	mov	sp, r7
 8014894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014898:	4770      	bx	lr
 801489a:	bf00      	nop
 801489c:	20028600 	.word	0x20028600
 80148a0:	20028658 	.word	0x20028658

080148a4 <APP_THREAD_UpdateBorderRouter>:
//volatile otNetifMulticastAddress *test_addr;
//volatile otExtAddress *test_ext_addr;
//volatile otExtAddress test_1;
//volatile otExtAddress test_2;

void APP_THREAD_UpdateBorderRouter() {
 80148a4:	b580      	push	{r7, lr}
 80148a6:	af00      	add	r7, sp, #0

	// if border router IP is still multicast (ff03::1), attempt to sync
	if (otIp6IsAddressEqual(&multicastAddr, &borderRouter.ipv6)) {
 80148a8:	4906      	ldr	r1, [pc, #24]	; (80148c4 <APP_THREAD_UpdateBorderRouter+0x20>)
 80148aa:	4807      	ldr	r0, [pc, #28]	; (80148c8 <APP_THREAD_UpdateBorderRouter+0x24>)
 80148ac:	f7fe fbe9 	bl	8013082 <otIp6IsAddressEqual>
 80148b0:	4603      	mov	r3, r0
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d003      	beq.n	80148be <APP_THREAD_UpdateBorderRouter+0x1a>
		APP_THREAD_SyncWithBorderRouter();
 80148b6:	f000 f809 	bl	80148cc <APP_THREAD_SyncWithBorderRouter>
		APP_THREAD_SendMyInfo();
 80148ba:	f000 f81d 	bl	80148f8 <APP_THREAD_SendMyInfo>
	}

	// send IP to border router
	//APP_THREAD_SendMyInfo();
}
 80148be:	bf00      	nop
 80148c0:	bd80      	pop	{r7, pc}
 80148c2:	bf00      	nop
 80148c4:	20027698 	.word	0x20027698
 80148c8:	20028644 	.word	0x20028644

080148cc <APP_THREAD_SyncWithBorderRouter>:

// send a GET request to border router via multicast
void APP_THREAD_SyncWithBorderRouter() {
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b084      	sub	sp, #16
 80148d0:	af04      	add	r7, sp, #16
	APP_THREAD_SendCoapMsgForBorderSync(NULL, 0, &multicastAddr, borderSyncResource, NO_ACK, OT_COAP_CODE_GET, 1U);
 80148d2:	2301      	movs	r3, #1
 80148d4:	9302      	str	r3, [sp, #8]
 80148d6:	2301      	movs	r3, #1
 80148d8:	9301      	str	r3, [sp, #4]
 80148da:	2300      	movs	r3, #0
 80148dc:	9300      	str	r3, [sp, #0]
 80148de:	4b04      	ldr	r3, [pc, #16]	; (80148f0 <APP_THREAD_SyncWithBorderRouter+0x24>)
 80148e0:	4a04      	ldr	r2, [pc, #16]	; (80148f4 <APP_THREAD_SyncWithBorderRouter+0x28>)
 80148e2:	2100      	movs	r1, #0
 80148e4:	2000      	movs	r0, #0
 80148e6:	f000 fabf 	bl	8014e68 <APP_THREAD_SendCoapMsgForBorderSync>
}
 80148ea:	bf00      	nop
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	0801799c 	.word	0x0801799c
 80148f4:	20028644 	.word	0x20028644

080148f8 <APP_THREAD_SendMyInfo>:

void APP_THREAD_SendMyInfo() {
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af04      	add	r7, sp, #16
////	test_1 = test_ext_addr[0];
////	test_2 = &test_ext_addr;
//
//	error = otThreadGetNextNeighborInfo(NULL, &test_neighbor_iterator, &test_info_neighbor);
	// TODO: does this need an ACK
	APP_THREAD_SendCoapMsg(&msgSendMyIP, sizeof(msgSendMyIP), &borderRouter.ipv6, nodeInfoResource, REQUEST_ACK,
 80148fe:	2301      	movs	r3, #1
 8014900:	9302      	str	r3, [sp, #8]
 8014902:	2303      	movs	r3, #3
 8014904:	9301      	str	r3, [sp, #4]
 8014906:	2301      	movs	r3, #1
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	4b04      	ldr	r3, [pc, #16]	; (801491c <APP_THREAD_SendMyInfo+0x24>)
 801490c:	4a04      	ldr	r2, [pc, #16]	; (8014920 <APP_THREAD_SendMyInfo+0x28>)
 801490e:	2120      	movs	r1, #32
 8014910:	4804      	ldr	r0, [pc, #16]	; (8014924 <APP_THREAD_SendMyInfo+0x2c>)
 8014912:	f000 f9bf 	bl	8014c94 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);
//	APP_THREAD_SendCoapUnicastMsg(NULL, NULL, borderRouter.ipv6  , borderSyncResource, 1U);
}
 8014916:	bf00      	nop
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	080179bc 	.word	0x080179bc
 8014920:	20027698 	.word	0x20027698
 8014924:	200000d8 	.word	0x200000d8

08014928 <APP_THREAD_SendBorderMessage>:

void APP_THREAD_SendBorderMessage(void *packet, uint8_t len, char *resource) {
 8014928:	b580      	push	{r7, lr}
 801492a:	b088      	sub	sp, #32
 801492c:	af04      	add	r7, sp, #16
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	460b      	mov	r3, r1
 8014932:	607a      	str	r2, [r7, #4]
 8014934:	72fb      	strb	r3, [r7, #11]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(packet, len, &borderRouter.ipv6, resource, NO_ACK, OT_COAP_CODE_PUT, 1U);
 8014936:	7afb      	ldrb	r3, [r7, #11]
 8014938:	b299      	uxth	r1, r3
 801493a:	2301      	movs	r3, #1
 801493c:	9302      	str	r3, [sp, #8]
 801493e:	2303      	movs	r3, #3
 8014940:	9301      	str	r3, [sp, #4]
 8014942:	2300      	movs	r3, #0
 8014944:	9300      	str	r3, [sp, #0]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	4a03      	ldr	r2, [pc, #12]	; (8014958 <APP_THREAD_SendBorderMessage+0x30>)
 801494a:	68f8      	ldr	r0, [r7, #12]
 801494c:	f000 f9a2 	bl	8014c94 <APP_THREAD_SendCoapMsg>
}
 8014950:	bf00      	nop
 8014952:	3710      	adds	r7, #16
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}
 8014958:	20027698 	.word	0x20027698

0801495c <APP_THREAD_SendBorderPacket>:

void APP_THREAD_SendBorderPacket(struct LogPacket *sensorPacket) {
 801495c:	b580      	push	{r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af04      	add	r7, sp, #16
 8014962:	6078      	str	r0, [r7, #4]
//	APP_THREAD_SendCoapMsg(sensorPacket, borderRouter.ipv6, borderPacket, otCoapType type);
	APP_THREAD_SendCoapMsg(sensorPacket, sizeof(struct LogPacket), &borderRouter.ipv6, borderPacket, NO_ACK,
 8014964:	2301      	movs	r3, #1
 8014966:	9302      	str	r3, [sp, #8]
 8014968:	2303      	movs	r3, #3
 801496a:	9301      	str	r3, [sp, #4]
 801496c:	2300      	movs	r3, #0
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	4b04      	ldr	r3, [pc, #16]	; (8014984 <APP_THREAD_SendBorderPacket+0x28>)
 8014972:	4a05      	ldr	r2, [pc, #20]	; (8014988 <APP_THREAD_SendBorderPacket+0x2c>)
 8014974:	21cc      	movs	r1, #204	; 0xcc
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f000 f98c 	bl	8014c94 <APP_THREAD_SendCoapMsg>
			OT_COAP_CODE_PUT, 1U);

}
 801497c:	bf00      	nop
 801497e:	3708      	adds	r7, #8
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	080179ac 	.word	0x080179ac
 8014988:	20027698 	.word	0x20027698

0801498c <APP_THREAD_CoapLightsSimpleRequestHandler>:

static void APP_THREAD_CoapLightsSimpleRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
	do {

		// if get, send response with current log message
		if (otCoapHeaderGetType(pHeader) == OT_COAP_CODE_GET) {
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f7fe f8b6 	bl	8012b0a <otCoapHeaderGetType>
 801499e:	4603      	mov	r3, r0
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	d107      	bne.n	80149b4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x28>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, &lightsSimpleMessage, sizeof(lightsSimpleMessage));
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	b299      	uxth	r1, r3
 80149a8:	2304      	movs	r3, #4
 80149aa:	4a23      	ldr	r2, [pc, #140]	; (8014a38 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80149ac:	68f8      	ldr	r0, [r7, #12]
 80149ae:	f000 fb11 	bl	8014fd4 <APP_THREAD_SendDataResponse>
			break;
 80149b2:	e03d      	b.n	8014a30 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightsSimpleMessage, sizeof(lightsSimpleMessage))
 80149b4:	68b8      	ldr	r0, [r7, #8]
 80149b6:	f7fe fc57 	bl	8013268 <otMessageGetOffset>
 80149ba:	4603      	mov	r3, r0
 80149bc:	4619      	mov	r1, r3
 80149be:	2304      	movs	r3, #4
 80149c0:	4a1d      	ldr	r2, [pc, #116]	; (8014a38 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80149c2:	68b8      	ldr	r0, [r7, #8]
 80149c4:	f7fe fcb5 	bl	8013332 <otMessageRead>
 80149c8:	4603      	mov	r3, r0
 80149ca:	2b04      	cmp	r3, #4
 80149cc:	d112      	bne.n	80149f4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				== 4U) {
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80149ce:	68f8      	ldr	r0, [r7, #12]
 80149d0:	f7fe f8c9 	bl	8012b66 <otCoapHeaderGetCode>
 80149d4:	4603      	mov	r3, r0
 80149d6:	2b03      	cmp	r3, #3
 80149d8:	d005      	beq.n	80149e6 <APP_THREAD_CoapLightsSimpleRequestHandler+0x5a>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f7fe f8c3 	bl	8012b66 <otCoapHeaderGetCode>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b02      	cmp	r3, #2
 80149e4:	d106      	bne.n	80149f4 <APP_THREAD_CoapLightsSimpleRequestHandler+0x68>
				osMessageQueuePut(lightsSimpleQueueHandle, &lightsSimpleMessage, 0U, 0U);
 80149e6:	4b15      	ldr	r3, [pc, #84]	; (8014a3c <APP_THREAD_CoapLightsSimpleRequestHandler+0xb0>)
 80149e8:	6818      	ldr	r0, [r3, #0]
 80149ea:	2300      	movs	r3, #0
 80149ec:	2200      	movs	r2, #0
 80149ee:	4912      	ldr	r1, [pc, #72]	; (8014a38 <APP_THREAD_CoapLightsSimpleRequestHandler+0xac>)
 80149f0:	f7fa f9a4 	bl	800ed3c <osMessageQueuePut>
			}

		}

		tempMessageInfo = pMessageInfo;
 80149f4:	4a12      	ldr	r2, [pc, #72]	; (8014a40 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb4>)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 80149fa:	4a12      	ldr	r2, [pc, #72]	; (8014a44 <APP_THREAD_CoapLightsSimpleRequestHandler+0xb8>)
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f7fe f882 	bl	8012b0a <otCoapHeaderGetType>
 8014a06:	4603      	mov	r3, r0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d107      	bne.n	8014a1c <APP_THREAD_CoapLightsSimpleRequestHandler+0x90>
			APP_THREAD_SendDataResponse(pHeader, pMessageInfo, NULL, 0);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	b299      	uxth	r1, r3
 8014a10:	2300      	movs	r3, #0
 8014a12:	2200      	movs	r2, #0
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f000 fadd 	bl	8014fd4 <APP_THREAD_SendDataResponse>
			break;
 8014a1a:	e009      	b.n	8014a30 <APP_THREAD_CoapLightsSimpleRequestHandler+0xa4>
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8014a1c:	68b8      	ldr	r0, [r7, #8]
 8014a1e:	f7fe fc23 	bl	8013268 <otMessageGetOffset>
 8014a22:	4603      	mov	r3, r0
 8014a24:	4619      	mov	r1, r3
 8014a26:	2301      	movs	r3, #1
 8014a28:	4a07      	ldr	r2, [pc, #28]	; (8014a48 <APP_THREAD_CoapLightsSimpleRequestHandler+0xbc>)
 8014a2a:	68b8      	ldr	r0, [r7, #8]
 8014a2c:	f7fe fc81 	bl	8013332 <otMessageRead>

		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}
	} while (false);
}
 8014a30:	bf00      	nop
 8014a32:	3710      	adds	r7, #16
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}
 8014a38:	20027cfc 	.word	0x20027cfc
 8014a3c:	200278b4 	.word	0x200278b4
 8014a40:	20028600 	.word	0x20028600
 8014a44:	20028658 	.word	0x20028658
 8014a48:	20027691 	.word	0x20027691

08014a4c <APP_THREAD_CoapToggleLoggingRequestHandler>:

#ifndef DONGLE_CODE
// request handler for when receiving a message directed at the data logging resource
static void APP_THREAD_CoapToggleLoggingRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
	do {
		// if get, send response with current log message
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014a58:	68f8      	ldr	r0, [r7, #12]
 8014a5a:	f7fe f884 	bl	8012b66 <otCoapHeaderGetCode>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	d106      	bne.n	8014a72 <APP_THREAD_CoapToggleLoggingRequestHandler+0x26>
			APP_THREAD_SendDataResponse(&logMessage, sizeof(logMessage), pHeader, pMessageInfo);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	68fa      	ldr	r2, [r7, #12]
 8014a68:	2106      	movs	r1, #6
 8014a6a:	481a      	ldr	r0, [pc, #104]	; (8014ad4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014a6c:	f000 fab2 	bl	8014fd4 <APP_THREAD_SendDataResponse>
			break;
 8014a70:	e02c      	b.n	8014acc <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
		}

		// TODO : this will overwrite log message so maybe add a safer method
		if ( otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage)) == sizeof(logMessage)){
 8014a72:	68b8      	ldr	r0, [r7, #8]
 8014a74:	f7fe fbf8 	bl	8013268 <otMessageGetOffset>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	2306      	movs	r3, #6
 8014a7e:	4a15      	ldr	r2, [pc, #84]	; (8014ad4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014a80:	68b8      	ldr	r0, [r7, #8]
 8014a82:	f7fe fc56 	bl	8013332 <otMessageRead>
 8014a86:	4603      	mov	r3, r0
 8014a88:	2b06      	cmp	r3, #6
 8014a8a:	d112      	bne.n	8014ab2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
//			otMessageRead(pMessage, otMessageGetOffset(pMessage), &logMessage, sizeof(logMessage));
			// if post or put, add to queue for masterthread processing
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8014a8c:	68f8      	ldr	r0, [r7, #12]
 8014a8e:	f7fe f86a 	bl	8012b66 <otCoapHeaderGetCode>
 8014a92:	4603      	mov	r3, r0
 8014a94:	2b03      	cmp	r3, #3
 8014a96:	d005      	beq.n	8014aa4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x58>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014a98:	68f8      	ldr	r0, [r7, #12]
 8014a9a:	f7fe f864 	bl	8012b66 <otCoapHeaderGetCode>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b02      	cmp	r3, #2
 8014aa2:	d106      	bne.n	8014ab2 <APP_THREAD_CoapToggleLoggingRequestHandler+0x66>
				osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, 0U);
 8014aa4:	4b0c      	ldr	r3, [pc, #48]	; (8014ad8 <APP_THREAD_CoapToggleLoggingRequestHandler+0x8c>)
 8014aa6:	6818      	ldr	r0, [r3, #0]
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	2200      	movs	r2, #0
 8014aac:	4909      	ldr	r1, [pc, #36]	; (8014ad4 <APP_THREAD_CoapToggleLoggingRequestHandler+0x88>)
 8014aae:	f7fa f945 	bl	800ed3c <osMessageQueuePut>
			}
		}


		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014ab2:	68f8      	ldr	r0, [r7, #12]
 8014ab4:	f7fe f829 	bl	8012b0a <otCoapHeaderGetType>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d106      	bne.n	8014acc <APP_THREAD_CoapToggleLoggingRequestHandler+0x80>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	2100      	movs	r1, #0
 8014ac4:	2000      	movs	r0, #0
 8014ac6:	f000 fa85 	bl	8014fd4 <APP_THREAD_SendDataResponse>
			break;
 8014aca:	bf00      	nop
		}

	} while (false);
}
 8014acc:	bf00      	nop
 8014ace:	3710      	adds	r7, #16
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}
 8014ad4:	20028618 	.word	0x20028618
 8014ad8:	20027ce4 	.word	0x20027ce4

08014adc <APP_THREAD_CoapBorderTimeRequestHandler>:
#endif


// request handler for when receiving a message directed at the border router synchronizing resource
static void APP_THREAD_CoapBorderTimeRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014adc:	b5b0      	push	{r4, r5, r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	607a      	str	r2, [r7, #4]
	do {
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedSystemCal, sizeof(receivedSystemCal))
 8014ae8:	68b8      	ldr	r0, [r7, #8]
 8014aea:	f7fe fbbd 	bl	8013268 <otMessageGetOffset>
 8014aee:	4603      	mov	r3, r0
 8014af0:	4619      	mov	r1, r3
 8014af2:	2318      	movs	r3, #24
 8014af4:	4a1f      	ldr	r2, [pc, #124]	; (8014b74 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8014af6:	68b8      	ldr	r0, [r7, #8]
 8014af8:	f7fe fc1b 	bl	8013332 <otMessageRead>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b18      	cmp	r3, #24
 8014b00:	d11c      	bne.n	8014b3c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>
				== sizeof(receivedSystemCal)) {
			// if the message was a put request, copy message over to border router info struct
			if ((otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	f7fe f82f 	bl	8012b66 <otCoapHeaderGetCode>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b03      	cmp	r3, #3
 8014b0c:	d005      	beq.n	8014b1a <APP_THREAD_CoapBorderTimeRequestHandler+0x3e>
					|| (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_POST)) {
 8014b0e:	68f8      	ldr	r0, [r7, #12]
 8014b10:	f7fe f829 	bl	8012b66 <otCoapHeaderGetCode>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b02      	cmp	r3, #2
 8014b18:	d110      	bne.n	8014b3c <APP_THREAD_CoapBorderTimeRequestHandler+0x60>

				memcpy(&borderRouter, &receivedSystemCal, sizeof(receivedSystemCal));
 8014b1a:	4a17      	ldr	r2, [pc, #92]	; (8014b78 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8014b1c:	4b15      	ldr	r3, [pc, #84]	; (8014b74 <APP_THREAD_CoapBorderTimeRequestHandler+0x98>)
 8014b1e:	4614      	mov	r4, r2
 8014b20:	461d      	mov	r5, r3
 8014b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b2a:	e884 0003 	stmia.w	r4, {r0, r1}

				// update the onboard RTC unix time
				updateRTC(borderRouter.epoch);
 8014b2e:	4b12      	ldr	r3, [pc, #72]	; (8014b78 <APP_THREAD_CoapBorderTimeRequestHandler+0x9c>)
 8014b30:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014b34:	4618      	mov	r0, r3
 8014b36:	4621      	mov	r1, r4
 8014b38:	f000 f842 	bl	8014bc0 <updateRTC>
			}
		}

		receivedMessage = (otMessageInfo*) pMessage;
 8014b3c:	4a0f      	ldr	r2, [pc, #60]	; (8014b7c <APP_THREAD_CoapBorderTimeRequestHandler+0xa0>)
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014b42:	68f8      	ldr	r0, [r7, #12]
 8014b44:	f7fe f80f 	bl	8012b66 <otCoapHeaderGetCode>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d00c      	beq.n	8014b68 <APP_THREAD_CoapBorderTimeRequestHandler+0x8c>
			//TODO: this is where you would put the return if you wanted a node to transmit BR info to other nodes
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014b4e:	68f8      	ldr	r0, [r7, #12]
 8014b50:	f7fd ffdb 	bl	8012b0a <otCoapHeaderGetType>
 8014b54:	4603      	mov	r3, r0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d107      	bne.n	8014b6a <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			APP_THREAD_SendDataResponse(NULL, 0 , pHeader, pMessageInfo);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	68fa      	ldr	r2, [r7, #12]
 8014b5e:	2100      	movs	r1, #0
 8014b60:	2000      	movs	r0, #0
 8014b62:	f000 fa37 	bl	8014fd4 <APP_THREAD_SendDataResponse>
			break;
 8014b66:	e000      	b.n	8014b6a <APP_THREAD_CoapBorderTimeRequestHandler+0x8e>
			break;
 8014b68:	bf00      	nop
		}

	} while (false);
}
 8014b6a:	bf00      	nop
 8014b6c:	3710      	adds	r7, #16
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bdb0      	pop	{r4, r5, r7, pc}
 8014b72:	bf00      	nop
 8014b74:	200276b0 	.word	0x200276b0
 8014b78:	20027698 	.word	0x20027698
 8014b7c:	20028658 	.word	0x20028658

08014b80 <APP_THREAD_CoapNodeInfoRequestHandler>:

// Only get requests allowed for this resource
struct sendIP_struct tempVar = {"test","test",0};
//char test_string[200] = "test";
static void APP_THREAD_CoapNodeInfoRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	60f8      	str	r0, [r7, #12]
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 8014b8c:	68f8      	ldr	r0, [r7, #12]
 8014b8e:	f7fd ffea 	bl	8012b66 <otCoapHeaderGetCode>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	d103      	bne.n	8014ba0 <APP_THREAD_CoapNodeInfoRequestHandler+0x20>
//			APP_THREAD_SendDataResponse(&borderRouter, sizeof(borderRouter), pHeader, pMessageInfo);
//			APP_THREAD_SendDataResponse(&msgSendMyIP, sizeof(msgSendMyIP), pHeader, pMessageInfo);
			APP_THREAD_SendMyInfo();
 8014b98:	f7ff feae 	bl	80148f8 <APP_THREAD_SendMyInfo>

			break;
 8014b9c:	bf00      	nop
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
		}

	} while (false);
}
 8014b9e:	e00b      	b.n	8014bb8 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 8014ba0:	68f8      	ldr	r0, [r7, #12]
 8014ba2:	f7fd ffb2 	bl	8012b0a <otCoapHeaderGetType>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d105      	bne.n	8014bb8 <APP_THREAD_CoapNodeInfoRequestHandler+0x38>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	2100      	movs	r1, #0
 8014bb2:	2000      	movs	r0, #0
 8014bb4:	f000 fa0e 	bl	8014fd4 <APP_THREAD_SendDataResponse>
}
 8014bb8:	bf00      	nop
 8014bba:	3710      	adds	r7, #16
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}

08014bc0 <updateRTC>:

void updateRTC(time_t now) {
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b088      	sub	sp, #32
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	e9c7 0100 	strd	r0, r1, [r7]
	RTC_DateTypeDef sDate;

	// https://www.st.com/content/ccc/resource/technical/document/application_note/2a/c2/6f/74/fa/0d/46/3a/CD00015424.pdf/files/CD00015424.pdf/jcr:content/translations/en.CD00015424.pdf
//	struct tm *time_tm;

	RTC_FromEpoch(now, &sTime, &sDate);
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	f107 0208 	add.w	r2, r7, #8
 8014bd0:	f107 010c 	add.w	r1, r7, #12
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f0 fa97 	bl	8005108 <RTC_FromEpoch>

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8014bda:	f107 030c 	add.w	r3, r7, #12
 8014bde:	2200      	movs	r2, #0
 8014be0:	4619      	mov	r1, r3
 8014be2:	480a      	ldr	r0, [pc, #40]	; (8014c0c <updateRTC+0x4c>)
 8014be4:	f7f7 fe4d 	bl	800c882 <HAL_RTC_SetTime>
	}

	/*
	 * update the RTC
	 */
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8014be8:	f107 0308 	add.w	r3, r7, #8
 8014bec:	2200      	movs	r2, #0
 8014bee:	4619      	mov	r1, r3
 8014bf0:	4806      	ldr	r0, [pc, #24]	; (8014c0c <updateRTC+0x4c>)
 8014bf2:	f7f7 ff66 	bl	800cac2 <HAL_RTC_SetDate>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2); // lock it in with the backup registers
 8014bf6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8014bfa:	2100      	movs	r1, #0
 8014bfc:	4803      	ldr	r0, [pc, #12]	; (8014c0c <updateRTC+0x4c>)
 8014bfe:	f7f8 f8e7 	bl	800cdd0 <HAL_RTCEx_BKUPWrite>
}
 8014c02:	bf00      	nop
 8014c04:	3720      	adds	r7, #32
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	20028440 	.word	0x20028440

08014c10 <APP_THREAD_CoapLightsComplexRequestHandler>:
//    BSP_LED_On(LED1);
//    APP_DBG(" ********* BUFFER HAS BEEN TRANFERED \r\n");
//  }
//}
static void APP_THREAD_CoapLightsComplexRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
	do {
		//APP_THREAD_SendCoapUnicastRequest();

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &lightMessageComplex, sizeof(lightMessageComplex))
 8014c1c:	68b8      	ldr	r0, [r7, #8]
 8014c1e:	f7fe fb23 	bl	8013268 <otMessageGetOffset>
 8014c22:	4603      	mov	r3, r0
 8014c24:	4619      	mov	r1, r3
 8014c26:	2312      	movs	r3, #18
 8014c28:	4a16      	ldr	r2, [pc, #88]	; (8014c84 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014c2a:	68b8      	ldr	r0, [r7, #8]
 8014c2c:	f7fe fb81 	bl	8013332 <otMessageRead>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b12      	cmp	r3, #18
 8014c34:	d102      	bne.n	8014c3c <APP_THREAD_CoapLightsComplexRequestHandler+0x2c>
				== sizeof(lightMessageComplex)) {
			FrontLightsSet(&lightMessageComplex);
 8014c36:	4813      	ldr	r0, [pc, #76]	; (8014c84 <APP_THREAD_CoapLightsComplexRequestHandler+0x74>)
 8014c38:	f7ef f9e4 	bl	8004004 <FrontLightsSet>
		}

		tempMessageInfo = pMessageInfo;
 8014c3c:	4a12      	ldr	r2, [pc, #72]	; (8014c88 <APP_THREAD_CoapLightsComplexRequestHandler+0x78>)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6013      	str	r3, [r2, #0]
		receivedMessage = (otMessageInfo*) pMessage;
 8014c42:	4a12      	ldr	r2, [pc, #72]	; (8014c8c <APP_THREAD_CoapLightsComplexRequestHandler+0x7c>)
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	6013      	str	r3, [r2, #0]

		if (otCoapHeaderGetType(pHeader) != OT_COAP_TYPE_NON_CONFIRMABLE) {
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f7fd ff5e 	bl	8012b0a <otCoapHeaderGetType>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	2b10      	cmp	r3, #16
 8014c52:	d110      	bne.n	8014c76 <APP_THREAD_CoapLightsComplexRequestHandler+0x66>
			break;
		}

		if (otCoapHeaderGetCode(pHeader) != OT_COAP_CODE_PUT) {
 8014c54:	68f8      	ldr	r0, [r7, #12]
 8014c56:	f7fd ff86 	bl	8012b66 <otCoapHeaderGetCode>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	2b03      	cmp	r3, #3
 8014c5e:	d10c      	bne.n	8014c7a <APP_THREAD_CoapLightsComplexRequestHandler+0x6a>
			break;
		}

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U) {
 8014c60:	68b8      	ldr	r0, [r7, #8]
 8014c62:	f7fe fb01 	bl	8013268 <otMessageGetOffset>
 8014c66:	4603      	mov	r3, r0
 8014c68:	4619      	mov	r1, r3
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	4a08      	ldr	r2, [pc, #32]	; (8014c90 <APP_THREAD_CoapLightsComplexRequestHandler+0x80>)
 8014c6e:	68b8      	ldr	r0, [r7, #8]
 8014c70:	f7fe fb5f 	bl	8013332 <otMessageRead>
		if (OT_ReceivedCommand == 1U) {
			//BSP_LED_Toggle(LED1);
		}

	} while (false);
}
 8014c74:	e002      	b.n	8014c7c <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8014c76:	bf00      	nop
 8014c78:	e000      	b.n	8014c7c <APP_THREAD_CoapLightsComplexRequestHandler+0x6c>
			break;
 8014c7a:	bf00      	nop
}
 8014c7c:	bf00      	nop
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	20028630 	.word	0x20028630
 8014c88:	20028600 	.word	0x20028600
 8014c8c:	20028658 	.word	0x20028658
 8014c90:	20027691 	.word	0x20027691

08014c94 <APP_THREAD_SendCoapMsg>:
//  }
//}

static char empty_message[10] = "";
static void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8014c94:	b590      	push	{r4, r7, lr}
 8014c96:	b087      	sub	sp, #28
 8014c98:	af02      	add	r7, sp, #8
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	607a      	str	r2, [r7, #4]
 8014c9e:	603b      	str	r3, [r7, #0]
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014ca4:	222c      	movs	r2, #44	; 0x2c
 8014ca6:	2100      	movs	r1, #0
 8014ca8:	4867      	ldr	r0, [pc, #412]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014caa:	f001 f942 	bl	8015f32 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8014cae:	897b      	ldrh	r3, [r7, #10]
 8014cb0:	2b64      	cmp	r3, #100	; 0x64
 8014cb2:	d90c      	bls.n	8014cce <APP_THREAD_SendCoapMsg+0x3a>
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8014cb4:	4b64      	ldr	r3, [pc, #400]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014cb6:	4a65      	ldr	r2, [pc, #404]	; (8014e4c <APP_THREAD_SendCoapMsg+0x1b8>)
 8014cb8:	f103 0410 	add.w	r4, r3, #16
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
 8014cc4:	4960      	ldr	r1, [pc, #384]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014cc6:	4862      	ldr	r0, [pc, #392]	; (8014e50 <APP_THREAD_SendCoapMsg+0x1bc>)
 8014cc8:	f7fe fa11 	bl	80130ee <otIp6AddressFromString>
 8014ccc:	e009      	b.n	8014ce2 <APP_THREAD_SendCoapMsg+0x4e>
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8014cce:	4b5e      	ldr	r3, [pc, #376]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014cd0:	4a60      	ldr	r2, [pc, #384]	; (8014e54 <APP_THREAD_SendCoapMsg+0x1c0>)
 8014cd2:	f103 0410 	add.w	r4, r3, #16
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	6818      	ldr	r0, [r3, #0]
 8014cda:	6859      	ldr	r1, [r3, #4]
 8014cdc:	689a      	ldr	r2, [r3, #8]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014ce2:	4b59      	ldr	r3, [pc, #356]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014ce4:	2201      	movs	r2, #1
 8014ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014cea:	4b57      	ldr	r3, [pc, #348]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014cec:	f241 6233 	movw	r2, #5683	; 0x1633
 8014cf0:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8014cf2:	4b55      	ldr	r3, [pc, #340]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014cf4:	2240      	movs	r2, #64	; 0x40
 8014cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d009      	beq.n	8014d16 <APP_THREAD_SendCoapMsg+0x82>
 8014d02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d06:	2b03      	cmp	r3, #3
 8014d08:	d105      	bne.n	8014d16 <APP_THREAD_SendCoapMsg+0x82>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014d0a:	2203      	movs	r2, #3
 8014d0c:	2100      	movs	r1, #0
 8014d0e:	4852      	ldr	r0, [pc, #328]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d10:	f7fd fd9f 	bl	8012852 <otCoapHeaderInit>
 8014d14:	e04a      	b.n	8014dac <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8014d16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d009      	beq.n	8014d32 <APP_THREAD_SendCoapMsg+0x9e>
 8014d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d105      	bne.n	8014d32 <APP_THREAD_SendCoapMsg+0x9e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8014d26:	2201      	movs	r2, #1
 8014d28:	2100      	movs	r1, #0
 8014d2a:	484b      	ldr	r0, [pc, #300]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d2c:	f7fd fd91 	bl	8012852 <otCoapHeaderInit>
 8014d30:	e03c      	b.n	8014dac <APP_THREAD_SendCoapMsg+0x118>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8014d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d009      	beq.n	8014d4e <APP_THREAD_SendCoapMsg+0xba>
 8014d3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d3e:	2b02      	cmp	r3, #2
 8014d40:	d105      	bne.n	8014d4e <APP_THREAD_SendCoapMsg+0xba>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8014d42:	2202      	movs	r2, #2
 8014d44:	2100      	movs	r1, #0
 8014d46:	4844      	ldr	r0, [pc, #272]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d48:	f7fd fd83 	bl	8012852 <otCoapHeaderInit>
 8014d4c:	e02e      	b.n	8014dac <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d109      	bne.n	8014d6a <APP_THREAD_SendCoapMsg+0xd6>
 8014d56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d5a:	2b03      	cmp	r3, #3
 8014d5c:	d105      	bne.n	8014d6a <APP_THREAD_SendCoapMsg+0xd6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014d5e:	2203      	movs	r2, #3
 8014d60:	2110      	movs	r1, #16
 8014d62:	483d      	ldr	r0, [pc, #244]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d64:	f7fd fd75 	bl	8012852 <otCoapHeaderInit>
 8014d68:	e020      	b.n	8014dac <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d109      	bne.n	8014d86 <APP_THREAD_SendCoapMsg+0xf2>
 8014d72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d105      	bne.n	8014d86 <APP_THREAD_SendCoapMsg+0xf2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	2110      	movs	r1, #16
 8014d7e:	4836      	ldr	r0, [pc, #216]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d80:	f7fd fd67 	bl	8012852 <otCoapHeaderInit>
 8014d84:	e012      	b.n	8014dac <APP_THREAD_SendCoapMsg+0x118>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d109      	bne.n	8014da2 <APP_THREAD_SendCoapMsg+0x10e>
 8014d8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d92:	2b02      	cmp	r3, #2
 8014d94:	d105      	bne.n	8014da2 <APP_THREAD_SendCoapMsg+0x10e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014d96:	2202      	movs	r2, #2
 8014d98:	2110      	movs	r1, #16
 8014d9a:	482f      	ldr	r0, [pc, #188]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014d9c:	f7fd fd59 	bl	8012852 <otCoapHeaderInit>
 8014da0:	e004      	b.n	8014dac <APP_THREAD_SendCoapMsg+0x118>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014da2:	2102      	movs	r1, #2
 8014da4:	482c      	ldr	r0, [pc, #176]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014da6:	f7fd fdbd 	bl	8012924 <otCoapHeaderGenerateToken>
 8014daa:	e049      	b.n	8014e40 <APP_THREAD_SendCoapMsg+0x1ac>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014dac:	6839      	ldr	r1, [r7, #0]
 8014dae:	482a      	ldr	r0, [pc, #168]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014db0:	f7fd fe1b 	bl	80129ea <otCoapHeaderAppendUriPathOptions>
 8014db4:	4603      	mov	r3, r0
 8014db6:	461a      	mov	r2, r3
 8014db8:	4b28      	ldr	r3, [pc, #160]	; (8014e5c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014dba:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8014dbc:	212a      	movs	r1, #42	; 0x2a
 8014dbe:	4826      	ldr	r0, [pc, #152]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014dc0:	f7fd fde0 	bl	8012984 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8014dc4:	4824      	ldr	r0, [pc, #144]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014dc6:	f7fd fe42 	bl	8012a4e <otCoapHeaderSetPayloadMarker>

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014dca:	4923      	ldr	r1, [pc, #140]	; (8014e58 <APP_THREAD_SendCoapMsg+0x1c4>)
 8014dcc:	2000      	movs	r0, #0
 8014dce:	f7fd ff81 	bl	8012cd4 <otCoapNewMessage>
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	4b22      	ldr	r3, [pc, #136]	; (8014e60 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014dd6:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8014dd8:	897b      	ldrh	r3, [r7, #10]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00b      	beq.n	8014df6 <APP_THREAD_SendCoapMsg+0x162>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8014dde:	4b20      	ldr	r3, [pc, #128]	; (8014e60 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	897a      	ldrh	r2, [r7, #10]
 8014de4:	68f9      	ldr	r1, [r7, #12]
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7fe fa6c 	bl	80132c4 <otMessageAppend>
 8014dec:	4603      	mov	r3, r0
 8014dee:	461a      	mov	r2, r3
 8014df0:	4b1a      	ldr	r3, [pc, #104]	; (8014e5c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014df2:	701a      	strb	r2, [r3, #0]
 8014df4:	e00a      	b.n	8014e0c <APP_THREAD_SendCoapMsg+0x178>
		}else{
			error = otMessageAppend(pOT_Message, empty_message, 10);
 8014df6:	4b1a      	ldr	r3, [pc, #104]	; (8014e60 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	220a      	movs	r2, #10
 8014dfc:	4919      	ldr	r1, [pc, #100]	; (8014e64 <APP_THREAD_SendCoapMsg+0x1d0>)
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7fe fa60 	bl	80132c4 <otMessageAppend>
 8014e04:	4603      	mov	r3, r0
 8014e06:	461a      	mov	r2, r3
 8014e08:	4b14      	ldr	r3, [pc, #80]	; (8014e5c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014e0a:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8014e0c:	4b14      	ldr	r3, [pc, #80]	; (8014e60 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e0e:	6819      	ldr	r1, [r3, #0]
 8014e10:	2300      	movs	r3, #0
 8014e12:	9300      	str	r3, [sp, #0]
 8014e14:	2300      	movs	r3, #0
 8014e16:	4a0c      	ldr	r2, [pc, #48]	; (8014e48 <APP_THREAD_SendCoapMsg+0x1b4>)
 8014e18:	2000      	movs	r0, #0
 8014e1a:	f7fd ff89 	bl	8012d30 <otCoapSendRequest>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	461a      	mov	r2, r3
 8014e22:	4b0e      	ldr	r3, [pc, #56]	; (8014e5c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014e24:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8014e26:	4b0d      	ldr	r3, [pc, #52]	; (8014e5c <APP_THREAD_SendCoapMsg+0x1c8>)
 8014e28:	781b      	ldrb	r3, [r3, #0]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d008      	beq.n	8014e40 <APP_THREAD_SendCoapMsg+0x1ac>
 8014e2e:	4b0c      	ldr	r3, [pc, #48]	; (8014e60 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d004      	beq.n	8014e40 <APP_THREAD_SendCoapMsg+0x1ac>
			otMessageFree(pOT_Message);
 8014e36:	4b0a      	ldr	r3, [pc, #40]	; (8014e60 <APP_THREAD_SendCoapMsg+0x1cc>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7fe f9e9 	bl	8013212 <otMessageFree>
		}

	} while (false);
}
 8014e40:	3714      	adds	r7, #20
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd90      	pop	{r4, r7, pc}
 8014e46:	bf00      	nop
 8014e48:	200275d0 	.word	0x200275d0
 8014e4c:	20027698 	.word	0x20027698
 8014e50:	08017538 	.word	0x08017538
 8014e54:	20028644 	.word	0x20028644
 8014e58:	200275fc 	.word	0x200275fc
 8014e5c:	20027690 	.word	0x20027690
 8014e60:	2002768c 	.word	0x2002768c
 8014e64:	200276c8 	.word	0x200276c8

08014e68 <APP_THREAD_SendCoapMsgForBorderSync>:

static void APP_THREAD_SendCoapMsgForBorderSync(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8014e68:	b590      	push	{r4, r7, lr}
 8014e6a:	b087      	sub	sp, #28
 8014e6c:	af02      	add	r7, sp, #8
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	607a      	str	r2, [r7, #4]
 8014e72:	603b      	str	r3, [r7, #0]
 8014e74:	460b      	mov	r3, r1
 8014e76:	817b      	strh	r3, [r7, #10]
//			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
//			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
//			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014e78:	222c      	movs	r2, #44	; 0x2c
 8014e7a:	2100      	movs	r1, #0
 8014e7c:	484e      	ldr	r0, [pc, #312]	; (8014fb8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014e7e:	f001 f858 	bl	8015f32 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed


		memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8014e82:	4b4d      	ldr	r3, [pc, #308]	; (8014fb8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014e84:	4a4d      	ldr	r2, [pc, #308]	; (8014fbc <APP_THREAD_SendCoapMsgForBorderSync+0x154>)
 8014e86:	f103 0410 	add.w	r4, r3, #16
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	6818      	ldr	r0, [r3, #0]
 8014e8e:	6859      	ldr	r1, [r3, #4]
 8014e90:	689a      	ldr	r2, [r3, #8]
 8014e92:	68db      	ldr	r3, [r3, #12]
 8014e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 8014e96:	4b48      	ldr	r3, [pc, #288]	; (8014fb8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014e98:	2201      	movs	r2, #1
 8014e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8014e9e:	4b46      	ldr	r3, [pc, #280]	; (8014fb8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014ea0:	f241 6233 	movw	r2, #5683	; 0x1633
 8014ea4:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 8014ea6:	4b44      	ldr	r3, [pc, #272]	; (8014fb8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014ea8:	2240      	movs	r2, #64	; 0x40
 8014eaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d009      	beq.n	8014eca <APP_THREAD_SendCoapMsgForBorderSync+0x62>
 8014eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014eba:	2b03      	cmp	r3, #3
 8014ebc:	d105      	bne.n	8014eca <APP_THREAD_SendCoapMsgForBorderSync+0x62>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014ebe:	2203      	movs	r2, #3
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	483f      	ldr	r0, [pc, #252]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014ec4:	f7fd fcc5 	bl	8012852 <otCoapHeaderInit>
 8014ec8:	e04a      	b.n	8014f60 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8014eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d009      	beq.n	8014ee6 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
 8014ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ed6:	2b01      	cmp	r3, #1
 8014ed8:	d105      	bne.n	8014ee6 <APP_THREAD_SendCoapMsgForBorderSync+0x7e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8014eda:	2201      	movs	r2, #1
 8014edc:	2100      	movs	r1, #0
 8014ede:	4838      	ldr	r0, [pc, #224]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014ee0:	f7fd fcb7 	bl	8012852 <otCoapHeaderInit>
 8014ee4:	e03c      	b.n	8014f60 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 8014ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d009      	beq.n	8014f02 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
 8014eee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ef2:	2b02      	cmp	r3, #2
 8014ef4:	d105      	bne.n	8014f02 <APP_THREAD_SendCoapMsgForBorderSync+0x9a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 8014ef6:	2202      	movs	r2, #2
 8014ef8:	2100      	movs	r1, #0
 8014efa:	4831      	ldr	r0, [pc, #196]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014efc:	f7fd fca9 	bl	8012852 <otCoapHeaderInit>
 8014f00:	e02e      	b.n	8014f60 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 8014f02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d109      	bne.n	8014f1e <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
 8014f0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f0e:	2b03      	cmp	r3, #3
 8014f10:	d105      	bne.n	8014f1e <APP_THREAD_SendCoapMsgForBorderSync+0xb6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 8014f12:	2203      	movs	r2, #3
 8014f14:	2110      	movs	r1, #16
 8014f16:	482a      	ldr	r0, [pc, #168]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f18:	f7fd fc9b 	bl	8012852 <otCoapHeaderInit>
 8014f1c:	e020      	b.n	8014f60 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014f1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d109      	bne.n	8014f3a <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
 8014f26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d105      	bne.n	8014f3a <APP_THREAD_SendCoapMsgForBorderSync+0xd2>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014f2e:	2201      	movs	r2, #1
 8014f30:	2110      	movs	r1, #16
 8014f32:	4823      	ldr	r0, [pc, #140]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f34:	f7fd fc8d 	bl	8012852 <otCoapHeaderInit>
 8014f38:	e012      	b.n	8014f60 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d109      	bne.n	8014f56 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
 8014f42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f46:	2b02      	cmp	r3, #2
 8014f48:	d105      	bne.n	8014f56 <APP_THREAD_SendCoapMsgForBorderSync+0xee>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014f4a:	2202      	movs	r2, #2
 8014f4c:	2110      	movs	r1, #16
 8014f4e:	481c      	ldr	r0, [pc, #112]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f50:	f7fd fc7f 	bl	8012852 <otCoapHeaderInit>
 8014f54:	e004      	b.n	8014f60 <APP_THREAD_SendCoapMsgForBorderSync+0xf8>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 8014f56:	2102      	movs	r1, #2
 8014f58:	4819      	ldr	r0, [pc, #100]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f5a:	f7fd fce3 	bl	8012924 <otCoapHeaderGenerateToken>
 8014f5e:	e028      	b.n	8014fb2 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014f60:	6839      	ldr	r1, [r7, #0]
 8014f62:	4817      	ldr	r0, [pc, #92]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f64:	f7fd fd41 	bl	80129ea <otCoapHeaderAppendUriPathOptions>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	4b15      	ldr	r3, [pc, #84]	; (8014fc4 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014f6e:	701a      	strb	r2, [r3, #0]

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
//		otCoapHeaderSetPayloadMarker(&OT_Header);

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8014f70:	4913      	ldr	r1, [pc, #76]	; (8014fc0 <APP_THREAD_SendCoapMsgForBorderSync+0x158>)
 8014f72:	2000      	movs	r0, #0
 8014f74:	f7fd feae 	bl	8012cd4 <otCoapNewMessage>
 8014f78:	4602      	mov	r2, r0
 8014f7a:	4b13      	ldr	r3, [pc, #76]	; (8014fc8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014f7c:	601a      	str	r2, [r3, #0]
			 // if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL, pOT_Message, &OT_MessageInfo, &APP_THREAD_DummyRespHandler,
 8014f7e:	4b12      	ldr	r3, [pc, #72]	; (8014fc8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014f80:	6819      	ldr	r1, [r3, #0]
 8014f82:	4b12      	ldr	r3, [pc, #72]	; (8014fcc <APP_THREAD_SendCoapMsgForBorderSync+0x164>)
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	4b12      	ldr	r3, [pc, #72]	; (8014fd0 <APP_THREAD_SendCoapMsgForBorderSync+0x168>)
 8014f88:	4a0b      	ldr	r2, [pc, #44]	; (8014fb8 <APP_THREAD_SendCoapMsgForBorderSync+0x150>)
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	f7fd fed0 	bl	8012d30 <otCoapSendRequest>
 8014f90:	4603      	mov	r3, r0
 8014f92:	461a      	mov	r2, r3
 8014f94:	4b0b      	ldr	r3, [pc, #44]	; (8014fc4 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014f96:	701a      	strb	r2, [r3, #0]
				(void*) &APP_THREAD_CoapRespHandler_UpdateBorderRouter);



		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8014f98:	4b0a      	ldr	r3, [pc, #40]	; (8014fc4 <APP_THREAD_SendCoapMsgForBorderSync+0x15c>)
 8014f9a:	781b      	ldrb	r3, [r3, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d008      	beq.n	8014fb2 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
 8014fa0:	4b09      	ldr	r3, [pc, #36]	; (8014fc8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d004      	beq.n	8014fb2 <APP_THREAD_SendCoapMsgForBorderSync+0x14a>
			otMessageFree(pOT_Message);
 8014fa8:	4b07      	ldr	r3, [pc, #28]	; (8014fc8 <APP_THREAD_SendCoapMsgForBorderSync+0x160>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7fe f930 	bl	8013212 <otMessageFree>
		}

	} while (false);

}
 8014fb2:	3714      	adds	r7, #20
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd90      	pop	{r4, r7, pc}
 8014fb8:	200275d0 	.word	0x200275d0
 8014fbc:	20028644 	.word	0x20028644
 8014fc0:	200275fc 	.word	0x200275fc
 8014fc4:	20027690 	.word	0x20027690
 8014fc8:	2002768c 	.word	0x2002768c
 8014fcc:	08014819 	.word	0x08014819
 8014fd0:	080147fd 	.word	0x080147fd

08014fd4 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 8014fd4:	b590      	push	{r4, r7, lr}
 8014fd6:	b087      	sub	sp, #28
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	607a      	str	r2, [r7, #4]
 8014fde:	603b      	str	r3, [r7, #0]
 8014fe0:	460b      	mov	r3, r1
 8014fe2:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8014fe8:	2244      	movs	r2, #68	; 0x44
 8014fea:	2120      	movs	r1, #32
 8014fec:	4826      	ldr	r0, [pc, #152]	; (8015088 <APP_THREAD_SendDataResponse+0xb4>)
 8014fee:	f7fd fc30 	bl	8012852 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f7fd fde5 	bl	8012bc2 <otCoapHeaderGetMessageId>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	4822      	ldr	r0, [pc, #136]	; (8015088 <APP_THREAD_SendDataResponse+0xb4>)
 8014ffe:	f7fd fd54 	bl	8012aaa <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f7fd fe39 	bl	8012c7a <otCoapHeaderGetToken>
 8015008:	4604      	mov	r4, r0
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7fd fe07 	bl	8012c1e <otCoapHeaderGetTokenLength>
 8015010:	4603      	mov	r3, r0
 8015012:	461a      	mov	r2, r3
 8015014:	4621      	mov	r1, r4
 8015016:	481c      	ldr	r0, [pc, #112]	; (8015088 <APP_THREAD_SendDataResponse+0xb4>)
 8015018:	f7fd fc50 	bl	80128bc <otCoapHeaderSetToken>

	if (msgSize > 0){
 801501c:	897b      	ldrh	r3, [r7, #10]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d006      	beq.n	8015030 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8015022:	212a      	movs	r1, #42	; 0x2a
 8015024:	4818      	ldr	r0, [pc, #96]	; (8015088 <APP_THREAD_SendDataResponse+0xb4>)
 8015026:	f7fd fcad 	bl	8012984 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 801502a:	4817      	ldr	r0, [pc, #92]	; (8015088 <APP_THREAD_SendDataResponse+0xb4>)
 801502c:	f7fd fd0f 	bl	8012a4e <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8015030:	4915      	ldr	r1, [pc, #84]	; (8015088 <APP_THREAD_SendDataResponse+0xb4>)
 8015032:	2000      	movs	r0, #0
 8015034:	f7fd fe4e 	bl	8012cd4 <otCoapNewMessage>
 8015038:	4602      	mov	r2, r0
 801503a:	4b14      	ldr	r3, [pc, #80]	; (801508c <APP_THREAD_SendDataResponse+0xb8>)
 801503c:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 801503e:	897b      	ldrh	r3, [r7, #10]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d008      	beq.n	8015056 <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8015044:	4b11      	ldr	r3, [pc, #68]	; (801508c <APP_THREAD_SendDataResponse+0xb8>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	897a      	ldrh	r2, [r7, #10]
 801504a:	68f9      	ldr	r1, [r7, #12]
 801504c:	4618      	mov	r0, r3
 801504e:	f7fe f939 	bl	80132c4 <otMessageAppend>
 8015052:	4603      	mov	r3, r0
 8015054:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8015056:	4b0d      	ldr	r3, [pc, #52]	; (801508c <APP_THREAD_SendDataResponse+0xb8>)
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	683a      	ldr	r2, [r7, #0]
 801505c:	4619      	mov	r1, r3
 801505e:	2000      	movs	r0, #0
 8015060:	f7fd feff 	bl	8012e62 <otCoapSendResponse>
 8015064:	4603      	mov	r3, r0
 8015066:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8015068:	7dfb      	ldrb	r3, [r7, #23]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d008      	beq.n	8015080 <APP_THREAD_SendDataResponse+0xac>
 801506e:	4b07      	ldr	r3, [pc, #28]	; (801508c <APP_THREAD_SendDataResponse+0xb8>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d004      	beq.n	8015080 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 8015076:	4b05      	ldr	r3, [pc, #20]	; (801508c <APP_THREAD_SendDataResponse+0xb8>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4618      	mov	r0, r3
 801507c:	f7fe f8c9 	bl	8013212 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 8015080:	bf00      	nop
 8015082:	371c      	adds	r7, #28
 8015084:	46bd      	mov	sp, r7
 8015086:	bd90      	pop	{r4, r7, pc}
 8015088:	200275fc 	.word	0x200275fc
 801508c:	2002768c 	.word	0x2002768c

08015090 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8015090:	b480      	push	{r7}
 8015092:	b083      	sub	sp, #12
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8015098:	4a04      	ldr	r2, [pc, #16]	; (80150ac <APP_THREAD_RegisterCmdBuffer+0x1c>)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6013      	str	r3, [r2, #0]
}
 801509e:	bf00      	nop
 80150a0:	370c      	adds	r7, #12
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop
 80150ac:	200275b8 	.word	0x200275b8

080150b0 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80150b0:	b480      	push	{r7}
 80150b2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80150b4:	4b03      	ldr	r3, [pc, #12]	; (80150c4 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	330c      	adds	r3, #12
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr
 80150c4:	200275b8 	.word	0x200275b8

080150c8 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80150c8:	b480      	push	{r7}
 80150ca:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 80150cc:	4b03      	ldr	r3, [pc, #12]	; (80150dc <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	330b      	adds	r3, #11
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr
 80150dc:	200275b8 	.word	0x200275b8

080150e0 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80150e0:	b480      	push	{r7}
 80150e2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80150e4:	4b03      	ldr	r3, [pc, #12]	; (80150f4 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	330b      	adds	r3, #11
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr
 80150f4:	200275bc 	.word	0x200275bc

080150f8 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80150fe:	4b0f      	ldr	r3, [pc, #60]	; (801513c <Ot_Cmd_Transfer+0x44>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	2200      	movs	r2, #0
 8015104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8015108:	725a      	strb	r2, [r3, #9]
 801510a:	2200      	movs	r2, #0
 801510c:	f042 0202 	orr.w	r2, r2, #2
 8015110:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8015112:	4b0a      	ldr	r3, [pc, #40]	; (801513c <Ot_Cmd_Transfer+0x44>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	330c      	adds	r3, #12
 8015118:	685b      	ldr	r3, [r3, #4]
 801511a:	3302      	adds	r3, #2
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8015120:	4b06      	ldr	r3, [pc, #24]	; (801513c <Ot_Cmd_Transfer+0x44>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	687a      	ldr	r2, [r7, #4]
 8015126:	b2d2      	uxtb	r2, r2
 8015128:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 801512a:	f7fe ffb1 	bl	8014090 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801512e:	f000 f829 	bl	8015184 <Wait_Getting_Ack_From_M0>
}
 8015132:	bf00      	nop
 8015134:	3708      	adds	r7, #8
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	200275b8 	.word	0x200275b8

08015140 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b082      	sub	sp, #8
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8015148:	f000 f82e 	bl	80151a8 <Receive_Ack_From_M0>
}
 801514c:	bf00      	nop
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b082      	sub	sp, #8
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 801515c:	4a04      	ldr	r2, [pc, #16]	; (8015170 <TL_THREAD_NotReceived+0x1c>)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8015162:	f000 f82d 	bl	80151c0 <Receive_Notification_From_M0>
}
 8015166:	bf00      	nop
 8015168:	3708      	adds	r7, #8
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	200275bc 	.word	0x200275bc

08015174 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8015174:	b480      	push	{r7}
 8015176:	af00      	add	r7, sp, #0

}
 8015178:	bf00      	nop
 801517a:	46bd      	mov	sp, r7
 801517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015180:	4770      	bx	lr
	...

08015184 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8015184:	b480      	push	{r7}
 8015186:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8015188:	bf00      	nop
 801518a:	4b06      	ldr	r3, [pc, #24]	; (80151a4 <Wait_Getting_Ack_From_M0+0x20>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d0fb      	beq.n	801518a <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8015192:	4b04      	ldr	r3, [pc, #16]	; (80151a4 <Wait_Getting_Ack_From_M0+0x20>)
 8015194:	2200      	movs	r2, #0
 8015196:	601a      	str	r2, [r3, #0]
}
 8015198:	bf00      	nop
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	200275c4 	.word	0x200275c4

080151a8 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80151a8:	b480      	push	{r7}
 80151aa:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80151ac:	4b03      	ldr	r3, [pc, #12]	; (80151bc <Receive_Ack_From_M0+0x14>)
 80151ae:	2201      	movs	r2, #1
 80151b0:	601a      	str	r2, [r3, #0]
}
 80151b2:	bf00      	nop
 80151b4:	46bd      	mov	sp, r7
 80151b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ba:	4770      	bx	lr
 80151bc:	200275c4 	.word	0x200275c4

080151c0 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80151c4:	4b06      	ldr	r3, [pc, #24]	; (80151e0 <Receive_Notification_From_M0+0x20>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	3301      	adds	r3, #1
 80151ca:	4a05      	ldr	r2, [pc, #20]	; (80151e0 <Receive_Notification_From_M0+0x20>)
 80151cc:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 80151ce:	4b05      	ldr	r3, [pc, #20]	; (80151e4 <Receive_Notification_From_M0+0x24>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2101      	movs	r1, #1
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7f8 ffef 	bl	800e1b8 <osThreadFlagsSet>
}
 80151da:	bf00      	nop
 80151dc:	bd80      	pop	{r7, pc}
 80151de:	bf00      	nop
 80151e0:	200275c0 	.word	0x200275c0
 80151e4:	200275c8 	.word	0x200275c8

080151e8 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80151ec:	22ff      	movs	r2, #255	; 0xff
 80151ee:	2100      	movs	r1, #0
 80151f0:	4812      	ldr	r0, [pc, #72]	; (801523c <Send_CLI_To_M0+0x54>)
 80151f2:	f000 fe9e 	bl	8015f32 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80151f6:	4b12      	ldr	r3, [pc, #72]	; (8015240 <Send_CLI_To_M0+0x58>)
 80151f8:	881b      	ldrh	r3, [r3, #0]
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	461a      	mov	r2, r3
 80151fe:	4911      	ldr	r1, [pc, #68]	; (8015244 <Send_CLI_To_M0+0x5c>)
 8015200:	480e      	ldr	r0, [pc, #56]	; (801523c <Send_CLI_To_M0+0x54>)
 8015202:	f000 fe8b 	bl	8015f1c <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8015206:	4b0e      	ldr	r3, [pc, #56]	; (8015240 <Send_CLI_To_M0+0x58>)
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	b29b      	uxth	r3, r3
 801520c:	b2da      	uxtb	r2, r3
 801520e:	4b0e      	ldr	r3, [pc, #56]	; (8015248 <Send_CLI_To_M0+0x60>)
 8015210:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8015212:	4b0d      	ldr	r3, [pc, #52]	; (8015248 <Send_CLI_To_M0+0x60>)
 8015214:	2200      	movs	r2, #0
 8015216:	725a      	strb	r2, [r3, #9]
 8015218:	2200      	movs	r2, #0
 801521a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801521c:	4b0b      	ldr	r3, [pc, #44]	; (801524c <Send_CLI_To_M0+0x64>)
 801521e:	2200      	movs	r2, #0
 8015220:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8015222:	4b07      	ldr	r3, [pc, #28]	; (8015240 <Send_CLI_To_M0+0x58>)
 8015224:	2200      	movs	r2, #0
 8015226:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8015228:	f44f 7280 	mov.w	r2, #256	; 0x100
 801522c:	2100      	movs	r1, #0
 801522e:	4805      	ldr	r0, [pc, #20]	; (8015244 <Send_CLI_To_M0+0x5c>)
 8015230:	f000 fe7f 	bl	8015f32 <memset>

  TL_CLI_SendCmd();
 8015234:	f7fe ff3a 	bl	80140ac <TL_CLI_SendCmd>
}
 8015238:	bf00      	nop
 801523a:	bd80      	pop	{r7, pc}
 801523c:	20030a5c 	.word	0x20030a5c
 8015240:	200275b4 	.word	0x200275b4
 8015244:	200274b4 	.word	0x200274b4
 8015248:	20030a50 	.word	0x20030a50
 801524c:	200275b6 	.word	0x200275b6

08015250 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8015254:	f7fe ff46 	bl	80140e4 <TL_THREAD_CliSendAck>
}
 8015258:	bf00      	nop
 801525a:	bd80      	pop	{r7, pc}

0801525c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8015260:	4a04      	ldr	r2, [pc, #16]	; (8015274 <APP_THREAD_Init_UART_CLI+0x18>)
 8015262:	2100      	movs	r1, #0
 8015264:	4804      	ldr	r0, [pc, #16]	; (8015278 <APP_THREAD_Init_UART_CLI+0x1c>)
 8015266:	f7f8 fefb 	bl	800e060 <osThreadNew>
 801526a:	4602      	mov	r2, r0
 801526c:	4b03      	ldr	r3, [pc, #12]	; (801527c <APP_THREAD_Init_UART_CLI+0x20>)
 801526e:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8015270:	bf00      	nop
 8015272:	bd80      	pop	{r7, pc}
 8015274:	08017978 	.word	0x08017978
 8015278:	080147a3 	.word	0x080147a3
 801527c:	200275cc 	.word	0x200275cc

08015280 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8015284:	4b06      	ldr	r3, [pc, #24]	; (80152a0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015286:	4a07      	ldr	r2, [pc, #28]	; (80152a4 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8015288:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 801528a:	4b05      	ldr	r3, [pc, #20]	; (80152a0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801528c:	4a06      	ldr	r2, [pc, #24]	; (80152a8 <APP_THREAD_TL_THREAD_INIT+0x28>)
 801528e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8015290:	4b03      	ldr	r3, [pc, #12]	; (80152a0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015292:	4a06      	ldr	r2, [pc, #24]	; (80152ac <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8015294:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8015296:	4802      	ldr	r0, [pc, #8]	; (80152a0 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8015298:	f7fe fede 	bl	8014058 <TL_THREAD_Init>
}
 801529c:	bf00      	nop
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	200300b8 	.word	0x200300b8
 80152a4:	20030838 	.word	0x20030838
 80152a8:	20030944 	.word	0x20030944
 80152ac:	20030a50 	.word	0x20030a50

080152b0 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	7adb      	ldrb	r3, [r3, #11]
 80152c0:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	330c      	adds	r3, #12
 80152c6:	4906      	ldr	r1, [pc, #24]	; (80152e0 <TL_THREAD_CliNotReceived+0x30>)
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7ea ff59 	bl	8000180 <strcmp>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d101      	bne.n	80152d8 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 80152d4:	f7ff ffbc 	bl	8015250 <Send_CLI_Ack_For_OT>
  }
}
 80152d8:	bf00      	nop
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	08017558 	.word	0x08017558

080152e4 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80152e8:	4b09      	ldr	r3, [pc, #36]	; (8015310 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d00d      	beq.n	801530c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 80152f0:	4b07      	ldr	r3, [pc, #28]	; (8015310 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d904      	bls.n	8015302 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 80152f8:	2100      	movs	r1, #0
 80152fa:	2000      	movs	r0, #0
 80152fc:	f7fe ffea 	bl	80142d4 <APP_THREAD_Error>
 8015300:	e001      	b.n	8015306 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8015302:	f7fe f853 	bl	80133ac <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8015306:	4b02      	ldr	r3, [pc, #8]	; (8015310 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8015308:	2200      	movs	r2, #0
 801530a:	601a      	str	r2, [r3, #0]
  }
}
 801530c:	bf00      	nop
 801530e:	bd80      	pop	{r7, pc}
 8015310:	200275c0 	.word	0x200275c0

08015314 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8015314:	b480      	push	{r7}
 8015316:	b083      	sub	sp, #12
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801531c:	4b06      	ldr	r3, [pc, #24]	; (8015338 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801531e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8015322:	4905      	ldr	r1, [pc, #20]	; (8015338 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	4313      	orrs	r3, r2
 8015328:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 801532c:	bf00      	nop
 801532e:	370c      	adds	r7, #12
 8015330:	46bd      	mov	sp, r7
 8015332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015336:	4770      	bx	lr
 8015338:	58000800 	.word	0x58000800

0801533c <LL_EXTI_EnableRisingTrig_32_63>:
{
 801533c:	b480      	push	{r7}
 801533e:	b083      	sub	sp, #12
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8015344:	4b05      	ldr	r3, [pc, #20]	; (801535c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015346:	6a1a      	ldr	r2, [r3, #32]
 8015348:	4904      	ldr	r1, [pc, #16]	; (801535c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4313      	orrs	r3, r2
 801534e:	620b      	str	r3, [r1, #32]
}
 8015350:	bf00      	nop
 8015352:	370c      	adds	r7, #12
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr
 801535c:	58000800 	.word	0x58000800

08015360 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8015360:	b480      	push	{r7}
 8015362:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015364:	4b05      	ldr	r3, [pc, #20]	; (801537c <LL_PWR_EnableBootC2+0x1c>)
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	4a04      	ldr	r2, [pc, #16]	; (801537c <LL_PWR_EnableBootC2+0x1c>)
 801536a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801536e:	60d3      	str	r3, [r2, #12]
}
 8015370:	bf00      	nop
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop
 801537c:	58000400 	.word	0x58000400

08015380 <LL_AHB3_GRP1_EnableClock>:
{
 8015380:	b480      	push	{r7}
 8015382:	b085      	sub	sp, #20
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801538c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	4313      	orrs	r3, r2
 8015396:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801539c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	4013      	ands	r3, r2
 80153a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80153a4:	68fb      	ldr	r3, [r7, #12]
}
 80153a6:	bf00      	nop
 80153a8:	3714      	adds	r7, #20
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr

080153b2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80153b2:	b480      	push	{r7}
 80153b4:	b083      	sub	sp, #12
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	601a      	str	r2, [r3, #0]
}
 80153c6:	bf00      	nop
 80153c8:	370c      	adds	r7, #12
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr

080153d2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80153d2:	b480      	push	{r7}
 80153d4:	b083      	sub	sp, #12
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	f043 0201 	orr.w	r2, r3, #1
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	601a      	str	r2, [r3, #0]
}
 80153e6:	bf00      	nop
 80153e8:	370c      	adds	r7, #12
 80153ea:	46bd      	mov	sp, r7
 80153ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f0:	4770      	bx	lr

080153f2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80153f2:	b480      	push	{r7}
 80153f4:	b083      	sub	sp, #12
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	6078      	str	r0, [r7, #4]
 80153fa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	685a      	ldr	r2, [r3, #4]
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	041b      	lsls	r3, r3, #16
 8015404:	43db      	mvns	r3, r3
 8015406:	401a      	ands	r2, r3
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	605a      	str	r2, [r3, #4]
}
 801540c:	bf00      	nop
 801540e:	370c      	adds	r7, #12
 8015410:	46bd      	mov	sp, r7
 8015412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015416:	4770      	bx	lr

08015418 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	685a      	ldr	r2, [r3, #4]
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	041b      	lsls	r3, r3, #16
 801542a:	431a      	orrs	r2, r3
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	605a      	str	r2, [r3, #4]
}
 8015430:	bf00      	nop
 8015432:	370c      	adds	r7, #12
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr

0801543c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	685a      	ldr	r2, [r3, #4]
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	43db      	mvns	r3, r3
 801544e:	401a      	ands	r2, r3
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	605a      	str	r2, [r3, #4]
}
 8015454:	bf00      	nop
 8015456:	370c      	adds	r7, #12
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
 8015468:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	685a      	ldr	r2, [r3, #4]
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	431a      	orrs	r2, r3
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	605a      	str	r2, [r3, #4]
}
 8015476:	bf00      	nop
 8015478:	370c      	adds	r7, #12
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr

08015482 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015482:	b480      	push	{r7}
 8015484:	b083      	sub	sp, #12
 8015486:	af00      	add	r7, sp, #0
 8015488:	6078      	str	r0, [r7, #4]
 801548a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	683a      	ldr	r2, [r7, #0]
 8015490:	609a      	str	r2, [r3, #8]
}
 8015492:	bf00      	nop
 8015494:	370c      	adds	r7, #12
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr

0801549e <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801549e:	b480      	push	{r7}
 80154a0:	b083      	sub	sp, #12
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
 80154a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	041a      	lsls	r2, r3, #16
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	609a      	str	r2, [r3, #8]
}
 80154b0:	bf00      	nop
 80154b2:	370c      	adds	r7, #12
 80154b4:	46bd      	mov	sp, r7
 80154b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ba:	4770      	bx	lr

080154bc <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80154bc:	b480      	push	{r7}
 80154be:	b083      	sub	sp, #12
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	68da      	ldr	r2, [r3, #12]
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	4013      	ands	r3, r2
 80154ce:	683a      	ldr	r2, [r7, #0]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d101      	bne.n	80154d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80154d4:	2301      	movs	r3, #1
 80154d6:	e000      	b.n	80154da <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80154d8:	2300      	movs	r3, #0
}
 80154da:	4618      	mov	r0, r3
 80154dc:	370c      	adds	r7, #12
 80154de:	46bd      	mov	sp, r7
 80154e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e4:	4770      	bx	lr

080154e6 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80154e6:	b480      	push	{r7}
 80154e8:	b083      	sub	sp, #12
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
 80154ee:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	69da      	ldr	r2, [r3, #28]
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	4013      	ands	r3, r2
 80154f8:	683a      	ldr	r2, [r7, #0]
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d101      	bne.n	8015502 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80154fe:	2301      	movs	r3, #1
 8015500:	e000      	b.n	8015504 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8015502:	2300      	movs	r3, #0
}
 8015504:	4618      	mov	r0, r3
 8015506:	370c      	adds	r7, #12
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr

08015510 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8015510:	b580      	push	{r7, lr}
 8015512:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8015514:	2102      	movs	r1, #2
 8015516:	482a      	ldr	r0, [pc, #168]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 8015518:	f7ff ffe5 	bl	80154e6 <LL_C2_IPCC_IsActiveFlag_CHx>
 801551c:	4603      	mov	r3, r0
 801551e:	2b00      	cmp	r3, #0
 8015520:	d009      	beq.n	8015536 <HW_IPCC_Rx_Handler+0x26>
 8015522:	4b27      	ldr	r3, [pc, #156]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 8015524:	685b      	ldr	r3, [r3, #4]
 8015526:	43db      	mvns	r3, r3
 8015528:	f003 0302 	and.w	r3, r3, #2
 801552c:	2b00      	cmp	r3, #0
 801552e:	d002      	beq.n	8015536 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8015530:	f000 f906 	bl	8015740 <HW_IPCC_SYS_EvtHandler>
 8015534:	e041      	b.n	80155ba <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8015536:	2104      	movs	r1, #4
 8015538:	4821      	ldr	r0, [pc, #132]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 801553a:	f7ff ffd4 	bl	80154e6 <LL_C2_IPCC_IsActiveFlag_CHx>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d009      	beq.n	8015558 <HW_IPCC_Rx_Handler+0x48>
 8015544:	4b1e      	ldr	r3, [pc, #120]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	43db      	mvns	r3, r3
 801554a:	f003 0304 	and.w	r3, r3, #4
 801554e:	2b00      	cmp	r3, #0
 8015550:	d002      	beq.n	8015558 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8015552:	f000 f94f 	bl	80157f4 <HW_IPCC_THREAD_NotEvtHandler>
 8015556:	e030      	b.n	80155ba <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8015558:	2110      	movs	r1, #16
 801555a:	4819      	ldr	r0, [pc, #100]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 801555c:	f7ff ffc3 	bl	80154e6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015560:	4603      	mov	r3, r0
 8015562:	2b00      	cmp	r3, #0
 8015564:	d009      	beq.n	801557a <HW_IPCC_Rx_Handler+0x6a>
 8015566:	4b16      	ldr	r3, [pc, #88]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	43db      	mvns	r3, r3
 801556c:	f003 0310 	and.w	r3, r3, #16
 8015570:	2b00      	cmp	r3, #0
 8015572:	d002      	beq.n	801557a <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8015574:	f000 f94a 	bl	801580c <HW_IPCC_THREAD_CliNotEvtHandler>
 8015578:	e01f      	b.n	80155ba <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 801557a:	2101      	movs	r1, #1
 801557c:	4810      	ldr	r0, [pc, #64]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 801557e:	f7ff ffb2 	bl	80154e6 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015582:	4603      	mov	r3, r0
 8015584:	2b00      	cmp	r3, #0
 8015586:	d008      	beq.n	801559a <HW_IPCC_Rx_Handler+0x8a>
 8015588:	4b0d      	ldr	r3, [pc, #52]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 801558a:	685b      	ldr	r3, [r3, #4]
 801558c:	f003 0301 	and.w	r3, r3, #1
 8015590:	2b00      	cmp	r3, #0
 8015592:	d102      	bne.n	801559a <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8015594:	f000 f898 	bl	80156c8 <HW_IPCC_BLE_EvtHandler>
 8015598:	e00f      	b.n	80155ba <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801559a:	2108      	movs	r1, #8
 801559c:	4808      	ldr	r0, [pc, #32]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 801559e:	f7ff ffa2 	bl	80154e6 <LL_C2_IPCC_IsActiveFlag_CHx>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d009      	beq.n	80155bc <HW_IPCC_Rx_Handler+0xac>
 80155a8:	4b05      	ldr	r3, [pc, #20]	; (80155c0 <HW_IPCC_Rx_Handler+0xb0>)
 80155aa:	685b      	ldr	r3, [r3, #4]
 80155ac:	43db      	mvns	r3, r3
 80155ae:	f003 0308 	and.w	r3, r3, #8
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d002      	beq.n	80155bc <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 80155b6:	f000 f975 	bl	80158a4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80155ba:	bf00      	nop
 80155bc:	bf00      	nop
}
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	58000c00 	.word	0x58000c00

080155c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80155c8:	2102      	movs	r1, #2
 80155ca:	482b      	ldr	r0, [pc, #172]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 80155cc:	f7ff ff76 	bl	80154bc <LL_C1_IPCC_IsActiveFlag_CHx>
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d109      	bne.n	80155ea <HW_IPCC_Tx_Handler+0x26>
 80155d6:	4b28      	ldr	r3, [pc, #160]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 80155d8:	685b      	ldr	r3, [r3, #4]
 80155da:	43db      	mvns	r3, r3
 80155dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d002      	beq.n	80155ea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80155e4:	f000 f8a0 	bl	8015728 <HW_IPCC_SYS_CmdEvtHandler>
 80155e8:	e042      	b.n	8015670 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 80155ea:	2104      	movs	r1, #4
 80155ec:	4822      	ldr	r0, [pc, #136]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 80155ee:	f7ff ff65 	bl	80154bc <LL_C1_IPCC_IsActiveFlag_CHx>
 80155f2:	4603      	mov	r3, r0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d109      	bne.n	801560c <HW_IPCC_Tx_Handler+0x48>
 80155f8:	4b1f      	ldr	r3, [pc, #124]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	43db      	mvns	r3, r3
 80155fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015602:	2b00      	cmp	r3, #0
 8015604:	d002      	beq.n	801560c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8015606:	f000 f8e9 	bl	80157dc <HW_IPCC_OT_CmdEvtHandler>
 801560a:	e031      	b.n	8015670 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801560c:	2102      	movs	r1, #2
 801560e:	481a      	ldr	r0, [pc, #104]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 8015610:	f7ff ff54 	bl	80154bc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015614:	4603      	mov	r3, r0
 8015616:	2b00      	cmp	r3, #0
 8015618:	d109      	bne.n	801562e <HW_IPCC_Tx_Handler+0x6a>
 801561a:	4b17      	ldr	r3, [pc, #92]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	43db      	mvns	r3, r3
 8015620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015624:	2b00      	cmp	r3, #0
 8015626:	d002      	beq.n	801562e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015628:	f000 f87e 	bl	8015728 <HW_IPCC_SYS_CmdEvtHandler>
 801562c:	e020      	b.n	8015670 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801562e:	2108      	movs	r1, #8
 8015630:	4811      	ldr	r0, [pc, #68]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 8015632:	f7ff ff43 	bl	80154bc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015636:	4603      	mov	r3, r0
 8015638:	2b00      	cmp	r3, #0
 801563a:	d109      	bne.n	8015650 <HW_IPCC_Tx_Handler+0x8c>
 801563c:	4b0e      	ldr	r3, [pc, #56]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 801563e:	685b      	ldr	r3, [r3, #4]
 8015640:	43db      	mvns	r3, r3
 8015642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015646:	2b00      	cmp	r3, #0
 8015648:	d002      	beq.n	8015650 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 801564a:	f000 f90d 	bl	8015868 <HW_IPCC_MM_FreeBufHandler>
 801564e:	e00f      	b.n	8015670 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8015650:	2120      	movs	r1, #32
 8015652:	4809      	ldr	r0, [pc, #36]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 8015654:	f7ff ff32 	bl	80154bc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015658:	4603      	mov	r3, r0
 801565a:	2b00      	cmp	r3, #0
 801565c:	d109      	bne.n	8015672 <HW_IPCC_Tx_Handler+0xae>
 801565e:	4b06      	ldr	r3, [pc, #24]	; (8015678 <HW_IPCC_Tx_Handler+0xb4>)
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	43db      	mvns	r3, r3
 8015664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015668:	2b00      	cmp	r3, #0
 801566a:	d002      	beq.n	8015672 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801566c:	f000 f838 	bl	80156e0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8015670:	bf00      	nop
 8015672:	bf00      	nop
}
 8015674:	bd80      	pop	{r7, pc}
 8015676:	bf00      	nop
 8015678:	58000c00 	.word	0x58000c00

0801567c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8015680:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015684:	f7ff fe46 	bl	8015314 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015688:	f44f 7000 	mov.w	r0, #512	; 0x200
 801568c:	f7ff fe56 	bl	801533c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8015690:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8015692:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8015694:	f7ff fe64 	bl	8015360 <LL_PWR_EnableBootC2>

  return;
 8015698:	bf00      	nop
}
 801569a:	bd80      	pop	{r7, pc}

0801569c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801569c:	b580      	push	{r7, lr}
 801569e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80156a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80156a4:	f7ff fe6c 	bl	8015380 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80156a8:	4806      	ldr	r0, [pc, #24]	; (80156c4 <HW_IPCC_Init+0x28>)
 80156aa:	f7ff fe92 	bl	80153d2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80156ae:	4805      	ldr	r0, [pc, #20]	; (80156c4 <HW_IPCC_Init+0x28>)
 80156b0:	f7ff fe7f 	bl	80153b2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80156b4:	202c      	movs	r0, #44	; 0x2c
 80156b6:	f7f2 fda8 	bl	800820a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80156ba:	202d      	movs	r0, #45	; 0x2d
 80156bc:	f7f2 fda5 	bl	800820a <HAL_NVIC_EnableIRQ>

  return;
 80156c0:	bf00      	nop
}
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	58000c00 	.word	0x58000c00

080156c8 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80156cc:	f7fe fc34 	bl	8013f38 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80156d0:	2101      	movs	r1, #1
 80156d2:	4802      	ldr	r0, [pc, #8]	; (80156dc <HW_IPCC_BLE_EvtHandler+0x14>)
 80156d4:	f7ff fed5 	bl	8015482 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80156d8:	bf00      	nop
}
 80156da:	bd80      	pop	{r7, pc}
 80156dc:	58000c00 	.word	0x58000c00

080156e0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80156e4:	2120      	movs	r1, #32
 80156e6:	4803      	ldr	r0, [pc, #12]	; (80156f4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80156e8:	f7ff fe96 	bl	8015418 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80156ec:	f7fe fc40 	bl	8013f70 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80156f0:	bf00      	nop
}
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	58000c00 	.word	0x58000c00

080156f8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80156fc:	2102      	movs	r1, #2
 80156fe:	4802      	ldr	r0, [pc, #8]	; (8015708 <HW_IPCC_SYS_Init+0x10>)
 8015700:	f7ff fe9c 	bl	801543c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015704:	bf00      	nop
}
 8015706:	bd80      	pop	{r7, pc}
 8015708:	58000c00 	.word	0x58000c00

0801570c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801570c:	b580      	push	{r7, lr}
 801570e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015710:	2102      	movs	r1, #2
 8015712:	4804      	ldr	r0, [pc, #16]	; (8015724 <HW_IPCC_SYS_SendCmd+0x18>)
 8015714:	f7ff fec3 	bl	801549e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015718:	2102      	movs	r1, #2
 801571a:	4802      	ldr	r0, [pc, #8]	; (8015724 <HW_IPCC_SYS_SendCmd+0x18>)
 801571c:	f7ff fe69 	bl	80153f2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015720:	bf00      	nop
}
 8015722:	bd80      	pop	{r7, pc}
 8015724:	58000c00 	.word	0x58000c00

08015728 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015728:	b580      	push	{r7, lr}
 801572a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801572c:	2102      	movs	r1, #2
 801572e:	4803      	ldr	r0, [pc, #12]	; (801573c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8015730:	f7ff fe72 	bl	8015418 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8015734:	f7fe fc64 	bl	8014000 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015738:	bf00      	nop
}
 801573a:	bd80      	pop	{r7, pc}
 801573c:	58000c00 	.word	0x58000c00

08015740 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015740:	b580      	push	{r7, lr}
 8015742:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015744:	f7fe fc6c 	bl	8014020 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015748:	2102      	movs	r1, #2
 801574a:	4802      	ldr	r0, [pc, #8]	; (8015754 <HW_IPCC_SYS_EvtHandler+0x14>)
 801574c:	f7ff fe99 	bl	8015482 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015750:	bf00      	nop
}
 8015752:	bd80      	pop	{r7, pc}
 8015754:	58000c00 	.word	0x58000c00

08015758 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8015758:	b580      	push	{r7, lr}
 801575a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801575c:	2104      	movs	r1, #4
 801575e:	4804      	ldr	r0, [pc, #16]	; (8015770 <HW_IPCC_THREAD_Init+0x18>)
 8015760:	f7ff fe6c 	bl	801543c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015764:	2110      	movs	r1, #16
 8015766:	4802      	ldr	r0, [pc, #8]	; (8015770 <HW_IPCC_THREAD_Init+0x18>)
 8015768:	f7ff fe68 	bl	801543c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801576c:	bf00      	nop
}
 801576e:	bd80      	pop	{r7, pc}
 8015770:	58000c00 	.word	0x58000c00

08015774 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8015774:	b580      	push	{r7, lr}
 8015776:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015778:	2104      	movs	r1, #4
 801577a:	4804      	ldr	r0, [pc, #16]	; (801578c <HW_IPCC_OT_SendCmd+0x18>)
 801577c:	f7ff fe8f 	bl	801549e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8015780:	2104      	movs	r1, #4
 8015782:	4802      	ldr	r0, [pc, #8]	; (801578c <HW_IPCC_OT_SendCmd+0x18>)
 8015784:	f7ff fe35 	bl	80153f2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015788:	bf00      	nop
}
 801578a:	bd80      	pop	{r7, pc}
 801578c:	58000c00 	.word	0x58000c00

08015790 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8015794:	2110      	movs	r1, #16
 8015796:	4802      	ldr	r0, [pc, #8]	; (80157a0 <HW_IPCC_CLI_SendCmd+0x10>)
 8015798:	f7ff fe81 	bl	801549e <LL_C1_IPCC_SetFlag_CHx>

  return;
 801579c:	bf00      	nop
}
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	58000c00 	.word	0x58000c00

080157a4 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80157a8:	2104      	movs	r1, #4
 80157aa:	4804      	ldr	r0, [pc, #16]	; (80157bc <HW_IPCC_THREAD_SendAck+0x18>)
 80157ac:	f7ff fe69 	bl	8015482 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80157b0:	2104      	movs	r1, #4
 80157b2:	4802      	ldr	r0, [pc, #8]	; (80157bc <HW_IPCC_THREAD_SendAck+0x18>)
 80157b4:	f7ff fe42 	bl	801543c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80157b8:	bf00      	nop
}
 80157ba:	bd80      	pop	{r7, pc}
 80157bc:	58000c00 	.word	0x58000c00

080157c0 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80157c4:	2110      	movs	r1, #16
 80157c6:	4804      	ldr	r0, [pc, #16]	; (80157d8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80157c8:	f7ff fe5b 	bl	8015482 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80157cc:	2110      	movs	r1, #16
 80157ce:	4802      	ldr	r0, [pc, #8]	; (80157d8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 80157d0:	f7ff fe34 	bl	801543c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80157d4:	bf00      	nop
}
 80157d6:	bd80      	pop	{r7, pc}
 80157d8:	58000c00 	.word	0x58000c00

080157dc <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 80157e0:	2104      	movs	r1, #4
 80157e2:	4803      	ldr	r0, [pc, #12]	; (80157f0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 80157e4:	f7ff fe18 	bl	8015418 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 80157e8:	f7fe fc8a 	bl	8014100 <HW_IPCC_OT_CmdEvtNot>

  return;
 80157ec:	bf00      	nop
}
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	58000c00 	.word	0x58000c00

080157f4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80157f8:	2104      	movs	r1, #4
 80157fa:	4803      	ldr	r0, [pc, #12]	; (8015808 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 80157fc:	f7ff fe30 	bl	8015460 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8015800:	f7fe fc8a 	bl	8014118 <HW_IPCC_THREAD_EvtNot>

  return;
 8015804:	bf00      	nop
}
 8015806:	bd80      	pop	{r7, pc}
 8015808:	58000c00 	.word	0x58000c00

0801580c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 801580c:	b580      	push	{r7, lr}
 801580e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015810:	2110      	movs	r1, #16
 8015812:	4803      	ldr	r0, [pc, #12]	; (8015820 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8015814:	f7ff fe24 	bl	8015460 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8015818:	f7fe fc8a 	bl	8014130 <HW_IPCC_THREAD_CliEvtNot>

  return;
 801581c:	bf00      	nop
}
 801581e:	bd80      	pop	{r7, pc}
 8015820:	58000c00 	.word	0x58000c00

08015824 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801582c:	2108      	movs	r1, #8
 801582e:	480c      	ldr	r0, [pc, #48]	; (8015860 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015830:	f7ff fe44 	bl	80154bc <LL_C1_IPCC_IsActiveFlag_CHx>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	d007      	beq.n	801584a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801583a:	4a0a      	ldr	r2, [pc, #40]	; (8015864 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015840:	2108      	movs	r1, #8
 8015842:	4807      	ldr	r0, [pc, #28]	; (8015860 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015844:	f7ff fdd5 	bl	80153f2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8015848:	e006      	b.n	8015858 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801584e:	2108      	movs	r1, #8
 8015850:	4803      	ldr	r0, [pc, #12]	; (8015860 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015852:	f7ff fe24 	bl	801549e <LL_C1_IPCC_SetFlag_CHx>
  return;
 8015856:	bf00      	nop
}
 8015858:	3708      	adds	r7, #8
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	58000c00 	.word	0x58000c00
 8015864:	200276d4 	.word	0x200276d4

08015868 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015868:	b580      	push	{r7, lr}
 801586a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801586c:	2108      	movs	r1, #8
 801586e:	4806      	ldr	r0, [pc, #24]	; (8015888 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015870:	f7ff fdd2 	bl	8015418 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8015874:	4b05      	ldr	r3, [pc, #20]	; (801588c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801587a:	2108      	movs	r1, #8
 801587c:	4802      	ldr	r0, [pc, #8]	; (8015888 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801587e:	f7ff fe0e 	bl	801549e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015882:	bf00      	nop
}
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	58000c00 	.word	0x58000c00
 801588c:	200276d4 	.word	0x200276d4

08015890 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015894:	2108      	movs	r1, #8
 8015896:	4802      	ldr	r0, [pc, #8]	; (80158a0 <HW_IPCC_TRACES_Init+0x10>)
 8015898:	f7ff fdd0 	bl	801543c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801589c:	bf00      	nop
}
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	58000c00 	.word	0x58000c00

080158a4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80158a8:	f7fe fcd0 	bl	801424c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80158ac:	2108      	movs	r1, #8
 80158ae:	4802      	ldr	r0, [pc, #8]	; (80158b8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80158b0:	f7ff fde7 	bl	8015482 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80158b4:	bf00      	nop
}
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	58000c00 	.word	0x58000c00

080158bc <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80158bc:	b480      	push	{r7}
 80158be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80158c0:	4b05      	ldr	r3, [pc, #20]	; (80158d8 <UTIL_LPM_Init+0x1c>)
 80158c2:	2200      	movs	r2, #0
 80158c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80158c6:	4b05      	ldr	r3, [pc, #20]	; (80158dc <UTIL_LPM_Init+0x20>)
 80158c8:	2200      	movs	r2, #0
 80158ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80158cc:	bf00      	nop
 80158ce:	46bd      	mov	sp, r7
 80158d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d4:	4770      	bx	lr
 80158d6:	bf00      	nop
 80158d8:	200276d8 	.word	0x200276d8
 80158dc:	200276dc 	.word	0x200276dc

080158e0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80158e0:	b480      	push	{r7}
 80158e2:	b087      	sub	sp, #28
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	460b      	mov	r3, r1
 80158ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158ec:	f3ef 8310 	mrs	r3, PRIMASK
 80158f0:	613b      	str	r3, [r7, #16]
  return(result);
 80158f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80158f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80158f6:	b672      	cpsid	i
  
  switch(state)
 80158f8:	78fb      	ldrb	r3, [r7, #3]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d009      	beq.n	8015912 <UTIL_LPM_SetOffMode+0x32>
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d000      	beq.n	8015904 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8015902:	e00e      	b.n	8015922 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8015904:	4b0c      	ldr	r3, [pc, #48]	; (8015938 <UTIL_LPM_SetOffMode+0x58>)
 8015906:	681a      	ldr	r2, [r3, #0]
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	4313      	orrs	r3, r2
 801590c:	4a0a      	ldr	r2, [pc, #40]	; (8015938 <UTIL_LPM_SetOffMode+0x58>)
 801590e:	6013      	str	r3, [r2, #0]
      break;
 8015910:	e007      	b.n	8015922 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	43da      	mvns	r2, r3
 8015916:	4b08      	ldr	r3, [pc, #32]	; (8015938 <UTIL_LPM_SetOffMode+0x58>)
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	4013      	ands	r3, r2
 801591c:	4a06      	ldr	r2, [pc, #24]	; (8015938 <UTIL_LPM_SetOffMode+0x58>)
 801591e:	6013      	str	r3, [r2, #0]
      break;
 8015920:	bf00      	nop
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801592c:	bf00      	nop
 801592e:	371c      	adds	r7, #28
 8015930:	46bd      	mov	sp, r7
 8015932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015936:	4770      	bx	lr
 8015938:	200276dc 	.word	0x200276dc

0801593c <arm_power_f32>:
 801593c:	b430      	push	{r4, r5}
 801593e:	088d      	lsrs	r5, r1, #2
 8015940:	eddf 5a20 	vldr	s11, [pc, #128]	; 80159c4 <arm_power_f32+0x88>
 8015944:	d020      	beq.n	8015988 <arm_power_f32+0x4c>
 8015946:	f100 0310 	add.w	r3, r0, #16
 801594a:	462c      	mov	r4, r5
 801594c:	ed53 6a04 	vldr	s13, [r3, #-16]
 8015950:	ed13 7a03 	vldr	s14, [r3, #-12]
 8015954:	ed53 7a02 	vldr	s15, [r3, #-8]
 8015958:	ed13 6a01 	vldr	s12, [r3, #-4]
 801595c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015960:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015964:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801596c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015970:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015978:	3c01      	subs	r4, #1
 801597a:	f103 0310 	add.w	r3, r3, #16
 801597e:	ee76 5a27 	vadd.f32	s11, s12, s15
 8015982:	d1e3      	bne.n	801594c <arm_power_f32+0x10>
 8015984:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8015988:	f011 0103 	ands.w	r1, r1, #3
 801598c:	d015      	beq.n	80159ba <arm_power_f32+0x7e>
 801598e:	edd0 7a00 	vldr	s15, [r0]
 8015992:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015996:	3901      	subs	r1, #1
 8015998:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801599c:	d00d      	beq.n	80159ba <arm_power_f32+0x7e>
 801599e:	edd0 7a01 	vldr	s15, [r0, #4]
 80159a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80159a6:	2901      	cmp	r1, #1
 80159a8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80159ac:	d005      	beq.n	80159ba <arm_power_f32+0x7e>
 80159ae:	edd0 7a02 	vldr	s15, [r0, #8]
 80159b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80159b6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80159ba:	edc2 5a00 	vstr	s11, [r2]
 80159be:	bc30      	pop	{r4, r5}
 80159c0:	4770      	bx	lr
 80159c2:	bf00      	nop
 80159c4:	00000000 	.word	0x00000000

080159c8 <arm_mat_mult_f32>:
 80159c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159cc:	8845      	ldrh	r5, [r0, #2]
 80159ce:	880b      	ldrh	r3, [r1, #0]
 80159d0:	8806      	ldrh	r6, [r0, #0]
 80159d2:	6847      	ldr	r7, [r0, #4]
 80159d4:	6854      	ldr	r4, [r2, #4]
 80159d6:	6848      	ldr	r0, [r1, #4]
 80159d8:	b08b      	sub	sp, #44	; 0x2c
 80159da:	42ab      	cmp	r3, r5
 80159dc:	9109      	str	r1, [sp, #36]	; 0x24
 80159de:	9604      	str	r6, [sp, #16]
 80159e0:	8849      	ldrh	r1, [r1, #2]
 80159e2:	f040 808a 	bne.w	8015afa <arm_mat_mult_f32+0x132>
 80159e6:	8815      	ldrh	r5, [r2, #0]
 80159e8:	42b5      	cmp	r5, r6
 80159ea:	f040 8086 	bne.w	8015afa <arm_mat_mult_f32+0x132>
 80159ee:	8852      	ldrh	r2, [r2, #2]
 80159f0:	428a      	cmp	r2, r1
 80159f2:	f040 8082 	bne.w	8015afa <arm_mat_mult_f32+0x132>
 80159f6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80159fa:	1d01      	adds	r1, r0, #4
 80159fc:	0116      	lsls	r6, r2, #4
 80159fe:	9108      	str	r1, [sp, #32]
 8015a00:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8015a04:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8015a08:	9101      	str	r1, [sp, #4]
 8015a0a:	fb06 f108 	mul.w	r1, r6, r8
 8015a0e:	0095      	lsls	r5, r2, #2
 8015a10:	9103      	str	r1, [sp, #12]
 8015a12:	00d2      	lsls	r2, r2, #3
 8015a14:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8015a18:	f003 0903 	and.w	r9, r3, #3
 8015a1c:	009b      	lsls	r3, r3, #2
 8015a1e:	f107 0b10 	add.w	fp, r7, #16
 8015a22:	eb04 0a05 	add.w	sl, r4, r5
 8015a26:	9107      	str	r1, [sp, #28]
 8015a28:	9202      	str	r2, [sp, #8]
 8015a2a:	9306      	str	r3, [sp, #24]
 8015a2c:	f1ab 0310 	sub.w	r3, fp, #16
 8015a30:	9305      	str	r3, [sp, #20]
 8015a32:	9b07      	ldr	r3, [sp, #28]
 8015a34:	f8dd e020 	ldr.w	lr, [sp, #32]
 8015a38:	eb03 0c0a 	add.w	ip, r3, sl
 8015a3c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015b04 <arm_mat_mult_f32+0x13c>
 8015a40:	f1b8 0f00 	cmp.w	r8, #0
 8015a44:	d053      	beq.n	8015aee <arm_mat_mult_f32+0x126>
 8015a46:	9b02      	ldr	r3, [sp, #8]
 8015a48:	4644      	mov	r4, r8
 8015a4a:	18c1      	adds	r1, r0, r3
 8015a4c:	4602      	mov	r2, r0
 8015a4e:	465b      	mov	r3, fp
 8015a50:	ed92 6a00 	vldr	s12, [r2]
 8015a54:	ed13 7a04 	vldr	s14, [r3, #-16]
 8015a58:	ed53 4a03 	vldr	s9, [r3, #-12]
 8015a5c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8015a60:	ed91 5a00 	vldr	s10, [r1]
 8015a64:	ed53 5a01 	vldr	s11, [r3, #-4]
 8015a68:	1957      	adds	r7, r2, r5
 8015a6a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015a6e:	ed97 6a00 	vldr	s12, [r7]
 8015a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a76:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015a7a:	194f      	adds	r7, r1, r5
 8015a7c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015a80:	ee26 7a85 	vmul.f32	s14, s13, s10
 8015a84:	edd7 7a00 	vldr	s15, [r7]
 8015a88:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015a8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015a90:	3c01      	subs	r4, #1
 8015a92:	4432      	add	r2, r6
 8015a94:	4431      	add	r1, r6
 8015a96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a9a:	f103 0310 	add.w	r3, r3, #16
 8015a9e:	d1d7      	bne.n	8015a50 <arm_mat_mult_f32+0x88>
 8015aa0:	9b03      	ldr	r3, [sp, #12]
 8015aa2:	9a01      	ldr	r2, [sp, #4]
 8015aa4:	4418      	add	r0, r3
 8015aa6:	f1b9 0f00 	cmp.w	r9, #0
 8015aaa:	d00b      	beq.n	8015ac4 <arm_mat_mult_f32+0xfc>
 8015aac:	464b      	mov	r3, r9
 8015aae:	edd0 6a00 	vldr	s13, [r0]
 8015ab2:	ecb2 7a01 	vldmia	r2!, {s14}
 8015ab6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015aba:	3b01      	subs	r3, #1
 8015abc:	4428      	add	r0, r5
 8015abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ac2:	d1f4      	bne.n	8015aae <arm_mat_mult_f32+0xe6>
 8015ac4:	ecec 7a01 	vstmia	ip!, {s15}
 8015ac8:	45d4      	cmp	ip, sl
 8015aca:	4670      	mov	r0, lr
 8015acc:	f10e 0e04 	add.w	lr, lr, #4
 8015ad0:	d1b4      	bne.n	8015a3c <arm_mat_mult_f32+0x74>
 8015ad2:	9a01      	ldr	r2, [sp, #4]
 8015ad4:	9b06      	ldr	r3, [sp, #24]
 8015ad6:	4611      	mov	r1, r2
 8015ad8:	4419      	add	r1, r3
 8015ada:	449b      	add	fp, r3
 8015adc:	9b04      	ldr	r3, [sp, #16]
 8015ade:	9101      	str	r1, [sp, #4]
 8015ae0:	3b01      	subs	r3, #1
 8015ae2:	44aa      	add	sl, r5
 8015ae4:	9304      	str	r3, [sp, #16]
 8015ae6:	d004      	beq.n	8015af2 <arm_mat_mult_f32+0x12a>
 8015ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aea:	6858      	ldr	r0, [r3, #4]
 8015aec:	e79e      	b.n	8015a2c <arm_mat_mult_f32+0x64>
 8015aee:	9a05      	ldr	r2, [sp, #20]
 8015af0:	e7d9      	b.n	8015aa6 <arm_mat_mult_f32+0xde>
 8015af2:	4618      	mov	r0, r3
 8015af4:	b00b      	add	sp, #44	; 0x2c
 8015af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015afa:	f06f 0002 	mvn.w	r0, #2
 8015afe:	b00b      	add	sp, #44	; 0x2c
 8015b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b04:	00000000 	.word	0x00000000

08015b08 <arm_sin_f32>:
 8015b08:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015b88 <arm_sin_f32+0x80>
 8015b0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015b10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015b1c:	d504      	bpl.n	8015b28 <arm_sin_f32+0x20>
 8015b1e:	ee17 3a90 	vmov	r3, s15
 8015b22:	3b01      	subs	r3, #1
 8015b24:	ee07 3a90 	vmov	s15, r3
 8015b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b2c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015b8c <arm_sin_f32+0x84>
 8015b30:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b34:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015b38:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015b3c:	ee17 3a90 	vmov	r3, s15
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b46:	d21a      	bcs.n	8015b7e <arm_sin_f32+0x76>
 8015b48:	ee07 3a90 	vmov	s15, r3
 8015b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b50:	1c59      	adds	r1, r3, #1
 8015b52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015b56:	4a0e      	ldr	r2, [pc, #56]	; (8015b90 <arm_sin_f32+0x88>)
 8015b58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015b60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015b64:	ed93 7a00 	vldr	s14, [r3]
 8015b68:	edd2 6a00 	vldr	s13, [r2]
 8015b6c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015b70:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b78:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015b7c:	4770      	bx	lr
 8015b7e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015b82:	2101      	movs	r1, #1
 8015b84:	2300      	movs	r3, #0
 8015b86:	e7e6      	b.n	8015b56 <arm_sin_f32+0x4e>
 8015b88:	3e22f983 	.word	0x3e22f983
 8015b8c:	44000000 	.word	0x44000000
 8015b90:	080179f8 	.word	0x080179f8

08015b94 <arm_cos_f32>:
 8015b94:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015c1c <arm_cos_f32+0x88>
 8015b98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015b9c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015ba0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015ba4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015bb0:	d504      	bpl.n	8015bbc <arm_cos_f32+0x28>
 8015bb2:	ee17 3a90 	vmov	r3, s15
 8015bb6:	3b01      	subs	r3, #1
 8015bb8:	ee07 3a90 	vmov	s15, r3
 8015bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015bc0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8015c20 <arm_cos_f32+0x8c>
 8015bc4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015bc8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015bcc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015bd0:	ee17 3a90 	vmov	r3, s15
 8015bd4:	b29b      	uxth	r3, r3
 8015bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015bda:	d21a      	bcs.n	8015c12 <arm_cos_f32+0x7e>
 8015bdc:	ee07 3a90 	vmov	s15, r3
 8015be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015be4:	1c59      	adds	r1, r3, #1
 8015be6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015bea:	4a0e      	ldr	r2, [pc, #56]	; (8015c24 <arm_cos_f32+0x90>)
 8015bec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015bf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015bf4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015bf8:	ed93 7a00 	vldr	s14, [r3]
 8015bfc:	edd2 6a00 	vldr	s13, [r2]
 8015c00:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c04:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c0c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015c10:	4770      	bx	lr
 8015c12:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015c16:	2101      	movs	r1, #1
 8015c18:	2300      	movs	r3, #0
 8015c1a:	e7e6      	b.n	8015bea <arm_cos_f32+0x56>
 8015c1c:	3e22f983 	.word	0x3e22f983
 8015c20:	44000000 	.word	0x44000000
 8015c24:	080179f8 	.word	0x080179f8

08015c28 <arm_sub_f32>:
 8015c28:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015c2c:	b4f0      	push	{r4, r5, r6, r7}
 8015c2e:	d033      	beq.n	8015c98 <arm_sub_f32+0x70>
 8015c30:	f100 0610 	add.w	r6, r0, #16
 8015c34:	f101 0510 	add.w	r5, r1, #16
 8015c38:	f102 0410 	add.w	r4, r2, #16
 8015c3c:	4667      	mov	r7, ip
 8015c3e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015c42:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015c46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c4a:	3f01      	subs	r7, #1
 8015c4c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015c50:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015c54:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015c58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c5c:	f106 0610 	add.w	r6, r6, #16
 8015c60:	ed44 7a03 	vstr	s15, [r4, #-12]
 8015c64:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015c68:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8015c6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c70:	f105 0510 	add.w	r5, r5, #16
 8015c74:	ed44 7a02 	vstr	s15, [r4, #-8]
 8015c78:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8015c7c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8015c80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c84:	f104 0410 	add.w	r4, r4, #16
 8015c88:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8015c8c:	d1d7      	bne.n	8015c3e <arm_sub_f32+0x16>
 8015c8e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8015c92:	4420      	add	r0, r4
 8015c94:	4421      	add	r1, r4
 8015c96:	4422      	add	r2, r4
 8015c98:	f013 0303 	ands.w	r3, r3, #3
 8015c9c:	d01b      	beq.n	8015cd6 <arm_sub_f32+0xae>
 8015c9e:	edd0 7a00 	vldr	s15, [r0]
 8015ca2:	ed91 7a00 	vldr	s14, [r1]
 8015ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015caa:	3b01      	subs	r3, #1
 8015cac:	edc2 7a00 	vstr	s15, [r2]
 8015cb0:	d011      	beq.n	8015cd6 <arm_sub_f32+0xae>
 8015cb2:	edd0 7a01 	vldr	s15, [r0, #4]
 8015cb6:	ed91 7a01 	vldr	s14, [r1, #4]
 8015cba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cbe:	2b01      	cmp	r3, #1
 8015cc0:	edc2 7a01 	vstr	s15, [r2, #4]
 8015cc4:	d007      	beq.n	8015cd6 <arm_sub_f32+0xae>
 8015cc6:	edd0 7a02 	vldr	s15, [r0, #8]
 8015cca:	ed91 7a02 	vldr	s14, [r1, #8]
 8015cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cd2:	edc2 7a02 	vstr	s15, [r2, #8]
 8015cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop

08015cdc <arm_scale_f32>:
 8015cdc:	b470      	push	{r4, r5, r6}
 8015cde:	0896      	lsrs	r6, r2, #2
 8015ce0:	d025      	beq.n	8015d2e <arm_scale_f32+0x52>
 8015ce2:	f100 0410 	add.w	r4, r0, #16
 8015ce6:	f101 0310 	add.w	r3, r1, #16
 8015cea:	4635      	mov	r5, r6
 8015cec:	ed54 7a04 	vldr	s15, [r4, #-16]
 8015cf0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015cf4:	3d01      	subs	r5, #1
 8015cf6:	ed43 7a04 	vstr	s15, [r3, #-16]
 8015cfa:	ed54 7a03 	vldr	s15, [r4, #-12]
 8015cfe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d02:	f104 0410 	add.w	r4, r4, #16
 8015d06:	ed43 7a03 	vstr	s15, [r3, #-12]
 8015d0a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8015d0e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d12:	f103 0310 	add.w	r3, r3, #16
 8015d16:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8015d1a:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8015d1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d22:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8015d26:	d1e1      	bne.n	8015cec <arm_scale_f32+0x10>
 8015d28:	0136      	lsls	r6, r6, #4
 8015d2a:	4430      	add	r0, r6
 8015d2c:	4431      	add	r1, r6
 8015d2e:	f012 0203 	ands.w	r2, r2, #3
 8015d32:	d015      	beq.n	8015d60 <arm_scale_f32+0x84>
 8015d34:	edd0 7a00 	vldr	s15, [r0]
 8015d38:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d3c:	3a01      	subs	r2, #1
 8015d3e:	edc1 7a00 	vstr	s15, [r1]
 8015d42:	d00d      	beq.n	8015d60 <arm_scale_f32+0x84>
 8015d44:	edd0 7a01 	vldr	s15, [r0, #4]
 8015d48:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015d4c:	2a01      	cmp	r2, #1
 8015d4e:	edc1 7a01 	vstr	s15, [r1, #4]
 8015d52:	d005      	beq.n	8015d60 <arm_scale_f32+0x84>
 8015d54:	edd0 7a02 	vldr	s15, [r0, #8]
 8015d58:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d5c:	ed81 0a02 	vstr	s0, [r1, #8]
 8015d60:	bc70      	pop	{r4, r5, r6}
 8015d62:	4770      	bx	lr

08015d64 <arm_dot_prod_f32>:
 8015d64:	b4f0      	push	{r4, r5, r6, r7}
 8015d66:	0897      	lsrs	r7, r2, #2
 8015d68:	eddf 5a29 	vldr	s11, [pc, #164]	; 8015e10 <arm_dot_prod_f32+0xac>
 8015d6c:	d02d      	beq.n	8015dca <arm_dot_prod_f32+0x66>
 8015d6e:	f100 0510 	add.w	r5, r0, #16
 8015d72:	f101 0410 	add.w	r4, r1, #16
 8015d76:	463e      	mov	r6, r7
 8015d78:	ed55 6a04 	vldr	s13, [r5, #-16]
 8015d7c:	ed54 3a04 	vldr	s7, [r4, #-16]
 8015d80:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015d84:	ed14 4a03 	vldr	s8, [r4, #-12]
 8015d88:	ed55 7a02 	vldr	s15, [r5, #-8]
 8015d8c:	ed54 4a02 	vldr	s9, [r4, #-8]
 8015d90:	ed15 6a01 	vldr	s12, [r5, #-4]
 8015d94:	ed14 5a01 	vldr	s10, [r4, #-4]
 8015d98:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8015d9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015da0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015da4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015da8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015dac:	ee66 6a05 	vmul.f32	s13, s12, s10
 8015db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015db4:	3e01      	subs	r6, #1
 8015db6:	f105 0510 	add.w	r5, r5, #16
 8015dba:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8015dbe:	f104 0410 	add.w	r4, r4, #16
 8015dc2:	d1d9      	bne.n	8015d78 <arm_dot_prod_f32+0x14>
 8015dc4:	013f      	lsls	r7, r7, #4
 8015dc6:	4438      	add	r0, r7
 8015dc8:	4439      	add	r1, r7
 8015dca:	f012 0203 	ands.w	r2, r2, #3
 8015dce:	d01b      	beq.n	8015e08 <arm_dot_prod_f32+0xa4>
 8015dd0:	edd1 7a00 	vldr	s15, [r1]
 8015dd4:	ed90 7a00 	vldr	s14, [r0]
 8015dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ddc:	3a01      	subs	r2, #1
 8015dde:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015de2:	d011      	beq.n	8015e08 <arm_dot_prod_f32+0xa4>
 8015de4:	edd1 7a01 	vldr	s15, [r1, #4]
 8015de8:	ed90 7a01 	vldr	s14, [r0, #4]
 8015dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015df0:	2a01      	cmp	r2, #1
 8015df2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015df6:	d007      	beq.n	8015e08 <arm_dot_prod_f32+0xa4>
 8015df8:	edd0 7a02 	vldr	s15, [r0, #8]
 8015dfc:	ed91 7a02 	vldr	s14, [r1, #8]
 8015e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e04:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8015e08:	edc3 5a00 	vstr	s11, [r3]
 8015e0c:	bcf0      	pop	{r4, r5, r6, r7}
 8015e0e:	4770      	bx	lr
 8015e10:	00000000 	.word	0x00000000

08015e14 <arm_add_f32>:
 8015e14:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8015e18:	b4f0      	push	{r4, r5, r6, r7}
 8015e1a:	d033      	beq.n	8015e84 <arm_add_f32+0x70>
 8015e1c:	f100 0610 	add.w	r6, r0, #16
 8015e20:	f101 0510 	add.w	r5, r1, #16
 8015e24:	f102 0410 	add.w	r4, r2, #16
 8015e28:	4667      	mov	r7, ip
 8015e2a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8015e2e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8015e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e36:	3f01      	subs	r7, #1
 8015e38:	ed44 7a04 	vstr	s15, [r4, #-16]
 8015e3c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8015e40:	ed56 7a03 	vldr	s15, [r6, #-12]
 8015e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e48:	f106 0610 	add.w	r6, r6, #16
 8015e4c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8015e50:	ed15 7a02 	vldr	s14, [r5, #-8]
 8015e54:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8015e58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e5c:	f105 0510 	add.w	r5, r5, #16
 8015e60:	ed44 7a02 	vstr	s15, [r4, #-8]
 8015e64:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8015e68:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8015e6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e70:	f104 0410 	add.w	r4, r4, #16
 8015e74:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8015e78:	d1d7      	bne.n	8015e2a <arm_add_f32+0x16>
 8015e7a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8015e7e:	4420      	add	r0, r4
 8015e80:	4421      	add	r1, r4
 8015e82:	4422      	add	r2, r4
 8015e84:	f013 0303 	ands.w	r3, r3, #3
 8015e88:	d01b      	beq.n	8015ec2 <arm_add_f32+0xae>
 8015e8a:	edd1 7a00 	vldr	s15, [r1]
 8015e8e:	ed90 7a00 	vldr	s14, [r0]
 8015e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e96:	3b01      	subs	r3, #1
 8015e98:	edc2 7a00 	vstr	s15, [r2]
 8015e9c:	d011      	beq.n	8015ec2 <arm_add_f32+0xae>
 8015e9e:	edd0 7a01 	vldr	s15, [r0, #4]
 8015ea2:	ed91 7a01 	vldr	s14, [r1, #4]
 8015ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015eaa:	2b01      	cmp	r3, #1
 8015eac:	edc2 7a01 	vstr	s15, [r2, #4]
 8015eb0:	d007      	beq.n	8015ec2 <arm_add_f32+0xae>
 8015eb2:	edd0 7a02 	vldr	s15, [r0, #8]
 8015eb6:	ed91 7a02 	vldr	s14, [r1, #8]
 8015eba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ebe:	edc2 7a02 	vstr	s15, [r2, #8]
 8015ec2:	bcf0      	pop	{r4, r5, r6, r7}
 8015ec4:	4770      	bx	lr
 8015ec6:	bf00      	nop

08015ec8 <__errno>:
 8015ec8:	4b01      	ldr	r3, [pc, #4]	; (8015ed0 <__errno+0x8>)
 8015eca:	6818      	ldr	r0, [r3, #0]
 8015ecc:	4770      	bx	lr
 8015ece:	bf00      	nop
 8015ed0:	200000f8 	.word	0x200000f8

08015ed4 <__libc_init_array>:
 8015ed4:	b570      	push	{r4, r5, r6, lr}
 8015ed6:	4e0d      	ldr	r6, [pc, #52]	; (8015f0c <__libc_init_array+0x38>)
 8015ed8:	4c0d      	ldr	r4, [pc, #52]	; (8015f10 <__libc_init_array+0x3c>)
 8015eda:	1ba4      	subs	r4, r4, r6
 8015edc:	10a4      	asrs	r4, r4, #2
 8015ede:	2500      	movs	r5, #0
 8015ee0:	42a5      	cmp	r5, r4
 8015ee2:	d109      	bne.n	8015ef8 <__libc_init_array+0x24>
 8015ee4:	4e0b      	ldr	r6, [pc, #44]	; (8015f14 <__libc_init_array+0x40>)
 8015ee6:	4c0c      	ldr	r4, [pc, #48]	; (8015f18 <__libc_init_array+0x44>)
 8015ee8:	f001 f8d4 	bl	8017094 <_init>
 8015eec:	1ba4      	subs	r4, r4, r6
 8015eee:	10a4      	asrs	r4, r4, #2
 8015ef0:	2500      	movs	r5, #0
 8015ef2:	42a5      	cmp	r5, r4
 8015ef4:	d105      	bne.n	8015f02 <__libc_init_array+0x2e>
 8015ef6:	bd70      	pop	{r4, r5, r6, pc}
 8015ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015efc:	4798      	blx	r3
 8015efe:	3501      	adds	r5, #1
 8015f00:	e7ee      	b.n	8015ee0 <__libc_init_array+0xc>
 8015f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f06:	4798      	blx	r3
 8015f08:	3501      	adds	r5, #1
 8015f0a:	e7f2      	b.n	8015ef2 <__libc_init_array+0x1e>
 8015f0c:	080182b0 	.word	0x080182b0
 8015f10:	080182b0 	.word	0x080182b0
 8015f14:	080182b0 	.word	0x080182b0
 8015f18:	080182b4 	.word	0x080182b4

08015f1c <memcpy>:
 8015f1c:	b510      	push	{r4, lr}
 8015f1e:	1e43      	subs	r3, r0, #1
 8015f20:	440a      	add	r2, r1
 8015f22:	4291      	cmp	r1, r2
 8015f24:	d100      	bne.n	8015f28 <memcpy+0xc>
 8015f26:	bd10      	pop	{r4, pc}
 8015f28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f30:	e7f7      	b.n	8015f22 <memcpy+0x6>

08015f32 <memset>:
 8015f32:	4402      	add	r2, r0
 8015f34:	4603      	mov	r3, r0
 8015f36:	4293      	cmp	r3, r2
 8015f38:	d100      	bne.n	8015f3c <memset+0xa>
 8015f3a:	4770      	bx	lr
 8015f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8015f40:	e7f9      	b.n	8015f36 <memset+0x4>
	...

08015f44 <pow>:
 8015f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f48:	ed2d 8b04 	vpush	{d8-d9}
 8015f4c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016220 <pow+0x2dc>
 8015f50:	b08d      	sub	sp, #52	; 0x34
 8015f52:	ec57 6b10 	vmov	r6, r7, d0
 8015f56:	ec55 4b11 	vmov	r4, r5, d1
 8015f5a:	f000 f9b5 	bl	80162c8 <__ieee754_pow>
 8015f5e:	f999 3000 	ldrsb.w	r3, [r9]
 8015f62:	9300      	str	r3, [sp, #0]
 8015f64:	3301      	adds	r3, #1
 8015f66:	eeb0 8a40 	vmov.f32	s16, s0
 8015f6a:	eef0 8a60 	vmov.f32	s17, s1
 8015f6e:	46c8      	mov	r8, r9
 8015f70:	d05f      	beq.n	8016032 <pow+0xee>
 8015f72:	4622      	mov	r2, r4
 8015f74:	462b      	mov	r3, r5
 8015f76:	4620      	mov	r0, r4
 8015f78:	4629      	mov	r1, r5
 8015f7a:	f7ea fd61 	bl	8000a40 <__aeabi_dcmpun>
 8015f7e:	4683      	mov	fp, r0
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d156      	bne.n	8016032 <pow+0xee>
 8015f84:	4632      	mov	r2, r6
 8015f86:	463b      	mov	r3, r7
 8015f88:	4630      	mov	r0, r6
 8015f8a:	4639      	mov	r1, r7
 8015f8c:	f7ea fd58 	bl	8000a40 <__aeabi_dcmpun>
 8015f90:	9001      	str	r0, [sp, #4]
 8015f92:	b1e8      	cbz	r0, 8015fd0 <pow+0x8c>
 8015f94:	2200      	movs	r2, #0
 8015f96:	2300      	movs	r3, #0
 8015f98:	4620      	mov	r0, r4
 8015f9a:	4629      	mov	r1, r5
 8015f9c:	f7ea fd1e 	bl	80009dc <__aeabi_dcmpeq>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d046      	beq.n	8016032 <pow+0xee>
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	9302      	str	r3, [sp, #8]
 8015fa8:	4b96      	ldr	r3, [pc, #600]	; (8016204 <pow+0x2c0>)
 8015faa:	9303      	str	r3, [sp, #12]
 8015fac:	4b96      	ldr	r3, [pc, #600]	; (8016208 <pow+0x2c4>)
 8015fae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015fb8:	9b00      	ldr	r3, [sp, #0]
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015fc0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015fc4:	d033      	beq.n	801602e <pow+0xea>
 8015fc6:	a802      	add	r0, sp, #8
 8015fc8:	f000 ff50 	bl	8016e6c <matherr>
 8015fcc:	bb48      	cbnz	r0, 8016022 <pow+0xde>
 8015fce:	e05d      	b.n	801608c <pow+0x148>
 8015fd0:	f04f 0a00 	mov.w	sl, #0
 8015fd4:	f04f 0b00 	mov.w	fp, #0
 8015fd8:	4652      	mov	r2, sl
 8015fda:	465b      	mov	r3, fp
 8015fdc:	4630      	mov	r0, r6
 8015fde:	4639      	mov	r1, r7
 8015fe0:	f7ea fcfc 	bl	80009dc <__aeabi_dcmpeq>
 8015fe4:	ec4b ab19 	vmov	d9, sl, fp
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d054      	beq.n	8016096 <pow+0x152>
 8015fec:	4652      	mov	r2, sl
 8015fee:	465b      	mov	r3, fp
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	4629      	mov	r1, r5
 8015ff4:	f7ea fcf2 	bl	80009dc <__aeabi_dcmpeq>
 8015ff8:	4680      	mov	r8, r0
 8015ffa:	b318      	cbz	r0, 8016044 <pow+0x100>
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	9302      	str	r3, [sp, #8]
 8016000:	4b80      	ldr	r3, [pc, #512]	; (8016204 <pow+0x2c0>)
 8016002:	9303      	str	r3, [sp, #12]
 8016004:	9b01      	ldr	r3, [sp, #4]
 8016006:	930a      	str	r3, [sp, #40]	; 0x28
 8016008:	9b00      	ldr	r3, [sp, #0]
 801600a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801600e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016012:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d0d5      	beq.n	8015fc6 <pow+0x82>
 801601a:	4b7b      	ldr	r3, [pc, #492]	; (8016208 <pow+0x2c4>)
 801601c:	2200      	movs	r2, #0
 801601e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016024:	b11b      	cbz	r3, 801602e <pow+0xea>
 8016026:	f7ff ff4f 	bl	8015ec8 <__errno>
 801602a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801602c:	6003      	str	r3, [r0, #0]
 801602e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016032:	eeb0 0a48 	vmov.f32	s0, s16
 8016036:	eef0 0a68 	vmov.f32	s1, s17
 801603a:	b00d      	add	sp, #52	; 0x34
 801603c:	ecbd 8b04 	vpop	{d8-d9}
 8016040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016044:	ec45 4b10 	vmov	d0, r4, r5
 8016048:	f000 ff08 	bl	8016e5c <finite>
 801604c:	2800      	cmp	r0, #0
 801604e:	d0f0      	beq.n	8016032 <pow+0xee>
 8016050:	4652      	mov	r2, sl
 8016052:	465b      	mov	r3, fp
 8016054:	4620      	mov	r0, r4
 8016056:	4629      	mov	r1, r5
 8016058:	f7ea fcca 	bl	80009f0 <__aeabi_dcmplt>
 801605c:	2800      	cmp	r0, #0
 801605e:	d0e8      	beq.n	8016032 <pow+0xee>
 8016060:	2301      	movs	r3, #1
 8016062:	9302      	str	r3, [sp, #8]
 8016064:	4b67      	ldr	r3, [pc, #412]	; (8016204 <pow+0x2c0>)
 8016066:	9303      	str	r3, [sp, #12]
 8016068:	f999 3000 	ldrsb.w	r3, [r9]
 801606c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8016070:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016074:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016078:	b913      	cbnz	r3, 8016080 <pow+0x13c>
 801607a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801607e:	e7a2      	b.n	8015fc6 <pow+0x82>
 8016080:	4962      	ldr	r1, [pc, #392]	; (801620c <pow+0x2c8>)
 8016082:	2000      	movs	r0, #0
 8016084:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016088:	2b02      	cmp	r3, #2
 801608a:	d19c      	bne.n	8015fc6 <pow+0x82>
 801608c:	f7ff ff1c 	bl	8015ec8 <__errno>
 8016090:	2321      	movs	r3, #33	; 0x21
 8016092:	6003      	str	r3, [r0, #0]
 8016094:	e7c5      	b.n	8016022 <pow+0xde>
 8016096:	eeb0 0a48 	vmov.f32	s0, s16
 801609a:	eef0 0a68 	vmov.f32	s1, s17
 801609e:	f000 fedd 	bl	8016e5c <finite>
 80160a2:	9000      	str	r0, [sp, #0]
 80160a4:	2800      	cmp	r0, #0
 80160a6:	f040 8081 	bne.w	80161ac <pow+0x268>
 80160aa:	ec47 6b10 	vmov	d0, r6, r7
 80160ae:	f000 fed5 	bl	8016e5c <finite>
 80160b2:	2800      	cmp	r0, #0
 80160b4:	d07a      	beq.n	80161ac <pow+0x268>
 80160b6:	ec45 4b10 	vmov	d0, r4, r5
 80160ba:	f000 fecf 	bl	8016e5c <finite>
 80160be:	2800      	cmp	r0, #0
 80160c0:	d074      	beq.n	80161ac <pow+0x268>
 80160c2:	ec53 2b18 	vmov	r2, r3, d8
 80160c6:	ee18 0a10 	vmov	r0, s16
 80160ca:	4619      	mov	r1, r3
 80160cc:	f7ea fcb8 	bl	8000a40 <__aeabi_dcmpun>
 80160d0:	f999 9000 	ldrsb.w	r9, [r9]
 80160d4:	4b4b      	ldr	r3, [pc, #300]	; (8016204 <pow+0x2c0>)
 80160d6:	b1b0      	cbz	r0, 8016106 <pow+0x1c2>
 80160d8:	2201      	movs	r2, #1
 80160da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80160de:	9b00      	ldr	r3, [sp, #0]
 80160e0:	930a      	str	r3, [sp, #40]	; 0x28
 80160e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80160e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80160ea:	f1b9 0f00 	cmp.w	r9, #0
 80160ee:	d0c4      	beq.n	801607a <pow+0x136>
 80160f0:	4652      	mov	r2, sl
 80160f2:	465b      	mov	r3, fp
 80160f4:	4650      	mov	r0, sl
 80160f6:	4659      	mov	r1, fp
 80160f8:	f7ea fb32 	bl	8000760 <__aeabi_ddiv>
 80160fc:	f1b9 0f02 	cmp.w	r9, #2
 8016100:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016104:	e7c1      	b.n	801608a <pow+0x146>
 8016106:	2203      	movs	r2, #3
 8016108:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801610c:	900a      	str	r0, [sp, #40]	; 0x28
 801610e:	4629      	mov	r1, r5
 8016110:	4620      	mov	r0, r4
 8016112:	2200      	movs	r2, #0
 8016114:	4b3e      	ldr	r3, [pc, #248]	; (8016210 <pow+0x2cc>)
 8016116:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801611a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801611e:	f7ea f9f5 	bl	800050c <__aeabi_dmul>
 8016122:	4604      	mov	r4, r0
 8016124:	460d      	mov	r5, r1
 8016126:	f1b9 0f00 	cmp.w	r9, #0
 801612a:	d124      	bne.n	8016176 <pow+0x232>
 801612c:	4b39      	ldr	r3, [pc, #228]	; (8016214 <pow+0x2d0>)
 801612e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016132:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016136:	4630      	mov	r0, r6
 8016138:	4652      	mov	r2, sl
 801613a:	465b      	mov	r3, fp
 801613c:	4639      	mov	r1, r7
 801613e:	f7ea fc57 	bl	80009f0 <__aeabi_dcmplt>
 8016142:	2800      	cmp	r0, #0
 8016144:	d056      	beq.n	80161f4 <pow+0x2b0>
 8016146:	ec45 4b10 	vmov	d0, r4, r5
 801614a:	f000 fe99 	bl	8016e80 <rint>
 801614e:	4622      	mov	r2, r4
 8016150:	462b      	mov	r3, r5
 8016152:	ec51 0b10 	vmov	r0, r1, d0
 8016156:	f7ea fc41 	bl	80009dc <__aeabi_dcmpeq>
 801615a:	b920      	cbnz	r0, 8016166 <pow+0x222>
 801615c:	4b2e      	ldr	r3, [pc, #184]	; (8016218 <pow+0x2d4>)
 801615e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016162:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016166:	f998 3000 	ldrsb.w	r3, [r8]
 801616a:	2b02      	cmp	r3, #2
 801616c:	d142      	bne.n	80161f4 <pow+0x2b0>
 801616e:	f7ff feab 	bl	8015ec8 <__errno>
 8016172:	2322      	movs	r3, #34	; 0x22
 8016174:	e78d      	b.n	8016092 <pow+0x14e>
 8016176:	4b29      	ldr	r3, [pc, #164]	; (801621c <pow+0x2d8>)
 8016178:	2200      	movs	r2, #0
 801617a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801617e:	4630      	mov	r0, r6
 8016180:	4652      	mov	r2, sl
 8016182:	465b      	mov	r3, fp
 8016184:	4639      	mov	r1, r7
 8016186:	f7ea fc33 	bl	80009f0 <__aeabi_dcmplt>
 801618a:	2800      	cmp	r0, #0
 801618c:	d0eb      	beq.n	8016166 <pow+0x222>
 801618e:	ec45 4b10 	vmov	d0, r4, r5
 8016192:	f000 fe75 	bl	8016e80 <rint>
 8016196:	4622      	mov	r2, r4
 8016198:	462b      	mov	r3, r5
 801619a:	ec51 0b10 	vmov	r0, r1, d0
 801619e:	f7ea fc1d 	bl	80009dc <__aeabi_dcmpeq>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d1df      	bne.n	8016166 <pow+0x222>
 80161a6:	2200      	movs	r2, #0
 80161a8:	4b18      	ldr	r3, [pc, #96]	; (801620c <pow+0x2c8>)
 80161aa:	e7da      	b.n	8016162 <pow+0x21e>
 80161ac:	2200      	movs	r2, #0
 80161ae:	2300      	movs	r3, #0
 80161b0:	ec51 0b18 	vmov	r0, r1, d8
 80161b4:	f7ea fc12 	bl	80009dc <__aeabi_dcmpeq>
 80161b8:	2800      	cmp	r0, #0
 80161ba:	f43f af3a 	beq.w	8016032 <pow+0xee>
 80161be:	ec47 6b10 	vmov	d0, r6, r7
 80161c2:	f000 fe4b 	bl	8016e5c <finite>
 80161c6:	2800      	cmp	r0, #0
 80161c8:	f43f af33 	beq.w	8016032 <pow+0xee>
 80161cc:	ec45 4b10 	vmov	d0, r4, r5
 80161d0:	f000 fe44 	bl	8016e5c <finite>
 80161d4:	2800      	cmp	r0, #0
 80161d6:	f43f af2c 	beq.w	8016032 <pow+0xee>
 80161da:	2304      	movs	r3, #4
 80161dc:	9302      	str	r3, [sp, #8]
 80161de:	4b09      	ldr	r3, [pc, #36]	; (8016204 <pow+0x2c0>)
 80161e0:	9303      	str	r3, [sp, #12]
 80161e2:	2300      	movs	r3, #0
 80161e4:	930a      	str	r3, [sp, #40]	; 0x28
 80161e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80161ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80161ee:	ed8d 9b08 	vstr	d9, [sp, #32]
 80161f2:	e7b8      	b.n	8016166 <pow+0x222>
 80161f4:	a802      	add	r0, sp, #8
 80161f6:	f000 fe39 	bl	8016e6c <matherr>
 80161fa:	2800      	cmp	r0, #0
 80161fc:	f47f af11 	bne.w	8016022 <pow+0xde>
 8016200:	e7b5      	b.n	801616e <pow+0x22a>
 8016202:	bf00      	nop
 8016204:	0801825c 	.word	0x0801825c
 8016208:	3ff00000 	.word	0x3ff00000
 801620c:	fff00000 	.word	0xfff00000
 8016210:	3fe00000 	.word	0x3fe00000
 8016214:	47efffff 	.word	0x47efffff
 8016218:	c7efffff 	.word	0xc7efffff
 801621c:	7ff00000 	.word	0x7ff00000
 8016220:	2000015c 	.word	0x2000015c

08016224 <sqrtf>:
 8016224:	b510      	push	{r4, lr}
 8016226:	ed2d 8b02 	vpush	{d8}
 801622a:	b08a      	sub	sp, #40	; 0x28
 801622c:	eeb0 8a40 	vmov.f32	s16, s0
 8016230:	f000 fe08 	bl	8016e44 <__ieee754_sqrtf>
 8016234:	4b21      	ldr	r3, [pc, #132]	; (80162bc <sqrtf+0x98>)
 8016236:	f993 4000 	ldrsb.w	r4, [r3]
 801623a:	1c63      	adds	r3, r4, #1
 801623c:	d02c      	beq.n	8016298 <sqrtf+0x74>
 801623e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016246:	d627      	bvs.n	8016298 <sqrtf+0x74>
 8016248:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801624c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016250:	d522      	bpl.n	8016298 <sqrtf+0x74>
 8016252:	2301      	movs	r3, #1
 8016254:	9300      	str	r3, [sp, #0]
 8016256:	4b1a      	ldr	r3, [pc, #104]	; (80162c0 <sqrtf+0x9c>)
 8016258:	9301      	str	r3, [sp, #4]
 801625a:	ee18 0a10 	vmov	r0, s16
 801625e:	2300      	movs	r3, #0
 8016260:	9308      	str	r3, [sp, #32]
 8016262:	f7ea f8fb 	bl	800045c <__aeabi_f2d>
 8016266:	2200      	movs	r2, #0
 8016268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801626c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016270:	2300      	movs	r3, #0
 8016272:	b9ac      	cbnz	r4, 80162a0 <sqrtf+0x7c>
 8016274:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016278:	4668      	mov	r0, sp
 801627a:	f000 fdf7 	bl	8016e6c <matherr>
 801627e:	b1b8      	cbz	r0, 80162b0 <sqrtf+0x8c>
 8016280:	9b08      	ldr	r3, [sp, #32]
 8016282:	b11b      	cbz	r3, 801628c <sqrtf+0x68>
 8016284:	f7ff fe20 	bl	8015ec8 <__errno>
 8016288:	9b08      	ldr	r3, [sp, #32]
 801628a:	6003      	str	r3, [r0, #0]
 801628c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016290:	f7ea fbec 	bl	8000a6c <__aeabi_d2f>
 8016294:	ee00 0a10 	vmov	s0, r0
 8016298:	b00a      	add	sp, #40	; 0x28
 801629a:	ecbd 8b02 	vpop	{d8}
 801629e:	bd10      	pop	{r4, pc}
 80162a0:	4610      	mov	r0, r2
 80162a2:	4619      	mov	r1, r3
 80162a4:	f7ea fa5c 	bl	8000760 <__aeabi_ddiv>
 80162a8:	2c02      	cmp	r4, #2
 80162aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162ae:	d1e3      	bne.n	8016278 <sqrtf+0x54>
 80162b0:	f7ff fe0a 	bl	8015ec8 <__errno>
 80162b4:	2321      	movs	r3, #33	; 0x21
 80162b6:	6003      	str	r3, [r0, #0]
 80162b8:	e7e2      	b.n	8016280 <sqrtf+0x5c>
 80162ba:	bf00      	nop
 80162bc:	2000015c 	.word	0x2000015c
 80162c0:	08018260 	.word	0x08018260
 80162c4:	00000000 	.word	0x00000000

080162c8 <__ieee754_pow>:
 80162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162cc:	b091      	sub	sp, #68	; 0x44
 80162ce:	ed8d 1b00 	vstr	d1, [sp]
 80162d2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80162d6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80162da:	ea58 0302 	orrs.w	r3, r8, r2
 80162de:	ec57 6b10 	vmov	r6, r7, d0
 80162e2:	f000 84be 	beq.w	8016c62 <__ieee754_pow+0x99a>
 80162e6:	4b7a      	ldr	r3, [pc, #488]	; (80164d0 <__ieee754_pow+0x208>)
 80162e8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80162ec:	429c      	cmp	r4, r3
 80162ee:	463d      	mov	r5, r7
 80162f0:	ee10 aa10 	vmov	sl, s0
 80162f4:	dc09      	bgt.n	801630a <__ieee754_pow+0x42>
 80162f6:	d103      	bne.n	8016300 <__ieee754_pow+0x38>
 80162f8:	b93e      	cbnz	r6, 801630a <__ieee754_pow+0x42>
 80162fa:	45a0      	cmp	r8, r4
 80162fc:	dc0d      	bgt.n	801631a <__ieee754_pow+0x52>
 80162fe:	e001      	b.n	8016304 <__ieee754_pow+0x3c>
 8016300:	4598      	cmp	r8, r3
 8016302:	dc02      	bgt.n	801630a <__ieee754_pow+0x42>
 8016304:	4598      	cmp	r8, r3
 8016306:	d10e      	bne.n	8016326 <__ieee754_pow+0x5e>
 8016308:	b16a      	cbz	r2, 8016326 <__ieee754_pow+0x5e>
 801630a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801630e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016312:	ea54 030a 	orrs.w	r3, r4, sl
 8016316:	f000 84a4 	beq.w	8016c62 <__ieee754_pow+0x99a>
 801631a:	486e      	ldr	r0, [pc, #440]	; (80164d4 <__ieee754_pow+0x20c>)
 801631c:	b011      	add	sp, #68	; 0x44
 801631e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016322:	f000 bda5 	b.w	8016e70 <nan>
 8016326:	2d00      	cmp	r5, #0
 8016328:	da53      	bge.n	80163d2 <__ieee754_pow+0x10a>
 801632a:	4b6b      	ldr	r3, [pc, #428]	; (80164d8 <__ieee754_pow+0x210>)
 801632c:	4598      	cmp	r8, r3
 801632e:	dc4d      	bgt.n	80163cc <__ieee754_pow+0x104>
 8016330:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016334:	4598      	cmp	r8, r3
 8016336:	dd4c      	ble.n	80163d2 <__ieee754_pow+0x10a>
 8016338:	ea4f 5328 	mov.w	r3, r8, asr #20
 801633c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016340:	2b14      	cmp	r3, #20
 8016342:	dd26      	ble.n	8016392 <__ieee754_pow+0xca>
 8016344:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016348:	fa22 f103 	lsr.w	r1, r2, r3
 801634c:	fa01 f303 	lsl.w	r3, r1, r3
 8016350:	4293      	cmp	r3, r2
 8016352:	d13e      	bne.n	80163d2 <__ieee754_pow+0x10a>
 8016354:	f001 0101 	and.w	r1, r1, #1
 8016358:	f1c1 0b02 	rsb	fp, r1, #2
 801635c:	2a00      	cmp	r2, #0
 801635e:	d15b      	bne.n	8016418 <__ieee754_pow+0x150>
 8016360:	4b5b      	ldr	r3, [pc, #364]	; (80164d0 <__ieee754_pow+0x208>)
 8016362:	4598      	cmp	r8, r3
 8016364:	d124      	bne.n	80163b0 <__ieee754_pow+0xe8>
 8016366:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801636a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801636e:	ea53 030a 	orrs.w	r3, r3, sl
 8016372:	f000 8476 	beq.w	8016c62 <__ieee754_pow+0x99a>
 8016376:	4b59      	ldr	r3, [pc, #356]	; (80164dc <__ieee754_pow+0x214>)
 8016378:	429c      	cmp	r4, r3
 801637a:	dd2d      	ble.n	80163d8 <__ieee754_pow+0x110>
 801637c:	f1b9 0f00 	cmp.w	r9, #0
 8016380:	f280 8473 	bge.w	8016c6a <__ieee754_pow+0x9a2>
 8016384:	2000      	movs	r0, #0
 8016386:	2100      	movs	r1, #0
 8016388:	ec41 0b10 	vmov	d0, r0, r1
 801638c:	b011      	add	sp, #68	; 0x44
 801638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016392:	2a00      	cmp	r2, #0
 8016394:	d13e      	bne.n	8016414 <__ieee754_pow+0x14c>
 8016396:	f1c3 0314 	rsb	r3, r3, #20
 801639a:	fa48 f103 	asr.w	r1, r8, r3
 801639e:	fa01 f303 	lsl.w	r3, r1, r3
 80163a2:	4543      	cmp	r3, r8
 80163a4:	f040 8469 	bne.w	8016c7a <__ieee754_pow+0x9b2>
 80163a8:	f001 0101 	and.w	r1, r1, #1
 80163ac:	f1c1 0b02 	rsb	fp, r1, #2
 80163b0:	4b4b      	ldr	r3, [pc, #300]	; (80164e0 <__ieee754_pow+0x218>)
 80163b2:	4598      	cmp	r8, r3
 80163b4:	d118      	bne.n	80163e8 <__ieee754_pow+0x120>
 80163b6:	f1b9 0f00 	cmp.w	r9, #0
 80163ba:	f280 845a 	bge.w	8016c72 <__ieee754_pow+0x9aa>
 80163be:	4948      	ldr	r1, [pc, #288]	; (80164e0 <__ieee754_pow+0x218>)
 80163c0:	4632      	mov	r2, r6
 80163c2:	463b      	mov	r3, r7
 80163c4:	2000      	movs	r0, #0
 80163c6:	f7ea f9cb 	bl	8000760 <__aeabi_ddiv>
 80163ca:	e7dd      	b.n	8016388 <__ieee754_pow+0xc0>
 80163cc:	f04f 0b02 	mov.w	fp, #2
 80163d0:	e7c4      	b.n	801635c <__ieee754_pow+0x94>
 80163d2:	f04f 0b00 	mov.w	fp, #0
 80163d6:	e7c1      	b.n	801635c <__ieee754_pow+0x94>
 80163d8:	f1b9 0f00 	cmp.w	r9, #0
 80163dc:	dad2      	bge.n	8016384 <__ieee754_pow+0xbc>
 80163de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80163e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80163e6:	e7cf      	b.n	8016388 <__ieee754_pow+0xc0>
 80163e8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80163ec:	d106      	bne.n	80163fc <__ieee754_pow+0x134>
 80163ee:	4632      	mov	r2, r6
 80163f0:	463b      	mov	r3, r7
 80163f2:	4610      	mov	r0, r2
 80163f4:	4619      	mov	r1, r3
 80163f6:	f7ea f889 	bl	800050c <__aeabi_dmul>
 80163fa:	e7c5      	b.n	8016388 <__ieee754_pow+0xc0>
 80163fc:	4b39      	ldr	r3, [pc, #228]	; (80164e4 <__ieee754_pow+0x21c>)
 80163fe:	4599      	cmp	r9, r3
 8016400:	d10a      	bne.n	8016418 <__ieee754_pow+0x150>
 8016402:	2d00      	cmp	r5, #0
 8016404:	db08      	blt.n	8016418 <__ieee754_pow+0x150>
 8016406:	ec47 6b10 	vmov	d0, r6, r7
 801640a:	b011      	add	sp, #68	; 0x44
 801640c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016410:	f000 bc68 	b.w	8016ce4 <__ieee754_sqrt>
 8016414:	f04f 0b00 	mov.w	fp, #0
 8016418:	ec47 6b10 	vmov	d0, r6, r7
 801641c:	f000 fd15 	bl	8016e4a <fabs>
 8016420:	ec51 0b10 	vmov	r0, r1, d0
 8016424:	f1ba 0f00 	cmp.w	sl, #0
 8016428:	d127      	bne.n	801647a <__ieee754_pow+0x1b2>
 801642a:	b124      	cbz	r4, 8016436 <__ieee754_pow+0x16e>
 801642c:	4b2c      	ldr	r3, [pc, #176]	; (80164e0 <__ieee754_pow+0x218>)
 801642e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016432:	429a      	cmp	r2, r3
 8016434:	d121      	bne.n	801647a <__ieee754_pow+0x1b2>
 8016436:	f1b9 0f00 	cmp.w	r9, #0
 801643a:	da05      	bge.n	8016448 <__ieee754_pow+0x180>
 801643c:	4602      	mov	r2, r0
 801643e:	460b      	mov	r3, r1
 8016440:	2000      	movs	r0, #0
 8016442:	4927      	ldr	r1, [pc, #156]	; (80164e0 <__ieee754_pow+0x218>)
 8016444:	f7ea f98c 	bl	8000760 <__aeabi_ddiv>
 8016448:	2d00      	cmp	r5, #0
 801644a:	da9d      	bge.n	8016388 <__ieee754_pow+0xc0>
 801644c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016450:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016454:	ea54 030b 	orrs.w	r3, r4, fp
 8016458:	d108      	bne.n	801646c <__ieee754_pow+0x1a4>
 801645a:	4602      	mov	r2, r0
 801645c:	460b      	mov	r3, r1
 801645e:	4610      	mov	r0, r2
 8016460:	4619      	mov	r1, r3
 8016462:	f7e9 fe9b 	bl	800019c <__aeabi_dsub>
 8016466:	4602      	mov	r2, r0
 8016468:	460b      	mov	r3, r1
 801646a:	e7ac      	b.n	80163c6 <__ieee754_pow+0xfe>
 801646c:	f1bb 0f01 	cmp.w	fp, #1
 8016470:	d18a      	bne.n	8016388 <__ieee754_pow+0xc0>
 8016472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016476:	4619      	mov	r1, r3
 8016478:	e786      	b.n	8016388 <__ieee754_pow+0xc0>
 801647a:	0fed      	lsrs	r5, r5, #31
 801647c:	1e6b      	subs	r3, r5, #1
 801647e:	930d      	str	r3, [sp, #52]	; 0x34
 8016480:	ea5b 0303 	orrs.w	r3, fp, r3
 8016484:	d102      	bne.n	801648c <__ieee754_pow+0x1c4>
 8016486:	4632      	mov	r2, r6
 8016488:	463b      	mov	r3, r7
 801648a:	e7e8      	b.n	801645e <__ieee754_pow+0x196>
 801648c:	4b16      	ldr	r3, [pc, #88]	; (80164e8 <__ieee754_pow+0x220>)
 801648e:	4598      	cmp	r8, r3
 8016490:	f340 80fe 	ble.w	8016690 <__ieee754_pow+0x3c8>
 8016494:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016498:	4598      	cmp	r8, r3
 801649a:	dd0a      	ble.n	80164b2 <__ieee754_pow+0x1ea>
 801649c:	4b0f      	ldr	r3, [pc, #60]	; (80164dc <__ieee754_pow+0x214>)
 801649e:	429c      	cmp	r4, r3
 80164a0:	dc0d      	bgt.n	80164be <__ieee754_pow+0x1f6>
 80164a2:	f1b9 0f00 	cmp.w	r9, #0
 80164a6:	f6bf af6d 	bge.w	8016384 <__ieee754_pow+0xbc>
 80164aa:	a307      	add	r3, pc, #28	; (adr r3, 80164c8 <__ieee754_pow+0x200>)
 80164ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b0:	e79f      	b.n	80163f2 <__ieee754_pow+0x12a>
 80164b2:	4b0e      	ldr	r3, [pc, #56]	; (80164ec <__ieee754_pow+0x224>)
 80164b4:	429c      	cmp	r4, r3
 80164b6:	ddf4      	ble.n	80164a2 <__ieee754_pow+0x1da>
 80164b8:	4b09      	ldr	r3, [pc, #36]	; (80164e0 <__ieee754_pow+0x218>)
 80164ba:	429c      	cmp	r4, r3
 80164bc:	dd18      	ble.n	80164f0 <__ieee754_pow+0x228>
 80164be:	f1b9 0f00 	cmp.w	r9, #0
 80164c2:	dcf2      	bgt.n	80164aa <__ieee754_pow+0x1e2>
 80164c4:	e75e      	b.n	8016384 <__ieee754_pow+0xbc>
 80164c6:	bf00      	nop
 80164c8:	8800759c 	.word	0x8800759c
 80164cc:	7e37e43c 	.word	0x7e37e43c
 80164d0:	7ff00000 	.word	0x7ff00000
 80164d4:	08018265 	.word	0x08018265
 80164d8:	433fffff 	.word	0x433fffff
 80164dc:	3fefffff 	.word	0x3fefffff
 80164e0:	3ff00000 	.word	0x3ff00000
 80164e4:	3fe00000 	.word	0x3fe00000
 80164e8:	41e00000 	.word	0x41e00000
 80164ec:	3feffffe 	.word	0x3feffffe
 80164f0:	2200      	movs	r2, #0
 80164f2:	4b63      	ldr	r3, [pc, #396]	; (8016680 <__ieee754_pow+0x3b8>)
 80164f4:	f7e9 fe52 	bl	800019c <__aeabi_dsub>
 80164f8:	a355      	add	r3, pc, #340	; (adr r3, 8016650 <__ieee754_pow+0x388>)
 80164fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164fe:	4604      	mov	r4, r0
 8016500:	460d      	mov	r5, r1
 8016502:	f7ea f803 	bl	800050c <__aeabi_dmul>
 8016506:	a354      	add	r3, pc, #336	; (adr r3, 8016658 <__ieee754_pow+0x390>)
 8016508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650c:	4606      	mov	r6, r0
 801650e:	460f      	mov	r7, r1
 8016510:	4620      	mov	r0, r4
 8016512:	4629      	mov	r1, r5
 8016514:	f7e9 fffa 	bl	800050c <__aeabi_dmul>
 8016518:	2200      	movs	r2, #0
 801651a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801651e:	4b59      	ldr	r3, [pc, #356]	; (8016684 <__ieee754_pow+0x3bc>)
 8016520:	4620      	mov	r0, r4
 8016522:	4629      	mov	r1, r5
 8016524:	f7e9 fff2 	bl	800050c <__aeabi_dmul>
 8016528:	4602      	mov	r2, r0
 801652a:	460b      	mov	r3, r1
 801652c:	a14c      	add	r1, pc, #304	; (adr r1, 8016660 <__ieee754_pow+0x398>)
 801652e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016532:	f7e9 fe33 	bl	800019c <__aeabi_dsub>
 8016536:	4622      	mov	r2, r4
 8016538:	462b      	mov	r3, r5
 801653a:	f7e9 ffe7 	bl	800050c <__aeabi_dmul>
 801653e:	4602      	mov	r2, r0
 8016540:	460b      	mov	r3, r1
 8016542:	2000      	movs	r0, #0
 8016544:	4950      	ldr	r1, [pc, #320]	; (8016688 <__ieee754_pow+0x3c0>)
 8016546:	f7e9 fe29 	bl	800019c <__aeabi_dsub>
 801654a:	4622      	mov	r2, r4
 801654c:	462b      	mov	r3, r5
 801654e:	4680      	mov	r8, r0
 8016550:	4689      	mov	r9, r1
 8016552:	4620      	mov	r0, r4
 8016554:	4629      	mov	r1, r5
 8016556:	f7e9 ffd9 	bl	800050c <__aeabi_dmul>
 801655a:	4602      	mov	r2, r0
 801655c:	460b      	mov	r3, r1
 801655e:	4640      	mov	r0, r8
 8016560:	4649      	mov	r1, r9
 8016562:	f7e9 ffd3 	bl	800050c <__aeabi_dmul>
 8016566:	a340      	add	r3, pc, #256	; (adr r3, 8016668 <__ieee754_pow+0x3a0>)
 8016568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656c:	f7e9 ffce 	bl	800050c <__aeabi_dmul>
 8016570:	4602      	mov	r2, r0
 8016572:	460b      	mov	r3, r1
 8016574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016578:	f7e9 fe10 	bl	800019c <__aeabi_dsub>
 801657c:	4602      	mov	r2, r0
 801657e:	460b      	mov	r3, r1
 8016580:	4604      	mov	r4, r0
 8016582:	460d      	mov	r5, r1
 8016584:	4630      	mov	r0, r6
 8016586:	4639      	mov	r1, r7
 8016588:	f7e9 fe0a 	bl	80001a0 <__adddf3>
 801658c:	2000      	movs	r0, #0
 801658e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016592:	4632      	mov	r2, r6
 8016594:	463b      	mov	r3, r7
 8016596:	f7e9 fe01 	bl	800019c <__aeabi_dsub>
 801659a:	4602      	mov	r2, r0
 801659c:	460b      	mov	r3, r1
 801659e:	4620      	mov	r0, r4
 80165a0:	4629      	mov	r1, r5
 80165a2:	f7e9 fdfb 	bl	800019c <__aeabi_dsub>
 80165a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165a8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80165ac:	4313      	orrs	r3, r2
 80165ae:	4606      	mov	r6, r0
 80165b0:	460f      	mov	r7, r1
 80165b2:	f040 81eb 	bne.w	801698c <__ieee754_pow+0x6c4>
 80165b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016670 <__ieee754_pow+0x3a8>
 80165ba:	e9dd 4500 	ldrd	r4, r5, [sp]
 80165be:	2400      	movs	r4, #0
 80165c0:	4622      	mov	r2, r4
 80165c2:	462b      	mov	r3, r5
 80165c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80165cc:	f7e9 fde6 	bl	800019c <__aeabi_dsub>
 80165d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165d4:	f7e9 ff9a 	bl	800050c <__aeabi_dmul>
 80165d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165dc:	4680      	mov	r8, r0
 80165de:	4689      	mov	r9, r1
 80165e0:	4630      	mov	r0, r6
 80165e2:	4639      	mov	r1, r7
 80165e4:	f7e9 ff92 	bl	800050c <__aeabi_dmul>
 80165e8:	4602      	mov	r2, r0
 80165ea:	460b      	mov	r3, r1
 80165ec:	4640      	mov	r0, r8
 80165ee:	4649      	mov	r1, r9
 80165f0:	f7e9 fdd6 	bl	80001a0 <__adddf3>
 80165f4:	4622      	mov	r2, r4
 80165f6:	462b      	mov	r3, r5
 80165f8:	4680      	mov	r8, r0
 80165fa:	4689      	mov	r9, r1
 80165fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016600:	f7e9 ff84 	bl	800050c <__aeabi_dmul>
 8016604:	460b      	mov	r3, r1
 8016606:	4604      	mov	r4, r0
 8016608:	460d      	mov	r5, r1
 801660a:	4602      	mov	r2, r0
 801660c:	4649      	mov	r1, r9
 801660e:	4640      	mov	r0, r8
 8016610:	e9cd 4500 	strd	r4, r5, [sp]
 8016614:	f7e9 fdc4 	bl	80001a0 <__adddf3>
 8016618:	4b1c      	ldr	r3, [pc, #112]	; (801668c <__ieee754_pow+0x3c4>)
 801661a:	4299      	cmp	r1, r3
 801661c:	4606      	mov	r6, r0
 801661e:	460f      	mov	r7, r1
 8016620:	468b      	mov	fp, r1
 8016622:	f340 82f7 	ble.w	8016c14 <__ieee754_pow+0x94c>
 8016626:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801662a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801662e:	4303      	orrs	r3, r0
 8016630:	f000 81ea 	beq.w	8016a08 <__ieee754_pow+0x740>
 8016634:	a310      	add	r3, pc, #64	; (adr r3, 8016678 <__ieee754_pow+0x3b0>)
 8016636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801663a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801663e:	f7e9 ff65 	bl	800050c <__aeabi_dmul>
 8016642:	a30d      	add	r3, pc, #52	; (adr r3, 8016678 <__ieee754_pow+0x3b0>)
 8016644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016648:	e6d5      	b.n	80163f6 <__ieee754_pow+0x12e>
 801664a:	bf00      	nop
 801664c:	f3af 8000 	nop.w
 8016650:	60000000 	.word	0x60000000
 8016654:	3ff71547 	.word	0x3ff71547
 8016658:	f85ddf44 	.word	0xf85ddf44
 801665c:	3e54ae0b 	.word	0x3e54ae0b
 8016660:	55555555 	.word	0x55555555
 8016664:	3fd55555 	.word	0x3fd55555
 8016668:	652b82fe 	.word	0x652b82fe
 801666c:	3ff71547 	.word	0x3ff71547
 8016670:	00000000 	.word	0x00000000
 8016674:	bff00000 	.word	0xbff00000
 8016678:	8800759c 	.word	0x8800759c
 801667c:	7e37e43c 	.word	0x7e37e43c
 8016680:	3ff00000 	.word	0x3ff00000
 8016684:	3fd00000 	.word	0x3fd00000
 8016688:	3fe00000 	.word	0x3fe00000
 801668c:	408fffff 	.word	0x408fffff
 8016690:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016694:	f04f 0200 	mov.w	r2, #0
 8016698:	da05      	bge.n	80166a6 <__ieee754_pow+0x3de>
 801669a:	4bd3      	ldr	r3, [pc, #844]	; (80169e8 <__ieee754_pow+0x720>)
 801669c:	f7e9 ff36 	bl	800050c <__aeabi_dmul>
 80166a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80166a4:	460c      	mov	r4, r1
 80166a6:	1523      	asrs	r3, r4, #20
 80166a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80166ac:	4413      	add	r3, r2
 80166ae:	9309      	str	r3, [sp, #36]	; 0x24
 80166b0:	4bce      	ldr	r3, [pc, #824]	; (80169ec <__ieee754_pow+0x724>)
 80166b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80166b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80166ba:	429c      	cmp	r4, r3
 80166bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80166c0:	dd08      	ble.n	80166d4 <__ieee754_pow+0x40c>
 80166c2:	4bcb      	ldr	r3, [pc, #812]	; (80169f0 <__ieee754_pow+0x728>)
 80166c4:	429c      	cmp	r4, r3
 80166c6:	f340 815e 	ble.w	8016986 <__ieee754_pow+0x6be>
 80166ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166cc:	3301      	adds	r3, #1
 80166ce:	9309      	str	r3, [sp, #36]	; 0x24
 80166d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80166d4:	f04f 0a00 	mov.w	sl, #0
 80166d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80166dc:	930c      	str	r3, [sp, #48]	; 0x30
 80166de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166e0:	4bc4      	ldr	r3, [pc, #784]	; (80169f4 <__ieee754_pow+0x72c>)
 80166e2:	4413      	add	r3, r2
 80166e4:	ed93 7b00 	vldr	d7, [r3]
 80166e8:	4629      	mov	r1, r5
 80166ea:	ec53 2b17 	vmov	r2, r3, d7
 80166ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80166f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80166f6:	f7e9 fd51 	bl	800019c <__aeabi_dsub>
 80166fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80166fe:	4606      	mov	r6, r0
 8016700:	460f      	mov	r7, r1
 8016702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016706:	f7e9 fd4b 	bl	80001a0 <__adddf3>
 801670a:	4602      	mov	r2, r0
 801670c:	460b      	mov	r3, r1
 801670e:	2000      	movs	r0, #0
 8016710:	49b9      	ldr	r1, [pc, #740]	; (80169f8 <__ieee754_pow+0x730>)
 8016712:	f7ea f825 	bl	8000760 <__aeabi_ddiv>
 8016716:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	4630      	mov	r0, r6
 8016720:	4639      	mov	r1, r7
 8016722:	f7e9 fef3 	bl	800050c <__aeabi_dmul>
 8016726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801672a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801672e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016732:	2300      	movs	r3, #0
 8016734:	9302      	str	r3, [sp, #8]
 8016736:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801673a:	106d      	asrs	r5, r5, #1
 801673c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016740:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016744:	2200      	movs	r2, #0
 8016746:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801674a:	4640      	mov	r0, r8
 801674c:	4649      	mov	r1, r9
 801674e:	4614      	mov	r4, r2
 8016750:	461d      	mov	r5, r3
 8016752:	f7e9 fedb 	bl	800050c <__aeabi_dmul>
 8016756:	4602      	mov	r2, r0
 8016758:	460b      	mov	r3, r1
 801675a:	4630      	mov	r0, r6
 801675c:	4639      	mov	r1, r7
 801675e:	f7e9 fd1d 	bl	800019c <__aeabi_dsub>
 8016762:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016766:	4606      	mov	r6, r0
 8016768:	460f      	mov	r7, r1
 801676a:	4620      	mov	r0, r4
 801676c:	4629      	mov	r1, r5
 801676e:	f7e9 fd15 	bl	800019c <__aeabi_dsub>
 8016772:	4602      	mov	r2, r0
 8016774:	460b      	mov	r3, r1
 8016776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801677a:	f7e9 fd0f 	bl	800019c <__aeabi_dsub>
 801677e:	4642      	mov	r2, r8
 8016780:	464b      	mov	r3, r9
 8016782:	f7e9 fec3 	bl	800050c <__aeabi_dmul>
 8016786:	4602      	mov	r2, r0
 8016788:	460b      	mov	r3, r1
 801678a:	4630      	mov	r0, r6
 801678c:	4639      	mov	r1, r7
 801678e:	f7e9 fd05 	bl	800019c <__aeabi_dsub>
 8016792:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016796:	f7e9 feb9 	bl	800050c <__aeabi_dmul>
 801679a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801679e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80167a2:	4610      	mov	r0, r2
 80167a4:	4619      	mov	r1, r3
 80167a6:	f7e9 feb1 	bl	800050c <__aeabi_dmul>
 80167aa:	a37b      	add	r3, pc, #492	; (adr r3, 8016998 <__ieee754_pow+0x6d0>)
 80167ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b0:	4604      	mov	r4, r0
 80167b2:	460d      	mov	r5, r1
 80167b4:	f7e9 feaa 	bl	800050c <__aeabi_dmul>
 80167b8:	a379      	add	r3, pc, #484	; (adr r3, 80169a0 <__ieee754_pow+0x6d8>)
 80167ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167be:	f7e9 fcef 	bl	80001a0 <__adddf3>
 80167c2:	4622      	mov	r2, r4
 80167c4:	462b      	mov	r3, r5
 80167c6:	f7e9 fea1 	bl	800050c <__aeabi_dmul>
 80167ca:	a377      	add	r3, pc, #476	; (adr r3, 80169a8 <__ieee754_pow+0x6e0>)
 80167cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d0:	f7e9 fce6 	bl	80001a0 <__adddf3>
 80167d4:	4622      	mov	r2, r4
 80167d6:	462b      	mov	r3, r5
 80167d8:	f7e9 fe98 	bl	800050c <__aeabi_dmul>
 80167dc:	a374      	add	r3, pc, #464	; (adr r3, 80169b0 <__ieee754_pow+0x6e8>)
 80167de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e2:	f7e9 fcdd 	bl	80001a0 <__adddf3>
 80167e6:	4622      	mov	r2, r4
 80167e8:	462b      	mov	r3, r5
 80167ea:	f7e9 fe8f 	bl	800050c <__aeabi_dmul>
 80167ee:	a372      	add	r3, pc, #456	; (adr r3, 80169b8 <__ieee754_pow+0x6f0>)
 80167f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f4:	f7e9 fcd4 	bl	80001a0 <__adddf3>
 80167f8:	4622      	mov	r2, r4
 80167fa:	462b      	mov	r3, r5
 80167fc:	f7e9 fe86 	bl	800050c <__aeabi_dmul>
 8016800:	a36f      	add	r3, pc, #444	; (adr r3, 80169c0 <__ieee754_pow+0x6f8>)
 8016802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016806:	f7e9 fccb 	bl	80001a0 <__adddf3>
 801680a:	4622      	mov	r2, r4
 801680c:	4606      	mov	r6, r0
 801680e:	460f      	mov	r7, r1
 8016810:	462b      	mov	r3, r5
 8016812:	4620      	mov	r0, r4
 8016814:	4629      	mov	r1, r5
 8016816:	f7e9 fe79 	bl	800050c <__aeabi_dmul>
 801681a:	4602      	mov	r2, r0
 801681c:	460b      	mov	r3, r1
 801681e:	4630      	mov	r0, r6
 8016820:	4639      	mov	r1, r7
 8016822:	f7e9 fe73 	bl	800050c <__aeabi_dmul>
 8016826:	4642      	mov	r2, r8
 8016828:	4604      	mov	r4, r0
 801682a:	460d      	mov	r5, r1
 801682c:	464b      	mov	r3, r9
 801682e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016832:	f7e9 fcb5 	bl	80001a0 <__adddf3>
 8016836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801683a:	f7e9 fe67 	bl	800050c <__aeabi_dmul>
 801683e:	4622      	mov	r2, r4
 8016840:	462b      	mov	r3, r5
 8016842:	f7e9 fcad 	bl	80001a0 <__adddf3>
 8016846:	4642      	mov	r2, r8
 8016848:	4606      	mov	r6, r0
 801684a:	460f      	mov	r7, r1
 801684c:	464b      	mov	r3, r9
 801684e:	4640      	mov	r0, r8
 8016850:	4649      	mov	r1, r9
 8016852:	f7e9 fe5b 	bl	800050c <__aeabi_dmul>
 8016856:	2200      	movs	r2, #0
 8016858:	4b68      	ldr	r3, [pc, #416]	; (80169fc <__ieee754_pow+0x734>)
 801685a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801685e:	f7e9 fc9f 	bl	80001a0 <__adddf3>
 8016862:	4632      	mov	r2, r6
 8016864:	463b      	mov	r3, r7
 8016866:	f7e9 fc9b 	bl	80001a0 <__adddf3>
 801686a:	9802      	ldr	r0, [sp, #8]
 801686c:	460d      	mov	r5, r1
 801686e:	4604      	mov	r4, r0
 8016870:	4602      	mov	r2, r0
 8016872:	460b      	mov	r3, r1
 8016874:	4640      	mov	r0, r8
 8016876:	4649      	mov	r1, r9
 8016878:	f7e9 fe48 	bl	800050c <__aeabi_dmul>
 801687c:	2200      	movs	r2, #0
 801687e:	4680      	mov	r8, r0
 8016880:	4689      	mov	r9, r1
 8016882:	4b5e      	ldr	r3, [pc, #376]	; (80169fc <__ieee754_pow+0x734>)
 8016884:	4620      	mov	r0, r4
 8016886:	4629      	mov	r1, r5
 8016888:	f7e9 fc88 	bl	800019c <__aeabi_dsub>
 801688c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016890:	f7e9 fc84 	bl	800019c <__aeabi_dsub>
 8016894:	4602      	mov	r2, r0
 8016896:	460b      	mov	r3, r1
 8016898:	4630      	mov	r0, r6
 801689a:	4639      	mov	r1, r7
 801689c:	f7e9 fc7e 	bl	800019c <__aeabi_dsub>
 80168a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168a4:	f7e9 fe32 	bl	800050c <__aeabi_dmul>
 80168a8:	4622      	mov	r2, r4
 80168aa:	4606      	mov	r6, r0
 80168ac:	460f      	mov	r7, r1
 80168ae:	462b      	mov	r3, r5
 80168b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168b4:	f7e9 fe2a 	bl	800050c <__aeabi_dmul>
 80168b8:	4602      	mov	r2, r0
 80168ba:	460b      	mov	r3, r1
 80168bc:	4630      	mov	r0, r6
 80168be:	4639      	mov	r1, r7
 80168c0:	f7e9 fc6e 	bl	80001a0 <__adddf3>
 80168c4:	4606      	mov	r6, r0
 80168c6:	460f      	mov	r7, r1
 80168c8:	4602      	mov	r2, r0
 80168ca:	460b      	mov	r3, r1
 80168cc:	4640      	mov	r0, r8
 80168ce:	4649      	mov	r1, r9
 80168d0:	f7e9 fc66 	bl	80001a0 <__adddf3>
 80168d4:	9802      	ldr	r0, [sp, #8]
 80168d6:	a33c      	add	r3, pc, #240	; (adr r3, 80169c8 <__ieee754_pow+0x700>)
 80168d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168dc:	4604      	mov	r4, r0
 80168de:	460d      	mov	r5, r1
 80168e0:	f7e9 fe14 	bl	800050c <__aeabi_dmul>
 80168e4:	4642      	mov	r2, r8
 80168e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80168ea:	464b      	mov	r3, r9
 80168ec:	4620      	mov	r0, r4
 80168ee:	4629      	mov	r1, r5
 80168f0:	f7e9 fc54 	bl	800019c <__aeabi_dsub>
 80168f4:	4602      	mov	r2, r0
 80168f6:	460b      	mov	r3, r1
 80168f8:	4630      	mov	r0, r6
 80168fa:	4639      	mov	r1, r7
 80168fc:	f7e9 fc4e 	bl	800019c <__aeabi_dsub>
 8016900:	a333      	add	r3, pc, #204	; (adr r3, 80169d0 <__ieee754_pow+0x708>)
 8016902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016906:	f7e9 fe01 	bl	800050c <__aeabi_dmul>
 801690a:	a333      	add	r3, pc, #204	; (adr r3, 80169d8 <__ieee754_pow+0x710>)
 801690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016910:	4606      	mov	r6, r0
 8016912:	460f      	mov	r7, r1
 8016914:	4620      	mov	r0, r4
 8016916:	4629      	mov	r1, r5
 8016918:	f7e9 fdf8 	bl	800050c <__aeabi_dmul>
 801691c:	4602      	mov	r2, r0
 801691e:	460b      	mov	r3, r1
 8016920:	4630      	mov	r0, r6
 8016922:	4639      	mov	r1, r7
 8016924:	f7e9 fc3c 	bl	80001a0 <__adddf3>
 8016928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801692a:	4b35      	ldr	r3, [pc, #212]	; (8016a00 <__ieee754_pow+0x738>)
 801692c:	4413      	add	r3, r2
 801692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016932:	f7e9 fc35 	bl	80001a0 <__adddf3>
 8016936:	4604      	mov	r4, r0
 8016938:	9809      	ldr	r0, [sp, #36]	; 0x24
 801693a:	460d      	mov	r5, r1
 801693c:	f7e9 fd7c 	bl	8000438 <__aeabi_i2d>
 8016940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016942:	4b30      	ldr	r3, [pc, #192]	; (8016a04 <__ieee754_pow+0x73c>)
 8016944:	4413      	add	r3, r2
 8016946:	e9d3 8900 	ldrd	r8, r9, [r3]
 801694a:	4606      	mov	r6, r0
 801694c:	460f      	mov	r7, r1
 801694e:	4622      	mov	r2, r4
 8016950:	462b      	mov	r3, r5
 8016952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016956:	f7e9 fc23 	bl	80001a0 <__adddf3>
 801695a:	4642      	mov	r2, r8
 801695c:	464b      	mov	r3, r9
 801695e:	f7e9 fc1f 	bl	80001a0 <__adddf3>
 8016962:	4632      	mov	r2, r6
 8016964:	463b      	mov	r3, r7
 8016966:	f7e9 fc1b 	bl	80001a0 <__adddf3>
 801696a:	9802      	ldr	r0, [sp, #8]
 801696c:	4632      	mov	r2, r6
 801696e:	463b      	mov	r3, r7
 8016970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016974:	f7e9 fc12 	bl	800019c <__aeabi_dsub>
 8016978:	4642      	mov	r2, r8
 801697a:	464b      	mov	r3, r9
 801697c:	f7e9 fc0e 	bl	800019c <__aeabi_dsub>
 8016980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016984:	e607      	b.n	8016596 <__ieee754_pow+0x2ce>
 8016986:	f04f 0a01 	mov.w	sl, #1
 801698a:	e6a5      	b.n	80166d8 <__ieee754_pow+0x410>
 801698c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80169e0 <__ieee754_pow+0x718>
 8016990:	e613      	b.n	80165ba <__ieee754_pow+0x2f2>
 8016992:	bf00      	nop
 8016994:	f3af 8000 	nop.w
 8016998:	4a454eef 	.word	0x4a454eef
 801699c:	3fca7e28 	.word	0x3fca7e28
 80169a0:	93c9db65 	.word	0x93c9db65
 80169a4:	3fcd864a 	.word	0x3fcd864a
 80169a8:	a91d4101 	.word	0xa91d4101
 80169ac:	3fd17460 	.word	0x3fd17460
 80169b0:	518f264d 	.word	0x518f264d
 80169b4:	3fd55555 	.word	0x3fd55555
 80169b8:	db6fabff 	.word	0xdb6fabff
 80169bc:	3fdb6db6 	.word	0x3fdb6db6
 80169c0:	33333303 	.word	0x33333303
 80169c4:	3fe33333 	.word	0x3fe33333
 80169c8:	e0000000 	.word	0xe0000000
 80169cc:	3feec709 	.word	0x3feec709
 80169d0:	dc3a03fd 	.word	0xdc3a03fd
 80169d4:	3feec709 	.word	0x3feec709
 80169d8:	145b01f5 	.word	0x145b01f5
 80169dc:	be3e2fe0 	.word	0xbe3e2fe0
 80169e0:	00000000 	.word	0x00000000
 80169e4:	3ff00000 	.word	0x3ff00000
 80169e8:	43400000 	.word	0x43400000
 80169ec:	0003988e 	.word	0x0003988e
 80169f0:	000bb679 	.word	0x000bb679
 80169f4:	08018268 	.word	0x08018268
 80169f8:	3ff00000 	.word	0x3ff00000
 80169fc:	40080000 	.word	0x40080000
 8016a00:	08018288 	.word	0x08018288
 8016a04:	08018278 	.word	0x08018278
 8016a08:	a3b4      	add	r3, pc, #720	; (adr r3, 8016cdc <__ieee754_pow+0xa14>)
 8016a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a0e:	4640      	mov	r0, r8
 8016a10:	4649      	mov	r1, r9
 8016a12:	f7e9 fbc5 	bl	80001a0 <__adddf3>
 8016a16:	4622      	mov	r2, r4
 8016a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016a1c:	462b      	mov	r3, r5
 8016a1e:	4630      	mov	r0, r6
 8016a20:	4639      	mov	r1, r7
 8016a22:	f7e9 fbbb 	bl	800019c <__aeabi_dsub>
 8016a26:	4602      	mov	r2, r0
 8016a28:	460b      	mov	r3, r1
 8016a2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016a2e:	f7e9 fffd 	bl	8000a2c <__aeabi_dcmpgt>
 8016a32:	2800      	cmp	r0, #0
 8016a34:	f47f adfe 	bne.w	8016634 <__ieee754_pow+0x36c>
 8016a38:	4aa3      	ldr	r2, [pc, #652]	; (8016cc8 <__ieee754_pow+0xa00>)
 8016a3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016a3e:	4293      	cmp	r3, r2
 8016a40:	f340 810a 	ble.w	8016c58 <__ieee754_pow+0x990>
 8016a44:	151b      	asrs	r3, r3, #20
 8016a46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016a4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016a4e:	fa4a f303 	asr.w	r3, sl, r3
 8016a52:	445b      	add	r3, fp
 8016a54:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016a58:	4e9c      	ldr	r6, [pc, #624]	; (8016ccc <__ieee754_pow+0xa04>)
 8016a5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016a5e:	4116      	asrs	r6, r2
 8016a60:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016a64:	2000      	movs	r0, #0
 8016a66:	ea23 0106 	bic.w	r1, r3, r6
 8016a6a:	f1c2 0214 	rsb	r2, r2, #20
 8016a6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016a72:	fa4a fa02 	asr.w	sl, sl, r2
 8016a76:	f1bb 0f00 	cmp.w	fp, #0
 8016a7a:	4602      	mov	r2, r0
 8016a7c:	460b      	mov	r3, r1
 8016a7e:	4620      	mov	r0, r4
 8016a80:	4629      	mov	r1, r5
 8016a82:	bfb8      	it	lt
 8016a84:	f1ca 0a00 	rsblt	sl, sl, #0
 8016a88:	f7e9 fb88 	bl	800019c <__aeabi_dsub>
 8016a8c:	e9cd 0100 	strd	r0, r1, [sp]
 8016a90:	4642      	mov	r2, r8
 8016a92:	464b      	mov	r3, r9
 8016a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a98:	f7e9 fb82 	bl	80001a0 <__adddf3>
 8016a9c:	2000      	movs	r0, #0
 8016a9e:	a378      	add	r3, pc, #480	; (adr r3, 8016c80 <__ieee754_pow+0x9b8>)
 8016aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa4:	4604      	mov	r4, r0
 8016aa6:	460d      	mov	r5, r1
 8016aa8:	f7e9 fd30 	bl	800050c <__aeabi_dmul>
 8016aac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ab0:	4606      	mov	r6, r0
 8016ab2:	460f      	mov	r7, r1
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	4629      	mov	r1, r5
 8016ab8:	f7e9 fb70 	bl	800019c <__aeabi_dsub>
 8016abc:	4602      	mov	r2, r0
 8016abe:	460b      	mov	r3, r1
 8016ac0:	4640      	mov	r0, r8
 8016ac2:	4649      	mov	r1, r9
 8016ac4:	f7e9 fb6a 	bl	800019c <__aeabi_dsub>
 8016ac8:	a36f      	add	r3, pc, #444	; (adr r3, 8016c88 <__ieee754_pow+0x9c0>)
 8016aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ace:	f7e9 fd1d 	bl	800050c <__aeabi_dmul>
 8016ad2:	a36f      	add	r3, pc, #444	; (adr r3, 8016c90 <__ieee754_pow+0x9c8>)
 8016ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad8:	4680      	mov	r8, r0
 8016ada:	4689      	mov	r9, r1
 8016adc:	4620      	mov	r0, r4
 8016ade:	4629      	mov	r1, r5
 8016ae0:	f7e9 fd14 	bl	800050c <__aeabi_dmul>
 8016ae4:	4602      	mov	r2, r0
 8016ae6:	460b      	mov	r3, r1
 8016ae8:	4640      	mov	r0, r8
 8016aea:	4649      	mov	r1, r9
 8016aec:	f7e9 fb58 	bl	80001a0 <__adddf3>
 8016af0:	4604      	mov	r4, r0
 8016af2:	460d      	mov	r5, r1
 8016af4:	4602      	mov	r2, r0
 8016af6:	460b      	mov	r3, r1
 8016af8:	4630      	mov	r0, r6
 8016afa:	4639      	mov	r1, r7
 8016afc:	f7e9 fb50 	bl	80001a0 <__adddf3>
 8016b00:	4632      	mov	r2, r6
 8016b02:	463b      	mov	r3, r7
 8016b04:	4680      	mov	r8, r0
 8016b06:	4689      	mov	r9, r1
 8016b08:	f7e9 fb48 	bl	800019c <__aeabi_dsub>
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	460b      	mov	r3, r1
 8016b10:	4620      	mov	r0, r4
 8016b12:	4629      	mov	r1, r5
 8016b14:	f7e9 fb42 	bl	800019c <__aeabi_dsub>
 8016b18:	4642      	mov	r2, r8
 8016b1a:	4606      	mov	r6, r0
 8016b1c:	460f      	mov	r7, r1
 8016b1e:	464b      	mov	r3, r9
 8016b20:	4640      	mov	r0, r8
 8016b22:	4649      	mov	r1, r9
 8016b24:	f7e9 fcf2 	bl	800050c <__aeabi_dmul>
 8016b28:	a35b      	add	r3, pc, #364	; (adr r3, 8016c98 <__ieee754_pow+0x9d0>)
 8016b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b2e:	4604      	mov	r4, r0
 8016b30:	460d      	mov	r5, r1
 8016b32:	f7e9 fceb 	bl	800050c <__aeabi_dmul>
 8016b36:	a35a      	add	r3, pc, #360	; (adr r3, 8016ca0 <__ieee754_pow+0x9d8>)
 8016b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3c:	f7e9 fb2e 	bl	800019c <__aeabi_dsub>
 8016b40:	4622      	mov	r2, r4
 8016b42:	462b      	mov	r3, r5
 8016b44:	f7e9 fce2 	bl	800050c <__aeabi_dmul>
 8016b48:	a357      	add	r3, pc, #348	; (adr r3, 8016ca8 <__ieee754_pow+0x9e0>)
 8016b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b4e:	f7e9 fb27 	bl	80001a0 <__adddf3>
 8016b52:	4622      	mov	r2, r4
 8016b54:	462b      	mov	r3, r5
 8016b56:	f7e9 fcd9 	bl	800050c <__aeabi_dmul>
 8016b5a:	a355      	add	r3, pc, #340	; (adr r3, 8016cb0 <__ieee754_pow+0x9e8>)
 8016b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b60:	f7e9 fb1c 	bl	800019c <__aeabi_dsub>
 8016b64:	4622      	mov	r2, r4
 8016b66:	462b      	mov	r3, r5
 8016b68:	f7e9 fcd0 	bl	800050c <__aeabi_dmul>
 8016b6c:	a352      	add	r3, pc, #328	; (adr r3, 8016cb8 <__ieee754_pow+0x9f0>)
 8016b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b72:	f7e9 fb15 	bl	80001a0 <__adddf3>
 8016b76:	4622      	mov	r2, r4
 8016b78:	462b      	mov	r3, r5
 8016b7a:	f7e9 fcc7 	bl	800050c <__aeabi_dmul>
 8016b7e:	4602      	mov	r2, r0
 8016b80:	460b      	mov	r3, r1
 8016b82:	4640      	mov	r0, r8
 8016b84:	4649      	mov	r1, r9
 8016b86:	f7e9 fb09 	bl	800019c <__aeabi_dsub>
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	460d      	mov	r5, r1
 8016b8e:	4602      	mov	r2, r0
 8016b90:	460b      	mov	r3, r1
 8016b92:	4640      	mov	r0, r8
 8016b94:	4649      	mov	r1, r9
 8016b96:	f7e9 fcb9 	bl	800050c <__aeabi_dmul>
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	e9cd 0100 	strd	r0, r1, [sp]
 8016ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	4629      	mov	r1, r5
 8016ba8:	f7e9 faf8 	bl	800019c <__aeabi_dsub>
 8016bac:	4602      	mov	r2, r0
 8016bae:	460b      	mov	r3, r1
 8016bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016bb4:	f7e9 fdd4 	bl	8000760 <__aeabi_ddiv>
 8016bb8:	4632      	mov	r2, r6
 8016bba:	4604      	mov	r4, r0
 8016bbc:	460d      	mov	r5, r1
 8016bbe:	463b      	mov	r3, r7
 8016bc0:	4640      	mov	r0, r8
 8016bc2:	4649      	mov	r1, r9
 8016bc4:	f7e9 fca2 	bl	800050c <__aeabi_dmul>
 8016bc8:	4632      	mov	r2, r6
 8016bca:	463b      	mov	r3, r7
 8016bcc:	f7e9 fae8 	bl	80001a0 <__adddf3>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	f7e9 fae0 	bl	800019c <__aeabi_dsub>
 8016bdc:	4642      	mov	r2, r8
 8016bde:	464b      	mov	r3, r9
 8016be0:	f7e9 fadc 	bl	800019c <__aeabi_dsub>
 8016be4:	4602      	mov	r2, r0
 8016be6:	460b      	mov	r3, r1
 8016be8:	2000      	movs	r0, #0
 8016bea:	4939      	ldr	r1, [pc, #228]	; (8016cd0 <__ieee754_pow+0xa08>)
 8016bec:	f7e9 fad6 	bl	800019c <__aeabi_dsub>
 8016bf0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016bf4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016bf8:	4602      	mov	r2, r0
 8016bfa:	460b      	mov	r3, r1
 8016bfc:	da2f      	bge.n	8016c5e <__ieee754_pow+0x996>
 8016bfe:	4650      	mov	r0, sl
 8016c00:	ec43 2b10 	vmov	d0, r2, r3
 8016c04:	f000 f9c0 	bl	8016f88 <scalbn>
 8016c08:	ec51 0b10 	vmov	r0, r1, d0
 8016c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c10:	f7ff bbf1 	b.w	80163f6 <__ieee754_pow+0x12e>
 8016c14:	4b2f      	ldr	r3, [pc, #188]	; (8016cd4 <__ieee754_pow+0xa0c>)
 8016c16:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016c1a:	429e      	cmp	r6, r3
 8016c1c:	f77f af0c 	ble.w	8016a38 <__ieee754_pow+0x770>
 8016c20:	4b2d      	ldr	r3, [pc, #180]	; (8016cd8 <__ieee754_pow+0xa10>)
 8016c22:	440b      	add	r3, r1
 8016c24:	4303      	orrs	r3, r0
 8016c26:	d00b      	beq.n	8016c40 <__ieee754_pow+0x978>
 8016c28:	a325      	add	r3, pc, #148	; (adr r3, 8016cc0 <__ieee754_pow+0x9f8>)
 8016c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c32:	f7e9 fc6b 	bl	800050c <__aeabi_dmul>
 8016c36:	a322      	add	r3, pc, #136	; (adr r3, 8016cc0 <__ieee754_pow+0x9f8>)
 8016c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c3c:	f7ff bbdb 	b.w	80163f6 <__ieee754_pow+0x12e>
 8016c40:	4622      	mov	r2, r4
 8016c42:	462b      	mov	r3, r5
 8016c44:	f7e9 faaa 	bl	800019c <__aeabi_dsub>
 8016c48:	4642      	mov	r2, r8
 8016c4a:	464b      	mov	r3, r9
 8016c4c:	f7e9 fee4 	bl	8000a18 <__aeabi_dcmpge>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	f43f aef1 	beq.w	8016a38 <__ieee754_pow+0x770>
 8016c56:	e7e7      	b.n	8016c28 <__ieee754_pow+0x960>
 8016c58:	f04f 0a00 	mov.w	sl, #0
 8016c5c:	e718      	b.n	8016a90 <__ieee754_pow+0x7c8>
 8016c5e:	4621      	mov	r1, r4
 8016c60:	e7d4      	b.n	8016c0c <__ieee754_pow+0x944>
 8016c62:	2000      	movs	r0, #0
 8016c64:	491a      	ldr	r1, [pc, #104]	; (8016cd0 <__ieee754_pow+0xa08>)
 8016c66:	f7ff bb8f 	b.w	8016388 <__ieee754_pow+0xc0>
 8016c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c6e:	f7ff bb8b 	b.w	8016388 <__ieee754_pow+0xc0>
 8016c72:	4630      	mov	r0, r6
 8016c74:	4639      	mov	r1, r7
 8016c76:	f7ff bb87 	b.w	8016388 <__ieee754_pow+0xc0>
 8016c7a:	4693      	mov	fp, r2
 8016c7c:	f7ff bb98 	b.w	80163b0 <__ieee754_pow+0xe8>
 8016c80:	00000000 	.word	0x00000000
 8016c84:	3fe62e43 	.word	0x3fe62e43
 8016c88:	fefa39ef 	.word	0xfefa39ef
 8016c8c:	3fe62e42 	.word	0x3fe62e42
 8016c90:	0ca86c39 	.word	0x0ca86c39
 8016c94:	be205c61 	.word	0xbe205c61
 8016c98:	72bea4d0 	.word	0x72bea4d0
 8016c9c:	3e663769 	.word	0x3e663769
 8016ca0:	c5d26bf1 	.word	0xc5d26bf1
 8016ca4:	3ebbbd41 	.word	0x3ebbbd41
 8016ca8:	af25de2c 	.word	0xaf25de2c
 8016cac:	3f11566a 	.word	0x3f11566a
 8016cb0:	16bebd93 	.word	0x16bebd93
 8016cb4:	3f66c16c 	.word	0x3f66c16c
 8016cb8:	5555553e 	.word	0x5555553e
 8016cbc:	3fc55555 	.word	0x3fc55555
 8016cc0:	c2f8f359 	.word	0xc2f8f359
 8016cc4:	01a56e1f 	.word	0x01a56e1f
 8016cc8:	3fe00000 	.word	0x3fe00000
 8016ccc:	000fffff 	.word	0x000fffff
 8016cd0:	3ff00000 	.word	0x3ff00000
 8016cd4:	4090cbff 	.word	0x4090cbff
 8016cd8:	3f6f3400 	.word	0x3f6f3400
 8016cdc:	652b82fe 	.word	0x652b82fe
 8016ce0:	3c971547 	.word	0x3c971547

08016ce4 <__ieee754_sqrt>:
 8016ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce8:	4955      	ldr	r1, [pc, #340]	; (8016e40 <__ieee754_sqrt+0x15c>)
 8016cea:	ec55 4b10 	vmov	r4, r5, d0
 8016cee:	43a9      	bics	r1, r5
 8016cf0:	462b      	mov	r3, r5
 8016cf2:	462a      	mov	r2, r5
 8016cf4:	d112      	bne.n	8016d1c <__ieee754_sqrt+0x38>
 8016cf6:	ee10 2a10 	vmov	r2, s0
 8016cfa:	ee10 0a10 	vmov	r0, s0
 8016cfe:	4629      	mov	r1, r5
 8016d00:	f7e9 fc04 	bl	800050c <__aeabi_dmul>
 8016d04:	4602      	mov	r2, r0
 8016d06:	460b      	mov	r3, r1
 8016d08:	4620      	mov	r0, r4
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	f7e9 fa48 	bl	80001a0 <__adddf3>
 8016d10:	4604      	mov	r4, r0
 8016d12:	460d      	mov	r5, r1
 8016d14:	ec45 4b10 	vmov	d0, r4, r5
 8016d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d1c:	2d00      	cmp	r5, #0
 8016d1e:	ee10 0a10 	vmov	r0, s0
 8016d22:	4621      	mov	r1, r4
 8016d24:	dc0f      	bgt.n	8016d46 <__ieee754_sqrt+0x62>
 8016d26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016d2a:	4330      	orrs	r0, r6
 8016d2c:	d0f2      	beq.n	8016d14 <__ieee754_sqrt+0x30>
 8016d2e:	b155      	cbz	r5, 8016d46 <__ieee754_sqrt+0x62>
 8016d30:	ee10 2a10 	vmov	r2, s0
 8016d34:	4620      	mov	r0, r4
 8016d36:	4629      	mov	r1, r5
 8016d38:	f7e9 fa30 	bl	800019c <__aeabi_dsub>
 8016d3c:	4602      	mov	r2, r0
 8016d3e:	460b      	mov	r3, r1
 8016d40:	f7e9 fd0e 	bl	8000760 <__aeabi_ddiv>
 8016d44:	e7e4      	b.n	8016d10 <__ieee754_sqrt+0x2c>
 8016d46:	151b      	asrs	r3, r3, #20
 8016d48:	d073      	beq.n	8016e32 <__ieee754_sqrt+0x14e>
 8016d4a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016d4e:	07dd      	lsls	r5, r3, #31
 8016d50:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016d54:	bf48      	it	mi
 8016d56:	0fc8      	lsrmi	r0, r1, #31
 8016d58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016d5c:	bf44      	itt	mi
 8016d5e:	0049      	lslmi	r1, r1, #1
 8016d60:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8016d64:	2500      	movs	r5, #0
 8016d66:	1058      	asrs	r0, r3, #1
 8016d68:	0fcb      	lsrs	r3, r1, #31
 8016d6a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016d6e:	0049      	lsls	r1, r1, #1
 8016d70:	2316      	movs	r3, #22
 8016d72:	462c      	mov	r4, r5
 8016d74:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016d78:	19a7      	adds	r7, r4, r6
 8016d7a:	4297      	cmp	r7, r2
 8016d7c:	bfde      	ittt	le
 8016d7e:	19bc      	addle	r4, r7, r6
 8016d80:	1bd2      	suble	r2, r2, r7
 8016d82:	19ad      	addle	r5, r5, r6
 8016d84:	0fcf      	lsrs	r7, r1, #31
 8016d86:	3b01      	subs	r3, #1
 8016d88:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016d8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016d90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016d94:	d1f0      	bne.n	8016d78 <__ieee754_sqrt+0x94>
 8016d96:	f04f 0c20 	mov.w	ip, #32
 8016d9a:	469e      	mov	lr, r3
 8016d9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016da0:	42a2      	cmp	r2, r4
 8016da2:	eb06 070e 	add.w	r7, r6, lr
 8016da6:	dc02      	bgt.n	8016dae <__ieee754_sqrt+0xca>
 8016da8:	d112      	bne.n	8016dd0 <__ieee754_sqrt+0xec>
 8016daa:	428f      	cmp	r7, r1
 8016dac:	d810      	bhi.n	8016dd0 <__ieee754_sqrt+0xec>
 8016dae:	2f00      	cmp	r7, #0
 8016db0:	eb07 0e06 	add.w	lr, r7, r6
 8016db4:	da42      	bge.n	8016e3c <__ieee754_sqrt+0x158>
 8016db6:	f1be 0f00 	cmp.w	lr, #0
 8016dba:	db3f      	blt.n	8016e3c <__ieee754_sqrt+0x158>
 8016dbc:	f104 0801 	add.w	r8, r4, #1
 8016dc0:	1b12      	subs	r2, r2, r4
 8016dc2:	428f      	cmp	r7, r1
 8016dc4:	bf88      	it	hi
 8016dc6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016dca:	1bc9      	subs	r1, r1, r7
 8016dcc:	4433      	add	r3, r6
 8016dce:	4644      	mov	r4, r8
 8016dd0:	0052      	lsls	r2, r2, #1
 8016dd2:	f1bc 0c01 	subs.w	ip, ip, #1
 8016dd6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016dda:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016dde:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016de2:	d1dd      	bne.n	8016da0 <__ieee754_sqrt+0xbc>
 8016de4:	430a      	orrs	r2, r1
 8016de6:	d006      	beq.n	8016df6 <__ieee754_sqrt+0x112>
 8016de8:	1c5c      	adds	r4, r3, #1
 8016dea:	bf13      	iteet	ne
 8016dec:	3301      	addne	r3, #1
 8016dee:	3501      	addeq	r5, #1
 8016df0:	4663      	moveq	r3, ip
 8016df2:	f023 0301 	bicne.w	r3, r3, #1
 8016df6:	106a      	asrs	r2, r5, #1
 8016df8:	085b      	lsrs	r3, r3, #1
 8016dfa:	07e9      	lsls	r1, r5, #31
 8016dfc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016e00:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016e04:	bf48      	it	mi
 8016e06:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016e0a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016e0e:	461c      	mov	r4, r3
 8016e10:	e780      	b.n	8016d14 <__ieee754_sqrt+0x30>
 8016e12:	0aca      	lsrs	r2, r1, #11
 8016e14:	3815      	subs	r0, #21
 8016e16:	0549      	lsls	r1, r1, #21
 8016e18:	2a00      	cmp	r2, #0
 8016e1a:	d0fa      	beq.n	8016e12 <__ieee754_sqrt+0x12e>
 8016e1c:	02d6      	lsls	r6, r2, #11
 8016e1e:	d50a      	bpl.n	8016e36 <__ieee754_sqrt+0x152>
 8016e20:	f1c3 0420 	rsb	r4, r3, #32
 8016e24:	fa21 f404 	lsr.w	r4, r1, r4
 8016e28:	1e5d      	subs	r5, r3, #1
 8016e2a:	4099      	lsls	r1, r3
 8016e2c:	4322      	orrs	r2, r4
 8016e2e:	1b43      	subs	r3, r0, r5
 8016e30:	e78b      	b.n	8016d4a <__ieee754_sqrt+0x66>
 8016e32:	4618      	mov	r0, r3
 8016e34:	e7f0      	b.n	8016e18 <__ieee754_sqrt+0x134>
 8016e36:	0052      	lsls	r2, r2, #1
 8016e38:	3301      	adds	r3, #1
 8016e3a:	e7ef      	b.n	8016e1c <__ieee754_sqrt+0x138>
 8016e3c:	46a0      	mov	r8, r4
 8016e3e:	e7bf      	b.n	8016dc0 <__ieee754_sqrt+0xdc>
 8016e40:	7ff00000 	.word	0x7ff00000

08016e44 <__ieee754_sqrtf>:
 8016e44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016e48:	4770      	bx	lr

08016e4a <fabs>:
 8016e4a:	ec51 0b10 	vmov	r0, r1, d0
 8016e4e:	ee10 2a10 	vmov	r2, s0
 8016e52:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e56:	ec43 2b10 	vmov	d0, r2, r3
 8016e5a:	4770      	bx	lr

08016e5c <finite>:
 8016e5c:	ee10 3a90 	vmov	r3, s1
 8016e60:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016e64:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016e68:	0fc0      	lsrs	r0, r0, #31
 8016e6a:	4770      	bx	lr

08016e6c <matherr>:
 8016e6c:	2000      	movs	r0, #0
 8016e6e:	4770      	bx	lr

08016e70 <nan>:
 8016e70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016e78 <nan+0x8>
 8016e74:	4770      	bx	lr
 8016e76:	bf00      	nop
 8016e78:	00000000 	.word	0x00000000
 8016e7c:	7ff80000 	.word	0x7ff80000

08016e80 <rint>:
 8016e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e82:	ec51 0b10 	vmov	r0, r1, d0
 8016e86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016e8a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016e8e:	2e13      	cmp	r6, #19
 8016e90:	460b      	mov	r3, r1
 8016e92:	ee10 4a10 	vmov	r4, s0
 8016e96:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016e9a:	dc56      	bgt.n	8016f4a <rint+0xca>
 8016e9c:	2e00      	cmp	r6, #0
 8016e9e:	da2b      	bge.n	8016ef8 <rint+0x78>
 8016ea0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016ea4:	4302      	orrs	r2, r0
 8016ea6:	d023      	beq.n	8016ef0 <rint+0x70>
 8016ea8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016eac:	4302      	orrs	r2, r0
 8016eae:	4254      	negs	r4, r2
 8016eb0:	4314      	orrs	r4, r2
 8016eb2:	0c4b      	lsrs	r3, r1, #17
 8016eb4:	0b24      	lsrs	r4, r4, #12
 8016eb6:	045b      	lsls	r3, r3, #17
 8016eb8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016ebc:	ea44 0103 	orr.w	r1, r4, r3
 8016ec0:	460b      	mov	r3, r1
 8016ec2:	492f      	ldr	r1, [pc, #188]	; (8016f80 <rint+0x100>)
 8016ec4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016ec8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016ecc:	4602      	mov	r2, r0
 8016ece:	4639      	mov	r1, r7
 8016ed0:	4630      	mov	r0, r6
 8016ed2:	f7e9 f965 	bl	80001a0 <__adddf3>
 8016ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8016eda:	463b      	mov	r3, r7
 8016edc:	4632      	mov	r2, r6
 8016ede:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ee2:	f7e9 f95b 	bl	800019c <__aeabi_dsub>
 8016ee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016eea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016eee:	4639      	mov	r1, r7
 8016ef0:	ec41 0b10 	vmov	d0, r0, r1
 8016ef4:	b003      	add	sp, #12
 8016ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ef8:	4a22      	ldr	r2, [pc, #136]	; (8016f84 <rint+0x104>)
 8016efa:	4132      	asrs	r2, r6
 8016efc:	ea01 0702 	and.w	r7, r1, r2
 8016f00:	4307      	orrs	r7, r0
 8016f02:	d0f5      	beq.n	8016ef0 <rint+0x70>
 8016f04:	0852      	lsrs	r2, r2, #1
 8016f06:	4011      	ands	r1, r2
 8016f08:	430c      	orrs	r4, r1
 8016f0a:	d00b      	beq.n	8016f24 <rint+0xa4>
 8016f0c:	ea23 0202 	bic.w	r2, r3, r2
 8016f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016f14:	2e13      	cmp	r6, #19
 8016f16:	fa43 f306 	asr.w	r3, r3, r6
 8016f1a:	bf0c      	ite	eq
 8016f1c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016f20:	2400      	movne	r4, #0
 8016f22:	4313      	orrs	r3, r2
 8016f24:	4916      	ldr	r1, [pc, #88]	; (8016f80 <rint+0x100>)
 8016f26:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016f2a:	4622      	mov	r2, r4
 8016f2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016f30:	4620      	mov	r0, r4
 8016f32:	4629      	mov	r1, r5
 8016f34:	f7e9 f934 	bl	80001a0 <__adddf3>
 8016f38:	e9cd 0100 	strd	r0, r1, [sp]
 8016f3c:	4622      	mov	r2, r4
 8016f3e:	462b      	mov	r3, r5
 8016f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f44:	f7e9 f92a 	bl	800019c <__aeabi_dsub>
 8016f48:	e7d2      	b.n	8016ef0 <rint+0x70>
 8016f4a:	2e33      	cmp	r6, #51	; 0x33
 8016f4c:	dd07      	ble.n	8016f5e <rint+0xde>
 8016f4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016f52:	d1cd      	bne.n	8016ef0 <rint+0x70>
 8016f54:	ee10 2a10 	vmov	r2, s0
 8016f58:	f7e9 f922 	bl	80001a0 <__adddf3>
 8016f5c:	e7c8      	b.n	8016ef0 <rint+0x70>
 8016f5e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016f62:	f04f 32ff 	mov.w	r2, #4294967295
 8016f66:	40f2      	lsrs	r2, r6
 8016f68:	4210      	tst	r0, r2
 8016f6a:	d0c1      	beq.n	8016ef0 <rint+0x70>
 8016f6c:	0852      	lsrs	r2, r2, #1
 8016f6e:	4210      	tst	r0, r2
 8016f70:	bf1f      	itttt	ne
 8016f72:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016f76:	ea20 0202 	bicne.w	r2, r0, r2
 8016f7a:	4134      	asrne	r4, r6
 8016f7c:	4314      	orrne	r4, r2
 8016f7e:	e7d1      	b.n	8016f24 <rint+0xa4>
 8016f80:	08018298 	.word	0x08018298
 8016f84:	000fffff 	.word	0x000fffff

08016f88 <scalbn>:
 8016f88:	b570      	push	{r4, r5, r6, lr}
 8016f8a:	ec55 4b10 	vmov	r4, r5, d0
 8016f8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016f92:	4606      	mov	r6, r0
 8016f94:	462b      	mov	r3, r5
 8016f96:	b9aa      	cbnz	r2, 8016fc4 <scalbn+0x3c>
 8016f98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016f9c:	4323      	orrs	r3, r4
 8016f9e:	d03b      	beq.n	8017018 <scalbn+0x90>
 8016fa0:	4b31      	ldr	r3, [pc, #196]	; (8017068 <scalbn+0xe0>)
 8016fa2:	4629      	mov	r1, r5
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	ee10 0a10 	vmov	r0, s0
 8016faa:	f7e9 faaf 	bl	800050c <__aeabi_dmul>
 8016fae:	4b2f      	ldr	r3, [pc, #188]	; (801706c <scalbn+0xe4>)
 8016fb0:	429e      	cmp	r6, r3
 8016fb2:	4604      	mov	r4, r0
 8016fb4:	460d      	mov	r5, r1
 8016fb6:	da12      	bge.n	8016fde <scalbn+0x56>
 8016fb8:	a327      	add	r3, pc, #156	; (adr r3, 8017058 <scalbn+0xd0>)
 8016fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fbe:	f7e9 faa5 	bl	800050c <__aeabi_dmul>
 8016fc2:	e009      	b.n	8016fd8 <scalbn+0x50>
 8016fc4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016fc8:	428a      	cmp	r2, r1
 8016fca:	d10c      	bne.n	8016fe6 <scalbn+0x5e>
 8016fcc:	ee10 2a10 	vmov	r2, s0
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	4629      	mov	r1, r5
 8016fd4:	f7e9 f8e4 	bl	80001a0 <__adddf3>
 8016fd8:	4604      	mov	r4, r0
 8016fda:	460d      	mov	r5, r1
 8016fdc:	e01c      	b.n	8017018 <scalbn+0x90>
 8016fde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016fe2:	460b      	mov	r3, r1
 8016fe4:	3a36      	subs	r2, #54	; 0x36
 8016fe6:	4432      	add	r2, r6
 8016fe8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016fec:	428a      	cmp	r2, r1
 8016fee:	dd0b      	ble.n	8017008 <scalbn+0x80>
 8016ff0:	ec45 4b11 	vmov	d1, r4, r5
 8016ff4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017060 <scalbn+0xd8>
 8016ff8:	f000 f83c 	bl	8017074 <copysign>
 8016ffc:	a318      	add	r3, pc, #96	; (adr r3, 8017060 <scalbn+0xd8>)
 8016ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017002:	ec51 0b10 	vmov	r0, r1, d0
 8017006:	e7da      	b.n	8016fbe <scalbn+0x36>
 8017008:	2a00      	cmp	r2, #0
 801700a:	dd08      	ble.n	801701e <scalbn+0x96>
 801700c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017010:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017014:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017018:	ec45 4b10 	vmov	d0, r4, r5
 801701c:	bd70      	pop	{r4, r5, r6, pc}
 801701e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017022:	da0d      	bge.n	8017040 <scalbn+0xb8>
 8017024:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017028:	429e      	cmp	r6, r3
 801702a:	ec45 4b11 	vmov	d1, r4, r5
 801702e:	dce1      	bgt.n	8016ff4 <scalbn+0x6c>
 8017030:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017058 <scalbn+0xd0>
 8017034:	f000 f81e 	bl	8017074 <copysign>
 8017038:	a307      	add	r3, pc, #28	; (adr r3, 8017058 <scalbn+0xd0>)
 801703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703e:	e7e0      	b.n	8017002 <scalbn+0x7a>
 8017040:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017044:	3236      	adds	r2, #54	; 0x36
 8017046:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801704a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801704e:	4620      	mov	r0, r4
 8017050:	4629      	mov	r1, r5
 8017052:	2200      	movs	r2, #0
 8017054:	4b06      	ldr	r3, [pc, #24]	; (8017070 <scalbn+0xe8>)
 8017056:	e7b2      	b.n	8016fbe <scalbn+0x36>
 8017058:	c2f8f359 	.word	0xc2f8f359
 801705c:	01a56e1f 	.word	0x01a56e1f
 8017060:	8800759c 	.word	0x8800759c
 8017064:	7e37e43c 	.word	0x7e37e43c
 8017068:	43500000 	.word	0x43500000
 801706c:	ffff3cb0 	.word	0xffff3cb0
 8017070:	3c900000 	.word	0x3c900000

08017074 <copysign>:
 8017074:	ec51 0b10 	vmov	r0, r1, d0
 8017078:	ee11 0a90 	vmov	r0, s3
 801707c:	ee10 2a10 	vmov	r2, s0
 8017080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017084:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017088:	ea41 0300 	orr.w	r3, r1, r0
 801708c:	ec43 2b10 	vmov	d0, r2, r3
 8017090:	4770      	bx	lr
	...

08017094 <_init>:
 8017094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017096:	bf00      	nop
 8017098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801709a:	bc08      	pop	{r3}
 801709c:	469e      	mov	lr, r3
 801709e:	4770      	bx	lr

080170a0 <_fini>:
 80170a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170a2:	bf00      	nop
 80170a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170a6:	bc08      	pop	{r3}
 80170a8:	469e      	mov	lr, r3
 80170aa:	4770      	bx	lr
