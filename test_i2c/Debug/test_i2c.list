
test_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000607c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006208  08006208  00016208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006410  08006410  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08006410  08006410  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006410  08006410  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000018  08006430  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08006430  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5b5  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002072  00000000  00000000  0002d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002f670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012aa1  00000000  00000000  000308a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa40  00000000  00000000  00043349  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068665  00000000  00000000  0004dd89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b63ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029fc  00000000  00000000  000b646c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080061ec 	.word	0x080061ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080061ec 	.word	0x080061ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b58:	2203      	movs	r2, #3
 8000b5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b76:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b78:	f000 fe4a 	bl	8001810 <HAL_ADC_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000b82:	f000 fd10 	bl	80015a6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b86:	2303      	movs	r3, #3
 8000b88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000b92:	2305      	movs	r3, #5
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000ba4:	f001 fb10 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000bae:	f000 fcfa 	bl	80015a6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000bc0:	f001 fb02 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000bca:	f000 fcec 	bl	80015a6 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bce:	230b      	movs	r3, #11
 8000bd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000bdc:	f001 faf4 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000be6:	f000 fcde 	bl	80015a6 <Error_Handler>
  }

}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000074 	.word	0x20000074

08000bf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c18:	d144      	bne.n	8000ca4 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_ADC_MspInit+0xb4>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c62:	230c      	movs	r3, #12
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f001 ffda 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	2303      	movs	r3, #3
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <HAL_ADC_MspInit+0xb8>)
 8000c90:	f001 ffce 	bl	8002c30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2012      	movs	r0, #18
 8000c9a:	f001 ff92 	bl	8002bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000c9e:	2012      	movs	r0, #18
 8000ca0:	f001 ffab 	bl	8002bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <cameraDetectionTask>:
uint8_t left_brightness;
uint8_t right_brightness;


/* Functions Definition ------------------------------------------------------*/
void cameraDetectionTask(void *argument){
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af04      	add	r7, sp, #16
 8000cbe:	6078      	str	r0, [r7, #4]

//	HAL_Delay(100);
	uint32_t evt = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8000cc4:	2034      	movs	r0, #52	; 0x34
 8000cc6:	f000 fb83 	bl	80013d0 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8000cca:	2035      	movs	r0, #53	; 0x35
 8000ccc:	f000 fb80 	bl	80013d0 <setup_LP5523>



	while(1){
//		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
		evt = 0x00000001U;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
		// if signal was received successfully, start blink task
		if (evt == 0x00000001U)  {
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d1fa      	bne.n	8000cd0 <cameraDetectionTask+0x18>
//		HAL_ADC_Start_IT(&hadc1);
		// start timer to trigger DMA
//		volatile uint32_t ADCValue = 0;
			while(1){
				// reset
				diode_left = 0;
 8000cda:	4aa7      	ldr	r2, [pc, #668]	; (8000f78 <cameraDetectionTask+0x2c0>)
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	f04f 0400 	mov.w	r4, #0
 8000ce4:	e9c2 3400 	strd	r3, r4, [r2]
				diode_right = 0;
 8000ce8:	4aa4      	ldr	r2, [pc, #656]	; (8000f7c <cameraDetectionTask+0x2c4>)
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	f04f 0400 	mov.w	r4, #0
 8000cf2:	e9c2 3400 	strd	r3, r4, [r2]
				diode_center = 0;
 8000cf6:	4aa2      	ldr	r2, [pc, #648]	; (8000f80 <cameraDetectionTask+0x2c8>)
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	f04f 0400 	mov.w	r4, #0
 8000d00:	e9c2 3400 	strd	r3, r4, [r2]

				// grab SAMPLE_CNT number of samples and average it
				for(int i=0; i<SAMPLE_CNT; i++){
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e074      	b.n	8000df4 <cameraDetectionTask+0x13c>
					HAL_ADC_Start(&hadc1);
 8000d0a:	489e      	ldr	r0, [pc, #632]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000d0c:	f000 ff06 	bl	8001b1c <HAL_ADC_Start>

					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	489b      	ldr	r0, [pc, #620]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000d16:	f000 ffa3 	bl	8001c60 <HAL_ADC_PollForConversion>
					ADCValue[0] = HAL_ADC_GetValue(&hadc1);
 8000d1a:	489a      	ldr	r0, [pc, #616]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000d1c:	f001 f856 	bl	8001dcc <HAL_ADC_GetValue>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b98      	ldr	r3, [pc, #608]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000d26:	801a      	strh	r2, [r3, #0]

					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	4895      	ldr	r0, [pc, #596]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000d2e:	f000 ff97 	bl	8001c60 <HAL_ADC_PollForConversion>
					ADCValue[1] = HAL_ADC_GetValue(&hadc1);
 8000d32:	4894      	ldr	r0, [pc, #592]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000d34:	f001 f84a 	bl	8001dcc <HAL_ADC_GetValue>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b92      	ldr	r3, [pc, #584]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000d3e:	805a      	strh	r2, [r3, #2]
//					ADCValue[1] = 0;

					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	488f      	ldr	r0, [pc, #572]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000d46:	f000 ff8b 	bl	8001c60 <HAL_ADC_PollForConversion>
					ADCValue[2] = HAL_ADC_GetValue(&hadc1);
 8000d4a:	488e      	ldr	r0, [pc, #568]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000d4c:	f001 f83e 	bl	8001dcc <HAL_ADC_GetValue>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000d56:	809a      	strh	r2, [r3, #4]

					if(ADCValue[0] >= THRESHOLD){
 8000d58:	4b8b      	ldr	r3, [pc, #556]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	2bf9      	cmp	r3, #249	; 0xf9
 8000d60:	d911      	bls.n	8000d86 <cameraDetectionTask+0xce>
						diode_right += ADCValue[0];
 8000d62:	4b89      	ldr	r3, [pc, #548]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fb7f 	bl	800046c <__aeabi_i2d>
 8000d6e:	4b83      	ldr	r3, [pc, #524]	; (8000f7c <cameraDetectionTask+0x2c4>)
 8000d70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4623      	mov	r3, r4
 8000d78:	f7ff fa2c 	bl	80001d4 <__adddf3>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	460c      	mov	r4, r1
 8000d80:	4a7e      	ldr	r2, [pc, #504]	; (8000f7c <cameraDetectionTask+0x2c4>)
 8000d82:	e9c2 3400 	strd	r3, r4, [r2]
					}

					if(ADCValue[1] >= THRESHOLD){
 8000d86:	4b80      	ldr	r3, [pc, #512]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000d88:	885b      	ldrh	r3, [r3, #2]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2bf9      	cmp	r3, #249	; 0xf9
 8000d8e:	d911      	bls.n	8000db4 <cameraDetectionTask+0xfc>
						diode_left += ADCValue[1];
 8000d90:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000d92:	885b      	ldrh	r3, [r3, #2]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fb68 	bl	800046c <__aeabi_i2d>
 8000d9c:	4b76      	ldr	r3, [pc, #472]	; (8000f78 <cameraDetectionTask+0x2c0>)
 8000d9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4623      	mov	r3, r4
 8000da6:	f7ff fa15 	bl	80001d4 <__adddf3>
 8000daa:	4603      	mov	r3, r0
 8000dac:	460c      	mov	r4, r1
 8000dae:	4a72      	ldr	r2, [pc, #456]	; (8000f78 <cameraDetectionTask+0x2c0>)
 8000db0:	e9c2 3400 	strd	r3, r4, [r2]
					}

					if(ADCValue[2] >= THRESHOLD){
 8000db4:	4b74      	ldr	r3, [pc, #464]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000db6:	889b      	ldrh	r3, [r3, #4]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	2bf9      	cmp	r3, #249	; 0xf9
 8000dbc:	d911      	bls.n	8000de2 <cameraDetectionTask+0x12a>
						diode_center += ADCValue[2];
 8000dbe:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <cameraDetectionTask+0x2d0>)
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fb51 	bl	800046c <__aeabi_i2d>
 8000dca:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <cameraDetectionTask+0x2c8>)
 8000dcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4623      	mov	r3, r4
 8000dd4:	f7ff f9fe 	bl	80001d4 <__adddf3>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460c      	mov	r4, r1
 8000ddc:	4a68      	ldr	r2, [pc, #416]	; (8000f80 <cameraDetectionTask+0x2c8>)
 8000dde:	e9c2 3400 	strd	r3, r4, [r2]
					}

					HAL_ADC_Stop(&hadc1);
 8000de2:	4868      	ldr	r0, [pc, #416]	; (8000f84 <cameraDetectionTask+0x2cc>)
 8000de4:	f000 ff07 	bl	8001bf6 <HAL_ADC_Stop>
					HAL_Delay(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 fce5 	bl	80017b8 <HAL_Delay>
				for(int i=0; i<SAMPLE_CNT; i++){
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b13      	cmp	r3, #19
 8000df8:	dd87      	ble.n	8000d0a <cameraDetectionTask+0x52>
				}

				// get average
				diode_right = diode_right / SAMPLE_CNT;
 8000dfa:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <cameraDetectionTask+0x2c4>)
 8000dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <cameraDetectionTask+0x2d4>)
 8000e06:	f7ff fcc5 	bl	8000794 <__aeabi_ddiv>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	460c      	mov	r4, r1
 8000e0e:	4a5b      	ldr	r2, [pc, #364]	; (8000f7c <cameraDetectionTask+0x2c4>)
 8000e10:	e9c2 3400 	strd	r3, r4, [r2]
				diode_left = diode_left / SAMPLE_CNT;
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <cameraDetectionTask+0x2c0>)
 8000e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b5b      	ldr	r3, [pc, #364]	; (8000f8c <cameraDetectionTask+0x2d4>)
 8000e20:	f7ff fcb8 	bl	8000794 <__aeabi_ddiv>
 8000e24:	4603      	mov	r3, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	4a53      	ldr	r2, [pc, #332]	; (8000f78 <cameraDetectionTask+0x2c0>)
 8000e2a:	e9c2 3400 	strd	r3, r4, [r2]
				diode_center = diode_center / SAMPLE_CNT;
 8000e2e:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <cameraDetectionTask+0x2c8>)
 8000e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <cameraDetectionTask+0x2d4>)
 8000e3a:	f7ff fcab 	bl	8000794 <__aeabi_ddiv>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460c      	mov	r4, r1
 8000e42:	4a4f      	ldr	r2, [pc, #316]	; (8000f80 <cameraDetectionTask+0x2c8>)
 8000e44:	e9c2 3400 	strd	r3, r4, [r2]

				// treat values as vector
				vec_x = diode_right - diode_left;
 8000e48:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <cameraDetectionTask+0x2c4>)
 8000e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <cameraDetectionTask+0x2c0>)
 8000e50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	f7ff f9ba 	bl	80001d0 <__aeabi_dsub>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	4a4b      	ldr	r2, [pc, #300]	; (8000f90 <cameraDetectionTask+0x2d8>)
 8000e62:	e9c2 3400 	strd	r3, r4, [r2]
				vec_y = diode_center;
 8000e66:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <cameraDetectionTask+0x2c8>)
 8000e68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e6c:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <cameraDetectionTask+0x2dc>)
 8000e6e:	e9c2 3400 	strd	r3, r4, [r2]

				// get theta of vector if vector exists
				if (vec_y > THRESHOLD || abs(vec_x) > THRESHOLD){
 8000e72:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <cameraDetectionTask+0x2dc>)
 8000e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <cameraDetectionTask+0x2e0>)
 8000e7e:	f7ff fdef 	bl	8000a60 <__aeabi_dcmpgt>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10d      	bne.n	8000ea4 <cameraDetectionTask+0x1ec>
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <cameraDetectionTask+0x2d8>)
 8000e8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	4621      	mov	r1, r4
 8000e92:	f7ff fdef 	bl	8000a74 <__aeabi_d2iz>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bfb8      	it	lt
 8000e9c:	425b      	neglt	r3, r3
 8000e9e:	2bfa      	cmp	r3, #250	; 0xfa
 8000ea0:	f340 809f 	ble.w	8000fe2 <cameraDetectionTask+0x32a>

					// avoid dividing by zero if camera seen only on sides
					if(vec_y == 0){
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <cameraDetectionTask+0x2dc>)
 8000ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	f7ff fdad 	bl	8000a10 <__aeabi_dcmpeq>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d01a      	beq.n	8000ef2 <cameraDetectionTask+0x23a>
						if (vec_x > 0){
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <cameraDetectionTask+0x2d8>)
 8000ebe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	f7ff fdc9 	bl	8000a60 <__aeabi_dcmpgt>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d007      	beq.n	8000ee4 <cameraDetectionTask+0x22c>
							theta = 0;
 8000ed4:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <cameraDetectionTask+0x2e4>)
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	f04f 0400 	mov.w	r4, #0
 8000ede:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000ee2:	e0c0      	b.n	8001066 <cameraDetectionTask+0x3ae>
						}
						else{
							theta = M_PI;
 8000ee4:	4a2d      	ldr	r2, [pc, #180]	; (8000f9c <cameraDetectionTask+0x2e4>)
 8000ee6:	a420      	add	r4, pc, #128	; (adr r4, 8000f68 <cameraDetectionTask+0x2b0>)
 8000ee8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000eec:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000ef0:	e0b9      	b.n	8001066 <cameraDetectionTask+0x3ae>
						}
					}
					// if directly sensed by front diode
					else if(vec_x == 0){
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <cameraDetectionTask+0x2d8>)
 8000ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	f7ff fd86 	bl	8000a10 <__aeabi_dcmpeq>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <cameraDetectionTask+0x260>
						theta = M_PI_2;
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <cameraDetectionTask+0x2e4>)
 8000f0c:	a418      	add	r4, pc, #96	; (adr r4, 8000f70 <cameraDetectionTask+0x2b8>)
 8000f0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f12:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000f16:	e0a6      	b.n	8001066 <cameraDetectionTask+0x3ae>
					}
					else if(vec_x > 0){
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <cameraDetectionTask+0x2d8>)
 8000f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	f7ff fd9b 	bl	8000a60 <__aeabi_dcmpgt>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d037      	beq.n	8000fa0 <cameraDetectionTask+0x2e8>
						theta = tanh(vec_y/vec_x);
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <cameraDetectionTask+0x2dc>)
 8000f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <cameraDetectionTask+0x2d8>)
 8000f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	f7ff fc28 	bl	8000794 <__aeabi_ddiv>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	ec44 3b17 	vmov	d7, r3, r4
 8000f4c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f50:	eef0 0a67 	vmov.f32	s1, s15
 8000f54:	f003 fec8 	bl	8004ce8 <tanh>
 8000f58:	eeb0 7a40 	vmov.f32	s14, s0
 8000f5c:	eef0 7a60 	vmov.f32	s15, s1
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <cameraDetectionTask+0x2e4>)
 8000f62:	ed83 7b00 	vstr	d7, [r3]
					if(vec_y == 0){
 8000f66:	e07e      	b.n	8001066 <cameraDetectionTask+0x3ae>
 8000f68:	54442d18 	.word	0x54442d18
 8000f6c:	400921fb 	.word	0x400921fb
 8000f70:	54442d18 	.word	0x54442d18
 8000f74:	3ff921fb 	.word	0x3ff921fb
 8000f78:	20000058 	.word	0x20000058
 8000f7c:	20000060 	.word	0x20000060
 8000f80:	20000068 	.word	0x20000068
 8000f84:	20000074 	.word	0x20000074
 8000f88:	2000004c 	.word	0x2000004c
 8000f8c:	40340000 	.word	0x40340000
 8000f90:	200000c8 	.word	0x200000c8
 8000f94:	200000f8 	.word	0x200000f8
 8000f98:	406f4000 	.word	0x406f4000
 8000f9c:	200000d0 	.word	0x200000d0
					}else{
						theta = M_PI - tanh(vec_y/(-1*vec_x));
 8000fa0:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <cameraDetectionTask+0x518>)
 8000fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fa6:	4b8b      	ldr	r3, [pc, #556]	; (80011d4 <cameraDetectionTask+0x51c>)
 8000fa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4623      	mov	r3, r4
 8000fb0:	f7ff fbf0 	bl	8000794 <__aeabi_ddiv>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	460c      	mov	r4, r1
 8000fb8:	ec44 3b17 	vmov	d7, r3, r4
 8000fbc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fc0:	eef0 0a67 	vmov.f32	s1, s15
 8000fc4:	f003 fe90 	bl	8004ce8 <tanh>
 8000fc8:	ec51 0b10 	vmov	r0, r1, d0
 8000fcc:	a37a      	add	r3, pc, #488	; (adr r3, 80011b8 <cameraDetectionTask+0x500>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff f8ff 	bl	80001d4 <__adddf3>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	4a7f      	ldr	r2, [pc, #508]	; (80011d8 <cameraDetectionTask+0x520>)
 8000fdc:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000fe0:	e041      	b.n	8001066 <cameraDetectionTask+0x3ae>
					}
				}
				else{
					// turn off lights
					colorSet.loc.left_side_b = 0;
 8000fe2:	4b7e      	ldr	r3, [pc, #504]	; (80011dc <cameraDetectionTask+0x524>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	711a      	strb	r2, [r3, #4]
					colorSet.loc.right_side_b = 0;
 8000fe8:	4b7c      	ldr	r3, [pc, #496]	; (80011dc <cameraDetectionTask+0x524>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	735a      	strb	r2, [r3, #13]

					colorSet.loc.left_top_b = 0;
 8000fee:	4b7b      	ldr	r3, [pc, #492]	; (80011dc <cameraDetectionTask+0x524>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	709a      	strb	r2, [r3, #2]
					colorSet.loc.right_top_b = 0;
 8000ff4:	4b79      	ldr	r3, [pc, #484]	; (80011dc <cameraDetectionTask+0x524>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	72da      	strb	r2, [r3, #11]

					colorSet.loc.left_front_g = 0;
 8000ffa:	4b78      	ldr	r3, [pc, #480]	; (80011dc <cameraDetectionTask+0x524>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
					colorSet.loc.right_front_g= 0;
 8001000:	4b76      	ldr	r3, [pc, #472]	; (80011dc <cameraDetectionTask+0x524>)
 8001002:	2200      	movs	r2, #0
 8001004:	729a      	strb	r2, [r3, #10]

//					FrontLightsSet(&colorSet);

					memcpy(led_left_PWM, colorSet.color, 9);
 8001006:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <cameraDetectionTask+0x528>)
 8001008:	4a74      	ldr	r2, [pc, #464]	; (80011dc <cameraDetectionTask+0x524>)
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	6851      	ldr	r1, [r2, #4]
 800100e:	c303      	stmia	r3!, {r0, r1}
 8001010:	7a12      	ldrb	r2, [r2, #8]
 8001012:	701a      	strb	r2, [r3, #0]
					memcpy(led_right_PWM, &(colorSet.color[9]), 9);
 8001014:	4b73      	ldr	r3, [pc, #460]	; (80011e4 <cameraDetectionTask+0x52c>)
 8001016:	4a71      	ldr	r2, [pc, #452]	; (80011dc <cameraDetectionTask+0x524>)
 8001018:	3209      	adds	r2, #9
 800101a:	6810      	ldr	r0, [r2, #0]
 800101c:	6851      	ldr	r1, [r2, #4]
 800101e:	c303      	stmia	r3!, {r0, r1}
 8001020:	7a12      	ldrb	r2, [r2, #8]
 8001022:	701a      	strb	r2, [r3, #0]

					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8001024:	bf00      	nop
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2309      	movs	r3, #9
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <cameraDetectionTask+0x528>)
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	2216      	movs	r2, #22
 8001036:	2168      	movs	r1, #104	; 0x68
 8001038:	486b      	ldr	r0, [pc, #428]	; (80011e8 <cameraDetectionTask+0x530>)
 800103a:	f001 fffb 	bl	8003034 <HAL_I2C_Mem_Write>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <cameraDetectionTask+0x36e>
					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8001044:	bf00      	nop
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2309      	movs	r3, #9
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <cameraDetectionTask+0x52c>)
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2216      	movs	r2, #22
 8001056:	216a      	movs	r1, #106	; 0x6a
 8001058:	4863      	ldr	r0, [pc, #396]	; (80011e8 <cameraDetectionTask+0x530>)
 800105a:	f001 ffeb 	bl	8003034 <HAL_I2C_Mem_Write>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f0      	bne.n	8001046 <cameraDetectionTask+0x38e>

					continue;
 8001064:	e0a5      	b.n	80011b2 <cameraDetectionTask+0x4fa>
				}

				// calculate brightness
				if( (theta >= 0) && (theta <= M_PI_2) ){
 8001066:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <cameraDetectionTask+0x520>)
 8001068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	f7ff fcea 	bl	8000a4c <__aeabi_dcmpge>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d028      	beq.n	80010d0 <cameraDetectionTask+0x418>
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <cameraDetectionTask+0x520>)
 8001080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001084:	a34e      	add	r3, pc, #312	; (adr r3, 80011c0 <cameraDetectionTask+0x508>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fcd5 	bl	8000a38 <__aeabi_dcmple>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d01d      	beq.n	80010d0 <cameraDetectionTask+0x418>
					right_brightness = MAX_BRIGHTNESS;
 8001094:	4b55      	ldr	r3, [pc, #340]	; (80011ec <cameraDetectionTask+0x534>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	701a      	strb	r2, [r3, #0]
					left_brightness = ((float) MAX_BRIGHTNESS) * sin(theta);
 800109a:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <cameraDetectionTask+0x520>)
 800109c:	ed93 7b00 	vldr	d7, [r3]
 80010a0:	eeb0 0a47 	vmov.f32	s0, s14
 80010a4:	eef0 0a67 	vmov.f32	s1, s15
 80010a8:	f003 fdd6 	bl	8004c58 <sin>
 80010ac:	ec51 0b10 	vmov	r0, r1, d0
 80010b0:	a345      	add	r3, pc, #276	; (adr r3, 80011c8 <cameraDetectionTask+0x510>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa43 	bl	8000540 <__aeabi_dmul>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	4618      	mov	r0, r3
 80010c0:	4621      	mov	r1, r4
 80010c2:	f7ff fcff 	bl	8000ac4 <__aeabi_d2uiz>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <cameraDetectionTask+0x538>)
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e029      	b.n	8001124 <cameraDetectionTask+0x46c>
				}

				// calculate right brightness
				else{
//					theta = (theta * -1) + M_PI_2; // compensate for arctan negative region
					theta = M_PI_2 + theta;
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <cameraDetectionTask+0x520>)
 80010d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d6:	a33a      	add	r3, pc, #232	; (adr r3, 80011c0 <cameraDetectionTask+0x508>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff f87a 	bl	80001d4 <__adddf3>
 80010e0:	4603      	mov	r3, r0
 80010e2:	460c      	mov	r4, r1
 80010e4:	4a3c      	ldr	r2, [pc, #240]	; (80011d8 <cameraDetectionTask+0x520>)
 80010e6:	e9c2 3400 	strd	r3, r4, [r2]
					left_brightness = MAX_BRIGHTNESS;
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <cameraDetectionTask+0x538>)
 80010ec:	22ff      	movs	r2, #255	; 0xff
 80010ee:	701a      	strb	r2, [r3, #0]
					right_brightness = ((float) MAX_BRIGHTNESS ) * sin(theta);
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <cameraDetectionTask+0x520>)
 80010f2:	ed93 7b00 	vldr	d7, [r3]
 80010f6:	eeb0 0a47 	vmov.f32	s0, s14
 80010fa:	eef0 0a67 	vmov.f32	s1, s15
 80010fe:	f003 fdab 	bl	8004c58 <sin>
 8001102:	ec51 0b10 	vmov	r0, r1, d0
 8001106:	a330      	add	r3, pc, #192	; (adr r3, 80011c8 <cameraDetectionTask+0x510>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fa18 	bl	8000540 <__aeabi_dmul>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4618      	mov	r0, r3
 8001116:	4621      	mov	r1, r4
 8001118:	f7ff fcd4 	bl	8000ac4 <__aeabi_d2uiz>
 800111c:	4603      	mov	r3, r0
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <cameraDetectionTask+0x534>)
 8001122:	701a      	strb	r2, [r3, #0]
				}

				colorSet.loc.left_side_b = left_brightness;
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <cameraDetectionTask+0x538>)
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <cameraDetectionTask+0x524>)
 800112a:	711a      	strb	r2, [r3, #4]
				colorSet.loc.left_front_g = left_brightness;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <cameraDetectionTask+0x538>)
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <cameraDetectionTask+0x524>)
 8001132:	705a      	strb	r2, [r3, #1]
				colorSet.loc.left_top_b = left_brightness;
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <cameraDetectionTask+0x538>)
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <cameraDetectionTask+0x524>)
 800113a:	709a      	strb	r2, [r3, #2]

				colorSet.loc.right_side_b = right_brightness;
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <cameraDetectionTask+0x534>)
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <cameraDetectionTask+0x524>)
 8001142:	735a      	strb	r2, [r3, #13]
				colorSet.loc.right_front_g = right_brightness;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <cameraDetectionTask+0x534>)
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <cameraDetectionTask+0x524>)
 800114a:	729a      	strb	r2, [r3, #10]
				colorSet.loc.right_top_b = right_brightness;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <cameraDetectionTask+0x534>)
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <cameraDetectionTask+0x524>)
 8001152:	72da      	strb	r2, [r3, #11]


//				FrontLightsSet(&colorSet);
//
				memcpy(led_left_PWM, colorSet.color, 9);
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <cameraDetectionTask+0x528>)
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <cameraDetectionTask+0x524>)
 8001158:	6810      	ldr	r0, [r2, #0]
 800115a:	6851      	ldr	r1, [r2, #4]
 800115c:	c303      	stmia	r3!, {r0, r1}
 800115e:	7a12      	ldrb	r2, [r2, #8]
 8001160:	701a      	strb	r2, [r3, #0]
				memcpy(led_right_PWM, &(colorSet.color[9]), 9);
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <cameraDetectionTask+0x52c>)
 8001164:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <cameraDetectionTask+0x524>)
 8001166:	3209      	adds	r2, #9
 8001168:	6810      	ldr	r0, [r2, #0]
 800116a:	6851      	ldr	r1, [r2, #4]
 800116c:	c303      	stmia	r3!, {r0, r1}
 800116e:	7a12      	ldrb	r2, [r2, #8]
 8001170:	701a      	strb	r2, [r3, #0]

				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8001172:	bf00      	nop
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2309      	movs	r3, #9
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <cameraDetectionTask+0x528>)
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2216      	movs	r2, #22
 8001184:	2168      	movs	r1, #104	; 0x68
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <cameraDetectionTask+0x530>)
 8001188:	f001 ff54 	bl	8003034 <HAL_I2C_Mem_Write>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <cameraDetectionTask+0x4bc>
				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8001192:	bf00      	nop
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2309      	movs	r3, #9
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <cameraDetectionTask+0x52c>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	2216      	movs	r2, #22
 80011a4:	216a      	movs	r1, #106	; 0x6a
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <cameraDetectionTask+0x530>)
 80011a8:	f001 ff44 	bl	8003034 <HAL_I2C_Mem_Write>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <cameraDetectionTask+0x4dc>
				diode_left = 0;
 80011b2:	e592      	b.n	8000cda <cameraDetectionTask+0x22>
 80011b4:	f3af 8000 	nop.w
 80011b8:	54442d18 	.word	0x54442d18
 80011bc:	400921fb 	.word	0x400921fb
 80011c0:	54442d18 	.word	0x54442d18
 80011c4:	3ff921fb 	.word	0x3ff921fb
 80011c8:	00000000 	.word	0x00000000
 80011cc:	406fe000 	.word	0x406fe000
 80011d0:	200000f8 	.word	0x200000f8
 80011d4:	200000c8 	.word	0x200000c8
 80011d8:	200000d0 	.word	0x200000d0
 80011dc:	200000d8 	.word	0x200000d8
 80011e0:	20000034 	.word	0x20000034
 80011e4:	20000040 	.word	0x20000040
 80011e8:	20000104 	.word	0x20000104
 80011ec:	200000f0 	.word	0x200000f0
 80011f0:	200000f1 	.word	0x200000f1

080011f4 <HAL_ADC_ConvCpltCallback>:
//}


volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
//	HAL_ADC_Stop_DMA(&hadc1);
	complete++;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_ADC_ConvCpltCallback+0x24>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	3301      	adds	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <HAL_ADC_ConvCpltCallback+0x24>)
 8001208:	701a      	strb	r2, [r3, #0]
//
//	// notify ThermopileTask that conversion is complete
//	diodeSamplesPtr = &(diodeSamples[HALF_DIODE_SAMPLES]);
//	osThreadFlagsSet(cameraDetectionTaskHandle, 0x00000004U);

}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000070 	.word	0x20000070

0800121c <HAL_ADC_ErrorCallback>:

}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  i++;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_ADC_ErrorCallback+0x24>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_ADC_ErrorCallback+0x24>)
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000071 	.word	0x20000071

08001244 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_GPIO_Init+0x44>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <MX_GPIO_Init+0x44>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_GPIO_Init+0x44>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_GPIO_Init+0x44>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <MX_GPIO_Init+0x44>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126c:	6153      	str	r3, [r2, #20]
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_GPIO_Init+0x44>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_I2C1_Init+0x74>)
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <MX_I2C1_Init+0x78>)
 8001294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301D29;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_I2C1_Init+0x74>)
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <MX_I2C1_Init+0x7c>)
 800129a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_I2C1_Init+0x74>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_I2C1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <MX_I2C1_Init+0x74>)
 80012c8:	f001 fe24 	bl	8002f14 <HAL_I2C_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012d2:	f000 f968 	bl	80015a6 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <MX_I2C1_Init+0x74>)
 80012da:	f002 f987 	bl	80035ec <HAL_I2CEx_ConfigAnalogFilter>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012e4:	f000 f95f 	bl	80015a6 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_I2C1_Init+0x74>)
 80012ec:	f002 f9c9 	bl	8003682 <HAL_I2CEx_ConfigDigitalFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012f6:	f000 f956 	bl	80015a6 <Error_Handler>
  }

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000104 	.word	0x20000104
 8001304:	40005400 	.word	0x40005400
 8001308:	00301d29 	.word	0x00301d29

0800130c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_I2C_MspInit+0xb8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d145      	bne.n	80013ba <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6153      	str	r3, [r2, #20]
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800135e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001364:	2312      	movs	r3, #18
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001368:	2301      	movs	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001370:	2304      	movs	r3, #4
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f001 fc57 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001392:	2304      	movs	r3, #4
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <HAL_I2C_MspInit+0xc0>)
 800139e:	f001 fc47 	bl	8002c30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 80013a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_I2C_MspInit+0xbc>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40005400 	.word	0x40005400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400

080013d0 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af04      	add	r7, sp, #16
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	uint8_t deviceAddress = ADDR << 1;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	77fb      	strb	r3, [r7, #31]
	uint8_t led_PWM[9] = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	721a      	strb	r2, [r3, #8]
	uint8_t packet;

	// enable chip
	packet = LP5525_CHIP_EN;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	74fb      	strb	r3, [r7, #19]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80013f0:	bf00      	nop
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	b299      	uxth	r1, r3
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 0313 	add.w	r3, r7, #19
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	2200      	movs	r2, #0
 800140a:	4835      	ldr	r0, [pc, #212]	; (80014e0 <setup_LP5523+0x110>)
 800140c:	f001 fe12 	bl	8003034 <HAL_I2C_Mem_Write>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ed      	bne.n	80013f2 <setup_LP5523+0x22>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8001416:	234f      	movs	r3, #79	; 0x4f
 8001418:	74fb      	strb	r3, [r7, #19]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 800141a:	bf00      	nop
 800141c:	7ffb      	ldrb	r3, [r7, #31]
 800141e:	b299      	uxth	r1, r3
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2301      	movs	r3, #1
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	f107 0313 	add.w	r3, r7, #19
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	2236      	movs	r2, #54	; 0x36
 8001434:	482a      	ldr	r0, [pc, #168]	; (80014e0 <setup_LP5523+0x110>)
 8001436:	f001 fdfd 	bl	8003034 <HAL_I2C_Mem_Write>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1ed      	bne.n	800141c <setup_LP5523+0x4c>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8001440:	bf00      	nop
 8001442:	7ffb      	ldrb	r3, [r7, #31]
 8001444:	b299      	uxth	r1, r3
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2309      	movs	r3, #9
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	2216      	movs	r2, #22
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <setup_LP5523+0x110>)
 800145c:	f001 fdea 	bl	8003034 <HAL_I2C_Mem_Write>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ed      	bne.n	8001442 <setup_LP5523+0x72>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 8001466:	bf00      	nop
 8001468:	7ffb      	ldrb	r3, [r7, #31]
 800146a:	b299      	uxth	r1, r3
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2309      	movs	r3, #9
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <setup_LP5523+0x114>)
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2226      	movs	r2, #38	; 0x26
 800147e:	4818      	ldr	r0, [pc, #96]	; (80014e0 <setup_LP5523+0x110>)
 8001480:	f001 fdd8 	bl	8003034 <HAL_I2C_Mem_Write>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ee      	bne.n	8001468 <setup_LP5523+0x98>

	// enable logarithmic dimming
	packet = LOG_EN;
 800148a:	2320      	movs	r3, #32
 800148c:	74fb      	strb	r3, [r7, #19]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 800148e:	7cfb      	ldrb	r3, [r7, #19]
 8001490:	723b      	strb	r3, [r7, #8]
 8001492:	7cfb      	ldrb	r3, [r7, #19]
 8001494:	727b      	strb	r3, [r7, #9]
 8001496:	7cfb      	ldrb	r3, [r7, #19]
 8001498:	72bb      	strb	r3, [r7, #10]
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	72fb      	strb	r3, [r7, #11]
 800149e:	7cfb      	ldrb	r3, [r7, #19]
 80014a0:	733b      	strb	r3, [r7, #12]
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	737b      	strb	r3, [r7, #13]
 80014a6:	7cfb      	ldrb	r3, [r7, #19]
 80014a8:	73bb      	strb	r3, [r7, #14]
 80014aa:	7cfb      	ldrb	r3, [r7, #19]
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	7cfb      	ldrb	r3, [r7, #19]
 80014b0:	743b      	strb	r3, [r7, #16]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 80014b2:	bf00      	nop
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	b299      	uxth	r1, r3
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	2309      	movs	r3, #9
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	2206      	movs	r2, #6
 80014cc:	4804      	ldr	r0, [pc, #16]	; (80014e0 <setup_LP5523+0x110>)
 80014ce:	f001 fdb1 	bl	8003034 <HAL_I2C_Mem_Write>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ed      	bne.n	80014b4 <setup_LP5523+0xe4>

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000104 	.word	0x20000104
 80014e4:	20000000 	.word	0x20000000

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 f8fe 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f809 	bl	8001506 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f7ff fea6 	bl	8001244 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014f8:	f7ff fec8 	bl	800128c <MX_I2C1_Init>
  MX_ADC1_Init();
 80014fc:	f7ff fb02 	bl	8000b04 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  cameraDetectionTask();
 8001500:	f7ff fbda 	bl	8000cb8 <cameraDetectionTask>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001504:	e7fe      	b.n	8001504 <main+0x1c>

08001506 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b09c      	sub	sp, #112	; 0x70
 800150a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001510:	2228      	movs	r2, #40	; 0x28
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fb97 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2230      	movs	r2, #48	; 0x30
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fb89 	bl	8004c48 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001536:	2302      	movs	r3, #2
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153e:	2310      	movs	r3, #16
 8001540:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154a:	4618      	mov	r0, r3
 800154c:	f002 f8e6 	bl	800371c <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001556:	f000 f826 	bl	80015a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800155e:	2300      	movs	r3, #0
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800156e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f002 ffd9 	bl	800452c <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001580:	f000 f811 	bl	80015a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001584:	2320      	movs	r3, #32
 8001586:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f003 f9b2 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x98>
  {
    Error_Handler();
 800159a:	f000 f804 	bl	80015a6 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3770      	adds	r7, #112	; 0x70
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x44>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x44>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x44>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x44>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x44>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x44>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 f892 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <ADC1_IRQHandler+0x10>)
 800165e:	f000 fbc3 	bl	8001de8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000074 	.word	0x20000074

0800166c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <SystemInit+0x28>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <SystemInit+0x28>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SystemInit+0x28>)
 8001682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001686:	609a      	str	r2, [r3, #8]
#endif
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800169c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800169e:	e003      	b.n	80016a8 <LoopCopyDataInit>

080016a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016a6:	3104      	adds	r1, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80016ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016b0:	d3f6      	bcc.n	80016a0 <CopyDataInit>
	ldr	r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016b4:	e002      	b.n	80016bc <LoopFillZerobss>

080016b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016b8:	f842 3b04 	str.w	r3, [r2], #4

080016bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <LoopForever+0x16>)
	cmp	r2, r3
 80016be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016c0:	d3f9      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016c2:	f7ff ffd3 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f003 fa9b 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ca:	f7ff ff0d 	bl	80014e8 <main>

080016ce <LoopForever>:

LoopForever:
    b LoopForever
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016d0:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80016d4:	08006418 	.word	0x08006418
	ldr	r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016dc:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 80016e0:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 80016e4:	20000154 	.word	0x20000154

080016e8 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <COMP2_IRQHandler>
	...

080016ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_Init+0x28>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_Init+0x28>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f001 fa55 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	2000      	movs	r0, #0
 8001704:	f000 f808 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff ff54 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000

08001718 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fa6d 	bl	8002c16 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f001 fa35 	bl	8002bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000000c 	.word	0x2000000c
 8001770:	20000014 	.word	0x20000014
 8001774:	20000010 	.word	0x20000010

08001778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000014 	.word	0x20000014
 800179c:	20000150 	.word	0x20000150

080017a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000150 	.word	0x20000150

080017b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_Delay+0x40>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000014 	.word	0x20000014

080017fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b09a      	sub	sp, #104	; 0x68
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e169      	b.n	8001b04 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d176      	bne.n	8001930 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d152      	bne.n	80018f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff f9c7 	bl	8000bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d13b      	bne.n	80018f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 ffb9 	bl	80027f0 <ADC_Disable>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d12f      	bne.n	80018f0 <HAL_ADC_Init+0xe0>
 8001890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001894:	2b00      	cmp	r3, #0
 8001896:	d12b      	bne.n	80018f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018a0:	f023 0302 	bic.w	r3, r3, #2
 80018a4:	f043 0202 	orr.w	r2, r3, #2
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018cc:	4b8f      	ldr	r3, [pc, #572]	; (8001b0c <HAL_ADC_Init+0x2fc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <HAL_ADC_Init+0x300>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9a      	lsrs	r2, r3, #18
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e2:	e002      	b.n	80018ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800190c:	d110      	bne.n	8001930 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f023 0312 	bic.w	r3, r3, #18
 8001916:	f043 0210 	orr.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 80d6 	bne.w	8001aea <HAL_ADC_Init+0x2da>
 800193e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80d1 	bne.w	8001aea <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 80c9 	bne.w	8001aea <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001960:	f043 0202 	orr.w	r2, r3, #2
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <HAL_ADC_Init+0x304>)
 800196a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d108      	bne.n	8001990 <HAL_ADC_Init+0x180>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_Init+0x180>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_ADC_Init+0x182>
 8001990:	2300      	movs	r3, #0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11c      	bne.n	80019d0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001996:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001998:	2b00      	cmp	r3, #0
 800199a:	d010      	beq.n	80019be <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_ADC_Init+0x1a8>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_Init+0x1a8>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_ADC_Init+0x1aa>
 80019b8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d108      	bne.n	80019d0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80019be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ce:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e5b      	ldrb	r3, [r3, #25]
 80019d4:	035b      	lsls	r3, r3, #13
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d002      	beq.n	80019e4 <HAL_ADC_Init+0x1d4>
 80019de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019e2:	e000      	b.n	80019e6 <HAL_ADC_Init+0x1d6>
 80019e4:	2200      	movs	r2, #0
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019f6:	4313      	orrs	r3, r2
 80019f8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d11b      	bne.n	8001a3c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e5b      	ldrb	r3, [r3, #25]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	3b01      	subs	r3, #1
 8001a12:	045a      	lsls	r2, r3, #17
 8001a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8001a1e:	e00d      	b.n	8001a3c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d007      	beq.n	8001a54 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a50:	4313      	orrs	r3, r2
 8001a52:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d114      	bne.n	8001a8c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a70:	f023 0302 	bic.w	r3, r3, #2
 8001a74:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7e1b      	ldrb	r3, [r3, #24]
 8001a7a:	039a      	lsls	r2, r3, #14
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4313      	orrs	r3, r2
 8001a86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_ADC_Init+0x308>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f023 010f 	bic.w	r1, r3, #15
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac0:	e007      	b.n	8001ad2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 020f 	bic.w	r2, r2, #15
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f023 0303 	bic.w	r3, r3, #3
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae8:	e00a      	b.n	8001b00 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f023 0312 	bic.w	r3, r3, #18
 8001af2:	f043 0210 	orr.w	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3768      	adds	r7, #104	; 0x68
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	50000300 	.word	0x50000300
 8001b18:	fff0c007 	.word	0xfff0c007

08001b1c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d158      	bne.n	8001be8 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_Start+0x28>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e054      	b.n	8001bee <HAL_ADC_Start+0xd2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fdf1 	bl	8002734 <ADC_Enable>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d140      	bne.n	8001bde <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f023 0206 	bic.w	r2, r3, #6
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb4:	e002      	b.n	8001bbc <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	221c      	movs	r2, #28
 8001bca:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0204 	orr.w	r2, r2, #4
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001be6:	e001      	b.n	8001bec <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
 8001bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_Stop+0x1a>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e023      	b.n	8001c58 <HAL_ADC_Stop+0x62>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001c18:	216c      	movs	r1, #108	; 0x6c
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fe48 	bl	80028b0 <ADC_ConversionStop>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d111      	bne.n	8001c4e <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fde0 	bl	80027f0 <ADC_Disable>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d102      	bne.n	8001c7c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001c76:	2308      	movs	r3, #8
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e02e      	b.n	8001cda <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <HAL_ADC_PollForConversion+0x168>)
 8001c7e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d112      	bne.n	8001cb2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d11d      	bne.n	8001cd6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f043 0220 	orr.w	r2, r3, #32
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e086      	b.n	8001dc0 <HAL_ADC_PollForConversion+0x160>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0220 	orr.w	r2, r3, #32
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e074      	b.n	8001dc0 <HAL_ADC_PollForConversion+0x160>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001ce2:	f7ff fd5d 	bl	80017a0 <HAL_GetTick>
 8001ce6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ce8:	e01a      	b.n	8001d20 <HAL_ADC_PollForConversion+0xc0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d016      	beq.n	8001d20 <HAL_ADC_PollForConversion+0xc0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_ADC_PollForConversion+0xa8>
 8001cf8:	f7ff fd52 	bl	80017a0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d20b      	bcs.n	8001d20 <HAL_ADC_PollForConversion+0xc0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e04f      	b.n	8001dc0 <HAL_ADC_PollForConversion+0x160>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0dd      	beq.n	8001cea <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d131      	bne.n	8001dac <HAL_ADC_PollForConversion+0x14c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d12c      	bne.n	8001dac <HAL_ADC_PollForConversion+0x14c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d125      	bne.n	8001dac <HAL_ADC_PollForConversion+0x14c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d112      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x134>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d112      	bne.n	8001dac <HAL_ADC_PollForConversion+0x14c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
 8001d92:	e00b      	b.n	8001dac <HAL_ADC_PollForConversion+0x14c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_ADC_PollForConversion+0x15e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	50000300 	.word	0x50000300

08001dcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_IRQHandler+0x30>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d00d      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d15e      	bne.n	8001ee4 <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d157      	bne.n	8001ee4 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d139      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d134      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d12d      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d11a      	bne.n	8001ebe <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 020c 	bic.w	r2, r2, #12
 8001e96:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d112      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
 8001ebc:	e00b      	b.n	8001ed6 <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f043 0210 	orr.w	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff f98c 	bl	80011f4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	220c      	movs	r2, #12
 8001ee2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d106      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x118>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d00d      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d16d      	bne.n	8001fea <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	2b40      	cmp	r3, #64	; 0x40
 8001f1a:	d166      	bne.n	8001fea <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_ADC_IRQHandler+0x178>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d149      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x1f4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d142      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x1f4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d13d      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x1f4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	d136      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x1f4>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d12d      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x1f4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f9c:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d112      	bne.n	8001fdc <HAL_ADC_IRQHandler+0x1f4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fc2:	e00b      	b.n	8001fdc <HAL_ADC_IRQHandler+0x1f4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8cb 	bl	8002178 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2260      	movs	r2, #96	; 0x60
 8001fe8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d113      	bne.n	8002020 <HAL_ADC_IRQHandler+0x238>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d10c      	bne.n	8002020 <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fbf2 	bl	80017fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202e:	d115      	bne.n	800205c <HAL_ADC_IRQHandler+0x274>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203e:	d10d      	bne.n	800205c <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8a7 	bl	80021a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206a:	d115      	bne.n	8002098 <HAL_ADC_IRQHandler+0x2b0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800207a:	d10d      	bne.n	8002098 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f893 	bl	80021b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002096:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d13d      	bne.n	8002122 <HAL_ADC_IRQHandler+0x33a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d136      	bne.n	8002122 <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 80020bc:	2301      	movs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e019      	b.n	80020f6 <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_ADC_IRQHandler+0x38c>)
 80020c4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10a      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 80020e0:	2301      	movs	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10e      	bne.n	800211a <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	f043 0202 	orr.w	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff f881 	bl	800121c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2210      	movs	r2, #16
 8002120:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002130:	d11b      	bne.n	800216a <HAL_ADC_IRQHandler+0x382>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002140:	d113      	bne.n	800216a <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f043 0208 	orr.w	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002162:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f811 	bl	800218c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	50000300 	.word	0x50000300

08002178 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b09b      	sub	sp, #108	; 0x6c
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x22>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e299      	b.n	800271e <HAL_ADC_ConfigChannel+0x556>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 827d 	bne.w	80026fc <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b04      	cmp	r3, #4
 8002208:	d81c      	bhi.n	8002244 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	461a      	mov	r2, r3
 800221e:	231f      	movs	r3, #31
 8002220:	4093      	lsls	r3, r2
 8002222:	43db      	mvns	r3, r3
 8002224:	4019      	ands	r1, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
 8002242:	e063      	b.n	800230c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b09      	cmp	r3, #9
 800224a:	d81e      	bhi.n	800228a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	3b1e      	subs	r3, #30
 8002260:	221f      	movs	r2, #31
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	4019      	ands	r1, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	3b1e      	subs	r3, #30
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
 8002288:	e040      	b.n	800230c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b0e      	cmp	r3, #14
 8002290:	d81e      	bhi.n	80022d0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	3b3c      	subs	r3, #60	; 0x3c
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4019      	ands	r1, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	3b3c      	subs	r3, #60	; 0x3c
 80022c2:	fa00 f203 	lsl.w	r2, r0, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
 80022ce:	e01d      	b.n	800230c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	3b5a      	subs	r3, #90	; 0x5a
 80022e4:	221f      	movs	r2, #31
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	4019      	ands	r1, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	3b5a      	subs	r3, #90	; 0x5a
 8002300:	fa00 f203 	lsl.w	r2, r0, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 80e5 	bne.w	80024e6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d91c      	bls.n	800235e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6999      	ldr	r1, [r3, #24]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	2207      	movs	r2, #7
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	4019      	ands	r1, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6898      	ldr	r0, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	3b1e      	subs	r3, #30
 8002350:	fa00 f203 	lsl.w	r2, r0, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	e019      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6959      	ldr	r1, [r3, #20]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	2207      	movs	r2, #7
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	4019      	ands	r1, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6898      	ldr	r0, [r3, #8]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	fa00 f203 	lsl.w	r2, r0, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d84f      	bhi.n	8002454 <HAL_ADC_ConfigChannel+0x28c>
 80023b4:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_ADC_ConfigChannel+0x1f4>)
 80023b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ba:	bf00      	nop
 80023bc:	080023cd 	.word	0x080023cd
 80023c0:	080023ef 	.word	0x080023ef
 80023c4:	08002411 	.word	0x08002411
 80023c8:	08002433 	.word	0x08002433
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d2:	4b99      	ldr	r3, [pc, #612]	; (8002638 <HAL_ADC_ConfigChannel+0x470>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	0691      	lsls	r1, r2, #26
 80023dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023de:	430a      	orrs	r2, r1
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023ea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023ec:	e07e      	b.n	80024ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023f4:	4b90      	ldr	r3, [pc, #576]	; (8002638 <HAL_ADC_ConfigChannel+0x470>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	0691      	lsls	r1, r2, #26
 80023fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002400:	430a      	orrs	r2, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800240c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800240e:	e06d      	b.n	80024ec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_ADC_ConfigChannel+0x470>)
 8002418:	4013      	ands	r3, r2
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	0691      	lsls	r1, r2, #26
 8002420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002422:	430a      	orrs	r2, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800242e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002430:	e05c      	b.n	80024ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002438:	4b7f      	ldr	r3, [pc, #508]	; (8002638 <HAL_ADC_ConfigChannel+0x470>)
 800243a:	4013      	ands	r3, r2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	0691      	lsls	r1, r2, #26
 8002442:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002444:	430a      	orrs	r2, r1
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002450:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002452:	e04b      	b.n	80024ec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	069b      	lsls	r3, r3, #26
 8002464:	429a      	cmp	r2, r3
 8002466:	d107      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002476:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	069b      	lsls	r3, r3, #26
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800249a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	069b      	lsls	r3, r3, #26
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d107      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024be:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	069b      	lsls	r3, r3, #26
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10a      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80024e4:	e001      	b.n	80024ea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <HAL_ADC_ConfigChannel+0x324>
      break;
 80024ea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_ADC_ConfigChannel+0x344>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x344>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_ADC_ConfigChannel+0x346>
 800250c:	2300      	movs	r3, #0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 80ff 	bne.w	8002712 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d00f      	beq.n	800253c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2201      	movs	r2, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800253a:	e049      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	409a      	lsls	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b09      	cmp	r3, #9
 800255c:	d91c      	bls.n	8002598 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6999      	ldr	r1, [r3, #24]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	3b1b      	subs	r3, #27
 8002570:	2207      	movs	r2, #7
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	4019      	ands	r1, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6898      	ldr	r0, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	3b1b      	subs	r3, #27
 800258a:	fa00 f203 	lsl.w	r2, r0, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	619a      	str	r2, [r3, #24]
 8002596:	e01b      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6959      	ldr	r1, [r3, #20]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	2207      	movs	r2, #7
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	4019      	ands	r1, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6898      	ldr	r0, [r3, #8]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	fa00 f203 	lsl.w	r2, r0, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_ADC_ConfigChannel+0x474>)
 80025d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025ec:	2b11      	cmp	r3, #17
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80025f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002600:	2b12      	cmp	r3, #18
 8002602:	f040 8086 	bne.w	8002712 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d17f      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10d      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x478>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d106      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x478>
 8002632:	2301      	movs	r3, #1
 8002634:	e005      	b.n	8002642 <HAL_ADC_ConfigChannel+0x47a>
 8002636:	bf00      	nop
 8002638:	83fff000 	.word	0x83fff000
 800263c:	50000300 	.word	0x50000300
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d150      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002646:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x4a0>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x4a0>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_ADC_ConfigChannel+0x4a2>
 8002668:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800266a:	2b00      	cmp	r3, #0
 800266c:	d13c      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b10      	cmp	r3, #16
 8002674:	d11d      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x4ea>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800267e:	d118      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_ADC_ConfigChannel+0x564>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_ADC_ConfigChannel+0x568>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0c9a      	lsrs	r2, r3, #18
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a2:	e002      	b.n	80026aa <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f9      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026b0:	e02e      	b.n	8002710 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b11      	cmp	r3, #17
 80026b8:	d10b      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x50a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c2:	d106      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80026c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80026cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026d0:	e01e      	b.n	8002710 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d11a      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80026da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026e6:	e013      	b.n	8002710 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80026fa:	e00a      	b.n	8002712 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800270e:	e000      	b.n	8002712 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002710:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800271a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800271e:	4618      	mov	r0, r3
 8002720:	376c      	adds	r7, #108	; 0x6c
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	2000000c 	.word	0x2000000c
 8002730:	431bde83 	.word	0x431bde83

08002734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <ADC_Enable+0x2c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <ADC_Enable+0x2c>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <ADC_Enable+0x2e>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d13c      	bne.n	80027e0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <ADC_Enable+0xb8>)
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0210 	orr.w	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e028      	b.n	80027e2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027a0:	f7fe fffe 	bl	80017a0 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027a6:	e014      	b.n	80027d2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027a8:	f7fe fffa 	bl	80017a0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d90d      	bls.n	80027d2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f043 0210 	orr.w	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e007      	b.n	80027e2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d1e3      	bne.n	80027a8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	8000003f 	.word	0x8000003f

080027f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d108      	bne.n	800281c <ADC_Disable+0x2c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <ADC_Disable+0x2c>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <ADC_Disable+0x2e>
 800281c:	2300      	movs	r3, #0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d040      	beq.n	80028a4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030d 	and.w	r3, r3, #13
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10f      	bne.n	8002850 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0202 	orr.w	r2, r2, #2
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2203      	movs	r2, #3
 8002846:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002848:	f7fe ffaa 	bl	80017a0 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800284e:	e022      	b.n	8002896 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e01c      	b.n	80028a6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800286c:	f7fe ff98 	bl	80017a0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d90d      	bls.n	8002896 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e007      	b.n	80028a6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d0e3      	beq.n	800286c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8093 	beq.w	80029fc <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e4:	d12a      	bne.n	800293c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d126      	bne.n	800293c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d122      	bne.n	800293c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80028f6:	230c      	movs	r3, #12
 80028f8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80028fa:	e014      	b.n	8002926 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <ADC_ConversionStop+0x158>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d90d      	bls.n	8002920 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e06e      	b.n	80029fe <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	3301      	adds	r3, #1
 8002924:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d1e3      	bne.n	80028fc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2240      	movs	r2, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b60      	cmp	r3, #96	; 0x60
 8002940:	d015      	beq.n	800296e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d10e      	bne.n	800296e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0210 	orr.w	r2, r2, #16
 800296c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	d015      	beq.n	80029a0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b08      	cmp	r3, #8
 8002980:	d10e      	bne.n	80029a0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b60      	cmp	r3, #96	; 0x60
 80029a4:	d004      	beq.n	80029b0 <ADC_ConversionStop+0x100>
 80029a6:	2b6c      	cmp	r3, #108	; 0x6c
 80029a8:	d105      	bne.n	80029b6 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029aa:	230c      	movs	r3, #12
 80029ac:	617b      	str	r3, [r7, #20]
        break;
 80029ae:	e005      	b.n	80029bc <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80029b0:	2308      	movs	r3, #8
 80029b2:	617b      	str	r3, [r7, #20]
        break;
 80029b4:	e002      	b.n	80029bc <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029b6:	2304      	movs	r3, #4
 80029b8:	617b      	str	r3, [r7, #20]
        break;
 80029ba:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029bc:	f7fe fef0 	bl	80017a0 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029c2:	e014      	b.n	80029ee <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029c4:	f7fe feec 	bl	80017a0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b0b      	cmp	r3, #11
 80029d0:	d90d      	bls.n	80029ee <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e007      	b.n	80029fe <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e3      	bne.n	80029c4 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	000993ff 	.word	0x000993ff

08002a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <__NVIC_EnableIRQ+0x38>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db0a      	blt.n	8002ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	490c      	ldr	r1, [pc, #48]	; (8002af8 <__NVIC_SetPriority+0x4c>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad4:	e00a      	b.n	8002aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <__NVIC_SetPriority+0x50>)
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	440b      	add	r3, r1
 8002aea:	761a      	strb	r2, [r3, #24]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	bf28      	it	cs
 8002b1e:	2304      	movcs	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d902      	bls.n	8002b30 <NVIC_EncodePriority+0x30>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <NVIC_EncodePriority+0x32>
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	4313      	orrs	r3, r2
         );
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff8e 	bl	8002aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff29 	bl	8002a0c <__NVIC_SetPriorityGrouping>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff ff3e 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff8e 	bl	8002b00 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5d 	bl	8002aac <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff31 	bl	8002a70 <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa2 	bl	8002b68 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3e:	e14e      	b.n	8002ede <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8140 	beq.w	8002ed8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x38>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d123      	bne.n	8002cb0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	08da      	lsrs	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3208      	adds	r2, #8
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	6939      	ldr	r1, [r7, #16]
 8002cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d00b      	beq.n	8002d04 <HAL_GPIO_Init+0xd4>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d007      	beq.n	8002d04 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf8:	2b11      	cmp	r3, #17
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b12      	cmp	r3, #18
 8002d02:	d130      	bne.n	8002d66 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f003 0201 	and.w	r2, r3, #1
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 809a 	beq.w	8002ed8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	4b55      	ldr	r3, [pc, #340]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	4a54      	ldr	r2, [pc, #336]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6193      	str	r3, [r2, #24]
 8002db0:	4b52      	ldr	r3, [pc, #328]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dbc:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de6:	d013      	beq.n	8002e10 <HAL_GPIO_Init+0x1e0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a46      	ldr	r2, [pc, #280]	; (8002f04 <HAL_GPIO_Init+0x2d4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00d      	beq.n	8002e0c <HAL_GPIO_Init+0x1dc>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a45      	ldr	r2, [pc, #276]	; (8002f08 <HAL_GPIO_Init+0x2d8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_Init+0x1d8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a44      	ldr	r2, [pc, #272]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_GPIO_Init+0x1d4>
 8002e00:	2303      	movs	r3, #3
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e04:	2305      	movs	r3, #5
 8002e06:	e004      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e10:	2300      	movs	r3, #0
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e22:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e54:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e7e:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f aea9 	bne.w	8002c40 <HAL_GPIO_Init+0x10>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e081      	b.n	800302a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe f9e6 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	e006      	b.n	8002f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d104      	bne.n	8002fae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	ea42 0103 	orr.w	r1, r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69d9      	ldr	r1, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	817b      	strh	r3, [r7, #10]
 8003046:	460b      	mov	r3, r1
 8003048:	813b      	strh	r3, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	f040 80f9 	bne.w	800324e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_I2C_Mem_Write+0x34>
 8003062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ed      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_I2C_Mem_Write+0x4e>
 800307e:	2302      	movs	r3, #2
 8003080:	e0e6      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800308a:	f7fe fb89 	bl	80017a0 <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2319      	movs	r3, #25
 8003096:	2201      	movs	r2, #1
 8003098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f955 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d1      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2221      	movs	r2, #33	; 0x21
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2240      	movs	r2, #64	; 0x40
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030d4:	88f8      	ldrh	r0, [r7, #6]
 80030d6:	893a      	ldrh	r2, [r7, #8]
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4603      	mov	r3, r0
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f8b9 	bl	800325c <I2C_RequestMemoryWrite>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0a9      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2bff      	cmp	r3, #255	; 0xff
 8003104:	d90e      	bls.n	8003124 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	22ff      	movs	r2, #255	; 0xff
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	b2da      	uxtb	r2, r3
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	2300      	movs	r3, #0
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fa37 	bl	8003590 <I2C_TransferConfig>
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	b2da      	uxtb	r2, r3
 8003134:	8979      	ldrh	r1, [r7, #10]
 8003136:	2300      	movs	r3, #0
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa26 	bl	8003590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f93f 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e07b      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d034      	beq.n	80031fc <HAL_I2C_Mem_Write+0x1c8>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d130      	bne.n	80031fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	2200      	movs	r2, #0
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f8d1 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e04d      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2bff      	cmp	r3, #255	; 0xff
 80031bc:	d90e      	bls.n	80031dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	22ff      	movs	r2, #255	; 0xff
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	8979      	ldrh	r1, [r7, #10]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f9db 	bl	8003590 <I2C_TransferConfig>
 80031da:	e00f      	b.n	80031fc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	8979      	ldrh	r1, [r7, #10]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f9ca 	bl	8003590 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d19e      	bne.n	8003144 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f91e 	bl	800344c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e01a      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_I2C_Mem_Write+0x224>)
 800322e:	400b      	ands	r3, r1
 8003230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	fe00e800 	.word	0xfe00e800

0800325c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	8979      	ldrh	r1, [r7, #10]
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <I2C_RequestMemoryWrite+0xa4>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f983 	bl	8003590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f89c 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e02c      	b.n	80032f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a4:	893b      	ldrh	r3, [r7, #8]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
 80032ae:	e015      	b.n	80032dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f882 	bl	80033cc <I2C_WaitOnTXISFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e012      	b.n	80032f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032d2:	893b      	ldrh	r3, [r7, #8]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2200      	movs	r2, #0
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f830 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	80002000 	.word	0x80002000

08003304 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d103      	bne.n	8003322 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d007      	beq.n	8003340 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	619a      	str	r2, [r3, #24]
  }
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335c:	e022      	b.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d01e      	beq.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fa1b 	bl	80017a0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d113      	bne.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e00f      	b.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d0cd      	beq.n	800335e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d8:	e02c      	b.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f870 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e02a      	b.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d01e      	beq.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe f9d3 	bl	80017a0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d113      	bne.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e007      	b.n	8003444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d1cb      	bne.n	80033da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003458:	e028      	b.n	80034ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f830 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e026      	b.n	80034bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fe f997 	bl	80017a0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d113      	bne.n	80034ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e007      	b.n	80034bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d1cf      	bne.n	800345a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d151      	bne.n	8003582 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034de:	e022      	b.n	8003526 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d01e      	beq.n	8003526 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7fe f95a 	bl	80017a0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_IsAcknowledgeFailed+0x3a>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d113      	bne.n	8003526 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e02e      	b.n	8003584 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d1d5      	bne.n	80034e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2210      	movs	r2, #16
 800353a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2220      	movs	r2, #32
 8003542:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fedd 	bl	8003304 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <I2C_IsAcknowledgeFailed+0xc8>)
 8003556:	400b      	ands	r3, r1
 8003558:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	fe00e800 	.word	0xfe00e800

08003590 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	4613      	mov	r3, r2
 80035a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	0d5b      	lsrs	r3, r3, #21
 80035ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <I2C_TransferConfig+0x58>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	43db      	mvns	r3, r3
 80035b6:	ea02 0103 	and.w	r1, r2, r3
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035c0:	7a7b      	ldrb	r3, [r7, #9]
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	03ff63ff 	.word	0x03ff63ff

080035ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d138      	bne.n	8003674 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800360c:	2302      	movs	r3, #2
 800360e:	e032      	b.n	8003676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	; 0x24
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800363e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b20      	cmp	r3, #32
 8003696:	d139      	bne.n	800370c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e033      	b.n	800370e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2224      	movs	r2, #36	; 0x24
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003722:	af00      	add	r7, sp, #0
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	f000 bef4 	b.w	800451e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 816a 	beq.w	8003a1a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003746:	4bb3      	ldr	r3, [pc, #716]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00c      	beq.n	800376c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003752:	4bb0      	ldr	r3, [pc, #704]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b08      	cmp	r3, #8
 800375c:	d159      	bne.n	8003812 <HAL_RCC_OscConfig+0xf6>
 800375e:	4bad      	ldr	r3, [pc, #692]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376a:	d152      	bne.n	8003812 <HAL_RCC_OscConfig+0xf6>
 800376c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003770:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003780:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_RCC_OscConfig+0x82>
 8003798:	4b9e      	ldr	r3, [pc, #632]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	e015      	b.n	80037ca <HAL_RCC_OscConfig+0xae>
 800379e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80037c6:	4b93      	ldr	r3, [pc, #588]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80037d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80037d6:	fa92 f2a2 	rbit	r2, r2
 80037da:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80037de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80037e2:	fab2 f282 	clz	r2, r2
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f042 0220 	orr.w	r2, r2, #32
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	f002 021f 	and.w	r2, r2, #31
 80037f2:	2101      	movs	r1, #1
 80037f4:	fa01 f202 	lsl.w	r2, r1, r2
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 810c 	beq.w	8003a18 <HAL_RCC_OscConfig+0x2fc>
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 8106 	bne.w	8003a18 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f000 be86 	b.w	800451e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381c:	d106      	bne.n	800382c <HAL_RCC_OscConfig+0x110>
 800381e:	4b7d      	ldr	r3, [pc, #500]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7c      	ldr	r2, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e030      	b.n	800388e <HAL_RCC_OscConfig+0x172>
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x134>
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a76      	ldr	r2, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a73      	ldr	r2, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e01e      	b.n	800388e <HAL_RCC_OscConfig+0x172>
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_OscConfig+0x15a>
 800385c:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6c      	ldr	r2, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e00b      	b.n	800388e <HAL_RCC_OscConfig+0x172>
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a66      	ldr	r2, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 800387c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b64      	ldr	r3, [pc, #400]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a63      	ldr	r2, [pc, #396]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800388e:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	495d      	ldr	r1, [pc, #372]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d059      	beq.n	8003960 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd ff78 	bl	80017a0 <HAL_GetTick>
 80038b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b6:	f7fd ff73 	bl	80017a0 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d902      	bls.n	80038cc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	f000 be29 	b.w	800451e <HAL_RCC_OscConfig+0xe02>
 80038cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80038e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d102      	bne.n	80038fe <HAL_RCC_OscConfig+0x1e2>
 80038f8:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	e015      	b.n	800392a <HAL_RCC_OscConfig+0x20e>
 80038fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003902:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003916:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800391a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800392e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003932:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003936:	fa92 f2a2 	rbit	r2, r2
 800393a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800393e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003942:	fab2 f282 	clz	r2, r2
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f042 0220 	orr.w	r2, r2, #32
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	f002 021f 	and.w	r2, r2, #31
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f202 	lsl.w	r2, r1, r2
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ab      	beq.n	80038b6 <HAL_RCC_OscConfig+0x19a>
 800395e:	e05c      	b.n	8003a1a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fd ff1e 	bl	80017a0 <HAL_GetTick>
 8003964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396a:	f7fd ff19 	bl	80017a0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d902      	bls.n	8003980 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	f000 bdcf 	b.w	800451e <HAL_RCC_OscConfig+0xe02>
 8003980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003984:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003994:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d102      	bne.n	80039b2 <HAL_RCC_OscConfig+0x296>
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	e015      	b.n	80039de <HAL_RCC_OscConfig+0x2c2>
 80039b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <HAL_RCC_OscConfig+0x2f8>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80039e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80039ea:	fa92 f2a2 	rbit	r2, r2
 80039ee:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80039f2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80039f6:	fab2 f282 	clz	r2, r2
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f042 0220 	orr.w	r2, r2, #32
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	f002 021f 	and.w	r2, r2, #31
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ab      	bne.n	800396a <HAL_RCC_OscConfig+0x24e>
 8003a12:	e002      	b.n	8003a1a <HAL_RCC_OscConfig+0x2fe>
 8003a14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 816f 	beq.w	8003d08 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a2a:	4bd0      	ldr	r3, [pc, #832]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a36:	4bcd      	ldr	r3, [pc, #820]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d16c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x400>
 8003a42:	4bca      	ldr	r3, [pc, #808]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d166      	bne.n	8003b1c <HAL_RCC_OscConfig+0x400>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003a60:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d102      	bne.n	8003a7e <HAL_RCC_OscConfig+0x362>
 8003a78:	4bbc      	ldr	r3, [pc, #752]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	e013      	b.n	8003aa6 <HAL_RCC_OscConfig+0x38a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003a90:	2302      	movs	r3, #2
 8003a92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003aa2:	4bb2      	ldr	r3, [pc, #712]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003aac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003ab8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003abc:	fab2 f282 	clz	r2, r2
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	f002 021f 	and.w	r2, r2, #31
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x3cc>
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f000 bd1b 	b.w	800451e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4ba0      	ldr	r3, [pc, #640]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	21f8      	movs	r1, #248	; 0xf8
 8003af8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b00:	fa91 f1a1 	rbit	r1, r1
 8003b04:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b08:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b0c:	fab1 f181 	clz	r1, r1
 8003b10:	b2c9      	uxtb	r1, r1
 8003b12:	408b      	lsls	r3, r1
 8003b14:	4995      	ldr	r1, [pc, #596]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e0f5      	b.n	8003d08 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8085 	beq.w	8003c32 <HAL_RCC_OscConfig+0x516>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003b3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2301      	movs	r3, #1
 8003b52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd fe24 	bl	80017a0 <HAL_GetTick>
 8003b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fd fe1f 	bl	80017a0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d902      	bls.n	8003b74 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	f000 bcd5 	b.w	800451e <HAL_RCC_OscConfig+0xe02>
 8003b74:	2302      	movs	r3, #2
 8003b76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003b86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d102      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x488>
 8003b9e:	4b73      	ldr	r3, [pc, #460]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	e013      	b.n	8003bcc <HAL_RCC_OscConfig+0x4b0>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bbc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003bd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003bd6:	fa92 f2a2 	rbit	r2, r2
 8003bda:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003bde:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003be2:	fab2 f282 	clz	r2, r2
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f042 0220 	orr.w	r2, r2, #32
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f002 021f 	and.w	r2, r2, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0af      	beq.n	8003b5e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	21f8      	movs	r1, #248	; 0xf8
 8003c0e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c16:	fa91 f1a1 	rbit	r1, r1
 8003c1a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003c1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003c22:	fab1 f181 	clz	r1, r1
 8003c26:	b2c9      	uxtb	r1, r1
 8003c28:	408b      	lsls	r3, r1
 8003c2a:	4950      	ldr	r1, [pc, #320]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	e06a      	b.n	8003d08 <HAL_RCC_OscConfig+0x5ec>
 8003c32:	2301      	movs	r3, #1
 8003c34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003c44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fd9f 	bl	80017a0 <HAL_GetTick>
 8003c62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c68:	f7fd fd9a 	bl	80017a0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d902      	bls.n	8003c7e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	f000 bc50 	b.w	800451e <HAL_RCC_OscConfig+0xe02>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d102      	bne.n	8003cae <HAL_RCC_OscConfig+0x592>
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	e013      	b.n	8003cd6 <HAL_RCC_OscConfig+0x5ba>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cb8:	fa93 f3a3 	rbit	r3, r3
 8003cbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_RCC_OscConfig+0x650>)
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003cdc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ce0:	fa92 f2a2 	rbit	r2, r2
 8003ce4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ce8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003cec:	fab2 f282 	clz	r2, r2
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	f042 0220 	orr.w	r2, r2, #32
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	f002 021f 	and.w	r2, r2, #31
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1af      	bne.n	8003c68 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d08:	1d3b      	adds	r3, r7, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80da 	beq.w	8003ecc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d069      	beq.n	8003df6 <HAL_RCC_OscConfig+0x6da>
 8003d22:	2301      	movs	r3, #1
 8003d24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_OscConfig+0x654>)
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	461a      	mov	r2, r3
 8003d48:	2301      	movs	r3, #1
 8003d4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4c:	f7fd fd28 	bl	80017a0 <HAL_GetTick>
 8003d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	e00e      	b.n	8003d74 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fd fd23 	bl	80017a0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d906      	bls.n	8003d74 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e3d9      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	10908120 	.word	0x10908120
 8003d74:	2302      	movs	r3, #2
 8003d76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003da2:	2202      	movs	r2, #2
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003db4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	4ba5      	ldr	r3, [pc, #660]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	6019      	str	r1, [r3, #0]
 8003dc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f1a3 	rbit	r1, r3
 8003dcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003dd0:	6019      	str	r1, [r3, #0]
  return result;
 8003dd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2101      	movs	r1, #1
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0b0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x63a>
 8003df4:	e06a      	b.n	8003ecc <HAL_RCC_OscConfig+0x7b0>
 8003df6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	fa93 f2a3 	rbit	r2, r3
 8003e08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e0c:	601a      	str	r2, [r3, #0]
  return result;
 8003e0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b8c      	ldr	r3, [pc, #560]	; (8004050 <HAL_RCC_OscConfig+0x934>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	461a      	mov	r2, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e28:	f7fd fcba 	bl	80017a0 <HAL_GetTick>
 8003e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e30:	e009      	b.n	8003e46 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e32:	f7fd fcb5 	bl	80017a0 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e36b      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
 8003e46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e62:	2202      	movs	r2, #2
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	fa93 f2a3 	rbit	r2, r3
 8003e70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8e:	4b6f      	ldr	r3, [pc, #444]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e96:	2102      	movs	r1, #2
 8003e98:	6019      	str	r1, [r3, #0]
 8003e9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	fa93 f1a3 	rbit	r1, r3
 8003ea4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ea8:	6019      	str	r1, [r3, #0]
  return result;
 8003eaa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1b2      	bne.n	8003e32 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8158 	beq.w	800418c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d112      	bne.n	8003f14 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b57      	ldr	r3, [pc, #348]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	61d3      	str	r3, [r2, #28]
 8003efa:	4b54      	ldr	r3, [pc, #336]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f107 0308 	add.w	r3, r7, #8
 8003f0c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCC_OscConfig+0x938>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11a      	bne.n	8003f56 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_RCC_OscConfig+0x938>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_RCC_OscConfig+0x938>)
 8003f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fc38 	bl	80017a0 <HAL_GetTick>
 8003f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	e009      	b.n	8003f4a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fd fc33 	bl	80017a0 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e2e9      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b42      	ldr	r3, [pc, #264]	; (8004054 <HAL_RCC_OscConfig+0x938>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ef      	beq.n	8003f36 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x852>
 8003f60:	4b3a      	ldr	r3, [pc, #232]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4a39      	ldr	r2, [pc, #228]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6213      	str	r3, [r2, #32]
 8003f6c:	e02f      	b.n	8003fce <HAL_RCC_OscConfig+0x8b2>
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x876>
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a33      	ldr	r2, [pc, #204]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	4b31      	ldr	r3, [pc, #196]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	4a30      	ldr	r2, [pc, #192]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003f8a:	f023 0304 	bic.w	r3, r3, #4
 8003f8e:	6213      	str	r3, [r2, #32]
 8003f90:	e01d      	b.n	8003fce <HAL_RCC_OscConfig+0x8b2>
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x89a>
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	4a2a      	ldr	r2, [pc, #168]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6213      	str	r3, [r2, #32]
 8003fa8:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4a27      	ldr	r2, [pc, #156]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6213      	str	r3, [r2, #32]
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0x8b2>
 8003fb6:	4b25      	ldr	r3, [pc, #148]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4a24      	ldr	r2, [pc, #144]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6213      	str	r3, [r2, #32]
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4a21      	ldr	r2, [pc, #132]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d06b      	beq.n	80040b0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7fd fbe2 	bl	80017a0 <HAL_GetTick>
 8003fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd fbdd 	bl	80017a0 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e291      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
 8003ffa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ffe:	2202      	movs	r2, #2
 8004000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fa93 f2a3 	rbit	r2, r3
 800400c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004016:	2202      	movs	r2, #2
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	fa93 f2a3 	rbit	r2, r3
 8004024:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004028:	601a      	str	r2, [r3, #0]
  return result;
 800402a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800402e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d109      	bne.n	8004058 <HAL_RCC_OscConfig+0x93c>
 8004044:	4b01      	ldr	r3, [pc, #4]	; (800404c <HAL_RCC_OscConfig+0x930>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	e014      	b.n	8004074 <HAL_RCC_OscConfig+0x958>
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
 8004050:	10908120 	.word	0x10908120
 8004054:	40007000 	.word	0x40007000
 8004058:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800405c:	2202      	movs	r2, #2
 800405e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	fa93 f2a3 	rbit	r2, r3
 800406a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	4bbb      	ldr	r3, [pc, #748]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004078:	2102      	movs	r1, #2
 800407a:	6011      	str	r1, [r2, #0]
 800407c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	fa92 f1a2 	rbit	r1, r2
 8004086:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800408a:	6011      	str	r1, [r2, #0]
  return result;
 800408c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	fab2 f282 	clz	r2, r2
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	f002 021f 	and.w	r2, r2, #31
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f202 	lsl.w	r2, r1, r2
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d099      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x8c6>
 80040ae:	e063      	b.n	8004178 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b0:	f7fd fb76 	bl	80017a0 <HAL_GetTick>
 80040b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b8:	e00b      	b.n	80040d2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fd fb71 	bl	80017a0 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e225      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
 80040d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80040d6:	2202      	movs	r2, #2
 80040d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	fa93 f2a3 	rbit	r2, r3
 80040e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040ee:	2202      	movs	r2, #2
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fa93 f2a3 	rbit	r2, r3
 80040fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004100:	601a      	str	r2, [r3, #0]
  return result;
 8004102:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004106:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0302 	orr.w	r3, r3, #2
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d102      	bne.n	8004122 <HAL_RCC_OscConfig+0xa06>
 800411c:	4b90      	ldr	r3, [pc, #576]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	e00d      	b.n	800413e <HAL_RCC_OscConfig+0xa22>
 8004122:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004126:	2202      	movs	r2, #2
 8004128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f2a3 	rbit	r2, r3
 8004134:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	4b89      	ldr	r3, [pc, #548]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004142:	2102      	movs	r1, #2
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	fa92 f1a2 	rbit	r1, r2
 8004150:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004154:	6011      	str	r1, [r2, #0]
  return result;
 8004156:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f002 021f 	and.w	r2, r2, #31
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1a0      	bne.n	80040ba <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004178:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800417c:	2b01      	cmp	r3, #1
 800417e:	d105      	bne.n	800418c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004180:	4b77      	ldr	r3, [pc, #476]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4a76      	ldr	r2, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 8004186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 81c2 	beq.w	800451c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004198:	4b71      	ldr	r3, [pc, #452]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	f000 819c 	beq.w	80044de <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	f040 8114 	bne.w	80043da <HAL_RCC_OscConfig+0xcbe>
 80041b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	fa93 f2a3 	rbit	r2, r3
 80041c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80041ca:	601a      	str	r2, [r3, #0]
  return result;
 80041cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80041d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	461a      	mov	r2, r3
 80041e4:	2300      	movs	r3, #0
 80041e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fd fada 	bl	80017a0 <HAL_GetTick>
 80041ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f0:	e009      	b.n	8004206 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fd fad5 	bl	80017a0 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e18b      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
 8004206:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800420a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800420e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	fa93 f2a3 	rbit	r2, r3
 800421a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800421e:	601a      	str	r2, [r3, #0]
  return result;
 8004220:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004224:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d102      	bne.n	8004240 <HAL_RCC_OscConfig+0xb24>
 800423a:	4b49      	ldr	r3, [pc, #292]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	e01b      	b.n	8004278 <HAL_RCC_OscConfig+0xb5c>
 8004240:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	fa93 f2a3 	rbit	r2, r3
 8004254:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800425e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	fa93 f2a3 	rbit	r2, r3
 800426e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	4b3a      	ldr	r3, [pc, #232]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800427c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	fa92 f1a2 	rbit	r1, r2
 800428c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004290:	6011      	str	r1, [r2, #0]
  return result;
 8004292:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	fab2 f282 	clz	r2, r2
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	f002 021f 	and.w	r2, r2, #31
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f202 	lsl.w	r2, r1, r2
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d19e      	bne.n	80041f2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b4:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	4925      	ldr	r1, [pc, #148]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	604b      	str	r3, [r1, #4]
 80042d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80042d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	fa93 f2a3 	rbit	r2, r3
 80042e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042e8:	601a      	str	r2, [r3, #0]
  return result;
 80042ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	461a      	mov	r2, r3
 8004302:	2301      	movs	r3, #1
 8004304:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004306:	f7fd fa4b 	bl	80017a0 <HAL_GetTick>
 800430a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800430e:	e009      	b.n	8004324 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004310:	f7fd fa46 	bl	80017a0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0fc      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
 8004324:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800432c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	fa93 f2a3 	rbit	r2, r3
 8004338:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800433c:	601a      	str	r2, [r3, #0]
  return result;
 800433e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004342:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_RCC_OscConfig+0xc48>
 8004358:	4b01      	ldr	r3, [pc, #4]	; (8004360 <HAL_RCC_OscConfig+0xc44>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	e01e      	b.n	800439c <HAL_RCC_OscConfig+0xc80>
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800436c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	fa93 f2a3 	rbit	r2, r3
 8004378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	fa93 f2a3 	rbit	r2, r3
 8004392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	4b63      	ldr	r3, [pc, #396]	; (8004528 <HAL_RCC_OscConfig+0xe0c>)
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043a4:	6011      	str	r1, [r2, #0]
 80043a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	fa92 f1a2 	rbit	r1, r2
 80043b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80043b4:	6011      	str	r1, [r2, #0]
  return result;
 80043b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	fab2 f282 	clz	r2, r2
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	f042 0220 	orr.w	r2, r2, #32
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	f002 021f 	and.w	r2, r2, #31
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d09b      	beq.n	8004310 <HAL_RCC_OscConfig+0xbf4>
 80043d8:	e0a0      	b.n	800451c <HAL_RCC_OscConfig+0xe00>
 80043da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fa93 f2a3 	rbit	r2, r3
 80043ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043f2:	601a      	str	r2, [r3, #0]
  return result;
 80043f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	461a      	mov	r2, r3
 800440c:	2300      	movs	r3, #0
 800440e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fd f9c6 	bl	80017a0 <HAL_GetTick>
 8004414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004418:	e009      	b.n	800442e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441a:	f7fd f9c1 	bl	80017a0 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e077      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
 800442e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	fa93 f2a3 	rbit	r2, r3
 8004442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004446:	601a      	str	r2, [r3, #0]
  return result;
 8004448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444e:	fab3 f383 	clz	r3, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_RCC_OscConfig+0xd4c>
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_RCC_OscConfig+0xe0c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	e01b      	b.n	80044a0 <HAL_RCC_OscConfig+0xd84>
 8004468:	f107 0320 	add.w	r3, r7, #32
 800446c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f107 0320 	add.w	r3, r7, #32
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	fa93 f2a3 	rbit	r2, r3
 800447c:	f107 031c 	add.w	r3, r7, #28
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f107 0318 	add.w	r3, r7, #24
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	fa93 f2a3 	rbit	r2, r3
 8004496:	f107 0314 	add.w	r3, r7, #20
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <HAL_RCC_OscConfig+0xe0c>)
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f107 0210 	add.w	r2, r7, #16
 80044a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044a8:	6011      	str	r1, [r2, #0]
 80044aa:	f107 0210 	add.w	r2, r7, #16
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	fa92 f1a2 	rbit	r1, r2
 80044b4:	f107 020c 	add.w	r2, r7, #12
 80044b8:	6011      	str	r1, [r2, #0]
  return result;
 80044ba:	f107 020c 	add.w	r2, r7, #12
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	fab2 f282 	clz	r2, r2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	f042 0220 	orr.w	r2, r2, #32
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	f002 021f 	and.w	r2, r2, #31
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f202 	lsl.w	r2, r1, r2
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d19e      	bne.n	800441a <HAL_RCC_OscConfig+0xcfe>
 80044dc:	e01e      	b.n	800451c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e018      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044ec:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <HAL_RCC_OscConfig+0xe0c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	429a      	cmp	r2, r3
 8004504:	d108      	bne.n	8004518 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004506:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800450a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000

0800452c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b09e      	sub	sp, #120	; 0x78
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e162      	b.n	800480a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b90      	ldr	r3, [pc, #576]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d910      	bls.n	8004574 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b8d      	ldr	r3, [pc, #564]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 0207 	bic.w	r2, r3, #7
 800455a:	498b      	ldr	r1, [pc, #556]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b89      	ldr	r3, [pc, #548]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e14a      	b.n	800480a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b82      	ldr	r3, [pc, #520]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	497f      	ldr	r1, [pc, #508]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80dc 	beq.w	8004758 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d13c      	bne.n	8004622 <HAL_RCC_ClockConfig+0xf6>
 80045a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d102      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xa6>
 80045cc:	4b6f      	ldr	r3, [pc, #444]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	e00f      	b.n	80045f2 <HAL_RCC_ClockConfig+0xc6>
 80045d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045da:	fa93 f3a3 	rbit	r3, r3
 80045de:	667b      	str	r3, [r7, #100]	; 0x64
 80045e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e4:	663b      	str	r3, [r7, #96]	; 0x60
 80045e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ee:	4b67      	ldr	r3, [pc, #412]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80045f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045fa:	fa92 f2a2 	rbit	r2, r2
 80045fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004602:	fab2 f282 	clz	r2, r2
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f042 0220 	orr.w	r2, r2, #32
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f002 021f 	and.w	r2, r2, #31
 8004612:	2101      	movs	r1, #1
 8004614:	fa01 f202 	lsl.w	r2, r1, r2
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d17b      	bne.n	8004716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0f3      	b.n	800480a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d13c      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x178>
 800462a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800462e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d102      	bne.n	8004654 <HAL_RCC_ClockConfig+0x128>
 800464e:	4b4f      	ldr	r3, [pc, #316]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	e00f      	b.n	8004674 <HAL_RCC_ClockConfig+0x148>
 8004654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465c:	fa93 f3a3 	rbit	r3, r3
 8004660:	647b      	str	r3, [r7, #68]	; 0x44
 8004662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004666:	643b      	str	r3, [r7, #64]	; 0x40
 8004668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004670:	4b46      	ldr	r3, [pc, #280]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004678:	63ba      	str	r2, [r7, #56]	; 0x38
 800467a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800467c:	fa92 f2a2 	rbit	r2, r2
 8004680:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004684:	fab2 f282 	clz	r2, r2
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	f042 0220 	orr.w	r2, r2, #32
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	f002 021f 	and.w	r2, r2, #31
 8004694:	2101      	movs	r1, #1
 8004696:	fa01 f202 	lsl.w	r2, r1, r2
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d13a      	bne.n	8004716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0b2      	b.n	800480a <HAL_RCC_ClockConfig+0x2de>
 80046a4:	2302      	movs	r3, #2
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_RCC_ClockConfig+0x1a0>
 80046c6:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	e00d      	b.n	80046e8 <HAL_RCC_ClockConfig+0x1bc>
 80046cc:	2302      	movs	r3, #2
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	2302      	movs	r3, #2
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2202      	movs	r2, #2
 80046ea:	61ba      	str	r2, [r7, #24]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	fa92 f2a2 	rbit	r2, r2
 80046f2:	617a      	str	r2, [r7, #20]
  return result;
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	fab2 f282 	clz	r2, r2
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	f042 0220 	orr.w	r2, r2, #32
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	f002 021f 	and.w	r2, r2, #31
 8004706:	2101      	movs	r1, #1
 8004708:	fa01 f202 	lsl.w	r2, r1, r2
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e079      	b.n	800480a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	491a      	ldr	r1, [pc, #104]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004728:	f7fd f83a 	bl	80017a0 <HAL_GetTick>
 800472c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	e00a      	b.n	8004746 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004730:	f7fd f836 	bl	80017a0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	; 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e061      	b.n	800480a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_RCC_ClockConfig+0x260>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 020c 	and.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	429a      	cmp	r2, r3
 8004756:	d1eb      	bne.n	8004730 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d214      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 0207 	bic.w	r2, r3, #7
 800476e:	4906      	ldr	r1, [pc, #24]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <HAL_RCC_ClockConfig+0x25c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e040      	b.n	800480a <HAL_RCC_ClockConfig+0x2de>
 8004788:	40022000 	.word	0x40022000
 800478c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCC_ClockConfig+0x2e8>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	491a      	ldr	r1, [pc, #104]	; (8004814 <HAL_RCC_ClockConfig+0x2e8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b16      	ldr	r3, [pc, #88]	; (8004814 <HAL_RCC_ClockConfig+0x2e8>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4912      	ldr	r1, [pc, #72]	; (8004814 <HAL_RCC_ClockConfig+0x2e8>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047ce:	f000 f829 	bl	8004824 <HAL_RCC_GetSysClockFreq>
 80047d2:	4601      	mov	r1, r0
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <HAL_RCC_ClockConfig+0x2e8>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047dc:	22f0      	movs	r2, #240	; 0xf0
 80047de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	fa92 f2a2 	rbit	r2, r2
 80047e6:	60fa      	str	r2, [r7, #12]
  return result;
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	fab2 f282 	clz	r2, r2
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	40d3      	lsrs	r3, r2
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <HAL_RCC_ClockConfig+0x2ec>)
 80047f4:	5cd3      	ldrb	r3, [r2, r3]
 80047f6:	fa21 f303 	lsr.w	r3, r1, r3
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <HAL_RCC_ClockConfig+0x2f0>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80047fe:	4b08      	ldr	r3, [pc, #32]	; (8004820 <HAL_RCC_ClockConfig+0x2f4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fc ff88 	bl	8001718 <HAL_InitTick>
  
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3778      	adds	r7, #120	; 0x78
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	08006208 	.word	0x08006208
 800481c:	2000000c 	.word	0x2000000c
 8004820:	20000010 	.word	0x20000010

08004824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004824:	b480      	push	{r7}
 8004826:	b08b      	sub	sp, #44	; 0x2c
 8004828:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	2300      	movs	r3, #0
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800483e:	4b29      	ldr	r3, [pc, #164]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b04      	cmp	r3, #4
 800484c:	d002      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x30>
 800484e:	2b08      	cmp	r3, #8
 8004850:	d003      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x36>
 8004852:	e03c      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004856:	623b      	str	r3, [r7, #32]
      break;
 8004858:	e03c      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004860:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004864:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	fa92 f2a2 	rbit	r2, r2
 800486c:	607a      	str	r2, [r7, #4]
  return result;
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	fab2 f282 	clz	r2, r2
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	40d3      	lsrs	r3, r2
 8004878:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800487e:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	220f      	movs	r2, #15
 8004888:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	fa92 f2a2 	rbit	r2, r2
 8004890:	60fa      	str	r2, [r7, #12]
  return result;
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	fab2 f282 	clz	r2, r2
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	40d3      	lsrs	r3, r2
 800489c:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048ac:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	e004      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	623b      	str	r3, [r7, #32]
      break;
 80048cc:	e002      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048d0:	623b      	str	r3, [r7, #32]
      break;
 80048d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d4:	6a3b      	ldr	r3, [r7, #32]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	372c      	adds	r7, #44	; 0x2c
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	007a1200 	.word	0x007a1200
 80048ec:	08006218 	.word	0x08006218
 80048f0:	08006228 	.word	0x08006228
 80048f4:	003d0900 	.word	0x003d0900

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b092      	sub	sp, #72	; 0x48
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80d7 	beq.w	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004916:	2300      	movs	r3, #0
 8004918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491c:	4b4e      	ldr	r3, [pc, #312]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10e      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004928:	4b4b      	ldr	r3, [pc, #300]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	4a4a      	ldr	r2, [pc, #296]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004932:	61d3      	str	r3, [r2, #28]
 8004934:	4b48      	ldr	r3, [pc, #288]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	4b45      	ldr	r3, [pc, #276]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004952:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a41      	ldr	r2, [pc, #260]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fc ff1f 	bl	80017a0 <HAL_GetTick>
 8004962:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fc ff1b 	bl	80017a0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	; 0x64
 8004972:	d901      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e13c      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004984:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800498e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8084 	beq.w	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d07c      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a4:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	fa93 f3a3 	rbit	r3, r3
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049be:	fab3 f383 	clz	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	461a      	mov	r2, r3
 80049ce:	2301      	movs	r3, #1
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	461a      	mov	r2, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049f6:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04b      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fc fecb 	bl	80017a0 <HAL_GetTick>
 8004a0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fc fec7 	bl	80017a0 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0e6      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004a24:	2302      	movs	r3, #2
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a30:	2302      	movs	r3, #2
 8004a32:	623b      	str	r3, [r7, #32]
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	61fb      	str	r3, [r7, #28]
  return result;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d108      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a52:	4b01      	ldr	r3, [pc, #4]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	e00d      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40007000 	.word	0x40007000
 8004a60:	10908100 	.word	0x10908100
 8004a64:	2302      	movs	r3, #2
 8004a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2202      	movs	r2, #2
 8004a76:	613a      	str	r2, [r7, #16]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	fa92 f2a2 	rbit	r2, r2
 8004a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	fab2 f282 	clz	r2, r2
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	f002 021f 	and.w	r2, r2, #31
 8004a92:	2101      	movs	r1, #1
 8004a94:	fa01 f202 	lsl.w	r2, r1, r2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0b7      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a9e:	4b57      	ldr	r3, [pc, #348]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4954      	ldr	r1, [pc, #336]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab8:	4b50      	ldr	r3, [pc, #320]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4a4f      	ldr	r2, [pc, #316]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ad0:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f023 0203 	bic.w	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4947      	ldr	r1, [pc, #284]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aee:	4b43      	ldr	r3, [pc, #268]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f023 0210 	bic.w	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4940      	ldr	r1, [pc, #256]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b0c:	4b3b      	ldr	r3, [pc, #236]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	f023 0220 	bic.w	r2, r3, #32
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	4938      	ldr	r1, [pc, #224]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b2a:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4931      	ldr	r1, [pc, #196]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b48:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4929      	ldr	r1, [pc, #164]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	4922      	ldr	r1, [pc, #136]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	491a      	ldr	r1, [pc, #104]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	4913      	ldr	r1, [pc, #76]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004bc0:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	490b      	ldr	r1, [pc, #44]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004bde:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	4904      	ldr	r1, [pc, #16]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3748      	adds	r7, #72	; 0x48
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4e0d      	ldr	r6, [pc, #52]	; (8004c38 <__libc_init_array+0x38>)
 8004c04:	4c0d      	ldr	r4, [pc, #52]	; (8004c3c <__libc_init_array+0x3c>)
 8004c06:	1ba4      	subs	r4, r4, r6
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	2500      	movs	r5, #0
 8004c0c:	42a5      	cmp	r5, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	4e0b      	ldr	r6, [pc, #44]	; (8004c40 <__libc_init_array+0x40>)
 8004c12:	4c0c      	ldr	r4, [pc, #48]	; (8004c44 <__libc_init_array+0x44>)
 8004c14:	f001 faea 	bl	80061ec <_init>
 8004c18:	1ba4      	subs	r4, r4, r6
 8004c1a:	10a4      	asrs	r4, r4, #2
 8004c1c:	2500      	movs	r5, #0
 8004c1e:	42a5      	cmp	r5, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c28:	4798      	blx	r3
 8004c2a:	3501      	adds	r5, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c32:	4798      	blx	r3
 8004c34:	3501      	adds	r5, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08006410 	.word	0x08006410
 8004c3c:	08006410 	.word	0x08006410
 8004c40:	08006410 	.word	0x08006410
 8004c44:	08006414 	.word	0x08006414

08004c48 <memset>:
 8004c48:	4402      	add	r2, r0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	f803 1b01 	strb.w	r1, [r3], #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <sin>:
 8004c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c5a:	ec51 0b10 	vmov	r0, r1, d0
 8004c5e:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <sin+0x88>)
 8004c60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c64:	4293      	cmp	r3, r2
 8004c66:	dc07      	bgt.n	8004c78 <sin+0x20>
 8004c68:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004cd8 <sin+0x80>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f000 febf 	bl	80059f0 <__kernel_sin>
 8004c72:	ec51 0b10 	vmov	r0, r1, d0
 8004c76:	e007      	b.n	8004c88 <sin+0x30>
 8004c78:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <sin+0x8c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	dd09      	ble.n	8004c92 <sin+0x3a>
 8004c7e:	ee10 2a10 	vmov	r2, s0
 8004c82:	460b      	mov	r3, r1
 8004c84:	f7fb faa4 	bl	80001d0 <__aeabi_dsub>
 8004c88:	ec41 0b10 	vmov	d0, r0, r1
 8004c8c:	b005      	add	sp, #20
 8004c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c92:	4668      	mov	r0, sp
 8004c94:	f000 f8b0 	bl	8004df8 <__ieee754_rem_pio2>
 8004c98:	f000 0003 	and.w	r0, r0, #3
 8004c9c:	2801      	cmp	r0, #1
 8004c9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ca2:	ed9d 0b00 	vldr	d0, [sp]
 8004ca6:	d004      	beq.n	8004cb2 <sin+0x5a>
 8004ca8:	2802      	cmp	r0, #2
 8004caa:	d005      	beq.n	8004cb8 <sin+0x60>
 8004cac:	b970      	cbnz	r0, 8004ccc <sin+0x74>
 8004cae:	2001      	movs	r0, #1
 8004cb0:	e7dd      	b.n	8004c6e <sin+0x16>
 8004cb2:	f000 fa95 	bl	80051e0 <__kernel_cos>
 8004cb6:	e7dc      	b.n	8004c72 <sin+0x1a>
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f000 fe99 	bl	80059f0 <__kernel_sin>
 8004cbe:	ec53 2b10 	vmov	r2, r3, d0
 8004cc2:	ee10 0a10 	vmov	r0, s0
 8004cc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004cca:	e7dd      	b.n	8004c88 <sin+0x30>
 8004ccc:	f000 fa88 	bl	80051e0 <__kernel_cos>
 8004cd0:	e7f5      	b.n	8004cbe <sin+0x66>
 8004cd2:	bf00      	nop
 8004cd4:	f3af 8000 	nop.w
	...
 8004ce0:	3fe921fb 	.word	0x3fe921fb
 8004ce4:	7fefffff 	.word	0x7fefffff

08004ce8 <tanh>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	ec55 4b10 	vmov	r4, r5, d0
 8004cee:	4a3d      	ldr	r2, [pc, #244]	; (8004de4 <tanh+0xfc>)
 8004cf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	462e      	mov	r6, r5
 8004cf8:	dd13      	ble.n	8004d22 <tanh+0x3a>
 8004cfa:	ee10 2a10 	vmov	r2, s0
 8004cfe:	462b      	mov	r3, r5
 8004d00:	2000      	movs	r0, #0
 8004d02:	4939      	ldr	r1, [pc, #228]	; (8004de8 <tanh+0x100>)
 8004d04:	f7fb fd46 	bl	8000794 <__aeabi_ddiv>
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <tanh+0x100>)
 8004d10:	db04      	blt.n	8004d1c <tanh+0x34>
 8004d12:	f7fb fa5f 	bl	80001d4 <__adddf3>
 8004d16:	ec41 0b10 	vmov	d0, r0, r1
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f7fb fa58 	bl	80001d0 <__aeabi_dsub>
 8004d20:	e7f9      	b.n	8004d16 <tanh+0x2e>
 8004d22:	4a32      	ldr	r2, [pc, #200]	; (8004dec <tanh+0x104>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	dc59      	bgt.n	8004ddc <tanh+0xf4>
 8004d28:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8004d2c:	da0b      	bge.n	8004d46 <tanh+0x5e>
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <tanh+0x100>)
 8004d32:	ee10 0a10 	vmov	r0, s0
 8004d36:	4629      	mov	r1, r5
 8004d38:	f7fb fa4c 	bl	80001d4 <__adddf3>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	f7fb fbfe 	bl	8000540 <__aeabi_dmul>
 8004d44:	e7e7      	b.n	8004d16 <tanh+0x2e>
 8004d46:	4a2a      	ldr	r2, [pc, #168]	; (8004df0 <tanh+0x108>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	dd28      	ble.n	8004d9e <tanh+0xb6>
 8004d4c:	f001 f93a 	bl	8005fc4 <fabs>
 8004d50:	ec53 2b10 	vmov	r2, r3, d0
 8004d54:	ee10 0a10 	vmov	r0, s0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f7fb fa3b 	bl	80001d4 <__adddf3>
 8004d5e:	ec41 0b10 	vmov	d0, r0, r1
 8004d62:	f000 ff01 	bl	8005b68 <expm1>
 8004d66:	2200      	movs	r2, #0
 8004d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d6c:	ec51 0b10 	vmov	r0, r1, d0
 8004d70:	f7fb fa30 	bl	80001d4 <__adddf3>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d7e:	f7fb fd09 	bl	8000794 <__aeabi_ddiv>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	2000      	movs	r0, #0
 8004d88:	4917      	ldr	r1, [pc, #92]	; (8004de8 <tanh+0x100>)
 8004d8a:	f7fb fa21 	bl	80001d0 <__aeabi_dsub>
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	bfbf      	itttt	lt
 8004d92:	4602      	movlt	r2, r0
 8004d94:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
 8004d98:	4610      	movlt	r0, r2
 8004d9a:	4619      	movlt	r1, r3
 8004d9c:	e7bb      	b.n	8004d16 <tanh+0x2e>
 8004d9e:	f001 f911 	bl	8005fc4 <fabs>
 8004da2:	2200      	movs	r2, #0
 8004da4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004da8:	ec51 0b10 	vmov	r0, r1, d0
 8004dac:	f7fb fbc8 	bl	8000540 <__aeabi_dmul>
 8004db0:	ec41 0b10 	vmov	d0, r0, r1
 8004db4:	f000 fed8 	bl	8005b68 <expm1>
 8004db8:	ec51 0b10 	vmov	r0, r1, d0
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dc2:	ee10 4a10 	vmov	r4, s0
 8004dc6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004dca:	f7fb fa03 	bl	80001d4 <__adddf3>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7fb fcdd 	bl	8000794 <__aeabi_ddiv>
 8004dda:	e7d8      	b.n	8004d8e <tanh+0xa6>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	4902      	ldr	r1, [pc, #8]	; (8004de8 <tanh+0x100>)
 8004de0:	e7d5      	b.n	8004d8e <tanh+0xa6>
 8004de2:	bf00      	nop
 8004de4:	7fefffff 	.word	0x7fefffff
 8004de8:	3ff00000 	.word	0x3ff00000
 8004dec:	4035ffff 	.word	0x4035ffff
 8004df0:	3fefffff 	.word	0x3fefffff
 8004df4:	00000000 	.word	0x00000000

08004df8 <__ieee754_rem_pio2>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	ec57 6b10 	vmov	r6, r7, d0
 8004e00:	4bc3      	ldr	r3, [pc, #780]	; (8005110 <__ieee754_rem_pio2+0x318>)
 8004e02:	b08d      	sub	sp, #52	; 0x34
 8004e04:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004e08:	4598      	cmp	r8, r3
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	9704      	str	r7, [sp, #16]
 8004e0e:	dc07      	bgt.n	8004e20 <__ieee754_rem_pio2+0x28>
 8004e10:	2200      	movs	r2, #0
 8004e12:	2300      	movs	r3, #0
 8004e14:	ed84 0b00 	vstr	d0, [r4]
 8004e18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004e1c:	2500      	movs	r5, #0
 8004e1e:	e027      	b.n	8004e70 <__ieee754_rem_pio2+0x78>
 8004e20:	4bbc      	ldr	r3, [pc, #752]	; (8005114 <__ieee754_rem_pio2+0x31c>)
 8004e22:	4598      	cmp	r8, r3
 8004e24:	dc75      	bgt.n	8004f12 <__ieee754_rem_pio2+0x11a>
 8004e26:	9b04      	ldr	r3, [sp, #16]
 8004e28:	4dbb      	ldr	r5, [pc, #748]	; (8005118 <__ieee754_rem_pio2+0x320>)
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	ee10 0a10 	vmov	r0, s0
 8004e30:	a3a9      	add	r3, pc, #676	; (adr r3, 80050d8 <__ieee754_rem_pio2+0x2e0>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	4639      	mov	r1, r7
 8004e38:	dd36      	ble.n	8004ea8 <__ieee754_rem_pio2+0xb0>
 8004e3a:	f7fb f9c9 	bl	80001d0 <__aeabi_dsub>
 8004e3e:	45a8      	cmp	r8, r5
 8004e40:	4606      	mov	r6, r0
 8004e42:	460f      	mov	r7, r1
 8004e44:	d018      	beq.n	8004e78 <__ieee754_rem_pio2+0x80>
 8004e46:	a3a6      	add	r3, pc, #664	; (adr r3, 80050e0 <__ieee754_rem_pio2+0x2e8>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb f9c0 	bl	80001d0 <__aeabi_dsub>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	e9c4 2300 	strd	r2, r3, [r4]
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	f7fb f9b8 	bl	80001d0 <__aeabi_dsub>
 8004e60:	a39f      	add	r3, pc, #636	; (adr r3, 80050e0 <__ieee754_rem_pio2+0x2e8>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb f9b3 	bl	80001d0 <__aeabi_dsub>
 8004e6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e6e:	2501      	movs	r5, #1
 8004e70:	4628      	mov	r0, r5
 8004e72:	b00d      	add	sp, #52	; 0x34
 8004e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e78:	a39b      	add	r3, pc, #620	; (adr r3, 80050e8 <__ieee754_rem_pio2+0x2f0>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f7fb f9a7 	bl	80001d0 <__aeabi_dsub>
 8004e82:	a39b      	add	r3, pc, #620	; (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f8>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	4606      	mov	r6, r0
 8004e8a:	460f      	mov	r7, r1
 8004e8c:	f7fb f9a0 	bl	80001d0 <__aeabi_dsub>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	e9c4 2300 	strd	r2, r3, [r4]
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	f7fb f998 	bl	80001d0 <__aeabi_dsub>
 8004ea0:	a393      	add	r3, pc, #588	; (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f8>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	e7de      	b.n	8004e66 <__ieee754_rem_pio2+0x6e>
 8004ea8:	f7fb f994 	bl	80001d4 <__adddf3>
 8004eac:	45a8      	cmp	r8, r5
 8004eae:	4606      	mov	r6, r0
 8004eb0:	460f      	mov	r7, r1
 8004eb2:	d016      	beq.n	8004ee2 <__ieee754_rem_pio2+0xea>
 8004eb4:	a38a      	add	r3, pc, #552	; (adr r3, 80050e0 <__ieee754_rem_pio2+0x2e8>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f7fb f98b 	bl	80001d4 <__adddf3>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	e9c4 2300 	strd	r2, r3, [r4]
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	4639      	mov	r1, r7
 8004eca:	f7fb f981 	bl	80001d0 <__aeabi_dsub>
 8004ece:	a384      	add	r3, pc, #528	; (adr r3, 80050e0 <__ieee754_rem_pio2+0x2e8>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f7fb f97e 	bl	80001d4 <__adddf3>
 8004ed8:	f04f 35ff 	mov.w	r5, #4294967295
 8004edc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ee0:	e7c6      	b.n	8004e70 <__ieee754_rem_pio2+0x78>
 8004ee2:	a381      	add	r3, pc, #516	; (adr r3, 80050e8 <__ieee754_rem_pio2+0x2f0>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f7fb f974 	bl	80001d4 <__adddf3>
 8004eec:	a380      	add	r3, pc, #512	; (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f8>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	f7fb f96d 	bl	80001d4 <__adddf3>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	e9c4 2300 	strd	r2, r3, [r4]
 8004f02:	4630      	mov	r0, r6
 8004f04:	4639      	mov	r1, r7
 8004f06:	f7fb f963 	bl	80001d0 <__aeabi_dsub>
 8004f0a:	a379      	add	r3, pc, #484	; (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f8>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	e7e0      	b.n	8004ed4 <__ieee754_rem_pio2+0xdc>
 8004f12:	4b82      	ldr	r3, [pc, #520]	; (800511c <__ieee754_rem_pio2+0x324>)
 8004f14:	4598      	cmp	r8, r3
 8004f16:	f300 80d0 	bgt.w	80050ba <__ieee754_rem_pio2+0x2c2>
 8004f1a:	f001 f853 	bl	8005fc4 <fabs>
 8004f1e:	ec57 6b10 	vmov	r6, r7, d0
 8004f22:	ee10 0a10 	vmov	r0, s0
 8004f26:	a374      	add	r3, pc, #464	; (adr r3, 80050f8 <__ieee754_rem_pio2+0x300>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	f7fb fb07 	bl	8000540 <__aeabi_dmul>
 8004f32:	2200      	movs	r2, #0
 8004f34:	4b7a      	ldr	r3, [pc, #488]	; (8005120 <__ieee754_rem_pio2+0x328>)
 8004f36:	f7fb f94d 	bl	80001d4 <__adddf3>
 8004f3a:	f7fb fd9b 	bl	8000a74 <__aeabi_d2iz>
 8004f3e:	4605      	mov	r5, r0
 8004f40:	f7fb fa94 	bl	800046c <__aeabi_i2d>
 8004f44:	a364      	add	r3, pc, #400	; (adr r3, 80050d8 <__ieee754_rem_pio2+0x2e0>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f4e:	f7fb faf7 	bl	8000540 <__aeabi_dmul>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4630      	mov	r0, r6
 8004f58:	4639      	mov	r1, r7
 8004f5a:	f7fb f939 	bl	80001d0 <__aeabi_dsub>
 8004f5e:	a360      	add	r3, pc, #384	; (adr r3, 80050e0 <__ieee754_rem_pio2+0x2e8>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	4682      	mov	sl, r0
 8004f66:	468b      	mov	fp, r1
 8004f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f6c:	f7fb fae8 	bl	8000540 <__aeabi_dmul>
 8004f70:	2d1f      	cmp	r5, #31
 8004f72:	4606      	mov	r6, r0
 8004f74:	460f      	mov	r7, r1
 8004f76:	dc0c      	bgt.n	8004f92 <__ieee754_rem_pio2+0x19a>
 8004f78:	1e6a      	subs	r2, r5, #1
 8004f7a:	4b6a      	ldr	r3, [pc, #424]	; (8005124 <__ieee754_rem_pio2+0x32c>)
 8004f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f80:	4543      	cmp	r3, r8
 8004f82:	d006      	beq.n	8004f92 <__ieee754_rem_pio2+0x19a>
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	4650      	mov	r0, sl
 8004f8a:	4659      	mov	r1, fp
 8004f8c:	f7fb f920 	bl	80001d0 <__aeabi_dsub>
 8004f90:	e00e      	b.n	8004fb0 <__ieee754_rem_pio2+0x1b8>
 8004f92:	4632      	mov	r2, r6
 8004f94:	463b      	mov	r3, r7
 8004f96:	4650      	mov	r0, sl
 8004f98:	4659      	mov	r1, fp
 8004f9a:	f7fb f919 	bl	80001d0 <__aeabi_dsub>
 8004f9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004fa2:	9305      	str	r3, [sp, #20]
 8004fa4:	9a05      	ldr	r2, [sp, #20]
 8004fa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	dc02      	bgt.n	8004fb6 <__ieee754_rem_pio2+0x1be>
 8004fb0:	e9c4 0100 	strd	r0, r1, [r4]
 8004fb4:	e039      	b.n	800502a <__ieee754_rem_pio2+0x232>
 8004fb6:	a34c      	add	r3, pc, #304	; (adr r3, 80050e8 <__ieee754_rem_pio2+0x2f0>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fc0:	f7fb fabe 	bl	8000540 <__aeabi_dmul>
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	460f      	mov	r7, r1
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4650      	mov	r0, sl
 8004fce:	4659      	mov	r1, fp
 8004fd0:	f7fb f8fe 	bl	80001d0 <__aeabi_dsub>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4680      	mov	r8, r0
 8004fda:	4689      	mov	r9, r1
 8004fdc:	4650      	mov	r0, sl
 8004fde:	4659      	mov	r1, fp
 8004fe0:	f7fb f8f6 	bl	80001d0 <__aeabi_dsub>
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	f7fb f8f2 	bl	80001d0 <__aeabi_dsub>
 8004fec:	a340      	add	r3, pc, #256	; (adr r3, 80050f0 <__ieee754_rem_pio2+0x2f8>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ffa:	f7fb faa1 	bl	8000540 <__aeabi_dmul>
 8004ffe:	4632      	mov	r2, r6
 8005000:	463b      	mov	r3, r7
 8005002:	f7fb f8e5 	bl	80001d0 <__aeabi_dsub>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4606      	mov	r6, r0
 800500c:	460f      	mov	r7, r1
 800500e:	4640      	mov	r0, r8
 8005010:	4649      	mov	r1, r9
 8005012:	f7fb f8dd 	bl	80001d0 <__aeabi_dsub>
 8005016:	9a05      	ldr	r2, [sp, #20]
 8005018:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b31      	cmp	r3, #49	; 0x31
 8005020:	dc20      	bgt.n	8005064 <__ieee754_rem_pio2+0x26c>
 8005022:	e9c4 0100 	strd	r0, r1, [r4]
 8005026:	46c2      	mov	sl, r8
 8005028:	46cb      	mov	fp, r9
 800502a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800502e:	4650      	mov	r0, sl
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	4659      	mov	r1, fp
 8005036:	f7fb f8cb 	bl	80001d0 <__aeabi_dsub>
 800503a:	463b      	mov	r3, r7
 800503c:	4632      	mov	r2, r6
 800503e:	f7fb f8c7 	bl	80001d0 <__aeabi_dsub>
 8005042:	9b04      	ldr	r3, [sp, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800504a:	f6bf af11 	bge.w	8004e70 <__ieee754_rem_pio2+0x78>
 800504e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	f8c4 8000 	str.w	r8, [r4]
 8005058:	60a0      	str	r0, [r4, #8]
 800505a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800505e:	60e3      	str	r3, [r4, #12]
 8005060:	426d      	negs	r5, r5
 8005062:	e705      	b.n	8004e70 <__ieee754_rem_pio2+0x78>
 8005064:	a326      	add	r3, pc, #152	; (adr r3, 8005100 <__ieee754_rem_pio2+0x308>)
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800506e:	f7fb fa67 	bl	8000540 <__aeabi_dmul>
 8005072:	4606      	mov	r6, r0
 8005074:	460f      	mov	r7, r1
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4640      	mov	r0, r8
 800507c:	4649      	mov	r1, r9
 800507e:	f7fb f8a7 	bl	80001d0 <__aeabi_dsub>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4682      	mov	sl, r0
 8005088:	468b      	mov	fp, r1
 800508a:	4640      	mov	r0, r8
 800508c:	4649      	mov	r1, r9
 800508e:	f7fb f89f 	bl	80001d0 <__aeabi_dsub>
 8005092:	4632      	mov	r2, r6
 8005094:	463b      	mov	r3, r7
 8005096:	f7fb f89b 	bl	80001d0 <__aeabi_dsub>
 800509a:	a31b      	add	r3, pc, #108	; (adr r3, 8005108 <__ieee754_rem_pio2+0x310>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	4606      	mov	r6, r0
 80050a2:	460f      	mov	r7, r1
 80050a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a8:	f7fb fa4a 	bl	8000540 <__aeabi_dmul>
 80050ac:	4632      	mov	r2, r6
 80050ae:	463b      	mov	r3, r7
 80050b0:	f7fb f88e 	bl	80001d0 <__aeabi_dsub>
 80050b4:	4606      	mov	r6, r0
 80050b6:	460f      	mov	r7, r1
 80050b8:	e764      	b.n	8004f84 <__ieee754_rem_pio2+0x18c>
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <__ieee754_rem_pio2+0x330>)
 80050bc:	4598      	cmp	r8, r3
 80050be:	dd35      	ble.n	800512c <__ieee754_rem_pio2+0x334>
 80050c0:	ee10 2a10 	vmov	r2, s0
 80050c4:	463b      	mov	r3, r7
 80050c6:	4630      	mov	r0, r6
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb f881 	bl	80001d0 <__aeabi_dsub>
 80050ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050d2:	e9c4 0100 	strd	r0, r1, [r4]
 80050d6:	e6a1      	b.n	8004e1c <__ieee754_rem_pio2+0x24>
 80050d8:	54400000 	.word	0x54400000
 80050dc:	3ff921fb 	.word	0x3ff921fb
 80050e0:	1a626331 	.word	0x1a626331
 80050e4:	3dd0b461 	.word	0x3dd0b461
 80050e8:	1a600000 	.word	0x1a600000
 80050ec:	3dd0b461 	.word	0x3dd0b461
 80050f0:	2e037073 	.word	0x2e037073
 80050f4:	3ba3198a 	.word	0x3ba3198a
 80050f8:	6dc9c883 	.word	0x6dc9c883
 80050fc:	3fe45f30 	.word	0x3fe45f30
 8005100:	2e000000 	.word	0x2e000000
 8005104:	3ba3198a 	.word	0x3ba3198a
 8005108:	252049c1 	.word	0x252049c1
 800510c:	397b839a 	.word	0x397b839a
 8005110:	3fe921fb 	.word	0x3fe921fb
 8005114:	4002d97b 	.word	0x4002d97b
 8005118:	3ff921fb 	.word	0x3ff921fb
 800511c:	413921fb 	.word	0x413921fb
 8005120:	3fe00000 	.word	0x3fe00000
 8005124:	08006238 	.word	0x08006238
 8005128:	7fefffff 	.word	0x7fefffff
 800512c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005130:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005134:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005138:	4630      	mov	r0, r6
 800513a:	460f      	mov	r7, r1
 800513c:	f7fb fc9a 	bl	8000a74 <__aeabi_d2iz>
 8005140:	f7fb f994 	bl	800046c <__aeabi_i2d>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4630      	mov	r0, r6
 800514a:	4639      	mov	r1, r7
 800514c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005150:	f7fb f83e 	bl	80001d0 <__aeabi_dsub>
 8005154:	2200      	movs	r2, #0
 8005156:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <__ieee754_rem_pio2+0x3dc>)
 8005158:	f7fb f9f2 	bl	8000540 <__aeabi_dmul>
 800515c:	460f      	mov	r7, r1
 800515e:	4606      	mov	r6, r0
 8005160:	f7fb fc88 	bl	8000a74 <__aeabi_d2iz>
 8005164:	f7fb f982 	bl	800046c <__aeabi_i2d>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4630      	mov	r0, r6
 800516e:	4639      	mov	r1, r7
 8005170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005174:	f7fb f82c 	bl	80001d0 <__aeabi_dsub>
 8005178:	2200      	movs	r2, #0
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <__ieee754_rem_pio2+0x3dc>)
 800517c:	f7fb f9e0 	bl	8000540 <__aeabi_dmul>
 8005180:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005184:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005188:	f04f 0803 	mov.w	r8, #3
 800518c:	2600      	movs	r6, #0
 800518e:	2700      	movs	r7, #0
 8005190:	4632      	mov	r2, r6
 8005192:	463b      	mov	r3, r7
 8005194:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005198:	f108 3aff 	add.w	sl, r8, #4294967295
 800519c:	f7fb fc38 	bl	8000a10 <__aeabi_dcmpeq>
 80051a0:	b9b0      	cbnz	r0, 80051d0 <__ieee754_rem_pio2+0x3d8>
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <__ieee754_rem_pio2+0x3e0>)
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2302      	movs	r3, #2
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	462a      	mov	r2, r5
 80051ac:	4643      	mov	r3, r8
 80051ae:	4621      	mov	r1, r4
 80051b0:	a806      	add	r0, sp, #24
 80051b2:	f000 f8dd 	bl	8005370 <__kernel_rem_pio2>
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	4605      	mov	r5, r0
 80051bc:	f6bf ae58 	bge.w	8004e70 <__ieee754_rem_pio2+0x78>
 80051c0:	6863      	ldr	r3, [r4, #4]
 80051c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051c6:	6063      	str	r3, [r4, #4]
 80051c8:	68e3      	ldr	r3, [r4, #12]
 80051ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051ce:	e746      	b.n	800505e <__ieee754_rem_pio2+0x266>
 80051d0:	46d0      	mov	r8, sl
 80051d2:	e7dd      	b.n	8005190 <__ieee754_rem_pio2+0x398>
 80051d4:	41700000 	.word	0x41700000
 80051d8:	080062b8 	.word	0x080062b8
 80051dc:	00000000 	.word	0x00000000

080051e0 <__kernel_cos>:
 80051e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	ec59 8b10 	vmov	r8, r9, d0
 80051e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80051ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80051f0:	ed2d 8b02 	vpush	{d8}
 80051f4:	eeb0 8a41 	vmov.f32	s16, s2
 80051f8:	eef0 8a61 	vmov.f32	s17, s3
 80051fc:	da07      	bge.n	800520e <__kernel_cos+0x2e>
 80051fe:	ee10 0a10 	vmov	r0, s0
 8005202:	4649      	mov	r1, r9
 8005204:	f7fb fc36 	bl	8000a74 <__aeabi_d2iz>
 8005208:	2800      	cmp	r0, #0
 800520a:	f000 8089 	beq.w	8005320 <__kernel_cos+0x140>
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb f993 	bl	8000540 <__aeabi_dmul>
 800521a:	2200      	movs	r2, #0
 800521c:	4b4e      	ldr	r3, [pc, #312]	; (8005358 <__kernel_cos+0x178>)
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	f7fb f98d 	bl	8000540 <__aeabi_dmul>
 8005226:	a340      	add	r3, pc, #256	; (adr r3, 8005328 <__kernel_cos+0x148>)
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	4682      	mov	sl, r0
 800522e:	468b      	mov	fp, r1
 8005230:	4620      	mov	r0, r4
 8005232:	4629      	mov	r1, r5
 8005234:	f7fb f984 	bl	8000540 <__aeabi_dmul>
 8005238:	a33d      	add	r3, pc, #244	; (adr r3, 8005330 <__kernel_cos+0x150>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fa ffc9 	bl	80001d4 <__adddf3>
 8005242:	4622      	mov	r2, r4
 8005244:	462b      	mov	r3, r5
 8005246:	f7fb f97b 	bl	8000540 <__aeabi_dmul>
 800524a:	a33b      	add	r3, pc, #236	; (adr r3, 8005338 <__kernel_cos+0x158>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa ffbe 	bl	80001d0 <__aeabi_dsub>
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	f7fb f972 	bl	8000540 <__aeabi_dmul>
 800525c:	a338      	add	r3, pc, #224	; (adr r3, 8005340 <__kernel_cos+0x160>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fa ffb7 	bl	80001d4 <__adddf3>
 8005266:	4622      	mov	r2, r4
 8005268:	462b      	mov	r3, r5
 800526a:	f7fb f969 	bl	8000540 <__aeabi_dmul>
 800526e:	a336      	add	r3, pc, #216	; (adr r3, 8005348 <__kernel_cos+0x168>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fa ffac 	bl	80001d0 <__aeabi_dsub>
 8005278:	4622      	mov	r2, r4
 800527a:	462b      	mov	r3, r5
 800527c:	f7fb f960 	bl	8000540 <__aeabi_dmul>
 8005280:	a333      	add	r3, pc, #204	; (adr r3, 8005350 <__kernel_cos+0x170>)
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f7fa ffa5 	bl	80001d4 <__adddf3>
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	f7fb f957 	bl	8000540 <__aeabi_dmul>
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	f7fb f953 	bl	8000540 <__aeabi_dmul>
 800529a:	ec53 2b18 	vmov	r2, r3, d8
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fb f94b 	bl	8000540 <__aeabi_dmul>
 80052aa:	460b      	mov	r3, r1
 80052ac:	4602      	mov	r2, r0
 80052ae:	4629      	mov	r1, r5
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7fa ff8d 	bl	80001d0 <__aeabi_dsub>
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <__kernel_cos+0x17c>)
 80052b8:	429e      	cmp	r6, r3
 80052ba:	4680      	mov	r8, r0
 80052bc:	4689      	mov	r9, r1
 80052be:	dc11      	bgt.n	80052e4 <__kernel_cos+0x104>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4650      	mov	r0, sl
 80052c6:	4659      	mov	r1, fp
 80052c8:	f7fa ff82 	bl	80001d0 <__aeabi_dsub>
 80052cc:	460b      	mov	r3, r1
 80052ce:	4924      	ldr	r1, [pc, #144]	; (8005360 <__kernel_cos+0x180>)
 80052d0:	4602      	mov	r2, r0
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7fa ff7c 	bl	80001d0 <__aeabi_dsub>
 80052d8:	ecbd 8b02 	vpop	{d8}
 80052dc:	ec41 0b10 	vmov	d0, r0, r1
 80052e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e4:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <__kernel_cos+0x184>)
 80052e6:	491e      	ldr	r1, [pc, #120]	; (8005360 <__kernel_cos+0x180>)
 80052e8:	429e      	cmp	r6, r3
 80052ea:	bfcc      	ite	gt
 80052ec:	4d1e      	ldrgt	r5, [pc, #120]	; (8005368 <__kernel_cos+0x188>)
 80052ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80052f2:	2400      	movs	r4, #0
 80052f4:	4622      	mov	r2, r4
 80052f6:	462b      	mov	r3, r5
 80052f8:	2000      	movs	r0, #0
 80052fa:	f7fa ff69 	bl	80001d0 <__aeabi_dsub>
 80052fe:	4622      	mov	r2, r4
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	462b      	mov	r3, r5
 8005306:	4650      	mov	r0, sl
 8005308:	4659      	mov	r1, fp
 800530a:	f7fa ff61 	bl	80001d0 <__aeabi_dsub>
 800530e:	4642      	mov	r2, r8
 8005310:	464b      	mov	r3, r9
 8005312:	f7fa ff5d 	bl	80001d0 <__aeabi_dsub>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	e7d9      	b.n	80052d4 <__kernel_cos+0xf4>
 8005320:	2000      	movs	r0, #0
 8005322:	490f      	ldr	r1, [pc, #60]	; (8005360 <__kernel_cos+0x180>)
 8005324:	e7d8      	b.n	80052d8 <__kernel_cos+0xf8>
 8005326:	bf00      	nop
 8005328:	be8838d4 	.word	0xbe8838d4
 800532c:	bda8fae9 	.word	0xbda8fae9
 8005330:	bdb4b1c4 	.word	0xbdb4b1c4
 8005334:	3e21ee9e 	.word	0x3e21ee9e
 8005338:	809c52ad 	.word	0x809c52ad
 800533c:	3e927e4f 	.word	0x3e927e4f
 8005340:	19cb1590 	.word	0x19cb1590
 8005344:	3efa01a0 	.word	0x3efa01a0
 8005348:	16c15177 	.word	0x16c15177
 800534c:	3f56c16c 	.word	0x3f56c16c
 8005350:	5555554c 	.word	0x5555554c
 8005354:	3fa55555 	.word	0x3fa55555
 8005358:	3fe00000 	.word	0x3fe00000
 800535c:	3fd33332 	.word	0x3fd33332
 8005360:	3ff00000 	.word	0x3ff00000
 8005364:	3fe90000 	.word	0x3fe90000
 8005368:	3fd20000 	.word	0x3fd20000
 800536c:	00000000 	.word	0x00000000

08005370 <__kernel_rem_pio2>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	ed2d 8b02 	vpush	{d8}
 8005378:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800537c:	1ed4      	subs	r4, r2, #3
 800537e:	9308      	str	r3, [sp, #32]
 8005380:	9101      	str	r1, [sp, #4]
 8005382:	4bc5      	ldr	r3, [pc, #788]	; (8005698 <__kernel_rem_pio2+0x328>)
 8005384:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005386:	9009      	str	r0, [sp, #36]	; 0x24
 8005388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	9b08      	ldr	r3, [sp, #32]
 8005390:	3b01      	subs	r3, #1
 8005392:	9307      	str	r3, [sp, #28]
 8005394:	2318      	movs	r3, #24
 8005396:	fb94 f4f3 	sdiv	r4, r4, r3
 800539a:	f06f 0317 	mvn.w	r3, #23
 800539e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80053a2:	fb04 3303 	mla	r3, r4, r3, r3
 80053a6:	eb03 0a02 	add.w	sl, r3, r2
 80053aa:	9b04      	ldr	r3, [sp, #16]
 80053ac:	9a07      	ldr	r2, [sp, #28]
 80053ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005688 <__kernel_rem_pio2+0x318>
 80053b2:	eb03 0802 	add.w	r8, r3, r2
 80053b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80053b8:	1aa7      	subs	r7, r4, r2
 80053ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80053be:	ae22      	add	r6, sp, #136	; 0x88
 80053c0:	2500      	movs	r5, #0
 80053c2:	4545      	cmp	r5, r8
 80053c4:	dd13      	ble.n	80053ee <__kernel_rem_pio2+0x7e>
 80053c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005688 <__kernel_rem_pio2+0x318>
 80053ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80053ce:	2600      	movs	r6, #0
 80053d0:	9b04      	ldr	r3, [sp, #16]
 80053d2:	429e      	cmp	r6, r3
 80053d4:	dc32      	bgt.n	800543c <__kernel_rem_pio2+0xcc>
 80053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	9b08      	ldr	r3, [sp, #32]
 80053dc:	199d      	adds	r5, r3, r6
 80053de:	ab22      	add	r3, sp, #136	; 0x88
 80053e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80053e4:	9306      	str	r3, [sp, #24]
 80053e6:	ec59 8b18 	vmov	r8, r9, d8
 80053ea:	2700      	movs	r7, #0
 80053ec:	e01f      	b.n	800542e <__kernel_rem_pio2+0xbe>
 80053ee:	42ef      	cmn	r7, r5
 80053f0:	d407      	bmi.n	8005402 <__kernel_rem_pio2+0x92>
 80053f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80053f6:	f7fb f839 	bl	800046c <__aeabi_i2d>
 80053fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80053fe:	3501      	adds	r5, #1
 8005400:	e7df      	b.n	80053c2 <__kernel_rem_pio2+0x52>
 8005402:	ec51 0b18 	vmov	r0, r1, d8
 8005406:	e7f8      	b.n	80053fa <__kernel_rem_pio2+0x8a>
 8005408:	9906      	ldr	r1, [sp, #24]
 800540a:	9d02      	ldr	r5, [sp, #8]
 800540c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005410:	9106      	str	r1, [sp, #24]
 8005412:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005416:	9502      	str	r5, [sp, #8]
 8005418:	f7fb f892 	bl	8000540 <__aeabi_dmul>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4640      	mov	r0, r8
 8005422:	4649      	mov	r1, r9
 8005424:	f7fa fed6 	bl	80001d4 <__adddf3>
 8005428:	3701      	adds	r7, #1
 800542a:	4680      	mov	r8, r0
 800542c:	4689      	mov	r9, r1
 800542e:	9b07      	ldr	r3, [sp, #28]
 8005430:	429f      	cmp	r7, r3
 8005432:	dde9      	ble.n	8005408 <__kernel_rem_pio2+0x98>
 8005434:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005438:	3601      	adds	r6, #1
 800543a:	e7c9      	b.n	80053d0 <__kernel_rem_pio2+0x60>
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	aa0e      	add	r2, sp, #56	; 0x38
 8005440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005444:	930c      	str	r3, [sp, #48]	; 0x30
 8005446:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005448:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800544c:	9c04      	ldr	r4, [sp, #16]
 800544e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005450:	ab9a      	add	r3, sp, #616	; 0x268
 8005452:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005456:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800545a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800545e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005462:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005466:	ab9a      	add	r3, sp, #616	; 0x268
 8005468:	445b      	add	r3, fp
 800546a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800546e:	2500      	movs	r5, #0
 8005470:	1b63      	subs	r3, r4, r5
 8005472:	2b00      	cmp	r3, #0
 8005474:	dc78      	bgt.n	8005568 <__kernel_rem_pio2+0x1f8>
 8005476:	4650      	mov	r0, sl
 8005478:	ec49 8b10 	vmov	d0, r8, r9
 800547c:	f000 fe30 	bl	80060e0 <scalbn>
 8005480:	ec57 6b10 	vmov	r6, r7, d0
 8005484:	2200      	movs	r2, #0
 8005486:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800548a:	ee10 0a10 	vmov	r0, s0
 800548e:	4639      	mov	r1, r7
 8005490:	f7fb f856 	bl	8000540 <__aeabi_dmul>
 8005494:	ec41 0b10 	vmov	d0, r0, r1
 8005498:	f000 fd9e 	bl	8005fd8 <floor>
 800549c:	2200      	movs	r2, #0
 800549e:	ec51 0b10 	vmov	r0, r1, d0
 80054a2:	4b7e      	ldr	r3, [pc, #504]	; (800569c <__kernel_rem_pio2+0x32c>)
 80054a4:	f7fb f84c 	bl	8000540 <__aeabi_dmul>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fa fe8e 	bl	80001d0 <__aeabi_dsub>
 80054b4:	460f      	mov	r7, r1
 80054b6:	4606      	mov	r6, r0
 80054b8:	f7fb fadc 	bl	8000a74 <__aeabi_d2iz>
 80054bc:	9006      	str	r0, [sp, #24]
 80054be:	f7fa ffd5 	bl	800046c <__aeabi_i2d>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fa fe81 	bl	80001d0 <__aeabi_dsub>
 80054ce:	f1ba 0f00 	cmp.w	sl, #0
 80054d2:	4606      	mov	r6, r0
 80054d4:	460f      	mov	r7, r1
 80054d6:	dd6c      	ble.n	80055b2 <__kernel_rem_pio2+0x242>
 80054d8:	1e62      	subs	r2, r4, #1
 80054da:	ab0e      	add	r3, sp, #56	; 0x38
 80054dc:	f1ca 0118 	rsb	r1, sl, #24
 80054e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80054e4:	9d06      	ldr	r5, [sp, #24]
 80054e6:	fa40 f301 	asr.w	r3, r0, r1
 80054ea:	441d      	add	r5, r3
 80054ec:	408b      	lsls	r3, r1
 80054ee:	1ac0      	subs	r0, r0, r3
 80054f0:	ab0e      	add	r3, sp, #56	; 0x38
 80054f2:	9506      	str	r5, [sp, #24]
 80054f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80054f8:	f1ca 0317 	rsb	r3, sl, #23
 80054fc:	fa40 f303 	asr.w	r3, r0, r3
 8005500:	9302      	str	r3, [sp, #8]
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	dd62      	ble.n	80055ce <__kernel_rem_pio2+0x25e>
 8005508:	9b06      	ldr	r3, [sp, #24]
 800550a:	2200      	movs	r2, #0
 800550c:	3301      	adds	r3, #1
 800550e:	9306      	str	r3, [sp, #24]
 8005510:	4615      	mov	r5, r2
 8005512:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005516:	4294      	cmp	r4, r2
 8005518:	f300 8095 	bgt.w	8005646 <__kernel_rem_pio2+0x2d6>
 800551c:	f1ba 0f00 	cmp.w	sl, #0
 8005520:	dd07      	ble.n	8005532 <__kernel_rem_pio2+0x1c2>
 8005522:	f1ba 0f01 	cmp.w	sl, #1
 8005526:	f000 80a2 	beq.w	800566e <__kernel_rem_pio2+0x2fe>
 800552a:	f1ba 0f02 	cmp.w	sl, #2
 800552e:	f000 80c1 	beq.w	80056b4 <__kernel_rem_pio2+0x344>
 8005532:	9b02      	ldr	r3, [sp, #8]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d14a      	bne.n	80055ce <__kernel_rem_pio2+0x25e>
 8005538:	4632      	mov	r2, r6
 800553a:	463b      	mov	r3, r7
 800553c:	2000      	movs	r0, #0
 800553e:	4958      	ldr	r1, [pc, #352]	; (80056a0 <__kernel_rem_pio2+0x330>)
 8005540:	f7fa fe46 	bl	80001d0 <__aeabi_dsub>
 8005544:	4606      	mov	r6, r0
 8005546:	460f      	mov	r7, r1
 8005548:	2d00      	cmp	r5, #0
 800554a:	d040      	beq.n	80055ce <__kernel_rem_pio2+0x25e>
 800554c:	4650      	mov	r0, sl
 800554e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005690 <__kernel_rem_pio2+0x320>
 8005552:	f000 fdc5 	bl	80060e0 <scalbn>
 8005556:	4630      	mov	r0, r6
 8005558:	4639      	mov	r1, r7
 800555a:	ec53 2b10 	vmov	r2, r3, d0
 800555e:	f7fa fe37 	bl	80001d0 <__aeabi_dsub>
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	e032      	b.n	80055ce <__kernel_rem_pio2+0x25e>
 8005568:	2200      	movs	r2, #0
 800556a:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <__kernel_rem_pio2+0x334>)
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fa ffe6 	bl	8000540 <__aeabi_dmul>
 8005574:	f7fb fa7e 	bl	8000a74 <__aeabi_d2iz>
 8005578:	f7fa ff78 	bl	800046c <__aeabi_i2d>
 800557c:	2200      	movs	r2, #0
 800557e:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <__kernel_rem_pio2+0x338>)
 8005580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005584:	f7fa ffdc 	bl	8000540 <__aeabi_dmul>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	f7fa fe1e 	bl	80001d0 <__aeabi_dsub>
 8005594:	f7fb fa6e 	bl	8000a74 <__aeabi_d2iz>
 8005598:	ab0e      	add	r3, sp, #56	; 0x38
 800559a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800559e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80055a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a6:	f7fa fe15 	bl	80001d4 <__adddf3>
 80055aa:	3501      	adds	r5, #1
 80055ac:	4680      	mov	r8, r0
 80055ae:	4689      	mov	r9, r1
 80055b0:	e75e      	b.n	8005470 <__kernel_rem_pio2+0x100>
 80055b2:	d105      	bne.n	80055c0 <__kernel_rem_pio2+0x250>
 80055b4:	1e63      	subs	r3, r4, #1
 80055b6:	aa0e      	add	r2, sp, #56	; 0x38
 80055b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80055bc:	15c3      	asrs	r3, r0, #23
 80055be:	e79f      	b.n	8005500 <__kernel_rem_pio2+0x190>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4b3a      	ldr	r3, [pc, #232]	; (80056ac <__kernel_rem_pio2+0x33c>)
 80055c4:	f7fb fa42 	bl	8000a4c <__aeabi_dcmpge>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d139      	bne.n	8005640 <__kernel_rem_pio2+0x2d0>
 80055cc:	9002      	str	r0, [sp, #8]
 80055ce:	2200      	movs	r2, #0
 80055d0:	2300      	movs	r3, #0
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fb fa1b 	bl	8000a10 <__aeabi_dcmpeq>
 80055da:	2800      	cmp	r0, #0
 80055dc:	f000 80c7 	beq.w	800576e <__kernel_rem_pio2+0x3fe>
 80055e0:	1e65      	subs	r5, r4, #1
 80055e2:	462b      	mov	r3, r5
 80055e4:	2200      	movs	r2, #0
 80055e6:	9904      	ldr	r1, [sp, #16]
 80055e8:	428b      	cmp	r3, r1
 80055ea:	da6a      	bge.n	80056c2 <__kernel_rem_pio2+0x352>
 80055ec:	2a00      	cmp	r2, #0
 80055ee:	f000 8088 	beq.w	8005702 <__kernel_rem_pio2+0x392>
 80055f2:	ab0e      	add	r3, sp, #56	; 0x38
 80055f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80055f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b4 	beq.w	800576a <__kernel_rem_pio2+0x3fa>
 8005602:	4650      	mov	r0, sl
 8005604:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005690 <__kernel_rem_pio2+0x320>
 8005608:	f000 fd6a 	bl	80060e0 <scalbn>
 800560c:	00ec      	lsls	r4, r5, #3
 800560e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005610:	191e      	adds	r6, r3, r4
 8005612:	ec59 8b10 	vmov	r8, r9, d0
 8005616:	f106 0a08 	add.w	sl, r6, #8
 800561a:	462f      	mov	r7, r5
 800561c:	2f00      	cmp	r7, #0
 800561e:	f280 80df 	bge.w	80057e0 <__kernel_rem_pio2+0x470>
 8005622:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005688 <__kernel_rem_pio2+0x318>
 8005626:	f04f 0a00 	mov.w	sl, #0
 800562a:	eba5 030a 	sub.w	r3, r5, sl
 800562e:	2b00      	cmp	r3, #0
 8005630:	f2c0 810a 	blt.w	8005848 <__kernel_rem_pio2+0x4d8>
 8005634:	f8df b078 	ldr.w	fp, [pc, #120]	; 80056b0 <__kernel_rem_pio2+0x340>
 8005638:	ec59 8b18 	vmov	r8, r9, d8
 800563c:	2700      	movs	r7, #0
 800563e:	e0f5      	b.n	800582c <__kernel_rem_pio2+0x4bc>
 8005640:	2302      	movs	r3, #2
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	e760      	b.n	8005508 <__kernel_rem_pio2+0x198>
 8005646:	ab0e      	add	r3, sp, #56	; 0x38
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	b94d      	cbnz	r5, 8005662 <__kernel_rem_pio2+0x2f2>
 800564e:	b12b      	cbz	r3, 800565c <__kernel_rem_pio2+0x2ec>
 8005650:	a80e      	add	r0, sp, #56	; 0x38
 8005652:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005656:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800565a:	2301      	movs	r3, #1
 800565c:	3201      	adds	r2, #1
 800565e:	461d      	mov	r5, r3
 8005660:	e759      	b.n	8005516 <__kernel_rem_pio2+0x1a6>
 8005662:	a80e      	add	r0, sp, #56	; 0x38
 8005664:	1acb      	subs	r3, r1, r3
 8005666:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800566a:	462b      	mov	r3, r5
 800566c:	e7f6      	b.n	800565c <__kernel_rem_pio2+0x2ec>
 800566e:	1e62      	subs	r2, r4, #1
 8005670:	ab0e      	add	r3, sp, #56	; 0x38
 8005672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005676:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800567a:	a90e      	add	r1, sp, #56	; 0x38
 800567c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005680:	e757      	b.n	8005532 <__kernel_rem_pio2+0x1c2>
 8005682:	bf00      	nop
 8005684:	f3af 8000 	nop.w
	...
 8005694:	3ff00000 	.word	0x3ff00000
 8005698:	08006400 	.word	0x08006400
 800569c:	40200000 	.word	0x40200000
 80056a0:	3ff00000 	.word	0x3ff00000
 80056a4:	3e700000 	.word	0x3e700000
 80056a8:	41700000 	.word	0x41700000
 80056ac:	3fe00000 	.word	0x3fe00000
 80056b0:	080063c0 	.word	0x080063c0
 80056b4:	1e62      	subs	r2, r4, #1
 80056b6:	ab0e      	add	r3, sp, #56	; 0x38
 80056b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80056c0:	e7db      	b.n	800567a <__kernel_rem_pio2+0x30a>
 80056c2:	a90e      	add	r1, sp, #56	; 0x38
 80056c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	430a      	orrs	r2, r1
 80056cc:	e78b      	b.n	80055e6 <__kernel_rem_pio2+0x276>
 80056ce:	3301      	adds	r3, #1
 80056d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d0fa      	beq.n	80056ce <__kernel_rem_pio2+0x35e>
 80056d8:	9a08      	ldr	r2, [sp, #32]
 80056da:	4422      	add	r2, r4
 80056dc:	00d2      	lsls	r2, r2, #3
 80056de:	a922      	add	r1, sp, #136	; 0x88
 80056e0:	18e3      	adds	r3, r4, r3
 80056e2:	9206      	str	r2, [sp, #24]
 80056e4:	440a      	add	r2, r1
 80056e6:	9302      	str	r3, [sp, #8]
 80056e8:	f10b 0108 	add.w	r1, fp, #8
 80056ec:	f102 0308 	add.w	r3, r2, #8
 80056f0:	1c66      	adds	r6, r4, #1
 80056f2:	910a      	str	r1, [sp, #40]	; 0x28
 80056f4:	2500      	movs	r5, #0
 80056f6:	930d      	str	r3, [sp, #52]	; 0x34
 80056f8:	9b02      	ldr	r3, [sp, #8]
 80056fa:	42b3      	cmp	r3, r6
 80056fc:	da04      	bge.n	8005708 <__kernel_rem_pio2+0x398>
 80056fe:	461c      	mov	r4, r3
 8005700:	e6a6      	b.n	8005450 <__kernel_rem_pio2+0xe0>
 8005702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005704:	2301      	movs	r3, #1
 8005706:	e7e3      	b.n	80056d0 <__kernel_rem_pio2+0x360>
 8005708:	9b06      	ldr	r3, [sp, #24]
 800570a:	18ef      	adds	r7, r5, r3
 800570c:	ab22      	add	r3, sp, #136	; 0x88
 800570e:	441f      	add	r7, r3
 8005710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005712:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005716:	f7fa fea9 	bl	800046c <__aeabi_i2d>
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	461c      	mov	r4, r3
 800571e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005720:	e9c7 0100 	strd	r0, r1, [r7]
 8005724:	eb03 0b05 	add.w	fp, r3, r5
 8005728:	2700      	movs	r7, #0
 800572a:	f04f 0800 	mov.w	r8, #0
 800572e:	f04f 0900 	mov.w	r9, #0
 8005732:	9b07      	ldr	r3, [sp, #28]
 8005734:	429f      	cmp	r7, r3
 8005736:	dd08      	ble.n	800574a <__kernel_rem_pio2+0x3da>
 8005738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573a:	aa72      	add	r2, sp, #456	; 0x1c8
 800573c:	18eb      	adds	r3, r5, r3
 800573e:	4413      	add	r3, r2
 8005740:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005744:	3601      	adds	r6, #1
 8005746:	3508      	adds	r5, #8
 8005748:	e7d6      	b.n	80056f8 <__kernel_rem_pio2+0x388>
 800574a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800574e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005752:	f7fa fef5 	bl	8000540 <__aeabi_dmul>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fa fd39 	bl	80001d4 <__adddf3>
 8005762:	3701      	adds	r7, #1
 8005764:	4680      	mov	r8, r0
 8005766:	4689      	mov	r9, r1
 8005768:	e7e3      	b.n	8005732 <__kernel_rem_pio2+0x3c2>
 800576a:	3d01      	subs	r5, #1
 800576c:	e741      	b.n	80055f2 <__kernel_rem_pio2+0x282>
 800576e:	f1ca 0000 	rsb	r0, sl, #0
 8005772:	ec47 6b10 	vmov	d0, r6, r7
 8005776:	f000 fcb3 	bl	80060e0 <scalbn>
 800577a:	ec57 6b10 	vmov	r6, r7, d0
 800577e:	2200      	movs	r2, #0
 8005780:	4b99      	ldr	r3, [pc, #612]	; (80059e8 <__kernel_rem_pio2+0x678>)
 8005782:	ee10 0a10 	vmov	r0, s0
 8005786:	4639      	mov	r1, r7
 8005788:	f7fb f960 	bl	8000a4c <__aeabi_dcmpge>
 800578c:	b1f8      	cbz	r0, 80057ce <__kernel_rem_pio2+0x45e>
 800578e:	2200      	movs	r2, #0
 8005790:	4b96      	ldr	r3, [pc, #600]	; (80059ec <__kernel_rem_pio2+0x67c>)
 8005792:	4630      	mov	r0, r6
 8005794:	4639      	mov	r1, r7
 8005796:	f7fa fed3 	bl	8000540 <__aeabi_dmul>
 800579a:	f7fb f96b 	bl	8000a74 <__aeabi_d2iz>
 800579e:	4680      	mov	r8, r0
 80057a0:	f7fa fe64 	bl	800046c <__aeabi_i2d>
 80057a4:	2200      	movs	r2, #0
 80057a6:	4b90      	ldr	r3, [pc, #576]	; (80059e8 <__kernel_rem_pio2+0x678>)
 80057a8:	f7fa feca 	bl	8000540 <__aeabi_dmul>
 80057ac:	460b      	mov	r3, r1
 80057ae:	4602      	mov	r2, r0
 80057b0:	4639      	mov	r1, r7
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7fa fd0c 	bl	80001d0 <__aeabi_dsub>
 80057b8:	f7fb f95c 	bl	8000a74 <__aeabi_d2iz>
 80057bc:	1c65      	adds	r5, r4, #1
 80057be:	ab0e      	add	r3, sp, #56	; 0x38
 80057c0:	f10a 0a18 	add.w	sl, sl, #24
 80057c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80057c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80057cc:	e719      	b.n	8005602 <__kernel_rem_pio2+0x292>
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fb f94f 	bl	8000a74 <__aeabi_d2iz>
 80057d6:	ab0e      	add	r3, sp, #56	; 0x38
 80057d8:	4625      	mov	r5, r4
 80057da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80057de:	e710      	b.n	8005602 <__kernel_rem_pio2+0x292>
 80057e0:	ab0e      	add	r3, sp, #56	; 0x38
 80057e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80057e6:	f7fa fe41 	bl	800046c <__aeabi_i2d>
 80057ea:	4642      	mov	r2, r8
 80057ec:	464b      	mov	r3, r9
 80057ee:	f7fa fea7 	bl	8000540 <__aeabi_dmul>
 80057f2:	2200      	movs	r2, #0
 80057f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80057f8:	4b7c      	ldr	r3, [pc, #496]	; (80059ec <__kernel_rem_pio2+0x67c>)
 80057fa:	4640      	mov	r0, r8
 80057fc:	4649      	mov	r1, r9
 80057fe:	f7fa fe9f 	bl	8000540 <__aeabi_dmul>
 8005802:	3f01      	subs	r7, #1
 8005804:	4680      	mov	r8, r0
 8005806:	4689      	mov	r9, r1
 8005808:	e708      	b.n	800561c <__kernel_rem_pio2+0x2ac>
 800580a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005816:	f7fa fe93 	bl	8000540 <__aeabi_dmul>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4640      	mov	r0, r8
 8005820:	4649      	mov	r1, r9
 8005822:	f7fa fcd7 	bl	80001d4 <__adddf3>
 8005826:	3701      	adds	r7, #1
 8005828:	4680      	mov	r8, r0
 800582a:	4689      	mov	r9, r1
 800582c:	9b04      	ldr	r3, [sp, #16]
 800582e:	429f      	cmp	r7, r3
 8005830:	dc01      	bgt.n	8005836 <__kernel_rem_pio2+0x4c6>
 8005832:	45ba      	cmp	sl, r7
 8005834:	dae9      	bge.n	800580a <__kernel_rem_pio2+0x49a>
 8005836:	ab4a      	add	r3, sp, #296	; 0x128
 8005838:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800583c:	e9c3 8900 	strd	r8, r9, [r3]
 8005840:	f10a 0a01 	add.w	sl, sl, #1
 8005844:	3e08      	subs	r6, #8
 8005846:	e6f0      	b.n	800562a <__kernel_rem_pio2+0x2ba>
 8005848:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800584a:	2b03      	cmp	r3, #3
 800584c:	d85b      	bhi.n	8005906 <__kernel_rem_pio2+0x596>
 800584e:	e8df f003 	tbb	[pc, r3]
 8005852:	264a      	.short	0x264a
 8005854:	0226      	.short	0x0226
 8005856:	ab9a      	add	r3, sp, #616	; 0x268
 8005858:	441c      	add	r4, r3
 800585a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800585e:	46a2      	mov	sl, r4
 8005860:	46ab      	mov	fp, r5
 8005862:	f1bb 0f00 	cmp.w	fp, #0
 8005866:	dc6c      	bgt.n	8005942 <__kernel_rem_pio2+0x5d2>
 8005868:	46a2      	mov	sl, r4
 800586a:	46ab      	mov	fp, r5
 800586c:	f1bb 0f01 	cmp.w	fp, #1
 8005870:	f300 8086 	bgt.w	8005980 <__kernel_rem_pio2+0x610>
 8005874:	2000      	movs	r0, #0
 8005876:	2100      	movs	r1, #0
 8005878:	2d01      	cmp	r5, #1
 800587a:	f300 80a0 	bgt.w	80059be <__kernel_rem_pio2+0x64e>
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005884:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005888:	2b00      	cmp	r3, #0
 800588a:	f040 809e 	bne.w	80059ca <__kernel_rem_pio2+0x65a>
 800588e:	9b01      	ldr	r3, [sp, #4]
 8005890:	e9c3 7800 	strd	r7, r8, [r3]
 8005894:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005898:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800589c:	e033      	b.n	8005906 <__kernel_rem_pio2+0x596>
 800589e:	3408      	adds	r4, #8
 80058a0:	ab4a      	add	r3, sp, #296	; 0x128
 80058a2:	441c      	add	r4, r3
 80058a4:	462e      	mov	r6, r5
 80058a6:	2000      	movs	r0, #0
 80058a8:	2100      	movs	r1, #0
 80058aa:	2e00      	cmp	r6, #0
 80058ac:	da3a      	bge.n	8005924 <__kernel_rem_pio2+0x5b4>
 80058ae:	9b02      	ldr	r3, [sp, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03d      	beq.n	8005930 <__kernel_rem_pio2+0x5c0>
 80058b4:	4602      	mov	r2, r0
 80058b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058ba:	9c01      	ldr	r4, [sp, #4]
 80058bc:	e9c4 2300 	strd	r2, r3, [r4]
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80058c8:	f7fa fc82 	bl	80001d0 <__aeabi_dsub>
 80058cc:	ae4c      	add	r6, sp, #304	; 0x130
 80058ce:	2401      	movs	r4, #1
 80058d0:	42a5      	cmp	r5, r4
 80058d2:	da30      	bge.n	8005936 <__kernel_rem_pio2+0x5c6>
 80058d4:	9b02      	ldr	r3, [sp, #8]
 80058d6:	b113      	cbz	r3, 80058de <__kernel_rem_pio2+0x56e>
 80058d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058dc:	4619      	mov	r1, r3
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80058e4:	e00f      	b.n	8005906 <__kernel_rem_pio2+0x596>
 80058e6:	ab9a      	add	r3, sp, #616	; 0x268
 80058e8:	441c      	add	r4, r3
 80058ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80058ee:	2000      	movs	r0, #0
 80058f0:	2100      	movs	r1, #0
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	da10      	bge.n	8005918 <__kernel_rem_pio2+0x5a8>
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	b113      	cbz	r3, 8005900 <__kernel_rem_pio2+0x590>
 80058fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058fe:	4619      	mov	r1, r3
 8005900:	9b01      	ldr	r3, [sp, #4]
 8005902:	e9c3 0100 	strd	r0, r1, [r3]
 8005906:	9b06      	ldr	r3, [sp, #24]
 8005908:	f003 0007 	and.w	r0, r3, #7
 800590c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005910:	ecbd 8b02 	vpop	{d8}
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005918:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800591c:	f7fa fc5a 	bl	80001d4 <__adddf3>
 8005920:	3d01      	subs	r5, #1
 8005922:	e7e6      	b.n	80058f2 <__kernel_rem_pio2+0x582>
 8005924:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005928:	f7fa fc54 	bl	80001d4 <__adddf3>
 800592c:	3e01      	subs	r6, #1
 800592e:	e7bc      	b.n	80058aa <__kernel_rem_pio2+0x53a>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	e7c1      	b.n	80058ba <__kernel_rem_pio2+0x54a>
 8005936:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800593a:	f7fa fc4b 	bl	80001d4 <__adddf3>
 800593e:	3401      	adds	r4, #1
 8005940:	e7c6      	b.n	80058d0 <__kernel_rem_pio2+0x560>
 8005942:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005946:	ed3a 7b02 	vldmdb	sl!, {d7}
 800594a:	4640      	mov	r0, r8
 800594c:	ec53 2b17 	vmov	r2, r3, d7
 8005950:	4649      	mov	r1, r9
 8005952:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005956:	f7fa fc3d 	bl	80001d4 <__adddf3>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4606      	mov	r6, r0
 8005960:	460f      	mov	r7, r1
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f7fa fc33 	bl	80001d0 <__aeabi_dsub>
 800596a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800596e:	f7fa fc31 	bl	80001d4 <__adddf3>
 8005972:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005976:	e9ca 0100 	strd	r0, r1, [sl]
 800597a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800597e:	e770      	b.n	8005862 <__kernel_rem_pio2+0x4f2>
 8005980:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005984:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005988:	4630      	mov	r0, r6
 800598a:	ec53 2b17 	vmov	r2, r3, d7
 800598e:	4639      	mov	r1, r7
 8005990:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005994:	f7fa fc1e 	bl	80001d4 <__adddf3>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4680      	mov	r8, r0
 800599e:	4689      	mov	r9, r1
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fa fc14 	bl	80001d0 <__aeabi_dsub>
 80059a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ac:	f7fa fc12 	bl	80001d4 <__adddf3>
 80059b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059b4:	e9ca 0100 	strd	r0, r1, [sl]
 80059b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80059bc:	e756      	b.n	800586c <__kernel_rem_pio2+0x4fc>
 80059be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059c2:	f7fa fc07 	bl	80001d4 <__adddf3>
 80059c6:	3d01      	subs	r5, #1
 80059c8:	e756      	b.n	8005878 <__kernel_rem_pio2+0x508>
 80059ca:	9b01      	ldr	r3, [sp, #4]
 80059cc:	9a01      	ldr	r2, [sp, #4]
 80059ce:	601f      	str	r7, [r3, #0]
 80059d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80059d4:	605c      	str	r4, [r3, #4]
 80059d6:	609d      	str	r5, [r3, #8]
 80059d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059dc:	60d3      	str	r3, [r2, #12]
 80059de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059e2:	6110      	str	r0, [r2, #16]
 80059e4:	6153      	str	r3, [r2, #20]
 80059e6:	e78e      	b.n	8005906 <__kernel_rem_pio2+0x596>
 80059e8:	41700000 	.word	0x41700000
 80059ec:	3e700000 	.word	0x3e700000

080059f0 <__kernel_sin>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	ec55 4b10 	vmov	r4, r5, d0
 80059f8:	b085      	sub	sp, #20
 80059fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80059fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005a02:	ed8d 1b00 	vstr	d1, [sp]
 8005a06:	9002      	str	r0, [sp, #8]
 8005a08:	da06      	bge.n	8005a18 <__kernel_sin+0x28>
 8005a0a:	ee10 0a10 	vmov	r0, s0
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fb f830 	bl	8000a74 <__aeabi_d2iz>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d051      	beq.n	8005abc <__kernel_sin+0xcc>
 8005a18:	4622      	mov	r2, r4
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	4629      	mov	r1, r5
 8005a20:	f7fa fd8e 	bl	8000540 <__aeabi_dmul>
 8005a24:	4682      	mov	sl, r0
 8005a26:	468b      	mov	fp, r1
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fa fd86 	bl	8000540 <__aeabi_dmul>
 8005a34:	a341      	add	r3, pc, #260	; (adr r3, 8005b3c <__kernel_sin+0x14c>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	4689      	mov	r9, r1
 8005a3e:	4650      	mov	r0, sl
 8005a40:	4659      	mov	r1, fp
 8005a42:	f7fa fd7d 	bl	8000540 <__aeabi_dmul>
 8005a46:	a33f      	add	r3, pc, #252	; (adr r3, 8005b44 <__kernel_sin+0x154>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f7fa fbc0 	bl	80001d0 <__aeabi_dsub>
 8005a50:	4652      	mov	r2, sl
 8005a52:	465b      	mov	r3, fp
 8005a54:	f7fa fd74 	bl	8000540 <__aeabi_dmul>
 8005a58:	a33c      	add	r3, pc, #240	; (adr r3, 8005b4c <__kernel_sin+0x15c>)
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f7fa fbb9 	bl	80001d4 <__adddf3>
 8005a62:	4652      	mov	r2, sl
 8005a64:	465b      	mov	r3, fp
 8005a66:	f7fa fd6b 	bl	8000540 <__aeabi_dmul>
 8005a6a:	a33a      	add	r3, pc, #232	; (adr r3, 8005b54 <__kernel_sin+0x164>)
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f7fa fbae 	bl	80001d0 <__aeabi_dsub>
 8005a74:	4652      	mov	r2, sl
 8005a76:	465b      	mov	r3, fp
 8005a78:	f7fa fd62 	bl	8000540 <__aeabi_dmul>
 8005a7c:	a337      	add	r3, pc, #220	; (adr r3, 8005b5c <__kernel_sin+0x16c>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fba7 	bl	80001d4 <__adddf3>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	4606      	mov	r6, r0
 8005a8a:	460f      	mov	r7, r1
 8005a8c:	b9db      	cbnz	r3, 8005ac6 <__kernel_sin+0xd6>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4650      	mov	r0, sl
 8005a94:	4659      	mov	r1, fp
 8005a96:	f7fa fd53 	bl	8000540 <__aeabi_dmul>
 8005a9a:	a325      	add	r3, pc, #148	; (adr r3, 8005b30 <__kernel_sin+0x140>)
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f7fa fb96 	bl	80001d0 <__aeabi_dsub>
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	f7fa fd4a 	bl	8000540 <__aeabi_dmul>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7fa fb8e 	bl	80001d4 <__adddf3>
 8005ab8:	4604      	mov	r4, r0
 8005aba:	460d      	mov	r5, r1
 8005abc:	ec45 4b10 	vmov	d0, r4, r5
 8005ac0:	b005      	add	sp, #20
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <__kernel_sin+0x148>)
 8005aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ace:	f7fa fd37 	bl	8000540 <__aeabi_dmul>
 8005ad2:	4632      	mov	r2, r6
 8005ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa fd2f 	bl	8000540 <__aeabi_dmul>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aea:	f7fa fb71 	bl	80001d0 <__aeabi_dsub>
 8005aee:	4652      	mov	r2, sl
 8005af0:	465b      	mov	r3, fp
 8005af2:	f7fa fd25 	bl	8000540 <__aeabi_dmul>
 8005af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afa:	f7fa fb69 	bl	80001d0 <__aeabi_dsub>
 8005afe:	a30c      	add	r3, pc, #48	; (adr r3, 8005b30 <__kernel_sin+0x140>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	4640      	mov	r0, r8
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	f7fa fd18 	bl	8000540 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fa fb5c 	bl	80001d4 <__adddf3>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4620      	mov	r0, r4
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7fa fb54 	bl	80001d0 <__aeabi_dsub>
 8005b28:	e7c6      	b.n	8005ab8 <__kernel_sin+0xc8>
 8005b2a:	bf00      	nop
 8005b2c:	f3af 8000 	nop.w
 8005b30:	55555549 	.word	0x55555549
 8005b34:	3fc55555 	.word	0x3fc55555
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	5acfd57c 	.word	0x5acfd57c
 8005b40:	3de5d93a 	.word	0x3de5d93a
 8005b44:	8a2b9ceb 	.word	0x8a2b9ceb
 8005b48:	3e5ae5e6 	.word	0x3e5ae5e6
 8005b4c:	57b1fe7d 	.word	0x57b1fe7d
 8005b50:	3ec71de3 	.word	0x3ec71de3
 8005b54:	19c161d5 	.word	0x19c161d5
 8005b58:	3f2a01a0 	.word	0x3f2a01a0
 8005b5c:	1110f8a6 	.word	0x1110f8a6
 8005b60:	3f811111 	.word	0x3f811111
 8005b64:	00000000 	.word	0x00000000

08005b68 <expm1>:
 8005b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	ec55 4b10 	vmov	r4, r5, d0
 8005b70:	4ad5      	ldr	r2, [pc, #852]	; (8005ec8 <expm1+0x360>)
 8005b72:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005b76:	4293      	cmp	r3, r2
 8005b78:	462e      	mov	r6, r5
 8005b7a:	d94b      	bls.n	8005c14 <expm1+0xac>
 8005b7c:	4ad3      	ldr	r2, [pc, #844]	; (8005ecc <expm1+0x364>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	f240 820c 	bls.w	8005f9c <expm1+0x434>
 8005b84:	4ad2      	ldr	r2, [pc, #840]	; (8005ed0 <expm1+0x368>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d910      	bls.n	8005bac <expm1+0x44>
 8005b8a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005b8e:	4323      	orrs	r3, r4
 8005b90:	ee10 2a10 	vmov	r2, s0
 8005b94:	d005      	beq.n	8005ba2 <expm1+0x3a>
 8005b96:	462b      	mov	r3, r5
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f7fa fb1a 	bl	80001d4 <__adddf3>
 8005ba0:	e016      	b.n	8005bd0 <expm1+0x68>
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	da16      	bge.n	8005bd4 <expm1+0x6c>
 8005ba6:	2400      	movs	r4, #0
 8005ba8:	4dca      	ldr	r5, [pc, #808]	; (8005ed4 <expm1+0x36c>)
 8005baa:	e013      	b.n	8005bd4 <expm1+0x6c>
 8005bac:	a3ae      	add	r3, pc, #696	; (adr r3, 8005e68 <expm1+0x300>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	ee10 0a10 	vmov	r0, s0
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f7fa ff52 	bl	8000a60 <__aeabi_dcmpgt>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f000 81ed 	beq.w	8005f9c <expm1+0x434>
 8005bc2:	a3ab      	add	r3, pc, #684	; (adr r3, 8005e70 <expm1+0x308>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f7fa fcb8 	bl	8000540 <__aeabi_dmul>
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	ec45 4b10 	vmov	d0, r4, r5
 8005bd8:	b004      	add	sp, #16
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	a3a6      	add	r3, pc, #664	; (adr r3, 8005e78 <expm1+0x310>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7fa faf4 	bl	80001d4 <__adddf3>
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f7fa ff18 	bl	8000a24 <__aeabi_dcmplt>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d1d6      	bne.n	8005ba6 <expm1+0x3e>
 8005bf8:	a3a1      	add	r3, pc, #644	; (adr r3, 8005e80 <expm1+0x318>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fc9d 	bl	8000540 <__aeabi_dmul>
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	f04f 0600 	mov.w	r6, #0
 8005c0c:	f2c0 80b0 	blt.w	8005d70 <expm1+0x208>
 8005c10:	4fb1      	ldr	r7, [pc, #708]	; (8005ed8 <expm1+0x370>)
 8005c12:	e0ae      	b.n	8005d72 <expm1+0x20a>
 8005c14:	4ab1      	ldr	r2, [pc, #708]	; (8005edc <expm1+0x374>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	f240 80cf 	bls.w	8005dba <expm1+0x252>
 8005c1c:	4ab0      	ldr	r2, [pc, #704]	; (8005ee0 <expm1+0x378>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d8ea      	bhi.n	8005bf8 <expm1+0x90>
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	a398      	add	r3, pc, #608	; (adr r3, 8005e88 <expm1+0x320>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	ee10 0a10 	vmov	r0, s0
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f2c0 8094 	blt.w	8005d5c <expm1+0x1f4>
 8005c34:	f7fa facc 	bl	80001d0 <__aeabi_dsub>
 8005c38:	a795      	add	r7, pc, #596	; (adr r7, 8005e90 <expm1+0x328>)
 8005c3a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005c3e:	4680      	mov	r8, r0
 8005c40:	4689      	mov	r9, r1
 8005c42:	f04f 0a01 	mov.w	sl, #1
 8005c46:	4632      	mov	r2, r6
 8005c48:	463b      	mov	r3, r7
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fabf 	bl	80001d0 <__aeabi_dsub>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4604      	mov	r4, r0
 8005c58:	460d      	mov	r5, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f7fa fab7 	bl	80001d0 <__aeabi_dsub>
 8005c62:	4632      	mov	r2, r6
 8005c64:	463b      	mov	r3, r7
 8005c66:	f7fa fab3 	bl	80001d0 <__aeabi_dsub>
 8005c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4b99      	ldr	r3, [pc, #612]	; (8005ed8 <expm1+0x370>)
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa fc63 	bl	8000540 <__aeabi_dmul>
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa fc5b 	bl	8000540 <__aeabi_dmul>
 8005c8a:	a383      	add	r3, pc, #524	; (adr r3, 8005e98 <expm1+0x330>)
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	4680      	mov	r8, r0
 8005c92:	4689      	mov	r9, r1
 8005c94:	f7fa fc54 	bl	8000540 <__aeabi_dmul>
 8005c98:	a381      	add	r3, pc, #516	; (adr r3, 8005ea0 <expm1+0x338>)
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	f7fa fa99 	bl	80001d4 <__adddf3>
 8005ca2:	4642      	mov	r2, r8
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	f7fa fc4b 	bl	8000540 <__aeabi_dmul>
 8005caa:	a37f      	add	r3, pc, #508	; (adr r3, 8005ea8 <expm1+0x340>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa fa8e 	bl	80001d0 <__aeabi_dsub>
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	f7fa fc42 	bl	8000540 <__aeabi_dmul>
 8005cbc:	a37c      	add	r3, pc, #496	; (adr r3, 8005eb0 <expm1+0x348>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa fa87 	bl	80001d4 <__adddf3>
 8005cc6:	4642      	mov	r2, r8
 8005cc8:	464b      	mov	r3, r9
 8005cca:	f7fa fc39 	bl	8000540 <__aeabi_dmul>
 8005cce:	a37a      	add	r3, pc, #488	; (adr r3, 8005eb8 <expm1+0x350>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa fa7c 	bl	80001d0 <__aeabi_dsub>
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	f7fa fc30 	bl	8000540 <__aeabi_dmul>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	4b80      	ldr	r3, [pc, #512]	; (8005ee4 <expm1+0x37c>)
 8005ce4:	f7fa fa76 	bl	80001d4 <__adddf3>
 8005ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa fc24 	bl	8000540 <__aeabi_dmul>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	497a      	ldr	r1, [pc, #488]	; (8005ee8 <expm1+0x380>)
 8005d00:	f7fa fa66 	bl	80001d0 <__aeabi_dsub>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4606      	mov	r6, r0
 8005d0a:	460f      	mov	r7, r1
 8005d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d10:	f7fa fa5e 	bl	80001d0 <__aeabi_dsub>
 8005d14:	4632      	mov	r2, r6
 8005d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f7fa fc0e 	bl	8000540 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	2000      	movs	r0, #0
 8005d2a:	4970      	ldr	r1, [pc, #448]	; (8005eec <expm1+0x384>)
 8005d2c:	f7fa fa50 	bl	80001d0 <__aeabi_dsub>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d38:	f7fa fd2c 	bl	8000794 <__aeabi_ddiv>
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	f7fa fbfe 	bl	8000540 <__aeabi_dmul>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	f1ba 0f00 	cmp.w	sl, #0
 8005d4c:	d14e      	bne.n	8005dec <expm1+0x284>
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7fa fbf5 	bl	8000540 <__aeabi_dmul>
 8005d56:	4642      	mov	r2, r8
 8005d58:	464b      	mov	r3, r9
 8005d5a:	e03b      	b.n	8005dd4 <expm1+0x26c>
 8005d5c:	f7fa fa3a 	bl	80001d4 <__adddf3>
 8005d60:	f04f 3aff 	mov.w	sl, #4294967295
 8005d64:	4680      	mov	r8, r0
 8005d66:	4689      	mov	r9, r1
 8005d68:	a755      	add	r7, pc, #340	; (adr r7, 8005ec0 <expm1+0x358>)
 8005d6a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005d6e:	e76a      	b.n	8005c46 <expm1+0xde>
 8005d70:	4f5f      	ldr	r7, [pc, #380]	; (8005ef0 <expm1+0x388>)
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4630      	mov	r0, r6
 8005d78:	4639      	mov	r1, r7
 8005d7a:	f7fa fa2b 	bl	80001d4 <__adddf3>
 8005d7e:	f7fa fe79 	bl	8000a74 <__aeabi_d2iz>
 8005d82:	4682      	mov	sl, r0
 8005d84:	f7fa fb72 	bl	800046c <__aeabi_i2d>
 8005d88:	a33f      	add	r3, pc, #252	; (adr r3, 8005e88 <expm1+0x320>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460f      	mov	r7, r1
 8005d92:	f7fa fbd5 	bl	8000540 <__aeabi_dmul>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f7fa fa17 	bl	80001d0 <__aeabi_dsub>
 8005da2:	a33b      	add	r3, pc, #236	; (adr r3, 8005e90 <expm1+0x328>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	4680      	mov	r8, r0
 8005daa:	4689      	mov	r9, r1
 8005dac:	4630      	mov	r0, r6
 8005dae:	4639      	mov	r1, r7
 8005db0:	f7fa fbc6 	bl	8000540 <__aeabi_dmul>
 8005db4:	4606      	mov	r6, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	e745      	b.n	8005c46 <expm1+0xde>
 8005dba:	4a4e      	ldr	r2, [pc, #312]	; (8005ef4 <expm1+0x38c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d812      	bhi.n	8005de6 <expm1+0x27e>
 8005dc0:	a32b      	add	r3, pc, #172	; (adr r3, 8005e70 <expm1+0x308>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	ee10 0a10 	vmov	r0, s0
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fa02 	bl	80001d4 <__adddf3>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	f7fa f9fc 	bl	80001d0 <__aeabi_dsub>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa f9f6 	bl	80001d0 <__aeabi_dsub>
 8005de4:	e6f4      	b.n	8005bd0 <expm1+0x68>
 8005de6:	f04f 0a00 	mov.w	sl, #0
 8005dea:	e740      	b.n	8005c6e <expm1+0x106>
 8005dec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005df0:	f7fa f9ee 	bl	80001d0 <__aeabi_dsub>
 8005df4:	4622      	mov	r2, r4
 8005df6:	462b      	mov	r3, r5
 8005df8:	f7fa fba2 	bl	8000540 <__aeabi_dmul>
 8005dfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e00:	f7fa f9e6 	bl	80001d0 <__aeabi_dsub>
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	f7fa f9e2 	bl	80001d0 <__aeabi_dsub>
 8005e0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	d10c      	bne.n	8005e30 <expm1+0x2c8>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7fa f9d7 	bl	80001d0 <__aeabi_dsub>
 8005e22:	2200      	movs	r2, #0
 8005e24:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <expm1+0x370>)
 8005e26:	f7fa fb8b 	bl	8000540 <__aeabi_dmul>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <expm1+0x370>)
 8005e2e:	e7d7      	b.n	8005de0 <expm1+0x278>
 8005e30:	f1ba 0f01 	cmp.w	sl, #1
 8005e34:	d16f      	bne.n	8005f16 <expm1+0x3ae>
 8005e36:	2200      	movs	r2, #0
 8005e38:	4b2f      	ldr	r3, [pc, #188]	; (8005ef8 <expm1+0x390>)
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	f7fa fdf1 	bl	8000a24 <__aeabi_dcmplt>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d05a      	beq.n	8005efc <expm1+0x394>
 8005e46:	2200      	movs	r2, #0
 8005e48:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <expm1+0x370>)
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	f7fa f9c1 	bl	80001d4 <__adddf3>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4630      	mov	r0, r6
 8005e58:	4639      	mov	r1, r7
 8005e5a:	f7fa f9b9 	bl	80001d0 <__aeabi_dsub>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8005e64:	e6b2      	b.n	8005bcc <expm1+0x64>
 8005e66:	bf00      	nop
 8005e68:	fefa39ef 	.word	0xfefa39ef
 8005e6c:	40862e42 	.word	0x40862e42
 8005e70:	8800759c 	.word	0x8800759c
 8005e74:	7e37e43c 	.word	0x7e37e43c
 8005e78:	c2f8f359 	.word	0xc2f8f359
 8005e7c:	01a56e1f 	.word	0x01a56e1f
 8005e80:	652b82fe 	.word	0x652b82fe
 8005e84:	3ff71547 	.word	0x3ff71547
 8005e88:	fee00000 	.word	0xfee00000
 8005e8c:	3fe62e42 	.word	0x3fe62e42
 8005e90:	35793c76 	.word	0x35793c76
 8005e94:	3dea39ef 	.word	0x3dea39ef
 8005e98:	6e09c32d 	.word	0x6e09c32d
 8005e9c:	be8afdb7 	.word	0xbe8afdb7
 8005ea0:	86e65239 	.word	0x86e65239
 8005ea4:	3ed0cfca 	.word	0x3ed0cfca
 8005ea8:	9eaadbb7 	.word	0x9eaadbb7
 8005eac:	3f14ce19 	.word	0x3f14ce19
 8005eb0:	19fe5585 	.word	0x19fe5585
 8005eb4:	3f5a01a0 	.word	0x3f5a01a0
 8005eb8:	111110f4 	.word	0x111110f4
 8005ebc:	3fa11111 	.word	0x3fa11111
 8005ec0:	35793c76 	.word	0x35793c76
 8005ec4:	bdea39ef 	.word	0xbdea39ef
 8005ec8:	40436879 	.word	0x40436879
 8005ecc:	40862e41 	.word	0x40862e41
 8005ed0:	7fefffff 	.word	0x7fefffff
 8005ed4:	bff00000 	.word	0xbff00000
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	3fd62e42 	.word	0x3fd62e42
 8005ee0:	3ff0a2b1 	.word	0x3ff0a2b1
 8005ee4:	3ff00000 	.word	0x3ff00000
 8005ee8:	40080000 	.word	0x40080000
 8005eec:	40180000 	.word	0x40180000
 8005ef0:	bfe00000 	.word	0xbfe00000
 8005ef4:	3c8fffff 	.word	0x3c8fffff
 8005ef8:	bfd00000 	.word	0xbfd00000
 8005efc:	4632      	mov	r2, r6
 8005efe:	463b      	mov	r3, r7
 8005f00:	4620      	mov	r0, r4
 8005f02:	4629      	mov	r1, r5
 8005f04:	f7fa f964 	bl	80001d0 <__aeabi_dsub>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	f7fa f962 	bl	80001d4 <__adddf3>
 8005f10:	2200      	movs	r2, #0
 8005f12:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <expm1+0x458>)
 8005f14:	e642      	b.n	8005b9c <expm1+0x34>
 8005f16:	f10a 0301 	add.w	r3, sl, #1
 8005f1a:	2b39      	cmp	r3, #57	; 0x39
 8005f1c:	ea4f 560a 	mov.w	r6, sl, lsl #20
 8005f20:	d90e      	bls.n	8005f40 <expm1+0x3d8>
 8005f22:	4622      	mov	r2, r4
 8005f24:	462b      	mov	r3, r5
 8005f26:	f7fa f953 	bl	80001d0 <__aeabi_dsub>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	2000      	movs	r0, #0
 8005f30:	4923      	ldr	r1, [pc, #140]	; (8005fc0 <expm1+0x458>)
 8005f32:	f7fa f94d 	bl	80001d0 <__aeabi_dsub>
 8005f36:	1873      	adds	r3, r6, r1
 8005f38:	4619      	mov	r1, r3
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4b20      	ldr	r3, [pc, #128]	; (8005fc0 <expm1+0x458>)
 8005f3e:	e74f      	b.n	8005de0 <expm1+0x278>
 8005f40:	f1ba 0f13 	cmp.w	sl, #19
 8005f44:	dc16      	bgt.n	8005f74 <expm1+0x40c>
 8005f46:	4622      	mov	r2, r4
 8005f48:	462b      	mov	r3, r5
 8005f4a:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8005f4e:	f7fa f93f 	bl	80001d0 <__aeabi_dsub>
 8005f52:	fa47 fa0a 	asr.w	sl, r7, sl
 8005f56:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4640      	mov	r0, r8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	f7fa f931 	bl	80001d0 <__aeabi_dsub>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	1875      	adds	r5, r6, r1
 8005f72:	e62f      	b.n	8005bd4 <expm1+0x6c>
 8005f74:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 8005f78:	f10a 0a03 	add.w	sl, sl, #3
 8005f7c:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8005f80:	2200      	movs	r2, #0
 8005f82:	f7fa f927 	bl	80001d4 <__adddf3>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	f7fa f91f 	bl	80001d0 <__aeabi_dsub>
 8005f92:	2200      	movs	r2, #0
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <expm1+0x458>)
 8005f96:	f7fa f91d 	bl	80001d4 <__adddf3>
 8005f9a:	e7e8      	b.n	8005f6e <expm1+0x406>
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	f6ff ae1e 	blt.w	8005bde <expm1+0x76>
 8005fa2:	a305      	add	r3, pc, #20	; (adr r3, 8005fb8 <expm1+0x450>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa fac8 	bl	8000540 <__aeabi_dmul>
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	e62d      	b.n	8005c10 <expm1+0xa8>
 8005fb4:	f3af 8000 	nop.w
 8005fb8:	652b82fe 	.word	0x652b82fe
 8005fbc:	3ff71547 	.word	0x3ff71547
 8005fc0:	3ff00000 	.word	0x3ff00000

08005fc4 <fabs>:
 8005fc4:	ec51 0b10 	vmov	r0, r1, d0
 8005fc8:	ee10 2a10 	vmov	r2, s0
 8005fcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fd0:	ec43 2b10 	vmov	d0, r2, r3
 8005fd4:	4770      	bx	lr
	...

08005fd8 <floor>:
 8005fd8:	ec51 0b10 	vmov	r0, r1, d0
 8005fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005fe4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005fe8:	2e13      	cmp	r6, #19
 8005fea:	460c      	mov	r4, r1
 8005fec:	ee10 5a10 	vmov	r5, s0
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	dc34      	bgt.n	800605e <floor+0x86>
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	da16      	bge.n	8006026 <floor+0x4e>
 8005ff8:	a335      	add	r3, pc, #212	; (adr r3, 80060d0 <floor+0xf8>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa f8e9 	bl	80001d4 <__adddf3>
 8006002:	2200      	movs	r2, #0
 8006004:	2300      	movs	r3, #0
 8006006:	f7fa fd2b 	bl	8000a60 <__aeabi_dcmpgt>
 800600a:	b148      	cbz	r0, 8006020 <floor+0x48>
 800600c:	2c00      	cmp	r4, #0
 800600e:	da59      	bge.n	80060c4 <floor+0xec>
 8006010:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006014:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <floor+0x100>)
 8006016:	432b      	orrs	r3, r5
 8006018:	2500      	movs	r5, #0
 800601a:	42ab      	cmp	r3, r5
 800601c:	bf18      	it	ne
 800601e:	4614      	movne	r4, r2
 8006020:	4621      	mov	r1, r4
 8006022:	4628      	mov	r0, r5
 8006024:	e025      	b.n	8006072 <floor+0x9a>
 8006026:	4f2d      	ldr	r7, [pc, #180]	; (80060dc <floor+0x104>)
 8006028:	4137      	asrs	r7, r6
 800602a:	ea01 0307 	and.w	r3, r1, r7
 800602e:	4303      	orrs	r3, r0
 8006030:	d01f      	beq.n	8006072 <floor+0x9a>
 8006032:	a327      	add	r3, pc, #156	; (adr r3, 80060d0 <floor+0xf8>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa f8cc 	bl	80001d4 <__adddf3>
 800603c:	2200      	movs	r2, #0
 800603e:	2300      	movs	r3, #0
 8006040:	f7fa fd0e 	bl	8000a60 <__aeabi_dcmpgt>
 8006044:	2800      	cmp	r0, #0
 8006046:	d0eb      	beq.n	8006020 <floor+0x48>
 8006048:	2c00      	cmp	r4, #0
 800604a:	bfbe      	ittt	lt
 800604c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006050:	fa43 f606 	asrlt.w	r6, r3, r6
 8006054:	19a4      	addlt	r4, r4, r6
 8006056:	ea24 0407 	bic.w	r4, r4, r7
 800605a:	2500      	movs	r5, #0
 800605c:	e7e0      	b.n	8006020 <floor+0x48>
 800605e:	2e33      	cmp	r6, #51	; 0x33
 8006060:	dd0b      	ble.n	800607a <floor+0xa2>
 8006062:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006066:	d104      	bne.n	8006072 <floor+0x9a>
 8006068:	ee10 2a10 	vmov	r2, s0
 800606c:	460b      	mov	r3, r1
 800606e:	f7fa f8b1 	bl	80001d4 <__adddf3>
 8006072:	ec41 0b10 	vmov	d0, r0, r1
 8006076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
 8006082:	fa23 f707 	lsr.w	r7, r3, r7
 8006086:	4207      	tst	r7, r0
 8006088:	d0f3      	beq.n	8006072 <floor+0x9a>
 800608a:	a311      	add	r3, pc, #68	; (adr r3, 80060d0 <floor+0xf8>)
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f7fa f8a0 	bl	80001d4 <__adddf3>
 8006094:	2200      	movs	r2, #0
 8006096:	2300      	movs	r3, #0
 8006098:	f7fa fce2 	bl	8000a60 <__aeabi_dcmpgt>
 800609c:	2800      	cmp	r0, #0
 800609e:	d0bf      	beq.n	8006020 <floor+0x48>
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	da02      	bge.n	80060aa <floor+0xd2>
 80060a4:	2e14      	cmp	r6, #20
 80060a6:	d103      	bne.n	80060b0 <floor+0xd8>
 80060a8:	3401      	adds	r4, #1
 80060aa:	ea25 0507 	bic.w	r5, r5, r7
 80060ae:	e7b7      	b.n	8006020 <floor+0x48>
 80060b0:	2301      	movs	r3, #1
 80060b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80060b6:	fa03 f606 	lsl.w	r6, r3, r6
 80060ba:	4435      	add	r5, r6
 80060bc:	4545      	cmp	r5, r8
 80060be:	bf38      	it	cc
 80060c0:	18e4      	addcc	r4, r4, r3
 80060c2:	e7f2      	b.n	80060aa <floor+0xd2>
 80060c4:	2500      	movs	r5, #0
 80060c6:	462c      	mov	r4, r5
 80060c8:	e7aa      	b.n	8006020 <floor+0x48>
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w
 80060d0:	8800759c 	.word	0x8800759c
 80060d4:	7e37e43c 	.word	0x7e37e43c
 80060d8:	bff00000 	.word	0xbff00000
 80060dc:	000fffff 	.word	0x000fffff

080060e0 <scalbn>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	ec55 4b10 	vmov	r4, r5, d0
 80060e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80060ea:	4606      	mov	r6, r0
 80060ec:	462b      	mov	r3, r5
 80060ee:	b9aa      	cbnz	r2, 800611c <scalbn+0x3c>
 80060f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80060f4:	4323      	orrs	r3, r4
 80060f6:	d03b      	beq.n	8006170 <scalbn+0x90>
 80060f8:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <scalbn+0xe0>)
 80060fa:	4629      	mov	r1, r5
 80060fc:	2200      	movs	r2, #0
 80060fe:	ee10 0a10 	vmov	r0, s0
 8006102:	f7fa fa1d 	bl	8000540 <__aeabi_dmul>
 8006106:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <scalbn+0xe4>)
 8006108:	429e      	cmp	r6, r3
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	da12      	bge.n	8006136 <scalbn+0x56>
 8006110:	a327      	add	r3, pc, #156	; (adr r3, 80061b0 <scalbn+0xd0>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fa fa13 	bl	8000540 <__aeabi_dmul>
 800611a:	e009      	b.n	8006130 <scalbn+0x50>
 800611c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006120:	428a      	cmp	r2, r1
 8006122:	d10c      	bne.n	800613e <scalbn+0x5e>
 8006124:	ee10 2a10 	vmov	r2, s0
 8006128:	4620      	mov	r0, r4
 800612a:	4629      	mov	r1, r5
 800612c:	f7fa f852 	bl	80001d4 <__adddf3>
 8006130:	4604      	mov	r4, r0
 8006132:	460d      	mov	r5, r1
 8006134:	e01c      	b.n	8006170 <scalbn+0x90>
 8006136:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800613a:	460b      	mov	r3, r1
 800613c:	3a36      	subs	r2, #54	; 0x36
 800613e:	4432      	add	r2, r6
 8006140:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006144:	428a      	cmp	r2, r1
 8006146:	dd0b      	ble.n	8006160 <scalbn+0x80>
 8006148:	ec45 4b11 	vmov	d1, r4, r5
 800614c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80061b8 <scalbn+0xd8>
 8006150:	f000 f83c 	bl	80061cc <copysign>
 8006154:	a318      	add	r3, pc, #96	; (adr r3, 80061b8 <scalbn+0xd8>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	ec51 0b10 	vmov	r0, r1, d0
 800615e:	e7da      	b.n	8006116 <scalbn+0x36>
 8006160:	2a00      	cmp	r2, #0
 8006162:	dd08      	ble.n	8006176 <scalbn+0x96>
 8006164:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006168:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800616c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006170:	ec45 4b10 	vmov	d0, r4, r5
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800617a:	da0d      	bge.n	8006198 <scalbn+0xb8>
 800617c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006180:	429e      	cmp	r6, r3
 8006182:	ec45 4b11 	vmov	d1, r4, r5
 8006186:	dce1      	bgt.n	800614c <scalbn+0x6c>
 8006188:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80061b0 <scalbn+0xd0>
 800618c:	f000 f81e 	bl	80061cc <copysign>
 8006190:	a307      	add	r3, pc, #28	; (adr r3, 80061b0 <scalbn+0xd0>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	e7e0      	b.n	800615a <scalbn+0x7a>
 8006198:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800619c:	3236      	adds	r2, #54	; 0x36
 800619e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	2200      	movs	r2, #0
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <scalbn+0xe8>)
 80061ae:	e7b2      	b.n	8006116 <scalbn+0x36>
 80061b0:	c2f8f359 	.word	0xc2f8f359
 80061b4:	01a56e1f 	.word	0x01a56e1f
 80061b8:	8800759c 	.word	0x8800759c
 80061bc:	7e37e43c 	.word	0x7e37e43c
 80061c0:	43500000 	.word	0x43500000
 80061c4:	ffff3cb0 	.word	0xffff3cb0
 80061c8:	3c900000 	.word	0x3c900000

080061cc <copysign>:
 80061cc:	ec51 0b10 	vmov	r0, r1, d0
 80061d0:	ee11 0a90 	vmov	r0, s3
 80061d4:	ee10 2a10 	vmov	r2, s0
 80061d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80061dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80061e0:	ea41 0300 	orr.w	r3, r1, r0
 80061e4:	ec43 2b10 	vmov	d0, r2, r3
 80061e8:	4770      	bx	lr
	...

080061ec <_init>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	bf00      	nop
 80061f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f2:	bc08      	pop	{r3}
 80061f4:	469e      	mov	lr, r3
 80061f6:	4770      	bx	lr

080061f8 <_fini>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr
