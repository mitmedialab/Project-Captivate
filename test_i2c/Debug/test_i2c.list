
test_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f70  08003f70  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003f70  08003f70  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f70  08003f70  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000020  08003f98  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003f98  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d266  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021cc  00000000  00000000  0002d2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002f488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002fec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000126c9  00000000  00000000  000307d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b144  00000000  00000000  00042e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006888e  00000000  00000000  0004dfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b686b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027dc  00000000  00000000  000b68e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f28 	.word	0x08003f28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08003f28 	.word	0x08003f28

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	463b      	mov	r3, r7
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
 80001dc:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001de:	4b36      	ldr	r3, [pc, #216]	; (80002b8 <MX_ADC1_Init+0xf0>)
 80001e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80001e6:	4b34      	ldr	r3, [pc, #208]	; (80002b8 <MX_ADC1_Init+0xf0>)
 80001e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001ee:	4b32      	ldr	r3, [pc, #200]	; (80002b8 <MX_ADC1_Init+0xf0>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <MX_ADC1_Init+0xf0>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001fa:	4b2f      	ldr	r3, [pc, #188]	; (80002b8 <MX_ADC1_Init+0xf0>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000200:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000208:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <MX_ADC1_Init+0xf0>)
 800020a:	2200      	movs	r2, #0
 800020c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800020e:	4b2a      	ldr	r3, [pc, #168]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000210:	2201      	movs	r2, #1
 8000212:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000214:	4b28      	ldr	r3, [pc, #160]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000216:	2200      	movs	r2, #0
 8000218:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800021a:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <MX_ADC1_Init+0xf0>)
 800021c:	2203      	movs	r2, #3
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000220:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000222:	2201      	movs	r2, #1
 8000224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000228:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <MX_ADC1_Init+0xf0>)
 800022a:	2208      	movs	r2, #8
 800022c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800022e:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000230:	2200      	movs	r2, #0
 8000232:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000234:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000236:	2201      	movs	r2, #1
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800023a:	481f      	ldr	r0, [pc, #124]	; (80002b8 <MX_ADC1_Init+0xf0>)
 800023c:	f000 fbba 	bl	80009b4 <HAL_ADC_Init>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000246:	f000 fa75 	bl	8000734 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800024a:	2303      	movs	r3, #3
 800024c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800024e:	2301      	movs	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000256:	2305      	movs	r3, #5
 8000258:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000262:	463b      	mov	r3, r7
 8000264:	4619      	mov	r1, r3
 8000266:	4814      	ldr	r0, [pc, #80]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000268:	f000 ff76 	bl	8001158 <HAL_ADC_ConfigChannel>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000272:	f000 fa5f 	bl	8000734 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000276:	2304      	movs	r3, #4
 8000278:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800027a:	2302      	movs	r3, #2
 800027c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	463b      	mov	r3, r7
 8000280:	4619      	mov	r1, r3
 8000282:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_ADC1_Init+0xf0>)
 8000284:	f000 ff68 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800028e:	f000 fa51 	bl	8000734 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000292:	230b      	movs	r3, #11
 8000294:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000296:	2303      	movs	r3, #3
 8000298:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	463b      	mov	r3, r7
 800029c:	4619      	mov	r1, r3
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <MX_ADC1_Init+0xf0>)
 80002a0:	f000 ff5a 	bl	8001158 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80002aa:	f000 fa43 	bl	8000734 <Error_Handler>
  }

}
 80002ae:	bf00      	nop
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000040 	.word	0x20000040

080002bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002dc:	d16c      	bne.n	80003b8 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002de:	4b38      	ldr	r3, [pc, #224]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a37      	ldr	r2, [pc, #220]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 80002e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b35      	ldr	r3, [pc, #212]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a31      	ldr	r2, [pc, #196]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 80002fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	4b2c      	ldr	r3, [pc, #176]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a2b      	ldr	r2, [pc, #172]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 8000314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <HAL_ADC_MspInit+0x104>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000326:	230c      	movs	r3, #12
 8000328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032a:	2303      	movs	r3, #3
 800032c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	4619      	mov	r1, r3
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f001 fd9c 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000340:	2301      	movs	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000344:	2303      	movs	r3, #3
 8000346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	4619      	mov	r1, r3
 8000352:	481c      	ldr	r0, [pc, #112]	; (80003c4 <HAL_ADC_MspInit+0x108>)
 8000354:	f001 fd90 	bl	8001e78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <HAL_ADC_MspInit+0x110>)
 800035c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 8000372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000376:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 800037a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800037e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800038c:	480e      	ldr	r0, [pc, #56]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 800038e:	f001 fbe8 	bl	8001b62 <HAL_DMA_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000398:	f000 f9cc 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 80003a0:	639a      	str	r2, [r3, #56]	; 0x38
 80003a2:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <HAL_ADC_MspInit+0x10c>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2012      	movs	r0, #18
 80003ae:	f001 fb94 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80003b2:	2012      	movs	r0, #18
 80003b4:	f001 fbad 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003b8:	bf00      	nop
 80003ba:	3728      	adds	r7, #40	; 0x28
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	48000400 	.word	0x48000400
 80003c8:	20000090 	.word	0x20000090
 80003cc:	40020008 	.word	0x40020008

080003d0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003e0:	d116      	bne.n	8000410 <HAL_ADC_MspDeInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <HAL_ADC_MspDeInit+0x48>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <HAL_ADC_MspDeInit+0x48>)
 80003e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80003ec:	6153      	str	r3, [r2, #20]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80003ee:	210c      	movs	r1, #12
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f001 feb2 	bl	800215c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
 80003f8:	2101      	movs	r1, #1
 80003fa:	4808      	ldr	r0, [pc, #32]	; (800041c <HAL_ADC_MspDeInit+0x4c>)
 80003fc:	f001 feae 	bl	800215c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000404:	4618      	mov	r0, r3
 8000406:	f001 fbf3 	bl	8001bf0 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 800040a:	2012      	movs	r0, #18
 800040c:	f001 fb8f 	bl	8001b2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
} 
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	48000400 	.word	0x48000400

08000420 <HAL_ADC_ConvCpltCallback>:
//}


volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
//	HAL_ADC_Stop_DMA(&hadc1);
	complete++;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <HAL_ADC_ConvCpltCallback+0x24>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	3301      	adds	r3, #1
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <HAL_ADC_ConvCpltCallback+0x24>)
 8000434:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8000436:	4804      	ldr	r0, [pc, #16]	; (8000448 <HAL_ADC_ConvCpltCallback+0x28>)
 8000438:	f000 fc42 	bl	8000cc0 <HAL_ADC_Stop_DMA>
//
//	// notify ThermopileTask that conversion is complete
//	diodeSamplesPtr = &(diodeSamples[HALF_DIODE_SAMPLES]);
//	osThreadFlagsSet(cameraDetectionTaskHandle, 0x00000004U);

}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000003c 	.word	0x2000003c
 8000448:	20000040 	.word	0x20000040

0800044c <HAL_ADC_ErrorCallback>:

}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  i++;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_ADC_ErrorCallback+0x24>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	3301      	adds	r3, #1
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <HAL_ADC_ErrorCallback+0x24>)
 8000460:	701a      	strb	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	2000003d 	.word	0x2000003d

08000474 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_DMA_Init+0x38>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <MX_DMA_Init+0x38>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_DMA_Init+0x38>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	200b      	movs	r0, #11
 8000498:	f001 fb1f 	bl	8001ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800049c:	200b      	movs	r0, #11
 800049e:	f001 fb38 	bl	8001b12 <HAL_NVIC_EnableIRQ>

}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_GPIO_Init+0x44>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <MX_GPIO_Init+0x44>)
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_GPIO_Init+0x44>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_GPIO_Init+0x44>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <MX_GPIO_Init+0x44>)
 80004d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_GPIO_Init+0x44>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_I2C1_Init+0x74>)
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <MX_I2C1_Init+0x78>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301D29;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_I2C1_Init+0x74>)
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <MX_I2C1_Init+0x7c>)
 8000506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_I2C1_Init+0x74>)
 800050a:	22f0      	movs	r2, #240	; 0xf0
 800050c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_I2C1_Init+0x74>)
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_I2C1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_I2C1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_I2C1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_I2C1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <MX_I2C1_Init+0x74>)
 8000534:	f001 fee4 	bl	8002300 <HAL_I2C_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800053e:	f000 f8f9 	bl	8000734 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000542:	2100      	movs	r1, #0
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <MX_I2C1_Init+0x74>)
 8000546:	f002 f9b9 	bl	80028bc <HAL_I2CEx_ConfigAnalogFilter>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000550:	f000 f8f0 	bl	8000734 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000554:	2100      	movs	r1, #0
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_I2C1_Init+0x74>)
 8000558:	f002 f9fb 	bl	8002952 <HAL_I2CEx_ConfigDigitalFilter>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 f8e7 	bl	8000734 <Error_Handler>
  }

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000d4 	.word	0x200000d4
 8000570:	40005400 	.word	0x40005400
 8000574:	00301d29 	.word	0x00301d29

08000578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <HAL_I2C_MspInit+0xb8>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d145      	bne.n	8000626 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a25      	ldr	r2, [pc, #148]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 80005b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d0:	2312      	movs	r3, #18
 80005d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005dc:	2304      	movs	r3, #4
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 fc45 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f2:	2312      	movs	r3, #18
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fa:	2303      	movs	r3, #3
 80005fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005fe:	2304      	movs	r3, #4
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <HAL_I2C_MspInit+0xc0>)
 800060a:	f001 fc35 	bl	8001e78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 8000614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_I2C_MspInit+0xbc>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	; 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40005400 	.word	0x40005400
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 f926 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f826 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff32 	bl	80004b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800064c:	f7ff ff54 	bl	80004f8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000650:	f7ff fdba 	bl	80001c8 <MX_ADC1_Init>
  MX_DMA_Init();
 8000654:	f7ff ff0e 	bl	8000474 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  // DMA error correction since above, DMA fails at linking to ADC because
  HAL_ADC_MspDeInit(&hadc1);
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <main+0x4c>)
 800065a:	f7ff feb9 	bl	80003d0 <HAL_ADC_MspDeInit>
  HAL_ADC_MspInit(&hadc1);
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <main+0x4c>)
 8000660:	f7ff fe2c 	bl	80002bc <HAL_ADC_MspInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), 10000)!= HAL_OK)
 8000664:	f242 7310 	movw	r3, #10000	; 0x2710
 8000668:	2214      	movs	r2, #20
 800066a:	4908      	ldr	r1, [pc, #32]	; (800068c <main+0x50>)
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <main+0x54>)
 800066e:	f001 fed6 	bl	800241e <HAL_I2C_Slave_Transmit>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0x40>
	  {
	    /* Transfer error in transmission process */
	    Error_Handler();
 8000678:	f000 f85c 	bl	8000734 <Error_Handler>
	  }
	  HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f000 f96c 	bl	800095c <HAL_Delay>
	  if(HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), 10000)!= HAL_OK)
 8000684:	e7ee      	b.n	8000664 <main+0x28>
 8000686:	bf00      	nop
 8000688:	20000040 	.word	0x20000040
 800068c:	20000000 	.word	0x20000000
 8000690:	200000d4 	.word	0x200000d4

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09c      	sub	sp, #112	; 0x70
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fc38 	bl	8003f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fc2a 	bl	8003f18 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f987 	bl	80029ec <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80006e4:	f000 f826 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f87a 	bl	80037fc <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800070e:	f000 f811 	bl	8000734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000712:	2320      	movs	r3, #32
 8000714:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fa53 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000728:	f000 f804 	bl	8000734 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	; 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x44>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x44>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x44>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_MspInit+0x44>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_MspInit+0x44>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_MspInit+0x44>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f89c 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <DMA1_Channel1_IRQHandler+0x10>)
 80007ee:	f001 fa80 	bl	8001cf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000090 	.word	0x20000090

080007fc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <ADC1_IRQHandler+0x10>)
 8000802:	f000 fab9 	bl	8000d78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000040 	.word	0x20000040

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <SystemInit+0x28>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a07      	ldr	r2, [pc, #28]	; (8000838 <SystemInit+0x28>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SystemInit+0x28>)
 8000826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800082a:	609a      	str	r2, [r3, #8]
#endif
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000840:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000842:	e003      	b.n	800084c <LoopCopyDataInit>

08000844 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000846:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000848:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800084a:	3104      	adds	r1, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <LoopForever+0xa>)
	ldr	r3, =_edata
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000850:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000852:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000854:	d3f6      	bcc.n	8000844 <CopyDataInit>
	ldr	r2, =_sbss
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000858:	e002      	b.n	8000860 <LoopFillZerobss>

0800085a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800085a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800085c:	f842 3b04 	str.w	r3, [r2], #4

08000860 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <LoopForever+0x16>)
	cmp	r2, r3
 8000862:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000864:	d3f9      	bcc.n	800085a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ffd3 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f003 fb31 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fee5 	bl	800063c <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000874:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000878:	08003f78 	.word	0x08003f78
	ldr	r0, =_sdata
 800087c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000880:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8000884:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8000888:	20000124 	.word	0x20000124

0800088c <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <COMP2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x28>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x28>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f001 f90f 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff ff4a 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f935 	bl	8001b4a <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f001 f8ef 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000014 	.word	0x20000014
 8000914:	2000001c 	.word	0x2000001c
 8000918:	20000018 	.word	0x20000018

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000001c 	.word	0x2000001c
 8000940:	20000120 	.word	0x20000120

08000944 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;  
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000120 	.word	0x20000120

0800095c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff ffee 	bl	8000944 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_Delay+0x40>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffde 	bl	8000944 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000001c 	.word	0x2000001c

080009a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09a      	sub	sp, #104	; 0x68
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009c2:	2300      	movs	r3, #0
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e169      	b.n	8000ca8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d176      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d152      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fc57 	bl	80002bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d13b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 fe51 	bl	80016c4 <ADC_Disable>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12f      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	f043 0202 	orr.w	r2, r3, #2
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a5e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a70:	4b8f      	ldr	r3, [pc, #572]	; (8000cb0 <HAL_ADC_Init+0x2fc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a8f      	ldr	r2, [pc, #572]	; (8000cb4 <HAL_ADC_Init+0x300>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9a      	lsrs	r2, r3, #18
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a86:	e002      	b.n	8000a8e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f9      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab0:	d110      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f023 0312 	bic.w	r3, r3, #18
 8000aba:	f043 0210 	orr.w	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f043 0201 	orr.w	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f040 80d6 	bne.w	8000c8e <HAL_ADC_Init+0x2da>
 8000ae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 80d1 	bne.w	8000c8e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 80c9 	bne.w	8000c8e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b04:	f043 0202 	orr.w	r2, r3, #2
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b0c:	4b6a      	ldr	r3, [pc, #424]	; (8000cb8 <HAL_ADC_Init+0x304>)
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d108      	bne.n	8000b34 <HAL_ADC_Init+0x180>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <HAL_ADC_Init+0x180>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <HAL_ADC_Init+0x182>
 8000b34:	2300      	movs	r3, #0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d11c      	bne.n	8000b74 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d010      	beq.n	8000b62 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d107      	bne.n	8000b5c <HAL_ADC_Init+0x1a8>
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d101      	bne.n	8000b5c <HAL_ADC_Init+0x1a8>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_ADC_Init+0x1aa>
 8000b5c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d108      	bne.n	8000b74 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b72:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7e5b      	ldrb	r3, [r3, #25]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b7e:	2a01      	cmp	r2, #1
 8000b80:	d002      	beq.n	8000b88 <HAL_ADC_Init+0x1d4>
 8000b82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b86:	e000      	b.n	8000b8a <HAL_ADC_Init+0x1d6>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d11b      	bne.n	8000be0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7e5b      	ldrb	r3, [r3, #25]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	045a      	lsls	r2, r3, #17
 8000bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8000bc2:	e00d      	b.n	8000be0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000bcc:	f043 0220 	orr.w	r2, r3, #32
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd8:	f043 0201 	orr.w	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d007      	beq.n	8000bf8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d114      	bne.n	8000c30 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c14:	f023 0302 	bic.w	r3, r3, #2
 8000c18:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7e1b      	ldrb	r3, [r3, #24]
 8000c1e:	039a      	lsls	r2, r3, #14
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_ADC_Init+0x308>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c40:	430b      	orrs	r3, r1
 8000c42:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10c      	bne.n	8000c66 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f023 010f 	bic.w	r1, r3, #15
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	631a      	str	r2, [r3, #48]	; 0x30
 8000c64:	e007      	b.n	8000c76 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 020f 	bic.w	r2, r2, #15
 8000c74:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f023 0303 	bic.w	r3, r3, #3
 8000c84:	f043 0201 	orr.w	r2, r3, #1
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c8c:	e00a      	b.n	8000ca4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f023 0312 	bic.w	r3, r3, #18
 8000c96:	f043 0210 	orr.w	r2, r3, #16
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ca4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3768      	adds	r7, #104	; 0x68
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000014 	.word	0x20000014
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	50000300 	.word	0x50000300
 8000cbc:	fff0c007 	.word	0xfff0c007

08000cc0 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Stop_DMA+0x1a>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e04a      	b.n	8000d70 <HAL_ADC_Stop_DMA+0xb0>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000ce2:	216c      	movs	r1, #108	; 0x6c
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 fd4d 	bl	8001784 <ADC_ConversionStop>
 8000cea:	4603      	mov	r3, r0
 8000cec:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d138      	bne.n	8000d66 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0201 	bic.w	r2, r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 ffb9 	bl	8001c80 <HAL_DMA_Abort>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0210 	bic.w	r2, r2, #16
 8000d32:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d105      	bne.n	8000d46 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 fcc2 	bl	80016c4 <ADC_Disable>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e002      	b.n	8000d4c <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 fcbc 	bl	80016c4 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	f043 0201 	orr.w	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d106      	bne.n	8000da8 <HAL_ADC_IRQHandler+0x30>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d00d      	beq.n	8000dc4 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d15e      	bne.n	8000e74 <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d157      	bne.n	8000e74 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d105      	bne.n	8000ddc <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d139      	bne.n	8000e66 <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d134      	bne.n	8000e66 <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d12d      	bne.n	8000e66 <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11a      	bne.n	8000e4e <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 020c 	bic.w	r2, r2, #12
 8000e26:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d112      	bne.n	8000e66 <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f043 0201 	orr.w	r2, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e4c:	e00b      	b.n	8000e66 <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f043 0210 	orr.w	r2, r3, #16
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f043 0201 	orr.w	r2, r3, #1
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fada 	bl	8000420 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	220c      	movs	r2, #12
 8000e72:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	2b20      	cmp	r3, #32
 8000e80:	d106      	bne.n	8000e90 <HAL_ADC_IRQHandler+0x118>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	d00d      	beq.n	8000eac <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000e9a:	2b40      	cmp	r3, #64	; 0x40
 8000e9c:	d16d      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea8:	2b40      	cmp	r3, #64	; 0x40
 8000eaa:	d166      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d010      	beq.n	8000ef0 <HAL_ADC_IRQHandler+0x178>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d149      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x1f4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d142      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x1f4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d13d      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x1f4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efa:	2b40      	cmp	r3, #64	; 0x40
 8000efc:	d136      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x1f4>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d12d      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x1f4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11a      	bne.n	8000f54 <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000f2c:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d112      	bne.n	8000f6c <HAL_ADC_IRQHandler+0x1f4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
 8000f52:	e00b      	b.n	8000f6c <HAL_ADC_IRQHandler+0x1f4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f043 0210 	orr.w	r2, r3, #16
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f8cb 	bl	8001108 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2260      	movs	r2, #96	; 0x60
 8000f78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f84:	2b80      	cmp	r3, #128	; 0x80
 8000f86:	d113      	bne.n	8000fb0 <HAL_ADC_IRQHandler+0x238>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	2b80      	cmp	r3, #128	; 0x80
 8000f94:	d10c      	bne.n	8000fb0 <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fcfc 	bl	80009a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fbe:	d115      	bne.n	8000fec <HAL_ADC_IRQHandler+0x274>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fce:	d10d      	bne.n	8000fec <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f8a7 	bl	8001130 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fea:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ffa:	d115      	bne.n	8001028 <HAL_ADC_IRQHandler+0x2b0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800100a:	d10d      	bne.n	8001028 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f893 	bl	8001144 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b10      	cmp	r3, #16
 8001034:	d13d      	bne.n	80010b2 <HAL_ADC_IRQHandler+0x33a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	2b10      	cmp	r3, #16
 8001042:	d136      	bne.n	80010b2 <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	2b01      	cmp	r3, #1
 800104a:	d102      	bne.n	8001052 <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e019      	b.n	8001086 <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001052:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <HAL_ADC_IRQHandler+0x38c>)
 8001054:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10a      	bne.n	8001086 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001070:	2301      	movs	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e007      	b.n	8001086 <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001082:	2301      	movs	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10e      	bne.n	80010aa <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f043 0202 	orr.w	r2, r3, #2
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff f9d1 	bl	800044c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2210      	movs	r2, #16
 80010b0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c0:	d11b      	bne.n	80010fa <HAL_ADC_IRQHandler+0x382>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d0:	d113      	bne.n	80010fa <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f043 0208 	orr.w	r2, r3, #8
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f811 	bl	800111c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	50000300 	.word	0x50000300

08001108 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001158:	b480      	push	{r7}
 800115a:	b09b      	sub	sp, #108	; 0x6c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_ConfigChannel+0x22>
 8001176:	2302      	movs	r3, #2
 8001178:	e299      	b.n	80016ae <HAL_ADC_ConfigChannel+0x556>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 827d 	bne.w	800168c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d81c      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	461a      	mov	r2, r3
 80011ae:	231f      	movs	r3, #31
 80011b0:	4093      	lsls	r3, r2
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4019      	ands	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
 80011d2:	e063      	b.n	800129c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b09      	cmp	r3, #9
 80011da:	d81e      	bhi.n	800121a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	3b1e      	subs	r3, #30
 80011f0:	221f      	movs	r2, #31
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	4019      	ands	r1, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	3b1e      	subs	r3, #30
 800120c:	fa00 f203 	lsl.w	r2, r0, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
 8001218:	e040      	b.n	800129c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b0e      	cmp	r3, #14
 8001220:	d81e      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	3b3c      	subs	r3, #60	; 0x3c
 8001236:	221f      	movs	r2, #31
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	4019      	ands	r1, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	3b3c      	subs	r3, #60	; 0x3c
 8001252:	fa00 f203 	lsl.w	r2, r0, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	639a      	str	r2, [r3, #56]	; 0x38
 800125e:	e01d      	b.n	800129c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	3b5a      	subs	r3, #90	; 0x5a
 8001274:	221f      	movs	r2, #31
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	4019      	ands	r1, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	3b5a      	subs	r3, #90	; 0x5a
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 80e5 	bne.w	8001476 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d91c      	bls.n	80012ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6999      	ldr	r1, [r3, #24]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	3b1e      	subs	r3, #30
 80012c6:	2207      	movs	r2, #7
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6898      	ldr	r0, [r3, #8]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	3b1e      	subs	r3, #30
 80012e0:	fa00 f203 	lsl.w	r2, r0, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	e019      	b.n	8001322 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6959      	ldr	r1, [r3, #20]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	2207      	movs	r2, #7
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	4019      	ands	r1, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6898      	ldr	r0, [r3, #8]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	3b01      	subs	r3, #1
 8001340:	2b03      	cmp	r3, #3
 8001342:	d84f      	bhi.n	80013e4 <HAL_ADC_ConfigChannel+0x28c>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <HAL_ADC_ConfigChannel+0x1f4>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	0800135d 	.word	0x0800135d
 8001350:	0800137f 	.word	0x0800137f
 8001354:	080013a1 	.word	0x080013a1
 8001358:	080013c3 	.word	0x080013c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001362:	4b99      	ldr	r3, [pc, #612]	; (80015c8 <HAL_ADC_ConfigChannel+0x470>)
 8001364:	4013      	ands	r3, r2
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	0691      	lsls	r1, r2, #26
 800136c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800136e:	430a      	orrs	r2, r1
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800137a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800137c:	e07e      	b.n	800147c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001384:	4b90      	ldr	r3, [pc, #576]	; (80015c8 <HAL_ADC_ConfigChannel+0x470>)
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	0691      	lsls	r1, r2, #26
 800138e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001390:	430a      	orrs	r2, r1
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800139c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800139e:	e06d      	b.n	800147c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013a6:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_ADC_ConfigChannel+0x470>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	0691      	lsls	r1, r2, #26
 80013b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013b2:	430a      	orrs	r2, r1
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013be:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013c0:	e05c      	b.n	800147c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013c8:	4b7f      	ldr	r3, [pc, #508]	; (80015c8 <HAL_ADC_ConfigChannel+0x470>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	0691      	lsls	r1, r2, #26
 80013d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013d4:	430a      	orrs	r2, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013e0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013e2:	e04b      	b.n	800147c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	069b      	lsls	r3, r3, #26
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d107      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001406:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800140e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	069b      	lsls	r3, r3, #26
 8001418:	429a      	cmp	r2, r3
 800141a:	d107      	bne.n	800142c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800142a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001432:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	069b      	lsls	r3, r3, #26
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800144e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	069b      	lsls	r3, r3, #26
 8001460:	429a      	cmp	r2, r3
 8001462:	d10a      	bne.n	800147a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001472:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001474:	e001      	b.n	800147a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001476:	bf00      	nop
 8001478:	e000      	b.n	800147c <HAL_ADC_ConfigChannel+0x324>
      break;
 800147a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d108      	bne.n	800149c <HAL_ADC_ConfigChannel+0x344>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_ADC_ConfigChannel+0x344>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_ADC_ConfigChannel+0x346>
 800149c:	2300      	movs	r3, #0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 80ff 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d00f      	beq.n	80014cc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80014ca:	e049      	b.n	8001560 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2201      	movs	r2, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b09      	cmp	r3, #9
 80014ec:	d91c      	bls.n	8001528 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6999      	ldr	r1, [r3, #24]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	3b1b      	subs	r3, #27
 8001500:	2207      	movs	r2, #7
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	4019      	ands	r1, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6898      	ldr	r0, [r3, #8]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	3b1b      	subs	r3, #27
 800151a:	fa00 f203 	lsl.w	r2, r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	619a      	str	r2, [r3, #24]
 8001526:	e01b      	b.n	8001560 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6959      	ldr	r1, [r3, #20]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	2207      	movs	r2, #7
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	4019      	ands	r1, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6898      	ldr	r0, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	fa00 f203 	lsl.w	r2, r0, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_ADC_ConfigChannel+0x474>)
 8001562:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b10      	cmp	r3, #16
 800156a:	d105      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800156c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001574:	2b00      	cmp	r3, #0
 8001576:	d014      	beq.n	80015a2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800157c:	2b11      	cmp	r3, #17
 800157e:	d105      	bne.n	800158c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00a      	beq.n	80015a2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001590:	2b12      	cmp	r3, #18
 8001592:	f040 8086 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d17f      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10d      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x478>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x478>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e005      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x47a>
 80015c6:	bf00      	nop
 80015c8:	83fff000 	.word	0x83fff000
 80015cc:	50000300 	.word	0x50000300
 80015d0:	2300      	movs	r3, #0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d150      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d010      	beq.n	80015fe <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x4a0>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x4a0>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_ADC_ConfigChannel+0x4a2>
 80015f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d13c      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d11d      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x4ea>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800160e:	d118      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800161a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_ADC_ConfigChannel+0x564>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_ADC_ConfigChannel+0x568>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001632:	e002      	b.n	800163a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3b01      	subs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001640:	e02e      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b11      	cmp	r3, #17
 8001648:	d10b      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x50a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001652:	d106      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800165c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001660:	e01e      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b12      	cmp	r3, #18
 8001668:	d11a      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800166a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001674:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001676:	e013      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f043 0220 	orr.w	r2, r3, #32
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800168a:	e00a      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f043 0220 	orr.w	r2, r3, #32
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800169e:	e000      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	376c      	adds	r7, #108	; 0x6c
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000014 	.word	0x20000014
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <ADC_Disable+0x2c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <ADC_Disable+0x2c>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <ADC_Disable+0x2e>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d040      	beq.n	8001778 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030d 	and.w	r3, r3, #13
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10f      	bne.n	8001724 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0202 	orr.w	r2, r2, #2
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2203      	movs	r2, #3
 800171a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800171c:	f7ff f912 	bl	8000944 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001722:	e022      	b.n	800176a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e01c      	b.n	800177a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001740:	f7ff f900 	bl	8000944 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d90d      	bls.n	800176a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f043 0210 	orr.w	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e007      	b.n	800177a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d0e3      	beq.n	8001740 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8093 	beq.w	80018d0 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017b8:	d12a      	bne.n	8001810 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d126      	bne.n	8001810 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d122      	bne.n	8001810 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80017ca:	230c      	movs	r3, #12
 80017cc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80017ce:	e014      	b.n	80017fa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4a42      	ldr	r2, [pc, #264]	; (80018dc <ADC_ConversionStop+0x158>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d90d      	bls.n	80017f4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f043 0210 	orr.w	r2, r3, #16
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e06e      	b.n	80018d2 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3301      	adds	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d1e3      	bne.n	80017d0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b60      	cmp	r3, #96	; 0x60
 8001814:	d015      	beq.n	8001842 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b04      	cmp	r3, #4
 8001822:	d10e      	bne.n	8001842 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800182e:	2b00      	cmp	r3, #0
 8001830:	d107      	bne.n	8001842 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0210 	orr.w	r2, r2, #16
 8001840:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d015      	beq.n	8001874 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b08      	cmp	r3, #8
 8001854:	d10e      	bne.n	8001874 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b60      	cmp	r3, #96	; 0x60
 8001878:	d004      	beq.n	8001884 <ADC_ConversionStop+0x100>
 800187a:	2b6c      	cmp	r3, #108	; 0x6c
 800187c:	d105      	bne.n	800188a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800187e:	230c      	movs	r3, #12
 8001880:	617b      	str	r3, [r7, #20]
        break;
 8001882:	e005      	b.n	8001890 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001884:	2308      	movs	r3, #8
 8001886:	617b      	str	r3, [r7, #20]
        break;
 8001888:	e002      	b.n	8001890 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800188a:	2304      	movs	r3, #4
 800188c:	617b      	str	r3, [r7, #20]
        break;
 800188e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001890:	f7ff f858 	bl	8000944 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001896:	e014      	b.n	80018c2 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001898:	f7ff f854 	bl	8000944 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b0b      	cmp	r3, #11
 80018a4:	d90d      	bls.n	80018c2 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f043 0210 	orr.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e007      	b.n	80018d2 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e3      	bne.n	8001898 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	000993ff 	.word	0x000993ff

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db10      	blt.n	80019b4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4909      	ldr	r1, [pc, #36]	; (80019c0 <__NVIC_DisableIRQ+0x40>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	3320      	adds	r3, #32
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019b0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff07 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff1c 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff0f 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff1f 	bl	8001980 <__NVIC_DisableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff94 	bl	8001a80 <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e037      	b.n	8001be8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f934 	bl	8001e38 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}  
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e03a      	b.n	8001c78 <HAL_DMA_DeInit+0x88>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f900 	bl	8001e38 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d008      	beq.n	8001ca4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e020      	b.n	8001ce6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2204      	movs	r2, #4
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d024      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x72>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01f      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d107      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0204 	bic.w	r2, r2, #4
 8001d40:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d06a      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d62:	e065      	b.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	2202      	movs	r2, #2
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d02c      	beq.n	8001dce <HAL_DMA_IRQHandler+0xdc>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d027      	beq.n	8001dce <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10b      	bne.n	8001da4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 020a 	bic.w	r2, r2, #10
 8001d9a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	2102      	movs	r1, #2
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d035      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001dcc:	e030      	b.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d028      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 020e 	bic.w	r2, r2, #14
 8001df6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f202 	lsl.w	r2, r1, r2
 8001e06:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
    }
  }
}  
 8001e2e:	e7ff      	b.n	8001e30 <HAL_DMA_IRQHandler+0x13e>
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <DMA_CalcBaseAndBitshift+0x34>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <DMA_CalcBaseAndBitshift+0x38>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	009a      	lsls	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <DMA_CalcBaseAndBitshift+0x3c>)
 8001e5c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	bffdfff8 	.word	0xbffdfff8
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	40020000 	.word	0x40020000

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e14e      	b.n	8002126 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8140 	beq.w	8002120 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x38>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b12      	cmp	r3, #18
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	6939      	ldr	r1, [r7, #16]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d00b      	beq.n	8001f4c <HAL_GPIO_Init+0xd4>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f40:	2b11      	cmp	r3, #17
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b12      	cmp	r3, #18
 8001f4a:	d130      	bne.n	8001fae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f82:	2201      	movs	r2, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 0201 	and.w	r2, r3, #1
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 809a 	beq.w	8002120 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b55      	ldr	r3, [pc, #340]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a54      	ldr	r2, [pc, #336]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800202e:	d013      	beq.n	8002058 <HAL_GPIO_Init+0x1e0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a46      	ldr	r2, [pc, #280]	; (800214c <HAL_GPIO_Init+0x2d4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1dc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a45      	ldr	r2, [pc, #276]	; (8002150 <HAL_GPIO_Init+0x2d8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1d8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a44      	ldr	r2, [pc, #272]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1d4>
 8002048:	2303      	movs	r3, #3
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 800204c:	2305      	movs	r3, #5
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1e2>
 8002058:	2300      	movs	r3, #0
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800206a:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800209c:	4a2e      	ldr	r2, [pc, #184]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020c6:	4a24      	ldr	r2, [pc, #144]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	f47f aea9 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800
 8002154:	48000c00 	.word	0x48000c00
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800216a:	e0b2      	b.n	80022d2 <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800216c:	2201      	movs	r2, #1
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80a5 	beq.w	80022cc <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002182:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_GPIO_DeInit+0x190>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021aa:	d013      	beq.n	80021d4 <HAL_GPIO_DeInit+0x78>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <HAL_GPIO_DeInit+0x194>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00d      	beq.n	80021d0 <HAL_GPIO_DeInit+0x74>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a4f      	ldr	r2, [pc, #316]	; (80022f4 <HAL_GPIO_DeInit+0x198>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <HAL_GPIO_DeInit+0x70>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_GPIO_DeInit+0x19c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_GPIO_DeInit+0x6c>
 80021c4:	2303      	movs	r3, #3
 80021c6:	e006      	b.n	80021d6 <HAL_GPIO_DeInit+0x7a>
 80021c8:	2305      	movs	r3, #5
 80021ca:	e004      	b.n	80021d6 <HAL_GPIO_DeInit+0x7a>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e002      	b.n	80021d6 <HAL_GPIO_DeInit+0x7a>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_GPIO_DeInit+0x7a>
 80021d4:	2300      	movs	r3, #0
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	f002 0203 	and.w	r2, r2, #3
 80021dc:	0092      	lsls	r2, r2, #2
 80021de:	4093      	lsls	r3, r2
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d132      	bne.n	800224c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021e6:	4b45      	ldr	r3, [pc, #276]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4943      	ldr	r1, [pc, #268]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021f4:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	493f      	ldr	r1, [pc, #252]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 80021fe:	4013      	ands	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	493c      	ldr	r1, [pc, #240]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 800220c:	4013      	ands	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002210:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	4938      	ldr	r1, [pc, #224]	; (80022fc <HAL_GPIO_DeInit+0x1a0>)
 800221a:	4013      	ands	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800222e:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <HAL_GPIO_DeInit+0x190>)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43da      	mvns	r2, r3
 800223e:	482b      	ldr	r0, [pc, #172]	; (80022ec <HAL_GPIO_DeInit+0x190>)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	400a      	ands	r2, r1
 8002246:	3302      	adds	r3, #2
 8002248:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2103      	movs	r1, #3
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	401a      	ands	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	08d2      	lsrs	r2, r2, #3
 8002282:	4019      	ands	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2103      	movs	r1, #3
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	401a      	ands	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	2101      	movs	r1, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	401a      	ands	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2103      	movs	r1, #3
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f47f af46 	bne.w	800216c <HAL_GPIO_DeInit+0x10>
  }
}
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40010000 	.word	0x40010000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800
 80022f8:	48000c00 	.word	0x48000c00
 80022fc:	40010400 	.word	0x40010400

08002300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e081      	b.n	8002416 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe f926 	bl	8000578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002350:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002360:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e006      	b.n	8002388 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002386:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d104      	bne.n	800239a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	ea42 0103 	orr.w	r1, r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	021a      	lsls	r2, r3, #8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69d9      	ldr	r1, [r3, #28]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1a      	ldr	r2, [r3, #32]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b088      	sub	sp, #32
 8002422:	af02      	add	r7, sp, #8
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 80f5 	bne.w	8002626 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_I2C_Slave_Transmit+0x2a>
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0e9      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Slave_Transmit+0x44>
 800245e:	2302      	movs	r3, #2
 8002460:	e0e2      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800246a:	f7fe fa6b 	bl	8000944 <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2221      	movs	r2, #33	; 0x21
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a6:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2108      	movs	r1, #8
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f8e0 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024cc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e0aa      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2208      	movs	r2, #8
 80024d8:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d118      	bne.n	8002514 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2108      	movs	r1, #8
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f8c3 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002506:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e08d      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2208      	movs	r2, #8
 8002512:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f8a9 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02d      	beq.n	8002588 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800253a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e073      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	6839      	ldr	r1, [r7, #0]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f8d7 	bl	80026f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800255e:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e061      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1d6      	bne.n	8002540 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8ee 	bl	8002778 <I2C_WaitOnSTOPFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d011      	beq.n	80025c6 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b0:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d103      	bne.n	80025c2 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
 80025c0:	e001      	b.n	80025c6 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e030      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2220      	movs	r2, #32
 80025cc:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f84c 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e016      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002608:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d103      	bne.n	800264e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d007      	beq.n	800266c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	619a      	str	r2, [r3, #24]
  }
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002688:	e022      	b.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d01e      	beq.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002692:	f7fe f957 	bl	8000944 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d302      	bcc.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d113      	bne.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e00f      	b.n	80026f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4013      	ands	r3, r2
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d0cd      	beq.n	800268a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002704:	e02c      	b.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f870 	bl	80027f0 <I2C_IsAcknowledgeFailed>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e02a      	b.n	8002770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d01e      	beq.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7fe f90f 	bl	8000944 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d113      	bne.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e007      	b.n	8002770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d1cb      	bne.n	8002706 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002784:	e028      	b.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f830 	bl	80027f0 <I2C_IsAcknowledgeFailed>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e026      	b.n	80027e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7fe f8d3 	bl	8000944 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d113      	bne.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d1cf      	bne.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b10      	cmp	r3, #16
 8002808:	d151      	bne.n	80028ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280a:	e022      	b.n	8002852 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d01e      	beq.n	8002852 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002814:	f7fe f896 	bl	8000944 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <I2C_IsAcknowledgeFailed+0x3a>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d113      	bne.n	8002852 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e02e      	b.n	80028b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b20      	cmp	r3, #32
 800285e:	d1d5      	bne.n	800280c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2210      	movs	r2, #16
 8002866:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2220      	movs	r2, #32
 800286e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff fedd 	bl	8002630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002882:	400b      	ands	r3, r1
 8002884:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f043 0204 	orr.w	r2, r3, #4
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	fe00e800 	.word	0xfe00e800

080028bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d138      	bne.n	8002944 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028dc:	2302      	movs	r3, #2
 80028de:	e032      	b.n	8002946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	; 0x24
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800290e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b20      	cmp	r3, #32
 8002966:	d139      	bne.n	80029dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002972:	2302      	movs	r3, #2
 8002974:	e033      	b.n	80029de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2224      	movs	r2, #36	; 0x24
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f000 bef4 	b.w	80037ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 816a 	beq.w	8002cea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a16:	4bb3      	ldr	r3, [pc, #716]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d00c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a22:	4bb0      	ldr	r3, [pc, #704]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d159      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xf6>
 8002a2e:	4bad      	ldr	r3, [pc, #692]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d152      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xf6>
 8002a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a40:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_OscConfig+0x82>
 8002a68:	4b9e      	ldr	r3, [pc, #632]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0xae>
 8002a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a72:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a8a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a96:	4b93      	ldr	r3, [pc, #588]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a9e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002aa2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002aa6:	fa92 f2a2 	rbit	r2, r2
 8002aaa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002aae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 810c 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x2fc>
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8106 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f000 be86 	b.w	80037ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x110>
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e030      	b.n	8002b5e <HAL_RCC_OscConfig+0x172>
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x134>
 8002b06:	4b77      	ldr	r3, [pc, #476]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a76      	ldr	r2, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b74      	ldr	r3, [pc, #464]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a73      	ldr	r2, [pc, #460]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01e      	b.n	8002b5e <HAL_RCC_OscConfig+0x172>
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x15a>
 8002b2c:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6c      	ldr	r2, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a69      	ldr	r2, [pc, #420]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0x172>
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a66      	ldr	r2, [pc, #408]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b5e:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	f023 020f 	bic.w	r2, r3, #15
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	495d      	ldr	r1, [pc, #372]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d059      	beq.n	8002c30 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fd fee2 	bl	8000944 <HAL_GetTick>
 8002b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b86:	f7fd fedd 	bl	8000944 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d902      	bls.n	8002b9c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	f000 be29 	b.w	80037ee <HAL_RCC_OscConfig+0xe02>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bb0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_OscConfig+0x1e2>
 8002bc8:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0x20e>
 8002bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bfe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c02:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c06:	fa92 f2a2 	rbit	r2, r2
 8002c0a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c0e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c12:	fab2 f282 	clz	r2, r2
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f002 021f 	and.w	r2, r2, #31
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ab      	beq.n	8002b86 <HAL_RCC_OscConfig+0x19a>
 8002c2e:	e05c      	b.n	8002cea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd fe88 	bl	8000944 <HAL_GetTick>
 8002c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3a:	f7fd fe83 	bl	8000944 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d902      	bls.n	8002c50 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	f000 bdcf 	b.w	80037ee <HAL_RCC_OscConfig+0xe02>
 8002c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c54:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCC_OscConfig+0x296>
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x2c2>
 8002c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c9e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCC_OscConfig+0x2f8>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cb2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cb6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cba:	fa92 f2a2 	rbit	r2, r2
 8002cbe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cc2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cc6:	fab2 f282 	clz	r2, r2
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f002 021f 	and.w	r2, r2, #31
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ab      	bne.n	8002c3a <HAL_RCC_OscConfig+0x24e>
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_OscConfig+0x2fe>
 8002ce4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 816f 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cfa:	4bd0      	ldr	r3, [pc, #832]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d06:	4bcd      	ldr	r3, [pc, #820]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d16c      	bne.n	8002dec <HAL_RCC_OscConfig+0x400>
 8002d12:	4bca      	ldr	r3, [pc, #808]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d166      	bne.n	8002dec <HAL_RCC_OscConfig+0x400>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_OscConfig+0x362>
 8002d48:	4bbc      	ldr	r3, [pc, #752]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	e013      	b.n	8002d76 <HAL_RCC_OscConfig+0x38a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d60:	2302      	movs	r3, #2
 8002d62:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d72:	4bb2      	ldr	r3, [pc, #712]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2202      	movs	r2, #2
 8002d78:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d7c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d80:	fa92 f2a2 	rbit	r2, r2
 8002d84:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d88:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d8c:	fab2 f282 	clz	r2, r2
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f042 0220 	orr.w	r2, r2, #32
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	f002 021f 	and.w	r2, r2, #31
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3cc>
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f000 bd1b 	b.w	80037ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4ba0      	ldr	r3, [pc, #640]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	21f8      	movs	r1, #248	; 0xf8
 8002dc8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dd0:	fa91 f1a1 	rbit	r1, r1
 8002dd4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dd8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ddc:	fab1 f181 	clz	r1, r1
 8002de0:	b2c9      	uxtb	r1, r1
 8002de2:	408b      	lsls	r3, r1
 8002de4:	4995      	ldr	r1, [pc, #596]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	e0f5      	b.n	8002fd8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8085 	beq.w	8002f02 <HAL_RCC_OscConfig+0x516>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2301      	movs	r3, #1
 8002e22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fd fd8e 	bl	8000944 <HAL_GetTick>
 8002e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7fd fd89 	bl	8000944 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d902      	bls.n	8002e44 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	f000 bcd5 	b.w	80037ee <HAL_RCC_OscConfig+0xe02>
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <HAL_RCC_OscConfig+0x488>
 8002e6e:	4b73      	ldr	r3, [pc, #460]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e013      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b0>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e86:	2302      	movs	r3, #2
 8002e88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ea2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ea6:	fa92 f2a2 	rbit	r2, r2
 8002eaa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002eae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0af      	beq.n	8002e2e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	21f8      	movs	r1, #248	; 0xf8
 8002ede:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ee6:	fa91 f1a1 	rbit	r1, r1
 8002eea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002eee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ef2:	fab1 f181 	clz	r1, r1
 8002ef6:	b2c9      	uxtb	r1, r1
 8002ef8:	408b      	lsls	r3, r1
 8002efa:	4950      	ldr	r1, [pc, #320]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e06a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x5ec>
 8002f02:	2301      	movs	r3, #1
 8002f04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fd fd09 	bl	8000944 <HAL_GetTick>
 8002f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fd fd04 	bl	8000944 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f000 bc50 	b.w	80037ee <HAL_RCC_OscConfig+0xe02>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d102      	bne.n	8002f7e <HAL_RCC_OscConfig+0x592>
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	e013      	b.n	8002fa6 <HAL_RCC_OscConfig+0x5ba>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f90:	2302      	movs	r3, #2
 8002f92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x650>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fb0:	fa92 f2a2 	rbit	r2, r2
 8002fb4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fb8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f042 0220 	orr.w	r2, r2, #32
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f002 021f 	and.w	r2, r2, #31
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1af      	bne.n	8002f38 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80da 	beq.w	800319c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d069      	beq.n	80030c6 <HAL_RCC_OscConfig+0x6da>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_OscConfig+0x654>)
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	461a      	mov	r2, r3
 8003018:	2301      	movs	r3, #1
 800301a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fd fc92 	bl	8000944 <HAL_GetTick>
 8003020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003024:	e00e      	b.n	8003044 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003026:	f7fd fc8d 	bl	8000944 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d906      	bls.n	8003044 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e3d9      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	10908120 	.word	0x10908120
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003056:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003072:	2202      	movs	r2, #2
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f2a3 	rbit	r2, r3
 8003080:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003084:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	4ba5      	ldr	r3, [pc, #660]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800308e:	2102      	movs	r1, #2
 8003090:	6019      	str	r1, [r3, #0]
 8003092:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fa93 f1a3 	rbit	r1, r3
 800309c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030a0:	6019      	str	r1, [r3, #0]
  return result;
 80030a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0b0      	beq.n	8003026 <HAL_RCC_OscConfig+0x63a>
 80030c4:	e06a      	b.n	800319c <HAL_RCC_OscConfig+0x7b0>
 80030c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030dc:	601a      	str	r2, [r3, #0]
  return result;
 80030de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b8c      	ldr	r3, [pc, #560]	; (8003320 <HAL_RCC_OscConfig+0x934>)
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fd fc24 	bl	8000944 <HAL_GetTick>
 80030fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	e009      	b.n	8003116 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003102:	f7fd fc1f 	bl	8000944 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e36b      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
 8003116:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800311a:	2202      	movs	r2, #2
 800311c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003132:	2202      	movs	r2, #2
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fa93 f2a3 	rbit	r2, r3
 8003140:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800314a:	2202      	movs	r2, #2
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	fa93 f2a3 	rbit	r2, r3
 8003158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800315c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315e:	4b6f      	ldr	r3, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003162:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003166:	2102      	movs	r1, #2
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	fa93 f1a3 	rbit	r1, r3
 8003174:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003178:	6019      	str	r1, [r3, #0]
  return result;
 800317a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1b2      	bne.n	8003102 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8158 	beq.w	800345c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_RCC_OscConfig+0x930>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b57      	ldr	r3, [pc, #348]	; (800331c <HAL_RCC_OscConfig+0x930>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a56      	ldr	r2, [pc, #344]	; (800331c <HAL_RCC_OscConfig+0x930>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]
 80031ca:	4b54      	ldr	r3, [pc, #336]	; (800331c <HAL_RCC_OscConfig+0x930>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f107 0308 	add.w	r3, r7, #8
 80031dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_RCC_OscConfig+0x938>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11a      	bne.n	8003226 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f0:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <HAL_RCC_OscConfig+0x938>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	; (8003324 <HAL_RCC_OscConfig+0x938>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fc:	f7fd fba2 	bl	8000944 <HAL_GetTick>
 8003200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	e009      	b.n	800321a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7fd fb9d 	bl	8000944 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e2e9      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b42      	ldr	r3, [pc, #264]	; (8003324 <HAL_RCC_OscConfig+0x938>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ef      	beq.n	8003206 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x852>
 8003230:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a39      	ldr	r2, [pc, #228]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	e02f      	b.n	800329e <HAL_RCC_OscConfig+0x8b2>
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10c      	bne.n	8003262 <HAL_RCC_OscConfig+0x876>
 8003248:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_OscConfig+0x930>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a33      	ldr	r2, [pc, #204]	; (800331c <HAL_RCC_OscConfig+0x930>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4a30      	ldr	r2, [pc, #192]	; (800331c <HAL_RCC_OscConfig+0x930>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6213      	str	r3, [r2, #32]
 8003260:	e01d      	b.n	800329e <HAL_RCC_OscConfig+0x8b2>
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x89a>
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x930>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a2a      	ldr	r2, [pc, #168]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCC_OscConfig+0x930>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_RCC_OscConfig+0x930>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6213      	str	r3, [r2, #32]
 8003284:	e00b      	b.n	800329e <HAL_RCC_OscConfig+0x8b2>
 8003286:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a24      	ldr	r2, [pc, #144]	; (800331c <HAL_RCC_OscConfig+0x930>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6213      	str	r3, [r2, #32]
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d06b      	beq.n	8003380 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7fd fb4c 	bl	8000944 <HAL_GetTick>
 80032ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	e00b      	b.n	80032ca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fd fb47 	bl	8000944 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e291      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
 80032ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032ce:	2202      	movs	r2, #2
 80032d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032e6:	2202      	movs	r2, #2
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032f8:	601a      	str	r2, [r3, #0]
  return result;
 80032fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d109      	bne.n	8003328 <HAL_RCC_OscConfig+0x93c>
 8003314:	4b01      	ldr	r3, [pc, #4]	; (800331c <HAL_RCC_OscConfig+0x930>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x958>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	10908120 	.word	0x10908120
 8003324:	40007000 	.word	0x40007000
 8003328:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f2a3 	rbit	r2, r3
 800333a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	4bbb      	ldr	r3, [pc, #748]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003348:	2102      	movs	r1, #2
 800334a:	6011      	str	r1, [r2, #0]
 800334c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	fa92 f1a2 	rbit	r1, r2
 8003356:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800335a:	6011      	str	r1, [r2, #0]
  return result;
 800335c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	fab2 f282 	clz	r2, r2
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f002 021f 	and.w	r2, r2, #31
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d099      	beq.n	80032b2 <HAL_RCC_OscConfig+0x8c6>
 800337e:	e063      	b.n	8003448 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7fd fae0 	bl	8000944 <HAL_GetTick>
 8003384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	e00b      	b.n	80033a2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fd fadb 	bl	8000944 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e225      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
 80033a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033a6:	2202      	movs	r2, #2
 80033a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fa93 f2a3 	rbit	r2, r3
 80033b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033be:	2202      	movs	r2, #2
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	fa93 f2a3 	rbit	r2, r3
 80033cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033d0:	601a      	str	r2, [r3, #0]
  return result;
 80033d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_OscConfig+0xa06>
 80033ec:	4b90      	ldr	r3, [pc, #576]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	e00d      	b.n	800340e <HAL_RCC_OscConfig+0xa22>
 80033f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033f6:	2202      	movs	r2, #2
 80033f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	4b89      	ldr	r3, [pc, #548]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003412:	2102      	movs	r1, #2
 8003414:	6011      	str	r1, [r2, #0]
 8003416:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	fa92 f1a2 	rbit	r1, r2
 8003420:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003424:	6011      	str	r1, [r2, #0]
  return result;
 8003426:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f002 021f 	and.w	r2, r2, #31
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1a0      	bne.n	800338a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003448:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	4b77      	ldr	r3, [pc, #476]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4a76      	ldr	r2, [pc, #472]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 8003456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 81c2 	beq.w	80037ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003468:	4b71      	ldr	r3, [pc, #452]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	f000 819c 	beq.w	80037ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b02      	cmp	r3, #2
 800347e:	f040 8114 	bne.w	80036aa <HAL_RCC_OscConfig+0xcbe>
 8003482:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800348a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800349a:	601a      	str	r2, [r3, #0]
  return result;
 800349c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	461a      	mov	r2, r3
 80034b4:	2300      	movs	r3, #0
 80034b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fd fa44 	bl	8000944 <HAL_GetTick>
 80034bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c0:	e009      	b.n	80034d6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fd fa3f 	bl	8000944 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e18b      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
 80034d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034ee:	601a      	str	r2, [r3, #0]
  return result;
 80034f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0xb24>
 800350a:	4b49      	ldr	r3, [pc, #292]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e01b      	b.n	8003548 <HAL_RCC_OscConfig+0xb5c>
 8003510:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800352e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800354c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003550:	6011      	str	r1, [r2, #0]
 8003552:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	fa92 f1a2 	rbit	r1, r2
 800355c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003560:	6011      	str	r1, [r2, #0]
  return result;
 8003562:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f042 0220 	orr.w	r2, r2, #32
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	f002 021f 	and.w	r2, r2, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f202 	lsl.w	r2, r1, r2
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d19e      	bne.n	80034c2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003584:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	430b      	orrs	r3, r1
 800359a:	4925      	ldr	r1, [pc, #148]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035b8:	601a      	str	r2, [r3, #0]
  return result;
 80035ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035be:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	461a      	mov	r2, r3
 80035d2:	2301      	movs	r3, #1
 80035d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fd f9b5 	bl	8000944 <HAL_GetTick>
 80035da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035de:	e009      	b.n	80035f4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fd f9b0 	bl	8000944 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0fc      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
 80035f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	fa93 f2a3 	rbit	r2, r3
 8003608:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800360c:	601a      	str	r2, [r3, #0]
  return result;
 800360e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003612:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <HAL_RCC_OscConfig+0xc48>
 8003628:	4b01      	ldr	r3, [pc, #4]	; (8003630 <HAL_RCC_OscConfig+0xc44>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	e01e      	b.n	800366c <HAL_RCC_OscConfig+0xc80>
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	fa93 f2a3 	rbit	r2, r3
 8003648:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_OscConfig+0xe0c>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003670:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003674:	6011      	str	r1, [r2, #0]
 8003676:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	fa92 f1a2 	rbit	r1, r2
 8003680:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003684:	6011      	str	r1, [r2, #0]
  return result;
 8003686:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d09b      	beq.n	80035e0 <HAL_RCC_OscConfig+0xbf4>
 80036a8:	e0a0      	b.n	80037ec <HAL_RCC_OscConfig+0xe00>
 80036aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	fa93 f2a3 	rbit	r2, r3
 80036be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c2:	601a      	str	r2, [r3, #0]
  return result;
 80036c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	2300      	movs	r3, #0
 80036de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fd f930 	bl	8000944 <HAL_GetTick>
 80036e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e8:	e009      	b.n	80036fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fd f92b 	bl	8000944 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e077      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
 80036fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003716:	601a      	str	r2, [r3, #0]
  return result;
 8003718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_RCC_OscConfig+0xd4c>
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <HAL_RCC_OscConfig+0xe0c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	e01b      	b.n	8003770 <HAL_RCC_OscConfig+0xd84>
 8003738:	f107 0320 	add.w	r3, r7, #32
 800373c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f107 0320 	add.w	r3, r7, #32
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	fa93 f2a3 	rbit	r2, r3
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	f107 0318 	add.w	r3, r7, #24
 8003756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	f107 0318 	add.w	r3, r7, #24
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_RCC_OscConfig+0xe0c>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f107 0210 	add.w	r2, r7, #16
 8003774:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	f107 0210 	add.w	r2, r7, #16
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	fa92 f1a2 	rbit	r1, r2
 8003784:	f107 020c 	add.w	r2, r7, #12
 8003788:	6011      	str	r1, [r2, #0]
  return result;
 800378a:	f107 020c 	add.w	r2, r7, #12
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	fab2 f282 	clz	r2, r2
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f042 0220 	orr.w	r2, r2, #32
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	f002 021f 	and.w	r2, r2, #31
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f202 	lsl.w	r2, r1, r2
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d19e      	bne.n	80036ea <HAL_RCC_OscConfig+0xcfe>
 80037ac:	e01e      	b.n	80037ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e018      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_RCC_OscConfig+0xe0c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d108      	bne.n	80037e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b09e      	sub	sp, #120	; 0x78
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e162      	b.n	8003ada <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b90      	ldr	r3, [pc, #576]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d910      	bls.n	8003844 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b8d      	ldr	r3, [pc, #564]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 0207 	bic.w	r2, r3, #7
 800382a:	498b      	ldr	r1, [pc, #556]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e14a      	b.n	8003ada <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003850:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	497f      	ldr	r1, [pc, #508]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80dc 	beq.w	8003a28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d13c      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xf6>
 8003878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d102      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xa6>
 800389c:	4b6f      	ldr	r3, [pc, #444]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	e00f      	b.n	80038c2 <HAL_RCC_ClockConfig+0xc6>
 80038a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	667b      	str	r3, [r7, #100]	; 0x64
 80038b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b4:	663b      	str	r3, [r7, #96]	; 0x60
 80038b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80038c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ca:	fa92 f2a2 	rbit	r2, r2
 80038ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038d2:	fab2 f282 	clz	r2, r2
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	f042 0220 	orr.w	r2, r2, #32
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	f002 021f 	and.w	r2, r2, #31
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d17b      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0f3      	b.n	8003ada <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d13c      	bne.n	8003974 <HAL_RCC_ClockConfig+0x178>
 80038fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d102      	bne.n	8003924 <HAL_RCC_ClockConfig+0x128>
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	e00f      	b.n	8003944 <HAL_RCC_ClockConfig+0x148>
 8003924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003928:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
 8003932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
 8003938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003940:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003948:	63ba      	str	r2, [r7, #56]	; 0x38
 800394a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800394c:	fa92 f2a2 	rbit	r2, r2
 8003950:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003954:	fab2 f282 	clz	r2, r2
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f042 0220 	orr.w	r2, r2, #32
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	f002 021f 	and.w	r2, r2, #31
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f202 	lsl.w	r2, r1, r2
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13a      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0b2      	b.n	8003ada <HAL_RCC_ClockConfig+0x2de>
 8003974:	2302      	movs	r3, #2
 8003976:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_RCC_ClockConfig+0x1a0>
 8003996:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	e00d      	b.n	80039b8 <HAL_RCC_ClockConfig+0x1bc>
 800399c:	2302      	movs	r3, #2
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	2302      	movs	r3, #2
 80039aa:	623b      	str	r3, [r7, #32]
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2202      	movs	r2, #2
 80039ba:	61ba      	str	r2, [r7, #24]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	fa92 f2a2 	rbit	r2, r2
 80039c2:	617a      	str	r2, [r7, #20]
  return result;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	fab2 f282 	clz	r2, r2
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f042 0220 	orr.w	r2, r2, #32
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	f002 021f 	and.w	r2, r2, #31
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e079      	b.n	8003ada <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	491a      	ldr	r1, [pc, #104]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f8:	f7fc ffa4 	bl	8000944 <HAL_GetTick>
 80039fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fc ffa0 	bl	8000944 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e061      	b.n	8003ada <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d214      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 0207 	bic.w	r2, r3, #7
 8003a3e:	4906      	ldr	r1, [pc, #24]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RCC_ClockConfig+0x25c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e040      	b.n	8003ada <HAL_RCC_ClockConfig+0x2de>
 8003a58:	40022000 	.word	0x40022000
 8003a5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	491a      	ldr	r1, [pc, #104]	; (8003ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4912      	ldr	r1, [pc, #72]	; (8003ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a9e:	f000 f829 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aac:	22f0      	movs	r2, #240	; 0xf0
 8003aae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	fa92 f2a2 	rbit	r2, r2
 8003ab6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	fab2 f282 	clz	r2, r2
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	40d3      	lsrs	r3, r2
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <HAL_RCC_ClockConfig+0x2ec>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8003aca:	4a08      	ldr	r2, [pc, #32]	; (8003aec <HAL_RCC_ClockConfig+0x2f0>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <HAL_RCC_ClockConfig+0x2f4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fc fef2 	bl	80008bc <HAL_InitTick>
  
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3778      	adds	r7, #120	; 0x78
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	08003f40 	.word	0x08003f40
 8003aec:	20000014 	.word	0x20000014
 8003af0:	20000018 	.word	0x20000018

08003af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b08b      	sub	sp, #44	; 0x2c
 8003af8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b0e:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x30>
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x36>
 8003b22:	e03c      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b24:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b26:	623b      	str	r3, [r7, #32]
      break;
 8003b28:	e03c      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b34:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	fa92 f2a2 	rbit	r2, r2
 8003b3c:	607a      	str	r2, [r7, #4]
  return result;
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	40d3      	lsrs	r3, r2
 8003b48:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b4a:	5cd3      	ldrb	r3, [r2, r3]
 8003b4c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	220f      	movs	r2, #15
 8003b58:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	fa92 f2a2 	rbit	r2, r2
 8003b60:	60fa      	str	r2, [r7, #12]
  return result;
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	fab2 f282 	clz	r2, r2
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	40d3      	lsrs	r3, r2
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b7c:	4a0e      	ldr	r2, [pc, #56]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	e004      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	623b      	str	r3, [r7, #32]
      break;
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ba0:	623b      	str	r3, [r7, #32]
      break;
 8003ba2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	372c      	adds	r7, #44	; 0x2c
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	007a1200 	.word	0x007a1200
 8003bbc:	08003f50 	.word	0x08003f50
 8003bc0:	08003f60 	.word	0x08003f60
 8003bc4:	003d0900 	.word	0x003d0900

08003bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b092      	sub	sp, #72	; 0x48
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80d7 	beq.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bec:	4b4e      	ldr	r3, [pc, #312]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf8:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	4a4a      	ldr	r2, [pc, #296]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c02:	61d3      	str	r3, [r2, #28]
 8003c04:	4b48      	ldr	r3, [pc, #288]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b45      	ldr	r3, [pc, #276]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a41      	ldr	r2, [pc, #260]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fc fe89 	bl	8000944 <HAL_GetTick>
 8003c32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fc fe85 	bl	8000944 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b64      	cmp	r3, #100	; 0x64
 8003c42:	d901      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e13c      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b38      	ldr	r3, [pc, #224]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8084 	beq.w	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d07c      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cc6:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d04b      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fc fe35 	bl	8000944 <HAL_GetTick>
 8003cda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cde:	f7fc fe31 	bl	8000944 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e0e6      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	2302      	movs	r3, #2
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	61fb      	str	r3, [r7, #28]
  return result;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d108      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d22:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	e00d      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	10908100 	.word	0x10908100
 8003d34:	2302      	movs	r3, #2
 8003d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	4b62      	ldr	r3, [pc, #392]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2202      	movs	r2, #2
 8003d46:	613a      	str	r2, [r7, #16]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	fa92 f2a2 	rbit	r2, r2
 8003d4e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	fab2 f282 	clz	r2, r2
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f002 021f 	and.w	r2, r2, #31
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0b7      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d6e:	4b57      	ldr	r3, [pc, #348]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4954      	ldr	r1, [pc, #336]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d105      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003da0:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	f023 0203 	bic.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4947      	ldr	r1, [pc, #284]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dbe:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f023 0210 	bic.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4940      	ldr	r1, [pc, #256]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ddc:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	f023 0220 	bic.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	4938      	ldr	r1, [pc, #224]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4931      	ldr	r1, [pc, #196]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4929      	ldr	r1, [pc, #164]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4922      	ldr	r1, [pc, #136]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	491a      	ldr	r1, [pc, #104]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e72:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	4913      	ldr	r1, [pc, #76]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	490b      	ldr	r1, [pc, #44]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4904      	ldr	r1, [pc, #16]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3748      	adds	r7, #72	; 0x48
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4e0d      	ldr	r6, [pc, #52]	; (8003f08 <__libc_init_array+0x38>)
 8003ed4:	4c0d      	ldr	r4, [pc, #52]	; (8003f0c <__libc_init_array+0x3c>)
 8003ed6:	1ba4      	subs	r4, r4, r6
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	2500      	movs	r5, #0
 8003edc:	42a5      	cmp	r5, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	4e0b      	ldr	r6, [pc, #44]	; (8003f10 <__libc_init_array+0x40>)
 8003ee2:	4c0c      	ldr	r4, [pc, #48]	; (8003f14 <__libc_init_array+0x44>)
 8003ee4:	f000 f820 	bl	8003f28 <_init>
 8003ee8:	1ba4      	subs	r4, r4, r6
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	2500      	movs	r5, #0
 8003eee:	42a5      	cmp	r5, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ef8:	4798      	blx	r3
 8003efa:	3501      	adds	r5, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f02:	4798      	blx	r3
 8003f04:	3501      	adds	r5, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	08003f70 	.word	0x08003f70
 8003f0c:	08003f70 	.word	0x08003f70
 8003f10:	08003f70 	.word	0x08003f70
 8003f14:	08003f74 	.word	0x08003f74

08003f18 <memset>:
 8003f18:	4402      	add	r2, r0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <memset+0xa>
 8003f20:	4770      	bx	lr
 8003f22:	f803 1b01 	strb.w	r1, [r3], #1
 8003f26:	e7f9      	b.n	8003f1c <memset+0x4>

08003f28 <_init>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr

08003f34 <_fini>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr
