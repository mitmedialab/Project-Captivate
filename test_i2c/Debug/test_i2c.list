
test_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080065a0  080065a0  000165a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a8  080067a8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080067a8  080067a8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067a8  080067a8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080067b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000018  080067c8  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080067c8  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e16f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023a2  00000000  00000000  0002e1b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  00030560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000918  00000000  00000000  00030fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012e17  00000000  00000000  000318d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b93d  00000000  00000000  000446ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000688ff  00000000  00000000  0005002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b892b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c6c  00000000  00000000  000b89a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006584 	.word	0x08006584

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006584 	.word	0x08006584

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b58:	2203      	movs	r2, #3
 8000b5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b66:	2208      	movs	r2, #8
 8000b68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b76:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b78:	f000 fe4e 	bl	8001818 <HAL_ADC_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000b82:	f000 fd0a 	bl	800159a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b86:	2303      	movs	r3, #3
 8000b88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000b92:	2305      	movs	r3, #5
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000ba4:	f001 faa6 	bl	80020f4 <HAL_ADC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000bae:	f000 fcf4 	bl	800159a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000bc0:	f001 fa98 	bl	80020f4 <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000bca:	f000 fce6 	bl	800159a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bce:	230b      	movs	r3, #11
 8000bd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_ADC1_Init+0xf0>)
 8000bdc:	f001 fa8a 	bl	80020f4 <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000be6:	f000 fcd8 	bl	800159a <Error_Handler>
  }

}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000080 	.word	0x20000080

08000bf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c18:	d16c      	bne.n	8000cf4 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a37      	ldr	r2, [pc, #220]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a31      	ldr	r2, [pc, #196]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a2b      	ldr	r2, [pc, #172]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <HAL_ADC_MspInit+0x104>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c62:	230c      	movs	r3, #12
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f002 f9a6 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	2303      	movs	r3, #3
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481c      	ldr	r0, [pc, #112]	; (8000d00 <HAL_ADC_MspInit+0x108>)
 8000c90:	f002 f99a 	bl	8002fc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_ADC_MspInit+0x110>)
 8000c98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000cca:	f001 ffac 	bl	8002c26 <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000cd4:	f000 fc61 	bl	800159a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cde:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <HAL_ADC_MspInit+0x10c>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2012      	movs	r0, #18
 8000cea:	f001 ff66 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000cee:	2012      	movs	r0, #18
 8000cf0:	f001 ff7f 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	200000d0 	.word	0x200000d0
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	00000000 	.word	0x00000000

08000d10 <cameraDetectionTask>:
uint8_t left_brightness;
uint8_t right_brightness;

volatile uint16_t test[10] = {0};
/* Functions Definition ------------------------------------------------------*/
void cameraDetectionTask(void *argument){
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	6078      	str	r0, [r7, #4]

//	HAL_Delay(100);
	uint32_t evt = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8000d1c:	2034      	movs	r0, #52	; 0x34
 8000d1e:	f000 fb4f 	bl	80013c0 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8000d22:	2035      	movs	r0, #53	; 0x35
 8000d24:	f000 fb4c 	bl	80013c0 <setup_LP5523>



	while(1){
//		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
		evt = 0x00000001U;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
		// if signal was received successfully, start blink task
		if (evt == 0x00000001U)  {
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d1fa      	bne.n	8000d28 <cameraDetectionTask+0x18>
//		HAL_ADC_Start_IT(&hadc1);
		// start timer to trigger DMA
//		volatile uint32_t ADCValue = 0;
			while(1){
				// reset
				diode_left = 0;
 8000d32:	4aa5      	ldr	r2, [pc, #660]	; (8000fc8 <cameraDetectionTask+0x2b8>)
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	f04f 0400 	mov.w	r4, #0
 8000d3c:	e9c2 3400 	strd	r3, r4, [r2]
				diode_right = 0;
 8000d40:	4aa2      	ldr	r2, [pc, #648]	; (8000fcc <cameraDetectionTask+0x2bc>)
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	f04f 0400 	mov.w	r4, #0
 8000d4a:	e9c2 3400 	strd	r3, r4, [r2]
				diode_center = 0;
 8000d4e:	4aa0      	ldr	r2, [pc, #640]	; (8000fd0 <cameraDetectionTask+0x2c0>)
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	f04f 0400 	mov.w	r4, #0
 8000d58:	e9c2 3400 	strd	r3, r4, [r2]

				// grab SAMPLE_CNT number of samples and average it
				for(int i=0; i<SAMPLE_CNT; i++){
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e00b      	b.n	8000d7a <cameraDetectionTask+0x6a>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t *) test, 10);
 8000d62:	220a      	movs	r2, #10
 8000d64:	499b      	ldr	r1, [pc, #620]	; (8000fd4 <cameraDetectionTask+0x2c4>)
 8000d66:	489c      	ldr	r0, [pc, #624]	; (8000fd8 <cameraDetectionTask+0x2c8>)
 8000d68:	f000 fedc 	bl	8001b24 <HAL_ADC_Start_DMA>
//					if(ADCValue[2] >= THRESHOLD){
//						diode_center += ADCValue[2];
//					}
//
//					HAL_ADC_Stop(&hadc1);
					HAL_Delay(10000);
 8000d6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d70:	f000 fd26 	bl	80017c0 <HAL_Delay>
				for(int i=0; i<SAMPLE_CNT; i++){
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b13      	cmp	r3, #19
 8000d7e:	ddf0      	ble.n	8000d62 <cameraDetectionTask+0x52>
				}

				// get average
				diode_right = diode_right / SAMPLE_CNT;
 8000d80:	4b92      	ldr	r3, [pc, #584]	; (8000fcc <cameraDetectionTask+0x2bc>)
 8000d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b94      	ldr	r3, [pc, #592]	; (8000fdc <cameraDetectionTask+0x2cc>)
 8000d8c:	f7ff fd02 	bl	8000794 <__aeabi_ddiv>
 8000d90:	4603      	mov	r3, r0
 8000d92:	460c      	mov	r4, r1
 8000d94:	4a8d      	ldr	r2, [pc, #564]	; (8000fcc <cameraDetectionTask+0x2bc>)
 8000d96:	e9c2 3400 	strd	r3, r4, [r2]
				diode_left = diode_left / SAMPLE_CNT;
 8000d9a:	4b8b      	ldr	r3, [pc, #556]	; (8000fc8 <cameraDetectionTask+0x2b8>)
 8000d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	4b8d      	ldr	r3, [pc, #564]	; (8000fdc <cameraDetectionTask+0x2cc>)
 8000da6:	f7ff fcf5 	bl	8000794 <__aeabi_ddiv>
 8000daa:	4603      	mov	r3, r0
 8000dac:	460c      	mov	r4, r1
 8000dae:	4a86      	ldr	r2, [pc, #536]	; (8000fc8 <cameraDetectionTask+0x2b8>)
 8000db0:	e9c2 3400 	strd	r3, r4, [r2]
				diode_center = diode_center / SAMPLE_CNT;
 8000db4:	4b86      	ldr	r3, [pc, #536]	; (8000fd0 <cameraDetectionTask+0x2c0>)
 8000db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b87      	ldr	r3, [pc, #540]	; (8000fdc <cameraDetectionTask+0x2cc>)
 8000dc0:	f7ff fce8 	bl	8000794 <__aeabi_ddiv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	4a81      	ldr	r2, [pc, #516]	; (8000fd0 <cameraDetectionTask+0x2c0>)
 8000dca:	e9c2 3400 	strd	r3, r4, [r2]

				// treat values as vector
				vec_x = diode_right - diode_left;
 8000dce:	4b7f      	ldr	r3, [pc, #508]	; (8000fcc <cameraDetectionTask+0x2bc>)
 8000dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd4:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <cameraDetectionTask+0x2b8>)
 8000dd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	f7ff f9f7 	bl	80001d0 <__aeabi_dsub>
 8000de2:	4603      	mov	r3, r0
 8000de4:	460c      	mov	r4, r1
 8000de6:	4a7e      	ldr	r2, [pc, #504]	; (8000fe0 <cameraDetectionTask+0x2d0>)
 8000de8:	e9c2 3400 	strd	r3, r4, [r2]
				vec_y = diode_center;
 8000dec:	4b78      	ldr	r3, [pc, #480]	; (8000fd0 <cameraDetectionTask+0x2c0>)
 8000dee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000df2:	4a7c      	ldr	r2, [pc, #496]	; (8000fe4 <cameraDetectionTask+0x2d4>)
 8000df4:	e9c2 3400 	strd	r3, r4, [r2]

				// get theta of vector if vector exists
				if (vec_y > THRESHOLD || abs(vec_x) > THRESHOLD){
 8000df8:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <cameraDetectionTask+0x2d4>)
 8000dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	4b79      	ldr	r3, [pc, #484]	; (8000fe8 <cameraDetectionTask+0x2d8>)
 8000e04:	f7ff fe2c 	bl	8000a60 <__aeabi_dcmpgt>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10d      	bne.n	8000e2a <cameraDetectionTask+0x11a>
 8000e0e:	4b74      	ldr	r3, [pc, #464]	; (8000fe0 <cameraDetectionTask+0x2d0>)
 8000e10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e14:	4618      	mov	r0, r3
 8000e16:	4621      	mov	r1, r4
 8000e18:	f7ff fe2c 	bl	8000a74 <__aeabi_d2iz>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bfb8      	it	lt
 8000e22:	425b      	neglt	r3, r3
 8000e24:	2bfa      	cmp	r3, #250	; 0xfa
 8000e26:	f340 8083 	ble.w	8000f30 <cameraDetectionTask+0x220>

					// avoid dividing by zero if camera seen only on sides
					if(vec_y == 0){
 8000e2a:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <cameraDetectionTask+0x2d4>)
 8000e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	f7ff fdea 	bl	8000a10 <__aeabi_dcmpeq>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d01a      	beq.n	8000e78 <cameraDetectionTask+0x168>
						if (vec_x > 0){
 8000e42:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <cameraDetectionTask+0x2d0>)
 8000e44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	f7ff fe06 	bl	8000a60 <__aeabi_dcmpgt>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <cameraDetectionTask+0x15a>
							theta = 0;
 8000e5a:	4a64      	ldr	r2, [pc, #400]	; (8000fec <cameraDetectionTask+0x2dc>)
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	f04f 0400 	mov.w	r4, #0
 8000e64:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000e68:	e0ca      	b.n	8001000 <cameraDetectionTask+0x2f0>
						}
						else{
							theta = M_PI;
 8000e6a:	4a60      	ldr	r2, [pc, #384]	; (8000fec <cameraDetectionTask+0x2dc>)
 8000e6c:	a452      	add	r4, pc, #328	; (adr r4, 8000fb8 <cameraDetectionTask+0x2a8>)
 8000e6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e72:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000e76:	e0c3      	b.n	8001000 <cameraDetectionTask+0x2f0>
						}
					}
					// if directly sensed by front diode
					else if(vec_x == 0){
 8000e78:	4b59      	ldr	r3, [pc, #356]	; (8000fe0 <cameraDetectionTask+0x2d0>)
 8000e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	f7ff fdc3 	bl	8000a10 <__aeabi_dcmpeq>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <cameraDetectionTask+0x18e>
						theta = M_PI_2;
 8000e90:	4a56      	ldr	r2, [pc, #344]	; (8000fec <cameraDetectionTask+0x2dc>)
 8000e92:	a44b      	add	r4, pc, #300	; (adr r4, 8000fc0 <cameraDetectionTask+0x2b0>)
 8000e94:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e98:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000e9c:	e0b0      	b.n	8001000 <cameraDetectionTask+0x2f0>
					}
					else if(vec_x > 0){
 8000e9e:	4b50      	ldr	r3, [pc, #320]	; (8000fe0 <cameraDetectionTask+0x2d0>)
 8000ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	f7ff fdd8 	bl	8000a60 <__aeabi_dcmpgt>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d01b      	beq.n	8000eee <cameraDetectionTask+0x1de>
						theta = tanh(vec_y/vec_x);
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <cameraDetectionTask+0x2d4>)
 8000eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ebc:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <cameraDetectionTask+0x2d0>)
 8000ebe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4623      	mov	r3, r4
 8000ec6:	f7ff fc65 	bl	8000794 <__aeabi_ddiv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	ec44 3b17 	vmov	d7, r3, r4
 8000ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ed6:	eef0 0a67 	vmov.f32	s1, s15
 8000eda:	f004 f8d1 	bl	8005080 <tanh>
 8000ede:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee2:	eef0 7a60 	vmov.f32	s15, s1
 8000ee6:	4b41      	ldr	r3, [pc, #260]	; (8000fec <cameraDetectionTask+0x2dc>)
 8000ee8:	ed83 7b00 	vstr	d7, [r3]
					if(vec_y == 0){
 8000eec:	e088      	b.n	8001000 <cameraDetectionTask+0x2f0>
					}else{
						theta = M_PI - tanh(vec_y/(-1*vec_x));
 8000eee:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <cameraDetectionTask+0x2d4>)
 8000ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <cameraDetectionTask+0x2d0>)
 8000ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4623      	mov	r3, r4
 8000efe:	f7ff fc49 	bl	8000794 <__aeabi_ddiv>
 8000f02:	4603      	mov	r3, r0
 8000f04:	460c      	mov	r4, r1
 8000f06:	ec44 3b17 	vmov	d7, r3, r4
 8000f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0e:	eef0 0a67 	vmov.f32	s1, s15
 8000f12:	f004 f8b5 	bl	8005080 <tanh>
 8000f16:	ec51 0b10 	vmov	r0, r1, d0
 8000f1a:	a327      	add	r3, pc, #156	; (adr r3, 8000fb8 <cameraDetectionTask+0x2a8>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff f958 	bl	80001d4 <__adddf3>
 8000f24:	4603      	mov	r3, r0
 8000f26:	460c      	mov	r4, r1
 8000f28:	4a30      	ldr	r2, [pc, #192]	; (8000fec <cameraDetectionTask+0x2dc>)
 8000f2a:	e9c2 3400 	strd	r3, r4, [r2]
					if(vec_y == 0){
 8000f2e:	e067      	b.n	8001000 <cameraDetectionTask+0x2f0>
					}
				}
				else{
					// turn off lights
					colorSet.loc.left_side_b = 0;
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	711a      	strb	r2, [r3, #4]
					colorSet.loc.right_side_b = 0;
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	735a      	strb	r2, [r3, #13]

					colorSet.loc.left_top_b = 0;
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	709a      	strb	r2, [r3, #2]
					colorSet.loc.right_top_b = 0;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	72da      	strb	r2, [r3, #11]

					colorSet.loc.left_front_g = 0;
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	705a      	strb	r2, [r3, #1]
					colorSet.loc.right_front_g= 0;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	729a      	strb	r2, [r3, #10]

//					FrontLightsSet(&colorSet);

					memcpy(led_left_PWM, colorSet.color, 9);
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <cameraDetectionTask+0x2e4>)
 8000f56:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f58:	6810      	ldr	r0, [r2, #0]
 8000f5a:	6851      	ldr	r1, [r2, #4]
 8000f5c:	c303      	stmia	r3!, {r0, r1}
 8000f5e:	7a12      	ldrb	r2, [r2, #8]
 8000f60:	701a      	strb	r2, [r3, #0]
					memcpy(led_right_PWM, &(colorSet.color[9]), 9);
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <cameraDetectionTask+0x2e8>)
 8000f64:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <cameraDetectionTask+0x2e0>)
 8000f66:	3209      	adds	r2, #9
 8000f68:	6810      	ldr	r0, [r2, #0]
 8000f6a:	6851      	ldr	r1, [r2, #4]
 8000f6c:	c303      	stmia	r3!, {r0, r1}
 8000f6e:	7a12      	ldrb	r2, [r2, #8]
 8000f70:	701a      	strb	r2, [r3, #0]

					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000f72:	bf00      	nop
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2309      	movs	r3, #9
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <cameraDetectionTask+0x2e4>)
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2216      	movs	r2, #22
 8000f84:	2168      	movs	r1, #104	; 0x68
 8000f86:	481d      	ldr	r0, [pc, #116]	; (8000ffc <cameraDetectionTask+0x2ec>)
 8000f88:	f002 fa20 	bl	80033cc <HAL_I2C_Mem_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f0      	bne.n	8000f74 <cameraDetectionTask+0x264>
					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000f92:	bf00      	nop
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2309      	movs	r3, #9
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <cameraDetectionTask+0x2e8>)
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2216      	movs	r2, #22
 8000fa4:	216a      	movs	r1, #106	; 0x6a
 8000fa6:	4815      	ldr	r0, [pc, #84]	; (8000ffc <cameraDetectionTask+0x2ec>)
 8000fa8:	f002 fa10 	bl	80033cc <HAL_I2C_Mem_Write>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <cameraDetectionTask+0x284>

					continue;
 8000fb2:	e0cb      	b.n	800114c <cameraDetectionTask+0x43c>
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	54442d18 	.word	0x54442d18
 8000fbc:	400921fb 	.word	0x400921fb
 8000fc0:	54442d18 	.word	0x54442d18
 8000fc4:	3ff921fb 	.word	0x3ff921fb
 8000fc8:	20000050 	.word	0x20000050
 8000fcc:	20000058 	.word	0x20000058
 8000fd0:	20000060 	.word	0x20000060
 8000fd4:	20000068 	.word	0x20000068
 8000fd8:	20000080 	.word	0x20000080
 8000fdc:	40340000 	.word	0x40340000
 8000fe0:	20000118 	.word	0x20000118
 8000fe4:	20000148 	.word	0x20000148
 8000fe8:	406f4000 	.word	0x406f4000
 8000fec:	20000120 	.word	0x20000120
 8000ff0:	20000128 	.word	0x20000128
 8000ff4:	20000034 	.word	0x20000034
 8000ff8:	20000040 	.word	0x20000040
 8000ffc:	20000154 	.word	0x20000154
				}

				// calculate brightness
				if( (theta >= 0) && (theta <= M_PI_2) ){
 8001000:	4b57      	ldr	r3, [pc, #348]	; (8001160 <cameraDetectionTask+0x450>)
 8001002:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	f7ff fd1d 	bl	8000a4c <__aeabi_dcmpge>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d028      	beq.n	800106a <cameraDetectionTask+0x35a>
 8001018:	4b51      	ldr	r3, [pc, #324]	; (8001160 <cameraDetectionTask+0x450>)
 800101a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101e:	a34c      	add	r3, pc, #304	; (adr r3, 8001150 <cameraDetectionTask+0x440>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fd08 	bl	8000a38 <__aeabi_dcmple>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01d      	beq.n	800106a <cameraDetectionTask+0x35a>
					right_brightness = MAX_BRIGHTNESS;
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <cameraDetectionTask+0x454>)
 8001030:	22ff      	movs	r2, #255	; 0xff
 8001032:	701a      	strb	r2, [r3, #0]
					left_brightness = ((float) MAX_BRIGHTNESS) * sin(theta);
 8001034:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <cameraDetectionTask+0x450>)
 8001036:	ed93 7b00 	vldr	d7, [r3]
 800103a:	eeb0 0a47 	vmov.f32	s0, s14
 800103e:	eef0 0a67 	vmov.f32	s1, s15
 8001042:	f003 ffd5 	bl	8004ff0 <sin>
 8001046:	ec51 0b10 	vmov	r0, r1, d0
 800104a:	a343      	add	r3, pc, #268	; (adr r3, 8001158 <cameraDetectionTask+0x448>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fa76 	bl	8000540 <__aeabi_dmul>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	f7ff fd32 	bl	8000ac4 <__aeabi_d2uiz>
 8001060:	4603      	mov	r3, r0
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <cameraDetectionTask+0x458>)
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e029      	b.n	80010be <cameraDetectionTask+0x3ae>
				}

				// calculate right brightness
				else{
//					theta = (theta * -1) + M_PI_2; // compensate for arctan negative region
					theta = M_PI_2 + theta;
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <cameraDetectionTask+0x450>)
 800106c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001070:	a337      	add	r3, pc, #220	; (adr r3, 8001150 <cameraDetectionTask+0x440>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff f8ad 	bl	80001d4 <__adddf3>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	4a38      	ldr	r2, [pc, #224]	; (8001160 <cameraDetectionTask+0x450>)
 8001080:	e9c2 3400 	strd	r3, r4, [r2]
					left_brightness = MAX_BRIGHTNESS;
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <cameraDetectionTask+0x458>)
 8001086:	22ff      	movs	r2, #255	; 0xff
 8001088:	701a      	strb	r2, [r3, #0]
					right_brightness = ((float) MAX_BRIGHTNESS ) * sin(theta);
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <cameraDetectionTask+0x450>)
 800108c:	ed93 7b00 	vldr	d7, [r3]
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	f003 ffaa 	bl	8004ff0 <sin>
 800109c:	ec51 0b10 	vmov	r0, r1, d0
 80010a0:	a32d      	add	r3, pc, #180	; (adr r3, 8001158 <cameraDetectionTask+0x448>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff fa4b 	bl	8000540 <__aeabi_dmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	4618      	mov	r0, r3
 80010b0:	4621      	mov	r1, r4
 80010b2:	f7ff fd07 	bl	8000ac4 <__aeabi_d2uiz>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <cameraDetectionTask+0x454>)
 80010bc:	701a      	strb	r2, [r3, #0]
				}

				colorSet.loc.left_side_b = left_brightness;
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <cameraDetectionTask+0x458>)
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <cameraDetectionTask+0x45c>)
 80010c4:	711a      	strb	r2, [r3, #4]
				colorSet.loc.left_front_g = left_brightness;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <cameraDetectionTask+0x458>)
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <cameraDetectionTask+0x45c>)
 80010cc:	705a      	strb	r2, [r3, #1]
				colorSet.loc.left_top_b = left_brightness;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <cameraDetectionTask+0x458>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <cameraDetectionTask+0x45c>)
 80010d4:	709a      	strb	r2, [r3, #2]

				colorSet.loc.right_side_b = right_brightness;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <cameraDetectionTask+0x454>)
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <cameraDetectionTask+0x45c>)
 80010dc:	735a      	strb	r2, [r3, #13]
				colorSet.loc.right_front_g = right_brightness;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <cameraDetectionTask+0x454>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <cameraDetectionTask+0x45c>)
 80010e4:	729a      	strb	r2, [r3, #10]
				colorSet.loc.right_top_b = right_brightness;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <cameraDetectionTask+0x454>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <cameraDetectionTask+0x45c>)
 80010ec:	72da      	strb	r2, [r3, #11]


//				FrontLightsSet(&colorSet);
//
				memcpy(led_left_PWM, colorSet.color, 9);
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <cameraDetectionTask+0x460>)
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <cameraDetectionTask+0x45c>)
 80010f2:	6810      	ldr	r0, [r2, #0]
 80010f4:	6851      	ldr	r1, [r2, #4]
 80010f6:	c303      	stmia	r3!, {r0, r1}
 80010f8:	7a12      	ldrb	r2, [r2, #8]
 80010fa:	701a      	strb	r2, [r3, #0]
				memcpy(led_right_PWM, &(colorSet.color[9]), 9);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <cameraDetectionTask+0x464>)
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <cameraDetectionTask+0x45c>)
 8001100:	3209      	adds	r2, #9
 8001102:	6810      	ldr	r0, [r2, #0]
 8001104:	6851      	ldr	r1, [r2, #4]
 8001106:	c303      	stmia	r3!, {r0, r1}
 8001108:	7a12      	ldrb	r2, [r2, #8]
 800110a:	701a      	strb	r2, [r3, #0]

				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 800110c:	bf00      	nop
 800110e:	2364      	movs	r3, #100	; 0x64
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2309      	movs	r3, #9
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <cameraDetectionTask+0x460>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2216      	movs	r2, #22
 800111e:	2168      	movs	r1, #104	; 0x68
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <cameraDetectionTask+0x468>)
 8001122:	f002 f953 	bl	80033cc <HAL_I2C_Mem_Write>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f0      	bne.n	800110e <cameraDetectionTask+0x3fe>
				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 800112c:	bf00      	nop
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2309      	movs	r3, #9
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <cameraDetectionTask+0x464>)
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	2216      	movs	r2, #22
 800113e:	216a      	movs	r1, #106	; 0x6a
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <cameraDetectionTask+0x468>)
 8001142:	f002 f943 	bl	80033cc <HAL_I2C_Mem_Write>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <cameraDetectionTask+0x41e>
				diode_left = 0;
 800114c:	e5f1      	b.n	8000d32 <cameraDetectionTask+0x22>
 800114e:	bf00      	nop
 8001150:	54442d18 	.word	0x54442d18
 8001154:	3ff921fb 	.word	0x3ff921fb
 8001158:	00000000 	.word	0x00000000
 800115c:	406fe000 	.word	0x406fe000
 8001160:	20000120 	.word	0x20000120
 8001164:	20000140 	.word	0x20000140
 8001168:	20000141 	.word	0x20000141
 800116c:	20000128 	.word	0x20000128
 8001170:	20000034 	.word	0x20000034
 8001174:	20000040 	.word	0x20000040
 8001178:	20000154 	.word	0x20000154

0800117c <HAL_ADC_ConvCpltCallback>:
//}


volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
//	HAL_ADC_Stop_DMA(&hadc1);
	complete++;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_ADC_ConvCpltCallback+0x24>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_ADC_ConvCpltCallback+0x24>)
 8001190:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <HAL_ADC_ConvCpltCallback+0x28>)
 8001194:	f000 fd62 	bl	8001c5c <HAL_ADC_Stop_DMA>
//
//	// notify ThermopileTask that conversion is complete
//	diodeSamplesPtr = &(diodeSamples[HALF_DIODE_SAMPLES]);
//	osThreadFlagsSet(cameraDetectionTaskHandle, 0x00000004U);

}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000007c 	.word	0x2000007c
 80011a4:	20000080 	.word	0x20000080

080011a8 <HAL_ADC_ConvHalfCpltCallback>:

volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	half++;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80011bc:	701a      	strb	r2, [r3, #0]
//	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);

//	diodeSamplesPtr = diodeSamples;
//	osThreadFlagsSet(cameraDetectionTaskHandle, 0x00000004U);

}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000007d 	.word	0x2000007d

080011d0 <HAL_ADC_ErrorCallback>:

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  i++;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_ADC_ErrorCallback+0x24>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_ADC_ErrorCallback+0x24>)
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000007e 	.word	0x2000007e

080011f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_DMA_Init+0x38>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <MX_DMA_Init+0x38>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_DMA_Init+0x38>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	200b      	movs	r0, #11
 800121c:	f001 fccd 	bl	8002bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001220:	200b      	movs	r0, #11
 8001222:	f001 fce6 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_GPIO_Init+0x44>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <MX_GPIO_Init+0x44>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	6153      	str	r3, [r2, #20]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_GPIO_Init+0x44>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_GPIO_Init+0x44>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <MX_GPIO_Init+0x44>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6153      	str	r3, [r2, #20]
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_GPIO_Init+0x44>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <MX_I2C1_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301D29;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <MX_I2C1_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012b8:	f001 fff8 	bl	80032ac <HAL_I2C_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 f96a 	bl	800159a <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012ca:	f002 fb5b 	bl	8003984 <HAL_I2CEx_ConfigAnalogFilter>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 f961 	bl	800159a <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012dc:	f002 fb9d 	bl	8003a1a <HAL_I2CEx_ConfigDigitalFilter>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 f958 	bl	800159a <Error_Handler>
  }

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000154 	.word	0x20000154
 80012f4:	40005400 	.word	0x40005400
 80012f8:	00301d29 	.word	0x00301d29

080012fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <HAL_I2C_MspInit+0xb8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d145      	bne.n	80013aa <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6153      	str	r3, [r2, #20]
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800134e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f001 fe2b 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001376:	2312      	movs	r3, #18
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137a:	2301      	movs	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001382:	2304      	movs	r3, #4
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <HAL_I2C_MspInit+0xc0>)
 800138e:	f001 fe1b 	bl	8002fc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 8001398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_I2C_MspInit+0xbc>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40005400 	.word	0x40005400
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000400 	.word	0x48000400

080013c0 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	uint8_t deviceAddress = ADDR << 1;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	77fb      	strb	r3, [r7, #31]
	uint8_t led_PWM[9] = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	721a      	strb	r2, [r3, #8]
	uint8_t packet;

	// enable chip
	packet = LP5525_CHIP_EN;
 80013dc:	2340      	movs	r3, #64	; 0x40
 80013de:	74fb      	strb	r3, [r7, #19]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80013e0:	bf00      	nop
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	b299      	uxth	r1, r3
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f107 0313 	add.w	r3, r7, #19
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	2200      	movs	r2, #0
 80013fa:	4835      	ldr	r0, [pc, #212]	; (80014d0 <setup_LP5523+0x110>)
 80013fc:	f001 ffe6 	bl	80033cc <HAL_I2C_Mem_Write>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ed      	bne.n	80013e2 <setup_LP5523+0x22>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8001406:	234f      	movs	r3, #79	; 0x4f
 8001408:	74fb      	strb	r3, [r7, #19]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 800140a:	bf00      	nop
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	b299      	uxth	r1, r3
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 0313 	add.w	r3, r7, #19
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	2236      	movs	r2, #54	; 0x36
 8001424:	482a      	ldr	r0, [pc, #168]	; (80014d0 <setup_LP5523+0x110>)
 8001426:	f001 ffd1 	bl	80033cc <HAL_I2C_Mem_Write>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ed      	bne.n	800140c <setup_LP5523+0x4c>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8001430:	bf00      	nop
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	b299      	uxth	r1, r3
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2309      	movs	r3, #9
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	2216      	movs	r2, #22
 800144a:	4821      	ldr	r0, [pc, #132]	; (80014d0 <setup_LP5523+0x110>)
 800144c:	f001 ffbe 	bl	80033cc <HAL_I2C_Mem_Write>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1ed      	bne.n	8001432 <setup_LP5523+0x72>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 8001456:	bf00      	nop
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	b299      	uxth	r1, r3
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	2309      	movs	r3, #9
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <setup_LP5523+0x114>)
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2226      	movs	r2, #38	; 0x26
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <setup_LP5523+0x110>)
 8001470:	f001 ffac 	bl	80033cc <HAL_I2C_Mem_Write>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1ee      	bne.n	8001458 <setup_LP5523+0x98>

	// enable logarithmic dimming
	packet = LOG_EN;
 800147a:	2320      	movs	r3, #32
 800147c:	74fb      	strb	r3, [r7, #19]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 800147e:	7cfb      	ldrb	r3, [r7, #19]
 8001480:	723b      	strb	r3, [r7, #8]
 8001482:	7cfb      	ldrb	r3, [r7, #19]
 8001484:	727b      	strb	r3, [r7, #9]
 8001486:	7cfb      	ldrb	r3, [r7, #19]
 8001488:	72bb      	strb	r3, [r7, #10]
 800148a:	7cfb      	ldrb	r3, [r7, #19]
 800148c:	72fb      	strb	r3, [r7, #11]
 800148e:	7cfb      	ldrb	r3, [r7, #19]
 8001490:	733b      	strb	r3, [r7, #12]
 8001492:	7cfb      	ldrb	r3, [r7, #19]
 8001494:	737b      	strb	r3, [r7, #13]
 8001496:	7cfb      	ldrb	r3, [r7, #19]
 8001498:	73bb      	strb	r3, [r7, #14]
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	7cfb      	ldrb	r3, [r7, #19]
 80014a0:	743b      	strb	r3, [r7, #16]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 80014a2:	bf00      	nop
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	b299      	uxth	r1, r3
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	2309      	movs	r3, #9
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2301      	movs	r3, #1
 80014ba:	2206      	movs	r2, #6
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <setup_LP5523+0x110>)
 80014be:	f001 ff85 	bl	80033cc <HAL_I2C_Mem_Write>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ed      	bne.n	80014a4 <setup_LP5523+0xe4>

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000154 	.word	0x20000154
 80014d4:	20000000 	.word	0x20000000

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014dc:	f000 f90a 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e0:	f000 f80b 	bl	80014fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e4:	f7ff fea6 	bl	8001234 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014e8:	f7ff fec8 	bl	800127c <MX_I2C1_Init>
  MX_DMA_Init();
 80014ec:	f7ff fe84 	bl	80011f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80014f0:	f7ff fb08 	bl	8000b04 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  cameraDetectionTask();
 80014f4:	f7ff fc0c 	bl	8000d10 <cameraDetectionTask>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <main+0x20>

080014fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b09c      	sub	sp, #112	; 0x70
 80014fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001504:	2228      	movs	r2, #40	; 0x28
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fd69 	bl	8004fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2230      	movs	r2, #48	; 0x30
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fd5b 	bl	8004fe0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152a:	2302      	movs	r3, #2
 800152c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	2301      	movs	r3, #1
 8001530:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001532:	2310      	movs	r3, #16
 8001534:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001536:	2300      	movs	r3, #0
 8001538:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fab8 	bl	8003ab4 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x54>
  {
    Error_Handler();
 800154a:	f000 f826 	bl	800159a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001552:	2300      	movs	r3, #0
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001562:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f003 f9ab 	bl	80048c4 <HAL_RCC_ClockConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001574:	f000 f811 	bl	800159a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001578:	2320      	movs	r3, #32
 800157a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fb84 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800158e:	f000 f804 	bl	800159a <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	3770      	adds	r7, #112	; 0x70
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_MspInit+0x44>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_MspInit+0x44>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_MspInit+0x44>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x44>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x44>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x44>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f89c 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA1_Channel1_IRQHandler+0x10>)
 8001652:	f001 fbc7 	bl	8002de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000d0 	.word	0x200000d0

08001660 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <ADC1_IRQHandler+0x10>)
 8001666:	f000 fb55 	bl	8001d14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000080 	.word	0x20000080

08001674 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <SystemInit+0x28>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <SystemInit+0x28>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <SystemInit+0x28>)
 800168a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168e:	609a      	str	r2, [r3, #8]
#endif
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016a6:	e003      	b.n	80016b0 <LoopCopyDataInit>

080016a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ae:	3104      	adds	r1, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016b8:	d3f6      	bcc.n	80016a8 <CopyDataInit>
	ldr	r2, =_sbss
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016bc:	e002      	b.n	80016c4 <LoopFillZerobss>

080016be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016c0:	f842 3b04 	str.w	r3, [r2], #4

080016c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <LoopForever+0x16>)
	cmp	r2, r3
 80016c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016c8:	d3f9      	bcc.n	80016be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ca:	f7ff ffd3 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ce:	f003 fc63 	bl	8004f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016d2:	f7ff ff01 	bl	80014d8 <main>

080016d6 <LoopForever>:

LoopForever:
    b LoopForever
 80016d6:	e7fe      	b.n	80016d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016d8:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80016dc:	080067b0 	.word	0x080067b0
	ldr	r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016e4:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 80016e8:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 80016ec:	200001a4 	.word	0x200001a4

080016f0 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <COMP2_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_Init+0x28>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_Init+0x28>)
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f001 fa4d 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff ff4a 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000

08001720 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fa65 	bl	8002c0e <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f001 fa2d 	bl	8002bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000000c 	.word	0x2000000c
 8001778:	20000014 	.word	0x20000014
 800177c:	20000010 	.word	0x20000010

08001780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000014 	.word	0x20000014
 80017a4:	200001a0 	.word	0x200001a0

080017a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200001a0 	.word	0x200001a0

080017c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_Delay+0x40>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000014 	.word	0x20000014

08001804 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b09a      	sub	sp, #104	; 0x68
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e169      	b.n	8001b0c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d176      	bne.n	8001938 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d152      	bne.n	80018f8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff f9c3 	bl	8000bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d13b      	bne.n	80018f8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 ffb1 	bl	80027e8 <ADC_Disable>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	d12f      	bne.n	80018f8 <HAL_ADC_Init+0xe0>
 8001898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800189c:	2b00      	cmp	r3, #0
 800189e:	d12b      	bne.n	80018f8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018a8:	f023 0302 	bic.w	r3, r3, #2
 80018ac:	f043 0202 	orr.w	r2, r3, #2
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d4:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <HAL_ADC_Init+0x2fc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a8f      	ldr	r2, [pc, #572]	; (8001b18 <HAL_ADC_Init+0x300>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9a      	lsrs	r2, r3, #18
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ea:	e002      	b.n	80018f2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001914:	d110      	bne.n	8001938 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f023 0312 	bic.w	r3, r3, #18
 800191e:	f043 0210 	orr.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 80d6 	bne.w	8001af2 <HAL_ADC_Init+0x2da>
 8001946:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80d1 	bne.w	8001af2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 80c9 	bne.w	8001af2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001968:	f043 0202 	orr.w	r2, r3, #2
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001970:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <HAL_ADC_Init+0x304>)
 8001972:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_ADC_Init+0x180>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_Init+0x180>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_ADC_Init+0x182>
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d11c      	bne.n	80019d8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800199e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_ADC_Init+0x1a8>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_Init+0x1a8>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_ADC_Init+0x1aa>
 80019c0:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80019c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7e5b      	ldrb	r3, [r3, #25]
 80019dc:	035b      	lsls	r3, r3, #13
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019e2:	2a01      	cmp	r2, #1
 80019e4:	d002      	beq.n	80019ec <HAL_ADC_Init+0x1d4>
 80019e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ea:	e000      	b.n	80019ee <HAL_ADC_Init+0x1d6>
 80019ec:	2200      	movs	r2, #0
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019fe:	4313      	orrs	r3, r2
 8001a00:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d11b      	bne.n	8001a44 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e5b      	ldrb	r3, [r3, #25]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	045a      	lsls	r2, r3, #17
 8001a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	663b      	str	r3, [r7, #96]	; 0x60
 8001a26:	e00d      	b.n	8001a44 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d007      	beq.n	8001a5c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	4313      	orrs	r3, r2
 8001a56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d114      	bne.n	8001a94 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a78:	f023 0302 	bic.w	r3, r3, #2
 8001a7c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7e1b      	ldrb	r3, [r3, #24]
 8001a82:	039a      	lsls	r2, r3, #14
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a90:	4313      	orrs	r3, r2
 8001a92:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_ADC_Init+0x308>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d10c      	bne.n	8001aca <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f023 010f 	bic.w	r1, r3, #15
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	1e5a      	subs	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac8:	e007      	b.n	8001ada <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020f 	bic.w	r2, r2, #15
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f023 0303 	bic.w	r3, r3, #3
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
 8001af0:	e00a      	b.n	8001b08 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f023 0312 	bic.w	r3, r3, #18
 8001afa:	f043 0210 	orr.w	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3768      	adds	r7, #104	; 0x68
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000000c 	.word	0x2000000c
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	50000300 	.word	0x50000300
 8001b20:	fff0c007 	.word	0xfff0c007

08001b24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d17e      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_Start_DMA+0x2c>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e07a      	b.n	8001c46 <HAL_ADC_Start_DMA+0x122>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fde7 	bl	800272c <ADC_Enable>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d166      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb2:	d106      	bne.n	8001bc2 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f023 0206 	bic.w	r2, r3, #6
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <HAL_ADC_Start_DMA+0x12c>)
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_ADC_Start_DMA+0x130>)
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_ADC_Start_DMA+0x134>)
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	221c      	movs	r2, #28
 8001bee:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0210 	orr.w	r2, r2, #16
 8001bfe:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3340      	adds	r3, #64	; 0x40
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f001 f848 	bl	8002cb4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0204 	orr.w	r2, r2, #4
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e006      	b.n	8001c44 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c3e:	e001      	b.n	8001c44 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c40:	2302      	movs	r3, #2
 8001c42:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08002661 	.word	0x08002661
 8001c54:	080026db 	.word	0x080026db
 8001c58:	080026f7 	.word	0x080026f7

08001c5c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Stop_DMA+0x1a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e04a      	b.n	8001d0c <HAL_ADC_Stop_DMA+0xb0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001c7e:	216c      	movs	r1, #108	; 0x6c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fe11 	bl	80028a8 <ADC_ConversionStop>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d138      	bne.n	8001d02 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 f864 	bl	8002d72 <HAL_DMA_Abort>
 8001caa:	4603      	mov	r3, r0
 8001cac:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0210 	bic.w	r2, r2, #16
 8001cce:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fd86 	bl	80027e8 <ADC_Disable>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fd80 	bl	80027e8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d106      	bne.n	8001d44 <HAL_ADC_IRQHandler+0x30>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00d      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d15e      	bne.n	8001e10 <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d157      	bne.n	8001e10 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d139      	bne.n	8001e02 <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d134      	bne.n	8001e02 <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d12d      	bne.n	8001e02 <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11a      	bne.n	8001dea <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020c 	bic.w	r2, r2, #12
 8001dc2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d112      	bne.n	8001e02 <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
 8001de8:	e00b      	b.n	8001e02 <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f043 0210 	orr.w	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff f9ba 	bl	800117c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	220c      	movs	r2, #12
 8001e0e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d106      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x118>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d00d      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d16d      	bne.n	8001f16 <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d166      	bne.n	8001f16 <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x178>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d149      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x1f4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d142      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x1f4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d13d      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x1f4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d136      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x1f4>
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d12d      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x1f4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d11a      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec8:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d112      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x1f4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
 8001eee:	e00b      	b.n	8001f08 <HAL_ADC_IRQHandler+0x1f4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f043 0210 	orr.w	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8cb 	bl	80020a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2260      	movs	r2, #96	; 0x60
 8001f14:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d113      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x238>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	2b80      	cmp	r3, #128	; 0x80
 8001f30:	d10c      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fc60 	bl	8001804 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5a:	d115      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x274>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f6a:	d10d      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8a7 	bl	80020cc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f86:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f96:	d115      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x2b0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f893 	bl	80020e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d13d      	bne.n	800204e <HAL_ADC_IRQHandler+0x33a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d136      	bne.n	800204e <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e019      	b.n	8002022 <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <HAL_ADC_IRQHandler+0x38c>)
 8001ff0:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10a      	bne.n	8002022 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 800200c:	2301      	movs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e007      	b.n	8002022 <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10e      	bne.n	8002046 <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f043 0202 	orr.w	r2, r3, #2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff f8c5 	bl	80011d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2210      	movs	r2, #16
 800204c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205c:	d11b      	bne.n	8002096 <HAL_ADC_IRQHandler+0x382>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206c:	d113      	bne.n	8002096 <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f043 0208 	orr.w	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f811 	bl	80020b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	50000300 	.word	0x50000300

080020a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b09b      	sub	sp, #108	; 0x6c
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x22>
 8002112:	2302      	movs	r3, #2
 8002114:	e299      	b.n	800264a <HAL_ADC_ConfigChannel+0x556>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f040 827d 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d81c      	bhi.n	8002170 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	461a      	mov	r2, r3
 800214a:	231f      	movs	r3, #31
 800214c:	4093      	lsls	r3, r2
 800214e:	43db      	mvns	r3, r3
 8002150:	4019      	ands	r1, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa00 f203 	lsl.w	r2, r0, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
 800216e:	e063      	b.n	8002238 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b09      	cmp	r3, #9
 8002176:	d81e      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	3b1e      	subs	r3, #30
 800218c:	221f      	movs	r2, #31
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	4019      	ands	r1, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	3b1e      	subs	r3, #30
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
 80021b4:	e040      	b.n	8002238 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b0e      	cmp	r3, #14
 80021bc:	d81e      	bhi.n	80021fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	3b3c      	subs	r3, #60	; 0x3c
 80021d2:	221f      	movs	r2, #31
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	4019      	ands	r1, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	3b3c      	subs	r3, #60	; 0x3c
 80021ee:	fa00 f203 	lsl.w	r2, r0, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38
 80021fa:	e01d      	b.n	8002238 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	3b5a      	subs	r3, #90	; 0x5a
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	4019      	ands	r1, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	3b5a      	subs	r3, #90	; 0x5a
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80e5 	bne.w	8002412 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b09      	cmp	r3, #9
 800224e:	d91c      	bls.n	800228a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6999      	ldr	r1, [r3, #24]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3b1e      	subs	r3, #30
 8002262:	2207      	movs	r2, #7
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6898      	ldr	r0, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	3b1e      	subs	r3, #30
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	619a      	str	r2, [r3, #24]
 8002288:	e019      	b.n	80022be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6959      	ldr	r1, [r3, #20]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	2207      	movs	r2, #7
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4019      	ands	r1, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6898      	ldr	r0, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	3b01      	subs	r3, #1
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d84f      	bhi.n	8002380 <HAL_ADC_ConfigChannel+0x28c>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	0800231b 	.word	0x0800231b
 80022f0:	0800233d 	.word	0x0800233d
 80022f4:	0800235f 	.word	0x0800235f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022fe:	4b99      	ldr	r3, [pc, #612]	; (8002564 <HAL_ADC_ConfigChannel+0x470>)
 8002300:	4013      	ands	r3, r2
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	0691      	lsls	r1, r2, #26
 8002308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800230a:	430a      	orrs	r2, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002316:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002318:	e07e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002320:	4b90      	ldr	r3, [pc, #576]	; (8002564 <HAL_ADC_ConfigChannel+0x470>)
 8002322:	4013      	ands	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	0691      	lsls	r1, r2, #26
 800232a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800232c:	430a      	orrs	r2, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002338:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800233a:	e06d      	b.n	8002418 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_ADC_ConfigChannel+0x470>)
 8002344:	4013      	ands	r3, r2
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	0691      	lsls	r1, r2, #26
 800234c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800234e:	430a      	orrs	r2, r1
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800235a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800235c:	e05c      	b.n	8002418 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002364:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <HAL_ADC_ConfigChannel+0x470>)
 8002366:	4013      	ands	r3, r2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	0691      	lsls	r1, r2, #26
 800236e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002370:	430a      	orrs	r2, r1
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800237c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800237e:	e04b      	b.n	8002418 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	429a      	cmp	r2, r3
 8002392:	d107      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	069b      	lsls	r3, r3, #26
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	069b      	lsls	r3, r3, #26
 80023d8:	429a      	cmp	r2, r3
 80023da:	d107      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	069b      	lsls	r3, r3, #26
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d10a      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800240e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002410:	e001      	b.n	8002416 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002412:	bf00      	nop
 8002414:	e000      	b.n	8002418 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002416:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d108      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x344>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x344>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_ADC_ConfigChannel+0x346>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 80ff 	bne.w	800263e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d00f      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	400a      	ands	r2, r1
 8002462:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002466:	e049      	b.n	80024fc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b09      	cmp	r3, #9
 8002488:	d91c      	bls.n	80024c4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6999      	ldr	r1, [r3, #24]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	3b1b      	subs	r3, #27
 800249c:	2207      	movs	r2, #7
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	4019      	ands	r1, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6898      	ldr	r0, [r3, #8]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	3b1b      	subs	r3, #27
 80024b6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	619a      	str	r2, [r3, #24]
 80024c2:	e01b      	b.n	80024fc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6959      	ldr	r1, [r3, #20]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	4019      	ands	r1, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6898      	ldr	r0, [r3, #8]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	fa00 f203 	lsl.w	r2, r0, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_ADC_ConfigChannel+0x474>)
 80024fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b10      	cmp	r3, #16
 8002506:	d105      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d014      	beq.n	800253e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002518:	2b11      	cmp	r3, #17
 800251a:	d105      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800251c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800252c:	2b12      	cmp	r3, #18
 800252e:	f040 8086 	bne.w	800263e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d17f      	bne.n	800263e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d10d      	bne.n	800256c <HAL_ADC_ConfigChannel+0x478>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d106      	bne.n	800256c <HAL_ADC_ConfigChannel+0x478>
 800255e:	2301      	movs	r3, #1
 8002560:	e005      	b.n	800256e <HAL_ADC_ConfigChannel+0x47a>
 8002562:	bf00      	nop
 8002564:	83fff000 	.word	0x83fff000
 8002568:	50000300 	.word	0x50000300
 800256c:	2300      	movs	r3, #0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d150      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002572:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x4a0>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x4a0>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_ADC_ConfigChannel+0x4a2>
 8002594:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002596:	2b00      	cmp	r3, #0
 8002598:	d13c      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d11d      	bne.n	80025de <HAL_ADC_ConfigChannel+0x4ea>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025aa:	d118      	bne.n	80025de <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_ADC_ConfigChannel+0x564>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a27      	ldr	r2, [pc, #156]	; (800265c <HAL_ADC_ConfigChannel+0x568>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9a      	lsrs	r2, r3, #18
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ce:	e002      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f9      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025dc:	e02e      	b.n	800263c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b11      	cmp	r3, #17
 80025e4:	d10b      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x50a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ee:	d106      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80025f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025fc:	e01e      	b.n	800263c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b12      	cmp	r3, #18
 8002604:	d11a      	bne.n	800263c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800260e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002610:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002612:	e013      	b.n	800263c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002626:	e00a      	b.n	800263e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800263a:	e000      	b.n	800263e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800263c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002646:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800264a:	4618      	mov	r0, r3
 800264c:	376c      	adds	r7, #108	; 0x6c
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	2000000c 	.word	0x2000000c
 800265c:	431bde83 	.word	0x431bde83

08002660 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002676:	2b00      	cmp	r3, #0
 8002678:	d126      	bne.n	80026c8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002690:	2b00      	cmp	r3, #0
 8002692:	d115      	bne.n	80026c0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7fe fd5b 	bl	800117c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026c6:	e004      	b.n	80026d2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7fe fd5d 	bl	80011a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7fe fd57 	bl	80011d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <ADC_Enable+0x2c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <ADC_Enable+0x2c>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <ADC_Enable+0x2e>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d13c      	bne.n	80027d8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <ADC_Enable+0xb8>)
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0210 	orr.w	r2, r3, #16
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e028      	b.n	80027da <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002798:	f7ff f806 	bl	80017a8 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800279e:	e014      	b.n	80027ca <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027a0:	f7ff f802 	bl	80017a8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d90d      	bls.n	80027ca <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e007      	b.n	80027da <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d1e3      	bne.n	80027a0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	8000003f 	.word	0x8000003f

080027e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d108      	bne.n	8002814 <ADC_Disable+0x2c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <ADC_Disable+0x2c>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <ADC_Disable+0x2e>
 8002814:	2300      	movs	r3, #0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d040      	beq.n	800289c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030d 	and.w	r3, r3, #13
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10f      	bne.n	8002848 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0202 	orr.w	r2, r2, #2
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2203      	movs	r2, #3
 800283e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002840:	f7fe ffb2 	bl	80017a8 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002846:	e022      	b.n	800288e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f043 0210 	orr.w	r2, r3, #16
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e01c      	b.n	800289e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002864:	f7fe ffa0 	bl	80017a8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d90d      	bls.n	800288e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e007      	b.n	800289e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d0e3      	beq.n	8002864 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8093 	beq.w	80029f4 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028dc:	d12a      	bne.n	8002934 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d126      	bne.n	8002934 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d122      	bne.n	8002934 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80028ee:	230c      	movs	r3, #12
 80028f0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80028f2:	e014      	b.n	800291e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4a42      	ldr	r2, [pc, #264]	; (8002a00 <ADC_ConversionStop+0x158>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d90d      	bls.n	8002918 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0210 	orr.w	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e06e      	b.n	80029f6 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	3301      	adds	r3, #1
 800291c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d1e3      	bne.n	80028f4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2240      	movs	r2, #64	; 0x40
 8002932:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b60      	cmp	r3, #96	; 0x60
 8002938:	d015      	beq.n	8002966 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b04      	cmp	r3, #4
 8002946:	d10e      	bne.n	8002966 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0210 	orr.w	r2, r2, #16
 8002964:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d015      	beq.n	8002998 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d10e      	bne.n	8002998 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b60      	cmp	r3, #96	; 0x60
 800299c:	d004      	beq.n	80029a8 <ADC_ConversionStop+0x100>
 800299e:	2b6c      	cmp	r3, #108	; 0x6c
 80029a0:	d105      	bne.n	80029ae <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029a2:	230c      	movs	r3, #12
 80029a4:	617b      	str	r3, [r7, #20]
        break;
 80029a6:	e005      	b.n	80029b4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80029a8:	2308      	movs	r3, #8
 80029aa:	617b      	str	r3, [r7, #20]
        break;
 80029ac:	e002      	b.n	80029b4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029ae:	2304      	movs	r3, #4
 80029b0:	617b      	str	r3, [r7, #20]
        break;
 80029b2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fef8 	bl	80017a8 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029ba:	e014      	b.n	80029e6 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029bc:	f7fe fef4 	bl	80017a8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b0b      	cmp	r3, #11
 80029c8:	d90d      	bls.n	80029e6 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e007      	b.n	80029f6 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e3      	bne.n	80029bc <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	000993ff 	.word	0x000993ff

08002a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <__NVIC_EnableIRQ+0x38>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db0a      	blt.n	8002ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	490c      	ldr	r1, [pc, #48]	; (8002af0 <__NVIC_SetPriority+0x4c>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002acc:	e00a      	b.n	8002ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4908      	ldr	r1, [pc, #32]	; (8002af4 <__NVIC_SetPriority+0x50>)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3b04      	subs	r3, #4
 8002adc:	0112      	lsls	r2, r2, #4
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	761a      	strb	r2, [r3, #24]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f1c3 0307 	rsb	r3, r3, #7
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	bf28      	it	cs
 8002b16:	2304      	movcs	r3, #4
 8002b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d902      	bls.n	8002b28 <NVIC_EncodePriority+0x30>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3b03      	subs	r3, #3
 8002b26:	e000      	b.n	8002b2a <NVIC_EncodePriority+0x32>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	4313      	orrs	r3, r2
         );
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	; 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b70:	d301      	bcc.n	8002b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <SysTick_Config+0x40>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f7ff ff8e 	bl	8002aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SysTick_Config+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <SysTick_Config+0x40>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000e010 	.word	0xe000e010

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff29 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bcc:	f7ff ff3e 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff8e 	bl	8002af8 <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff5d 	bl	8002aa4 <__NVIC_SetPriority>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff31 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffa2 	bl	8002b60 <SysTick_Config>
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e037      	b.n	8002cac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c52:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f97a 	bl	8002f88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}  
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Start_IT+0x20>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e04a      	b.n	8002d6a <HAL_DMA_Start_IT+0xb6>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d13a      	bne.n	8002d5c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f90d 	bl	8002f2a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 020e 	orr.w	r2, r2, #14
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e00f      	b.n	8002d4a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 020a 	orr.w	r2, r2, #10
 8002d38:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0204 	bic.w	r2, r2, #4
 8002d48:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e005      	b.n	8002d68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d008      	beq.n	8002d96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e020      	b.n	8002dd8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 020e 	bic.w	r2, r2, #14
 8002da4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2204      	movs	r2, #4
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d024      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x72>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01f      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d06a      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e54:	e065      	b.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02c      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xdc>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d027      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 020a 	bic.w	r2, r2, #10
 8002e8c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d035      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002ebe:	e030      	b.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d028      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d023      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 020e 	bic.w	r2, r2, #14
 8002ee8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
    }
  }
}  
 8002f20:	e7ff      	b.n	8002f22 <HAL_DMA_IRQHandler+0x13e>
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f202 	lsl.w	r2, r1, r2
 8002f46:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d108      	bne.n	8002f6a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f68:	e007      	b.n	8002f7a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	60da      	str	r2, [r3, #12]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <DMA_CalcBaseAndBitshift+0x34>)
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <DMA_CalcBaseAndBitshift+0x38>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <DMA_CalcBaseAndBitshift+0x3c>)
 8002fac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	bffdfff8 	.word	0xbffdfff8
 8002fc0:	cccccccd 	.word	0xcccccccd
 8002fc4:	40020000 	.word	0x40020000

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd6:	e14e      	b.n	8003276 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8140 	beq.w	8003270 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x38>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b12      	cmp	r3, #18
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	6939      	ldr	r1, [r7, #16]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d00b      	beq.n	800309c <HAL_GPIO_Init+0xd4>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d007      	beq.n	800309c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003090:	2b11      	cmp	r3, #17
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b12      	cmp	r3, #18
 800309a:	d130      	bne.n	80030fe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d2:	2201      	movs	r2, #1
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 0201 	and.w	r2, r3, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 809a 	beq.w	8003270 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313c:	4b55      	ldr	r3, [pc, #340]	; (8003294 <HAL_GPIO_Init+0x2cc>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_GPIO_Init+0x2cc>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6193      	str	r3, [r2, #24]
 8003148:	4b52      	ldr	r3, [pc, #328]	; (8003294 <HAL_GPIO_Init+0x2cc>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003154:	4a50      	ldr	r2, [pc, #320]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3302      	adds	r3, #2
 800315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	220f      	movs	r2, #15
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800317e:	d013      	beq.n	80031a8 <HAL_GPIO_Init+0x1e0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_GPIO_Init+0x2d4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00d      	beq.n	80031a4 <HAL_GPIO_Init+0x1dc>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a45      	ldr	r2, [pc, #276]	; (80032a0 <HAL_GPIO_Init+0x2d8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d007      	beq.n	80031a0 <HAL_GPIO_Init+0x1d8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a44      	ldr	r2, [pc, #272]	; (80032a4 <HAL_GPIO_Init+0x2dc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_GPIO_Init+0x1d4>
 8003198:	2303      	movs	r3, #3
 800319a:	e006      	b.n	80031aa <HAL_GPIO_Init+0x1e2>
 800319c:	2305      	movs	r3, #5
 800319e:	e004      	b.n	80031aa <HAL_GPIO_Init+0x1e2>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e002      	b.n	80031aa <HAL_GPIO_Init+0x1e2>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_GPIO_Init+0x1e2>
 80031a8:	2300      	movs	r3, #0
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	f002 0203 	and.w	r2, r2, #3
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	4093      	lsls	r3, r2
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031ba:	4937      	ldr	r1, [pc, #220]	; (8003298 <HAL_GPIO_Init+0x2d0>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c8:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031ec:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003216:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321c:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800326a:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	f47f aea9 	bne.w	8002fd8 <HAL_GPIO_Init+0x10>
  }
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	48000400 	.word	0x48000400
 80032a0:	48000800 	.word	0x48000800
 80032a4:	48000c00 	.word	0x48000c00
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e081      	b.n	80033c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f812 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	e006      	b.n	8003334 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003332:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d104      	bne.n	8003346 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003344:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003358:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003368:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	ea42 0103 	orr.w	r1, r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	021a      	lsls	r2, r3, #8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69d9      	ldr	r1, [r3, #28]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	460b      	mov	r3, r1
 80033e0:	813b      	strh	r3, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	f040 80f9 	bne.w	80035e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_I2C_Mem_Write+0x34>
 80033fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0ed      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_I2C_Mem_Write+0x4e>
 8003416:	2302      	movs	r3, #2
 8003418:	e0e6      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003422:	f7fe f9c1 	bl	80017a8 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2319      	movs	r3, #25
 800342e:	2201      	movs	r2, #1
 8003430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f955 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0d1      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2221      	movs	r2, #33	; 0x21
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800346c:	88f8      	ldrh	r0, [r7, #6]
 800346e:	893a      	ldrh	r2, [r7, #8]
 8003470:	8979      	ldrh	r1, [r7, #10]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4603      	mov	r3, r0
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f8b9 	bl	80035f4 <I2C_RequestMemoryWrite>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0a9      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2bff      	cmp	r3, #255	; 0xff
 800349c:	d90e      	bls.n	80034bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	8979      	ldrh	r1, [r7, #10]
 80034ac:	2300      	movs	r3, #0
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fa37 	bl	8003928 <I2C_TransferConfig>
 80034ba:	e00f      	b.n	80034dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	8979      	ldrh	r1, [r7, #10]
 80034ce:	2300      	movs	r3, #0
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fa26 	bl	8003928 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f93f 	bl	8003764 <I2C_WaitOnTXISFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e07b      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d034      	beq.n	8003594 <HAL_I2C_Mem_Write+0x1c8>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d130      	bne.n	8003594 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f8d1 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e04d      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2bff      	cmp	r3, #255	; 0xff
 8003554:	d90e      	bls.n	8003574 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	b2da      	uxtb	r2, r3
 8003562:	8979      	ldrh	r1, [r7, #10]
 8003564:	2300      	movs	r3, #0
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f9db 	bl	8003928 <I2C_TransferConfig>
 8003572:	e00f      	b.n	8003594 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003582:	b2da      	uxtb	r2, r3
 8003584:	8979      	ldrh	r1, [r7, #10]
 8003586:	2300      	movs	r3, #0
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f9ca 	bl	8003928 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d19e      	bne.n	80034dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f91e 	bl	80037e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e01a      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2220      	movs	r2, #32
 80035b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_I2C_Mem_Write+0x224>)
 80035c6:	400b      	ands	r3, r1
 80035c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e000      	b.n	80035e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
  }
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	fe00e800 	.word	0xfe00e800

080035f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4603      	mov	r3, r0
 8003604:	817b      	strh	r3, [r7, #10]
 8003606:	460b      	mov	r3, r1
 8003608:	813b      	strh	r3, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <I2C_RequestMemoryWrite+0xa4>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f983 	bl	8003928 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f89c 	bl	8003764 <I2C_WaitOnTXISFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e02c      	b.n	8003690 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800363c:	893b      	ldrh	r3, [r7, #8]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
 8003646:	e015      	b.n	8003674 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003648:	893b      	ldrh	r3, [r7, #8]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	b29b      	uxth	r3, r3
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f882 	bl	8003764 <I2C_WaitOnTXISFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e012      	b.n	8003690 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800366a:	893b      	ldrh	r3, [r7, #8]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2200      	movs	r2, #0
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f830 	bl	80036e4 <I2C_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	80002000 	.word	0x80002000

0800369c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d103      	bne.n	80036ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d007      	beq.n	80036d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	619a      	str	r2, [r3, #24]
  }
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	e022      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d01e      	beq.n	800373c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe f853 	bl	80017a8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d113      	bne.n	800373c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e00f      	b.n	800375c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	429a      	cmp	r2, r3
 8003758:	d0cd      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003770:	e02c      	b.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f870 	bl	800385c <I2C_IsAcknowledgeFailed>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e02a      	b.n	80037dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d01e      	beq.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe f80b 	bl	80017a8 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d113      	bne.n	80037cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d1cb      	bne.n	8003772 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f0:	e028      	b.n	8003844 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f830 	bl	800385c <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e026      	b.n	8003854 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fd ffcf 	bl	80017a8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d113      	bne.n	8003844 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b20      	cmp	r3, #32
 8003850:	d1cf      	bne.n	80037f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b10      	cmp	r3, #16
 8003874:	d151      	bne.n	800391a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003876:	e022      	b.n	80038be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d01e      	beq.n	80038be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fd ff92 	bl	80017a8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_IsAcknowledgeFailed+0x3a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e02e      	b.n	800391c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d1d5      	bne.n	8003878 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2220      	movs	r2, #32
 80038da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff fedd 	bl	800369c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <I2C_IsAcknowledgeFailed+0xc8>)
 80038ee:	400b      	ands	r3, r1
 80038f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f043 0204 	orr.w	r2, r3, #4
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	fe00e800 	.word	0xfe00e800

08003928 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	4613      	mov	r3, r2
 8003938:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	0d5b      	lsrs	r3, r3, #21
 8003944:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <I2C_TransferConfig+0x58>)
 800394a:	430b      	orrs	r3, r1
 800394c:	43db      	mvns	r3, r3
 800394e:	ea02 0103 	and.w	r1, r2, r3
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003958:	7a7b      	ldrb	r3, [r7, #9]
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	03ff63ff 	.word	0x03ff63ff

08003984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b20      	cmp	r3, #32
 8003998:	d138      	bne.n	8003a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e032      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	; 0x24
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d139      	bne.n	8003aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e033      	b.n	8003aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2224      	movs	r2, #36	; 0x24
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f000 bef4 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 816a 	beq.w	8003db2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ade:	4bb3      	ldr	r3, [pc, #716]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d00c      	beq.n	8003b04 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aea:	4bb0      	ldr	r3, [pc, #704]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d159      	bne.n	8003baa <HAL_RCC_OscConfig+0xf6>
 8003af6:	4bad      	ldr	r3, [pc, #692]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d152      	bne.n	8003baa <HAL_RCC_OscConfig+0xf6>
 8003b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCC_OscConfig+0x82>
 8003b30:	4b9e      	ldr	r3, [pc, #632]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0xae>
 8003b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003b5e:	4b93      	ldr	r3, [pc, #588]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b6e:	fa92 f2a2 	rbit	r2, r2
 8003b72:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b7a:	fab2 f282 	clz	r2, r2
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	f002 021f 	and.w	r2, r2, #31
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 810c 	beq.w	8003db0 <HAL_RCC_OscConfig+0x2fc>
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 8106 	bne.w	8003db0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f000 be86 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x110>
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e030      	b.n	8003c26 <HAL_RCC_OscConfig+0x172>
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x134>
 8003bce:	4b77      	ldr	r3, [pc, #476]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a76      	ldr	r2, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b74      	ldr	r3, [pc, #464]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a73      	ldr	r2, [pc, #460]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01e      	b.n	8003c26 <HAL_RCC_OscConfig+0x172>
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf2:	d10c      	bne.n	8003c0e <HAL_RCC_OscConfig+0x15a>
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCC_OscConfig+0x172>
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a66      	ldr	r2, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c26:	4b61      	ldr	r3, [pc, #388]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f023 020f 	bic.w	r2, r3, #15
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	495d      	ldr	r1, [pc, #372]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d059      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fd fdb0 	bl	80017a8 <HAL_GetTick>
 8003c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4e:	f7fd fdab 	bl	80017a8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d902      	bls.n	8003c64 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	f000 be29 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8003c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c78:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCC_OscConfig+0x1e2>
 8003c90:	4b46      	ldr	r3, [pc, #280]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e015      	b.n	8003cc2 <HAL_RCC_OscConfig+0x20e>
 8003c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c9a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003cb2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cc6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003cca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003cce:	fa92 f2a2 	rbit	r2, r2
 8003cd2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003cd6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	f042 0220 	orr.w	r2, r2, #32
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	f002 021f 	and.w	r2, r2, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ab      	beq.n	8003c4e <HAL_RCC_OscConfig+0x19a>
 8003cf6:	e05c      	b.n	8003db2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fd56 	bl	80017a8 <HAL_GetTick>
 8003cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d02:	f7fd fd51 	bl	80017a8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d902      	bls.n	8003d18 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	f000 bdcf 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8003d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003d2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_OscConfig+0x296>
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x2c2>
 8003d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d4e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d62:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d66:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCC_OscConfig+0x2f8>)
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d7a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d7e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d8a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d8e:	fab2 f282 	clz	r2, r2
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	f042 0220 	orr.w	r2, r2, #32
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	f002 021f 	and.w	r2, r2, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ab      	bne.n	8003d02 <HAL_RCC_OscConfig+0x24e>
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_OscConfig+0x2fe>
 8003dac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 816f 	beq.w	80040a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003dc2:	4bd0      	ldr	r3, [pc, #832]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dce:	4bcd      	ldr	r3, [pc, #820]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d16c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x400>
 8003dda:	4bca      	ldr	r3, [pc, #808]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d166      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x400>
 8003de6:	2302      	movs	r3, #2
 8003de8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003df8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_OscConfig+0x362>
 8003e10:	4bbc      	ldr	r3, [pc, #752]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	e013      	b.n	8003e3e <HAL_RCC_OscConfig+0x38a>
 8003e16:	2302      	movs	r3, #2
 8003e18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003e3a:	4bb2      	ldr	r3, [pc, #712]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003e44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e48:	fa92 f2a2 	rbit	r2, r2
 8003e4c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003e50:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003e54:	fab2 f282 	clz	r2, r2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f002 021f 	and.w	r2, r2, #31
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f000 bd1b 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4ba0      	ldr	r3, [pc, #640]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	21f8      	movs	r1, #248	; 0xf8
 8003e90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e98:	fa91 f1a1 	rbit	r1, r1
 8003e9c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ea0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ea4:	fab1 f181 	clz	r1, r1
 8003ea8:	b2c9      	uxtb	r1, r1
 8003eaa:	408b      	lsls	r3, r1
 8003eac:	4995      	ldr	r1, [pc, #596]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	e0f5      	b.n	80040a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8085 	beq.w	8003fca <HAL_RCC_OscConfig+0x516>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003ed2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ee0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2301      	movs	r3, #1
 8003eea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fd fc5c 	bl	80017a8 <HAL_GetTick>
 8003ef0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef6:	f7fd fc57 	bl	80017a8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d902      	bls.n	8003f0c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	f000 bcd5 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003f1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_OscConfig+0x488>
 8003f36:	4b73      	ldr	r3, [pc, #460]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e013      	b.n	8003f64 <HAL_RCC_OscConfig+0x4b0>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f4e:	2302      	movs	r3, #2
 8003f50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f60:	4b68      	ldr	r3, [pc, #416]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	2202      	movs	r2, #2
 8003f66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f6e:	fa92 f2a2 	rbit	r2, r2
 8003f72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f7a:	fab2 f282 	clz	r2, r2
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	f042 0220 	orr.w	r2, r2, #32
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	f002 021f 	and.w	r2, r2, #31
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0af      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	21f8      	movs	r1, #248	; 0xf8
 8003fa6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003fae:	fa91 f1a1 	rbit	r1, r1
 8003fb2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003fb6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003fba:	fab1 f181 	clz	r1, r1
 8003fbe:	b2c9      	uxtb	r1, r1
 8003fc0:	408b      	lsls	r3, r1
 8003fc2:	4950      	ldr	r1, [pc, #320]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e06a      	b.n	80040a0 <HAL_RCC_OscConfig+0x5ec>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fbd7 	bl	80017a8 <HAL_GetTick>
 8003ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004000:	f7fd fbd2 	bl	80017a8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d902      	bls.n	8004016 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	f000 bc50 	b.w	80048b6 <HAL_RCC_OscConfig+0xe02>
 8004016:	2302      	movs	r3, #2
 8004018:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <HAL_RCC_OscConfig+0x592>
 8004040:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	e013      	b.n	800406e <HAL_RCC_OscConfig+0x5ba>
 8004046:	2302      	movs	r3, #2
 8004048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004058:	2302      	movs	r3, #2
 800405a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800405e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCC_OscConfig+0x650>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2202      	movs	r2, #2
 8004070:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004074:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004078:	fa92 f2a2 	rbit	r2, r2
 800407c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004080:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004084:	fab2 f282 	clz	r2, r2
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	f042 0220 	orr.w	r2, r2, #32
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	f002 021f 	and.w	r2, r2, #31
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f202 	lsl.w	r2, r1, r2
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1af      	bne.n	8004000 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80da 	beq.w	8004264 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d069      	beq.n	800418e <HAL_RCC_OscConfig+0x6da>
 80040ba:	2301      	movs	r3, #1
 80040bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x654>)
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	461a      	mov	r2, r3
 80040e0:	2301      	movs	r3, #1
 80040e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fd fb60 	bl	80017a8 <HAL_GetTick>
 80040e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ec:	e00e      	b.n	800410c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fd fb5b 	bl	80017a8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d906      	bls.n	800410c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e3d9      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	10908120 	.word	0x10908120
 800410c:	2302      	movs	r3, #2
 800410e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800411e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004122:	2202      	movs	r2, #2
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f2a3 	rbit	r2, r3
 8004130:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800413a:	2202      	movs	r2, #2
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	fa93 f2a3 	rbit	r2, r3
 8004148:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800414c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	4ba5      	ldr	r3, [pc, #660]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004152:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004156:	2102      	movs	r1, #2
 8004158:	6019      	str	r1, [r3, #0]
 800415a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f1a3 	rbit	r1, r3
 8004164:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004168:	6019      	str	r1, [r3, #0]
  return result;
 800416a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2101      	movs	r1, #1
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0b0      	beq.n	80040ee <HAL_RCC_OscConfig+0x63a>
 800418c:	e06a      	b.n	8004264 <HAL_RCC_OscConfig+0x7b0>
 800418e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	fa93 f2a3 	rbit	r2, r3
 80041a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041a4:	601a      	str	r2, [r3, #0]
  return result;
 80041a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	4b8c      	ldr	r3, [pc, #560]	; (80043e8 <HAL_RCC_OscConfig+0x934>)
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c0:	f7fd faf2 	bl	80017a8 <HAL_GetTick>
 80041c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	e009      	b.n	80041de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fd faed 	bl	80017a8 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e36b      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 80041de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041e2:	2202      	movs	r2, #2
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	fa93 f2a3 	rbit	r2, r3
 80041f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041fa:	2202      	movs	r2, #2
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	fa93 f2a3 	rbit	r2, r3
 8004208:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004212:	2202      	movs	r2, #2
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	fa93 f2a3 	rbit	r2, r3
 8004220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004224:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004226:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800422e:	2102      	movs	r1, #2
 8004230:	6019      	str	r1, [r3, #0]
 8004232:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	fa93 f1a3 	rbit	r1, r3
 800423c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004240:	6019      	str	r1, [r3, #0]
  return result;
 8004242:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1b2      	bne.n	80041ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8158 	beq.w	8004524 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427a:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d112      	bne.n	80042ac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800428c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004290:	61d3      	str	r3, [r2, #28]
 8004292:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800429a:	f107 0308 	add.w	r3, r7, #8
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11a      	bne.n	80042ee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b8:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c4:	f7fd fa70 	bl	80017a8 <HAL_GetTick>
 80042c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ce:	f7fd fa6b 	bl	80017a8 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e2e9      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e2:	4b42      	ldr	r3, [pc, #264]	; (80043ec <HAL_RCC_OscConfig+0x938>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ef      	beq.n	80042ce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x852>
 80042f8:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6213      	str	r3, [r2, #32]
 8004304:	e02f      	b.n	8004366 <HAL_RCC_OscConfig+0x8b2>
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10c      	bne.n	800432a <HAL_RCC_OscConfig+0x876>
 8004310:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6213      	str	r3, [r2, #32]
 800431c:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	4a30      	ldr	r2, [pc, #192]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004322:	f023 0304 	bic.w	r3, r3, #4
 8004326:	6213      	str	r3, [r2, #32]
 8004328:	e01d      	b.n	8004366 <HAL_RCC_OscConfig+0x8b2>
 800432a:	1d3b      	adds	r3, r7, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b05      	cmp	r3, #5
 8004332:	d10c      	bne.n	800434e <HAL_RCC_OscConfig+0x89a>
 8004334:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	6213      	str	r3, [r2, #32]
 8004340:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6213      	str	r3, [r2, #32]
 800434c:	e00b      	b.n	8004366 <HAL_RCC_OscConfig+0x8b2>
 800434e:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a24      	ldr	r2, [pc, #144]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004366:	1d3b      	adds	r3, r7, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d06b      	beq.n	8004448 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004370:	f7fd fa1a 	bl	80017a8 <HAL_GetTick>
 8004374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004378:	e00b      	b.n	8004392 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fd fa15 	bl	80017a8 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e291      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 8004392:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004396:	2202      	movs	r2, #2
 8004398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	fa93 f2a3 	rbit	r2, r3
 80043a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043ae:	2202      	movs	r2, #2
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	fa93 f2a3 	rbit	r2, r3
 80043bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043c0:	601a      	str	r2, [r3, #0]
  return result;
 80043c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80043c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	fab3 f383 	clz	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d109      	bne.n	80043f0 <HAL_RCC_OscConfig+0x93c>
 80043dc:	4b01      	ldr	r3, [pc, #4]	; (80043e4 <HAL_RCC_OscConfig+0x930>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	e014      	b.n	800440c <HAL_RCC_OscConfig+0x958>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	10908120 	.word	0x10908120
 80043ec:	40007000 	.word	0x40007000
 80043f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043f4:	2202      	movs	r2, #2
 80043f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	fa93 f2a3 	rbit	r2, r3
 8004402:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	4bbb      	ldr	r3, [pc, #748]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004410:	2102      	movs	r1, #2
 8004412:	6011      	str	r1, [r2, #0]
 8004414:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	fa92 f1a2 	rbit	r1, r2
 800441e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004422:	6011      	str	r1, [r2, #0]
  return result;
 8004424:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f002 021f 	and.w	r2, r2, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d099      	beq.n	800437a <HAL_RCC_OscConfig+0x8c6>
 8004446:	e063      	b.n	8004510 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fd f9ae 	bl	80017a8 <HAL_GetTick>
 800444c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004450:	e00b      	b.n	800446a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fd f9a9 	bl	80017a8 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e225      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 800446a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800446e:	2202      	movs	r2, #2
 8004470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	fa93 f2a3 	rbit	r2, r3
 800447c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004486:	2202      	movs	r2, #2
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	fa93 f2a3 	rbit	r2, r3
 8004494:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004498:	601a      	str	r2, [r3, #0]
  return result;
 800449a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800449e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f043 0302 	orr.w	r3, r3, #2
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d102      	bne.n	80044ba <HAL_RCC_OscConfig+0xa06>
 80044b4:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	e00d      	b.n	80044d6 <HAL_RCC_OscConfig+0xa22>
 80044ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044be:	2202      	movs	r2, #2
 80044c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	fa93 f2a3 	rbit	r2, r3
 80044cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044da:	2102      	movs	r1, #2
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	fa92 f1a2 	rbit	r1, r2
 80044e8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044ec:	6011      	str	r1, [r2, #0]
  return result;
 80044ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f002 021f 	and.w	r2, r2, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1a0      	bne.n	8004452 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004510:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004518:	4b77      	ldr	r3, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4a76      	ldr	r2, [pc, #472]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800451e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004522:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004524:	1d3b      	adds	r3, r7, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 81c2 	beq.w	80048b4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004530:	4b71      	ldr	r3, [pc, #452]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	f000 819c 	beq.w	8004876 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	2b02      	cmp	r3, #2
 8004546:	f040 8114 	bne.w	8004772 <HAL_RCC_OscConfig+0xcbe>
 800454a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800454e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004562:	601a      	str	r2, [r3, #0]
  return result;
 8004564:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004568:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd f912 	bl	80017a8 <HAL_GetTick>
 8004584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004588:	e009      	b.n	800459e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd f90d 	bl	80017a8 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e18b      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 800459e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	fa93 f2a3 	rbit	r2, r3
 80045b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045b6:	601a      	str	r2, [r3, #0]
  return result;
 80045b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_OscConfig+0xb24>
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	e01b      	b.n	8004610 <HAL_RCC_OscConfig+0xb5c>
 80045d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	fa93 f2a3 	rbit	r2, r3
 80045ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80045f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	fa93 f2a3 	rbit	r2, r3
 8004606:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	4b3a      	ldr	r3, [pc, #232]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	fa92 f1a2 	rbit	r1, r2
 8004624:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004628:	6011      	str	r1, [r2, #0]
  return result;
 800462a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	fab2 f282 	clz	r2, r2
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	f042 0220 	orr.w	r2, r2, #32
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	f002 021f 	and.w	r2, r2, #31
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f202 	lsl.w	r2, r1, r2
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d19e      	bne.n	800458a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	430b      	orrs	r3, r1
 8004662:	4925      	ldr	r1, [pc, #148]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800466c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	fa93 f2a3 	rbit	r2, r3
 800467c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004680:	601a      	str	r2, [r3, #0]
  return result;
 8004682:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004686:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004692:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	461a      	mov	r2, r3
 800469a:	2301      	movs	r3, #1
 800469c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fd f883 	bl	80017a8 <HAL_GetTick>
 80046a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a6:	e009      	b.n	80046bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fd f87e 	bl	80017a8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0fc      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 80046bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	fa93 f2a3 	rbit	r2, r3
 80046d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046d4:	601a      	str	r2, [r3, #0]
  return result;
 80046d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <HAL_RCC_OscConfig+0xc48>
 80046f0:	4b01      	ldr	r3, [pc, #4]	; (80046f8 <HAL_RCC_OscConfig+0xc44>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	e01e      	b.n	8004734 <HAL_RCC_OscConfig+0xc80>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800471a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	fa93 f2a3 	rbit	r2, r3
 800472a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004738:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	fa92 f1a2 	rbit	r1, r2
 8004748:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800474c:	6011      	str	r1, [r2, #0]
  return result;
 800474e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	fab2 f282 	clz	r2, r2
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	f042 0220 	orr.w	r2, r2, #32
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f002 021f 	and.w	r2, r2, #31
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f202 	lsl.w	r2, r1, r2
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d09b      	beq.n	80046a8 <HAL_RCC_OscConfig+0xbf4>
 8004770:	e0a0      	b.n	80048b4 <HAL_RCC_OscConfig+0xe00>
 8004772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800477a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	fa93 f2a3 	rbit	r2, r3
 8004786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800478a:	601a      	str	r2, [r3, #0]
  return result;
 800478c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004790:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800479c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	461a      	mov	r2, r3
 80047a4:	2300      	movs	r3, #0
 80047a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fc fffe 	bl	80017a8 <HAL_GetTick>
 80047ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b0:	e009      	b.n	80047c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b2:	f7fc fff9 	bl	80017a8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e077      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
 80047c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	fa93 f2a3 	rbit	r2, r3
 80047da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047de:	601a      	str	r2, [r3, #0]
  return result;
 80047e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0xd4c>
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	e01b      	b.n	8004838 <HAL_RCC_OscConfig+0xd84>
 8004800:	f107 0320 	add.w	r3, r7, #32
 8004804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f107 0320 	add.w	r3, r7, #32
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	fa93 f2a3 	rbit	r2, r3
 8004814:	f107 031c 	add.w	r3, r7, #28
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f107 0318 	add.w	r3, r7, #24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	fa93 f2a3 	rbit	r2, r3
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f107 0210 	add.w	r2, r7, #16
 800483c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	f107 0210 	add.w	r2, r7, #16
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	fa92 f1a2 	rbit	r1, r2
 800484c:	f107 020c 	add.w	r2, r7, #12
 8004850:	6011      	str	r1, [r2, #0]
  return result;
 8004852:	f107 020c 	add.w	r2, r7, #12
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	fab2 f282 	clz	r2, r2
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	f002 021f 	and.w	r2, r2, #31
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f202 	lsl.w	r2, r1, r2
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d19e      	bne.n	80047b2 <HAL_RCC_OscConfig+0xcfe>
 8004874:	e01e      	b.n	80048b4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e018      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004884:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <HAL_RCC_OscConfig+0xe0c>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800488c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	429a      	cmp	r2, r3
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800489e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b09e      	sub	sp, #120	; 0x78
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e162      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048dc:	4b90      	ldr	r3, [pc, #576]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d910      	bls.n	800490c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b8d      	ldr	r3, [pc, #564]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 0207 	bic.w	r2, r3, #7
 80048f2:	498b      	ldr	r1, [pc, #556]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b89      	ldr	r3, [pc, #548]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e14a      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b82      	ldr	r3, [pc, #520]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	497f      	ldr	r1, [pc, #508]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80dc 	beq.w	8004af0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d13c      	bne.n	80049ba <HAL_RCC_ClockConfig+0xf6>
 8004940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004944:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_RCC_ClockConfig+0xa6>
 8004964:	4b6f      	ldr	r3, [pc, #444]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	e00f      	b.n	800498a <HAL_RCC_ClockConfig+0xc6>
 800496a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800496e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	667b      	str	r3, [r7, #100]	; 0x64
 8004978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497c:	663b      	str	r3, [r7, #96]	; 0x60
 800497e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004986:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800498e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004992:	fa92 f2a2 	rbit	r2, r2
 8004996:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800499a:	fab2 f282 	clz	r2, r2
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	f042 0220 	orr.w	r2, r2, #32
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	f002 021f 	and.w	r2, r2, #31
 80049aa:	2101      	movs	r1, #1
 80049ac:	fa01 f202 	lsl.w	r2, r1, r2
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d17b      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e0f3      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d13c      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x178>
 80049c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_ClockConfig+0x128>
 80049e6:	4b4f      	ldr	r3, [pc, #316]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	e00f      	b.n	8004a0c <HAL_RCC_ClockConfig+0x148>
 80049ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
 80049fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a08:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a10:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a14:	fa92 f2a2 	rbit	r2, r2
 8004a18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a1c:	fab2 f282 	clz	r2, r2
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	f042 0220 	orr.w	r2, r2, #32
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	f002 021f 	and.w	r2, r2, #31
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d13a      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0b2      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x1a0>
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	e00d      	b.n	8004a80 <HAL_RCC_ClockConfig+0x1bc>
 8004a64:	2302      	movs	r3, #2
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a70:	2302      	movs	r3, #2
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	2202      	movs	r2, #2
 8004a82:	61ba      	str	r2, [r7, #24]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	fa92 f2a2 	rbit	r2, r2
 8004a8a:	617a      	str	r2, [r7, #20]
  return result;
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	fab2 f282 	clz	r2, r2
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	f042 0220 	orr.w	r2, r2, #32
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f002 021f 	and.w	r2, r2, #31
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e079      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	491a      	ldr	r1, [pc, #104]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fc fe72 	bl	80017a8 <HAL_GetTick>
 8004ac4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fc fe6e 	bl	80017a8 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e061      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d214      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0207 	bic.w	r2, r3, #7
 8004b06:	4906      	ldr	r1, [pc, #24]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <HAL_RCC_ClockConfig+0x25c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e040      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x2de>
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	491a      	ldr	r1, [pc, #104]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4912      	ldr	r1, [pc, #72]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b66:	f000 f829 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_RCC_ClockConfig+0x2e8>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b74:	22f0      	movs	r2, #240	; 0xf0
 8004b76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	fa92 f2a2 	rbit	r2, r2
 8004b7e:	60fa      	str	r2, [r7, #12]
  return result;
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	fab2 f282 	clz	r2, r2
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	40d3      	lsrs	r3, r2
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x2ec>)
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <HAL_RCC_ClockConfig+0x2f0>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_RCC_ClockConfig+0x2f4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fc fdc0 	bl	8001720 <HAL_InitTick>
  
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3778      	adds	r7, #120	; 0x78
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	080065a0 	.word	0x080065a0
 8004bb4:	2000000c 	.word	0x2000000c
 8004bb8:	20000010 	.word	0x20000010

08004bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b08b      	sub	sp, #44	; 0x2c
 8004bc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004bd6:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d002      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x30>
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8004bea:	e03c      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bee:	623b      	str	r3, [r7, #32]
      break;
 8004bf0:	e03c      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004bf8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004bfc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	fa92 f2a2 	rbit	r2, r2
 8004c04:	607a      	str	r2, [r7, #4]
  return result;
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	fab2 f282 	clz	r2, r2
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	40d3      	lsrs	r3, r2
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	220f      	movs	r2, #15
 8004c20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	fa92 f2a2 	rbit	r2, r2
 8004c28:	60fa      	str	r2, [r7, #12]
  return result;
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	fab2 f282 	clz	r2, r2
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	40d3      	lsrs	r3, r2
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c44:	4a0e      	ldr	r2, [pc, #56]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
 8004c54:	e004      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	623b      	str	r3, [r7, #32]
      break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c68:	623b      	str	r3, [r7, #32]
      break;
 8004c6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	372c      	adds	r7, #44	; 0x2c
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	007a1200 	.word	0x007a1200
 8004c84:	080065b0 	.word	0x080065b0
 8004c88:	080065c0 	.word	0x080065c0
 8004c8c:	003d0900 	.word	0x003d0900

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b092      	sub	sp, #72	; 0x48
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80d7 	beq.w	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb4:	4b4e      	ldr	r3, [pc, #312]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10e      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	4a4a      	ldr	r2, [pc, #296]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	61d3      	str	r3, [r2, #28]
 8004ccc:	4b48      	ldr	r3, [pc, #288]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b45      	ldr	r3, [pc, #276]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b42      	ldr	r3, [pc, #264]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a41      	ldr	r2, [pc, #260]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fc fd57 	bl	80017a8 <HAL_GetTick>
 8004cfa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fc fd53 	bl	80017a8 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b64      	cmp	r3, #100	; 0x64
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e13c      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d1c:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8084 	beq.w	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d07c      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	461a      	mov	r2, r3
 8004d66:	2301      	movs	r3, #1
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d04b      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fc fd03 	bl	80017a8 <HAL_GetTick>
 8004da2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fc fcff 	bl	80017a8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0e6      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	2302      	movs	r3, #2
 8004dca:	623b      	str	r3, [r7, #32]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
  return result;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d108      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004dea:	4b01      	ldr	r3, [pc, #4]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	e00d      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	10908100 	.word	0x10908100
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	4b62      	ldr	r3, [pc, #392]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	613a      	str	r2, [r7, #16]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	fa92 f2a2 	rbit	r2, r2
 8004e16:	60fa      	str	r2, [r7, #12]
  return result;
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	fab2 f282 	clz	r2, r2
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	f002 021f 	and.w	r2, r2, #31
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0b7      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e36:	4b57      	ldr	r3, [pc, #348]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4954      	ldr	r1, [pc, #336]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d105      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e50:	4b50      	ldr	r3, [pc, #320]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	4a4f      	ldr	r2, [pc, #316]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e68:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	f023 0203 	bic.w	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4947      	ldr	r1, [pc, #284]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e86:	4b43      	ldr	r3, [pc, #268]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f023 0210 	bic.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4940      	ldr	r1, [pc, #256]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	f023 0220 	bic.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	4938      	ldr	r1, [pc, #224]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ec2:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	4931      	ldr	r1, [pc, #196]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee0:	4b2c      	ldr	r3, [pc, #176]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4929      	ldr	r1, [pc, #164]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004efe:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	4922      	ldr	r1, [pc, #136]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	491a      	ldr	r1, [pc, #104]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f3a:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	4913      	ldr	r1, [pc, #76]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	490b      	ldr	r1, [pc, #44]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4904      	ldr	r1, [pc, #16]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3748      	adds	r7, #72	; 0x48
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4e0d      	ldr	r6, [pc, #52]	; (8004fd0 <__libc_init_array+0x38>)
 8004f9c:	4c0d      	ldr	r4, [pc, #52]	; (8004fd4 <__libc_init_array+0x3c>)
 8004f9e:	1ba4      	subs	r4, r4, r6
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	2500      	movs	r5, #0
 8004fa4:	42a5      	cmp	r5, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	4e0b      	ldr	r6, [pc, #44]	; (8004fd8 <__libc_init_array+0x40>)
 8004faa:	4c0c      	ldr	r4, [pc, #48]	; (8004fdc <__libc_init_array+0x44>)
 8004fac:	f001 faea 	bl	8006584 <_init>
 8004fb0:	1ba4      	subs	r4, r4, r6
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	2500      	movs	r5, #0
 8004fb6:	42a5      	cmp	r5, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fc0:	4798      	blx	r3
 8004fc2:	3501      	adds	r5, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fca:	4798      	blx	r3
 8004fcc:	3501      	adds	r5, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	080067a8 	.word	0x080067a8
 8004fd4:	080067a8 	.word	0x080067a8
 8004fd8:	080067a8 	.word	0x080067a8
 8004fdc:	080067ac 	.word	0x080067ac

08004fe0 <memset>:
 8004fe0:	4402      	add	r2, r0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d100      	bne.n	8004fea <memset+0xa>
 8004fe8:	4770      	bx	lr
 8004fea:	f803 1b01 	strb.w	r1, [r3], #1
 8004fee:	e7f9      	b.n	8004fe4 <memset+0x4>

08004ff0 <sin>:
 8004ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ff2:	ec51 0b10 	vmov	r0, r1, d0
 8004ff6:	4a20      	ldr	r2, [pc, #128]	; (8005078 <sin+0x88>)
 8004ff8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	dc07      	bgt.n	8005010 <sin+0x20>
 8005000:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005070 <sin+0x80>
 8005004:	2000      	movs	r0, #0
 8005006:	f000 febf 	bl	8005d88 <__kernel_sin>
 800500a:	ec51 0b10 	vmov	r0, r1, d0
 800500e:	e007      	b.n	8005020 <sin+0x30>
 8005010:	4a1a      	ldr	r2, [pc, #104]	; (800507c <sin+0x8c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	dd09      	ble.n	800502a <sin+0x3a>
 8005016:	ee10 2a10 	vmov	r2, s0
 800501a:	460b      	mov	r3, r1
 800501c:	f7fb f8d8 	bl	80001d0 <__aeabi_dsub>
 8005020:	ec41 0b10 	vmov	d0, r0, r1
 8005024:	b005      	add	sp, #20
 8005026:	f85d fb04 	ldr.w	pc, [sp], #4
 800502a:	4668      	mov	r0, sp
 800502c:	f000 f8b0 	bl	8005190 <__ieee754_rem_pio2>
 8005030:	f000 0003 	and.w	r0, r0, #3
 8005034:	2801      	cmp	r0, #1
 8005036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800503a:	ed9d 0b00 	vldr	d0, [sp]
 800503e:	d004      	beq.n	800504a <sin+0x5a>
 8005040:	2802      	cmp	r0, #2
 8005042:	d005      	beq.n	8005050 <sin+0x60>
 8005044:	b970      	cbnz	r0, 8005064 <sin+0x74>
 8005046:	2001      	movs	r0, #1
 8005048:	e7dd      	b.n	8005006 <sin+0x16>
 800504a:	f000 fa95 	bl	8005578 <__kernel_cos>
 800504e:	e7dc      	b.n	800500a <sin+0x1a>
 8005050:	2001      	movs	r0, #1
 8005052:	f000 fe99 	bl	8005d88 <__kernel_sin>
 8005056:	ec53 2b10 	vmov	r2, r3, d0
 800505a:	ee10 0a10 	vmov	r0, s0
 800505e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005062:	e7dd      	b.n	8005020 <sin+0x30>
 8005064:	f000 fa88 	bl	8005578 <__kernel_cos>
 8005068:	e7f5      	b.n	8005056 <sin+0x66>
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w
	...
 8005078:	3fe921fb 	.word	0x3fe921fb
 800507c:	7fefffff 	.word	0x7fefffff

08005080 <tanh>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	ec55 4b10 	vmov	r4, r5, d0
 8005086:	4a3d      	ldr	r2, [pc, #244]	; (800517c <tanh+0xfc>)
 8005088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800508c:	4293      	cmp	r3, r2
 800508e:	462e      	mov	r6, r5
 8005090:	dd13      	ble.n	80050ba <tanh+0x3a>
 8005092:	ee10 2a10 	vmov	r2, s0
 8005096:	462b      	mov	r3, r5
 8005098:	2000      	movs	r0, #0
 800509a:	4939      	ldr	r1, [pc, #228]	; (8005180 <tanh+0x100>)
 800509c:	f7fb fb7a 	bl	8000794 <__aeabi_ddiv>
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	4b36      	ldr	r3, [pc, #216]	; (8005180 <tanh+0x100>)
 80050a8:	db04      	blt.n	80050b4 <tanh+0x34>
 80050aa:	f7fb f893 	bl	80001d4 <__adddf3>
 80050ae:	ec41 0b10 	vmov	d0, r0, r1
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	f7fb f88c 	bl	80001d0 <__aeabi_dsub>
 80050b8:	e7f9      	b.n	80050ae <tanh+0x2e>
 80050ba:	4a32      	ldr	r2, [pc, #200]	; (8005184 <tanh+0x104>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	dc59      	bgt.n	8005174 <tanh+0xf4>
 80050c0:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 80050c4:	da0b      	bge.n	80050de <tanh+0x5e>
 80050c6:	2200      	movs	r2, #0
 80050c8:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <tanh+0x100>)
 80050ca:	ee10 0a10 	vmov	r0, s0
 80050ce:	4629      	mov	r1, r5
 80050d0:	f7fb f880 	bl	80001d4 <__adddf3>
 80050d4:	4622      	mov	r2, r4
 80050d6:	462b      	mov	r3, r5
 80050d8:	f7fb fa32 	bl	8000540 <__aeabi_dmul>
 80050dc:	e7e7      	b.n	80050ae <tanh+0x2e>
 80050de:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <tanh+0x108>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	dd28      	ble.n	8005136 <tanh+0xb6>
 80050e4:	f001 f93a 	bl	800635c <fabs>
 80050e8:	ec53 2b10 	vmov	r2, r3, d0
 80050ec:	ee10 0a10 	vmov	r0, s0
 80050f0:	4619      	mov	r1, r3
 80050f2:	f7fb f86f 	bl	80001d4 <__adddf3>
 80050f6:	ec41 0b10 	vmov	d0, r0, r1
 80050fa:	f000 ff01 	bl	8005f00 <expm1>
 80050fe:	2200      	movs	r2, #0
 8005100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005104:	ec51 0b10 	vmov	r0, r1, d0
 8005108:	f7fb f864 	bl	80001d4 <__adddf3>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	2000      	movs	r0, #0
 8005112:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005116:	f7fb fb3d 	bl	8000794 <__aeabi_ddiv>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	2000      	movs	r0, #0
 8005120:	4917      	ldr	r1, [pc, #92]	; (8005180 <tanh+0x100>)
 8005122:	f7fb f855 	bl	80001d0 <__aeabi_dsub>
 8005126:	2e00      	cmp	r6, #0
 8005128:	bfbf      	itttt	lt
 800512a:	4602      	movlt	r2, r0
 800512c:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
 8005130:	4610      	movlt	r0, r2
 8005132:	4619      	movlt	r1, r3
 8005134:	e7bb      	b.n	80050ae <tanh+0x2e>
 8005136:	f001 f911 	bl	800635c <fabs>
 800513a:	2200      	movs	r2, #0
 800513c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8005140:	ec51 0b10 	vmov	r0, r1, d0
 8005144:	f7fb f9fc 	bl	8000540 <__aeabi_dmul>
 8005148:	ec41 0b10 	vmov	d0, r0, r1
 800514c:	f000 fed8 	bl	8005f00 <expm1>
 8005150:	ec51 0b10 	vmov	r0, r1, d0
 8005154:	2200      	movs	r2, #0
 8005156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800515a:	ee10 4a10 	vmov	r4, s0
 800515e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8005162:	f7fb f837 	bl	80001d4 <__adddf3>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb fb11 	bl	8000794 <__aeabi_ddiv>
 8005172:	e7d8      	b.n	8005126 <tanh+0xa6>
 8005174:	2000      	movs	r0, #0
 8005176:	4902      	ldr	r1, [pc, #8]	; (8005180 <tanh+0x100>)
 8005178:	e7d5      	b.n	8005126 <tanh+0xa6>
 800517a:	bf00      	nop
 800517c:	7fefffff 	.word	0x7fefffff
 8005180:	3ff00000 	.word	0x3ff00000
 8005184:	4035ffff 	.word	0x4035ffff
 8005188:	3fefffff 	.word	0x3fefffff
 800518c:	00000000 	.word	0x00000000

08005190 <__ieee754_rem_pio2>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	ec57 6b10 	vmov	r6, r7, d0
 8005198:	4bc3      	ldr	r3, [pc, #780]	; (80054a8 <__ieee754_rem_pio2+0x318>)
 800519a:	b08d      	sub	sp, #52	; 0x34
 800519c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80051a0:	4598      	cmp	r8, r3
 80051a2:	4604      	mov	r4, r0
 80051a4:	9704      	str	r7, [sp, #16]
 80051a6:	dc07      	bgt.n	80051b8 <__ieee754_rem_pio2+0x28>
 80051a8:	2200      	movs	r2, #0
 80051aa:	2300      	movs	r3, #0
 80051ac:	ed84 0b00 	vstr	d0, [r4]
 80051b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80051b4:	2500      	movs	r5, #0
 80051b6:	e027      	b.n	8005208 <__ieee754_rem_pio2+0x78>
 80051b8:	4bbc      	ldr	r3, [pc, #752]	; (80054ac <__ieee754_rem_pio2+0x31c>)
 80051ba:	4598      	cmp	r8, r3
 80051bc:	dc75      	bgt.n	80052aa <__ieee754_rem_pio2+0x11a>
 80051be:	9b04      	ldr	r3, [sp, #16]
 80051c0:	4dbb      	ldr	r5, [pc, #748]	; (80054b0 <__ieee754_rem_pio2+0x320>)
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	ee10 0a10 	vmov	r0, s0
 80051c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2e0>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	4639      	mov	r1, r7
 80051d0:	dd36      	ble.n	8005240 <__ieee754_rem_pio2+0xb0>
 80051d2:	f7fa fffd 	bl	80001d0 <__aeabi_dsub>
 80051d6:	45a8      	cmp	r8, r5
 80051d8:	4606      	mov	r6, r0
 80051da:	460f      	mov	r7, r1
 80051dc:	d018      	beq.n	8005210 <__ieee754_rem_pio2+0x80>
 80051de:	a3a6      	add	r3, pc, #664	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2e8>)
 80051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e4:	f7fa fff4 	bl	80001d0 <__aeabi_dsub>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	e9c4 2300 	strd	r2, r3, [r4]
 80051f0:	4630      	mov	r0, r6
 80051f2:	4639      	mov	r1, r7
 80051f4:	f7fa ffec 	bl	80001d0 <__aeabi_dsub>
 80051f8:	a39f      	add	r3, pc, #636	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2e8>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fa ffe7 	bl	80001d0 <__aeabi_dsub>
 8005202:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005206:	2501      	movs	r5, #1
 8005208:	4628      	mov	r0, r5
 800520a:	b00d      	add	sp, #52	; 0x34
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005210:	a39b      	add	r3, pc, #620	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f0>)
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f7fa ffdb 	bl	80001d0 <__aeabi_dsub>
 800521a:	a39b      	add	r3, pc, #620	; (adr r3, 8005488 <__ieee754_rem_pio2+0x2f8>)
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	4606      	mov	r6, r0
 8005222:	460f      	mov	r7, r1
 8005224:	f7fa ffd4 	bl	80001d0 <__aeabi_dsub>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	e9c4 2300 	strd	r2, r3, [r4]
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fa ffcc 	bl	80001d0 <__aeabi_dsub>
 8005238:	a393      	add	r3, pc, #588	; (adr r3, 8005488 <__ieee754_rem_pio2+0x2f8>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	e7de      	b.n	80051fe <__ieee754_rem_pio2+0x6e>
 8005240:	f7fa ffc8 	bl	80001d4 <__adddf3>
 8005244:	45a8      	cmp	r8, r5
 8005246:	4606      	mov	r6, r0
 8005248:	460f      	mov	r7, r1
 800524a:	d016      	beq.n	800527a <__ieee754_rem_pio2+0xea>
 800524c:	a38a      	add	r3, pc, #552	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2e8>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f7fa ffbf 	bl	80001d4 <__adddf3>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	e9c4 2300 	strd	r2, r3, [r4]
 800525e:	4630      	mov	r0, r6
 8005260:	4639      	mov	r1, r7
 8005262:	f7fa ffb5 	bl	80001d0 <__aeabi_dsub>
 8005266:	a384      	add	r3, pc, #528	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2e8>)
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f7fa ffb2 	bl	80001d4 <__adddf3>
 8005270:	f04f 35ff 	mov.w	r5, #4294967295
 8005274:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005278:	e7c6      	b.n	8005208 <__ieee754_rem_pio2+0x78>
 800527a:	a381      	add	r3, pc, #516	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f0>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fa ffa8 	bl	80001d4 <__adddf3>
 8005284:	a380      	add	r3, pc, #512	; (adr r3, 8005488 <__ieee754_rem_pio2+0x2f8>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	4606      	mov	r6, r0
 800528c:	460f      	mov	r7, r1
 800528e:	f7fa ffa1 	bl	80001d4 <__adddf3>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	e9c4 2300 	strd	r2, r3, [r4]
 800529a:	4630      	mov	r0, r6
 800529c:	4639      	mov	r1, r7
 800529e:	f7fa ff97 	bl	80001d0 <__aeabi_dsub>
 80052a2:	a379      	add	r3, pc, #484	; (adr r3, 8005488 <__ieee754_rem_pio2+0x2f8>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	e7e0      	b.n	800526c <__ieee754_rem_pio2+0xdc>
 80052aa:	4b82      	ldr	r3, [pc, #520]	; (80054b4 <__ieee754_rem_pio2+0x324>)
 80052ac:	4598      	cmp	r8, r3
 80052ae:	f300 80d0 	bgt.w	8005452 <__ieee754_rem_pio2+0x2c2>
 80052b2:	f001 f853 	bl	800635c <fabs>
 80052b6:	ec57 6b10 	vmov	r6, r7, d0
 80052ba:	ee10 0a10 	vmov	r0, s0
 80052be:	a374      	add	r3, pc, #464	; (adr r3, 8005490 <__ieee754_rem_pio2+0x300>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fb f93b 	bl	8000540 <__aeabi_dmul>
 80052ca:	2200      	movs	r2, #0
 80052cc:	4b7a      	ldr	r3, [pc, #488]	; (80054b8 <__ieee754_rem_pio2+0x328>)
 80052ce:	f7fa ff81 	bl	80001d4 <__adddf3>
 80052d2:	f7fb fbcf 	bl	8000a74 <__aeabi_d2iz>
 80052d6:	4605      	mov	r5, r0
 80052d8:	f7fb f8c8 	bl	800046c <__aeabi_i2d>
 80052dc:	a364      	add	r3, pc, #400	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2e0>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052e6:	f7fb f92b 	bl	8000540 <__aeabi_dmul>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4630      	mov	r0, r6
 80052f0:	4639      	mov	r1, r7
 80052f2:	f7fa ff6d 	bl	80001d0 <__aeabi_dsub>
 80052f6:	a360      	add	r3, pc, #384	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2e8>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	4682      	mov	sl, r0
 80052fe:	468b      	mov	fp, r1
 8005300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005304:	f7fb f91c 	bl	8000540 <__aeabi_dmul>
 8005308:	2d1f      	cmp	r5, #31
 800530a:	4606      	mov	r6, r0
 800530c:	460f      	mov	r7, r1
 800530e:	dc0c      	bgt.n	800532a <__ieee754_rem_pio2+0x19a>
 8005310:	1e6a      	subs	r2, r5, #1
 8005312:	4b6a      	ldr	r3, [pc, #424]	; (80054bc <__ieee754_rem_pio2+0x32c>)
 8005314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005318:	4543      	cmp	r3, r8
 800531a:	d006      	beq.n	800532a <__ieee754_rem_pio2+0x19a>
 800531c:	4632      	mov	r2, r6
 800531e:	463b      	mov	r3, r7
 8005320:	4650      	mov	r0, sl
 8005322:	4659      	mov	r1, fp
 8005324:	f7fa ff54 	bl	80001d0 <__aeabi_dsub>
 8005328:	e00e      	b.n	8005348 <__ieee754_rem_pio2+0x1b8>
 800532a:	4632      	mov	r2, r6
 800532c:	463b      	mov	r3, r7
 800532e:	4650      	mov	r0, sl
 8005330:	4659      	mov	r1, fp
 8005332:	f7fa ff4d 	bl	80001d0 <__aeabi_dsub>
 8005336:	ea4f 5328 	mov.w	r3, r8, asr #20
 800533a:	9305      	str	r3, [sp, #20]
 800533c:	9a05      	ldr	r2, [sp, #20]
 800533e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b10      	cmp	r3, #16
 8005346:	dc02      	bgt.n	800534e <__ieee754_rem_pio2+0x1be>
 8005348:	e9c4 0100 	strd	r0, r1, [r4]
 800534c:	e039      	b.n	80053c2 <__ieee754_rem_pio2+0x232>
 800534e:	a34c      	add	r3, pc, #304	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f0>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005358:	f7fb f8f2 	bl	8000540 <__aeabi_dmul>
 800535c:	4606      	mov	r6, r0
 800535e:	460f      	mov	r7, r1
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4650      	mov	r0, sl
 8005366:	4659      	mov	r1, fp
 8005368:	f7fa ff32 	bl	80001d0 <__aeabi_dsub>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4680      	mov	r8, r0
 8005372:	4689      	mov	r9, r1
 8005374:	4650      	mov	r0, sl
 8005376:	4659      	mov	r1, fp
 8005378:	f7fa ff2a 	bl	80001d0 <__aeabi_dsub>
 800537c:	4632      	mov	r2, r6
 800537e:	463b      	mov	r3, r7
 8005380:	f7fa ff26 	bl	80001d0 <__aeabi_dsub>
 8005384:	a340      	add	r3, pc, #256	; (adr r3, 8005488 <__ieee754_rem_pio2+0x2f8>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	4606      	mov	r6, r0
 800538c:	460f      	mov	r7, r1
 800538e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005392:	f7fb f8d5 	bl	8000540 <__aeabi_dmul>
 8005396:	4632      	mov	r2, r6
 8005398:	463b      	mov	r3, r7
 800539a:	f7fa ff19 	bl	80001d0 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4606      	mov	r6, r0
 80053a4:	460f      	mov	r7, r1
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fa ff11 	bl	80001d0 <__aeabi_dsub>
 80053ae:	9a05      	ldr	r2, [sp, #20]
 80053b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b31      	cmp	r3, #49	; 0x31
 80053b8:	dc20      	bgt.n	80053fc <__ieee754_rem_pio2+0x26c>
 80053ba:	e9c4 0100 	strd	r0, r1, [r4]
 80053be:	46c2      	mov	sl, r8
 80053c0:	46cb      	mov	fp, r9
 80053c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80053c6:	4650      	mov	r0, sl
 80053c8:	4642      	mov	r2, r8
 80053ca:	464b      	mov	r3, r9
 80053cc:	4659      	mov	r1, fp
 80053ce:	f7fa feff 	bl	80001d0 <__aeabi_dsub>
 80053d2:	463b      	mov	r3, r7
 80053d4:	4632      	mov	r2, r6
 80053d6:	f7fa fefb 	bl	80001d0 <__aeabi_dsub>
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053e2:	f6bf af11 	bge.w	8005208 <__ieee754_rem_pio2+0x78>
 80053e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053ea:	6063      	str	r3, [r4, #4]
 80053ec:	f8c4 8000 	str.w	r8, [r4]
 80053f0:	60a0      	str	r0, [r4, #8]
 80053f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053f6:	60e3      	str	r3, [r4, #12]
 80053f8:	426d      	negs	r5, r5
 80053fa:	e705      	b.n	8005208 <__ieee754_rem_pio2+0x78>
 80053fc:	a326      	add	r3, pc, #152	; (adr r3, 8005498 <__ieee754_rem_pio2+0x308>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005406:	f7fb f89b 	bl	8000540 <__aeabi_dmul>
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	f7fa fedb 	bl	80001d0 <__aeabi_dsub>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4682      	mov	sl, r0
 8005420:	468b      	mov	fp, r1
 8005422:	4640      	mov	r0, r8
 8005424:	4649      	mov	r1, r9
 8005426:	f7fa fed3 	bl	80001d0 <__aeabi_dsub>
 800542a:	4632      	mov	r2, r6
 800542c:	463b      	mov	r3, r7
 800542e:	f7fa fecf 	bl	80001d0 <__aeabi_dsub>
 8005432:	a31b      	add	r3, pc, #108	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x310>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	4606      	mov	r6, r0
 800543a:	460f      	mov	r7, r1
 800543c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005440:	f7fb f87e 	bl	8000540 <__aeabi_dmul>
 8005444:	4632      	mov	r2, r6
 8005446:	463b      	mov	r3, r7
 8005448:	f7fa fec2 	bl	80001d0 <__aeabi_dsub>
 800544c:	4606      	mov	r6, r0
 800544e:	460f      	mov	r7, r1
 8005450:	e764      	b.n	800531c <__ieee754_rem_pio2+0x18c>
 8005452:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <__ieee754_rem_pio2+0x330>)
 8005454:	4598      	cmp	r8, r3
 8005456:	dd35      	ble.n	80054c4 <__ieee754_rem_pio2+0x334>
 8005458:	ee10 2a10 	vmov	r2, s0
 800545c:	463b      	mov	r3, r7
 800545e:	4630      	mov	r0, r6
 8005460:	4639      	mov	r1, r7
 8005462:	f7fa feb5 	bl	80001d0 <__aeabi_dsub>
 8005466:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800546a:	e9c4 0100 	strd	r0, r1, [r4]
 800546e:	e6a1      	b.n	80051b4 <__ieee754_rem_pio2+0x24>
 8005470:	54400000 	.word	0x54400000
 8005474:	3ff921fb 	.word	0x3ff921fb
 8005478:	1a626331 	.word	0x1a626331
 800547c:	3dd0b461 	.word	0x3dd0b461
 8005480:	1a600000 	.word	0x1a600000
 8005484:	3dd0b461 	.word	0x3dd0b461
 8005488:	2e037073 	.word	0x2e037073
 800548c:	3ba3198a 	.word	0x3ba3198a
 8005490:	6dc9c883 	.word	0x6dc9c883
 8005494:	3fe45f30 	.word	0x3fe45f30
 8005498:	2e000000 	.word	0x2e000000
 800549c:	3ba3198a 	.word	0x3ba3198a
 80054a0:	252049c1 	.word	0x252049c1
 80054a4:	397b839a 	.word	0x397b839a
 80054a8:	3fe921fb 	.word	0x3fe921fb
 80054ac:	4002d97b 	.word	0x4002d97b
 80054b0:	3ff921fb 	.word	0x3ff921fb
 80054b4:	413921fb 	.word	0x413921fb
 80054b8:	3fe00000 	.word	0x3fe00000
 80054bc:	080065d0 	.word	0x080065d0
 80054c0:	7fefffff 	.word	0x7fefffff
 80054c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80054c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80054cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80054d0:	4630      	mov	r0, r6
 80054d2:	460f      	mov	r7, r1
 80054d4:	f7fb face 	bl	8000a74 <__aeabi_d2iz>
 80054d8:	f7fa ffc8 	bl	800046c <__aeabi_i2d>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4630      	mov	r0, r6
 80054e2:	4639      	mov	r1, r7
 80054e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054e8:	f7fa fe72 	bl	80001d0 <__aeabi_dsub>
 80054ec:	2200      	movs	r2, #0
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <__ieee754_rem_pio2+0x3dc>)
 80054f0:	f7fb f826 	bl	8000540 <__aeabi_dmul>
 80054f4:	460f      	mov	r7, r1
 80054f6:	4606      	mov	r6, r0
 80054f8:	f7fb fabc 	bl	8000a74 <__aeabi_d2iz>
 80054fc:	f7fa ffb6 	bl	800046c <__aeabi_i2d>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800550c:	f7fa fe60 	bl	80001d0 <__aeabi_dsub>
 8005510:	2200      	movs	r2, #0
 8005512:	4b16      	ldr	r3, [pc, #88]	; (800556c <__ieee754_rem_pio2+0x3dc>)
 8005514:	f7fb f814 	bl	8000540 <__aeabi_dmul>
 8005518:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800551c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005520:	f04f 0803 	mov.w	r8, #3
 8005524:	2600      	movs	r6, #0
 8005526:	2700      	movs	r7, #0
 8005528:	4632      	mov	r2, r6
 800552a:	463b      	mov	r3, r7
 800552c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005530:	f108 3aff 	add.w	sl, r8, #4294967295
 8005534:	f7fb fa6c 	bl	8000a10 <__aeabi_dcmpeq>
 8005538:	b9b0      	cbnz	r0, 8005568 <__ieee754_rem_pio2+0x3d8>
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <__ieee754_rem_pio2+0x3e0>)
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	2302      	movs	r3, #2
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	462a      	mov	r2, r5
 8005544:	4643      	mov	r3, r8
 8005546:	4621      	mov	r1, r4
 8005548:	a806      	add	r0, sp, #24
 800554a:	f000 f8dd 	bl	8005708 <__kernel_rem_pio2>
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	4605      	mov	r5, r0
 8005554:	f6bf ae58 	bge.w	8005208 <__ieee754_rem_pio2+0x78>
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800555e:	6063      	str	r3, [r4, #4]
 8005560:	68e3      	ldr	r3, [r4, #12]
 8005562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005566:	e746      	b.n	80053f6 <__ieee754_rem_pio2+0x266>
 8005568:	46d0      	mov	r8, sl
 800556a:	e7dd      	b.n	8005528 <__ieee754_rem_pio2+0x398>
 800556c:	41700000 	.word	0x41700000
 8005570:	08006650 	.word	0x08006650
 8005574:	00000000 	.word	0x00000000

08005578 <__kernel_cos>:
 8005578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	ec59 8b10 	vmov	r8, r9, d0
 8005580:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005584:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005588:	ed2d 8b02 	vpush	{d8}
 800558c:	eeb0 8a41 	vmov.f32	s16, s2
 8005590:	eef0 8a61 	vmov.f32	s17, s3
 8005594:	da07      	bge.n	80055a6 <__kernel_cos+0x2e>
 8005596:	ee10 0a10 	vmov	r0, s0
 800559a:	4649      	mov	r1, r9
 800559c:	f7fb fa6a 	bl	8000a74 <__aeabi_d2iz>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	f000 8089 	beq.w	80056b8 <__kernel_cos+0x140>
 80055a6:	4642      	mov	r2, r8
 80055a8:	464b      	mov	r3, r9
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	f7fa ffc7 	bl	8000540 <__aeabi_dmul>
 80055b2:	2200      	movs	r2, #0
 80055b4:	4b4e      	ldr	r3, [pc, #312]	; (80056f0 <__kernel_cos+0x178>)
 80055b6:	4604      	mov	r4, r0
 80055b8:	460d      	mov	r5, r1
 80055ba:	f7fa ffc1 	bl	8000540 <__aeabi_dmul>
 80055be:	a340      	add	r3, pc, #256	; (adr r3, 80056c0 <__kernel_cos+0x148>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	4682      	mov	sl, r0
 80055c6:	468b      	mov	fp, r1
 80055c8:	4620      	mov	r0, r4
 80055ca:	4629      	mov	r1, r5
 80055cc:	f7fa ffb8 	bl	8000540 <__aeabi_dmul>
 80055d0:	a33d      	add	r3, pc, #244	; (adr r3, 80056c8 <__kernel_cos+0x150>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa fdfd 	bl	80001d4 <__adddf3>
 80055da:	4622      	mov	r2, r4
 80055dc:	462b      	mov	r3, r5
 80055de:	f7fa ffaf 	bl	8000540 <__aeabi_dmul>
 80055e2:	a33b      	add	r3, pc, #236	; (adr r3, 80056d0 <__kernel_cos+0x158>)
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	f7fa fdf2 	bl	80001d0 <__aeabi_dsub>
 80055ec:	4622      	mov	r2, r4
 80055ee:	462b      	mov	r3, r5
 80055f0:	f7fa ffa6 	bl	8000540 <__aeabi_dmul>
 80055f4:	a338      	add	r3, pc, #224	; (adr r3, 80056d8 <__kernel_cos+0x160>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f7fa fdeb 	bl	80001d4 <__adddf3>
 80055fe:	4622      	mov	r2, r4
 8005600:	462b      	mov	r3, r5
 8005602:	f7fa ff9d 	bl	8000540 <__aeabi_dmul>
 8005606:	a336      	add	r3, pc, #216	; (adr r3, 80056e0 <__kernel_cos+0x168>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f7fa fde0 	bl	80001d0 <__aeabi_dsub>
 8005610:	4622      	mov	r2, r4
 8005612:	462b      	mov	r3, r5
 8005614:	f7fa ff94 	bl	8000540 <__aeabi_dmul>
 8005618:	a333      	add	r3, pc, #204	; (adr r3, 80056e8 <__kernel_cos+0x170>)
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f7fa fdd9 	bl	80001d4 <__adddf3>
 8005622:	4622      	mov	r2, r4
 8005624:	462b      	mov	r3, r5
 8005626:	f7fa ff8b 	bl	8000540 <__aeabi_dmul>
 800562a:	4622      	mov	r2, r4
 800562c:	462b      	mov	r3, r5
 800562e:	f7fa ff87 	bl	8000540 <__aeabi_dmul>
 8005632:	ec53 2b18 	vmov	r2, r3, d8
 8005636:	4604      	mov	r4, r0
 8005638:	460d      	mov	r5, r1
 800563a:	4640      	mov	r0, r8
 800563c:	4649      	mov	r1, r9
 800563e:	f7fa ff7f 	bl	8000540 <__aeabi_dmul>
 8005642:	460b      	mov	r3, r1
 8005644:	4602      	mov	r2, r0
 8005646:	4629      	mov	r1, r5
 8005648:	4620      	mov	r0, r4
 800564a:	f7fa fdc1 	bl	80001d0 <__aeabi_dsub>
 800564e:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <__kernel_cos+0x17c>)
 8005650:	429e      	cmp	r6, r3
 8005652:	4680      	mov	r8, r0
 8005654:	4689      	mov	r9, r1
 8005656:	dc11      	bgt.n	800567c <__kernel_cos+0x104>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4650      	mov	r0, sl
 800565e:	4659      	mov	r1, fp
 8005660:	f7fa fdb6 	bl	80001d0 <__aeabi_dsub>
 8005664:	460b      	mov	r3, r1
 8005666:	4924      	ldr	r1, [pc, #144]	; (80056f8 <__kernel_cos+0x180>)
 8005668:	4602      	mov	r2, r0
 800566a:	2000      	movs	r0, #0
 800566c:	f7fa fdb0 	bl	80001d0 <__aeabi_dsub>
 8005670:	ecbd 8b02 	vpop	{d8}
 8005674:	ec41 0b10 	vmov	d0, r0, r1
 8005678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567c:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <__kernel_cos+0x184>)
 800567e:	491e      	ldr	r1, [pc, #120]	; (80056f8 <__kernel_cos+0x180>)
 8005680:	429e      	cmp	r6, r3
 8005682:	bfcc      	ite	gt
 8005684:	4d1e      	ldrgt	r5, [pc, #120]	; (8005700 <__kernel_cos+0x188>)
 8005686:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800568a:	2400      	movs	r4, #0
 800568c:	4622      	mov	r2, r4
 800568e:	462b      	mov	r3, r5
 8005690:	2000      	movs	r0, #0
 8005692:	f7fa fd9d 	bl	80001d0 <__aeabi_dsub>
 8005696:	4622      	mov	r2, r4
 8005698:	4606      	mov	r6, r0
 800569a:	460f      	mov	r7, r1
 800569c:	462b      	mov	r3, r5
 800569e:	4650      	mov	r0, sl
 80056a0:	4659      	mov	r1, fp
 80056a2:	f7fa fd95 	bl	80001d0 <__aeabi_dsub>
 80056a6:	4642      	mov	r2, r8
 80056a8:	464b      	mov	r3, r9
 80056aa:	f7fa fd91 	bl	80001d0 <__aeabi_dsub>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4630      	mov	r0, r6
 80056b4:	4639      	mov	r1, r7
 80056b6:	e7d9      	b.n	800566c <__kernel_cos+0xf4>
 80056b8:	2000      	movs	r0, #0
 80056ba:	490f      	ldr	r1, [pc, #60]	; (80056f8 <__kernel_cos+0x180>)
 80056bc:	e7d8      	b.n	8005670 <__kernel_cos+0xf8>
 80056be:	bf00      	nop
 80056c0:	be8838d4 	.word	0xbe8838d4
 80056c4:	bda8fae9 	.word	0xbda8fae9
 80056c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80056cc:	3e21ee9e 	.word	0x3e21ee9e
 80056d0:	809c52ad 	.word	0x809c52ad
 80056d4:	3e927e4f 	.word	0x3e927e4f
 80056d8:	19cb1590 	.word	0x19cb1590
 80056dc:	3efa01a0 	.word	0x3efa01a0
 80056e0:	16c15177 	.word	0x16c15177
 80056e4:	3f56c16c 	.word	0x3f56c16c
 80056e8:	5555554c 	.word	0x5555554c
 80056ec:	3fa55555 	.word	0x3fa55555
 80056f0:	3fe00000 	.word	0x3fe00000
 80056f4:	3fd33332 	.word	0x3fd33332
 80056f8:	3ff00000 	.word	0x3ff00000
 80056fc:	3fe90000 	.word	0x3fe90000
 8005700:	3fd20000 	.word	0x3fd20000
 8005704:	00000000 	.word	0x00000000

08005708 <__kernel_rem_pio2>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	ed2d 8b02 	vpush	{d8}
 8005710:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005714:	1ed4      	subs	r4, r2, #3
 8005716:	9308      	str	r3, [sp, #32]
 8005718:	9101      	str	r1, [sp, #4]
 800571a:	4bc5      	ldr	r3, [pc, #788]	; (8005a30 <__kernel_rem_pio2+0x328>)
 800571c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800571e:	9009      	str	r0, [sp, #36]	; 0x24
 8005720:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	9b08      	ldr	r3, [sp, #32]
 8005728:	3b01      	subs	r3, #1
 800572a:	9307      	str	r3, [sp, #28]
 800572c:	2318      	movs	r3, #24
 800572e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005732:	f06f 0317 	mvn.w	r3, #23
 8005736:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800573a:	fb04 3303 	mla	r3, r4, r3, r3
 800573e:	eb03 0a02 	add.w	sl, r3, r2
 8005742:	9b04      	ldr	r3, [sp, #16]
 8005744:	9a07      	ldr	r2, [sp, #28]
 8005746:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005a20 <__kernel_rem_pio2+0x318>
 800574a:	eb03 0802 	add.w	r8, r3, r2
 800574e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005750:	1aa7      	subs	r7, r4, r2
 8005752:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005756:	ae22      	add	r6, sp, #136	; 0x88
 8005758:	2500      	movs	r5, #0
 800575a:	4545      	cmp	r5, r8
 800575c:	dd13      	ble.n	8005786 <__kernel_rem_pio2+0x7e>
 800575e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005a20 <__kernel_rem_pio2+0x318>
 8005762:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005766:	2600      	movs	r6, #0
 8005768:	9b04      	ldr	r3, [sp, #16]
 800576a:	429e      	cmp	r6, r3
 800576c:	dc32      	bgt.n	80057d4 <__kernel_rem_pio2+0xcc>
 800576e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005770:	9302      	str	r3, [sp, #8]
 8005772:	9b08      	ldr	r3, [sp, #32]
 8005774:	199d      	adds	r5, r3, r6
 8005776:	ab22      	add	r3, sp, #136	; 0x88
 8005778:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800577c:	9306      	str	r3, [sp, #24]
 800577e:	ec59 8b18 	vmov	r8, r9, d8
 8005782:	2700      	movs	r7, #0
 8005784:	e01f      	b.n	80057c6 <__kernel_rem_pio2+0xbe>
 8005786:	42ef      	cmn	r7, r5
 8005788:	d407      	bmi.n	800579a <__kernel_rem_pio2+0x92>
 800578a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800578e:	f7fa fe6d 	bl	800046c <__aeabi_i2d>
 8005792:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005796:	3501      	adds	r5, #1
 8005798:	e7df      	b.n	800575a <__kernel_rem_pio2+0x52>
 800579a:	ec51 0b18 	vmov	r0, r1, d8
 800579e:	e7f8      	b.n	8005792 <__kernel_rem_pio2+0x8a>
 80057a0:	9906      	ldr	r1, [sp, #24]
 80057a2:	9d02      	ldr	r5, [sp, #8]
 80057a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80057a8:	9106      	str	r1, [sp, #24]
 80057aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80057ae:	9502      	str	r5, [sp, #8]
 80057b0:	f7fa fec6 	bl	8000540 <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4640      	mov	r0, r8
 80057ba:	4649      	mov	r1, r9
 80057bc:	f7fa fd0a 	bl	80001d4 <__adddf3>
 80057c0:	3701      	adds	r7, #1
 80057c2:	4680      	mov	r8, r0
 80057c4:	4689      	mov	r9, r1
 80057c6:	9b07      	ldr	r3, [sp, #28]
 80057c8:	429f      	cmp	r7, r3
 80057ca:	dde9      	ble.n	80057a0 <__kernel_rem_pio2+0x98>
 80057cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7c9      	b.n	8005768 <__kernel_rem_pio2+0x60>
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	aa0e      	add	r2, sp, #56	; 0x38
 80057d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80057dc:	930c      	str	r3, [sp, #48]	; 0x30
 80057de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80057e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80057e4:	9c04      	ldr	r4, [sp, #16]
 80057e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e8:	ab9a      	add	r3, sp, #616	; 0x268
 80057ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80057ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80057fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80057fe:	ab9a      	add	r3, sp, #616	; 0x268
 8005800:	445b      	add	r3, fp
 8005802:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005806:	2500      	movs	r5, #0
 8005808:	1b63      	subs	r3, r4, r5
 800580a:	2b00      	cmp	r3, #0
 800580c:	dc78      	bgt.n	8005900 <__kernel_rem_pio2+0x1f8>
 800580e:	4650      	mov	r0, sl
 8005810:	ec49 8b10 	vmov	d0, r8, r9
 8005814:	f000 fe30 	bl	8006478 <scalbn>
 8005818:	ec57 6b10 	vmov	r6, r7, d0
 800581c:	2200      	movs	r2, #0
 800581e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005822:	ee10 0a10 	vmov	r0, s0
 8005826:	4639      	mov	r1, r7
 8005828:	f7fa fe8a 	bl	8000540 <__aeabi_dmul>
 800582c:	ec41 0b10 	vmov	d0, r0, r1
 8005830:	f000 fd9e 	bl	8006370 <floor>
 8005834:	2200      	movs	r2, #0
 8005836:	ec51 0b10 	vmov	r0, r1, d0
 800583a:	4b7e      	ldr	r3, [pc, #504]	; (8005a34 <__kernel_rem_pio2+0x32c>)
 800583c:	f7fa fe80 	bl	8000540 <__aeabi_dmul>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4630      	mov	r0, r6
 8005846:	4639      	mov	r1, r7
 8005848:	f7fa fcc2 	bl	80001d0 <__aeabi_dsub>
 800584c:	460f      	mov	r7, r1
 800584e:	4606      	mov	r6, r0
 8005850:	f7fb f910 	bl	8000a74 <__aeabi_d2iz>
 8005854:	9006      	str	r0, [sp, #24]
 8005856:	f7fa fe09 	bl	800046c <__aeabi_i2d>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	f7fa fcb5 	bl	80001d0 <__aeabi_dsub>
 8005866:	f1ba 0f00 	cmp.w	sl, #0
 800586a:	4606      	mov	r6, r0
 800586c:	460f      	mov	r7, r1
 800586e:	dd6c      	ble.n	800594a <__kernel_rem_pio2+0x242>
 8005870:	1e62      	subs	r2, r4, #1
 8005872:	ab0e      	add	r3, sp, #56	; 0x38
 8005874:	f1ca 0118 	rsb	r1, sl, #24
 8005878:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800587c:	9d06      	ldr	r5, [sp, #24]
 800587e:	fa40 f301 	asr.w	r3, r0, r1
 8005882:	441d      	add	r5, r3
 8005884:	408b      	lsls	r3, r1
 8005886:	1ac0      	subs	r0, r0, r3
 8005888:	ab0e      	add	r3, sp, #56	; 0x38
 800588a:	9506      	str	r5, [sp, #24]
 800588c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005890:	f1ca 0317 	rsb	r3, sl, #23
 8005894:	fa40 f303 	asr.w	r3, r0, r3
 8005898:	9302      	str	r3, [sp, #8]
 800589a:	9b02      	ldr	r3, [sp, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dd62      	ble.n	8005966 <__kernel_rem_pio2+0x25e>
 80058a0:	9b06      	ldr	r3, [sp, #24]
 80058a2:	2200      	movs	r2, #0
 80058a4:	3301      	adds	r3, #1
 80058a6:	9306      	str	r3, [sp, #24]
 80058a8:	4615      	mov	r5, r2
 80058aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80058ae:	4294      	cmp	r4, r2
 80058b0:	f300 8095 	bgt.w	80059de <__kernel_rem_pio2+0x2d6>
 80058b4:	f1ba 0f00 	cmp.w	sl, #0
 80058b8:	dd07      	ble.n	80058ca <__kernel_rem_pio2+0x1c2>
 80058ba:	f1ba 0f01 	cmp.w	sl, #1
 80058be:	f000 80a2 	beq.w	8005a06 <__kernel_rem_pio2+0x2fe>
 80058c2:	f1ba 0f02 	cmp.w	sl, #2
 80058c6:	f000 80c1 	beq.w	8005a4c <__kernel_rem_pio2+0x344>
 80058ca:	9b02      	ldr	r3, [sp, #8]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d14a      	bne.n	8005966 <__kernel_rem_pio2+0x25e>
 80058d0:	4632      	mov	r2, r6
 80058d2:	463b      	mov	r3, r7
 80058d4:	2000      	movs	r0, #0
 80058d6:	4958      	ldr	r1, [pc, #352]	; (8005a38 <__kernel_rem_pio2+0x330>)
 80058d8:	f7fa fc7a 	bl	80001d0 <__aeabi_dsub>
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	2d00      	cmp	r5, #0
 80058e2:	d040      	beq.n	8005966 <__kernel_rem_pio2+0x25e>
 80058e4:	4650      	mov	r0, sl
 80058e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005a28 <__kernel_rem_pio2+0x320>
 80058ea:	f000 fdc5 	bl	8006478 <scalbn>
 80058ee:	4630      	mov	r0, r6
 80058f0:	4639      	mov	r1, r7
 80058f2:	ec53 2b10 	vmov	r2, r3, d0
 80058f6:	f7fa fc6b 	bl	80001d0 <__aeabi_dsub>
 80058fa:	4606      	mov	r6, r0
 80058fc:	460f      	mov	r7, r1
 80058fe:	e032      	b.n	8005966 <__kernel_rem_pio2+0x25e>
 8005900:	2200      	movs	r2, #0
 8005902:	4b4e      	ldr	r3, [pc, #312]	; (8005a3c <__kernel_rem_pio2+0x334>)
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	f7fa fe1a 	bl	8000540 <__aeabi_dmul>
 800590c:	f7fb f8b2 	bl	8000a74 <__aeabi_d2iz>
 8005910:	f7fa fdac 	bl	800046c <__aeabi_i2d>
 8005914:	2200      	movs	r2, #0
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <__kernel_rem_pio2+0x338>)
 8005918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800591c:	f7fa fe10 	bl	8000540 <__aeabi_dmul>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4640      	mov	r0, r8
 8005926:	4649      	mov	r1, r9
 8005928:	f7fa fc52 	bl	80001d0 <__aeabi_dsub>
 800592c:	f7fb f8a2 	bl	8000a74 <__aeabi_d2iz>
 8005930:	ab0e      	add	r3, sp, #56	; 0x38
 8005932:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005936:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800593a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800593e:	f7fa fc49 	bl	80001d4 <__adddf3>
 8005942:	3501      	adds	r5, #1
 8005944:	4680      	mov	r8, r0
 8005946:	4689      	mov	r9, r1
 8005948:	e75e      	b.n	8005808 <__kernel_rem_pio2+0x100>
 800594a:	d105      	bne.n	8005958 <__kernel_rem_pio2+0x250>
 800594c:	1e63      	subs	r3, r4, #1
 800594e:	aa0e      	add	r2, sp, #56	; 0x38
 8005950:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005954:	15c3      	asrs	r3, r0, #23
 8005956:	e79f      	b.n	8005898 <__kernel_rem_pio2+0x190>
 8005958:	2200      	movs	r2, #0
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <__kernel_rem_pio2+0x33c>)
 800595c:	f7fb f876 	bl	8000a4c <__aeabi_dcmpge>
 8005960:	2800      	cmp	r0, #0
 8005962:	d139      	bne.n	80059d8 <__kernel_rem_pio2+0x2d0>
 8005964:	9002      	str	r0, [sp, #8]
 8005966:	2200      	movs	r2, #0
 8005968:	2300      	movs	r3, #0
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fb f84f 	bl	8000a10 <__aeabi_dcmpeq>
 8005972:	2800      	cmp	r0, #0
 8005974:	f000 80c7 	beq.w	8005b06 <__kernel_rem_pio2+0x3fe>
 8005978:	1e65      	subs	r5, r4, #1
 800597a:	462b      	mov	r3, r5
 800597c:	2200      	movs	r2, #0
 800597e:	9904      	ldr	r1, [sp, #16]
 8005980:	428b      	cmp	r3, r1
 8005982:	da6a      	bge.n	8005a5a <__kernel_rem_pio2+0x352>
 8005984:	2a00      	cmp	r2, #0
 8005986:	f000 8088 	beq.w	8005a9a <__kernel_rem_pio2+0x392>
 800598a:	ab0e      	add	r3, sp, #56	; 0x38
 800598c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005990:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80b4 	beq.w	8005b02 <__kernel_rem_pio2+0x3fa>
 800599a:	4650      	mov	r0, sl
 800599c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005a28 <__kernel_rem_pio2+0x320>
 80059a0:	f000 fd6a 	bl	8006478 <scalbn>
 80059a4:	00ec      	lsls	r4, r5, #3
 80059a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80059a8:	191e      	adds	r6, r3, r4
 80059aa:	ec59 8b10 	vmov	r8, r9, d0
 80059ae:	f106 0a08 	add.w	sl, r6, #8
 80059b2:	462f      	mov	r7, r5
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	f280 80df 	bge.w	8005b78 <__kernel_rem_pio2+0x470>
 80059ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005a20 <__kernel_rem_pio2+0x318>
 80059be:	f04f 0a00 	mov.w	sl, #0
 80059c2:	eba5 030a 	sub.w	r3, r5, sl
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f2c0 810a 	blt.w	8005be0 <__kernel_rem_pio2+0x4d8>
 80059cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005a48 <__kernel_rem_pio2+0x340>
 80059d0:	ec59 8b18 	vmov	r8, r9, d8
 80059d4:	2700      	movs	r7, #0
 80059d6:	e0f5      	b.n	8005bc4 <__kernel_rem_pio2+0x4bc>
 80059d8:	2302      	movs	r3, #2
 80059da:	9302      	str	r3, [sp, #8]
 80059dc:	e760      	b.n	80058a0 <__kernel_rem_pio2+0x198>
 80059de:	ab0e      	add	r3, sp, #56	; 0x38
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	b94d      	cbnz	r5, 80059fa <__kernel_rem_pio2+0x2f2>
 80059e6:	b12b      	cbz	r3, 80059f4 <__kernel_rem_pio2+0x2ec>
 80059e8:	a80e      	add	r0, sp, #56	; 0x38
 80059ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80059ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80059f2:	2301      	movs	r3, #1
 80059f4:	3201      	adds	r2, #1
 80059f6:	461d      	mov	r5, r3
 80059f8:	e759      	b.n	80058ae <__kernel_rem_pio2+0x1a6>
 80059fa:	a80e      	add	r0, sp, #56	; 0x38
 80059fc:	1acb      	subs	r3, r1, r3
 80059fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005a02:	462b      	mov	r3, r5
 8005a04:	e7f6      	b.n	80059f4 <__kernel_rem_pio2+0x2ec>
 8005a06:	1e62      	subs	r2, r4, #1
 8005a08:	ab0e      	add	r3, sp, #56	; 0x38
 8005a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005a12:	a90e      	add	r1, sp, #56	; 0x38
 8005a14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a18:	e757      	b.n	80058ca <__kernel_rem_pio2+0x1c2>
 8005a1a:	bf00      	nop
 8005a1c:	f3af 8000 	nop.w
	...
 8005a2c:	3ff00000 	.word	0x3ff00000
 8005a30:	08006798 	.word	0x08006798
 8005a34:	40200000 	.word	0x40200000
 8005a38:	3ff00000 	.word	0x3ff00000
 8005a3c:	3e700000 	.word	0x3e700000
 8005a40:	41700000 	.word	0x41700000
 8005a44:	3fe00000 	.word	0x3fe00000
 8005a48:	08006758 	.word	0x08006758
 8005a4c:	1e62      	subs	r2, r4, #1
 8005a4e:	ab0e      	add	r3, sp, #56	; 0x38
 8005a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a58:	e7db      	b.n	8005a12 <__kernel_rem_pio2+0x30a>
 8005a5a:	a90e      	add	r1, sp, #56	; 0x38
 8005a5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	430a      	orrs	r2, r1
 8005a64:	e78b      	b.n	800597e <__kernel_rem_pio2+0x276>
 8005a66:	3301      	adds	r3, #1
 8005a68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a6c:	2900      	cmp	r1, #0
 8005a6e:	d0fa      	beq.n	8005a66 <__kernel_rem_pio2+0x35e>
 8005a70:	9a08      	ldr	r2, [sp, #32]
 8005a72:	4422      	add	r2, r4
 8005a74:	00d2      	lsls	r2, r2, #3
 8005a76:	a922      	add	r1, sp, #136	; 0x88
 8005a78:	18e3      	adds	r3, r4, r3
 8005a7a:	9206      	str	r2, [sp, #24]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	f10b 0108 	add.w	r1, fp, #8
 8005a84:	f102 0308 	add.w	r3, r2, #8
 8005a88:	1c66      	adds	r6, r4, #1
 8005a8a:	910a      	str	r1, [sp, #40]	; 0x28
 8005a8c:	2500      	movs	r5, #0
 8005a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	42b3      	cmp	r3, r6
 8005a94:	da04      	bge.n	8005aa0 <__kernel_rem_pio2+0x398>
 8005a96:	461c      	mov	r4, r3
 8005a98:	e6a6      	b.n	80057e8 <__kernel_rem_pio2+0xe0>
 8005a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e7e3      	b.n	8005a68 <__kernel_rem_pio2+0x360>
 8005aa0:	9b06      	ldr	r3, [sp, #24]
 8005aa2:	18ef      	adds	r7, r5, r3
 8005aa4:	ab22      	add	r3, sp, #136	; 0x88
 8005aa6:	441f      	add	r7, r3
 8005aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aaa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005aae:	f7fa fcdd 	bl	800046c <__aeabi_i2d>
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	461c      	mov	r4, r3
 8005ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab8:	e9c7 0100 	strd	r0, r1, [r7]
 8005abc:	eb03 0b05 	add.w	fp, r3, r5
 8005ac0:	2700      	movs	r7, #0
 8005ac2:	f04f 0800 	mov.w	r8, #0
 8005ac6:	f04f 0900 	mov.w	r9, #0
 8005aca:	9b07      	ldr	r3, [sp, #28]
 8005acc:	429f      	cmp	r7, r3
 8005ace:	dd08      	ble.n	8005ae2 <__kernel_rem_pio2+0x3da>
 8005ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad2:	aa72      	add	r2, sp, #456	; 0x1c8
 8005ad4:	18eb      	adds	r3, r5, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005adc:	3601      	adds	r6, #1
 8005ade:	3508      	adds	r5, #8
 8005ae0:	e7d6      	b.n	8005a90 <__kernel_rem_pio2+0x388>
 8005ae2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005ae6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005aea:	f7fa fd29 	bl	8000540 <__aeabi_dmul>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4640      	mov	r0, r8
 8005af4:	4649      	mov	r1, r9
 8005af6:	f7fa fb6d 	bl	80001d4 <__adddf3>
 8005afa:	3701      	adds	r7, #1
 8005afc:	4680      	mov	r8, r0
 8005afe:	4689      	mov	r9, r1
 8005b00:	e7e3      	b.n	8005aca <__kernel_rem_pio2+0x3c2>
 8005b02:	3d01      	subs	r5, #1
 8005b04:	e741      	b.n	800598a <__kernel_rem_pio2+0x282>
 8005b06:	f1ca 0000 	rsb	r0, sl, #0
 8005b0a:	ec47 6b10 	vmov	d0, r6, r7
 8005b0e:	f000 fcb3 	bl	8006478 <scalbn>
 8005b12:	ec57 6b10 	vmov	r6, r7, d0
 8005b16:	2200      	movs	r2, #0
 8005b18:	4b99      	ldr	r3, [pc, #612]	; (8005d80 <__kernel_rem_pio2+0x678>)
 8005b1a:	ee10 0a10 	vmov	r0, s0
 8005b1e:	4639      	mov	r1, r7
 8005b20:	f7fa ff94 	bl	8000a4c <__aeabi_dcmpge>
 8005b24:	b1f8      	cbz	r0, 8005b66 <__kernel_rem_pio2+0x45e>
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b96      	ldr	r3, [pc, #600]	; (8005d84 <__kernel_rem_pio2+0x67c>)
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fd07 	bl	8000540 <__aeabi_dmul>
 8005b32:	f7fa ff9f 	bl	8000a74 <__aeabi_d2iz>
 8005b36:	4680      	mov	r8, r0
 8005b38:	f7fa fc98 	bl	800046c <__aeabi_i2d>
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	4b90      	ldr	r3, [pc, #576]	; (8005d80 <__kernel_rem_pio2+0x678>)
 8005b40:	f7fa fcfe 	bl	8000540 <__aeabi_dmul>
 8005b44:	460b      	mov	r3, r1
 8005b46:	4602      	mov	r2, r0
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7fa fb40 	bl	80001d0 <__aeabi_dsub>
 8005b50:	f7fa ff90 	bl	8000a74 <__aeabi_d2iz>
 8005b54:	1c65      	adds	r5, r4, #1
 8005b56:	ab0e      	add	r3, sp, #56	; 0x38
 8005b58:	f10a 0a18 	add.w	sl, sl, #24
 8005b5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b60:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005b64:	e719      	b.n	800599a <__kernel_rem_pio2+0x292>
 8005b66:	4630      	mov	r0, r6
 8005b68:	4639      	mov	r1, r7
 8005b6a:	f7fa ff83 	bl	8000a74 <__aeabi_d2iz>
 8005b6e:	ab0e      	add	r3, sp, #56	; 0x38
 8005b70:	4625      	mov	r5, r4
 8005b72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b76:	e710      	b.n	800599a <__kernel_rem_pio2+0x292>
 8005b78:	ab0e      	add	r3, sp, #56	; 0x38
 8005b7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005b7e:	f7fa fc75 	bl	800046c <__aeabi_i2d>
 8005b82:	4642      	mov	r2, r8
 8005b84:	464b      	mov	r3, r9
 8005b86:	f7fa fcdb 	bl	8000540 <__aeabi_dmul>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005b90:	4b7c      	ldr	r3, [pc, #496]	; (8005d84 <__kernel_rem_pio2+0x67c>)
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	f7fa fcd3 	bl	8000540 <__aeabi_dmul>
 8005b9a:	3f01      	subs	r7, #1
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	4689      	mov	r9, r1
 8005ba0:	e708      	b.n	80059b4 <__kernel_rem_pio2+0x2ac>
 8005ba2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005bae:	f7fa fcc7 	bl	8000540 <__aeabi_dmul>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	4649      	mov	r1, r9
 8005bba:	f7fa fb0b 	bl	80001d4 <__adddf3>
 8005bbe:	3701      	adds	r7, #1
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	4689      	mov	r9, r1
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	429f      	cmp	r7, r3
 8005bc8:	dc01      	bgt.n	8005bce <__kernel_rem_pio2+0x4c6>
 8005bca:	45ba      	cmp	sl, r7
 8005bcc:	dae9      	bge.n	8005ba2 <__kernel_rem_pio2+0x49a>
 8005bce:	ab4a      	add	r3, sp, #296	; 0x128
 8005bd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bd4:	e9c3 8900 	strd	r8, r9, [r3]
 8005bd8:	f10a 0a01 	add.w	sl, sl, #1
 8005bdc:	3e08      	subs	r6, #8
 8005bde:	e6f0      	b.n	80059c2 <__kernel_rem_pio2+0x2ba>
 8005be0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d85b      	bhi.n	8005c9e <__kernel_rem_pio2+0x596>
 8005be6:	e8df f003 	tbb	[pc, r3]
 8005bea:	264a      	.short	0x264a
 8005bec:	0226      	.short	0x0226
 8005bee:	ab9a      	add	r3, sp, #616	; 0x268
 8005bf0:	441c      	add	r4, r3
 8005bf2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005bf6:	46a2      	mov	sl, r4
 8005bf8:	46ab      	mov	fp, r5
 8005bfa:	f1bb 0f00 	cmp.w	fp, #0
 8005bfe:	dc6c      	bgt.n	8005cda <__kernel_rem_pio2+0x5d2>
 8005c00:	46a2      	mov	sl, r4
 8005c02:	46ab      	mov	fp, r5
 8005c04:	f1bb 0f01 	cmp.w	fp, #1
 8005c08:	f300 8086 	bgt.w	8005d18 <__kernel_rem_pio2+0x610>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	2d01      	cmp	r5, #1
 8005c12:	f300 80a0 	bgt.w	8005d56 <__kernel_rem_pio2+0x64e>
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005c1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 809e 	bne.w	8005d62 <__kernel_rem_pio2+0x65a>
 8005c26:	9b01      	ldr	r3, [sp, #4]
 8005c28:	e9c3 7800 	strd	r7, r8, [r3]
 8005c2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005c30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c34:	e033      	b.n	8005c9e <__kernel_rem_pio2+0x596>
 8005c36:	3408      	adds	r4, #8
 8005c38:	ab4a      	add	r3, sp, #296	; 0x128
 8005c3a:	441c      	add	r4, r3
 8005c3c:	462e      	mov	r6, r5
 8005c3e:	2000      	movs	r0, #0
 8005c40:	2100      	movs	r1, #0
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	da3a      	bge.n	8005cbc <__kernel_rem_pio2+0x5b4>
 8005c46:	9b02      	ldr	r3, [sp, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d03d      	beq.n	8005cc8 <__kernel_rem_pio2+0x5c0>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c52:	9c01      	ldr	r4, [sp, #4]
 8005c54:	e9c4 2300 	strd	r2, r3, [r4]
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005c60:	f7fa fab6 	bl	80001d0 <__aeabi_dsub>
 8005c64:	ae4c      	add	r6, sp, #304	; 0x130
 8005c66:	2401      	movs	r4, #1
 8005c68:	42a5      	cmp	r5, r4
 8005c6a:	da30      	bge.n	8005cce <__kernel_rem_pio2+0x5c6>
 8005c6c:	9b02      	ldr	r3, [sp, #8]
 8005c6e:	b113      	cbz	r3, 8005c76 <__kernel_rem_pio2+0x56e>
 8005c70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c74:	4619      	mov	r1, r3
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c7c:	e00f      	b.n	8005c9e <__kernel_rem_pio2+0x596>
 8005c7e:	ab9a      	add	r3, sp, #616	; 0x268
 8005c80:	441c      	add	r4, r3
 8005c82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c86:	2000      	movs	r0, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	2d00      	cmp	r5, #0
 8005c8c:	da10      	bge.n	8005cb0 <__kernel_rem_pio2+0x5a8>
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	b113      	cbz	r3, 8005c98 <__kernel_rem_pio2+0x590>
 8005c92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c96:	4619      	mov	r1, r3
 8005c98:	9b01      	ldr	r3, [sp, #4]
 8005c9a:	e9c3 0100 	strd	r0, r1, [r3]
 8005c9e:	9b06      	ldr	r3, [sp, #24]
 8005ca0:	f003 0007 	and.w	r0, r3, #7
 8005ca4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005ca8:	ecbd 8b02 	vpop	{d8}
 8005cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005cb4:	f7fa fa8e 	bl	80001d4 <__adddf3>
 8005cb8:	3d01      	subs	r5, #1
 8005cba:	e7e6      	b.n	8005c8a <__kernel_rem_pio2+0x582>
 8005cbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005cc0:	f7fa fa88 	bl	80001d4 <__adddf3>
 8005cc4:	3e01      	subs	r6, #1
 8005cc6:	e7bc      	b.n	8005c42 <__kernel_rem_pio2+0x53a>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	e7c1      	b.n	8005c52 <__kernel_rem_pio2+0x54a>
 8005cce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005cd2:	f7fa fa7f 	bl	80001d4 <__adddf3>
 8005cd6:	3401      	adds	r4, #1
 8005cd8:	e7c6      	b.n	8005c68 <__kernel_rem_pio2+0x560>
 8005cda:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005cde:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	ec53 2b17 	vmov	r2, r3, d7
 8005ce8:	4649      	mov	r1, r9
 8005cea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005cee:	f7fa fa71 	bl	80001d4 <__adddf3>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fa67 	bl	80001d0 <__aeabi_dsub>
 8005d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d06:	f7fa fa65 	bl	80001d4 <__adddf3>
 8005d0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d0e:	e9ca 0100 	strd	r0, r1, [sl]
 8005d12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005d16:	e770      	b.n	8005bfa <__kernel_rem_pio2+0x4f2>
 8005d18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005d1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005d20:	4630      	mov	r0, r6
 8005d22:	ec53 2b17 	vmov	r2, r3, d7
 8005d26:	4639      	mov	r1, r7
 8005d28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d2c:	f7fa fa52 	bl	80001d4 <__adddf3>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4680      	mov	r8, r0
 8005d36:	4689      	mov	r9, r1
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	f7fa fa48 	bl	80001d0 <__aeabi_dsub>
 8005d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d44:	f7fa fa46 	bl	80001d4 <__adddf3>
 8005d48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d4c:	e9ca 0100 	strd	r0, r1, [sl]
 8005d50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005d54:	e756      	b.n	8005c04 <__kernel_rem_pio2+0x4fc>
 8005d56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d5a:	f7fa fa3b 	bl	80001d4 <__adddf3>
 8005d5e:	3d01      	subs	r5, #1
 8005d60:	e756      	b.n	8005c10 <__kernel_rem_pio2+0x508>
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	9a01      	ldr	r2, [sp, #4]
 8005d66:	601f      	str	r7, [r3, #0]
 8005d68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005d6c:	605c      	str	r4, [r3, #4]
 8005d6e:	609d      	str	r5, [r3, #8]
 8005d70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d74:	60d3      	str	r3, [r2, #12]
 8005d76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d7a:	6110      	str	r0, [r2, #16]
 8005d7c:	6153      	str	r3, [r2, #20]
 8005d7e:	e78e      	b.n	8005c9e <__kernel_rem_pio2+0x596>
 8005d80:	41700000 	.word	0x41700000
 8005d84:	3e700000 	.word	0x3e700000

08005d88 <__kernel_sin>:
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	ec55 4b10 	vmov	r4, r5, d0
 8005d90:	b085      	sub	sp, #20
 8005d92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d9a:	ed8d 1b00 	vstr	d1, [sp]
 8005d9e:	9002      	str	r0, [sp, #8]
 8005da0:	da06      	bge.n	8005db0 <__kernel_sin+0x28>
 8005da2:	ee10 0a10 	vmov	r0, s0
 8005da6:	4629      	mov	r1, r5
 8005da8:	f7fa fe64 	bl	8000a74 <__aeabi_d2iz>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d051      	beq.n	8005e54 <__kernel_sin+0xcc>
 8005db0:	4622      	mov	r2, r4
 8005db2:	462b      	mov	r3, r5
 8005db4:	4620      	mov	r0, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7fa fbc2 	bl	8000540 <__aeabi_dmul>
 8005dbc:	4682      	mov	sl, r0
 8005dbe:	468b      	mov	fp, r1
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f7fa fbba 	bl	8000540 <__aeabi_dmul>
 8005dcc:	a341      	add	r3, pc, #260	; (adr r3, 8005ed4 <__kernel_sin+0x14c>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4689      	mov	r9, r1
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	4659      	mov	r1, fp
 8005dda:	f7fa fbb1 	bl	8000540 <__aeabi_dmul>
 8005dde:	a33f      	add	r3, pc, #252	; (adr r3, 8005edc <__kernel_sin+0x154>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa f9f4 	bl	80001d0 <__aeabi_dsub>
 8005de8:	4652      	mov	r2, sl
 8005dea:	465b      	mov	r3, fp
 8005dec:	f7fa fba8 	bl	8000540 <__aeabi_dmul>
 8005df0:	a33c      	add	r3, pc, #240	; (adr r3, 8005ee4 <__kernel_sin+0x15c>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa f9ed 	bl	80001d4 <__adddf3>
 8005dfa:	4652      	mov	r2, sl
 8005dfc:	465b      	mov	r3, fp
 8005dfe:	f7fa fb9f 	bl	8000540 <__aeabi_dmul>
 8005e02:	a33a      	add	r3, pc, #232	; (adr r3, 8005eec <__kernel_sin+0x164>)
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f7fa f9e2 	bl	80001d0 <__aeabi_dsub>
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	465b      	mov	r3, fp
 8005e10:	f7fa fb96 	bl	8000540 <__aeabi_dmul>
 8005e14:	a337      	add	r3, pc, #220	; (adr r3, 8005ef4 <__kernel_sin+0x16c>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f7fa f9db 	bl	80001d4 <__adddf3>
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	4606      	mov	r6, r0
 8005e22:	460f      	mov	r7, r1
 8005e24:	b9db      	cbnz	r3, 8005e5e <__kernel_sin+0xd6>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	f7fa fb87 	bl	8000540 <__aeabi_dmul>
 8005e32:	a325      	add	r3, pc, #148	; (adr r3, 8005ec8 <__kernel_sin+0x140>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa f9ca 	bl	80001d0 <__aeabi_dsub>
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	464b      	mov	r3, r9
 8005e40:	f7fa fb7e 	bl	8000540 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4620      	mov	r0, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7fa f9c2 	bl	80001d4 <__adddf3>
 8005e50:	4604      	mov	r4, r0
 8005e52:	460d      	mov	r5, r1
 8005e54:	ec45 4b10 	vmov	d0, r4, r5
 8005e58:	b005      	add	sp, #20
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <__kernel_sin+0x148>)
 8005e62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e66:	f7fa fb6b 	bl	8000540 <__aeabi_dmul>
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e70:	463b      	mov	r3, r7
 8005e72:	4640      	mov	r0, r8
 8005e74:	4649      	mov	r1, r9
 8005e76:	f7fa fb63 	bl	8000540 <__aeabi_dmul>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e82:	f7fa f9a5 	bl	80001d0 <__aeabi_dsub>
 8005e86:	4652      	mov	r2, sl
 8005e88:	465b      	mov	r3, fp
 8005e8a:	f7fa fb59 	bl	8000540 <__aeabi_dmul>
 8005e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e92:	f7fa f99d 	bl	80001d0 <__aeabi_dsub>
 8005e96:	a30c      	add	r3, pc, #48	; (adr r3, 8005ec8 <__kernel_sin+0x140>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	f7fa fb4c 	bl	8000540 <__aeabi_dmul>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4630      	mov	r0, r6
 8005eae:	4639      	mov	r1, r7
 8005eb0:	f7fa f990 	bl	80001d4 <__adddf3>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7fa f988 	bl	80001d0 <__aeabi_dsub>
 8005ec0:	e7c6      	b.n	8005e50 <__kernel_sin+0xc8>
 8005ec2:	bf00      	nop
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	55555549 	.word	0x55555549
 8005ecc:	3fc55555 	.word	0x3fc55555
 8005ed0:	3fe00000 	.word	0x3fe00000
 8005ed4:	5acfd57c 	.word	0x5acfd57c
 8005ed8:	3de5d93a 	.word	0x3de5d93a
 8005edc:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ee0:	3e5ae5e6 	.word	0x3e5ae5e6
 8005ee4:	57b1fe7d 	.word	0x57b1fe7d
 8005ee8:	3ec71de3 	.word	0x3ec71de3
 8005eec:	19c161d5 	.word	0x19c161d5
 8005ef0:	3f2a01a0 	.word	0x3f2a01a0
 8005ef4:	1110f8a6 	.word	0x1110f8a6
 8005ef8:	3f811111 	.word	0x3f811111
 8005efc:	00000000 	.word	0x00000000

08005f00 <expm1>:
 8005f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	ec55 4b10 	vmov	r4, r5, d0
 8005f08:	4ad5      	ldr	r2, [pc, #852]	; (8006260 <expm1+0x360>)
 8005f0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	462e      	mov	r6, r5
 8005f12:	d94b      	bls.n	8005fac <expm1+0xac>
 8005f14:	4ad3      	ldr	r2, [pc, #844]	; (8006264 <expm1+0x364>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f240 820c 	bls.w	8006334 <expm1+0x434>
 8005f1c:	4ad2      	ldr	r2, [pc, #840]	; (8006268 <expm1+0x368>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d910      	bls.n	8005f44 <expm1+0x44>
 8005f22:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f26:	4323      	orrs	r3, r4
 8005f28:	ee10 2a10 	vmov	r2, s0
 8005f2c:	d005      	beq.n	8005f3a <expm1+0x3a>
 8005f2e:	462b      	mov	r3, r5
 8005f30:	4620      	mov	r0, r4
 8005f32:	4629      	mov	r1, r5
 8005f34:	f7fa f94e 	bl	80001d4 <__adddf3>
 8005f38:	e016      	b.n	8005f68 <expm1+0x68>
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	da16      	bge.n	8005f6c <expm1+0x6c>
 8005f3e:	2400      	movs	r4, #0
 8005f40:	4dca      	ldr	r5, [pc, #808]	; (800626c <expm1+0x36c>)
 8005f42:	e013      	b.n	8005f6c <expm1+0x6c>
 8005f44:	a3ae      	add	r3, pc, #696	; (adr r3, 8006200 <expm1+0x300>)
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	ee10 0a10 	vmov	r0, s0
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f7fa fd86 	bl	8000a60 <__aeabi_dcmpgt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f000 81ed 	beq.w	8006334 <expm1+0x434>
 8005f5a:	a3ab      	add	r3, pc, #684	; (adr r3, 8006208 <expm1+0x308>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	4610      	mov	r0, r2
 8005f62:	4619      	mov	r1, r3
 8005f64:	f7fa faec 	bl	8000540 <__aeabi_dmul>
 8005f68:	4604      	mov	r4, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	ec45 4b10 	vmov	d0, r4, r5
 8005f70:	b004      	add	sp, #16
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	a3a6      	add	r3, pc, #664	; (adr r3, 8006210 <expm1+0x310>)
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa f928 	bl	80001d4 <__adddf3>
 8005f84:	2200      	movs	r2, #0
 8005f86:	2300      	movs	r3, #0
 8005f88:	f7fa fd4c 	bl	8000a24 <__aeabi_dcmplt>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d1d6      	bne.n	8005f3e <expm1+0x3e>
 8005f90:	a3a1      	add	r3, pc, #644	; (adr r3, 8006218 <expm1+0x318>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa fad1 	bl	8000540 <__aeabi_dmul>
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	f04f 0600 	mov.w	r6, #0
 8005fa4:	f2c0 80b0 	blt.w	8006108 <expm1+0x208>
 8005fa8:	4fb1      	ldr	r7, [pc, #708]	; (8006270 <expm1+0x370>)
 8005faa:	e0ae      	b.n	800610a <expm1+0x20a>
 8005fac:	4ab1      	ldr	r2, [pc, #708]	; (8006274 <expm1+0x374>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	f240 80cf 	bls.w	8006152 <expm1+0x252>
 8005fb4:	4ab0      	ldr	r2, [pc, #704]	; (8006278 <expm1+0x378>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d8ea      	bhi.n	8005f90 <expm1+0x90>
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	a398      	add	r3, pc, #608	; (adr r3, 8006220 <expm1+0x320>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	ee10 0a10 	vmov	r0, s0
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f2c0 8094 	blt.w	80060f4 <expm1+0x1f4>
 8005fcc:	f7fa f900 	bl	80001d0 <__aeabi_dsub>
 8005fd0:	a795      	add	r7, pc, #596	; (adr r7, 8006228 <expm1+0x328>)
 8005fd2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	4689      	mov	r9, r1
 8005fda:	f04f 0a01 	mov.w	sl, #1
 8005fde:	4632      	mov	r2, r6
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa f8f3 	bl	80001d0 <__aeabi_dsub>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4604      	mov	r4, r0
 8005ff0:	460d      	mov	r5, r1
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	f7fa f8eb 	bl	80001d0 <__aeabi_dsub>
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	f7fa f8e7 	bl	80001d0 <__aeabi_dsub>
 8006002:	e9cd 0100 	strd	r0, r1, [sp]
 8006006:	2200      	movs	r2, #0
 8006008:	4b99      	ldr	r3, [pc, #612]	; (8006270 <expm1+0x370>)
 800600a:	4620      	mov	r0, r4
 800600c:	4629      	mov	r1, r5
 800600e:	f7fa fa97 	bl	8000540 <__aeabi_dmul>
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa fa8f 	bl	8000540 <__aeabi_dmul>
 8006022:	a383      	add	r3, pc, #524	; (adr r3, 8006230 <expm1+0x330>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	4680      	mov	r8, r0
 800602a:	4689      	mov	r9, r1
 800602c:	f7fa fa88 	bl	8000540 <__aeabi_dmul>
 8006030:	a381      	add	r3, pc, #516	; (adr r3, 8006238 <expm1+0x338>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa f8cd 	bl	80001d4 <__adddf3>
 800603a:	4642      	mov	r2, r8
 800603c:	464b      	mov	r3, r9
 800603e:	f7fa fa7f 	bl	8000540 <__aeabi_dmul>
 8006042:	a37f      	add	r3, pc, #508	; (adr r3, 8006240 <expm1+0x340>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f8c2 	bl	80001d0 <__aeabi_dsub>
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	f7fa fa76 	bl	8000540 <__aeabi_dmul>
 8006054:	a37c      	add	r3, pc, #496	; (adr r3, 8006248 <expm1+0x348>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa f8bb 	bl	80001d4 <__adddf3>
 800605e:	4642      	mov	r2, r8
 8006060:	464b      	mov	r3, r9
 8006062:	f7fa fa6d 	bl	8000540 <__aeabi_dmul>
 8006066:	a37a      	add	r3, pc, #488	; (adr r3, 8006250 <expm1+0x350>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa f8b0 	bl	80001d0 <__aeabi_dsub>
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	f7fa fa64 	bl	8000540 <__aeabi_dmul>
 8006078:	2200      	movs	r2, #0
 800607a:	4b80      	ldr	r3, [pc, #512]	; (800627c <expm1+0x37c>)
 800607c:	f7fa f8aa 	bl	80001d4 <__adddf3>
 8006080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa fa58 	bl	8000540 <__aeabi_dmul>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	2000      	movs	r0, #0
 8006096:	497a      	ldr	r1, [pc, #488]	; (8006280 <expm1+0x380>)
 8006098:	f7fa f89a 	bl	80001d0 <__aeabi_dsub>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4606      	mov	r6, r0
 80060a2:	460f      	mov	r7, r1
 80060a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a8:	f7fa f892 	bl	80001d0 <__aeabi_dsub>
 80060ac:	4632      	mov	r2, r6
 80060ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b2:	463b      	mov	r3, r7
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa fa42 	bl	8000540 <__aeabi_dmul>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	2000      	movs	r0, #0
 80060c2:	4970      	ldr	r1, [pc, #448]	; (8006284 <expm1+0x384>)
 80060c4:	f7fa f884 	bl	80001d0 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d0:	f7fa fb60 	bl	8000794 <__aeabi_ddiv>
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	f7fa fa32 	bl	8000540 <__aeabi_dmul>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	f1ba 0f00 	cmp.w	sl, #0
 80060e4:	d14e      	bne.n	8006184 <expm1+0x284>
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa fa29 	bl	8000540 <__aeabi_dmul>
 80060ee:	4642      	mov	r2, r8
 80060f0:	464b      	mov	r3, r9
 80060f2:	e03b      	b.n	800616c <expm1+0x26c>
 80060f4:	f7fa f86e 	bl	80001d4 <__adddf3>
 80060f8:	f04f 3aff 	mov.w	sl, #4294967295
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	a755      	add	r7, pc, #340	; (adr r7, 8006258 <expm1+0x358>)
 8006102:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006106:	e76a      	b.n	8005fde <expm1+0xde>
 8006108:	4f5f      	ldr	r7, [pc, #380]	; (8006288 <expm1+0x388>)
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4630      	mov	r0, r6
 8006110:	4639      	mov	r1, r7
 8006112:	f7fa f85f 	bl	80001d4 <__adddf3>
 8006116:	f7fa fcad 	bl	8000a74 <__aeabi_d2iz>
 800611a:	4682      	mov	sl, r0
 800611c:	f7fa f9a6 	bl	800046c <__aeabi_i2d>
 8006120:	a33f      	add	r3, pc, #252	; (adr r3, 8006220 <expm1+0x320>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	4606      	mov	r6, r0
 8006128:	460f      	mov	r7, r1
 800612a:	f7fa fa09 	bl	8000540 <__aeabi_dmul>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4620      	mov	r0, r4
 8006134:	4629      	mov	r1, r5
 8006136:	f7fa f84b 	bl	80001d0 <__aeabi_dsub>
 800613a:	a33b      	add	r3, pc, #236	; (adr r3, 8006228 <expm1+0x328>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	4680      	mov	r8, r0
 8006142:	4689      	mov	r9, r1
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa f9fa 	bl	8000540 <__aeabi_dmul>
 800614c:	4606      	mov	r6, r0
 800614e:	460f      	mov	r7, r1
 8006150:	e745      	b.n	8005fde <expm1+0xde>
 8006152:	4a4e      	ldr	r2, [pc, #312]	; (800628c <expm1+0x38c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d812      	bhi.n	800617e <expm1+0x27e>
 8006158:	a32b      	add	r3, pc, #172	; (adr r3, 8006208 <expm1+0x308>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	ee10 0a10 	vmov	r0, s0
 8006162:	4629      	mov	r1, r5
 8006164:	f7fa f836 	bl	80001d4 <__adddf3>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	f7fa f830 	bl	80001d0 <__aeabi_dsub>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4620      	mov	r0, r4
 8006176:	4629      	mov	r1, r5
 8006178:	f7fa f82a 	bl	80001d0 <__aeabi_dsub>
 800617c:	e6f4      	b.n	8005f68 <expm1+0x68>
 800617e:	f04f 0a00 	mov.w	sl, #0
 8006182:	e740      	b.n	8006006 <expm1+0x106>
 8006184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006188:	f7fa f822 	bl	80001d0 <__aeabi_dsub>
 800618c:	4622      	mov	r2, r4
 800618e:	462b      	mov	r3, r5
 8006190:	f7fa f9d6 	bl	8000540 <__aeabi_dmul>
 8006194:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006198:	f7fa f81a 	bl	80001d0 <__aeabi_dsub>
 800619c:	4642      	mov	r2, r8
 800619e:	464b      	mov	r3, r9
 80061a0:	f7fa f816 	bl	80001d0 <__aeabi_dsub>
 80061a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80061a8:	4606      	mov	r6, r0
 80061aa:	460f      	mov	r7, r1
 80061ac:	d10c      	bne.n	80061c8 <expm1+0x2c8>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4620      	mov	r0, r4
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7fa f80b 	bl	80001d0 <__aeabi_dsub>
 80061ba:	2200      	movs	r2, #0
 80061bc:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <expm1+0x370>)
 80061be:	f7fa f9bf 	bl	8000540 <__aeabi_dmul>
 80061c2:	2200      	movs	r2, #0
 80061c4:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <expm1+0x370>)
 80061c6:	e7d7      	b.n	8006178 <expm1+0x278>
 80061c8:	f1ba 0f01 	cmp.w	sl, #1
 80061cc:	d16f      	bne.n	80062ae <expm1+0x3ae>
 80061ce:	2200      	movs	r2, #0
 80061d0:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <expm1+0x390>)
 80061d2:	4620      	mov	r0, r4
 80061d4:	4629      	mov	r1, r5
 80061d6:	f7fa fc25 	bl	8000a24 <__aeabi_dcmplt>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d05a      	beq.n	8006294 <expm1+0x394>
 80061de:	2200      	movs	r2, #0
 80061e0:	4b23      	ldr	r3, [pc, #140]	; (8006270 <expm1+0x370>)
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7f9 fff5 	bl	80001d4 <__adddf3>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4630      	mov	r0, r6
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7f9 ffed 	bl	80001d0 <__aeabi_dsub>
 80061f6:	2200      	movs	r2, #0
 80061f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80061fc:	e6b2      	b.n	8005f64 <expm1+0x64>
 80061fe:	bf00      	nop
 8006200:	fefa39ef 	.word	0xfefa39ef
 8006204:	40862e42 	.word	0x40862e42
 8006208:	8800759c 	.word	0x8800759c
 800620c:	7e37e43c 	.word	0x7e37e43c
 8006210:	c2f8f359 	.word	0xc2f8f359
 8006214:	01a56e1f 	.word	0x01a56e1f
 8006218:	652b82fe 	.word	0x652b82fe
 800621c:	3ff71547 	.word	0x3ff71547
 8006220:	fee00000 	.word	0xfee00000
 8006224:	3fe62e42 	.word	0x3fe62e42
 8006228:	35793c76 	.word	0x35793c76
 800622c:	3dea39ef 	.word	0x3dea39ef
 8006230:	6e09c32d 	.word	0x6e09c32d
 8006234:	be8afdb7 	.word	0xbe8afdb7
 8006238:	86e65239 	.word	0x86e65239
 800623c:	3ed0cfca 	.word	0x3ed0cfca
 8006240:	9eaadbb7 	.word	0x9eaadbb7
 8006244:	3f14ce19 	.word	0x3f14ce19
 8006248:	19fe5585 	.word	0x19fe5585
 800624c:	3f5a01a0 	.word	0x3f5a01a0
 8006250:	111110f4 	.word	0x111110f4
 8006254:	3fa11111 	.word	0x3fa11111
 8006258:	35793c76 	.word	0x35793c76
 800625c:	bdea39ef 	.word	0xbdea39ef
 8006260:	40436879 	.word	0x40436879
 8006264:	40862e41 	.word	0x40862e41
 8006268:	7fefffff 	.word	0x7fefffff
 800626c:	bff00000 	.word	0xbff00000
 8006270:	3fe00000 	.word	0x3fe00000
 8006274:	3fd62e42 	.word	0x3fd62e42
 8006278:	3ff0a2b1 	.word	0x3ff0a2b1
 800627c:	3ff00000 	.word	0x3ff00000
 8006280:	40080000 	.word	0x40080000
 8006284:	40180000 	.word	0x40180000
 8006288:	bfe00000 	.word	0xbfe00000
 800628c:	3c8fffff 	.word	0x3c8fffff
 8006290:	bfd00000 	.word	0xbfd00000
 8006294:	4632      	mov	r2, r6
 8006296:	463b      	mov	r3, r7
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	f7f9 ff98 	bl	80001d0 <__aeabi_dsub>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	f7f9 ff96 	bl	80001d4 <__adddf3>
 80062a8:	2200      	movs	r2, #0
 80062aa:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <expm1+0x458>)
 80062ac:	e642      	b.n	8005f34 <expm1+0x34>
 80062ae:	f10a 0301 	add.w	r3, sl, #1
 80062b2:	2b39      	cmp	r3, #57	; 0x39
 80062b4:	ea4f 560a 	mov.w	r6, sl, lsl #20
 80062b8:	d90e      	bls.n	80062d8 <expm1+0x3d8>
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f7f9 ff87 	bl	80001d0 <__aeabi_dsub>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	2000      	movs	r0, #0
 80062c8:	4923      	ldr	r1, [pc, #140]	; (8006358 <expm1+0x458>)
 80062ca:	f7f9 ff81 	bl	80001d0 <__aeabi_dsub>
 80062ce:	1873      	adds	r3, r6, r1
 80062d0:	4619      	mov	r1, r3
 80062d2:	2200      	movs	r2, #0
 80062d4:	4b20      	ldr	r3, [pc, #128]	; (8006358 <expm1+0x458>)
 80062d6:	e74f      	b.n	8006178 <expm1+0x278>
 80062d8:	f1ba 0f13 	cmp.w	sl, #19
 80062dc:	dc16      	bgt.n	800630c <expm1+0x40c>
 80062de:	4622      	mov	r2, r4
 80062e0:	462b      	mov	r3, r5
 80062e2:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 80062e6:	f7f9 ff73 	bl	80001d0 <__aeabi_dsub>
 80062ea:	fa47 fa0a 	asr.w	sl, r7, sl
 80062ee:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 80062f2:	f04f 0800 	mov.w	r8, #0
 80062f6:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7f9 ff65 	bl	80001d0 <__aeabi_dsub>
 8006306:	4604      	mov	r4, r0
 8006308:	1875      	adds	r5, r6, r1
 800630a:	e62f      	b.n	8005f6c <expm1+0x6c>
 800630c:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 8006310:	f10a 0a03 	add.w	sl, sl, #3
 8006314:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8006318:	2200      	movs	r2, #0
 800631a:	f7f9 ff5b 	bl	80001d4 <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f7f9 ff53 	bl	80001d0 <__aeabi_dsub>
 800632a:	2200      	movs	r2, #0
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <expm1+0x458>)
 800632e:	f7f9 ff51 	bl	80001d4 <__adddf3>
 8006332:	e7e8      	b.n	8006306 <expm1+0x406>
 8006334:	2e00      	cmp	r6, #0
 8006336:	f6ff ae1e 	blt.w	8005f76 <expm1+0x76>
 800633a:	a305      	add	r3, pc, #20	; (adr r3, 8006350 <expm1+0x450>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	4620      	mov	r0, r4
 8006342:	4629      	mov	r1, r5
 8006344:	f7fa f8fc 	bl	8000540 <__aeabi_dmul>
 8006348:	2600      	movs	r6, #0
 800634a:	e62d      	b.n	8005fa8 <expm1+0xa8>
 800634c:	f3af 8000 	nop.w
 8006350:	652b82fe 	.word	0x652b82fe
 8006354:	3ff71547 	.word	0x3ff71547
 8006358:	3ff00000 	.word	0x3ff00000

0800635c <fabs>:
 800635c:	ec51 0b10 	vmov	r0, r1, d0
 8006360:	ee10 2a10 	vmov	r2, s0
 8006364:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006368:	ec43 2b10 	vmov	d0, r2, r3
 800636c:	4770      	bx	lr
	...

08006370 <floor>:
 8006370:	ec51 0b10 	vmov	r0, r1, d0
 8006374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006378:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800637c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006380:	2e13      	cmp	r6, #19
 8006382:	460c      	mov	r4, r1
 8006384:	ee10 5a10 	vmov	r5, s0
 8006388:	4680      	mov	r8, r0
 800638a:	dc34      	bgt.n	80063f6 <floor+0x86>
 800638c:	2e00      	cmp	r6, #0
 800638e:	da16      	bge.n	80063be <floor+0x4e>
 8006390:	a335      	add	r3, pc, #212	; (adr r3, 8006468 <floor+0xf8>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7f9 ff1d 	bl	80001d4 <__adddf3>
 800639a:	2200      	movs	r2, #0
 800639c:	2300      	movs	r3, #0
 800639e:	f7fa fb5f 	bl	8000a60 <__aeabi_dcmpgt>
 80063a2:	b148      	cbz	r0, 80063b8 <floor+0x48>
 80063a4:	2c00      	cmp	r4, #0
 80063a6:	da59      	bge.n	800645c <floor+0xec>
 80063a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80063ac:	4a30      	ldr	r2, [pc, #192]	; (8006470 <floor+0x100>)
 80063ae:	432b      	orrs	r3, r5
 80063b0:	2500      	movs	r5, #0
 80063b2:	42ab      	cmp	r3, r5
 80063b4:	bf18      	it	ne
 80063b6:	4614      	movne	r4, r2
 80063b8:	4621      	mov	r1, r4
 80063ba:	4628      	mov	r0, r5
 80063bc:	e025      	b.n	800640a <floor+0x9a>
 80063be:	4f2d      	ldr	r7, [pc, #180]	; (8006474 <floor+0x104>)
 80063c0:	4137      	asrs	r7, r6
 80063c2:	ea01 0307 	and.w	r3, r1, r7
 80063c6:	4303      	orrs	r3, r0
 80063c8:	d01f      	beq.n	800640a <floor+0x9a>
 80063ca:	a327      	add	r3, pc, #156	; (adr r3, 8006468 <floor+0xf8>)
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f7f9 ff00 	bl	80001d4 <__adddf3>
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	f7fa fb42 	bl	8000a60 <__aeabi_dcmpgt>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0eb      	beq.n	80063b8 <floor+0x48>
 80063e0:	2c00      	cmp	r4, #0
 80063e2:	bfbe      	ittt	lt
 80063e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80063e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80063ec:	19a4      	addlt	r4, r4, r6
 80063ee:	ea24 0407 	bic.w	r4, r4, r7
 80063f2:	2500      	movs	r5, #0
 80063f4:	e7e0      	b.n	80063b8 <floor+0x48>
 80063f6:	2e33      	cmp	r6, #51	; 0x33
 80063f8:	dd0b      	ble.n	8006412 <floor+0xa2>
 80063fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80063fe:	d104      	bne.n	800640a <floor+0x9a>
 8006400:	ee10 2a10 	vmov	r2, s0
 8006404:	460b      	mov	r3, r1
 8006406:	f7f9 fee5 	bl	80001d4 <__adddf3>
 800640a:	ec41 0b10 	vmov	d0, r0, r1
 800640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006412:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	fa23 f707 	lsr.w	r7, r3, r7
 800641e:	4207      	tst	r7, r0
 8006420:	d0f3      	beq.n	800640a <floor+0x9a>
 8006422:	a311      	add	r3, pc, #68	; (adr r3, 8006468 <floor+0xf8>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7f9 fed4 	bl	80001d4 <__adddf3>
 800642c:	2200      	movs	r2, #0
 800642e:	2300      	movs	r3, #0
 8006430:	f7fa fb16 	bl	8000a60 <__aeabi_dcmpgt>
 8006434:	2800      	cmp	r0, #0
 8006436:	d0bf      	beq.n	80063b8 <floor+0x48>
 8006438:	2c00      	cmp	r4, #0
 800643a:	da02      	bge.n	8006442 <floor+0xd2>
 800643c:	2e14      	cmp	r6, #20
 800643e:	d103      	bne.n	8006448 <floor+0xd8>
 8006440:	3401      	adds	r4, #1
 8006442:	ea25 0507 	bic.w	r5, r5, r7
 8006446:	e7b7      	b.n	80063b8 <floor+0x48>
 8006448:	2301      	movs	r3, #1
 800644a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800644e:	fa03 f606 	lsl.w	r6, r3, r6
 8006452:	4435      	add	r5, r6
 8006454:	4545      	cmp	r5, r8
 8006456:	bf38      	it	cc
 8006458:	18e4      	addcc	r4, r4, r3
 800645a:	e7f2      	b.n	8006442 <floor+0xd2>
 800645c:	2500      	movs	r5, #0
 800645e:	462c      	mov	r4, r5
 8006460:	e7aa      	b.n	80063b8 <floor+0x48>
 8006462:	bf00      	nop
 8006464:	f3af 8000 	nop.w
 8006468:	8800759c 	.word	0x8800759c
 800646c:	7e37e43c 	.word	0x7e37e43c
 8006470:	bff00000 	.word	0xbff00000
 8006474:	000fffff 	.word	0x000fffff

08006478 <scalbn>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	ec55 4b10 	vmov	r4, r5, d0
 800647e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006482:	4606      	mov	r6, r0
 8006484:	462b      	mov	r3, r5
 8006486:	b9aa      	cbnz	r2, 80064b4 <scalbn+0x3c>
 8006488:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800648c:	4323      	orrs	r3, r4
 800648e:	d03b      	beq.n	8006508 <scalbn+0x90>
 8006490:	4b31      	ldr	r3, [pc, #196]	; (8006558 <scalbn+0xe0>)
 8006492:	4629      	mov	r1, r5
 8006494:	2200      	movs	r2, #0
 8006496:	ee10 0a10 	vmov	r0, s0
 800649a:	f7fa f851 	bl	8000540 <__aeabi_dmul>
 800649e:	4b2f      	ldr	r3, [pc, #188]	; (800655c <scalbn+0xe4>)
 80064a0:	429e      	cmp	r6, r3
 80064a2:	4604      	mov	r4, r0
 80064a4:	460d      	mov	r5, r1
 80064a6:	da12      	bge.n	80064ce <scalbn+0x56>
 80064a8:	a327      	add	r3, pc, #156	; (adr r3, 8006548 <scalbn+0xd0>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7fa f847 	bl	8000540 <__aeabi_dmul>
 80064b2:	e009      	b.n	80064c8 <scalbn+0x50>
 80064b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80064b8:	428a      	cmp	r2, r1
 80064ba:	d10c      	bne.n	80064d6 <scalbn+0x5e>
 80064bc:	ee10 2a10 	vmov	r2, s0
 80064c0:	4620      	mov	r0, r4
 80064c2:	4629      	mov	r1, r5
 80064c4:	f7f9 fe86 	bl	80001d4 <__adddf3>
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	e01c      	b.n	8006508 <scalbn+0x90>
 80064ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80064d2:	460b      	mov	r3, r1
 80064d4:	3a36      	subs	r2, #54	; 0x36
 80064d6:	4432      	add	r2, r6
 80064d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064dc:	428a      	cmp	r2, r1
 80064de:	dd0b      	ble.n	80064f8 <scalbn+0x80>
 80064e0:	ec45 4b11 	vmov	d1, r4, r5
 80064e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006550 <scalbn+0xd8>
 80064e8:	f000 f83c 	bl	8006564 <copysign>
 80064ec:	a318      	add	r3, pc, #96	; (adr r3, 8006550 <scalbn+0xd8>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	ec51 0b10 	vmov	r0, r1, d0
 80064f6:	e7da      	b.n	80064ae <scalbn+0x36>
 80064f8:	2a00      	cmp	r2, #0
 80064fa:	dd08      	ble.n	800650e <scalbn+0x96>
 80064fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006500:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006504:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006508:	ec45 4b10 	vmov	d0, r4, r5
 800650c:	bd70      	pop	{r4, r5, r6, pc}
 800650e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006512:	da0d      	bge.n	8006530 <scalbn+0xb8>
 8006514:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006518:	429e      	cmp	r6, r3
 800651a:	ec45 4b11 	vmov	d1, r4, r5
 800651e:	dce1      	bgt.n	80064e4 <scalbn+0x6c>
 8006520:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006548 <scalbn+0xd0>
 8006524:	f000 f81e 	bl	8006564 <copysign>
 8006528:	a307      	add	r3, pc, #28	; (adr r3, 8006548 <scalbn+0xd0>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	e7e0      	b.n	80064f2 <scalbn+0x7a>
 8006530:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006534:	3236      	adds	r2, #54	; 0x36
 8006536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800653a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	2200      	movs	r2, #0
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <scalbn+0xe8>)
 8006546:	e7b2      	b.n	80064ae <scalbn+0x36>
 8006548:	c2f8f359 	.word	0xc2f8f359
 800654c:	01a56e1f 	.word	0x01a56e1f
 8006550:	8800759c 	.word	0x8800759c
 8006554:	7e37e43c 	.word	0x7e37e43c
 8006558:	43500000 	.word	0x43500000
 800655c:	ffff3cb0 	.word	0xffff3cb0
 8006560:	3c900000 	.word	0x3c900000

08006564 <copysign>:
 8006564:	ec51 0b10 	vmov	r0, r1, d0
 8006568:	ee11 0a90 	vmov	r0, s3
 800656c:	ee10 2a10 	vmov	r2, s0
 8006570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006574:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006578:	ea41 0300 	orr.w	r3, r1, r0
 800657c:	ec43 2b10 	vmov	d0, r2, r3
 8006580:	4770      	bx	lr
	...

08006584 <_init>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr

08006590 <_fini>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr
