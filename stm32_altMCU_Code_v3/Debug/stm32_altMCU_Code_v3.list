
stm32_altMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e2c  08007e2c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007e2c  08007e2c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e2c  08007e2c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028f4  20000014  08007e48  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002908  08007e48  00022908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002eb11  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000544a  00000000  00000000  0004eb55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000188a1  00000000  00000000  00053f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001c48  00000000  00000000  0006c840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c88  00000000  00000000  0006e488  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001724a  00000000  00000000  00070110  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001a5ca  00000000  00000000  0008735a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00084370  00000000  00000000  000a1924  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00125c94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005010  00000000  00000000  00125d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d6c 	.word	0x08007d6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007d6c 	.word	0x08007d6c

080001d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d0:	b500      	push	{lr}
 80001d2:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80001d4:	2300      	movs	r3, #0
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	9303      	str	r3, [sp, #12]
 80001de:	9304      	str	r3, [sp, #16]
 80001e0:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001e2:	4826      	ldr	r0, [pc, #152]	; (800027c <MX_ADC1_Init+0xac>)
 80001e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001e8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80001ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80001ee:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f2:	2201      	movs	r2, #1
 80001f4:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001f6:	7642      	strb	r2, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001f8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80001fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000200:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000202:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000206:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000208:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 800020a:	2103      	movs	r1, #3
 800020c:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800020e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000212:	2208      	movs	r2, #8
 8000214:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000216:	7603      	strb	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000218:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800021a:	f001 fbbf 	bl	800199c <HAL_ADC_Init>
 800021e:	bb08      	cbnz	r0, 8000264 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000220:	2301      	movs	r3, #1
 8000222:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000224:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000226:	2300      	movs	r3, #0
 8000228:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800022a:	2205      	movs	r2, #5
 800022c:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800022e:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000230:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000232:	4669      	mov	r1, sp
 8000234:	4811      	ldr	r0, [pc, #68]	; (800027c <MX_ADC1_Init+0xac>)
 8000236:	f001 fd6f 	bl	8001d18 <HAL_ADC_ConfigChannel>
 800023a:	b9b0      	cbnz	r0, 800026a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800023c:	2302      	movs	r3, #2
 800023e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000240:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000242:	4669      	mov	r1, sp
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <MX_ADC1_Init+0xac>)
 8000246:	f001 fd67 	bl	8001d18 <HAL_ADC_ConfigChannel>
 800024a:	b988      	cbnz	r0, 8000270 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800024c:	230b      	movs	r3, #11
 800024e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000250:	2303      	movs	r3, #3
 8000252:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000254:	4669      	mov	r1, sp
 8000256:	4809      	ldr	r0, [pc, #36]	; (800027c <MX_ADC1_Init+0xac>)
 8000258:	f001 fd5e 	bl	8001d18 <HAL_ADC_ConfigChannel>
 800025c:	b958      	cbnz	r0, 8000276 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
  }

}
 800025e:	b007      	add	sp, #28
 8000260:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000264:	f000 fe38 	bl	8000ed8 <Error_Handler>
 8000268:	e7da      	b.n	8000220 <MX_ADC1_Init+0x50>
    Error_Handler();
 800026a:	f000 fe35 	bl	8000ed8 <Error_Handler>
 800026e:	e7e5      	b.n	800023c <MX_ADC1_Init+0x6c>
    Error_Handler();
 8000270:	f000 fe32 	bl	8000ed8 <Error_Handler>
 8000274:	e7ea      	b.n	800024c <MX_ADC1_Init+0x7c>
    Error_Handler();
 8000276:	f000 fe2f 	bl	8000ed8 <Error_Handler>
}
 800027a:	e7f0      	b.n	800025e <MX_ADC1_Init+0x8e>
 800027c:	200020ec 	.word	0x200020ec

08000280 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	2300      	movs	r3, #0
 8000286:	9303      	str	r3, [sp, #12]
 8000288:	9304      	str	r3, [sp, #16]
 800028a:	9305      	str	r3, [sp, #20]
 800028c:	9306      	str	r3, [sp, #24]
 800028e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000290:	6803      	ldr	r3, [r0, #0]
 8000292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000296:	d001      	beq.n	800029c <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000298:	b009      	add	sp, #36	; 0x24
 800029a:	bd30      	pop	{r4, r5, pc}
 800029c:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800029e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80002a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002ac:	615a      	str	r2, [r3, #20]
 80002ae:	695a      	ldr	r2, [r3, #20]
 80002b0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80002b4:	9200      	str	r2, [sp, #0]
 80002b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	695a      	ldr	r2, [r3, #20]
 80002ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	695a      	ldr	r2, [r3, #20]
 80002c2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80002c6:	9201      	str	r2, [sp, #4]
 80002c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ca:	695a      	ldr	r2, [r3, #20]
 80002cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80002d0:	615a      	str	r2, [r3, #20]
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002d8:	9302      	str	r3, [sp, #8]
 80002da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TP_AFE_OUT_Pin|TP_NOSE_THERMISTOR_Pin;
 80002dc:	2503      	movs	r5, #3
 80002de:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e2:	a903      	add	r1, sp, #12
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f002 f836 	bl	8002358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TP_THERMISTOR_Pin;
 80002ec:	2301      	movs	r3, #1
 80002ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2500      	movs	r5, #0
 80002f4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(TP_THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 80002f6:	a903      	add	r1, sp, #12
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <HAL_ADC_MspInit+0xb0>)
 80002fa:	f002 f82d 	bl	8002358 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <HAL_ADC_MspInit+0xb4>)
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <HAL_ADC_MspInit+0xb8>)
 8000302:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000304:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000306:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800030c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000310:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000316:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000318:	6185      	str	r5, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800031a:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800031c:	f001 ff18 	bl	8002150 <HAL_DMA_Init>
 8000320:	b918      	cbnz	r0, 800032a <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <HAL_ADC_MspInit+0xb4>)
 8000324:	63a3      	str	r3, [r4, #56]	; 0x38
 8000326:	625c      	str	r4, [r3, #36]	; 0x24
}
 8000328:	e7b6      	b.n	8000298 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800032a:	f000 fdd5 	bl	8000ed8 <Error_Handler>
 800032e:	e7f8      	b.n	8000322 <HAL_ADC_MspInit+0xa2>
 8000330:	48000400 	.word	0x48000400
 8000334:	2000213c 	.word	0x2000213c
 8000338:	40020008 	.word	0x40020008

0800033c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800033c:	b500      	push	{lr}
 800033e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <MX_DMA_Init+0x30>)
 8000342:	695a      	ldr	r2, [r3, #20]
 8000344:	f042 0201 	orr.w	r2, r2, #1
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2105      	movs	r1, #5
 8000358:	200b      	movs	r0, #11
 800035a:	f001 fe8f 	bl	800207c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800035e:	200b      	movs	r0, #11
 8000360:	f001 fec0 	bl	80020e4 <HAL_NVIC_EnableIRQ>

}
 8000364:	b003      	add	sp, #12
 8000366:	f85d fb04 	ldr.w	pc, [sp], #4
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <IMU_parseCommandReport>:
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void IMU_parseCommandReport(void)
{
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <IMU_parseCommandReport+0x1c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2bf1      	cmp	r3, #241	; 0xf1
 8000376:	d000      	beq.n	800037a <IMU_parseCommandReport+0xa>
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000378:	4770      	bx	lr
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <IMU_parseCommandReport+0x1c>)
 800037c:	789b      	ldrb	r3, [r3, #2]
		if (command == COMMAND_ME_CALIBRATE)
 800037e:	2b07      	cmp	r3, #7
 8000380:	d1fa      	bne.n	8000378 <IMU_parseCommandReport+0x8>
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
 8000382:	4b02      	ldr	r3, [pc, #8]	; (800038c <IMU_parseCommandReport+0x1c>)
 8000384:	795a      	ldrb	r2, [r3, #5]
 8000386:	4b02      	ldr	r3, [pc, #8]	; (8000390 <IMU_parseCommandReport+0x20>)
 8000388:	701a      	strb	r2, [r3, #0]
}
 800038a:	e7f5      	b.n	8000378 <IMU_parseCommandReport+0x8>
 800038c:	20002238 	.word	0x20002238
 8000390:	200022ef 	.word	0x200022ef

08000394 <IMU_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void IMU_parseInputReport(void)
{
 8000394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8000398:	4a7e      	ldr	r2, [pc, #504]	; (8000594 <IMU_parseInputReport+0x200>)
 800039a:	7853      	ldrb	r3, [r2, #1]
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	b21b      	sxth	r3, r3
 80003a0:	7812      	ldrb	r2, [r2, #0]
 80003a2:	4313      	orrs	r3, r2
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80003a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80003a8:	3b04      	subs	r3, #4
 80003aa:	b219      	sxth	r1, r3

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
 80003ac:	4b7a      	ldr	r3, [pc, #488]	; (8000598 <IMU_parseInputReport+0x204>)
 80003ae:	7918      	ldrb	r0, [r3, #4]
 80003b0:	78da      	ldrb	r2, [r3, #3]
 80003b2:	0412      	lsls	r2, r2, #16
 80003b4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80003b8:	7898      	ldrb	r0, [r3, #2]
 80003ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80003be:	7858      	ldrb	r0, [r3, #1]
 80003c0:	4302      	orrs	r2, r0
 80003c2:	4876      	ldr	r0, [pc, #472]	; (800059c <IMU_parseInputReport+0x208>)
 80003c4:	6002      	str	r2, [r0, #0]

	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
 80003c6:	79da      	ldrb	r2, [r3, #7]
 80003c8:	f002 0703 	and.w	r7, r2, #3
	uint16_t data1 = (uint16_t)shtpData[5 + 5] << 8 | shtpData[5 + 4];
 80003cc:	7a98      	ldrb	r0, [r3, #10]
 80003ce:	7a5e      	ldrb	r6, [r3, #9]
 80003d0:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
	uint16_t data2 = (uint16_t)shtpData[5 + 7] << 8 | shtpData[5 + 6];
 80003d4:	7b1c      	ldrb	r4, [r3, #12]
 80003d6:	7add      	ldrb	r5, [r3, #11]
 80003d8:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
	uint16_t data3 = (uint16_t)shtpData[5 + 9] << 8 | shtpData[5 + 8];
 80003dc:	f893 c00e 	ldrb.w	ip, [r3, #14]
 80003e0:	7b5c      	ldrb	r4, [r3, #13]
 80003e2:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
	uint16_t data4 = 0;
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports

	if (dataLength - 5 > 9)
 80003e6:	1f4b      	subs	r3, r1, #5
 80003e8:	2b09      	cmp	r3, #9
 80003ea:	dd32      	ble.n	8000452 <IMU_parseInputReport+0xbe>
	{
		data4 = (uint16_t)shtpData[5 + 11] << 8 | shtpData[5 + 10];
 80003ec:	496a      	ldr	r1, [pc, #424]	; (8000598 <IMU_parseInputReport+0x204>)
 80003ee:	f891 c010 	ldrb.w	ip, [r1, #16]
 80003f2:	f891 900f 	ldrb.w	r9, [r1, #15]
 80003f6:	ea49 290c 	orr.w	r9, r9, ip, lsl #8
	}
	if (dataLength - 5 > 11)
 80003fa:	2b0b      	cmp	r3, #11
 80003fc:	dd2c      	ble.n	8000458 <IMU_parseInputReport+0xc4>
	{
		data5 = (uint16_t)shtpData[5 + 13] << 8 | shtpData[5 + 12];
 80003fe:	4b66      	ldr	r3, [pc, #408]	; (8000598 <IMU_parseInputReport+0x204>)
 8000400:	7c99      	ldrb	r1, [r3, #18]
 8000402:	f893 8011 	ldrb.w	r8, [r3, #17]
 8000406:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
	}

	//Store these generic values to their proper global variable
	if (shtpData[5] == SENSOR_REPORTID_ACCELEROMETER)
 800040a:	4b63      	ldr	r3, [pc, #396]	; (8000598 <IMU_parseInputReport+0x204>)
 800040c:	795b      	ldrb	r3, [r3, #5]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d025      	beq.n	800045e <IMU_parseInputReport+0xca>
		accelAccuracy = status;
		rawAccelX = data1;
		rawAccelY = data2;
		rawAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_LINEAR_ACCELERATION)
 8000412:	2b04      	cmp	r3, #4
 8000414:	d02d      	beq.n	8000472 <IMU_parseInputReport+0xde>
		accelLinAccuracy = status;
		rawLinAccelX = data1;
		rawLinAccelY = data2;
		rawLinAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_GYROSCOPE)
 8000416:	2b02      	cmp	r3, #2
 8000418:	d034      	beq.n	8000484 <IMU_parseInputReport+0xf0>
		gyroAccuracy = status;
		rawGyroX = data1;
		rawGyroY = data2;
		rawGyroZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_MAGNETIC_FIELD)
 800041a:	2b03      	cmp	r3, #3
 800041c:	d03b      	beq.n	8000496 <IMU_parseInputReport+0x102>
		magAccuracy = status;
		rawMagX = data1;
		rawMagY = data2;
		rawMagZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_ROTATION_VECTOR || shtpData[5] == SENSOR_REPORTID_GAME_ROTATION_VECTOR)
 800041e:	2b05      	cmp	r3, #5
 8000420:	d042      	beq.n	80004a8 <IMU_parseInputReport+0x114>
 8000422:	2b08      	cmp	r3, #8
 8000424:	d040      	beq.n	80004a8 <IMU_parseInputReport+0x114>
		rawQuatJ = data2;
		rawQuatK = data3;
		rawQuatReal = data4;
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
	}
	else if (shtpData[5] == SENSOR_REPORTID_STEP_COUNTER)
 8000426:	2b11      	cmp	r3, #17
 8000428:	d06f      	beq.n	800050a <IMU_parseInputReport+0x176>

//		osMessageQueuePut(stepSampleQueueHandle, &stepSample, 0U, osWaitForever);

		stepCount = data3; //Bytes 8/9
	}
	else if (shtpData[5] == SENSOR_REPORTID_STABILITY_CLASSIFIER)
 800042a:	2b13      	cmp	r3, #19
 800042c:	d075      	beq.n	800051a <IMU_parseInputReport+0x186>

//		osMessageQueuePut(stabilitySampleQueueHandle, &stabilitySample, 0U, osWaitForever);

		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
	}
	else if (shtpData[5] == SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER)
 800042e:	2b1e      	cmp	r3, #30
 8000430:	d07d      	beq.n	800052e <IMU_parseInputReport+0x19a>
//		osMessageQueuePut(activitySampleQueueHandle, &activitySample, 0U, osWaitForever);



	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_ACCELEROMETER)
 8000432:	2b14      	cmp	r3, #20
 8000434:	f000 8099 	beq.w	800056a <IMU_parseInputReport+0x1d6>
	{
		memsRawAccelX = data1;
		memsRawAccelY = data2;
		memsRawAccelZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_GYROSCOPE)
 8000438:	2b15      	cmp	r3, #21
 800043a:	f000 809d 	beq.w	8000578 <IMU_parseInputReport+0x1e4>
	{
		memsRawGyroX = data1;
		memsRawGyroY = data2;
		memsRawGyroZ = data3;
	}
	else if (shtpData[5] == SENSOR_REPORTID_RAW_MAGNETOMETER)
 800043e:	2b16      	cmp	r3, #22
 8000440:	f000 80a1 	beq.w	8000586 <IMU_parseInputReport+0x1f2>
	{
		memsRawMagX = data1;
		memsRawMagY = data2;
		memsRawMagZ = data3;
	}
	else if (shtpData[5] == SHTP_REPORT_COMMAND_RESPONSE)
 8000444:	2bf1      	cmp	r3, #241	; 0xf1
 8000446:	d112      	bne.n	800046e <IMU_parseInputReport+0xda>
	{
//		Serial.println("!");
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response

		if (command == COMMAND_ME_CALIBRATE)
 8000448:	2a07      	cmp	r2, #7
 800044a:	d110      	bne.n	800046e <IMU_parseInputReport+0xda>
		{
			//Serial.println("ME Cal report found!");
			calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 800044c:	4b54      	ldr	r3, [pc, #336]	; (80005a0 <IMU_parseInputReport+0x20c>)
 800044e:	7018      	strb	r0, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000450:	e00d      	b.n	800046e <IMU_parseInputReport+0xda>
	uint16_t data4 = 0;
 8000452:	f04f 0900 	mov.w	r9, #0
 8000456:	e7d0      	b.n	80003fa <IMU_parseInputReport+0x66>
	uint16_t data5 = 0; //We would need to change this to uin32_t to capture time stamp value on Raw Accel/Gyro/Mag reports
 8000458:	f04f 0800 	mov.w	r8, #0
 800045c:	e7d5      	b.n	800040a <IMU_parseInputReport+0x76>
		accelAccuracy = status;
 800045e:	4b51      	ldr	r3, [pc, #324]	; (80005a4 <IMU_parseInputReport+0x210>)
 8000460:	801f      	strh	r7, [r3, #0]
		rawAccelX = data1;
 8000462:	4b51      	ldr	r3, [pc, #324]	; (80005a8 <IMU_parseInputReport+0x214>)
 8000464:	801e      	strh	r6, [r3, #0]
		rawAccelY = data2;
 8000466:	4b51      	ldr	r3, [pc, #324]	; (80005ac <IMU_parseInputReport+0x218>)
 8000468:	801d      	strh	r5, [r3, #0]
		rawAccelZ = data3;
 800046a:	4b51      	ldr	r3, [pc, #324]	; (80005b0 <IMU_parseInputReport+0x21c>)
 800046c:	801c      	strh	r4, [r3, #0]
}
 800046e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		accelLinAccuracy = status;
 8000472:	4b50      	ldr	r3, [pc, #320]	; (80005b4 <IMU_parseInputReport+0x220>)
 8000474:	801f      	strh	r7, [r3, #0]
		rawLinAccelX = data1;
 8000476:	4b50      	ldr	r3, [pc, #320]	; (80005b8 <IMU_parseInputReport+0x224>)
 8000478:	801e      	strh	r6, [r3, #0]
		rawLinAccelY = data2;
 800047a:	4b50      	ldr	r3, [pc, #320]	; (80005bc <IMU_parseInputReport+0x228>)
 800047c:	801d      	strh	r5, [r3, #0]
		rawLinAccelZ = data3;
 800047e:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <IMU_parseInputReport+0x22c>)
 8000480:	801c      	strh	r4, [r3, #0]
 8000482:	e7f4      	b.n	800046e <IMU_parseInputReport+0xda>
		gyroAccuracy = status;
 8000484:	4b4f      	ldr	r3, [pc, #316]	; (80005c4 <IMU_parseInputReport+0x230>)
 8000486:	801f      	strh	r7, [r3, #0]
		rawGyroX = data1;
 8000488:	4b4f      	ldr	r3, [pc, #316]	; (80005c8 <IMU_parseInputReport+0x234>)
 800048a:	801e      	strh	r6, [r3, #0]
		rawGyroY = data2;
 800048c:	4b4f      	ldr	r3, [pc, #316]	; (80005cc <IMU_parseInputReport+0x238>)
 800048e:	801d      	strh	r5, [r3, #0]
		rawGyroZ = data3;
 8000490:	4b4f      	ldr	r3, [pc, #316]	; (80005d0 <IMU_parseInputReport+0x23c>)
 8000492:	801c      	strh	r4, [r3, #0]
 8000494:	e7eb      	b.n	800046e <IMU_parseInputReport+0xda>
		magAccuracy = status;
 8000496:	4b4f      	ldr	r3, [pc, #316]	; (80005d4 <IMU_parseInputReport+0x240>)
 8000498:	801f      	strh	r7, [r3, #0]
		rawMagX = data1;
 800049a:	4b4f      	ldr	r3, [pc, #316]	; (80005d8 <IMU_parseInputReport+0x244>)
 800049c:	801e      	strh	r6, [r3, #0]
		rawMagY = data2;
 800049e:	4b4f      	ldr	r3, [pc, #316]	; (80005dc <IMU_parseInputReport+0x248>)
 80004a0:	801d      	strh	r5, [r3, #0]
		rawMagZ = data3;
 80004a2:	4b4f      	ldr	r3, [pc, #316]	; (80005e0 <IMU_parseInputReport+0x24c>)
 80004a4:	801c      	strh	r4, [r3, #0]
 80004a6:	e7e2      	b.n	800046e <IMU_parseInputReport+0xda>
		rotSample.tick_ms = HAL_GetTick();
 80004a8:	f001 f93e 	bl	8001728 <HAL_GetTick>
 80004ac:	4b4d      	ldr	r3, [pc, #308]	; (80005e4 <IMU_parseInputReport+0x250>)
 80004ae:	6158      	str	r0, [r3, #20]
		rotSample.quatI = data1;
 80004b0:	ee07 6a90 	vmov	s15, r6
 80004b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004b8:	edc3 7a00 	vstr	s15, [r3]
		rotSample.quatJ = data2;
 80004bc:	ee07 5a90 	vmov	s15, r5
 80004c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004c4:	edc3 7a01 	vstr	s15, [r3, #4]
		rotSample.quatK = data3;
 80004c8:	ee07 4a90 	vmov	s15, r4
 80004cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004d0:	edc3 7a02 	vstr	s15, [r3, #8]
		rotSample.quatReal = data4;
 80004d4:	ee07 9a90 	vmov	s15, r9
 80004d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004dc:	edc3 7a03 	vstr	s15, [r3, #12]
		rotSample.quatRadianAccuracy = data5;
 80004e0:	ee07 8a90 	vmov	s15, r8
 80004e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004e8:	edc3 7a04 	vstr	s15, [r3, #16]
		quatAccuracy = status;
 80004ec:	4b3e      	ldr	r3, [pc, #248]	; (80005e8 <IMU_parseInputReport+0x254>)
 80004ee:	801f      	strh	r7, [r3, #0]
		rawQuatI = data1;
 80004f0:	4b3e      	ldr	r3, [pc, #248]	; (80005ec <IMU_parseInputReport+0x258>)
 80004f2:	801e      	strh	r6, [r3, #0]
		rawQuatJ = data2;
 80004f4:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <IMU_parseInputReport+0x25c>)
 80004f6:	801d      	strh	r5, [r3, #0]
		rawQuatK = data3;
 80004f8:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <IMU_parseInputReport+0x260>)
 80004fa:	801c      	strh	r4, [r3, #0]
		rawQuatReal = data4;
 80004fc:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <IMU_parseInputReport+0x264>)
 80004fe:	f8a3 9000 	strh.w	r9, [r3]
		rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8000502:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <IMU_parseInputReport+0x268>)
 8000504:	f8a3 8000 	strh.w	r8, [r3]
 8000508:	e7b1      	b.n	800046e <IMU_parseInputReport+0xda>
		stepSample.tick_ms = HAL_GetTick();
 800050a:	f001 f90d 	bl	8001728 <HAL_GetTick>
 800050e:	4b3c      	ldr	r3, [pc, #240]	; (8000600 <IMU_parseInputReport+0x26c>)
 8000510:	6058      	str	r0, [r3, #4]
		stepSample.stepCount = data3;
 8000512:	801c      	strh	r4, [r3, #0]
		stepCount = data3; //Bytes 8/9
 8000514:	4b3b      	ldr	r3, [pc, #236]	; (8000604 <IMU_parseInputReport+0x270>)
 8000516:	801c      	strh	r4, [r3, #0]
 8000518:	e7a9      	b.n	800046e <IMU_parseInputReport+0xda>
		stabilitySample.tick_ms = HAL_GetTick();
 800051a:	f001 f905 	bl	8001728 <HAL_GetTick>
 800051e:	4a3a      	ldr	r2, [pc, #232]	; (8000608 <IMU_parseInputReport+0x274>)
 8000520:	6050      	str	r0, [r2, #4]
		stabilitySample.stabilityClass = shtpData[5 + 4];
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <IMU_parseInputReport+0x204>)
 8000524:	7a5b      	ldrb	r3, [r3, #9]
 8000526:	7013      	strb	r3, [r2, #0]
		stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8000528:	4a38      	ldr	r2, [pc, #224]	; (800060c <IMU_parseInputReport+0x278>)
 800052a:	7013      	strb	r3, [r2, #0]
 800052c:	e79f      	b.n	800046e <IMU_parseInputReport+0xda>
		activitySample.tick_ms = HAL_GetTick();
 800052e:	f001 f8fb 	bl	8001728 <HAL_GetTick>
 8000532:	4b37      	ldr	r3, [pc, #220]	; (8000610 <IMU_parseInputReport+0x27c>)
 8000534:	60d8      	str	r0, [r3, #12]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8000536:	2300      	movs	r3, #0
 8000538:	2b08      	cmp	r3, #8
 800053a:	d809      	bhi.n	8000550 <IMU_parseInputReport+0x1bc>
			_activityConfidences[x] = shtpData[5 + 6 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800053c:	f103 010b 	add.w	r1, r3, #11
 8000540:	4a34      	ldr	r2, [pc, #208]	; (8000614 <IMU_parseInputReport+0x280>)
 8000542:	6812      	ldr	r2, [r2, #0]
 8000544:	4814      	ldr	r0, [pc, #80]	; (8000598 <IMU_parseInputReport+0x204>)
 8000546:	5c41      	ldrb	r1, [r0, r1]
 8000548:	54d1      	strb	r1, [r2, r3]
		for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800054a:	3301      	adds	r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	e7f3      	b.n	8000538 <IMU_parseInputReport+0x1a4>
		activityClassifier = shtpData[5 + 5]; //Most likely state
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <IMU_parseInputReport+0x204>)
 8000552:	7a9a      	ldrb	r2, [r3, #10]
 8000554:	4b30      	ldr	r3, [pc, #192]	; (8000618 <IMU_parseInputReport+0x284>)
 8000556:	701a      	strb	r2, [r3, #0]
		memcpy(activitySample.activityConfidence, _activityConfidences, 9);
 8000558:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <IMU_parseInputReport+0x280>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <IMU_parseInputReport+0x27c>)
 800055e:	6810      	ldr	r0, [r2, #0]
 8000560:	6851      	ldr	r1, [r2, #4]
 8000562:	c303      	stmia	r3!, {r0, r1}
 8000564:	7a12      	ldrb	r2, [r2, #8]
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	e781      	b.n	800046e <IMU_parseInputReport+0xda>
		memsRawAccelX = data1;
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <IMU_parseInputReport+0x288>)
 800056c:	801e      	strh	r6, [r3, #0]
		memsRawAccelY = data2;
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <IMU_parseInputReport+0x28c>)
 8000570:	801d      	strh	r5, [r3, #0]
		memsRawAccelZ = data3;
 8000572:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <IMU_parseInputReport+0x290>)
 8000574:	801c      	strh	r4, [r3, #0]
 8000576:	e77a      	b.n	800046e <IMU_parseInputReport+0xda>
		memsRawGyroX = data1;
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <IMU_parseInputReport+0x294>)
 800057a:	801e      	strh	r6, [r3, #0]
		memsRawGyroY = data2;
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <IMU_parseInputReport+0x298>)
 800057e:	801d      	strh	r5, [r3, #0]
		memsRawGyroZ = data3;
 8000580:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <IMU_parseInputReport+0x29c>)
 8000582:	801c      	strh	r4, [r3, #0]
 8000584:	e773      	b.n	800046e <IMU_parseInputReport+0xda>
		memsRawMagX = data1;
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <IMU_parseInputReport+0x2a0>)
 8000588:	801e      	strh	r6, [r3, #0]
		memsRawMagY = data2;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <IMU_parseInputReport+0x2a4>)
 800058c:	801d      	strh	r5, [r3, #0]
		memsRawMagZ = data3;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <IMU_parseInputReport+0x2a8>)
 8000590:	801c      	strh	r4, [r3, #0]
 8000592:	e76c      	b.n	800046e <IMU_parseInputReport+0xda>
 8000594:	20002184 	.word	0x20002184
 8000598:	20002238 	.word	0x20002238
 800059c:	200021a4 	.word	0x200021a4
 80005a0:	200022ef 	.word	0x200022ef
 80005a4:	20002304 	.word	0x20002304
 80005a8:	200022ec 	.word	0x200022ec
 80005ac:	20002314 	.word	0x20002314
 80005b0:	200021f0 	.word	0x200021f0
 80005b4:	200021ec 	.word	0x200021ec
 80005b8:	200021d4 	.word	0x200021d4
 80005bc:	200022f0 	.word	0x200022f0
 80005c0:	20002224 	.word	0x20002224
 80005c4:	20002226 	.word	0x20002226
 80005c8:	2000222c 	.word	0x2000222c
 80005cc:	200021d8 	.word	0x200021d8
 80005d0:	200021d6 	.word	0x200021d6
 80005d4:	20002188 	.word	0x20002188
 80005d8:	200021da 	.word	0x200021da
 80005dc:	200022f2 	.word	0x200022f2
 80005e0:	200021ee 	.word	0x200021ee
 80005e4:	20002200 	.word	0x20002200
 80005e8:	200021aa 	.word	0x200021aa
 80005ec:	2000230c 	.word	0x2000230c
 80005f0:	2000221c 	.word	0x2000221c
 80005f4:	20002180 	.word	0x20002180
 80005f8:	200021a0 	.word	0x200021a0
 80005fc:	200021f2 	.word	0x200021f2
 8000600:	2000218c 	.word	0x2000218c
 8000604:	20002316 	.word	0x20002316
 8000608:	20002194 	.word	0x20002194
 800060c:	20002234 	.word	0x20002234
 8000610:	200022f4 	.word	0x200022f4
 8000614:	200021fc 	.word	0x200021fc
 8000618:	200022ee 	.word	0x200022ee
 800061c:	2000222e 	.word	0x2000222e
 8000620:	200021fa 	.word	0x200021fa
 8000624:	200022ba 	.word	0x200022ba
 8000628:	2000218a 	.word	0x2000218a
 800062c:	20002236 	.word	0x20002236
 8000630:	200021f4 	.word	0x200021f4
 8000634:	200021f8 	.word	0x200021f8
 8000638:	200021f6 	.word	0x200021f6
 800063c:	200021ac 	.word	0x200021ac

08000640 <IMU_getData>:

//Sends multiple requests to sensor until all data bytes are received from sensor
//The shtpData buffer has max capacity of MAX_PACKET_SIZE. Any bytes over this amount will be lost.
//Arduino I2C read limit is 32 bytes. Header is 4 bytes, so max data we can read per interation is 28 bytes
bool IMU_getData(uint16_t bytesRemaining)
{
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	4606      	mov	r6, r0
	uint16_t dataSpot = 0; //Start at the beginning of shtpData array
 8000646:	2500      	movs	r5, #0
//	uint8_t receiveBuffer[28] = {0};
//	uint8_t receivePacket[I2C_BUFFER_LENGTH - 4] = {0};


	//Setup a series of chunked 32 byte reads
	while (bytesRemaining > 0)
 8000648:	e01b      	b.n	8000682 <IMU_getData+0x42>
	{
		uint16_t numberOfBytesToRead = bytesRemaining;
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
			numberOfBytesToRead = (I2C_BUFFER_LENGTH - 4);
 800064a:	241c      	movs	r4, #28
 800064c:	e01d      	b.n	800068a <IMU_getData+0x4a>

		osSemaphoreAcquire(interprocessMessageLockSem, osWaitForever);
		while( HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100) != HAL_OK){
			HAL_Delay(100);
 800064e:	2064      	movs	r0, #100	; 0x64
 8000650:	f001 f870 	bl	8001734 <HAL_Delay>
		while( HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100) != HAL_OK){
 8000654:	1d23      	adds	r3, r4, #4
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <IMU_getData+0x6c>)
 8000658:	7811      	ldrb	r1, [r2, #0]
 800065a:	2264      	movs	r2, #100	; 0x64
 800065c:	9200      	str	r2, [sp, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <IMU_getData+0x70>)
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <IMU_getData+0x74>)
 8000664:	f002 fa3c 	bl	8002ae0 <HAL_I2C_Master_Receive>
 8000668:	2800      	cmp	r0, #0
 800066a:	d1f0      	bne.n	800064e <IMU_getData+0xe>
		}
		osSemaphoreRelease(interprocessMessageLockSem);
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <IMU_getData+0x78>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	f005 f810 	bl	8005694 <osSemaphoreRelease>
//		_i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)(numberOfBytesToRead + 4));
//		if (waitForI2C() == false)
//			return (0); //Error

		// first four bytes are header bytes and can be thrown away
		if ( (dataSpot + numberOfBytesToRead) < MAX_PACKET_SIZE){
 8000674:	1963      	adds	r3, r4, r5
 8000676:	2b7f      	cmp	r3, #127	; 0x7f
 8000678:	dd0e      	ble.n	8000698 <IMU_getData+0x58>
			// Do nothing with the data
		}

		// increment data index
		// TODO: this can be changed to receive a larger buffer since this constraint is for the Arduino
		dataSpot += numberOfBytesToRead;
 800067a:	4425      	add	r5, r4
 800067c:	b2ad      	uxth	r5, r5

		bytesRemaining -= numberOfBytesToRead;
 800067e:	1b34      	subs	r4, r6, r4
 8000680:	b2a6      	uxth	r6, r4
	while (bytesRemaining > 0)
 8000682:	b186      	cbz	r6, 80006a6 <IMU_getData+0x66>
		if (numberOfBytesToRead > (I2C_BUFFER_LENGTH - 4))
 8000684:	2e1c      	cmp	r6, #28
 8000686:	d8e0      	bhi.n	800064a <IMU_getData+0xa>
		uint16_t numberOfBytesToRead = bytesRemaining;
 8000688:	4634      	mov	r4, r6
		osSemaphoreAcquire(interprocessMessageLockSem, osWaitForever);
 800068a:	f04f 31ff 	mov.w	r1, #4294967295
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <IMU_getData+0x78>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f004 ffbb 	bl	800560c <osSemaphoreAcquire>
		while( HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, receiveBuffer, (uint8_t)(numberOfBytesToRead + 4), 100) != HAL_OK){
 8000696:	e7dd      	b.n	8000654 <IMU_getData+0x14>
			memcpy(&(shtpData[dataSpot]), &(receiveBuffer[4]), numberOfBytesToRead);
 8000698:	4622      	mov	r2, r4
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <IMU_getData+0x7c>)
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <IMU_getData+0x80>)
 800069e:	4428      	add	r0, r5
 80006a0:	f007 fb50 	bl	8007d44 <memcpy>
 80006a4:	e7e9      	b.n	800067a <IMU_getData+0x3a>
	}
	return (true); //Done!
}
 80006a6:	2001      	movs	r0, #1
 80006a8:	b002      	add	sp, #8
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	200021dc 	.word	0x200021dc
 80006b0:	20000030 	.word	0x20000030
 80006b4:	2000232c 	.word	0x2000232c
 80006b8:	200022e8 	.word	0x200022e8
 80006bc:	20000034 	.word	0x20000034
 80006c0:	20002238 	.word	0x20002238

080006c4 <IMU_receivePacket>:
{
 80006c4:	b500      	push	{lr}
 80006c6:	b083      	sub	sp, #12
	if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <IMU_receivePacket+0x70>)
 80006ca:	7819      	ldrb	r1, [r3, #0]
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <IMU_receivePacket+0x74>)
 80006ce:	6818      	ldr	r0, [r3, #0]
 80006d0:	f001 ff06 	bl	80024e0 <HAL_GPIO_ReadPin>
 80006d4:	2801      	cmp	r0, #1
 80006d6:	d029      	beq.n	800072c <IMU_receivePacket+0x68>
	osSemaphoreAcquire(interprocessMessageLockSem, osWaitForever);
 80006d8:	f04f 31ff 	mov.w	r1, #4294967295
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <IMU_receivePacket+0x78>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f004 ff94 	bl	800560c <osSemaphoreAcquire>
	while( HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100) != HAL_OK){
 80006e4:	e002      	b.n	80006ec <IMU_receivePacket+0x28>
		HAL_Delay(100);
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f001 f824 	bl	8001734 <HAL_Delay>
	while( HAL_I2C_Master_Receive(&hi2c1, _deviceAddress, shtpHeader, (uint8_t) 4, 100) != HAL_OK){
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <IMU_receivePacket+0x7c>)
 80006ee:	7819      	ldrb	r1, [r3, #0]
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2304      	movs	r3, #4
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <IMU_receivePacket+0x80>)
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <IMU_receivePacket+0x84>)
 80006fa:	f002 f9f1 	bl	8002ae0 <HAL_I2C_Master_Receive>
 80006fe:	2800      	cmp	r0, #0
 8000700:	d1f1      	bne.n	80006e6 <IMU_receivePacket+0x22>
	osSemaphoreRelease(interprocessMessageLockSem);
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <IMU_receivePacket+0x78>)
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f004 ffc5 	bl	8005694 <osSemaphoreRelease>
	int16_t dataLength = ( ((uint16_t)shtpHeader[PACKET_MSB] << 8) | shtpHeader[PACKET_LSB]);
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <IMU_receivePacket+0x80>)
 800070c:	7858      	ldrb	r0, [r3, #1]
 800070e:	0200      	lsls	r0, r0, #8
 8000710:	b200      	sxth	r0, r0
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4318      	orrs	r0, r3
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8000716:	f3c0 000e 	ubfx	r0, r0, #0, #15
	if (dataLength == 0)
 800071a:	b908      	cbnz	r0, 8000720 <IMU_receivePacket+0x5c>
		return (false); //All done
 800071c:	2000      	movs	r0, #0
 800071e:	e006      	b.n	800072e <IMU_receivePacket+0x6a>
	dataLength -= 4; //Remove the header bytes from the data count
 8000720:	3804      	subs	r0, #4
	IMU_getData(dataLength);
 8000722:	b280      	uxth	r0, r0
 8000724:	f7ff ff8c 	bl	8000640 <IMU_getData>
	return (true); //We're done!
 8000728:	2001      	movs	r0, #1
 800072a:	e000      	b.n	800072e <IMU_receivePacket+0x6a>
		return (false);
 800072c:	2000      	movs	r0, #0
}
 800072e:	b003      	add	sp, #12
 8000730:	f85d fb04 	ldr.w	pc, [sp], #4
 8000734:	200021e4 	.word	0x200021e4
 8000738:	200022c0 	.word	0x200022c0
 800073c:	200022e8 	.word	0x200022e8
 8000740:	200021dc 	.word	0x200021dc
 8000744:	20002184 	.word	0x20002184
 8000748:	2000232c 	.word	0x2000232c

0800074c <IMU_dataAvailable>:
{
 800074c:	b510      	push	{r4, lr}
	if (_int != 255)
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <IMU_dataAvailable+0x48>)
 8000750:	7819      	ldrb	r1, [r3, #0]
 8000752:	29ff      	cmp	r1, #255	; 0xff
 8000754:	d005      	beq.n	8000762 <IMU_dataAvailable+0x16>
		if( HAL_GPIO_ReadPin(_intPort, _int) == GPIO_PIN_SET)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <IMU_dataAvailable+0x4c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f001 fec1 	bl	80024e0 <HAL_GPIO_ReadPin>
 800075e:	2801      	cmp	r0, #1
 8000760:	d016      	beq.n	8000790 <IMU_dataAvailable+0x44>
	if (IMU_receivePacket() == true)
 8000762:	f7ff ffaf 	bl	80006c4 <IMU_receivePacket>
 8000766:	4604      	mov	r4, r0
 8000768:	b130      	cbz	r0, 8000778 <IMU_dataAvailable+0x2c>
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <IMU_dataAvailable+0x50>)
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d004      	beq.n	800077c <IMU_dataAvailable+0x30>
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8000772:	2b02      	cmp	r3, #2
 8000774:	d009      	beq.n	800078a <IMU_dataAvailable+0x3e>
	return (false);
 8000776:	2400      	movs	r4, #0
}
 8000778:	4620      	mov	r0, r4
 800077a:	bd10      	pop	{r4, pc}
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <IMU_dataAvailable+0x54>)
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	2afb      	cmp	r2, #251	; 0xfb
 8000782:	d1f6      	bne.n	8000772 <IMU_dataAvailable+0x26>
			IMU_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8000784:	f7ff fe06 	bl	8000394 <IMU_parseInputReport>
			return (true);
 8000788:	e7f6      	b.n	8000778 <IMU_dataAvailable+0x2c>
			IMU_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800078a:	f7ff fdf1 	bl	8000370 <IMU_parseCommandReport>
			return (true);
 800078e:	e7f3      	b.n	8000778 <IMU_dataAvailable+0x2c>
			return (false);
 8000790:	2400      	movs	r4, #0
 8000792:	e7f1      	b.n	8000778 <IMU_dataAvailable+0x2c>
 8000794:	200021e4 	.word	0x200021e4
 8000798:	200022c0 	.word	0x200022c0
 800079c:	20002184 	.word	0x20002184
 80007a0:	20002238 	.word	0x20002238

080007a4 <IMU_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
bool IMU_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	460a      	mov	r2, r1
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80007aa:	1d0c      	adds	r4, r1, #4
 80007ac:	b2e4      	uxtb	r4, r4

	/*  *********** POPULATE HEADER ****************************** */
	outPacket[0] = packetLength & 0xFF; 				//Packet length LSB
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <IMU_sendPacket+0x4c>)
 80007b0:	701c      	strb	r4, [r3, #0]
	outPacket[1] = packetLength >> 8; 					//Packet length MSB
 80007b2:	1221      	asrs	r1, r4, #8
 80007b4:	7059      	strb	r1, [r3, #1]
	outPacket[2] = channelNumber; 						//Channel number
 80007b6:	7098      	strb	r0, [r3, #2]
	outPacket[3] = sequenceNumber[channelNumber]++;	//Send the sequence number, increments with each packet sent, different counter for each channel
 80007b8:	4d0e      	ldr	r5, [pc, #56]	; (80007f4 <IMU_sendPacket+0x50>)
 80007ba:	5c29      	ldrb	r1, [r5, r0]
 80007bc:	1c4e      	adds	r6, r1, #1
 80007be:	542e      	strb	r6, [r5, r0]
 80007c0:	70d9      	strb	r1, [r3, #3]

	/*  *********** FILL PAYLOAD ********************************* */
	memcpy(&(outPacket[4]), shtpData, dataLength);
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <IMU_sendPacket+0x54>)
 80007c4:	1d18      	adds	r0, r3, #4
 80007c6:	f007 fabd 	bl	8007d44 <memcpy>

	/*  *********** SEND TO IMU ********************************** */
	while( HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 1000) != HAL_OK){
 80007ca:	e002      	b.n	80007d2 <IMU_sendPacket+0x2e>
		HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f000 ffb1 	bl	8001734 <HAL_Delay>
	while( HAL_I2C_Master_Transmit(&hi2c1, _deviceAddress, outPacket, packetLength, 1000) != HAL_OK){
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <IMU_sendPacket+0x58>)
 80007d4:	7819      	ldrb	r1, [r3, #0]
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	4623      	mov	r3, r4
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <IMU_sendPacket+0x4c>)
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <IMU_sendPacket+0x5c>)
 80007e2:	f002 f8bf 	bl	8002964 <HAL_I2C_Master_Transmit>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d1f0      	bne.n	80007cc <IMU_sendPacket+0x28>
	}

	return (true);
}
 80007ea:	2001      	movs	r0, #1
 80007ec:	b002      	add	sp, #8
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	200022c4 	.word	0x200022c4
 80007f4:	20000050 	.word	0x20000050
 80007f8:	20002238 	.word	0x20002238
 80007fc:	200021dc 	.word	0x200021dc
 8000800:	2000232c 	.word	0x2000232c

08000804 <IMU_softReset>:
{
 8000804:	b508      	push	{r3, lr}
	shtpData[0] = 1; //Reset
 8000806:	2001      	movs	r0, #1
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <IMU_softReset+0x2c>)
 800080a:	7018      	strb	r0, [r3, #0]
	IMU_sendPacket(CHANNEL_EXECUTABLE, 1); //Transmit packet on channel 1, 1 byte
 800080c:	4601      	mov	r1, r0
 800080e:	f7ff ffc9 	bl	80007a4 <IMU_sendPacket>
	HAL_Delay(50);
 8000812:	2032      	movs	r0, #50	; 0x32
 8000814:	f000 ff8e 	bl	8001734 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8000818:	f7ff ff54 	bl	80006c4 <IMU_receivePacket>
 800081c:	2800      	cmp	r0, #0
 800081e:	d1fb      	bne.n	8000818 <IMU_softReset+0x14>
	HAL_Delay(50);
 8000820:	2032      	movs	r0, #50	; 0x32
 8000822:	f000 ff87 	bl	8001734 <HAL_Delay>
	while (IMU_receivePacket() == true)
 8000826:	f7ff ff4d 	bl	80006c4 <IMU_receivePacket>
 800082a:	2800      	cmp	r0, #0
 800082c:	d1fb      	bne.n	8000826 <IMU_softReset+0x22>
}
 800082e:	bd08      	pop	{r3, pc}
 8000830:	20002238 	.word	0x20002238

08000834 <IMU_begin>:
{
 8000834:	b508      	push	{r3, lr}
	_deviceAddress = deviceAddress << 1; //If provided, store the I2C address from user
 8000836:	0040      	lsls	r0, r0, #1
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <IMU_begin+0x40>)
 800083a:	7018      	strb	r0, [r3, #0]
	_int = intPin;					//Get the pin that the user wants to use for interrupts. By default, it's NULL and we'll not use it in dataAvailable() function.
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <IMU_begin+0x44>)
 800083e:	7019      	strb	r1, [r3, #0]
	_intPort = intPort;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <IMU_begin+0x48>)
 8000842:	601a      	str	r2, [r3, #0]
	IMU_softReset();
 8000844:	f7ff ffde 	bl	8000804 <IMU_softReset>
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <IMU_begin+0x4c>)
 800084a:	22f9      	movs	r2, #249	; 0xf9
 800084c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 800084e:	2200      	movs	r2, #0
 8000850:	705a      	strb	r2, [r3, #1]
	IMU_sendPacket(CHANNEL_CONTROL, 2);
 8000852:	2102      	movs	r1, #2
 8000854:	4608      	mov	r0, r1
 8000856:	f7ff ffa5 	bl	80007a4 <IMU_sendPacket>
	if (IMU_receivePacket() == true)
 800085a:	f7ff ff33 	bl	80006c4 <IMU_receivePacket>
 800085e:	b130      	cbz	r0, 800086e <IMU_begin+0x3a>
 8000860:	4603      	mov	r3, r0
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <IMU_begin+0x4c>)
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	2af8      	cmp	r2, #248	; 0xf8
 8000868:	d002      	beq.n	8000870 <IMU_begin+0x3c>
	return (false); //Something went wrong
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <IMU_begin+0x3c>
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	bd08      	pop	{r3, pc}
 8000874:	200021dc 	.word	0x200021dc
 8000878:	200021e4 	.word	0x200021e4
 800087c:	200022c0 	.word	0x200022c0
 8000880:	20002238 	.word	0x20002238

08000884 <IMU_setFeatureCommand_3>:
{
 8000884:	b510      	push	{r4, lr}
	long microsBetweenReports = (long)timeBetweenReports * 1000L;
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fb03 f101 	mul.w	r1, r3, r1
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <IMU_setFeatureCommand_3+0x48>)
 8000890:	24fd      	movs	r4, #253	; 0xfd
 8000892:	701c      	strb	r4, [r3, #0]
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8000894:	7058      	strb	r0, [r3, #1]
	shtpData[2] = 0;								   //Feature flags
 8000896:	2000      	movs	r0, #0
 8000898:	7098      	strb	r0, [r3, #2]
	shtpData[3] = 0;								   //Change sensitivity (LSB)
 800089a:	70d8      	strb	r0, [r3, #3]
	shtpData[4] = 0;								   //Change sensitivity (MSB)
 800089c:	7118      	strb	r0, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800089e:	7159      	strb	r1, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80008a0:	120c      	asrs	r4, r1, #8
 80008a2:	719c      	strb	r4, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80008a4:	140c      	asrs	r4, r1, #16
 80008a6:	71dc      	strb	r4, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80008a8:	0e09      	lsrs	r1, r1, #24
 80008aa:	7219      	strb	r1, [r3, #8]
	shtpData[9] = 0;								   //Batch Interval (LSB)
 80008ac:	7258      	strb	r0, [r3, #9]
	shtpData[10] = 0;								   //Batch Interval
 80008ae:	7298      	strb	r0, [r3, #10]
	shtpData[11] = 0;								   //Batch Interval
 80008b0:	72d8      	strb	r0, [r3, #11]
	shtpData[12] = 0;								   //Batch Interval (MSB)
 80008b2:	7318      	strb	r0, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
 80008b4:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
 80008b6:	0a11      	lsrs	r1, r2, #8
 80008b8:	7399      	strb	r1, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
 80008ba:	0c11      	lsrs	r1, r2, #16
 80008bc:	73d9      	strb	r1, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
 80008be:	0e12      	lsrs	r2, r2, #24
 80008c0:	741a      	strb	r2, [r3, #16]
	IMU_sendPacket(CHANNEL_CONTROL, 17);
 80008c2:	2111      	movs	r1, #17
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff ff6d 	bl	80007a4 <IMU_sendPacket>
}
 80008ca:	bd10      	pop	{r4, pc}
 80008cc:	20002238 	.word	0x20002238

080008d0 <IMU_enableActivityClassifier>:
{
 80008d0:	b508      	push	{r3, lr}
	_activityConfidences = activityConfidences; //Store pointer to array
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <IMU_enableActivityClassifier+0x14>)
 80008d4:	601a      	str	r2, [r3, #0]
	IMU_setFeatureCommand_3(SENSOR_REPORTID_PERSONAL_ACTIVITY_CLASSIFIER, timeBetweenReports, activitiesToEnable);
 80008d6:	460a      	mov	r2, r1
 80008d8:	4601      	mov	r1, r0
 80008da:	201e      	movs	r0, #30
 80008dc:	f7ff ffd2 	bl	8000884 <IMU_setFeatureCommand_3>
}
 80008e0:	bd08      	pop	{r3, pc}
 80008e2:	bf00      	nop
 80008e4:	200021fc 	.word	0x200021fc

080008e8 <IMU_setFeatureCommand_2>:
{
 80008e8:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_3(reportID, timeBetweenReports, 0); //No specific config
 80008ea:	2200      	movs	r2, #0
 80008ec:	f7ff ffca 	bl	8000884 <IMU_setFeatureCommand_3>
}
 80008f0:	bd08      	pop	{r3, pc}

080008f2 <IMU_enableRotationVector>:
{
 80008f2:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_2(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports);
 80008f4:	4601      	mov	r1, r0
 80008f6:	2005      	movs	r0, #5
 80008f8:	f7ff fff6 	bl	80008e8 <IMU_setFeatureCommand_2>
}
 80008fc:	bd08      	pop	{r3, pc}

080008fe <IMU_enableStepCounter>:
{
 80008fe:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_2(SENSOR_REPORTID_STEP_COUNTER, timeBetweenReports);
 8000900:	4601      	mov	r1, r0
 8000902:	2011      	movs	r0, #17
 8000904:	f7ff fff0 	bl	80008e8 <IMU_setFeatureCommand_2>
}
 8000908:	bd08      	pop	{r3, pc}

0800090a <IMU_enableStabilityClassifier>:
{
 800090a:	b508      	push	{r3, lr}
	IMU_setFeatureCommand_2(SENSOR_REPORTID_STABILITY_CLASSIFIER, timeBetweenReports);
 800090c:	4601      	mov	r1, r0
 800090e:	2013      	movs	r0, #19
 8000910:	f7ff ffea 	bl	80008e8 <IMU_setFeatureCommand_2>
}
 8000914:	bd08      	pop	{r3, pc}

08000916 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000916:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f004 fde5 	bl	80054e8 <osDelay>
 800091e:	e7fb      	b.n	8000918 <StartDefaultTask+0x2>

08000920 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	b0af      	sub	sp, #188	; 0xbc
osKernelInitialize();
 8000924:	f004 fc38 	bl	8005198 <osKernelInitialize>
  const osThreadAttr_t defaultTask_attributes = {
 8000928:	2520      	movs	r5, #32
 800092a:	462a      	mov	r2, r5
 800092c:	2100      	movs	r1, #0
 800092e:	a826      	add	r0, sp, #152	; 0x98
 8000930:	f007 fa13 	bl	8007d5a <memset>
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <MX_FREERTOS_Init+0x134>)
 8000936:	9325      	str	r3, [sp, #148]	; 0x94
 8000938:	2680      	movs	r6, #128	; 0x80
 800093a:	962a      	str	r6, [sp, #168]	; 0xa8
 800093c:	2418      	movs	r4, #24
 800093e:	942b      	str	r4, [sp, #172]	; 0xac
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000940:	aa25      	add	r2, sp, #148	; 0x94
 8000942:	2100      	movs	r1, #0
 8000944:	4844      	ldr	r0, [pc, #272]	; (8000a58 <MX_FREERTOS_Init+0x138>)
 8000946:	f004 fc6f 	bl	8005228 <osThreadNew>
 800094a:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <MX_FREERTOS_Init+0x13c>)
 800094c:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t thermopileTask_attributes = {
 800094e:	462a      	mov	r2, r5
 8000950:	2100      	movs	r1, #0
 8000952:	a81d      	add	r0, sp, #116	; 0x74
 8000954:	f007 fa01 	bl	8007d5a <memset>
 8000958:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <MX_FREERTOS_Init+0x140>)
 800095a:	931c      	str	r3, [sp, #112]	; 0x70
 800095c:	f44f 7780 	mov.w	r7, #256	; 0x100
 8000960:	9721      	str	r7, [sp, #132]	; 0x84
 8000962:	9422      	str	r4, [sp, #136]	; 0x88
    thermopileTaskHandle = osThreadNew(ThermopileTask, NULL, &thermopileTask_attributes);
 8000964:	aa1c      	add	r2, sp, #112	; 0x70
 8000966:	2100      	movs	r1, #0
 8000968:	483e      	ldr	r0, [pc, #248]	; (8000a64 <MX_FREERTOS_Init+0x144>)
 800096a:	f004 fc5d 	bl	8005228 <osThreadNew>
 800096e:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <MX_FREERTOS_Init+0x148>)
 8000970:	6018      	str	r0, [r3, #0]
	const osThreadAttr_t inertialSensingTask_attributes = {
 8000972:	462a      	mov	r2, r5
 8000974:	2100      	movs	r1, #0
 8000976:	a814      	add	r0, sp, #80	; 0x50
 8000978:	f007 f9ef 	bl	8007d5a <memset>
 800097c:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_FREERTOS_Init+0x14c>)
 800097e:	9313      	str	r3, [sp, #76]	; 0x4c
 8000980:	9618      	str	r6, [sp, #96]	; 0x60
 8000982:	9419      	str	r4, [sp, #100]	; 0x64
	inertialSensingTaskHandle = osThreadNew(InertialSensingTask, NULL, &inertialSensingTask_attributes);
 8000984:	aa13      	add	r2, sp, #76	; 0x4c
 8000986:	2100      	movs	r1, #0
 8000988:	4839      	ldr	r0, [pc, #228]	; (8000a70 <MX_FREERTOS_Init+0x150>)
 800098a:	f004 fc4d 	bl	8005228 <osThreadNew>
 800098e:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <MX_FREERTOS_Init+0x154>)
 8000990:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t masterThreadTask_attributes = {
 8000992:	462a      	mov	r2, r5
 8000994:	2100      	movs	r1, #0
 8000996:	a80b      	add	r0, sp, #44	; 0x2c
 8000998:	f007 f9df 	bl	8007d5a <memset>
 800099c:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <MX_FREERTOS_Init+0x158>)
 800099e:	930a      	str	r3, [sp, #40]	; 0x28
 80009a0:	970f      	str	r7, [sp, #60]	; 0x3c
 80009a2:	9410      	str	r4, [sp, #64]	; 0x40
  masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 80009a4:	aa0a      	add	r2, sp, #40	; 0x28
 80009a6:	2100      	movs	r1, #0
 80009a8:	4834      	ldr	r0, [pc, #208]	; (8000a7c <MX_FREERTOS_Init+0x15c>)
 80009aa:	f004 fc3d 	bl	8005228 <osThreadNew>
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_FREERTOS_Init+0x160>)
 80009b0:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t sendMsgToMainTask_attributes = {
 80009b2:	462a      	mov	r2, r5
 80009b4:	2100      	movs	r1, #0
 80009b6:	a802      	add	r0, sp, #8
 80009b8:	f007 f9cf 	bl	8007d5a <memset>
 80009bc:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <MX_FREERTOS_Init+0x164>)
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	9606      	str	r6, [sp, #24]
 80009c2:	9407      	str	r4, [sp, #28]
  sendMsgToMainTaskHandle = osThreadNew(SendPacketToMainTask, NULL, &sendMsgToMainTask_attributes);
 80009c4:	aa01      	add	r2, sp, #4
 80009c6:	2100      	movs	r1, #0
 80009c8:	482f      	ldr	r0, [pc, #188]	; (8000a88 <MX_FREERTOS_Init+0x168>)
 80009ca:	f004 fc2d 	bl	8005228 <osThreadNew>
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <MX_FREERTOS_Init+0x16c>)
 80009d0:	6018      	str	r0, [r3, #0]
  sendMsgToMainQueueHandle = osMessageQueueNew (2, sizeof(struct secondaryProcessorData), NULL);
 80009d2:	2200      	movs	r2, #0
 80009d4:	21f0      	movs	r1, #240	; 0xf0
 80009d6:	2002      	movs	r0, #2
 80009d8:	f004 fe9a 	bl	8005710 <osMessageQueueNew>
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <MX_FREERTOS_Init+0x170>)
 80009de:	6018      	str	r0, [r3, #0]
  togLoggingQueueHandle = osMessageQueueNew (2, sizeof(struct LogMessage), NULL);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2106      	movs	r1, #6
 80009e4:	2002      	movs	r0, #2
 80009e6:	f004 fe93 	bl	8005710 <osMessageQueueNew>
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_FREERTOS_Init+0x174>)
 80009ec:	6018      	str	r0, [r3, #0]
  thermMsgQueueHandle = osMessageQueueNew (5, sizeof(struct thermopilePackagedData), NULL);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2150      	movs	r1, #80	; 0x50
 80009f2:	2005      	movs	r0, #5
 80009f4:	f004 fe8c 	bl	8005710 <osMessageQueueNew>
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_FREERTOS_Init+0x178>)
 80009fa:	6018      	str	r0, [r3, #0]
  inertialSensingQueueHandle = osMessageQueueNew (3, sizeof(struct inertialData), NULL);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2198      	movs	r1, #152	; 0x98
 8000a00:	2003      	movs	r0, #3
 8000a02:	f004 fe85 	bl	8005710 <osMessageQueueNew>
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_FREERTOS_Init+0x17c>)
 8000a08:	6018      	str	r0, [r3, #0]
  activitySampleQueueHandle = osMessageQueueNew (10, sizeof(struct activityData), NULL);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f004 fe7e 	bl	8005710 <osMessageQueueNew>
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_FREERTOS_Init+0x180>)
 8000a16:	6018      	str	r0, [r3, #0]
  rotationSampleQueueHandle = osMessageQueueNew (3, sizeof(struct rotationData), NULL);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f004 fe77 	bl	8005710 <osMessageQueueNew>
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_FREERTOS_Init+0x184>)
 8000a24:	6018      	str	r0, [r3, #0]
  stepSampleQueueHandle = osMessageQueueNew (3, sizeof(struct stepData), NULL);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2108      	movs	r1, #8
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f004 fe70 	bl	8005710 <osMessageQueueNew>
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_FREERTOS_Init+0x188>)
 8000a32:	6018      	str	r0, [r3, #0]
  stabilitySampleQueueHandle = osMessageQueueNew (3, sizeof(struct stabilityData), NULL);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2108      	movs	r1, #8
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f004 fe69 	bl	8005710 <osMessageQueueNew>
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_FREERTOS_Init+0x18c>)
 8000a40:	6018      	str	r0, [r3, #0]
  interprocessMessageLockSem = osSemaphoreNew (1, 1, NULL);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	4608      	mov	r0, r1
 8000a48:	f004 fd70 	bl	800552c <osSemaphoreNew>
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_FREERTOS_Init+0x190>)
 8000a4e:	6018      	str	r0, [r3, #0]
}
 8000a50:	b02f      	add	sp, #188	; 0xbc
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a54:	08007d84 	.word	0x08007d84
 8000a58:	08000917 	.word	0x08000917
 8000a5c:	20002318 	.word	0x20002318
 8000a60:	08007d90 	.word	0x08007d90
 8000a64:	0800142d 	.word	0x0800142d
 8000a68:	20002328 	.word	0x20002328
 8000a6c:	08007da0 	.word	0x08007da0
 8000a70:	08000c91 	.word	0x08000c91
 8000a74:	200021e8 	.word	0x200021e8
 8000a78:	08007db4 	.word	0x08007db4
 8000a7c:	08000fe5 	.word	0x08000fe5
 8000a80:	20002324 	.word	0x20002324
 8000a84:	08007dc8 	.word	0x08007dc8
 8000a88:	08000cf9 	.word	0x08000cf9
 8000a8c:	2000219c 	.word	0x2000219c
 8000a90:	20002220 	.word	0x20002220
 8000a94:	20002320 	.word	0x20002320
 8000a98:	2000231c 	.word	0x2000231c
 8000a9c:	20002218 	.word	0x20002218
 8000aa0:	200021e0 	.word	0x200021e0
 8000aa4:	20002230 	.word	0x20002230
 8000aa8:	20002228 	.word	0x20002228
 8000aac:	20002308 	.word	0x20002308
 8000ab0:	200022e8 	.word	0x200022e8

08000ab4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ab4:	b530      	push	{r4, r5, lr}
 8000ab6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	2400      	movs	r4, #0
 8000aba:	9403      	str	r4, [sp, #12]
 8000abc:	9404      	str	r4, [sp, #16]
 8000abe:	9405      	str	r4, [sp, #20]
 8000ac0:	9406      	str	r4, [sp, #24]
 8000ac2:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_GPIO_Init+0xcc>)
 8000ac6:	695a      	ldr	r2, [r3, #20]
 8000ac8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	695a      	ldr	r2, [r3, #20]
 8000ad0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000ad4:	9200      	str	r2, [sp, #0]
 8000ad6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ae6:	9201      	str	r2, [sp, #4]
 8000ae8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	695a      	ldr	r2, [r3, #20]
 8000aec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_INT_Pin|TP25_Pin|TP24_Pin|TP22_Pin 
 8000afc:	4622      	mov	r2, r4
 8000afe:	f241 7110 	movw	r1, #5904	; 0x1710
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f001 fcf2 	bl	80024ee <HAL_GPIO_WritePin>
                          |TP20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f001 fcec 	bl	80024ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOG_EXP_CONN_Pin|ADC_ALERT_Pin;
 8000b16:	230c      	movs	r3, #12
 8000b18:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_GPIO_Init+0xd0>)
 8000b1c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	a903      	add	r1, sp, #12
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f001 fc17 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin|TP_SS_Pin|TP25_Pin|TP24_Pin 
 8000b2a:	f241 7350 	movw	r3, #5968	; 0x1750
 8000b2e:	9303      	str	r3, [sp, #12]
                          |TP22_Pin|TP20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	a903      	add	r1, sp, #12
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f001 fc0b 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000b42:	2320      	movs	r3, #32
 8000b44:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_GPIO_Init+0xd4>)
 8000b48:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	a903      	add	r1, sp, #12
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f001 fc01 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8000b56:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8000b5a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5c:	2503      	movs	r5, #3
 8000b5e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	a903      	add	r1, sp, #12
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f001 fbf6 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b70:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	a903      	add	r1, sp, #12
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_GPIO_Init+0xd8>)
 8000b78:	f001 fbee 	bl	8002358 <HAL_GPIO_Init>

}
 8000b7c:	b009      	add	sp, #36	; 0x24
 8000b7e:	bd30      	pop	{r4, r5, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	10110000 	.word	0x10110000
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	48000400 	.word	0x48000400

08000b90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b90:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000b92:	4813      	ldr	r0, [pc, #76]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_I2C1_Init+0x54>)
 8000b96:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707DBD;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_I2C1_Init+0x58>)
 8000b9a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 230;
 8000b9c:	23e6      	movs	r3, #230	; 0xe6
 8000b9e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000baa:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bae:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb0:	f001 fe7a 	bl	80028a8 <HAL_I2C_Init>
 8000bb4:	b958      	cbnz	r0, 8000bce <MX_I2C1_Init+0x3e>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bba:	4809      	ldr	r0, [pc, #36]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bbc:	f002 fd72 	bl	80036a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc0:	b940      	cbnz	r0, 8000bd4 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bc6:	f002 fd9b 	bl	8003700 <HAL_I2CEx_ConfigDigitalFilter>
 8000bca:	b930      	cbnz	r0, 8000bda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }

}
 8000bcc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bce:	f000 f983 	bl	8000ed8 <Error_Handler>
 8000bd2:	e7f0      	b.n	8000bb6 <MX_I2C1_Init+0x26>
    Error_Handler();
 8000bd4:	f000 f980 	bl	8000ed8 <Error_Handler>
 8000bd8:	e7f3      	b.n	8000bc2 <MX_I2C1_Init+0x32>
    Error_Handler();
 8000bda:	f000 f97d 	bl	8000ed8 <Error_Handler>
}
 8000bde:	e7f5      	b.n	8000bcc <MX_I2C1_Init+0x3c>
 8000be0:	2000232c 	.word	0x2000232c
 8000be4:	40005400 	.word	0x40005400
 8000be8:	00707dbd 	.word	0x00707dbd

08000bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9303      	str	r3, [sp, #12]
 8000bf4:	9304      	str	r3, [sp, #16]
 8000bf6:	9305      	str	r3, [sp, #20]
 8000bf8:	9306      	str	r3, [sp, #24]
 8000bfa:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000bfc:	6802      	ldr	r2, [r0, #0]
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <HAL_I2C_MspInit+0x98>)
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d001      	beq.n	8000c08 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c04:	b009      	add	sp, #36	; 0x24
 8000c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4c1f      	ldr	r4, [pc, #124]	; (8000c88 <HAL_I2C_MspInit+0x9c>)
 8000c0a:	6963      	ldr	r3, [r4, #20]
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6163      	str	r3, [r4, #20]
 8000c12:	6963      	ldr	r3, [r4, #20]
 8000c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	6963      	ldr	r3, [r4, #20]
 8000c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c22:	6163      	str	r3, [r4, #20]
 8000c24:	6963      	ldr	r3, [r4, #20]
 8000c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2512      	movs	r5, #18
 8000c36:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c38:	2703      	movs	r7, #3
 8000c3a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3c:	2604      	movs	r6, #4
 8000c3e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	a903      	add	r1, sp, #12
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f001 fb87 	bl	8002358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2500      	movs	r5, #0
 8000c52:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c54:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c56:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	a903      	add	r1, sp, #12
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <HAL_I2C_MspInit+0xa0>)
 8000c5c:	f001 fb7c 	bl	8002358 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c60:	69e3      	ldr	r3, [r4, #28]
 8000c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c66:	61e3      	str	r3, [r4, #28]
 8000c68:	69e3      	ldr	r3, [r4, #28]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000c72:	462a      	mov	r2, r5
 8000c74:	2105      	movs	r1, #5
 8000c76:	201f      	movs	r0, #31
 8000c78:	f001 fa00 	bl	800207c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c7c:	201f      	movs	r0, #31
 8000c7e:	f001 fa31 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 8000c82:	e7bf      	b.n	8000c04 <HAL_I2C_MspInit+0x18>
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000400 	.word	0x48000400

08000c90 <InertialSensingTask>:
uint8_t activityClasses[9];
uint32_t enableActivities = 0x1F; //Enable all 9 possible activities including Unknown

struct inertialData inertialPacket;

void InertialSensingTask(void *argument){
 8000c90:	b510      	push	{r4, lr}
	osSemaphoreAcquire(interprocessMessageLockSem, osWaitForever);
 8000c92:	4c16      	ldr	r4, [pc, #88]	; (8000cec <InertialSensingTask+0x5c>)
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	6820      	ldr	r0, [r4, #0]
 8000c9a:	f004 fcb7 	bl	800560c <osSemaphoreAcquire>
	IMU_begin(BNO080_ADDRESS, IMU_INT_Pin, IMU_INT_GPIO_Port);
 8000c9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	204a      	movs	r0, #74	; 0x4a
 8000ca6:	f7ff fdc5 	bl	8000834 <IMU_begin>
	osSemaphoreRelease(interprocessMessageLockSem);
 8000caa:	6820      	ldr	r0, [r4, #0]
 8000cac:	f004 fcf2 	bl	8005694 <osSemaphoreRelease>
	  uint32_t evt = 0;

	  while(1){

		  	/********* WAIT FOR START CONDITION FROM MASTER THREAD ************************/
			evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f004 fbb0 	bl	800541c <osThreadFlagsWait>
		  	//evt = 0x00000001U;
		    // if signal was received successfully, start blink task
			if (evt == 0x00000001U)  {
 8000cbc:	2801      	cmp	r0, #1
 8000cbe:	d1f7      	bne.n	8000cb0 <InertialSensingTask+0x20>

				// configure IMU
				IMU_enableRotationVector(ROT_VEC_PERIOD);
 8000cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc4:	f7ff fe15 	bl	80008f2 <IMU_enableRotationVector>
				IMU_enableActivityClassifier(ACT_CLASS_PERIOD , enableActivities, activityClasses);
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <InertialSensingTask+0x60>)
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <InertialSensingTask+0x64>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd2:	f7ff fdfd 	bl	80008d0 <IMU_enableActivityClassifier>
				IMU_enableStabilityClassifier(STABILITY_CLASS_PERIOD);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cda:	f7ff fe16 	bl	800090a <IMU_enableStabilityClassifier>
				IMU_enableStepCounter(STEP_CNT_PERIOD);
 8000cde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce2:	f7ff fe0c 	bl	80008fe <IMU_enableStepCounter>

//				 give IMU some time to get setup
				//osDelay(5);
				uint8_t temp = 0;
				while(1){
					if(IMU_dataAvailable()){
 8000ce6:	f7ff fd31 	bl	800074c <IMU_dataAvailable>
 8000cea:	e7fc      	b.n	8000ce6 <InertialSensingTask+0x56>
 8000cec:	200022e8 	.word	0x200022e8
 8000cf0:	2000242c 	.word	0x2000242c
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <SendPacketToMainTask>:
struct LogMessage logMessage;

uint8_t logTracking = 0;

/* Functions Definition ------------------------------------------------------*/
void SendPacketToMainTask(void *argument){
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	e056      	b.n	8000daa <SendPacketToMainTask+0xb2>
//		HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);

		// wait for Master to send command to slave
		osSemaphoreAcquire(interprocessMessageLockSem, osWaitForever);
		while(HAL_OK != HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) &logMessage, sizeof(struct LogMessage), 100)){
			osSemaphoreRelease(interprocessMessageLockSem);
 8000cfc:	4c3b      	ldr	r4, [pc, #236]	; (8000dec <SendPacketToMainTask+0xf4>)
 8000cfe:	6820      	ldr	r0, [r4, #0]
 8000d00:	f004 fcc8 	bl	8005694 <osSemaphoreRelease>
			osDelay(100);
 8000d04:	2064      	movs	r0, #100	; 0x64
 8000d06:	f004 fbef 	bl	80054e8 <osDelay>
			osSemaphoreAcquire(interprocessMessageLockSem, osWaitForever);
 8000d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0e:	6820      	ldr	r0, [r4, #0]
 8000d10:	f004 fc7c 	bl	800560c <osSemaphoreAcquire>
		while(HAL_OK != HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) &logMessage, sizeof(struct LogMessage), 100)){
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2206      	movs	r2, #6
 8000d18:	4935      	ldr	r1, [pc, #212]	; (8000df0 <SendPacketToMainTask+0xf8>)
 8000d1a:	4836      	ldr	r0, [pc, #216]	; (8000df4 <SendPacketToMainTask+0xfc>)
 8000d1c:	f001 ff9e 	bl	8002c5c <HAL_I2C_Slave_Receive>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d1eb      	bne.n	8000cfc <SendPacketToMainTask+0x4>
		}
		osSemaphoreRelease(interprocessMessageLockSem);
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <SendPacketToMainTask+0xf4>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	f004 fcb4 	bl	8005694 <osSemaphoreRelease>
//		while(HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *) &logMessage, sizeof(struct LogMessage)) != HAL_OK);

		//evt = osThreadFlagsWait (0x00000004U, osFlagsWaitAny, osWaitForever);

		// if master is requesting to stop sampling, stop
		if(logMessage.status == SAMPLE_DISABLE){
 8000d2c:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <SendPacketToMainTask+0xf8>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b313      	cbz	r3, 8000d78 <SendPacketToMainTask+0x80>
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
		}

		// if master is requesting to start sampling
		else if(logMessage.status == SAMPLE_ENABLE && logTracking==0)
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d103      	bne.n	8000d3e <SendPacketToMainTask+0x46>
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <SendPacketToMainTask+0x100>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d03c      	beq.n	8000db8 <SendPacketToMainTask+0xc0>
		}

		// if logging is already happening and a message is ready
		else
		{
			if(osMessageQueueGet(sendMsgToMainQueueHandle, &packetReceived, 0U, 0) == osOK)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	461a      	mov	r2, r3
 8000d42:	492e      	ldr	r1, [pc, #184]	; (8000dfc <SendPacketToMainTask+0x104>)
 8000d44:	482e      	ldr	r0, [pc, #184]	; (8000e00 <SendPacketToMainTask+0x108>)
 8000d46:	6800      	ldr	r0, [r0, #0]
 8000d48:	f004 fd94 	bl	8005874 <osMessageQueueGet>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d13f      	bne.n	8000dd0 <SendPacketToMainTask+0xd8>
			{
				while(HAL_I2C_Slave_Transmit_IT(&hi2c1, (uint8_t *) &packetReceived, sizeof(struct secondaryProcessorData)) != HAL_OK);
 8000d50:	22f0      	movs	r2, #240	; 0xf0
 8000d52:	492a      	ldr	r1, [pc, #168]	; (8000dfc <SendPacketToMainTask+0x104>)
 8000d54:	4827      	ldr	r0, [pc, #156]	; (8000df4 <SendPacketToMainTask+0xfc>)
 8000d56:	f002 f837 	bl	8002dc8 <HAL_I2C_Slave_Transmit_IT>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d1f8      	bne.n	8000d50 <SendPacketToMainTask+0x58>

				// wait for transmit to succeed
				evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8000d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d62:	2100      	movs	r1, #0
 8000d64:	2001      	movs	r0, #1
 8000d66:	f004 fb59 	bl	800541c <osThreadFlagsWait>

				// reset trigger
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f001 fbbc 	bl	80024ee <HAL_GPIO_WritePin>
 8000d76:	e010      	b.n	8000d9a <SendPacketToMainTask+0xa2>
			logTracking = 0;
 8000d78:	2400      	movs	r4, #0
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <SendPacketToMainTask+0x100>)
 8000d7c:	701c      	strb	r4, [r3, #0]
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	4622      	mov	r2, r4
 8000d84:	491a      	ldr	r1, [pc, #104]	; (8000df0 <SendPacketToMainTask+0xf8>)
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <SendPacketToMainTask+0x10c>)
 8000d88:	6800      	ldr	r0, [r0, #0]
 8000d8a:	f004 fd21 	bl	80057d0 <osMessageQueuePut>
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 8000d8e:	4622      	mov	r2, r4
 8000d90:	2110      	movs	r1, #16
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f001 fbaa 	bl	80024ee <HAL_GPIO_WritePin>
				// reset trigger
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
			}
		}

		osDelay(10);
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f004 fba4 	bl	80054e8 <osDelay>

		// if there is another message queued up, assert interrupt pin
		if( osMessageQueueGetCount(sendMsgToMainQueueHandle) > 0)
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <SendPacketToMainTask+0x108>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	f004 fdb8 	bl	8005918 <osMessageQueueGetCount>
 8000da8:	b9c8      	cbnz	r0, 8000dde <SendPacketToMainTask+0xe6>
		osSemaphoreAcquire(interprocessMessageLockSem, osWaitForever);
 8000daa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <SendPacketToMainTask+0xf4>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	f004 fc2b 	bl	800560c <osSemaphoreAcquire>
		while(HAL_OK != HAL_I2C_Slave_Receive(&hi2c1, (uint8_t *) &logMessage, sizeof(struct LogMessage), 100)){
 8000db6:	e7ad      	b.n	8000d14 <SendPacketToMainTask+0x1c>
			logTracking = 1;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <SendPacketToMainTask+0x100>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	490a      	ldr	r1, [pc, #40]	; (8000df0 <SendPacketToMainTask+0xf8>)
 8000dc6:	480f      	ldr	r0, [pc, #60]	; (8000e04 <SendPacketToMainTask+0x10c>)
 8000dc8:	6800      	ldr	r0, [r0, #0]
 8000dca:	f004 fd01 	bl	80057d0 <osMessageQueuePut>
 8000dce:	e7e4      	b.n	8000d9a <SendPacketToMainTask+0xa2>
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f001 fb89 	bl	80024ee <HAL_GPIO_WritePin>
 8000ddc:	e7dd      	b.n	8000d9a <SendPacketToMainTask+0xa2>
		{
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2110      	movs	r1, #16
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f001 fb82 	bl	80024ee <HAL_GPIO_WritePin>
 8000dea:	e7de      	b.n	8000daa <SendPacketToMainTask+0xb2>
 8000dec:	200022e8 	.word	0x200022e8
 8000df0:	20002438 	.word	0x20002438
 8000df4:	2000232c 	.word	0x2000232c
 8000df8:	20000056 	.word	0x20000056
 8000dfc:	20002440 	.word	0x20002440
 8000e00:	20002220 	.word	0x20002220
 8000e04:	20002320 	.word	0x20002320

08000e08 <HAL_I2C_SlaveTxCpltCallback>:
//		osDelay(500);
//	}
//}

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000e08:	b508      	push	{r3, lr}
	// notify sending thread that message has been sent
	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <HAL_I2C_SlaveTxCpltCallback+0x10>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	f004 fa7e 	bl	8005310 <osThreadFlagsSet>
}
 8000e14:	bd08      	pop	{r3, pc}
 8000e16:	bf00      	nop
 8000e18:	2000219c 	.word	0x2000219c

08000e1c <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
	//osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000004U);
	// notify receiving thread that a message has been received
//	osThreadFlagsSet(receivePacketFromMainTaskHandle, 0x00000001U);
}
 8000e1c:	4770      	bx	lr
	...

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b530      	push	{r4, r5, lr}
 8000e22:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	a814      	add	r0, sp, #80	; 0x50
 8000e2a:	f006 ff96 	bl	8007d5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2e:	2400      	movs	r4, #0
 8000e30:	940d      	str	r4, [sp, #52]	; 0x34
 8000e32:	940e      	str	r4, [sp, #56]	; 0x38
 8000e34:	940f      	str	r4, [sp, #60]	; 0x3c
 8000e36:	9410      	str	r4, [sp, #64]	; 0x40
 8000e38:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3a:	2230      	movs	r2, #48	; 0x30
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	a801      	add	r0, sp, #4
 8000e40:	f006 ff8b 	bl	8007d5a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e44:	2309      	movs	r3, #9
 8000e46:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4e:	2501      	movs	r5, #1
 8000e50:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e52:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	a812      	add	r0, sp, #72	; 0x48
 8000e56:	f002 fc7f 	bl	8003758 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	930d      	str	r3, [sp, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e5e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e62:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	9411      	str	r4, [sp, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e66:	4629      	mov	r1, r5
 8000e68:	a80d      	add	r0, sp, #52	; 0x34
 8000e6a:	f002 ffd5 	bl	8003e18 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemClock_Config+0x68>)
 8000e70:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000e72:	2310      	movs	r3, #16
 8000e74:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	a801      	add	r0, sp, #4
 8000e7e:	f003 f8d7 	bl	8004030 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000e82:	b01d      	add	sp, #116	; 0x74
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	bf00      	nop
 8000e88:	00010020 	.word	0x00010020

08000e8c <main>:
{
 8000e8c:	b508      	push	{r3, lr}
  HAL_Init();
 8000e8e:	f000 fc2d 	bl	80016ec <HAL_Init>
  SystemClock_Config();
 8000e92:	f7ff ffc5 	bl	8000e20 <SystemClock_Config>
  MX_GPIO_Init();
 8000e96:	f7ff fe0d 	bl	8000ab4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e9a:	f7ff fe79 	bl	8000b90 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000e9e:	f000 f95d 	bl	800115c <MX_SPI3_Init>
  MX_ADC1_Init();
 8000ea2:	f7ff f995 	bl	80001d0 <MX_ADC1_Init>
  MX_DMA_Init();
 8000ea6:	f7ff fa49 	bl	800033c <MX_DMA_Init>
  MX_TIM2_Init();
 8000eaa:	f000 fb43 	bl	8001534 <MX_TIM2_Init>
  MX_RTC_Init();
 8000eae:	f000 f927 	bl	8001100 <MX_RTC_Init>
  MX_TIM6_Init();
 8000eb2:	f000 fb97 	bl	80015e4 <MX_TIM6_Init>
  MX_FREERTOS_Init();
 8000eb6:	f7ff fd33 	bl	8000920 <MX_FREERTOS_Init>
  osKernelStart();
 8000eba:	f004 f98f 	bl	80051dc <osKernelStart>
 8000ebe:	e7fe      	b.n	8000ebe <main+0x32>

08000ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ec2:	6802      	ldr	r2, [r0, #0]
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d000      	beq.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eca:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000ecc:	f000 fc20 	bl	8001710 <HAL_IncTick>
}
 8000ed0:	e7fb      	b.n	8000eca <HAL_TIM_PeriodElapsedCallback+0xa>
 8000ed2:	bf00      	nop
 8000ed4:	40012c00 	.word	0x40012c00

08000ed8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed8:	4770      	bx	lr
	...

08000edc <RTC_ToEpoch>:
	memcpy ( &(packet->inertial), imu, sizeof(struct inertialData) );

}

// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8000edc:	b430      	push	{r4, r5}
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8000ede:	784b      	ldrb	r3, [r1, #1]
 8000ee0:	f1c3 040e 	rsb	r4, r3, #14
 8000ee4:	4d22      	ldr	r5, [pc, #136]	; (8000f70 <RTC_ToEpoch+0x94>)
 8000ee6:	fb85 2504 	smull	r2, r5, r5, r4
 8000eea:	17e2      	asrs	r2, r4, #31
 8000eec:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 8000ef0:	b2d2      	uxtb	r2, r2
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8000ef2:	78cc      	ldrb	r4, [r1, #3]
 8000ef4:	1aa4      	subs	r4, r4, r2
 8000ef6:	f641 2590 	movw	r5, #6800	; 0x1a90
 8000efa:	fa15 f484 	uxtah	r4, r5, r4
 8000efe:	b2a4      	uxth	r4, r4
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8000f00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f04:	0095      	lsls	r5, r2, #2
 8000f06:	442b      	add	r3, r5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3b03      	subs	r3, #3
 8000f0c:	b2db      	uxtb	r3, r3

	// Gregorian calendar date compute
    JDN  = date->Date;
 8000f0e:	788a      	ldrb	r2, [r1, #2]
    JDN += (153 * m + 2) / 5;
 8000f10:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000f14:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000f18:	3302      	adds	r3, #2
 8000f1a:	4916      	ldr	r1, [pc, #88]	; (8000f74 <RTC_ToEpoch+0x98>)
 8000f1c:	fb81 1303 	smull	r1, r3, r1, r3
 8000f20:	eb02 0263 	add.w	r2, r2, r3, asr #1
    JDN += 365 * y;
 8000f24:	f240 136d 	movw	r3, #365	; 0x16d
 8000f28:	fb03 2304 	mla	r3, r3, r4, r2
    JDN += y / 4;
 8000f2c:	eb03 0394 	add.w	r3, r3, r4, lsr #2
    JDN += -y / 100;
 8000f30:	4262      	negs	r2, r4
 8000f32:	4911      	ldr	r1, [pc, #68]	; (8000f78 <RTC_ToEpoch+0x9c>)
 8000f34:	fb81 c502 	smull	ip, r5, r1, r2
 8000f38:	17d2      	asrs	r2, r2, #31
 8000f3a:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 8000f3e:	441a      	add	r2, r3
    JDN += y / 400;
 8000f40:	fba1 3404 	umull	r3, r4, r1, r4
 8000f44:	eb02 14d4 	add.w	r4, r2, r4, lsr #7
    JDN  = JDN - 32045;
    JDN  = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <RTC_ToEpoch+0xa0>)
 8000f4a:	4423      	add	r3, r4
    JDN *= 86400;                     // Days to seconds
    JDN += time->Hours * 3600;    // ... and today seconds
 8000f4c:	7801      	ldrb	r1, [r0, #0]
 8000f4e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f52:	fb02 f201 	mul.w	r2, r2, r1
 8000f56:	490a      	ldr	r1, [pc, #40]	; (8000f80 <RTC_ToEpoch+0xa4>)
 8000f58:	fb01 2303 	mla	r3, r1, r3, r2
    JDN += time->Minutes * 60;
 8000f5c:	7842      	ldrb	r2, [r0, #1]
 8000f5e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000f62:	0091      	lsls	r1, r2, #2
 8000f64:	440b      	add	r3, r1
    JDN += time->Seconds;
 8000f66:	7880      	ldrb	r0, [r0, #2]

	return JDN;
}
 8000f68:	4418      	add	r0, r3
 8000f6a:	bc30      	pop	{r4, r5}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2aaaaaab 	.word	0x2aaaaaab
 8000f74:	66666667 	.word	0x66666667
 8000f78:	51eb851f 	.word	0x51eb851f
 8000f7c:	ffda4547 	.word	0xffda4547
 8000f80:	00015180 	.word	0x00015180

08000f84 <packetizeData>:
{
 8000f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f88:	4604      	mov	r4, r0
 8000f8a:	4689      	mov	r9, r1
 8000f8c:	4690      	mov	r8, r2
	packet->tick_ms = HAL_GetTick();
 8000f8e:	f000 fbcb 	bl	8001728 <HAL_GetTick>
 8000f92:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8000f96:	4d10      	ldr	r5, [pc, #64]	; (8000fd8 <packetizeData+0x54>)
 8000f98:	4f10      	ldr	r7, [pc, #64]	; (8000fdc <packetizeData+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	f003 f9fc 	bl	800439c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8000fa4:	4e0e      	ldr	r6, [pc, #56]	; (8000fe0 <packetizeData+0x5c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	4638      	mov	r0, r7
 8000fac:	f003 fa21 	bl	80043f2 <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f7ff ff92 	bl	8000edc <RTC_ToEpoch>
 8000fb8:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	memcpy ( &(packet->temp), temp, sizeof(struct thermopilePackagedData) );
 8000fbc:	2250      	movs	r2, #80	; 0x50
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f006 febf 	bl	8007d44 <memcpy>
	memcpy ( &(packet->inertial), imu, sizeof(struct inertialData) );
 8000fc6:	2298      	movs	r2, #152	; 0x98
 8000fc8:	4641      	mov	r1, r8
 8000fca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000fce:	f006 feb9 	bl	8007d44 <memcpy>
}
 8000fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20002710 	.word	0x20002710
 8000fdc:	20002730 	.word	0x20002730
 8000fe0:	2000272c 	.word	0x2000272c

08000fe4 <MasterThreadTask>:
{
 8000fe4:	b508      	push	{r3, lr}
 8000fe6:	e027      	b.n	8001038 <MasterThreadTask+0x54>
				osThreadFlagsSet(thermopileTaskHandle, 0x00000001U);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <MasterThreadTask+0xf0>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	f004 f98f 	bl	8005310 <osThreadFlagsSet>
 8000ff2:	e035      	b.n	8001060 <MasterThreadTask+0x7c>
				osThreadFlagsSet(inertialSensingTaskHandle, 0x00000001U);
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MasterThreadTask+0xf4>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f004 f989 	bl	8005310 <osThreadFlagsSet>
 8000ffe:	e033      	b.n	8001068 <MasterThreadTask+0x84>
					osMessageQueueGet(thermMsgQueueHandle, &thermMsgReceived, 0U, osWaitForever);
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	2200      	movs	r2, #0
 8001006:	4935      	ldr	r1, [pc, #212]	; (80010dc <MasterThreadTask+0xf8>)
 8001008:	4835      	ldr	r0, [pc, #212]	; (80010e0 <MasterThreadTask+0xfc>)
 800100a:	6800      	ldr	r0, [r0, #0]
 800100c:	f004 fc32 	bl	8005874 <osMessageQueueGet>
 8001010:	e02e      	b.n	8001070 <MasterThreadTask+0x8c>
					osMessageQueueGet(inertialSensingQueueHandle, &inertialMsgReceived, 0U, osWaitForever);
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	2200      	movs	r2, #0
 8001018:	4932      	ldr	r1, [pc, #200]	; (80010e4 <MasterThreadTask+0x100>)
 800101a:	4833      	ldr	r0, [pc, #204]	; (80010e8 <MasterThreadTask+0x104>)
 800101c:	6800      	ldr	r0, [r0, #0]
 800101e:	f004 fc29 	bl	8005874 <osMessageQueueGet>
 8001022:	e029      	b.n	8001078 <MasterThreadTask+0x94>
							osThreadFlagsSet(thermopileTaskHandle, 0x00000002U);
 8001024:	2102      	movs	r1, #2
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <MasterThreadTask+0xf0>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	f004 f971 	bl	8005310 <osThreadFlagsSet>
 800102e:	e047      	b.n	80010c0 <MasterThreadTask+0xdc>
						osMessageQueueReset(sendMsgToMainQueueHandle);
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <MasterThreadTask+0x108>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f004 fc8a 	bl	800594c <osMessageQueueReset>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8001038:	4c2d      	ldr	r4, [pc, #180]	; (80010f0 <MasterThreadTask+0x10c>)
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2200      	movs	r2, #0
 8001040:	4621      	mov	r1, r4
 8001042:	482c      	ldr	r0, [pc, #176]	; (80010f4 <MasterThreadTask+0x110>)
 8001044:	6800      	ldr	r0, [r0, #0]
 8001046:	f004 fc15 	bl	8005874 <osMessageQueueGet>
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 800104a:	7863      	ldrb	r3, [r4, #1]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d1f3      	bne.n	8001038 <MasterThreadTask+0x54>
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <MasterThreadTask+0x114>)
 8001052:	6821      	ldr	r1, [r4, #0]
 8001054:	6011      	str	r1, [r2, #0]
 8001056:	88a1      	ldrh	r1, [r4, #4]
 8001058:	8091      	strh	r1, [r2, #4]
			if(togLogMessageReceived.tempEnabled == SENSOR_ENABLE)
 800105a:	78e3      	ldrb	r3, [r4, #3]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d0c3      	beq.n	8000fe8 <MasterThreadTask+0x4>
			if(togLogMessageReceived.intertialEnabled == SENSOR_ENABLE)
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MasterThreadTask+0x10c>)
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d0c5      	beq.n	8000ff4 <MasterThreadTask+0x10>
				if(togLogMessageReceived.tempEnabled == SENSOR_ENABLE)
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MasterThreadTask+0x10c>)
 800106a:	78db      	ldrb	r3, [r3, #3]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d0c7      	beq.n	8001000 <MasterThreadTask+0x1c>
				if(togLogMessageReceived.intertialEnabled == SENSOR_ENABLE)
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MasterThreadTask+0x10c>)
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d0cc      	beq.n	8001012 <MasterThreadTask+0x2e>
				packetizeData(&sensorPacket, &thermMsgReceived, &inertialMsgReceived);
 8001078:	4c20      	ldr	r4, [pc, #128]	; (80010fc <MasterThreadTask+0x118>)
 800107a:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <MasterThreadTask+0x100>)
 800107c:	4917      	ldr	r1, [pc, #92]	; (80010dc <MasterThreadTask+0xf8>)
 800107e:	4620      	mov	r0, r4
 8001080:	f7ff ff80 	bl	8000f84 <packetizeData>
				osMessageQueuePut(sendMsgToMainQueueHandle, (void *) &sensorPacket, 0U, 0);
 8001084:	2300      	movs	r3, #0
 8001086:	461a      	mov	r2, r3
 8001088:	4621      	mov	r1, r4
 800108a:	4818      	ldr	r0, [pc, #96]	; (80010ec <MasterThreadTask+0x108>)
 800108c:	6800      	ldr	r0, [r0, #0]
 800108e:	f004 fb9f 	bl	80057d0 <osMessageQueuePut>
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f001 fa28 	bl	80024ee <HAL_GPIO_WritePin>
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 800109e:	2300      	movs	r3, #0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4913      	ldr	r1, [pc, #76]	; (80010f0 <MasterThreadTask+0x10c>)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MasterThreadTask+0x110>)
 80010a6:	6800      	ldr	r0, [r0, #0]
 80010a8:	f004 fbe4 	bl	8005874 <osMessageQueueGet>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d1db      	bne.n	8001068 <MasterThreadTask+0x84>
					if(togLogMessageReceived.status == DISABLE_SENSING){
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MasterThreadTask+0x10c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1d7      	bne.n	8001068 <MasterThreadTask+0x84>
						if(prevLogMessage.tempEnabled == SENSOR_ENABLE)
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MasterThreadTask+0x114>)
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d0b1      	beq.n	8001024 <MasterThreadTask+0x40>
						if(prevLogMessage.intertialEnabled == SENSOR_ENABLE)
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MasterThreadTask+0x114>)
 80010c2:	791b      	ldrb	r3, [r3, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d1b3      	bne.n	8001030 <MasterThreadTask+0x4c>
							osThreadFlagsSet(inertialSensingTaskHandle, 0x00000002U);
 80010c8:	2102      	movs	r1, #2
 80010ca:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <MasterThreadTask+0xf4>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f004 f91f 	bl	8005310 <osThreadFlagsSet>
 80010d2:	e7ad      	b.n	8001030 <MasterThreadTask+0x4c>
 80010d4:	20002328 	.word	0x20002328
 80010d8:	200021e8 	.word	0x200021e8
 80010dc:	20002538 	.word	0x20002538
 80010e0:	2000231c 	.word	0x2000231c
 80010e4:	20002678 	.word	0x20002678
 80010e8:	20002218 	.word	0x20002218
 80010ec:	20002220 	.word	0x20002220
 80010f0:	20002530 	.word	0x20002530
 80010f4:	20002320 	.word	0x20002320
 80010f8:	20002724 	.word	0x20002724
 80010fc:	20002588 	.word	0x20002588

08001100 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001100:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_RTC_Init+0x28>)
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_RTC_Init+0x2c>)
 8001106:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001108:	2300      	movs	r3, #0
 800110a:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800110c:	227f      	movs	r2, #127	; 0x7f
 800110e:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001114:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001116:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001118:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800111a:	f003 f8d4 	bl	80042c6 <HAL_RTC_Init>
 800111e:	b900      	cbnz	r0, 8001122 <MX_RTC_Init+0x22>
  {
    Error_Handler();
  }

}
 8001120:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001122:	f7ff fed9 	bl	8000ed8 <Error_Handler>
}
 8001126:	e7fb      	b.n	8001120 <MX_RTC_Init+0x20>
 8001128:	20002730 	.word	0x20002730
 800112c:	40002800 	.word	0x40002800

08001130 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001130:	6802      	ldr	r2, [r0, #0]
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_RTC_MspInit+0x24>)
 8001134:	429a      	cmp	r2, r3
 8001136:	d000      	beq.n	800113a <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001138:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800113e:	fa92 f2a2 	rbit	r2, r2
    __HAL_RCC_RTC_ENABLE();
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_RTC_MspInit+0x28>)
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	e7f2      	b.n	8001138 <HAL_RTC_MspInit+0x8>
 8001152:	bf00      	nop
 8001154:	40002800 	.word	0x40002800
 8001158:	10908100 	.word	0x10908100

0800115c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800115c:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 800115e:	4810      	ldr	r0, [pc, #64]	; (80011a0 <MX_SPI3_Init+0x44>)
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_SPI3_Init+0x48>)
 8001162:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001164:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001168:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800116a:	2300      	movs	r3, #0
 800116c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800116e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001172:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001174:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001176:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800117e:	2228      	movs	r2, #40	; 0x28
 8001180:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001182:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001184:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001186:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001188:	2207      	movs	r2, #7
 800118a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800118c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118e:	2308      	movs	r3, #8
 8001190:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001192:	f003 fa16 	bl	80045c2 <HAL_SPI_Init>
 8001196:	b900      	cbnz	r0, 800119a <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 8001198:	bd08      	pop	{r3, pc}
    Error_Handler();
 800119a:	f7ff fe9d 	bl	8000ed8 <Error_Handler>
}
 800119e:	e7fb      	b.n	8001198 <MX_SPI3_Init+0x3c>
 80011a0:	20002750 	.word	0x20002750
 80011a4:	40003c00 	.word	0x40003c00

080011a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011a8:	b500      	push	{lr}
 80011aa:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	2300      	movs	r3, #0
 80011ae:	9303      	str	r3, [sp, #12]
 80011b0:	9304      	str	r3, [sp, #16]
 80011b2:	9305      	str	r3, [sp, #20]
 80011b4:	9306      	str	r3, [sp, #24]
 80011b6:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 80011b8:	6802      	ldr	r2, [r0, #0]
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_SPI_MspInit+0x70>)
 80011bc:	429a      	cmp	r2, r3
 80011be:	d002      	beq.n	80011c6 <HAL_SPI_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011c0:	b009      	add	sp, #36	; 0x24
 80011c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011c6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d0:	61da      	str	r2, [r3, #28]
 80011d2:	69da      	ldr	r2, [r3, #28]
 80011d4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80011d8:	9201      	str	r2, [sp, #4]
 80011da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011ee:	2338      	movs	r3, #56	; 0x38
 80011f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011fa:	2306      	movs	r3, #6
 80011fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	a903      	add	r1, sp, #12
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <HAL_SPI_MspInit+0x74>)
 8001202:	f001 f8a9 	bl	8002358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2105      	movs	r1, #5
 800120a:	2033      	movs	r0, #51	; 0x33
 800120c:	f000 ff36 	bl	800207c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001210:	2033      	movs	r0, #51	; 0x33
 8001212:	f000 ff67 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 8001216:	e7d3      	b.n	80011c0 <HAL_SPI_MspInit+0x18>
 8001218:	40003c00 	.word	0x40003c00
 800121c:	48000400 	.word	0x48000400

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b500      	push	{lr}
 8001222:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_MspInit+0x3c>)
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	f002 0201 	and.w	r2, r2, #1
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800123e:	61da      	str	r2, [r3, #28]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	210f      	movs	r1, #15
 800124e:	f06f 0001 	mvn.w	r0, #1
 8001252:	f000 ff13 	bl	800207c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	b003      	add	sp, #12
 8001258:	f85d fb04 	ldr.w	pc, [sp], #4
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b500      	push	{lr}
 8001262:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001264:	2200      	movs	r2, #0
 8001266:	4601      	mov	r1, r0
 8001268:	2019      	movs	r0, #25
 800126a:	f000 ff07 	bl	800207c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800126e:	2019      	movs	r0, #25
 8001270:	f000 ff38 	bl	80020e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_InitTick+0x68>)
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800127c:	619a      	str	r2, [r3, #24]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001288:	a902      	add	r1, sp, #8
 800128a:	a803      	add	r0, sp, #12
 800128c:	f002 feb2 	bl	8003ff4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001290:	f002 fe9a 	bl	8003fc8 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_InitTick+0x6c>)
 8001296:	fba3 2300 	umull	r2, r3, r3, r0
 800129a:	0c9b      	lsrs	r3, r3, #18
 800129c:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_InitTick+0x70>)
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_InitTick+0x74>)
 80012a2:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80012a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a8:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012aa:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012b2:	f003 fe0d 	bl	8004ed0 <HAL_TIM_Base_Init>
 80012b6:	b118      	cbz	r0, 80012c0 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
}
 80012ba:	b009      	add	sp, #36	; 0x24
 80012bc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <HAL_InitTick+0x70>)
 80012c2:	f003 fcdd 	bl	8004c80 <HAL_TIM_Base_Start_IT>
 80012c6:	e7f8      	b.n	80012ba <HAL_InitTick+0x5a>
 80012c8:	40021000 	.word	0x40021000
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	200027b4 	.word	0x200027b4
 80012d4:	40012c00 	.word	0x40012c00

080012d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012d8:	4770      	bx	lr

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	e7fe      	b.n	80012da <HardFault_Handler>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	e7fe      	b.n	80012de <BusFault_Handler>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler>

080012e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	4770      	bx	lr

080012e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012e6:	4802      	ldr	r0, [pc, #8]	; (80012f0 <DMA1_Channel1_IRQHandler+0xc>)
 80012e8:	f000 ffdb 	bl	80022a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012ec:	bd08      	pop	{r3, pc}
 80012ee:	bf00      	nop
 80012f0:	2000213c 	.word	0x2000213c

080012f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f6:	4802      	ldr	r0, [pc, #8]	; (8001300 <TIM1_UP_TIM16_IRQHandler+0xc>)
 80012f8:	f003 fcdd 	bl	8004cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012fc:	bd08      	pop	{r3, pc}
 80012fe:	bf00      	nop
 8001300:	200027b4 	.word	0x200027b4

08001304 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001306:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM2_IRQHandler+0xc>)
 8001308:	f003 fcd5 	bl	8004cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800130c:	bd08      	pop	{r3, pc}
 800130e:	bf00      	nop
 8001310:	20002884 	.word	0x20002884

08001314 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <I2C1_EV_IRQHandler+0xc>)
 8001318:	f001 fd88 	bl	8002e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800131c:	bd08      	pop	{r3, pc}
 800131e:	bf00      	nop
 8001320:	2000232c 	.word	0x2000232c

08001324 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001326:	4802      	ldr	r0, [pc, #8]	; (8001330 <SPI3_IRQHandler+0xc>)
 8001328:	f003 fa98 	bl	800485c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800132c:	bd08      	pop	{r3, pc}
 800132e:	bf00      	nop
 8001330:	20002750 	.word	0x20002750

08001334 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SystemInit+0x18>)
 8001336:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800133a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800133e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001346:	609a      	str	r2, [r3, #8]
#endif
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <HAL_ADC_ConvCpltCallback>:
	}
}

volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b508      	push	{r3, lr}
	complete++;
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_ADC_ConvCpltCallback+0x24>)
 8001354:	7813      	ldrb	r3, [r2, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	7013      	strb	r3, [r2, #0]

	// notify ThermopileTask that conversion is complete
	while( HAL_ADC_Stop(&hadc1) != HAL_OK);
 800135c:	4806      	ldr	r0, [pc, #24]	; (8001378 <HAL_ADC_ConvCpltCallback+0x28>)
 800135e:	f000 fc0d 	bl	8001b7c <HAL_ADC_Stop>
 8001362:	2800      	cmp	r0, #0
 8001364:	d1fa      	bne.n	800135c <HAL_ADC_ConvCpltCallback+0xc>
	osThreadFlagsSet(thermopileTaskHandle, 0x00000004U);
 8001366:	2104      	movs	r1, #4
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_ADC_ConvCpltCallback+0x2c>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	f003 ffd0 	bl	8005310 <osThreadFlagsSet>

}
 8001370:	bd08      	pop	{r3, pc}
 8001372:	bf00      	nop
 8001374:	2000005e 	.word	0x2000005e
 8001378:	200020ec 	.word	0x200020ec
 800137c:	20002328 	.word	0x20002328

08001380 <HAL_ADC_ConvHalfCpltCallback>:
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
//	blink_ptr = &blink_buffer;
//	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);

}
 8001380:	4770      	bx	lr
	...

08001384 <HAL_ADC_ErrorCallback>:

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 8001384:	4a02      	ldr	r2, [pc, #8]	; (8001390 <HAL_ADC_ErrorCallback+0xc>)
 8001386:	7813      	ldrb	r3, [r2, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	7013      	strb	r3, [r2, #0]
}
 800138e:	4770      	bx	lr
 8001390:	2000005f 	.word	0x2000005f

08001394 <SwitchTemperatureSensor>:
//}

/*
 * Helper Functions
 */
void SwitchTemperatureSensor(sensorChoice sense){
 8001394:	b500      	push	{lr}
 8001396:	b083      	sub	sp, #12

	uint8_t packet[2] = {0};
 8001398:	2300      	movs	r3, #0
 800139a:	f8ad 3004 	strh.w	r3, [sp, #4]

	packet[0] = LMP91051_CFG_REG;

	if(sense == nose){
 800139e:	2801      	cmp	r0, #1
 80013a0:	d01b      	beq.n	80013da <SwitchTemperatureSensor+0x46>
		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_42 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
	}
	else if(sense == temple){
 80013a2:	b910      	cbnz	r0, 80013aa <SwitchTemperatureSensor+0x16>
		packet[1] = TP_TEMPLE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_42 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
 80013a4:	23e3      	movs	r3, #227	; 0xe3
 80013a6:	f88d 3005 	strb.w	r3, [sp, #5]
	}

	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f001 f89c 	bl	80024ee <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 80013b6:	2301      	movs	r3, #1
 80013b8:	2202      	movs	r2, #2
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <SwitchTemperatureSensor+0x50>)
 80013be:	f003 f95d 	bl	800467c <HAL_SPI_Transmit>
	HAL_Delay(2);
 80013c2:	2002      	movs	r0, #2
 80013c4:	f000 f9b6 	bl	8001734 <HAL_Delay>
	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f001 f88d 	bl	80024ee <HAL_GPIO_WritePin>
}
 80013d4:	b003      	add	sp, #12
 80013d6:	f85d fb04 	ldr.w	pc, [sp], #4
		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_42 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
 80013da:	2363      	movs	r3, #99	; 0x63
 80013dc:	f88d 3005 	strb.w	r3, [sp, #5]
 80013e0:	e7e3      	b.n	80013aa <SwitchTemperatureSensor+0x16>
 80013e2:	bf00      	nop
 80013e4:	20002750 	.word	0x20002750

080013e8 <Setup_LMP91051>:

void Setup_LMP91051(void){
 80013e8:	b500      	push	{lr}
 80013ea:	b083      	sub	sp, #12
  uint8_t packet[2];
  packet[0] = LMP91051_CFG_REG;
 80013ec:	2200      	movs	r2, #0
 80013ee:	f88d 2004 	strb.w	r2, [sp, #4]
  packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_250 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
 80013f2:	2362      	movs	r3, #98	; 0x62
 80013f4:	f88d 3005 	strb.w	r3, [sp, #5]

  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f001 f876 	bl	80024ee <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8001402:	2301      	movs	r3, #1
 8001404:	2202      	movs	r2, #2
 8001406:	a901      	add	r1, sp, #4
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <Setup_LMP91051+0x40>)
 800140a:	f003 f937 	bl	800467c <HAL_SPI_Transmit>
  HAL_Delay(2);
 800140e:	2002      	movs	r0, #2
 8001410:	f000 f990 	bl	8001734 <HAL_Delay>
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f001 f867 	bl	80024ee <HAL_GPIO_WritePin>
}
 8001420:	b003      	add	sp, #12
 8001422:	f85d fb04 	ldr.w	pc, [sp], #4
 8001426:	bf00      	nop
 8001428:	20002750 	.word	0x20002750

0800142c <ThermopileTask>:
void ThermopileTask(void *argument){
 800142c:	b538      	push	{r3, r4, r5, lr}
  Setup_LMP91051();
 800142e:	f7ff ffdb 	bl	80013e8 <Setup_LMP91051>
 8001432:	e068      	b.n	8001506 <ThermopileTask+0xda>
					evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	2100      	movs	r1, #0
 800143a:	2006      	movs	r0, #6
 800143c:	f003 ffee 	bl	800541c <osThreadFlagsWait>
 8001440:	4604      	mov	r4, r0
					while( HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 3) != HAL_OK)
 8001442:	2203      	movs	r2, #3
 8001444:	4936      	ldr	r1, [pc, #216]	; (8001520 <ThermopileTask+0xf4>)
 8001446:	4837      	ldr	r0, [pc, #220]	; (8001524 <ThermopileTask+0xf8>)
 8001448:	f000 fbbe 	bl	8001bc8 <HAL_ADC_Start_DMA>
 800144c:	2800      	cmp	r0, #0
 800144e:	d1f1      	bne.n	8001434 <ThermopileTask+0x8>
					if( (evt & 0x00000002U) == 0x00000002U) break;
 8001450:	f014 0f02 	tst.w	r4, #2
 8001454:	d139      	bne.n	80014ca <ThermopileTask+0x9e>
					tempData.nose[i].tick_ms = HAL_GetTick();
 8001456:	f000 f967 	bl	8001728 <HAL_GetTick>
 800145a:	4933      	ldr	r1, [pc, #204]	; (8001528 <ThermopileTask+0xfc>)
 800145c:	1d6c      	adds	r4, r5, #5
 800145e:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8001462:	6058      	str	r0, [r3, #4]
					tempData.nose[i].thermopile = buffer.thermopile;
 8001464:	4a2e      	ldr	r2, [pc, #184]	; (8001520 <ThermopileTask+0xf4>)
 8001466:	8810      	ldrh	r0, [r2, #0]
 8001468:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
					tempData.nose[i].thermistor = buffer.nose_thermistor;
 800146c:	8892      	ldrh	r2, [r2, #4]
 800146e:	805a      	strh	r2, [r3, #2]
					SwitchTemperatureSensor(temple);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ff8f 	bl	8001394 <SwitchTemperatureSensor>
					HAL_Delay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f000 f95c 	bl	8001734 <HAL_Delay>
					while( HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 3) != HAL_OK);
 800147c:	2203      	movs	r2, #3
 800147e:	4928      	ldr	r1, [pc, #160]	; (8001520 <ThermopileTask+0xf4>)
 8001480:	4828      	ldr	r0, [pc, #160]	; (8001524 <ThermopileTask+0xf8>)
 8001482:	f000 fba1 	bl	8001bc8 <HAL_ADC_Start_DMA>
 8001486:	2800      	cmp	r0, #0
 8001488:	d1f8      	bne.n	800147c <ThermopileTask+0x50>
					evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 800148a:	f04f 32ff 	mov.w	r2, #4294967295
 800148e:	2100      	movs	r1, #0
 8001490:	2006      	movs	r0, #6
 8001492:	f003 ffc3 	bl	800541c <osThreadFlagsWait>
 8001496:	4604      	mov	r4, r0
					if( (evt & 0x00000002U) == 0x00000002U) break;
 8001498:	f010 0f02 	tst.w	r0, #2
 800149c:	d115      	bne.n	80014ca <ThermopileTask+0x9e>
					tempData.temple[i].tick_ms = HAL_GetTick();
 800149e:	f000 f943 	bl	8001728 <HAL_GetTick>
 80014a2:	4921      	ldr	r1, [pc, #132]	; (8001528 <ThermopileTask+0xfc>)
 80014a4:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 80014a8:	6058      	str	r0, [r3, #4]
					tempData.temple[i].thermopile = buffer.thermopile;
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <ThermopileTask+0xf4>)
 80014ac:	8810      	ldrh	r0, [r2, #0]
 80014ae:	f821 0035 	strh.w	r0, [r1, r5, lsl #3]
					tempData.temple[i].thermistor = buffer.temple_thermistor;
 80014b2:	8852      	ldrh	r2, [r2, #2]
 80014b4:	805a      	strh	r2, [r3, #2]
				for(int i = 0; i < NUM_THERM_SAMPLES; i++){
 80014b6:	3501      	adds	r5, #1
 80014b8:	2d04      	cmp	r5, #4
 80014ba:	dc06      	bgt.n	80014ca <ThermopileTask+0x9e>
					SwitchTemperatureSensor(nose);
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff ff69 	bl	8001394 <SwitchTemperatureSensor>
					HAL_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 f936 	bl	8001734 <HAL_Delay>
					while( HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 3) != HAL_OK)
 80014c8:	e7bb      	b.n	8001442 <ThermopileTask+0x16>
				if( (evt & 0x00000002U) == 0x00000002U){
 80014ca:	f014 0f02 	tst.w	r4, #2
 80014ce:	d109      	bne.n	80014e4 <ThermopileTask+0xb8>
					osMessageQueuePut(thermMsgQueueHandle, &tempData, 0U, osWaitForever);
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	2200      	movs	r2, #0
 80014d6:	4914      	ldr	r1, [pc, #80]	; (8001528 <ThermopileTask+0xfc>)
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <ThermopileTask+0x100>)
 80014da:	6800      	ldr	r0, [r0, #0]
 80014dc:	f004 f978 	bl	80057d0 <osMessageQueuePut>
				for(int i = 0; i < NUM_THERM_SAMPLES; i++){
 80014e0:	2500      	movs	r5, #0
 80014e2:	e7e9      	b.n	80014b8 <ThermopileTask+0x8c>
				HAL_ADC_Stop_DMA(&hadc1);
 80014e4:	4c0f      	ldr	r4, [pc, #60]	; (8001524 <ThermopileTask+0xf8>)
 80014e6:	4620      	mov	r0, r4
 80014e8:	f000 fbda 	bl	8001ca0 <HAL_ADC_Stop_DMA>
				HAL_ADC_Stop(&hadc1);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f000 fb45 	bl	8001b7c <HAL_ADC_Stop>
				HAL_TIM_Base_Stop(&htim6);
 80014f2:	480f      	ldr	r0, [pc, #60]	; (8001530 <ThermopileTask+0x104>)
 80014f4:	f003 fbac 	bl	8004c50 <HAL_TIM_Base_Stop>
				osMessageQueueReset(thermMsgQueueHandle);
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <ThermopileTask+0x100>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	f004 fa26 	bl	800594c <osMessageQueueReset>
				osThreadFlagsClear(0x0000000EU);
 8001500:	200e      	movs	r0, #14
 8001502:	f003 ff4d 	bl	80053a0 <osThreadFlagsClear>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8001506:	f04f 32ff 	mov.w	r2, #4294967295
 800150a:	2100      	movs	r1, #0
 800150c:	2001      	movs	r0, #1
 800150e:	f003 ff85 	bl	800541c <osThreadFlagsWait>
 8001512:	4604      	mov	r4, r0
		if (evt == 0x00000001U)  {
 8001514:	2801      	cmp	r0, #1
 8001516:	d1f6      	bne.n	8001506 <ThermopileTask+0xda>
			HAL_TIM_Base_Start(&htim6);
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <ThermopileTask+0x104>)
 800151a:	f003 fb81 	bl	8004c20 <HAL_TIM_Base_Start>
 800151e:	e7df      	b.n	80014e0 <ThermopileTask+0xb4>
 8001520:	20000058 	.word	0x20000058
 8001524:	200020ec 	.word	0x200020ec
 8001528:	200027f4 	.word	0x200027f4
 800152c:	2000231c 	.word	0x2000231c
 8001530:	20002844 	.word	0x20002844

08001534 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001534:	b500      	push	{lr}
 8001536:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001538:	2300      	movs	r3, #0
 800153a:	930a      	str	r3, [sp, #40]	; 0x28
 800153c:	930b      	str	r3, [sp, #44]	; 0x2c
 800153e:	930c      	str	r3, [sp, #48]	; 0x30
 8001540:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001542:	9307      	str	r3, [sp, #28]
 8001544:	9308      	str	r3, [sp, #32]
 8001546:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	9302      	str	r3, [sp, #8]
 800154e:	9303      	str	r3, [sp, #12]
 8001550:	9304      	str	r3, [sp, #16]
 8001552:	9305      	str	r3, [sp, #20]
 8001554:	9306      	str	r3, [sp, #24]

  htim2.Instance = TIM2;
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <MX_TIM2_Init+0xac>)
 8001558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 31999;
 800155e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001562:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4;
 8001566:	2204      	movs	r2, #4
 8001568:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001570:	f003 fcae 	bl	8004ed0 <HAL_TIM_Base_Init>
 8001574:	bb20      	cbnz	r0, 80015c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001576:	a90e      	add	r1, sp, #56	; 0x38
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001580:	4817      	ldr	r0, [pc, #92]	; (80015e0 <MX_TIM2_Init+0xac>)
 8001582:	f003 fd5f 	bl	8005044 <HAL_TIM_ConfigClockSource>
 8001586:	b9f0      	cbnz	r0, 80015c6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <MX_TIM2_Init+0xac>)
 800158a:	f003 fcba 	bl	8004f02 <HAL_TIM_OC_Init>
 800158e:	b9e8      	cbnz	r0, 80015cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001590:	2320      	movs	r3, #32
 8001592:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001598:	a907      	add	r1, sp, #28
 800159a:	4811      	ldr	r0, [pc, #68]	; (80015e0 <MX_TIM2_Init+0xac>)
 800159c:	f003 fdc0 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	b9b8      	cbnz	r0, 80015d2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 10;
 80015a6:	220a      	movs	r2, #10
 80015a8:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ae:	2204      	movs	r2, #4
 80015b0:	4669      	mov	r1, sp
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <MX_TIM2_Init+0xac>)
 80015b4:	f003 fcfe 	bl	8004fb4 <HAL_TIM_OC_ConfigChannel>
 80015b8:	b970      	cbnz	r0, 80015d8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
  }

}
 80015ba:	b00f      	add	sp, #60	; 0x3c
 80015bc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015c0:	f7ff fc8a 	bl	8000ed8 <Error_Handler>
 80015c4:	e7d7      	b.n	8001576 <MX_TIM2_Init+0x42>
    Error_Handler();
 80015c6:	f7ff fc87 	bl	8000ed8 <Error_Handler>
 80015ca:	e7dd      	b.n	8001588 <MX_TIM2_Init+0x54>
    Error_Handler();
 80015cc:	f7ff fc84 	bl	8000ed8 <Error_Handler>
 80015d0:	e7de      	b.n	8001590 <MX_TIM2_Init+0x5c>
    Error_Handler();
 80015d2:	f7ff fc81 	bl	8000ed8 <Error_Handler>
 80015d6:	e7e4      	b.n	80015a2 <MX_TIM2_Init+0x6e>
    Error_Handler();
 80015d8:	f7ff fc7e 	bl	8000ed8 <Error_Handler>
}
 80015dc:	e7ed      	b.n	80015ba <MX_TIM2_Init+0x86>
 80015de:	bf00      	nop
 80015e0:	20002884 	.word	0x20002884

080015e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015e4:	b500      	push	{lr}
 80015e6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	9303      	str	r3, [sp, #12]

  htim6.Instance = TIM6;
 80015f0:	480f      	ldr	r0, [pc, #60]	; (8001630 <MX_TIM6_Init+0x4c>)
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <MX_TIM6_Init+0x50>)
 80015f4:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 31999;
 80015f6:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80015fa:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 49;
 80015fe:	2231      	movs	r2, #49	; 0x31
 8001600:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001604:	f003 fc64 	bl	8004ed0 <HAL_TIM_Base_Init>
 8001608:	b958      	cbnz	r0, 8001622 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800160a:	2320      	movs	r3, #32
 800160c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001612:	a901      	add	r1, sp, #4
 8001614:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM6_Init+0x4c>)
 8001616:	f003 fd83 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	b928      	cbnz	r0, 8001628 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
  }

}
 800161c:	b005      	add	sp, #20
 800161e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001622:	f7ff fc59 	bl	8000ed8 <Error_Handler>
 8001626:	e7f0      	b.n	800160a <MX_TIM6_Init+0x26>
    Error_Handler();
 8001628:	f7ff fc56 	bl	8000ed8 <Error_Handler>
}
 800162c:	e7f6      	b.n	800161c <MX_TIM6_Init+0x38>
 800162e:	bf00      	nop
 8001630:	20002844 	.word	0x20002844
 8001634:	40001000 	.word	0x40001000

08001638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001638:	b500      	push	{lr}
 800163a:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM2)
 800163c:	6803      	ldr	r3, [r0, #0]
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001642:	d005      	beq.n	8001650 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <HAL_TIM_Base_MspInit+0x58>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d016      	beq.n	8001678 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800164a:	b003      	add	sp, #12
 800164c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001650:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	61da      	str	r2, [r3, #28]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	201c      	movs	r0, #28
 800166c:	f000 fd06 	bl	800207c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001670:	201c      	movs	r0, #28
 8001672:	f000 fd37 	bl	80020e4 <HAL_NVIC_EnableIRQ>
 8001676:	e7e8      	b.n	800164a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_TIM_Base_MspInit+0x5c>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	f042 0210 	orr.w	r2, r2, #16
 8001680:	61da      	str	r2, [r3, #28]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	9b01      	ldr	r3, [sp, #4]
}
 800168c:	e7dd      	b.n	800164a <HAL_TIM_Base_MspInit+0x12>
 800168e:	bf00      	nop
 8001690:	40001000 	.word	0x40001000
 8001694:	40021000 	.word	0x40021000

08001698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800169c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800169e:	e003      	b.n	80016a8 <LoopCopyDataInit>

080016a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016a6:	3104      	adds	r1, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80016ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016b0:	d3f6      	bcc.n	80016a0 <CopyDataInit>
	ldr	r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016b4:	e002      	b.n	80016bc <LoopFillZerobss>

080016b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016b8:	f842 3b04 	str.w	r3, [r2], #4

080016bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <LoopForever+0x16>)
	cmp	r2, r3
 80016be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016c0:	d3f9      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016c2:	f7ff fe37 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f006 fb19 	bl	8007cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ca:	f7ff fbdf 	bl	8000e8c <main>

080016ce <LoopForever>:

LoopForever:
    b LoopForever
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016d0:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80016d4:	08007e34 	.word	0x08007e34
	ldr	r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016dc:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80016e0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80016e4:	20002908 	.word	0x20002908

080016e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC1_IRQHandler>
	...

080016ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_Init+0x20>)
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 fcad 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fdae 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fd8c 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001708:	2000      	movs	r0, #0
 800170a:	bd08      	pop	{r3, pc}
 800170c:	40022000 	.word	0x40022000

08001710 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <HAL_IncTick+0x10>)
 8001712:	6811      	ldr	r1, [r2, #0]
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_IncTick+0x14>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	440b      	add	r3, r1
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200028c4 	.word	0x200028c4
 8001724:	20000008 	.word	0x20000008

08001728 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001728:	4b01      	ldr	r3, [pc, #4]	; (8001730 <HAL_GetTick+0x8>)
 800172a:	6818      	ldr	r0, [r3, #0]
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200028c4 	.word	0x200028c4

08001734 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff fff6 	bl	8001728 <HAL_GetTick>
 800173c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001742:	d002      	beq.n	800174a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_Delay+0x24>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174a:	f7ff ffed 	bl	8001728 <HAL_GetTick>
 800174e:	1b40      	subs	r0, r0, r5
 8001750:	42a0      	cmp	r0, r4
 8001752:	d3fa      	bcc.n	800174a <HAL_Delay+0x16>
  {
  }
}
 8001754:	bd38      	pop	{r3, r4, r5, pc}
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800175c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800175e:	6802      	ldr	r2, [r0, #0]
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800176a:	2000      	movs	r0, #0
}
 800176c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800176e:	6813      	ldr	r3, [r2, #0]
 8001770:	f013 0f01 	tst.w	r3, #1
 8001774:	d02f      	beq.n	80017d6 <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001776:	6893      	ldr	r3, [r2, #8]
 8001778:	f003 030d 	and.w	r3, r3, #13
 800177c:	2b01      	cmp	r3, #1
 800177e:	d009      	beq.n	8001794 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001780:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001782:	f043 0310 	orr.w	r3, r3, #16
 8001786:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001788:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
 8001792:	e7eb      	b.n	800176c <ADC_Disable+0x10>
 8001794:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8001796:	6893      	ldr	r3, [r2, #8]
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6093      	str	r3, [r2, #8]
 800179e:	6803      	ldr	r3, [r0, #0]
 80017a0:	2203      	movs	r2, #3
 80017a2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80017a4:	f7ff ffc0 	bl	8001728 <HAL_GetTick>
 80017a8:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f013 0f01 	tst.w	r3, #1
 80017b2:	d00e      	beq.n	80017d2 <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017b4:	f7ff ffb8 	bl	8001728 <HAL_GetTick>
 80017b8:	1b40      	subs	r0, r0, r5
 80017ba:	2802      	cmp	r0, #2
 80017bc:	d9f5      	bls.n	80017aa <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80017ce:	2001      	movs	r0, #1
 80017d0:	e7cc      	b.n	800176c <ADC_Disable+0x10>
  return HAL_OK;
 80017d2:	2000      	movs	r0, #0
 80017d4:	e7ca      	b.n	800176c <ADC_Disable+0x10>
 80017d6:	2000      	movs	r0, #0
 80017d8:	e7c8      	b.n	800176c <ADC_Disable+0x10>
	...

080017dc <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80017dc:	6803      	ldr	r3, [r0, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	f012 0f0c 	tst.w	r2, #12
 80017e4:	d061      	beq.n	80018aa <ADC_ConversionStop+0xce>
{
 80017e6:	b570      	push	{r4, r5, r6, lr}
 80017e8:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017f0:	d004      	beq.n	80017fc <ADC_ConversionStop+0x20>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80017f2:	8b00      	ldrh	r0, [r0, #24]
 80017f4:	f240 1201 	movw	r2, #257	; 0x101
 80017f8:	4290      	cmp	r0, r2
 80017fa:	d042      	beq.n	8001882 <ADC_ConversionStop+0xa6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80017fc:	2960      	cmp	r1, #96	; 0x60
 80017fe:	d00c      	beq.n	800181a <ADC_ConversionStop+0x3e>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	f012 0f04 	tst.w	r2, #4
 8001808:	d007      	beq.n	800181a <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800180a:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800180c:	f012 0f02 	tst.w	r2, #2
 8001810:	d103      	bne.n	800181a <ADC_ConversionStop+0x3e>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	f042 0210 	orr.w	r2, r2, #16
 8001818:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800181a:	290c      	cmp	r1, #12
 800181c:	d00c      	beq.n	8001838 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	f012 0f08 	tst.w	r2, #8
 8001826:	d007      	beq.n	8001838 <ADC_ConversionStop+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001828:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800182a:	f012 0f02 	tst.w	r2, #2
 800182e:	d103      	bne.n	8001838 <ADC_ConversionStop+0x5c>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001838:	2960      	cmp	r1, #96	; 0x60
 800183a:	d032      	beq.n	80018a2 <ADC_ConversionStop+0xc6>
 800183c:	296c      	cmp	r1, #108	; 0x6c
 800183e:	d12e      	bne.n	800189e <ADC_ConversionStop+0xc2>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001840:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001842:	f7ff ff71 	bl	8001728 <HAL_GetTick>
 8001846:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	422b      	tst	r3, r5
 800184e:	d02a      	beq.n	80018a6 <ADC_ConversionStop+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001850:	f7ff ff6a 	bl	8001728 <HAL_GetTick>
 8001854:	1b80      	subs	r0, r0, r6
 8001856:	280b      	cmp	r0, #11
 8001858:	d9f6      	bls.n	8001848 <ADC_ConversionStop+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6463      	str	r3, [r4, #68]	; 0x44
        
        return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	e01c      	b.n	80018a8 <ADC_ConversionStop+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001876:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	e012      	b.n	80018a8 <ADC_ConversionStop+0xcc>
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001882:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	f011 0f40 	tst.w	r1, #64	; 0x40
 800188a:	d104      	bne.n	8001896 <ADC_ConversionStop+0xba>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800188c:	4908      	ldr	r1, [pc, #32]	; (80018b0 <ADC_ConversionStop+0xd4>)
 800188e:	428a      	cmp	r2, r1
 8001890:	d8ed      	bhi.n	800186e <ADC_ConversionStop+0x92>
        Conversion_Timeout_CPU_cycles ++;
 8001892:	3201      	adds	r2, #1
 8001894:	e7f6      	b.n	8001884 <ADC_ConversionStop+0xa8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001896:	2240      	movs	r2, #64	; 0x40
 8001898:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 800189a:	210c      	movs	r1, #12
 800189c:	e7b0      	b.n	8001800 <ADC_ConversionStop+0x24>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800189e:	2504      	movs	r5, #4
        break;
 80018a0:	e7cf      	b.n	8001842 <ADC_ConversionStop+0x66>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80018a2:	2508      	movs	r5, #8
 80018a4:	e7cd      	b.n	8001842 <ADC_ConversionStop+0x66>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018a6:	2000      	movs	r0, #0
}
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80018aa:	2000      	movs	r0, #0
}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	000993ff 	.word	0x000993ff

080018b4 <ADC_Enable>:
{
 80018b4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b6:	6802      	ldr	r2, [r0, #0]
 80018b8:	6893      	ldr	r3, [r2, #8]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d00d      	beq.n	80018de <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018c2:	6891      	ldr	r1, [r2, #8]
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <ADC_Enable+0x74>)
 80018c6:	4219      	tst	r1, r3
 80018c8:	d00f      	beq.n	80018ea <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80018da:	2001      	movs	r0, #1
}
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	f013 0f01 	tst.w	r3, #1
 80018e4:	d0ed      	beq.n	80018c2 <ADC_Enable+0xe>
  return HAL_OK;
 80018e6:	2000      	movs	r0, #0
 80018e8:	e7f8      	b.n	80018dc <ADC_Enable+0x28>
 80018ea:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80018f4:	f7ff ff18 	bl	8001728 <HAL_GetTick>
 80018f8:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f013 0f01 	tst.w	r3, #1
 8001902:	d10e      	bne.n	8001922 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001904:	f7ff ff10 	bl	8001728 <HAL_GetTick>
 8001908:	1b40      	subs	r0, r0, r5
 800190a:	2802      	cmp	r0, #2
 800190c:	d9f5      	bls.n	80018fa <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001910:	f043 0310 	orr.w	r3, r3, #16
 8001914:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001916:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800191e:	2001      	movs	r0, #1
 8001920:	e7dc      	b.n	80018dc <ADC_Enable+0x28>
  return HAL_OK;
 8001922:	2000      	movs	r0, #0
 8001924:	e7da      	b.n	80018dc <ADC_Enable+0x28>
 8001926:	bf00      	nop
 8001928:	8000003f 	.word	0x8000003f

0800192c <ADC_DMAError>:
{
 800192c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800192e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001930:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001936:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001938:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001940:	f7ff fd20 	bl	8001384 <HAL_ADC_ErrorCallback>
}
 8001944:	bd08      	pop	{r3, pc}

08001946 <ADC_DMAHalfConvCplt>:
{
 8001946:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001948:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800194a:	f7ff fd19 	bl	8001380 <HAL_ADC_ConvHalfCpltCallback>
}
 800194e:	bd08      	pop	{r3, pc}

08001950 <ADC_DMAConvCplt>:
{
 8001950:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001952:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001956:	f012 0f50 	tst.w	r2, #80	; 0x50
 800195a:	d003      	beq.n	8001964 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4798      	blx	r3
}
 8001962:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68d2      	ldr	r2, [r2, #12]
 8001970:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001974:	d10d      	bne.n	8001992 <ADC_DMAConvCplt+0x42>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001976:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001978:	b95a      	cbnz	r2, 8001992 <ADC_DMAConvCplt+0x42>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800197a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001984:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001988:	d103      	bne.n	8001992 <ADC_DMAConvCplt+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fcdc 	bl	8001350 <HAL_ADC_ConvCpltCallback>
 8001998:	e7e3      	b.n	8001962 <ADC_DMAConvCplt+0x12>
	...

0800199c <HAL_ADC_Init>:
{
 800199c:	b530      	push	{r4, r5, lr}
 800199e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80019a4:	2800      	cmp	r0, #0
 80019a6:	f000 80df 	beq.w	8001b68 <HAL_ADC_Init+0x1cc>
 80019aa:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019ae:	f013 0f10 	tst.w	r3, #16
 80019b2:	d152      	bne.n	8001a5a <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80019b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019b6:	b1ab      	cbz	r3, 80019e4 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80019c2:	d003      	beq.n	80019cc <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80019c4:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80019c6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80019ca:	d047      	beq.n	8001a5c <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 80019cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ce:	f023 0312 	bic.w	r3, r3, #18
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
 80019e2:	e03b      	b.n	8001a5c <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 80019e6:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80019e8:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 80019ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80019ee:	f7fe fc47 	bl	8000280 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80019fa:	d001      	beq.n	8001a00 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2000      	movs	r0, #0
 80019fe:	e7dc      	b.n	80019ba <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff feab 	bl	800175c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a08:	f013 0f10 	tst.w	r3, #16
 8001a0c:	d1d5      	bne.n	80019ba <HAL_ADC_Init+0x1e>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d1d3      	bne.n	80019ba <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a18:	f023 0302 	bic.w	r3, r3, #2
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	6893      	ldr	r3, [r2, #8]
 8001a26:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001a2a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	6893      	ldr	r3, [r2, #8]
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a36:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <HAL_ADC_Init+0x1d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a4d      	ldr	r2, [pc, #308]	; (8001b70 <HAL_ADC_Init+0x1d4>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a46:	005a      	lsls	r2, r3, #1
 8001a48:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001a4a:	e002      	b.n	8001a52 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <HAL_ADC_Init+0xb0>
 8001a58:	e7af      	b.n	80019ba <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a5e:	f013 0f10 	tst.w	r3, #16
 8001a62:	d178      	bne.n	8001b56 <HAL_ADC_Init+0x1ba>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d176      	bne.n	8001b56 <HAL_ADC_Init+0x1ba>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a68:	6821      	ldr	r1, [r4, #0]
 8001a6a:	688a      	ldr	r2, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001a6c:	f012 0204 	ands.w	r2, r2, #4
 8001a70:	d171      	bne.n	8001b56 <HAL_ADC_Init+0x1ba>
    ADC_STATE_CLR_SET(hadc->State,
 8001a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6423      	str	r3, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a7e:	688b      	ldr	r3, [r1, #8]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d045      	beq.n	8001b14 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a88:	493a      	ldr	r1, [pc, #232]	; (8001b74 <HAL_ADC_Init+0x1d8>)
 8001a8a:	688b      	ldr	r3, [r1, #8]
 8001a8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a90:	6865      	ldr	r5, [r4, #4]
 8001a92:	432b      	orrs	r3, r5
 8001a94:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a96:	7e61      	ldrb	r1, [r4, #25]
 8001a98:	034b      	lsls	r3, r1, #13
 8001a9a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001a9c:	2d01      	cmp	r5, #1
 8001a9e:	d001      	beq.n	8001aa4 <HAL_ADC_Init+0x108>
 8001aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	68e2      	ldr	r2, [r4, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	68a2      	ldr	r2, [r4, #8]
 8001aac:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aae:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001ab2:	2a01      	cmp	r2, #1
 8001ab4:	d033      	beq.n	8001b1e <HAL_ADC_Init+0x182>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ab8:	2a01      	cmp	r2, #1
 8001aba:	d002      	beq.n	8001ac2 <HAL_ADC_Init+0x126>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001abc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	6891      	ldr	r1, [r2, #8]
 8001ac6:	f011 0f0c 	tst.w	r1, #12
 8001aca:	d10c      	bne.n	8001ae6 <HAL_ADC_Init+0x14a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001acc:	68d1      	ldr	r1, [r2, #12]
 8001ace:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001ad2:	f021 0102 	bic.w	r1, r1, #2
 8001ad6:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ad8:	7e21      	ldrb	r1, [r4, #24]
 8001ada:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001ade:	0052      	lsls	r2, r2, #1
 8001ae0:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001ae4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001ae6:	6821      	ldr	r1, [r4, #0]
 8001ae8:	68cd      	ldr	r5, [r1, #12]
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <HAL_ADC_Init+0x1dc>)
 8001aec:	402a      	ands	r2, r5
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001af2:	6923      	ldr	r3, [r4, #16]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d025      	beq.n	8001b44 <HAL_ADC_Init+0x1a8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001afc:	f023 030f 	bic.w	r3, r3, #15
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	2300      	movs	r3, #0
 8001b04:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b08:	f023 0303 	bic.w	r3, r3, #3
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6423      	str	r3, [r4, #64]	; 0x40
 8001b12:	e027      	b.n	8001b64 <HAL_ADC_Init+0x1c8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b14:	680b      	ldr	r3, [r1, #0]
 8001b16:	f013 0f01 	tst.w	r3, #1
 8001b1a:	d1bc      	bne.n	8001a96 <HAL_ADC_Init+0xfa>
 8001b1c:	e7b4      	b.n	8001a88 <HAL_ADC_Init+0xec>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b1e:	b931      	cbnz	r1, 8001b2e <HAL_ADC_Init+0x192>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001b20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b22:	3a01      	subs	r2, #1
 8001b24:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	e7c3      	b.n	8001ab6 <HAL_ADC_Init+0x11a>
        ADC_STATE_CLR_SET(hadc->State,
 8001b2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b30:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	6462      	str	r2, [r4, #68]	; 0x44
 8001b42:	e7b8      	b.n	8001ab6 <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b44:	6821      	ldr	r1, [r4, #0]
 8001b46:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001b48:	f023 030f 	bic.w	r3, r3, #15
 8001b4c:	69e2      	ldr	r2, [r4, #28]
 8001b4e:	3a01      	subs	r2, #1
 8001b50:	4313      	orrs	r3, r2
 8001b52:	630b      	str	r3, [r1, #48]	; 0x30
 8001b54:	e7d5      	b.n	8001b02 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 8001b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b58:	f023 0312 	bic.w	r3, r3, #18
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8001b62:	2001      	movs	r0, #1
}
 8001b64:	b003      	add	sp, #12
 8001b66:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
 8001b6a:	e7fb      	b.n	8001b64 <HAL_ADC_Init+0x1c8>
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	50000300 	.word	0x50000300
 8001b78:	fff0c007 	.word	0xfff0c007

08001b7c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001b7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d01d      	beq.n	8001bc0 <HAL_ADC_Stop+0x44>
{
 8001b84:	b510      	push	{r4, lr}
 8001b86:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b8e:	216c      	movs	r1, #108	; 0x6c
 8001b90:	f7ff fe24 	bl	80017dc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001b94:	4603      	mov	r3, r0
 8001b96:	b120      	cbz	r0, 8001ba2 <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff fdda 	bl	800175c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d1f4      	bne.n	8001b98 <HAL_ADC_Stop+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 8001bae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bb0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	6422      	str	r2, [r4, #64]	; 0x40
 8001bbe:	e7eb      	b.n	8001b98 <HAL_ADC_Stop+0x1c>
  __HAL_LOCK(hadc);
 8001bc0:	2302      	movs	r3, #2
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_ADC_Start_DMA>:
{
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bca:	6804      	ldr	r4, [r0, #0]
 8001bcc:	68a4      	ldr	r4, [r4, #8]
 8001bce:	f014 0f04 	tst.w	r4, #4
 8001bd2:	d15a      	bne.n	8001c8a <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 8001bd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d059      	beq.n	8001c90 <HAL_ADC_Start_DMA+0xc8>
 8001bdc:	4616      	mov	r6, r2
 8001bde:	460f      	mov	r7, r1
 8001be0:	4604      	mov	r4, r0
 8001be2:	2301      	movs	r3, #1
 8001be4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = ADC_Enable(hadc);
 8001be8:	f7ff fe64 	bl	80018b4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001bec:	4605      	mov	r5, r0
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d147      	bne.n	8001c82 <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bf4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c08:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c12:	d005      	beq.n	8001c20 <HAL_ADC_Start_DMA+0x58>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1e:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c22:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001c26:	d029      	beq.n	8001c7c <HAL_ADC_Start_DMA+0xb4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c2a:	f023 0306 	bic.w	r3, r3, #6
 8001c2e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001c30:	2300      	movs	r3, #0
 8001c32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c38:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <HAL_ADC_Start_DMA+0xcc>)
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_ADC_Start_DMA+0xd0>)
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c44:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <HAL_ADC_Start_DMA+0xd4>)
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	221c      	movs	r2, #28
 8001c4c:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	6853      	ldr	r3, [r2, #4]
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	68d3      	ldr	r3, [r2, #12]
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c62:	6821      	ldr	r1, [r4, #0]
 8001c64:	4633      	mov	r3, r6
 8001c66:	463a      	mov	r2, r7
 8001c68:	3140      	adds	r1, #64	; 0x40
 8001c6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c6c:	f000 fa98 	bl	80021a0 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	6893      	ldr	r3, [r2, #8]
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6093      	str	r3, [r2, #8]
 8001c7a:	e007      	b.n	8001c8c <HAL_ADC_Start_DMA+0xc4>
          ADC_CLEAR_ERRORCODE(hadc);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	6463      	str	r3, [r4, #68]	; 0x44
 8001c80:	e7d6      	b.n	8001c30 <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 8001c82:	2300      	movs	r3, #0
 8001c84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001c88:	e000      	b.n	8001c8c <HAL_ADC_Start_DMA+0xc4>
    tmp_hal_status = HAL_BUSY;
 8001c8a:	2502      	movs	r5, #2
}
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001c90:	2502      	movs	r5, #2
 8001c92:	e7fb      	b.n	8001c8c <HAL_ADC_Start_DMA+0xc4>
 8001c94:	08001951 	.word	0x08001951
 8001c98:	08001947 	.word	0x08001947
 8001c9c:	0800192d 	.word	0x0800192d

08001ca0 <HAL_ADC_Stop_DMA>:
{  
 8001ca0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8001ca2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d034      	beq.n	8001d14 <HAL_ADC_Stop_DMA+0x74>
 8001caa:	4604      	mov	r4, r0
 8001cac:	2301      	movs	r3, #1
 8001cae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001cb2:	216c      	movs	r1, #108	; 0x6c
 8001cb4:	f7ff fd92 	bl	80017dc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001cb8:	4605      	mov	r5, r0
 8001cba:	b120      	cbz	r0, 8001cc6 <HAL_ADC_Stop_DMA+0x26>
  __HAL_UNLOCK(hadc);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	68d3      	ldr	r3, [r2, #12]
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001cd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cd2:	f000 fa9f 	bl	8002214 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	b118      	cbz	r0, 8001ce2 <HAL_ADC_Stop_DMA+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce0:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	6853      	ldr	r3, [r2, #4]
 8001ce6:	f023 0310 	bic.w	r3, r3, #16
 8001cea:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8001cec:	b975      	cbnz	r5, 8001d0c <HAL_ADC_Stop_DMA+0x6c>
      tmp_hal_status = ADC_Disable(hadc);
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff fd34 	bl	800175c <ADC_Disable>
 8001cf4:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 8001cf6:	2d00      	cmp	r5, #0
 8001cf8:	d1e0      	bne.n	8001cbc <HAL_ADC_Stop_DMA+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6423      	str	r3, [r4, #64]	; 0x40
 8001d0a:	e7d7      	b.n	8001cbc <HAL_ADC_Stop_DMA+0x1c>
      ADC_Disable(hadc);
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fd25 	bl	800175c <ADC_Disable>
 8001d12:	e7f0      	b.n	8001cf6 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8001d14:	2502      	movs	r5, #2
 8001d16:	e7d4      	b.n	8001cc2 <HAL_ADC_Stop_DMA+0x22>

08001d18 <HAL_ADC_ConfigChannel>:
{
 8001d18:	b430      	push	{r4, r5}
 8001d1a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001d20:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001d24:	2a01      	cmp	r2, #1
 8001d26:	f000 818e 	beq.w	8002046 <HAL_ADC_ConfigChannel+0x32e>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d32:	6800      	ldr	r0, [r0, #0]
 8001d34:	6882      	ldr	r2, [r0, #8]
 8001d36:	f012 0f04 	tst.w	r2, #4
 8001d3a:	f040 8179 	bne.w	8002030 <HAL_ADC_ConfigChannel+0x318>
    if (sConfig->Rank < 5U)
 8001d3e:	684a      	ldr	r2, [r1, #4]
 8001d40:	2a04      	cmp	r2, #4
 8001d42:	d831      	bhi.n	8001da8 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8001d44:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d4a:	0055      	lsls	r5, r2, #1
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	40aa      	lsls	r2, r5
 8001d50:	ea24 0202 	bic.w	r2, r4, r2
 8001d54:	680c      	ldr	r4, [r1, #0]
 8001d56:	40ac      	lsls	r4, r5
 8001d58:	4322      	orrs	r2, r4
 8001d5a:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	6882      	ldr	r2, [r0, #8]
 8001d60:	f012 0f0c 	tst.w	r2, #12
 8001d64:	d168      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d66:	680a      	ldr	r2, [r1, #0]
 8001d68:	2a09      	cmp	r2, #9
 8001d6a:	d94e      	bls.n	8001e0a <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d6c:	6984      	ldr	r4, [r0, #24]
 8001d6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d72:	3a1e      	subs	r2, #30
 8001d74:	2507      	movs	r5, #7
 8001d76:	4095      	lsls	r5, r2
 8001d78:	ea24 0405 	bic.w	r4, r4, r5
 8001d7c:	688d      	ldr	r5, [r1, #8]
 8001d7e:	fa05 f202 	lsl.w	r2, r5, r2
 8001d82:	4322      	orrs	r2, r4
 8001d84:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d86:	6948      	ldr	r0, [r1, #20]
 8001d88:	681c      	ldr	r4, [r3, #0]
 8001d8a:	68e2      	ldr	r2, [r4, #12]
 8001d8c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001d90:	0052      	lsls	r2, r2, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001d96:	6908      	ldr	r0, [r1, #16]
 8001d98:	3801      	subs	r0, #1
 8001d9a:	2803      	cmp	r0, #3
 8001d9c:	f200 808b 	bhi.w	8001eb6 <HAL_ADC_ConfigChannel+0x19e>
 8001da0:	e8df f000 	tbb	[pc, r0]
 8001da4:	7e736840 	.word	0x7e736840
    else if (sConfig->Rank < 10U)
 8001da8:	2a09      	cmp	r2, #9
 8001daa:	d80e      	bhi.n	8001dca <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001dac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001dae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001db2:	0055      	lsls	r5, r2, #1
 8001db4:	3d1e      	subs	r5, #30
 8001db6:	221f      	movs	r2, #31
 8001db8:	40aa      	lsls	r2, r5
 8001dba:	ea24 0202 	bic.w	r2, r4, r2
 8001dbe:	680c      	ldr	r4, [r1, #0]
 8001dc0:	fa04 f505 	lsl.w	r5, r4, r5
 8001dc4:	432a      	orrs	r2, r5
 8001dc6:	6342      	str	r2, [r0, #52]	; 0x34
 8001dc8:	e7c8      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001dca:	2a0e      	cmp	r2, #14
 8001dcc:	d80e      	bhi.n	8001dec <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001dd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001dd4:	0055      	lsls	r5, r2, #1
 8001dd6:	3d3c      	subs	r5, #60	; 0x3c
 8001dd8:	221f      	movs	r2, #31
 8001dda:	40aa      	lsls	r2, r5
 8001ddc:	ea24 0202 	bic.w	r2, r4, r2
 8001de0:	680c      	ldr	r4, [r1, #0]
 8001de2:	fa04 f505 	lsl.w	r5, r4, r5
 8001de6:	432a      	orrs	r2, r5
 8001de8:	6382      	str	r2, [r0, #56]	; 0x38
 8001dea:	e7b7      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001dec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001dee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001df2:	0055      	lsls	r5, r2, #1
 8001df4:	3d5a      	subs	r5, #90	; 0x5a
 8001df6:	221f      	movs	r2, #31
 8001df8:	40aa      	lsls	r2, r5
 8001dfa:	ea24 0202 	bic.w	r2, r4, r2
 8001dfe:	680c      	ldr	r4, [r1, #0]
 8001e00:	fa04 f505 	lsl.w	r5, r4, r5
 8001e04:	432a      	orrs	r2, r5
 8001e06:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001e08:	e7a8      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e0a:	6944      	ldr	r4, [r0, #20]
 8001e0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e10:	2507      	movs	r5, #7
 8001e12:	4095      	lsls	r5, r2
 8001e14:	ea24 0405 	bic.w	r4, r4, r5
 8001e18:	688d      	ldr	r5, [r1, #8]
 8001e1a:	fa05 f202 	lsl.w	r2, r5, r2
 8001e1e:	4322      	orrs	r2, r4
 8001e20:	6142      	str	r2, [r0, #20]
 8001e22:	e7b0      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e24:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001e26:	4d89      	ldr	r5, [pc, #548]	; (800204c <HAL_ADC_ConfigChannel+0x334>)
 8001e28:	4005      	ands	r5, r0
 8001e2a:	6808      	ldr	r0, [r1, #0]
 8001e2c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001e30:	4315      	orrs	r5, r2
 8001e32:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001e36:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	6882      	ldr	r2, [r0, #8]
 8001e3c:	f002 0203 	and.w	r2, r2, #3
 8001e40:	2a01      	cmp	r2, #1
 8001e42:	d06b      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x204>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e44:	68ca      	ldr	r2, [r1, #12]
 8001e46:	2a01      	cmp	r2, #1
 8001e48:	d06e      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x210>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e4a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001e4e:	680d      	ldr	r5, [r1, #0]
 8001e50:	2401      	movs	r4, #1
 8001e52:	40ac      	lsls	r4, r5
 8001e54:	ea22 0204 	bic.w	r2, r2, r4
 8001e58:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e5c:	680a      	ldr	r2, [r1, #0]
 8001e5e:	2a10      	cmp	r2, #16
 8001e60:	f000 808b 	beq.w	8001f7a <HAL_ADC_ConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e64:	2a11      	cmp	r2, #17
 8001e66:	f000 809c 	beq.w	8001fa2 <HAL_ADC_ConfigChannel+0x28a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e6a:	2a12      	cmp	r2, #18
 8001e6c:	f000 809f 	beq.w	8001fae <HAL_ADC_ConfigChannel+0x296>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e0e2      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e74:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e76:	4d75      	ldr	r5, [pc, #468]	; (800204c <HAL_ADC_ConfigChannel+0x334>)
 8001e78:	4005      	ands	r5, r0
 8001e7a:	6808      	ldr	r0, [r1, #0]
 8001e7c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001e80:	4315      	orrs	r5, r2
 8001e82:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001e86:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001e88:	e7d6      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e8a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001e8c:	4d6f      	ldr	r5, [pc, #444]	; (800204c <HAL_ADC_ConfigChannel+0x334>)
 8001e8e:	4005      	ands	r5, r0
 8001e90:	6808      	ldr	r0, [r1, #0]
 8001e92:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001e96:	4315      	orrs	r5, r2
 8001e98:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001e9c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001e9e:	e7cb      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ea0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001ea2:	486a      	ldr	r0, [pc, #424]	; (800204c <HAL_ADC_ConfigChannel+0x334>)
 8001ea4:	4028      	ands	r0, r5
 8001ea6:	680d      	ldr	r5, [r1, #0]
 8001ea8:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001eac:	4302      	orrs	r2, r0
 8001eae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eb2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001eb4:	e7c0      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eb6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001eb8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ebc:	6808      	ldr	r0, [r1, #0]
 8001ebe:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001ec2:	d01c      	beq.n	8001efe <HAL_ADC_ConfigChannel+0x1e6>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001ec8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ecc:	680c      	ldr	r4, [r1, #0]
 8001ece:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001ed2:	d019      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x1f0>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001ed8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001edc:	680c      	ldr	r4, [r1, #0]
 8001ede:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001ee2:	d016      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001ee8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001eec:	680c      	ldr	r4, [r1, #0]
 8001eee:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001ef2:	d1a1      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001ef4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001efa:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001efc:	e79c      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001efe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f04:	6622      	str	r2, [r4, #96]	; 0x60
 8001f06:	e7dd      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1ac>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f08:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001f0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f0e:	6642      	str	r2, [r0, #100]	; 0x64
 8001f10:	e7e0      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x1bc>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f12:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001f14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f18:	6682      	str	r2, [r0, #104]	; 0x68
 8001f1a:	e7e3      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x1cc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f1c:	6802      	ldr	r2, [r0, #0]
 8001f1e:	f012 0f01 	tst.w	r2, #1
 8001f22:	d08f      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2000      	movs	r0, #0
 8001f26:	e088      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f28:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001f2c:	680d      	ldr	r5, [r1, #0]
 8001f2e:	2401      	movs	r4, #1
 8001f30:	40ac      	lsls	r4, r5
 8001f32:	4322      	orrs	r2, r4
 8001f34:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f38:	680a      	ldr	r2, [r1, #0]
 8001f3a:	2a09      	cmp	r2, #9
 8001f3c:	d90e      	bls.n	8001f5c <HAL_ADC_ConfigChannel+0x244>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f3e:	681d      	ldr	r5, [r3, #0]
 8001f40:	69a8      	ldr	r0, [r5, #24]
 8001f42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f46:	3a1b      	subs	r2, #27
 8001f48:	2407      	movs	r4, #7
 8001f4a:	4094      	lsls	r4, r2
 8001f4c:	ea20 0004 	bic.w	r0, r0, r4
 8001f50:	688c      	ldr	r4, [r1, #8]
 8001f52:	fa04 f202 	lsl.w	r2, r4, r2
 8001f56:	4302      	orrs	r2, r0
 8001f58:	61aa      	str	r2, [r5, #24]
 8001f5a:	e77f      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f5c:	681d      	ldr	r5, [r3, #0]
 8001f5e:	6968      	ldr	r0, [r5, #20]
 8001f60:	3201      	adds	r2, #1
 8001f62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f66:	2407      	movs	r4, #7
 8001f68:	4094      	lsls	r4, r2
 8001f6a:	ea20 0004 	bic.w	r0, r0, r4
 8001f6e:	688c      	ldr	r4, [r1, #8]
 8001f70:	fa04 f202 	lsl.w	r2, r4, r2
 8001f74:	4302      	orrs	r2, r0
 8001f76:	616a      	str	r2, [r5, #20]
 8001f78:	e770      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x144>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f7a:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_ADC_ConfigChannel+0x338>)
 8001f7c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f7e:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8001f82:	f47f af6f 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x14c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	6881      	ldr	r1, [r0, #8]
 8001f8a:	f001 0103 	and.w	r1, r1, #3
 8001f8e:	2901      	cmp	r1, #1
 8001f90:	d014      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f92:	2a10      	cmp	r2, #16
 8001f94:	d01c      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f96:	2a11      	cmp	r2, #17
 8001f98:	d039      	beq.n	800200e <HAL_ADC_ConfigChannel+0x2f6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f9a:	2a12      	cmp	r2, #18
 8001f9c:	d041      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x30a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	e04b      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001fa2:	492b      	ldr	r1, [pc, #172]	; (8002050 <HAL_ADC_ConfigChannel+0x338>)
 8001fa4:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001fa6:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8001faa:	d0ec      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x26e>
 8001fac:	e75d      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x152>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001fae:	4928      	ldr	r1, [pc, #160]	; (8002050 <HAL_ADC_ConfigChannel+0x338>)
 8001fb0:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fb2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8001fb6:	d0e6      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x26e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e03e      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fbc:	6801      	ldr	r1, [r0, #0]
 8001fbe:	f011 0f01 	tst.w	r1, #1
 8001fc2:	d0e6      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x27a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
 8001fce:	e034      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fd0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001fd4:	d1df      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x27e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fd6:	491e      	ldr	r1, [pc, #120]	; (8002050 <HAL_ADC_ConfigChannel+0x338>)
 8001fd8:	688a      	ldr	r2, [r1, #8]
 8001fda:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fde:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_ADC_ConfigChannel+0x33c>)
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 8001fe8:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8001fec:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8001ff0:	fba1 1202 	umull	r1, r2, r1, r2
 8001ff4:	0c92      	lsrs	r2, r2, #18
 8001ff6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ffa:	0051      	lsls	r1, r2, #1
 8001ffc:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001ffe:	9a01      	ldr	r2, [sp, #4]
 8002000:	b11a      	cbz	r2, 800200a <HAL_ADC_ConfigChannel+0x2f2>
            wait_loop_index--;
 8002002:	9a01      	ldr	r2, [sp, #4]
 8002004:	3a01      	subs	r2, #1
 8002006:	9201      	str	r2, [sp, #4]
 8002008:	e7f9      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x2e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200a:	2000      	movs	r0, #0
 800200c:	e015      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800200e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002012:	d1c2      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x282>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_ADC_ConfigChannel+0x338>)
 8002016:	688a      	ldr	r2, [r1, #8]
 8002018:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800201c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002020:	e00b      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002022:	490b      	ldr	r1, [pc, #44]	; (8002050 <HAL_ADC_ConfigChannel+0x338>)
 8002024:	688a      	ldr	r2, [r1, #8]
 8002026:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800202a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202c:	2000      	movs	r0, #0
 800202e:	e004      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002032:	f042 0220 	orr.w	r2, r2, #32
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8002038:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002040:	b002      	add	sp, #8
 8002042:	bc30      	pop	{r4, r5}
 8002044:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8002046:	2002      	movs	r0, #2
 8002048:	e7fa      	b.n	8002040 <HAL_ADC_ConfigChannel+0x328>
 800204a:	bf00      	nop
 800204c:	83fff000 	.word	0x83fff000
 8002050:	50000300 	.word	0x50000300
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800205a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	0200      	lsls	r0, r0, #8
 8002066:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800206c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002070:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002074:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_NVIC_SetPriority+0x60>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002086:	f1c3 0407 	rsb	r4, r3, #7
 800208a:	2c04      	cmp	r4, #4
 800208c:	bf28      	it	cs
 800208e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002090:	1d1d      	adds	r5, r3, #4
 8002092:	2d06      	cmp	r5, #6
 8002094:	d918      	bls.n	80020c8 <HAL_NVIC_SetPriority+0x4c>
 8002096:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 35ff 	mov.w	r5, #4294967295
 800209c:	fa05 f404 	lsl.w	r4, r5, r4
 80020a0:	ea21 0104 	bic.w	r1, r1, r4
 80020a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a6:	fa05 f303 	lsl.w	r3, r5, r3
 80020aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80020b0:	2800      	cmp	r0, #0
 80020b2:	db0b      	blt.n	80020cc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	0109      	lsls	r1, r1, #4
 80020b6:	b2c9      	uxtb	r1, r1
 80020b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80020bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80020c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020c4:	bc30      	pop	{r4, r5}
 80020c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c8:	2300      	movs	r3, #0
 80020ca:	e7e5      	b.n	8002098 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	f000 000f 	and.w	r0, r0, #15
 80020d0:	0109      	lsls	r1, r1, #4
 80020d2:	b2c9      	uxtb	r1, r1
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <HAL_NVIC_SetPriority+0x64>)
 80020d6:	5419      	strb	r1, [r3, r0]
 80020d8:	e7f4      	b.n	80020c4 <HAL_NVIC_SetPriority+0x48>
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00
 80020e0:	e000ed14 	.word	0xe000ed14

080020e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020e4:	2800      	cmp	r0, #0
 80020e6:	db07      	blt.n	80020f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e8:	f000 021f 	and.w	r2, r0, #31
 80020ec:	0940      	lsrs	r0, r0, #5
 80020ee:	2301      	movs	r3, #1
 80020f0:	4093      	lsls	r3, r2
 80020f2:	4a02      	ldr	r2, [pc, #8]	; (80020fc <HAL_NVIC_EnableIRQ+0x18>)
 80020f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002100:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002102:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002104:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002106:	2401      	movs	r4, #1
 8002108:	40b4      	lsls	r4, r6
 800210a:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800210c:	6804      	ldr	r4, [r0, #0]
 800210e:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002110:	6843      	ldr	r3, [r0, #4]
 8002112:	2b10      	cmp	r3, #16
 8002114:	d005      	beq.n	8002122 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002116:	6803      	ldr	r3, [r0, #0]
 8002118:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800211a:	6803      	ldr	r3, [r0, #0]
 800211c:	60da      	str	r2, [r3, #12]
  }
}
 800211e:	bc70      	pop	{r4, r5, r6}
 8002120:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	60d9      	str	r1, [r3, #12]
 800212a:	e7f8      	b.n	800211e <DMA_SetConfig+0x1e>

0800212c <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800212c:	6802      	ldr	r2, [r0, #0]
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <DMA_CalcBaseAndBitshift+0x18>)
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <DMA_CalcBaseAndBitshift+0x1c>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800213e:	4b03      	ldr	r3, [pc, #12]	; (800214c <DMA_CalcBaseAndBitshift+0x20>)
 8002140:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8002142:	4770      	bx	lr
 8002144:	bffdfff8 	.word	0xbffdfff8
 8002148:	cccccccd 	.word	0xcccccccd
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_DMA_Init>:
  if(NULL == hdma)
 8002150:	b320      	cbz	r0, 800219c <HAL_DMA_Init+0x4c>
{ 
 8002152:	b510      	push	{r4, lr}
 8002154:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800215c:	6801      	ldr	r1, [r0, #0]
 800215e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002160:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002164:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002168:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216a:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 800216c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216e:	68e0      	ldr	r0, [r4, #12]
 8002170:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002174:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002176:	6960      	ldr	r0, [r4, #20]
 8002178:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800217a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	69e0      	ldr	r0, [r4, #28]
 8002180:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002182:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8002184:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ffd0 	bl	800212c <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218c:	2000      	movs	r0, #0
 800218e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002190:	2301      	movs	r3, #1
 8002192:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8002196:	f884 0020 	strb.w	r0, [r4, #32]
}  
 800219a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800219c:	2001      	movs	r0, #1
}  
 800219e:	4770      	bx	lr

080021a0 <HAL_DMA_Start_IT>:
{
 80021a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80021a2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80021a6:	2c01      	cmp	r4, #1
 80021a8:	d032      	beq.n	8002210 <HAL_DMA_Start_IT+0x70>
 80021aa:	2401      	movs	r4, #1
 80021ac:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80021b0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80021b4:	2c01      	cmp	r4, #1
 80021b6:	d004      	beq.n	80021c2 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80021b8:	2300      	movs	r3, #0
 80021ba:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80021be:	2002      	movs	r0, #2
} 
 80021c0:	bd38      	pop	{r3, r4, r5, pc}
 80021c2:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 80021c4:	2002      	movs	r0, #2
 80021c6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ca:	2000      	movs	r0, #0
 80021cc:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021ce:	6825      	ldr	r5, [r4, #0]
 80021d0:	6828      	ldr	r0, [r5, #0]
 80021d2:	f020 0001 	bic.w	r0, r0, #1
 80021d6:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff91 	bl	8002100 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80021de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021e0:	b15b      	cbz	r3, 80021fa <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021e2:	6822      	ldr	r2, [r4, #0]
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	f043 030e 	orr.w	r3, r3, #14
 80021ea:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80021ec:	6822      	ldr	r2, [r4, #0]
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2000      	movs	r0, #0
 80021f8:	e7e2      	b.n	80021c0 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	f043 030a 	orr.w	r3, r3, #10
 8002202:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002204:	6822      	ldr	r2, [r4, #0]
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e7ed      	b.n	80021ec <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002210:	2002      	movs	r0, #2
 8002212:	e7d5      	b.n	80021c0 <HAL_DMA_Start_IT+0x20>

08002214 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002214:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002218:	2b02      	cmp	r3, #2
 800221a:	d006      	beq.n	800222a <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221c:	2304      	movs	r3, #4
 800221e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002220:	2300      	movs	r3, #0
 8002222:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8002226:	2001      	movs	r0, #1
 8002228:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800222a:	6802      	ldr	r2, [r0, #0]
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	f023 030e 	bic.w	r3, r3, #14
 8002232:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002234:	6802      	ldr	r2, [r0, #0]
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800223e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002240:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002242:	2201      	movs	r2, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 800224a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 800224e:	2300      	movs	r3, #0
 8002250:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8002254:	4618      	mov	r0, r3
}
 8002256:	4770      	bx	lr

08002258 <HAL_DMA_Abort_IT>:
{  
 8002258:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800225a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002262:	2304      	movs	r3, #4
 8002264:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002266:	2001      	movs	r0, #1
}
 8002268:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800226a:	6802      	ldr	r2, [r0, #0]
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	f023 030e 	bic.w	r3, r3, #14
 8002272:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	6813      	ldr	r3, [r2, #0]
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800227e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002280:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002282:	2201      	movs	r2, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800228e:	2300      	movs	r3, #0
 8002290:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002294:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002296:	b113      	cbz	r3, 800229e <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8002298:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	2000      	movs	r0, #0
 800229c:	e7e4      	b.n	8002268 <HAL_DMA_Abort_IT+0x10>
 800229e:	2000      	movs	r0, #0
 80022a0:	e7e2      	b.n	8002268 <HAL_DMA_Abort_IT+0x10>

080022a2 <HAL_DMA_IRQHandler>:
{
 80022a2:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80022a6:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80022a8:	6804      	ldr	r4, [r0, #0]
 80022aa:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80022ae:	2304      	movs	r3, #4
 80022b0:	408b      	lsls	r3, r1
 80022b2:	4213      	tst	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_DMA_IRQHandler+0x3c>
 80022b6:	f015 0f04 	tst.w	r5, #4
 80022ba:	d010      	beq.n	80022de <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	f013 0f20 	tst.w	r3, #32
 80022c2:	d103      	bne.n	80022cc <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80022cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80022ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80022d0:	2304      	movs	r3, #4
 80022d2:	408b      	lsls	r3, r1
 80022d4:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80022d8:	b103      	cbz	r3, 80022dc <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 80022da:	4798      	blx	r3
}  
 80022dc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80022de:	2302      	movs	r3, #2
 80022e0:	408b      	lsls	r3, r1
 80022e2:	4213      	tst	r3, r2
 80022e4:	d01a      	beq.n	800231c <HAL_DMA_IRQHandler+0x7a>
 80022e6:	f015 0f02 	tst.w	r5, #2
 80022ea:	d017      	beq.n	800231c <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f013 0f20 	tst.w	r3, #32
 80022f2:	d106      	bne.n	8002302 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	f023 030a 	bic.w	r3, r3, #10
 80022fa:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002302:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002304:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002306:	2302      	movs	r3, #2
 8002308:	408b      	lsls	r3, r1
 800230a:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 800230c:	2300      	movs	r3, #0
 800230e:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002312:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0e1      	beq.n	80022dc <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8002318:	4798      	blx	r3
 800231a:	e7df      	b.n	80022dc <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800231c:	2308      	movs	r3, #8
 800231e:	fa03 f101 	lsl.w	r1, r3, r1
 8002322:	4211      	tst	r1, r2
 8002324:	d0da      	beq.n	80022dc <HAL_DMA_IRQHandler+0x3a>
 8002326:	f015 0f08 	tst.w	r5, #8
 800232a:	d0d7      	beq.n	80022dc <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	f023 030e 	bic.w	r3, r3, #14
 8002332:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002334:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002336:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002338:	2301      	movs	r3, #1
 800233a:	fa03 f202 	lsl.w	r2, r3, r2
 800233e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002340:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002342:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8002346:	2300      	movs	r3, #0
 8002348:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800234c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0c4      	beq.n	80022dc <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8002352:	4798      	blx	r3
}  
 8002354:	e7c2      	b.n	80022dc <HAL_DMA_IRQHandler+0x3a>
	...

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b4f0      	push	{r4, r5, r6, r7}
 800235a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 800235c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	e036      	b.n	80023ce <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002360:	2403      	movs	r4, #3
 8002362:	e000      	b.n	8002366 <HAL_GPIO_Init+0xe>
 8002364:	2400      	movs	r4, #0
 8002366:	40b4      	lsls	r4, r6
 8002368:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800236a:	3502      	adds	r5, #2
 800236c:	4e58      	ldr	r6, [pc, #352]	; (80024d0 <HAL_GPIO_Init+0x178>)
 800236e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002372:	4c58      	ldr	r4, [pc, #352]	; (80024d4 <HAL_GPIO_Init+0x17c>)
 8002374:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002376:	43d4      	mvns	r4, r2
 8002378:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800237c:	684f      	ldr	r7, [r1, #4]
 800237e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002382:	d001      	beq.n	8002388 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002384:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8002388:	4d52      	ldr	r5, [pc, #328]	; (80024d4 <HAL_GPIO_Init+0x17c>)
 800238a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800238c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800238e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002392:	684f      	ldr	r7, [r1, #4]
 8002394:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002398:	d001      	beq.n	800239e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800239a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800239e:	4d4d      	ldr	r5, [pc, #308]	; (80024d4 <HAL_GPIO_Init+0x17c>)
 80023a0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80023a4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a8:	684f      	ldr	r7, [r1, #4]
 80023aa:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80023ae:	d001      	beq.n	80023b4 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 80023b0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80023b4:	4d47      	ldr	r5, [pc, #284]	; (80024d4 <HAL_GPIO_Init+0x17c>)
 80023b6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80023b8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80023ba:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023bc:	684e      	ldr	r6, [r1, #4]
 80023be:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80023c2:	d001      	beq.n	80023c8 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80023c4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80023c8:	4a42      	ldr	r2, [pc, #264]	; (80024d4 <HAL_GPIO_Init+0x17c>)
 80023ca:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80023cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ce:	680a      	ldr	r2, [r1, #0]
 80023d0:	fa32 f403 	lsrs.w	r4, r2, r3
 80023d4:	d078      	beq.n	80024c8 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023d6:	2401      	movs	r4, #1
 80023d8:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80023da:	4022      	ands	r2, r4
 80023dc:	d0f6      	beq.n	80023cc <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023de:	684d      	ldr	r5, [r1, #4]
 80023e0:	2d02      	cmp	r5, #2
 80023e2:	d001      	beq.n	80023e8 <HAL_GPIO_Init+0x90>
 80023e4:	2d12      	cmp	r5, #18
 80023e6:	d110      	bne.n	800240a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80023e8:	08de      	lsrs	r6, r3, #3
 80023ea:	3608      	adds	r6, #8
 80023ec:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f0:	f003 0507 	and.w	r5, r3, #7
 80023f4:	00af      	lsls	r7, r5, #2
 80023f6:	250f      	movs	r5, #15
 80023f8:	40bd      	lsls	r5, r7
 80023fa:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023fe:	690d      	ldr	r5, [r1, #16]
 8002400:	40bd      	lsls	r5, r7
 8002402:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002406:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 800240a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800240c:	005f      	lsls	r7, r3, #1
 800240e:	2503      	movs	r5, #3
 8002410:	40bd      	lsls	r5, r7
 8002412:	43ed      	mvns	r5, r5
 8002414:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002418:	684e      	ldr	r6, [r1, #4]
 800241a:	f006 0603 	and.w	r6, r6, #3
 800241e:	40be      	lsls	r6, r7
 8002420:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8002424:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002426:	684e      	ldr	r6, [r1, #4]
 8002428:	f106 3cff 	add.w	ip, r6, #4294967295
 800242c:	f1bc 0f01 	cmp.w	ip, #1
 8002430:	d903      	bls.n	800243a <HAL_GPIO_Init+0xe2>
 8002432:	2e11      	cmp	r6, #17
 8002434:	d001      	beq.n	800243a <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002436:	2e12      	cmp	r6, #18
 8002438:	d110      	bne.n	800245c <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 800243a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800243c:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002440:	68ce      	ldr	r6, [r1, #12]
 8002442:	40be      	lsls	r6, r7
 8002444:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8002448:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800244a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002450:	684e      	ldr	r6, [r1, #4]
 8002452:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8002456:	409e      	lsls	r6, r3
 8002458:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 800245a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800245c:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800245e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002460:	688c      	ldr	r4, [r1, #8]
 8002462:	40bc      	lsls	r4, r7
 8002464:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002466:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002468:	684c      	ldr	r4, [r1, #4]
 800246a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800246e:	d0ad      	beq.n	80023cc <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002470:	4c19      	ldr	r4, [pc, #100]	; (80024d8 <HAL_GPIO_Init+0x180>)
 8002472:	69a5      	ldr	r5, [r4, #24]
 8002474:	f045 0501 	orr.w	r5, r5, #1
 8002478:	61a5      	str	r5, [r4, #24]
 800247a:	69a4      	ldr	r4, [r4, #24]
 800247c:	f004 0401 	and.w	r4, r4, #1
 8002480:	9401      	str	r4, [sp, #4]
 8002482:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002484:	089d      	lsrs	r5, r3, #2
 8002486:	1cae      	adds	r6, r5, #2
 8002488:	4c11      	ldr	r4, [pc, #68]	; (80024d0 <HAL_GPIO_Init+0x178>)
 800248a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800248e:	f003 0403 	and.w	r4, r3, #3
 8002492:	00a6      	lsls	r6, r4, #2
 8002494:	240f      	movs	r4, #15
 8002496:	40b4      	lsls	r4, r6
 8002498:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800249c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80024a0:	f43f af60 	beq.w	8002364 <HAL_GPIO_Init+0xc>
 80024a4:	4c0d      	ldr	r4, [pc, #52]	; (80024dc <HAL_GPIO_Init+0x184>)
 80024a6:	42a0      	cmp	r0, r4
 80024a8:	d00a      	beq.n	80024c0 <HAL_GPIO_Init+0x168>
 80024aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024ae:	42a0      	cmp	r0, r4
 80024b0:	d008      	beq.n	80024c4 <HAL_GPIO_Init+0x16c>
 80024b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024b6:	42a0      	cmp	r0, r4
 80024b8:	f43f af52 	beq.w	8002360 <HAL_GPIO_Init+0x8>
 80024bc:	2405      	movs	r4, #5
 80024be:	e752      	b.n	8002366 <HAL_GPIO_Init+0xe>
 80024c0:	2401      	movs	r4, #1
 80024c2:	e750      	b.n	8002366 <HAL_GPIO_Init+0xe>
 80024c4:	2402      	movs	r4, #2
 80024c6:	e74e      	b.n	8002366 <HAL_GPIO_Init+0xe>
  }
}
 80024c8:	b002      	add	sp, #8
 80024ca:	bcf0      	pop	{r4, r5, r6, r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40010400 	.word	0x40010400
 80024d8:	40021000 	.word	0x40021000
 80024dc:	48000400 	.word	0x48000400

080024e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e0:	6903      	ldr	r3, [r0, #16]
 80024e2:	4219      	tst	r1, r3
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80024e8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80024ea:	2001      	movs	r0, #1
 80024ec:	4770      	bx	lr

080024ee <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ee:	b90a      	cbnz	r2, 80024f4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80024f2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f4:	6181      	str	r1, [r0, #24]
 80024f6:	4770      	bx	lr

080024f8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024f8:	6803      	ldr	r3, [r0, #0]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	f012 0f02 	tst.w	r2, #2
 8002500:	d001      	beq.n	8002506 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002506:	6803      	ldr	r3, [r0, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	f012 0f01 	tst.w	r2, #1
 800250e:	d103      	bne.n	8002518 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	619a      	str	r2, [r3, #24]
  }
}
 8002518:	4770      	bx	lr

0800251a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800251a:	b470      	push	{r4, r5, r6}
 800251c:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800251e:	6805      	ldr	r5, [r0, #0]
 8002520:	6868      	ldr	r0, [r5, #4]
 8002522:	0d74      	lsrs	r4, r6, #21
 8002524:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002528:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800252c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002530:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002534:	f044 0403 	orr.w	r4, r4, #3
 8002538:	ea20 0004 	bic.w	r0, r0, r4
 800253c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002544:	4319      	orrs	r1, r3
 8002546:	4331      	orrs	r1, r6
 8002548:	4301      	orrs	r1, r0
 800254a:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800254c:	bc70      	pop	{r4, r5, r6}
 800254e:	4770      	bx	lr

08002550 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002550:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <I2C_Enable_IRQ+0x78>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d017      	beq.n	8002588 <I2C_Enable_IRQ+0x38>
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <I2C_Enable_IRQ+0x7c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d014      	beq.n	8002588 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800255e:	f011 0f04 	tst.w	r1, #4
 8002562:	d12f      	bne.n	80025c4 <I2C_Enable_IRQ+0x74>
  uint32_t tmpisr = 0U;
 8002564:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002566:	f011 0f01 	tst.w	r1, #1
 800256a:	d001      	beq.n	8002570 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800256c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002570:	f011 0f02 	tst.w	r1, #2
 8002574:	d001      	beq.n	800257a <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002576:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800257a:	f001 0112 	and.w	r1, r1, #18
 800257e:	2912      	cmp	r1, #18
 8002580:	d110      	bne.n	80025a4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002582:	f043 0320 	orr.w	r3, r3, #32
 8002586:	e00d      	b.n	80025a4 <I2C_Enable_IRQ+0x54>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002588:	f011 0f04 	tst.w	r1, #4
 800258c:	d10f      	bne.n	80025ae <I2C_Enable_IRQ+0x5e>
  uint32_t tmpisr = 0U;
 800258e:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002590:	f001 0211 	and.w	r2, r1, #17
 8002594:	2a11      	cmp	r2, #17
 8002596:	d00c      	beq.n	80025b2 <I2C_Enable_IRQ+0x62>
 8002598:	f001 0112 	and.w	r1, r1, #18
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800259c:	2912      	cmp	r1, #18
 800259e:	d00b      	beq.n	80025b8 <I2C_Enable_IRQ+0x68>
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80025a0:	2912      	cmp	r1, #18
 80025a2:	d00c      	beq.n	80025be <I2C_Enable_IRQ+0x6e>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80025a4:	6801      	ldr	r1, [r0, #0]
 80025a6:	680a      	ldr	r2, [r1, #0]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
}
 80025ac:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025ae:	23b8      	movs	r3, #184	; 0xb8
 80025b0:	e7ee      	b.n	8002590 <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80025b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80025b6:	e7ef      	b.n	8002598 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_STOPI;
 80025b8:	f043 0320 	orr.w	r3, r3, #32
 80025bc:	e7f0      	b.n	80025a0 <I2C_Enable_IRQ+0x50>
      tmpisr |= I2C_IT_TCI;
 80025be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c2:	e7ef      	b.n	80025a4 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025c4:	23b8      	movs	r3, #184	; 0xb8
 80025c6:	e7ce      	b.n	8002566 <I2C_Enable_IRQ+0x16>
 80025c8:	0800353b 	.word	0x0800353b
 80025cc:	0800343d 	.word	0x0800343d

080025d0 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80025d0:	f011 0f01 	tst.w	r1, #1
 80025d4:	d009      	beq.n	80025ea <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025de:	2b28      	cmp	r3, #40	; 0x28
 80025e0:	d001      	beq.n	80025e6 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025e2:	23f2      	movs	r3, #242	; 0xf2
 80025e4:	e002      	b.n	80025ec <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80025e6:	2342      	movs	r3, #66	; 0x42
 80025e8:	e000      	b.n	80025ec <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 80025ea:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80025ec:	f011 0f02 	tst.w	r1, #2
 80025f0:	d02c      	beq.n	800264c <I2C_Disable_IRQ+0x7c>
{
 80025f2:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80025f4:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025f8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80025fc:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002600:	2a28      	cmp	r2, #40	; 0x28
 8002602:	d018      	beq.n	8002636 <I2C_Disable_IRQ+0x66>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002604:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002608:	f011 0f04 	tst.w	r1, #4
 800260c:	d001      	beq.n	8002612 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800260e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002612:	f001 0211 	and.w	r2, r1, #17
 8002616:	2a11      	cmp	r2, #17
 8002618:	d00f      	beq.n	800263a <I2C_Disable_IRQ+0x6a>
 800261a:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800261e:	2912      	cmp	r1, #18
 8002620:	d00e      	beq.n	8002640 <I2C_Disable_IRQ+0x70>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002622:	2912      	cmp	r1, #18
 8002624:	d00f      	beq.n	8002646 <I2C_Disable_IRQ+0x76>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002626:	6801      	ldr	r1, [r0, #0]
 8002628:	680a      	ldr	r2, [r1, #0]
 800262a:	ea22 0303 	bic.w	r3, r2, r3
 800262e:	600b      	str	r3, [r1, #0]
}
 8002630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002634:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002636:	4623      	mov	r3, r4
 8002638:	e7e6      	b.n	8002608 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800263a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800263e:	e7ec      	b.n	800261a <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8002640:	f043 0320 	orr.w	r3, r3, #32
 8002644:	e7ed      	b.n	8002622 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	e7ec      	b.n	8002626 <I2C_Disable_IRQ+0x56>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800264c:	f011 0f04 	tst.w	r1, #4
 8002650:	d001      	beq.n	8002656 <I2C_Disable_IRQ+0x86>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002652:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002656:	f001 0211 	and.w	r2, r1, #17
 800265a:	2a11      	cmp	r2, #17
 800265c:	d00b      	beq.n	8002676 <I2C_Disable_IRQ+0xa6>
 800265e:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002662:	2912      	cmp	r1, #18
 8002664:	d00a      	beq.n	800267c <I2C_Disable_IRQ+0xac>
  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002666:	2912      	cmp	r1, #18
 8002668:	d00b      	beq.n	8002682 <I2C_Disable_IRQ+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800266a:	6801      	ldr	r1, [r0, #0]
 800266c:	680a      	ldr	r2, [r1, #0]
 800266e:	ea22 0303 	bic.w	r3, r2, r3
 8002672:	600b      	str	r3, [r1, #0]
 8002674:	4770      	bx	lr
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002676:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800267a:	e7f0      	b.n	800265e <I2C_Disable_IRQ+0x8e>
    tmpisr |= I2C_IT_STOPI;
 800267c:	f043 0320 	orr.w	r3, r3, #32
 8002680:	e7f1      	b.n	8002666 <I2C_Disable_IRQ+0x96>
    tmpisr |= I2C_IT_TCI;
 8002682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002686:	e7f0      	b.n	800266a <I2C_Disable_IRQ+0x9a>

08002688 <I2C_IsAcknowledgeFailed>:
{
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	4604      	mov	r4, r0
 800268c:	460d      	mov	r5, r1
 800268e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f013 0f10 	tst.w	r3, #16
 8002698:	d01c      	beq.n	80026d4 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	f012 0f20 	tst.w	r2, #32
 80026a2:	d119      	bne.n	80026d8 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 80026a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80026a8:	d0f7      	beq.n	800269a <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7ff f83d 	bl	8001728 <HAL_GetTick>
 80026ae:	1b80      	subs	r0, r0, r6
 80026b0:	42a8      	cmp	r0, r5
 80026b2:	d801      	bhi.n	80026b8 <I2C_IsAcknowledgeFailed+0x30>
 80026b4:	2d00      	cmp	r5, #0
 80026b6:	d1f0      	bne.n	800269a <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ba:	f043 0320 	orr.w	r3, r3, #32
 80026be:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	2320      	movs	r3, #32
 80026c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80026cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 80026d0:	2001      	movs	r0, #1
 80026d2:	e020      	b.n	8002716 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 80026d4:	2000      	movs	r0, #0
 80026d6:	e01e      	b.n	8002716 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	2210      	movs	r2, #16
 80026da:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	2520      	movs	r5, #32
 80026e0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7ff ff08 	bl	80024f8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80026e8:	6822      	ldr	r2, [r4, #0]
 80026ea:	6853      	ldr	r3, [r2, #4]
 80026ec:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80026f0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80026f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	2300      	movs	r3, #0
 800270c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002710:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
}
 8002716:	bd70      	pop	{r4, r5, r6, pc}

08002718 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	4604      	mov	r4, r0
 800271c:	460d      	mov	r5, r1
 800271e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f013 0f02 	tst.w	r3, #2
 8002728:	d11d      	bne.n	8002766 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	4632      	mov	r2, r6
 800272c:	4629      	mov	r1, r5
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff ffaa 	bl	8002688 <I2C_IsAcknowledgeFailed>
 8002734:	b9c8      	cbnz	r0, 800276a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002736:	f1b5 3fff 	cmp.w	r5, #4294967295
 800273a:	d0f1      	beq.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273c:	f7fe fff4 	bl	8001728 <HAL_GetTick>
 8002740:	1b80      	subs	r0, r0, r6
 8002742:	42a8      	cmp	r0, r5
 8002744:	d801      	bhi.n	800274a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002746:	2d00      	cmp	r5, #0
 8002748:	d1ea      	bne.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800274c:	f043 0320 	orr.w	r3, r3, #32
 8002750:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002752:	2320      	movs	r3, #32
 8002754:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	2300      	movs	r3, #0
 800275a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800275e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002762:	2001      	movs	r0, #1
 8002764:	e000      	b.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002766:	2000      	movs	r0, #0
}
 8002768:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
 800276c:	e7fc      	b.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800276e <I2C_WaitOnFlagUntilTimeout>:
{
 800276e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002770:	4605      	mov	r5, r0
 8002772:	460f      	mov	r7, r1
 8002774:	4616      	mov	r6, r2
 8002776:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	ea37 0303 	bics.w	r3, r7, r3
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	42b3      	cmp	r3, r6
 8002788:	d118      	bne.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800278a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800278e:	d0f3      	beq.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002790:	f7fe ffca 	bl	8001728 <HAL_GetTick>
 8002794:	9b06      	ldr	r3, [sp, #24]
 8002796:	1ac0      	subs	r0, r0, r3
 8002798:	42a0      	cmp	r0, r4
 800279a:	d801      	bhi.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0x32>
 800279c:	2c00      	cmp	r4, #0
 800279e:	d1eb      	bne.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80027a2:	f043 0320 	orr.w	r3, r3, #32
 80027a6:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	2320      	movs	r3, #32
 80027aa:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80027b4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80027b8:	2001      	movs	r0, #1
 80027ba:	e000      	b.n	80027be <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 80027bc:	2000      	movs	r0, #0
}
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4605      	mov	r5, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c8:	682b      	ldr	r3, [r5, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f013 0f20 	tst.w	r3, #32
 80027d0:	d11a      	bne.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d2:	4632      	mov	r2, r6
 80027d4:	4621      	mov	r1, r4
 80027d6:	4628      	mov	r0, r5
 80027d8:	f7ff ff56 	bl	8002688 <I2C_IsAcknowledgeFailed>
 80027dc:	b9b0      	cbnz	r0, 800280c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027de:	f7fe ffa3 	bl	8001728 <HAL_GetTick>
 80027e2:	1b80      	subs	r0, r0, r6
 80027e4:	42a0      	cmp	r0, r4
 80027e6:	d801      	bhi.n	80027ec <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80027e8:	2c00      	cmp	r4, #0
 80027ea:	d1ed      	bne.n	80027c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80027ee:	f043 0320 	orr.w	r3, r3, #32
 80027f2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	2320      	movs	r3, #32
 80027f6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002800:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002804:	2001      	movs	r0, #1
}
 8002806:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002808:	2000      	movs	r0, #0
 800280a:	e7fc      	b.n	8002806 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800280c:	2001      	movs	r0, #1
 800280e:	e7fa      	b.n	8002806 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002810 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	4604      	mov	r4, r0
 8002814:	460d      	mov	r5, r1
 8002816:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f013 0f04 	tst.w	r3, #4
 8002820:	d13e      	bne.n	80028a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002822:	4632      	mov	r2, r6
 8002824:	4629      	mov	r1, r5
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff ff2e 	bl	8002688 <I2C_IsAcknowledgeFailed>
 800282c:	4601      	mov	r1, r0
 800282e:	2800      	cmp	r0, #0
 8002830:	d138      	bne.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	f012 0f20 	tst.w	r2, #32
 800283a:	d113      	bne.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283c:	f7fe ff74 	bl	8001728 <HAL_GetTick>
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	42a8      	cmp	r0, r5
 8002844:	d801      	bhi.n	800284a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8002846:	2d00      	cmp	r5, #0
 8002848:	d1e6      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002852:	2320      	movs	r3, #32
 8002854:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8002858:	2300      	movs	r3, #0
 800285a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800285e:	2101      	movs	r1, #1
}
 8002860:	4608      	mov	r0, r1
 8002862:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	f012 0f04 	tst.w	r2, #4
 800286a:	d002      	beq.n	8002872 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800286c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800286e:	2a00      	cmp	r2, #0
 8002870:	d1f6      	bne.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002872:	2220      	movs	r2, #32
 8002874:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002876:	6821      	ldr	r1, [r4, #0]
 8002878:	684b      	ldr	r3, [r1, #4]
 800287a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800287e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002882:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	2300      	movs	r3, #0
 800288e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002890:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002898:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800289c:	2101      	movs	r1, #1
 800289e:	e7df      	b.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 80028a0:	2100      	movs	r1, #0
 80028a2:	e7dd      	b.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 80028a4:	2101      	movs	r1, #1
 80028a6:	e7db      	b.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080028a8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d059      	beq.n	8002960 <HAL_I2C_Init+0xb8>
{
 80028ac:	b510      	push	{r4, lr}
 80028ae:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d043      	beq.n	8002940 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	2324      	movs	r3, #36	; 0x24
 80028ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80028be:	6822      	ldr	r2, [r4, #0]
 80028c0:	6813      	ldr	r3, [r2, #0]
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80028d0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	6893      	ldr	r3, [r2, #8]
 80028d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028da:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028dc:	68e3      	ldr	r3, [r4, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d033      	beq.n	800294a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028e2:	68a3      	ldr	r3, [r4, #8]
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80028ea:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ec:	68e3      	ldr	r3, [r4, #12]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d031      	beq.n	8002956 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	6853      	ldr	r3, [r2, #4]
 80028f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002900:	6822      	ldr	r2, [r4, #0]
 8002902:	68d3      	ldr	r3, [r2, #12]
 8002904:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002908:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800290a:	6923      	ldr	r3, [r4, #16]
 800290c:	6962      	ldr	r2, [r4, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	69a1      	ldr	r1, [r4, #24]
 8002912:	6822      	ldr	r2, [r4, #0]
 8002914:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002918:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800291a:	69e3      	ldr	r3, [r4, #28]
 800291c:	6a21      	ldr	r1, [r4, #32]
 800291e:	6822      	ldr	r2, [r4, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	6813      	ldr	r3, [r2, #0]
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292e:	2000      	movs	r0, #0
 8002930:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002932:	2320      	movs	r3, #32
 8002934:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800293e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002940:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002944:	f7fe f952 	bl	8000bec <HAL_I2C_MspInit>
 8002948:	e7b6      	b.n	80028b8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800294a:	68a3      	ldr	r3, [r4, #8]
 800294c:	6822      	ldr	r2, [r4, #0]
 800294e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002952:	6093      	str	r3, [r2, #8]
 8002954:	e7ca      	b.n	80028ec <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e7c8      	b.n	80028f2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002960:	2001      	movs	r0, #1
}
 8002962:	4770      	bx	lr

08002964 <HAL_I2C_Master_Transmit>:
{
 8002964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002968:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800296a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 800296e:	b2ed      	uxtb	r5, r5
 8002970:	2d20      	cmp	r5, #32
 8002972:	f040 80a4 	bne.w	8002abe <HAL_I2C_Master_Transmit+0x15a>
    __HAL_LOCK(hi2c);
 8002976:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800297a:	2c01      	cmp	r4, #1
 800297c:	f000 80a4 	beq.w	8002ac8 <HAL_I2C_Master_Transmit+0x164>
 8002980:	4698      	mov	r8, r3
 8002982:	4617      	mov	r7, r2
 8002984:	460e      	mov	r6, r1
 8002986:	4604      	mov	r4, r0
 8002988:	f04f 0901 	mov.w	r9, #1
 800298c:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002990:	f7fe feca 	bl	8001728 <HAL_GetTick>
 8002994:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002996:	9000      	str	r0, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	464a      	mov	r2, r9
 800299c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7ff fee4 	bl	800276e <I2C_WaitOnFlagUntilTimeout>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	f040 8090 	bne.w	8002acc <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ac:	2321      	movs	r3, #33	; 0x21
 80029ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029b2:	2310      	movs	r3, #16
 80029b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80029bc:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80029be:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029c2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2bff      	cmp	r3, #255	; 0xff
 80029ca:	d90a      	bls.n	80029e2 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029cc:	22ff      	movs	r2, #255	; 0xff
 80029ce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <HAL_I2C_Master_Transmit+0x178>)
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d8:	4631      	mov	r1, r6
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff fd9d 	bl	800251a <I2C_TransferConfig>
 80029e0:	e018      	b.n	8002a14 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 80029e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029e4:	b292      	uxth	r2, r2
 80029e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80029e8:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_I2C_Master_Transmit+0x178>)
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4631      	mov	r1, r6
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff fd90 	bl	800251a <I2C_TransferConfig>
 80029fa:	e00b      	b.n	8002a14 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 80029fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029fe:	b292      	uxth	r2, r2
 8002a00:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4631      	mov	r1, r6
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7ff fd83 	bl	800251a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d033      	beq.n	8002a84 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1c:	462a      	mov	r2, r5
 8002a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff fe79 	bl	8002718 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d152      	bne.n	8002ad0 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a34:	3301      	adds	r3, #1
 8002a36:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d0e1      	beq.n	8002a14 <HAL_I2C_Master_Transmit+0xb0>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1df      	bne.n	8002a14 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a54:	9500      	str	r5, [sp, #0]
 8002a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7ff fe86 	bl	800276e <I2C_WaitOnFlagUntilTimeout>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d136      	bne.n	8002ad4 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2bff      	cmp	r3, #255	; 0xff
 8002a6c:	d9c6      	bls.n	80029fc <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6e:	22ff      	movs	r2, #255	; 0xff
 8002a70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a7a:	4631      	mov	r1, r6
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f7ff fd4c 	bl	800251a <I2C_TransferConfig>
 8002a82:	e7c7      	b.n	8002a14 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a84:	462a      	mov	r2, r5
 8002a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7ff fe99 	bl	80027c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	bb10      	cbnz	r0, 8002ad8 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	2120      	movs	r1, #32
 8002a96:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002a98:	6820      	ldr	r0, [r4, #0]
 8002a9a:	6842      	ldr	r2, [r0, #4]
 8002a9c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002aa0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002aa4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002ab8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002abc:	e000      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x15c>
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	b003      	add	sp, #12
 8002ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e7f9      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e7f7      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x15c>
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e7f5      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x15c>
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e7f3      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x15c>
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e7f1      	b.n	8002ac0 <HAL_I2C_Master_Transmit+0x15c>
 8002adc:	80002000 	.word	0x80002000

08002ae0 <HAL_I2C_Master_Receive>:
{
 8002ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ae4:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002aea:	b2ed      	uxtb	r5, r5
 8002aec:	2d20      	cmp	r5, #32
 8002aee:	f040 80a4 	bne.w	8002c3a <HAL_I2C_Master_Receive+0x15a>
    __HAL_LOCK(hi2c);
 8002af2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002af6:	2c01      	cmp	r4, #1
 8002af8:	f000 80a4 	beq.w	8002c44 <HAL_I2C_Master_Receive+0x164>
 8002afc:	4698      	mov	r8, r3
 8002afe:	4617      	mov	r7, r2
 8002b00:	460e      	mov	r6, r1
 8002b02:	4604      	mov	r4, r0
 8002b04:	f04f 0901 	mov.w	r9, #1
 8002b08:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002b0c:	f7fe fe0c 	bl	8001728 <HAL_GetTick>
 8002b10:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b12:	9000      	str	r0, [sp, #0]
 8002b14:	2319      	movs	r3, #25
 8002b16:	464a      	mov	r2, r9
 8002b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7ff fe26 	bl	800276e <I2C_WaitOnFlagUntilTimeout>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	f040 8090 	bne.w	8002c48 <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b28:	2322      	movs	r3, #34	; 0x22
 8002b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b2e:	2310      	movs	r3, #16
 8002b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002b38:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b3a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b3e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2bff      	cmp	r3, #255	; 0xff
 8002b46:	d90a      	bls.n	8002b5e <HAL_I2C_Master_Receive+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_I2C_Master_Receive+0x178>)
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b54:	4631      	mov	r1, r6
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fcdf 	bl	800251a <I2C_TransferConfig>
 8002b5c:	e018      	b.n	8002b90 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 8002b5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b60:	b292      	uxth	r2, r2
 8002b62:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b64:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_I2C_Master_Receive+0x178>)
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	4631      	mov	r1, r6
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff fcd2 	bl	800251a <I2C_TransferConfig>
 8002b76:	e00b      	b.n	8002b90 <HAL_I2C_Master_Receive+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8002b78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b7a:	b292      	uxth	r2, r2
 8002b7c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	4631      	mov	r1, r6
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7ff fcc5 	bl	800251a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d033      	beq.n	8002c00 <HAL_I2C_Master_Receive+0x120>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b98:	462a      	mov	r2, r5
 8002b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff fe37 	bl	8002810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d152      	bne.n	8002c4c <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002bb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002bbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	2a00      	cmp	r2, #0
 8002bca:	d0e1      	beq.n	8002b90 <HAL_I2C_Master_Receive+0xb0>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1df      	bne.n	8002b90 <HAL_I2C_Master_Receive+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bd0:	9500      	str	r5, [sp, #0]
 8002bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7ff fdc8 	bl	800276e <I2C_WaitOnFlagUntilTimeout>
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d136      	bne.n	8002c50 <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2bff      	cmp	r3, #255	; 0xff
 8002be8:	d9c6      	bls.n	8002b78 <HAL_I2C_Master_Receive+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bea:	22ff      	movs	r2, #255	; 0xff
 8002bec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf6:	4631      	mov	r1, r6
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7ff fc8e 	bl	800251a <I2C_TransferConfig>
 8002bfe:	e7c7      	b.n	8002b90 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c00:	462a      	mov	r2, r5
 8002c02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fddb 	bl	80027c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	bb10      	cbnz	r0, 8002c54 <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0e:	6822      	ldr	r2, [r4, #0]
 8002c10:	2120      	movs	r1, #32
 8002c12:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	6842      	ldr	r2, [r0, #4]
 8002c18:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002c1c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002c20:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002c34:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002c38:	e000      	b.n	8002c3c <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	b003      	add	sp, #12
 8002c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8002c44:	2302      	movs	r3, #2
 8002c46:	e7f9      	b.n	8002c3c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e7f7      	b.n	8002c3c <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e7f5      	b.n	8002c3c <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e7f3      	b.n	8002c3c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e7f1      	b.n	8002c3c <HAL_I2C_Master_Receive+0x15c>
 8002c58:	80002400 	.word	0x80002400

08002c5c <HAL_I2C_Slave_Receive>:
{
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c60:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c62:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8002c66:	b2ed      	uxtb	r5, r5
 8002c68:	2d20      	cmp	r5, #32
 8002c6a:	f040 80a3 	bne.w	8002db4 <HAL_I2C_Slave_Receive+0x158>
    if ((pData == NULL) || (Size == 0U))
 8002c6e:	b369      	cbz	r1, 8002ccc <HAL_I2C_Slave_Receive+0x70>
 8002c70:	b362      	cbz	r2, 8002ccc <HAL_I2C_Slave_Receive+0x70>
    __HAL_LOCK(hi2c);
 8002c72:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002c76:	2c01      	cmp	r4, #1
 8002c78:	f000 80a1 	beq.w	8002dbe <HAL_I2C_Slave_Receive+0x162>
 8002c7c:	461f      	mov	r7, r3
 8002c7e:	4616      	mov	r6, r2
 8002c80:	460d      	mov	r5, r1
 8002c82:	4604      	mov	r4, r0
 8002c84:	2301      	movs	r3, #1
 8002c86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002c8a:	f7fe fd4d 	bl	8001728 <HAL_GetTick>
 8002c8e:	4680      	mov	r8, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c90:	2322      	movs	r3, #34	; 0x22
 8002c92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002c96:	2320      	movs	r3, #32
 8002c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002ca0:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ca2:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ca4:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002ca6:	6821      	ldr	r1, [r4, #0]
 8002ca8:	684b      	ldr	r3, [r1, #4]
 8002caa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cae:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002cb0:	9000      	str	r0, [sp, #0]
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	2108      	movs	r1, #8
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff fd59 	bl	800276e <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	b158      	cbz	r0, 8002cd6 <HAL_I2C_Slave_Receive+0x7a>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	6853      	ldr	r3, [r2, #4]
 8002cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc6:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e074      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd0:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06f      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002cdc:	f8cd 8000 	str.w	r8, [sp]
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff fd40 	bl	800276e <I2C_WaitOnFlagUntilTimeout>
 8002cee:	b188      	cbz	r0, 8002d14 <HAL_I2C_Slave_Receive+0xb8>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	6853      	ldr	r3, [r2, #4]
 8002cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf8:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e05b      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d04:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d08:	3301      	adds	r3, #1
 8002d0a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002d14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	b1e3      	cbz	r3, 8002d54 <HAL_I2C_Slave_Receive+0xf8>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	4642      	mov	r2, r8
 8002d1c:	4639      	mov	r1, r7
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff fd76 	bl	8002810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d0ea      	beq.n	8002cfe <HAL_I2C_Slave_Receive+0xa2>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	6853      	ldr	r3, [r2, #4]
 8002d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d30:	6053      	str	r3, [r2, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	f012 0f04 	tst.w	r2, #4
 8002d3a:	d042      	beq.n	8002dc2 <HAL_I2C_Slave_Receive+0x166>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d40:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002d48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	8563      	strh	r3, [r4, #42]	; 0x2a
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e030      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d54:	4642      	mov	r2, r8
 8002d56:	4639      	mov	r1, r7
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fd31 	bl	80027c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d5e:	b130      	cbz	r0, 8002d6e <HAL_I2C_Slave_Receive+0x112>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d60:	6822      	ldr	r2, [r4, #0]
 8002d62:	6853      	ldr	r3, [r2, #4]
 8002d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d68:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e023      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	2220      	movs	r2, #32
 8002d72:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002d74:	f8cd 8000 	str.w	r8, [sp]
 8002d78:	463b      	mov	r3, r7
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff fcf4 	bl	800276e <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	b968      	cbnz	r0, 8002da6 <HAL_I2C_Slave_Receive+0x14a>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d8a:	6821      	ldr	r1, [r4, #0]
 8002d8c:	684a      	ldr	r2, [r1, #4]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d92:	604a      	str	r2, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	2220      	movs	r2, #32
 8002d96:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002da0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002da4:	e007      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	6853      	ldr	r3, [r2, #4]
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dae:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	b002      	add	sp, #8
 8002dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e7f9      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e7f7      	b.n	8002db6 <HAL_I2C_Slave_Receive+0x15a>
	...

08002dc8 <HAL_I2C_Slave_Transmit_IT>:
{
 8002dc8:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d122      	bne.n	8002e1a <HAL_I2C_Slave_Transmit_IT+0x52>
    __HAL_LOCK(hi2c);
 8002dd4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d020      	beq.n	8002e1e <HAL_I2C_Slave_Transmit_IT+0x56>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002de2:	2321      	movs	r3, #33	; 0x21
 8002de4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002de8:	2320      	movs	r3, #32
 8002dea:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dee:	2400      	movs	r4, #0
 8002df0:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002df2:	6805      	ldr	r5, [r0, #0]
 8002df4:	686b      	ldr	r3, [r5, #4]
 8002df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dfa:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8002dfc:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dfe:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e00:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002e02:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_I2C_Slave_Transmit_IT+0x5c>)
 8002e06:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_I2C_Slave_Transmit_IT+0x60>)
 8002e0a:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002e0c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002e10:	2105      	movs	r1, #5
 8002e12:	f7ff fb9d 	bl	8002550 <I2C_Enable_IRQ>
    return HAL_OK;
 8002e16:	4620      	mov	r0, r4
 8002e18:	e000      	b.n	8002e1c <HAL_I2C_Slave_Transmit_IT+0x54>
    return HAL_BUSY;
 8002e1a:	2002      	movs	r0, #2
}
 8002e1c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8002e1e:	2002      	movs	r0, #2
 8002e20:	e7fc      	b.n	8002e1c <HAL_I2C_Slave_Transmit_IT+0x54>
 8002e22:	bf00      	nop
 8002e24:	ffff0000 	.word	0xffff0000
 8002e28:	08003211 	.word	0x08003211

08002e2c <HAL_I2C_EV_IRQHandler>:
{
 8002e2c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e2e:	6803      	ldr	r3, [r0, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e32:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8002e34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e36:	b103      	cbz	r3, 8002e3a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e38:	4798      	blx	r3
}
 8002e3a:	bd08      	pop	{r3, pc}

08002e3c <HAL_I2C_MasterTxCpltCallback>:
}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_I2C_MasterRxCpltCallback>:
}
 8002e3e:	4770      	bx	lr

08002e40 <I2C_ITMasterSeqCplt>:
{
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b21      	cmp	r3, #33	; 0x21
 8002e52:	d00f      	beq.n	8002e74 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e54:	2320      	movs	r3, #32
 8002e56:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e5a:	2312      	movs	r3, #18
 8002e5c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e5e:	2500      	movs	r5, #0
 8002e60:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e62:	2102      	movs	r1, #2
 8002e64:	f7ff fbb4 	bl	80025d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e68:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff ffe6 	bl	8002e3e <HAL_I2C_MasterRxCpltCallback>
}
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e74:	2320      	movs	r3, #32
 8002e76:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e7a:	2311      	movs	r3, #17
 8002e7c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e7e:	2500      	movs	r5, #0
 8002e80:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e82:	2101      	movs	r1, #1
 8002e84:	f7ff fba4 	bl	80025d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e88:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff ffd5 	bl	8002e3c <HAL_I2C_MasterTxCpltCallback>
 8002e92:	e7ee      	b.n	8002e72 <I2C_ITMasterSeqCplt+0x32>

08002e94 <I2C_ITSlaveSeqCplt>:
{
 8002e94:	b510      	push	{r4, lr}
 8002e96:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b29      	cmp	r3, #41	; 0x29
 8002ea6:	d005      	beq.n	8002eb4 <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ea8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb0:	d00f      	beq.n	8002ed2 <I2C_ITSlaveSeqCplt+0x3e>
}
 8002eb2:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002eb4:	2328      	movs	r3, #40	; 0x28
 8002eb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eba:	2321      	movs	r3, #33	; 0x21
 8002ebc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	f7ff fb86 	bl	80025d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7fd ff9c 	bl	8000e08 <HAL_I2C_SlaveTxCpltCallback>
 8002ed0:	e7ef      	b.n	8002eb2 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ed2:	2328      	movs	r3, #40	; 0x28
 8002ed4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ed8:	2322      	movs	r3, #34	; 0x22
 8002eda:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002edc:	2102      	movs	r1, #2
 8002ede:	f7ff fb77 	bl	80025d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7fd ff97 	bl	8000e1c <HAL_I2C_SlaveRxCpltCallback>
}
 8002eee:	e7e0      	b.n	8002eb2 <I2C_ITSlaveSeqCplt+0x1e>

08002ef0 <HAL_I2C_AddrCallback>:
}
 8002ef0:	4770      	bx	lr

08002ef2 <I2C_ITAddrCplt>:
{
 8002ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ef4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002efc:	2b28      	cmp	r3, #40	; 0x28
 8002efe:	d006      	beq.n	8002f0e <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f00:	6803      	ldr	r3, [r0, #0]
 8002f02:	2208      	movs	r2, #8
 8002f04:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f06:	2300      	movs	r3, #0
 8002f08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8002f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0e:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8002f10:	6803      	ldr	r3, [r0, #0]
 8002f12:	699e      	ldr	r6, [r3, #24]
 8002f14:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	0c12      	lsrs	r2, r2, #16
 8002f1c:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f26:	68df      	ldr	r7, [r3, #12]
 8002f28:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f2c:	68c1      	ldr	r1, [r0, #12]
 8002f2e:	2902      	cmp	r1, #2
 8002f30:	d121      	bne.n	8002f76 <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002f32:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002f36:	f015 0f06 	tst.w	r5, #6
 8002f3a:	d110      	bne.n	8002f5e <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8002f3c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f3e:	3101      	adds	r1, #1
 8002f40:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f42:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f44:	2902      	cmp	r1, #2
 8002f46:	d1e1      	bne.n	8002f0c <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8002f48:	2100      	movs	r1, #0
 8002f4a:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f4c:	2008      	movs	r0, #8
 8002f4e:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002f50:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f54:	4631      	mov	r1, r6
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7ff ffca 	bl	8002ef0 <HAL_I2C_AddrCallback>
 8002f5c:	e7d6      	b.n	8002f0c <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f5e:	2104      	movs	r1, #4
 8002f60:	f7ff fb36 	bl	80025d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f64:	2300      	movs	r3, #0
 8002f66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f6a:	463a      	mov	r2, r7
 8002f6c:	4631      	mov	r1, r6
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff ffbe 	bl	8002ef0 <HAL_I2C_AddrCallback>
 8002f74:	e7ca      	b.n	8002f0c <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f76:	2104      	movs	r1, #4
 8002f78:	f7ff fb2a 	bl	80025d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f82:	462a      	mov	r2, r5
 8002f84:	4631      	mov	r1, r6
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff ffb2 	bl	8002ef0 <HAL_I2C_AddrCallback>
 8002f8c:	e7be      	b.n	8002f0c <I2C_ITAddrCplt+0x1a>

08002f8e <HAL_I2C_ListenCpltCallback>:
}
 8002f8e:	4770      	bx	lr

08002f90 <I2C_ITListenCplt>:
{
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <I2C_ITListenCplt+0x60>)
 8002f96:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002fa6:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002fa8:	f011 0f04 	tst.w	r1, #4
 8002fac:	d012      	beq.n	8002fd4 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fae:	6803      	ldr	r3, [r0, #0]
 8002fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fb8:	3301      	adds	r3, #1
 8002fba:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002fbc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002fbe:	b14b      	cbz	r3, 8002fd4 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002fc4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fce:	f043 0304 	orr.w	r3, r3, #4
 8002fd2:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fd4:	2107      	movs	r1, #7
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff fafa 	bl	80025d0 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	2210      	movs	r2, #16
 8002fe0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f7ff ffd0 	bl	8002f8e <HAL_I2C_ListenCpltCallback>
}
 8002fee:	bd10      	pop	{r4, pc}
 8002ff0:	ffff0000 	.word	0xffff0000

08002ff4 <HAL_I2C_MemTxCpltCallback>:
}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_I2C_MemRxCpltCallback>:
}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2C_ErrorCallback>:
}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_I2C_AbortCpltCallback>:
}
 8002ffa:	4770      	bx	lr

08002ffc <I2C_ITError>:
{
 8002ffc:	b510      	push	{r4, lr}
 8002ffe:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003000:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003004:	2200      	movs	r2, #0
 8003006:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800300a:	4836      	ldr	r0, [pc, #216]	; (80030e4 <I2C_ITError+0xe8>)
 800300c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800300e:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003010:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003012:	4311      	orrs	r1, r2
 8003014:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003016:	3b28      	subs	r3, #40	; 0x28
 8003018:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800301a:	2b02      	cmp	r3, #2
 800301c:	d822      	bhi.n	8003064 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800301e:	2103      	movs	r1, #3
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff fad5 	bl	80025d0 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003026:	2328      	movs	r3, #40	; 0x28
 8003028:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800302c:	2300      	movs	r3, #0
 800302e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <I2C_ITError+0xec>)
 8003032:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800303c:	d022      	beq.n	8003084 <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003044:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8003046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003048:	b15b      	cbz	r3, 8003062 <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800304a:	4a28      	ldr	r2, [pc, #160]	; (80030ec <I2C_ITError+0xf0>)
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003054:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003056:	f7ff f8ff 	bl	8002258 <HAL_DMA_Abort_IT>
 800305a:	b110      	cbz	r0, 8003062 <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800305c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800305e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003060:	4798      	blx	r3
}
 8003062:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003064:	2107      	movs	r1, #7
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff fab2 	bl	80025d0 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800306c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b60      	cmp	r3, #96	; 0x60
 8003074:	d002      	beq.n	800307c <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 8003076:	2320      	movs	r3, #32
 8003078:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	2300      	movs	r3, #0
 800307e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003080:	6363      	str	r3, [r4, #52]	; 0x34
 8003082:	e7d7      	b.n	8003034 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800308a:	d014      	beq.n	80030b6 <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003092:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0e3      	beq.n	8003062 <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800309a:	4a14      	ldr	r2, [pc, #80]	; (80030ec <I2C_ITError+0xf0>)
 800309c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80030a6:	f7ff f8d7 	bl	8002258 <HAL_DMA_Abort_IT>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d0d9      	beq.n	8003062 <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80030b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030b2:	4798      	blx	r3
 80030b4:	e7d5      	b.n	8003062 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030b6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b60      	cmp	r3, #96	; 0x60
 80030be:	d006      	beq.n	80030ce <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 80030c0:	2300      	movs	r3, #0
 80030c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff ff96 	bl	8002ff8 <HAL_I2C_ErrorCallback>
}
 80030cc:	e7c9      	b.n	8003062 <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	2320      	movs	r3, #32
 80030d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030d4:	2300      	movs	r3, #0
 80030d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff ff8d 	bl	8002ffa <HAL_I2C_AbortCpltCallback>
 80030e0:	e7bf      	b.n	8003062 <I2C_ITError+0x66>
 80030e2:	bf00      	nop
 80030e4:	ffff0000 	.word	0xffff0000
 80030e8:	08003211 	.word	0x08003211
 80030ec:	0800367b 	.word	0x0800367b

080030f0 <I2C_ITSlaveCplt>:
{
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	4604      	mov	r4, r0
 80030f4:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030f6:	6803      	ldr	r3, [r0, #0]
 80030f8:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	2220      	movs	r2, #32
 80030fc:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80030fe:	2107      	movs	r1, #7
 8003100:	f7ff fa66 	bl	80025d0 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	6853      	ldr	r3, [r2, #4]
 8003108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310c:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	6853      	ldr	r3, [r2, #4]
 8003112:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003116:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800311a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8003124:	4620      	mov	r0, r4
 8003126:	f7ff f9e7 	bl	80024f8 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800312a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800312e:	d03a      	beq.n	80031a6 <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 8003130:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003132:	b11b      	cbz	r3, 800313c <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	b29b      	uxth	r3, r3
 800313a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800313c:	f015 0f04 	tst.w	r5, #4
 8003140:	d010      	beq.n	8003164 <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003142:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800314a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800314e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003150:	3301      	adds	r3, #1
 8003152:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003154:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003156:	b12b      	cbz	r3, 8003164 <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 8003158:	3b01      	subs	r3, #1
 800315a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800315c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800315e:	3b01      	subs	r3, #1
 8003160:	b29b      	uxth	r3, r3
 8003162:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8003164:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	b11b      	cbz	r3, 8003172 <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800316a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8003172:	2300      	movs	r3, #0
 8003174:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800317a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800317c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800317e:	b9eb      	cbnz	r3, 80031bc <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003182:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003186:	d127      	bne.n	80031d8 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003188:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b22      	cmp	r3, #34	; 0x22
 8003190:	d031      	beq.n	80031f6 <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	2320      	movs	r3, #32
 8003194:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800319e:	4620      	mov	r0, r4
 80031a0:	f7fd fe32 	bl	8000e08 <HAL_I2C_SlaveTxCpltCallback>
}
 80031a4:	e026      	b.n	80031f4 <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031a6:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80031aa:	d0c7      	beq.n	800313c <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 80031ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0c4      	beq.n	800313c <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80031ba:	e7bf      	b.n	800313c <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80031be:	4620      	mov	r0, r4
 80031c0:	f7ff ff1c 	bl	8002ffc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031c4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b28      	cmp	r3, #40	; 0x28
 80031cc:	d112      	bne.n	80031f4 <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031ce:	4629      	mov	r1, r5
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff fedd 	bl	8002f90 <I2C_ITListenCplt>
 80031d6:	e00d      	b.n	80031f4 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 80031d8:	4620      	mov	r0, r4
 80031da:	f7ff fe5b 	bl	8002e94 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <I2C_ITSlaveCplt+0x11c>)
 80031e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	2320      	movs	r3, #32
 80031e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031e8:	2300      	movs	r3, #0
 80031ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031ee:	4620      	mov	r0, r4
 80031f0:	f7ff fecd 	bl	8002f8e <HAL_I2C_ListenCpltCallback>
}
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	2320      	movs	r3, #32
 80031f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031fc:	2300      	movs	r3, #0
 80031fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003202:	4620      	mov	r0, r4
 8003204:	f7fd fe0a 	bl	8000e1c <HAL_I2C_SlaveRxCpltCallback>
 8003208:	e7f4      	b.n	80031f4 <I2C_ITSlaveCplt+0x104>
 800320a:	bf00      	nop
 800320c:	ffff0000 	.word	0xffff0000

08003210 <I2C_Slave_ISR_IT>:
{
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8003212:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003214:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003218:	2b01      	cmp	r3, #1
 800321a:	f000 809c 	beq.w	8003356 <I2C_Slave_ISR_IT+0x146>
 800321e:	4616      	mov	r6, r2
 8003220:	460d      	mov	r5, r1
 8003222:	4604      	mov	r4, r0
 8003224:	2301      	movs	r3, #1
 8003226:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800322a:	f011 0f20 	tst.w	r1, #32
 800322e:	d002      	beq.n	8003236 <I2C_Slave_ISR_IT+0x26>
 8003230:	f012 0f20 	tst.w	r2, #32
 8003234:	d119      	bne.n	800326a <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003236:	f015 0f10 	tst.w	r5, #16
 800323a:	d03e      	beq.n	80032ba <I2C_Slave_ISR_IT+0xaa>
 800323c:	f016 0f10 	tst.w	r6, #16
 8003240:	d03b      	beq.n	80032ba <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8003242:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	bb43      	cbnz	r3, 800329a <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003248:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b28      	cmp	r3, #40	; 0x28
 8003250:	d00e      	beq.n	8003270 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003252:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b29      	cmp	r3, #41	; 0x29
 800325a:	d011      	beq.n	8003280 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	2210      	movs	r2, #16
 8003260:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003262:	2000      	movs	r0, #0
 8003264:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8003268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800326a:	f7ff ff41 	bl	80030f0 <I2C_ITSlaveCplt>
 800326e:	e7e2      	b.n	8003236 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003270:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8003274:	d1ed      	bne.n	8003252 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003276:	4629      	mov	r1, r5
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff fe89 	bl	8002f90 <I2C_ITListenCplt>
 800327e:	e7f0      	b.n	8003262 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003280:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8003284:	d0ea      	beq.n	800325c <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	2210      	movs	r2, #16
 800328a:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff f933 	bl	80024f8 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff fdfe 	bl	8002e94 <I2C_ITSlaveSeqCplt>
 8003298:	e7e3      	b.n	8003262 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032a8:	b117      	cbz	r7, 80032b0 <I2C_Slave_ISR_IT+0xa0>
 80032aa:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80032ae:	d1d8      	bne.n	8003262 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff fea2 	bl	8002ffc <I2C_ITError>
 80032b8:	e7d3      	b.n	8003262 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80032ba:	f015 0f04 	tst.w	r5, #4
 80032be:	d01e      	beq.n	80032fe <I2C_Slave_ISR_IT+0xee>
 80032c0:	f016 0f04 	tst.w	r6, #4
 80032c4:	d01b      	beq.n	80032fe <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 80032c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	b16b      	cbz	r3, 80032e8 <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032d2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80032d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032d6:	3301      	adds	r3, #1
 80032d8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80032da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80032e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80032e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1b8      	bne.n	8003262 <I2C_Slave_ISR_IT+0x52>
 80032f0:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80032f4:	d0b5      	beq.n	8003262 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff fdcc 	bl	8002e94 <I2C_ITSlaveSeqCplt>
 80032fc:	e7b1      	b.n	8003262 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032fe:	f015 0f08 	tst.w	r5, #8
 8003302:	d002      	beq.n	800330a <I2C_Slave_ISR_IT+0xfa>
 8003304:	f016 0f08 	tst.w	r6, #8
 8003308:	d117      	bne.n	800333a <I2C_Slave_ISR_IT+0x12a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800330a:	f015 0f02 	tst.w	r5, #2
 800330e:	d0a8      	beq.n	8003262 <I2C_Slave_ISR_IT+0x52>
 8003310:	f016 0f02 	tst.w	r6, #2
 8003314:	d0a5      	beq.n	8003262 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8003316:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	b19b      	cbz	r3, 8003344 <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800331c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003326:	3301      	adds	r3, #1
 8003328:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800332a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800332c:	3b01      	subs	r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003332:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	8523      	strh	r3, [r4, #40]	; 0x28
 8003338:	e793      	b.n	8003262 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800333a:	4629      	mov	r1, r5
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff fdd8 	bl	8002ef2 <I2C_ITAddrCplt>
 8003342:	e78e      	b.n	8003262 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003344:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8003348:	d001      	beq.n	800334e <I2C_Slave_ISR_IT+0x13e>
 800334a:	2f00      	cmp	r7, #0
 800334c:	d189      	bne.n	8003262 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 800334e:	4620      	mov	r0, r4
 8003350:	f7ff fda0 	bl	8002e94 <I2C_ITSlaveSeqCplt>
 8003354:	e785      	b.n	8003262 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8003356:	2002      	movs	r0, #2
 8003358:	e786      	b.n	8003268 <I2C_Slave_ISR_IT+0x58>

0800335a <I2C_ITMasterCplt>:
{
 800335a:	b510      	push	{r4, lr}
 800335c:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335e:	6803      	ldr	r3, [r0, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8003364:	6802      	ldr	r2, [r0, #0]
 8003366:	6853      	ldr	r3, [r2, #4]
 8003368:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800336c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003370:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	2300      	movs	r3, #0
 800337c:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800337e:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003380:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003384:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003386:	f011 0f10 	tst.w	r1, #16
 800338a:	d006      	beq.n	800339a <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338c:	6803      	ldr	r3, [r0, #0]
 800338e:	2210      	movs	r2, #16
 8003390:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003392:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff f8ac 	bl	80024f8 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80033a0:	2103      	movs	r1, #3
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff f914 	bl	80025d0 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 80033a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80033aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b60      	cmp	r3, #96	; 0x60
 80033b2:	d01b      	beq.n	80033ec <I2C_ITMasterCplt+0x92>
 80033b4:	b9d2      	cbnz	r2, 80033ec <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033b6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b21      	cmp	r3, #33	; 0x21
 80033be:	d01a      	beq.n	80033f6 <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b22      	cmp	r3, #34	; 0x22
 80033c8:	d114      	bne.n	80033f4 <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	2320      	movs	r3, #32
 80033cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033d0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d027      	beq.n	800342a <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033da:	2300      	movs	r3, #0
 80033dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7ff fd2a 	bl	8002e3e <HAL_I2C_MasterRxCpltCallback>
}
 80033ea:	e003      	b.n	80033f4 <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff fe04 	bl	8002ffc <I2C_ITError>
}
 80033f4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	2320      	movs	r3, #32
 80033f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033fc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d008      	beq.n	8003418 <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	2300      	movs	r3, #0
 8003408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800340c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003410:	4620      	mov	r0, r4
 8003412:	f7ff fd13 	bl	8002e3c <HAL_I2C_MasterTxCpltCallback>
 8003416:	e7ed      	b.n	80033f4 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	2300      	movs	r3, #0
 800341a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800341e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003422:	4620      	mov	r0, r4
 8003424:	f7ff fde6 	bl	8002ff4 <HAL_I2C_MemTxCpltCallback>
 8003428:	e7e4      	b.n	80033f4 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	2300      	movs	r3, #0
 800342c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003430:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff fdde 	bl	8002ff6 <HAL_I2C_MemRxCpltCallback>
 800343a:	e7db      	b.n	80033f4 <I2C_ITMasterCplt+0x9a>

0800343c <I2C_Slave_ISR_DMA>:
{
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800343e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8003440:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003444:	2b01      	cmp	r3, #1
 8003446:	d076      	beq.n	8003536 <I2C_Slave_ISR_DMA+0xfa>
 8003448:	4616      	mov	r6, r2
 800344a:	460d      	mov	r5, r1
 800344c:	4604      	mov	r4, r0
 800344e:	2301      	movs	r3, #1
 8003450:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003454:	f011 0f20 	tst.w	r1, #32
 8003458:	d002      	beq.n	8003460 <I2C_Slave_ISR_DMA+0x24>
 800345a:	f012 0f20 	tst.w	r2, #32
 800345e:	d115      	bne.n	800348c <I2C_Slave_ISR_DMA+0x50>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003460:	f015 0f10 	tst.w	r5, #16
 8003464:	d058      	beq.n	8003518 <I2C_Slave_ISR_DMA+0xdc>
 8003466:	f016 0f10 	tst.w	r6, #16
 800346a:	d055      	beq.n	8003518 <I2C_Slave_ISR_DMA+0xdc>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800346c:	f3c6 3380 	ubfx	r3, r6, #14, #1
 8003470:	b913      	cbnz	r3, 8003478 <I2C_Slave_ISR_DMA+0x3c>
 8003472:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8003476:	d04b      	beq.n	8003510 <I2C_Slave_ISR_DMA+0xd4>
      if (hi2c->hdmarx != NULL)
 8003478:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800347a:	b152      	cbz	r2, 8003492 <I2C_Slave_ISR_DMA+0x56>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800347c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8003480:	d009      	beq.n	8003496 <I2C_Slave_ISR_DMA+0x5a>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	6852      	ldr	r2, [r2, #4]
 8003486:	b1f2      	cbz	r2, 80034c6 <I2C_Slave_ISR_DMA+0x8a>
  uint32_t treatdmanack = 0U;
 8003488:	2100      	movs	r1, #0
 800348a:	e005      	b.n	8003498 <I2C_Slave_ISR_DMA+0x5c>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800348c:	f7ff fe30 	bl	80030f0 <I2C_ITSlaveCplt>
 8003490:	e7e6      	b.n	8003460 <I2C_Slave_ISR_DMA+0x24>
  uint32_t treatdmanack = 0U;
 8003492:	2100      	movs	r1, #0
 8003494:	e000      	b.n	8003498 <I2C_Slave_ISR_DMA+0x5c>
 8003496:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
 8003498:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800349a:	b11a      	cbz	r2, 80034a4 <I2C_Slave_ISR_DMA+0x68>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800349c:	b113      	cbz	r3, 80034a4 <I2C_Slave_ISR_DMA+0x68>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b193      	cbz	r3, 80034ca <I2C_Slave_ISR_DMA+0x8e>
      if (treatdmanack == 1U)
 80034a4:	b989      	cbnz	r1, 80034ca <I2C_Slave_ISR_DMA+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	2210      	movs	r2, #16
 80034aa:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034b4:	b117      	cbz	r7, 80034bc <I2C_Slave_ISR_DMA+0x80>
 80034b6:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80034ba:	d133      	bne.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80034be:	4620      	mov	r0, r4
 80034c0:	f7ff fd9c 	bl	8002ffc <I2C_ITError>
 80034c4:	e02e      	b.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
            treatdmanack = 1U;
 80034c6:	2101      	movs	r1, #1
 80034c8:	e7e6      	b.n	8003498 <I2C_Slave_ISR_DMA+0x5c>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80034ca:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b28      	cmp	r3, #40	; 0x28
 80034d2:	d008      	beq.n	80034e6 <I2C_Slave_ISR_DMA+0xaa>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034d4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b29      	cmp	r3, #41	; 0x29
 80034dc:	d00b      	beq.n	80034f6 <I2C_Slave_ISR_DMA+0xba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	2210      	movs	r2, #16
 80034e2:	61da      	str	r2, [r3, #28]
 80034e4:	e01e      	b.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80034e6:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80034ea:	d1f3      	bne.n	80034d4 <I2C_Slave_ISR_DMA+0x98>
          I2C_ITListenCplt(hi2c, ITFlags);
 80034ec:	4629      	mov	r1, r5
 80034ee:	4620      	mov	r0, r4
 80034f0:	f7ff fd4e 	bl	8002f90 <I2C_ITListenCplt>
 80034f4:	e016      	b.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034f6:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80034fa:	d0f0      	beq.n	80034de <I2C_Slave_ISR_DMA+0xa2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	2210      	movs	r2, #16
 8003500:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 8003502:	4620      	mov	r0, r4
 8003504:	f7fe fff8 	bl	80024f8 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8003508:	4620      	mov	r0, r4
 800350a:	f7ff fcc3 	bl	8002e94 <I2C_ITSlaveSeqCplt>
 800350e:	e009      	b.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	2210      	movs	r2, #16
 8003514:	61da      	str	r2, [r3, #28]
 8003516:	e005      	b.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003518:	f015 0f08 	tst.w	r5, #8
 800351c:	d002      	beq.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
 800351e:	f016 0f08 	tst.w	r6, #8
 8003522:	d103      	bne.n	800352c <I2C_Slave_ISR_DMA+0xf0>
  __HAL_UNLOCK(hi2c);
 8003524:	2000      	movs	r0, #0
 8003526:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800352a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 800352c:	4629      	mov	r1, r5
 800352e:	4620      	mov	r0, r4
 8003530:	f7ff fcdf 	bl	8002ef2 <I2C_ITAddrCplt>
 8003534:	e7f6      	b.n	8003524 <I2C_Slave_ISR_DMA+0xe8>
  __HAL_LOCK(hi2c);
 8003536:	2002      	movs	r0, #2
 8003538:	e7f7      	b.n	800352a <I2C_Slave_ISR_DMA+0xee>

0800353a <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 800353a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800353e:	2b01      	cmp	r3, #1
 8003540:	f000 8099 	beq.w	8003676 <I2C_Master_ISR_DMA+0x13c>
{
 8003544:	b510      	push	{r4, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 800354a:	2301      	movs	r3, #1
 800354c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003550:	f011 0f10 	tst.w	r1, #16
 8003554:	d002      	beq.n	800355c <I2C_Master_ISR_DMA+0x22>
 8003556:	f012 0f10 	tst.w	r2, #16
 800355a:	d131      	bne.n	80035c0 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800355c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003560:	d05f      	beq.n	8003622 <I2C_Master_ISR_DMA+0xe8>
 8003562:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003566:	d05c      	beq.n	8003622 <I2C_Master_ISR_DMA+0xe8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003570:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8003572:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d045      	beq.n	8003606 <I2C_Master_ISR_DMA+0xcc>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003582:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	2bff      	cmp	r3, #255	; 0xff
 8003588:	d92c      	bls.n	80035e4 <I2C_Master_ISR_DMA+0xaa>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800358a:	23ff      	movs	r3, #255	; 0xff
 800358c:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800358e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003592:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003596:	2000      	movs	r0, #0
 8003598:	9000      	str	r0, [sp, #0]
 800359a:	4620      	mov	r0, r4
 800359c:	f7fe ffbd 	bl	800251a <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80035a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b22      	cmp	r3, #34	; 0x22
 80035b2:	d022      	beq.n	80035fa <I2C_Master_ISR_DMA+0xc0>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00c      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c0:	6803      	ldr	r3, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80035ce:	2112      	movs	r1, #18
 80035d0:	f7fe ffbe 	bl	8002550 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7fe ff8f 	bl	80024f8 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80035da:	2000      	movs	r0, #0
 80035dc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80035e0:	b002      	add	sp, #8
 80035e2:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 80035e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035e6:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80035e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035ee:	d001      	beq.n	80035f4 <I2C_Master_ISR_DMA+0xba>
          xfermode = hi2c->XferOptions;
 80035f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035f2:	e7ce      	b.n	8003592 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 80035f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f8:	e7cb      	b.n	8003592 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	6813      	ldr	r3, [r2, #0]
 80035fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e7e9      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800360e:	d103      	bne.n	8003618 <I2C_Master_ISR_DMA+0xde>
        I2C_ITMasterSeqCplt(hi2c);
 8003610:	4620      	mov	r0, r4
 8003612:	f7ff fc15 	bl	8002e40 <I2C_ITMasterSeqCplt>
 8003616:	e7e0      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	4620      	mov	r0, r4
 800361c:	f7ff fcee 	bl	8002ffc <I2C_ITError>
 8003620:	e7db      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003622:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003626:	d01c      	beq.n	8003662 <I2C_Master_ISR_DMA+0x128>
 8003628:	f012 0f40 	tst.w	r2, #64	; 0x40
 800362c:	d019      	beq.n	8003662 <I2C_Master_ISR_DMA+0x128>
    if (hi2c->XferCount == 0U)
 800362e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	b98b      	cbnz	r3, 8003658 <I2C_Master_ISR_DMA+0x11e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800363c:	d1cd      	bne.n	80035da <I2C_Master_ISR_DMA+0xa0>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800363e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003640:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003644:	d104      	bne.n	8003650 <I2C_Master_ISR_DMA+0x116>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	e7c4      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
          I2C_ITMasterSeqCplt(hi2c);
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff fbf5 	bl	8002e40 <I2C_ITMasterSeqCplt>
 8003656:	e7c0      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003658:	2140      	movs	r1, #64	; 0x40
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff fcce 	bl	8002ffc <I2C_ITError>
 8003660:	e7bb      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003662:	f011 0f20 	tst.w	r1, #32
 8003666:	d0b8      	beq.n	80035da <I2C_Master_ISR_DMA+0xa0>
 8003668:	f012 0f20 	tst.w	r2, #32
 800366c:	d0b5      	beq.n	80035da <I2C_Master_ISR_DMA+0xa0>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800366e:	4620      	mov	r0, r4
 8003670:	f7ff fe73 	bl	800335a <I2C_ITMasterCplt>
 8003674:	e7b1      	b.n	80035da <I2C_Master_ISR_DMA+0xa0>
  __HAL_LOCK(hi2c);
 8003676:	2002      	movs	r0, #2
}
 8003678:	4770      	bx	lr

0800367a <I2C_DMAAbort>:
{
 800367a:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800367c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->hdmatx->XferAbortCallback = NULL;
 800367e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003680:	2300      	movs	r3, #0
 8003682:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003684:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003686:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003688:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b60      	cmp	r3, #96	; 0x60
 8003690:	d002      	beq.n	8003698 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8003692:	f7ff fcb1 	bl	8002ff8 <HAL_I2C_ErrorCallback>
}
 8003696:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003698:	2320      	movs	r3, #32
 800369a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 800369e:	f7ff fcac 	bl	8002ffa <HAL_I2C_AbortCpltCallback>
 80036a2:	e7f8      	b.n	8003696 <I2C_DMAAbort+0x1c>

080036a4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d124      	bne.n	80036f8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d022      	beq.n	80036fc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80036b6:	2301      	movs	r3, #1
 80036b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	2324      	movs	r3, #36	; 0x24
 80036be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c2:	6802      	ldr	r2, [r0, #0]
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036cc:	6802      	ldr	r2, [r0, #0]
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d4:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036d6:	6802      	ldr	r2, [r0, #0]
 80036d8:	6813      	ldr	r3, [r2, #0]
 80036da:	4319      	orrs	r1, r3
 80036dc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036de:	6802      	ldr	r2, [r0, #0]
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	2320      	movs	r3, #32
 80036ea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80036f4:	4618      	mov	r0, r3
 80036f6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2002      	movs	r0, #2
 80036fa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80036fc:	2002      	movs	r0, #2
  }
}
 80036fe:	4770      	bx	lr

08003700 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003700:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	d122      	bne.n	8003750 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800370e:	2b01      	cmp	r3, #1
 8003710:	d020      	beq.n	8003754 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8003712:	2301      	movs	r3, #1
 8003714:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003718:	2324      	movs	r3, #36	; 0x24
 800371a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800371e:	6802      	ldr	r2, [r0, #0]
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003728:	6802      	ldr	r2, [r0, #0]
 800372a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800372c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003730:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003734:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003736:	6802      	ldr	r2, [r0, #0]
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	2320      	movs	r3, #32
 8003742:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800374c:	4618      	mov	r0, r3
 800374e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003750:	2002      	movs	r0, #2
 8003752:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003754:	2002      	movs	r0, #2
  }
}
 8003756:	4770      	bx	lr

08003758 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003758:	2800      	cmp	r0, #0
 800375a:	f000 830d 	beq.w	8003d78 <HAL_RCC_OscConfig+0x620>
{
 800375e:	b570      	push	{r4, r5, r6, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003764:	6803      	ldr	r3, [r0, #0]
 8003766:	f013 0f01 	tst.w	r3, #1
 800376a:	d03b      	beq.n	80037e4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800376c:	4bb5      	ldr	r3, [pc, #724]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b04      	cmp	r3, #4
 8003776:	d01e      	beq.n	80037b6 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003778:	4bb2      	ldr	r3, [pc, #712]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003784:	6863      	ldr	r3, [r4, #4]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378a:	d068      	beq.n	800385e <HAL_RCC_OscConfig+0x106>
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 8092 	bne.w	80038b6 <HAL_RCC_OscConfig+0x15e>
 8003792:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003796:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e05d      	b.n	8003868 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037ac:	4ba5      	ldr	r3, [pc, #660]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037b4:	d0e6      	beq.n	8003784 <HAL_RCC_OscConfig+0x2c>
 80037b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ba:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037be:	4ba1      	ldr	r3, [pc, #644]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2201      	movs	r2, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	420b      	tst	r3, r1
 80037da:	d003      	beq.n	80037e4 <HAL_RCC_OscConfig+0x8c>
 80037dc:	6863      	ldr	r3, [r4, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 82cc 	beq.w	8003d7c <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f013 0f02 	tst.w	r3, #2
 80037ea:	f000 80c6 	beq.w	800397a <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037ee:	4b95      	ldr	r3, [pc, #596]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f013 0f0c 	tst.w	r3, #12
 80037f6:	f000 809c 	beq.w	8003932 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037fa:	4b92      	ldr	r3, [pc, #584]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	f000 808f 	beq.w	8003926 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003808:	6923      	ldr	r3, [r4, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80f3 	beq.w	80039f6 <HAL_RCC_OscConfig+0x29e>
 8003810:	2201      	movs	r2, #1
 8003812:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800381e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fd ff7f 	bl	8001728 <HAL_GetTick>
 800382a:	4605      	mov	r5, r0
 800382c:	2302      	movs	r3, #2
 800382e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	2302      	movs	r3, #2
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2201      	movs	r2, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	420b      	tst	r3, r1
 800384c:	f040 80c4 	bne.w	80039d8 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003850:	f7fd ff6a 	bl	8001728 <HAL_GetTick>
 8003854:	1b40      	subs	r0, r0, r5
 8003856:	2802      	cmp	r0, #2
 8003858:	d9e8      	bls.n	800382c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 800385a:	2003      	movs	r0, #3
 800385c:	e295      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385e:	4a79      	ldr	r2, [pc, #484]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003868:	4a76      	ldr	r2, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 800386a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800386c:	f023 030f 	bic.w	r3, r3, #15
 8003870:	68a1      	ldr	r1, [r4, #8]
 8003872:	430b      	orrs	r3, r1
 8003874:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d036      	beq.n	80038ea <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 800387c:	f7fd ff54 	bl	8001728 <HAL_GetTick>
 8003880:	4605      	mov	r5, r0
 8003882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003886:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	2201      	movs	r2, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	420b      	tst	r3, r1
 80038a6:	d19d      	bne.n	80037e4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fd ff3e 	bl	8001728 <HAL_GetTick>
 80038ac:	1b40      	subs	r0, r0, r5
 80038ae:	2864      	cmp	r0, #100	; 0x64
 80038b0:	d9e7      	bls.n	8003882 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 80038b2:	2003      	movs	r0, #3
 80038b4:	e269      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ba:	d009      	beq.n	80038d0 <HAL_RCC_OscConfig+0x178>
 80038bc:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e7cb      	b.n	8003868 <HAL_RCC_OscConfig+0x110>
 80038d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038d4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e7be      	b.n	8003868 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80038ea:	f7fd ff1d 	bl	8001728 <HAL_GetTick>
 80038ee:	4605      	mov	r5, r0
 80038f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f8:	4b52      	ldr	r3, [pc, #328]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	2201      	movs	r2, #1
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	420b      	tst	r3, r1
 8003914:	f43f af66 	beq.w	80037e4 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fd ff06 	bl	8001728 <HAL_GetTick>
 800391c:	1b40      	subs	r0, r0, r5
 800391e:	2864      	cmp	r0, #100	; 0x64
 8003920:	d9e6      	bls.n	80038f0 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8003922:	2003      	movs	r0, #3
 8003924:	e231      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800392e:	f47f af6b 	bne.w	8003808 <HAL_RCC_OscConfig+0xb0>
 8003932:	2302      	movs	r3, #2
 8003934:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003938:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	2302      	movs	r3, #2
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2201      	movs	r2, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	420b      	tst	r3, r1
 8003952:	d004      	beq.n	800395e <HAL_RCC_OscConfig+0x206>
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	4293      	cmp	r3, r2
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 800395a:	2001      	movs	r0, #1
 800395c:	e215      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4839      	ldr	r0, [pc, #228]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 8003960:	6803      	ldr	r3, [r0, #0]
 8003962:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003966:	6961      	ldr	r1, [r4, #20]
 8003968:	22f8      	movs	r2, #248	; 0xf8
 800396a:	fa92 f2a2 	rbit	r2, r2
 800396e:	fab2 f282 	clz	r2, r2
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	4313      	orrs	r3, r2
 8003978:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	f013 0f08 	tst.w	r3, #8
 8003980:	f000 808c 	beq.w	8003a9c <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003984:	69a3      	ldr	r3, [r4, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d060      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2f4>
 800398a:	2101      	movs	r1, #1
 800398c:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCC_OscConfig+0x2f0>)
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399c:	f7fd fec4 	bl	8001728 <HAL_GetTick>
 80039a0:	4605      	mov	r5, r0
 80039a2:	2302      	movs	r3, #2
 80039a4:	fa93 f2a3 	rbit	r2, r3
 80039a8:	fa93 f2a3 	rbit	r2, r3
 80039ac:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80039b2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2201      	movs	r2, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	420b      	tst	r3, r1
 80039c8:	d168      	bne.n	8003a9c <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fd fead 	bl	8001728 <HAL_GetTick>
 80039ce:	1b40      	subs	r0, r0, r5
 80039d0:	2802      	cmp	r0, #2
 80039d2:	d9e6      	bls.n	80039a2 <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 80039d4:	2003      	movs	r0, #3
 80039d6:	e1d8      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d8:	481a      	ldr	r0, [pc, #104]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039e0:	6961      	ldr	r1, [r4, #20]
 80039e2:	22f8      	movs	r2, #248	; 0xf8
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	fab2 f282 	clz	r2, r2
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	4313      	orrs	r3, r2
 80039f2:	6003      	str	r3, [r0, #0]
 80039f4:	e7c1      	b.n	800397a <HAL_RCC_OscConfig+0x222>
 80039f6:	2301      	movs	r3, #1
 80039f8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a0e:	f7fd fe8b 	bl	8001728 <HAL_GetTick>
 8003a12:	4605      	mov	r5, r0
 8003a14:	2302      	movs	r3, #2
 8003a16:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_OscConfig+0x2ec>)
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	2302      	movs	r3, #2
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	420b      	tst	r3, r1
 8003a34:	d0a1      	beq.n	800397a <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a36:	f7fd fe77 	bl	8001728 <HAL_GetTick>
 8003a3a:	1b40      	subs	r0, r0, r5
 8003a3c:	2802      	cmp	r0, #2
 8003a3e:	d9e9      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8003a40:	2003      	movs	r0, #3
 8003a42:	e1a2      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	10908120 	.word	0x10908120
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a52:	fab2 f282 	clz	r2, r2
 8003a56:	4bbc      	ldr	r3, [pc, #752]	; (8003d48 <HAL_RCC_OscConfig+0x5f0>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7fd fe62 	bl	8001728 <HAL_GetTick>
 8003a64:	4605      	mov	r5, r0
 8003a66:	2302      	movs	r3, #2
 8003a68:	fa93 f2a3 	rbit	r2, r3
 8003a6c:	fa93 f2a3 	rbit	r2, r3
 8003a70:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	4ab5      	ldr	r2, [pc, #724]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003a76:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	fab3 f383 	clz	r3, r3
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	420b      	tst	r3, r1
 8003a8c:	d006      	beq.n	8003a9c <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8e:	f7fd fe4b 	bl	8001728 <HAL_GetTick>
 8003a92:	1b40      	subs	r0, r0, r5
 8003a94:	2802      	cmp	r0, #2
 8003a96:	d9e6      	bls.n	8003a66 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8003a98:	2003      	movs	r0, #3
 8003a9a:	e176      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f013 0f04 	tst.w	r3, #4
 8003aa2:	f000 80b3 	beq.w	8003c0c <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4ba9      	ldr	r3, [pc, #676]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003aae:	d120      	bne.n	8003af2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4ba6      	ldr	r3, [pc, #664]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ab8:	61da      	str	r2, [r3, #28]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ac4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4ba2      	ldr	r3, [pc, #648]	; (8003d50 <HAL_RCC_OscConfig+0x5f8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ace:	d012      	beq.n	8003af6 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	68e3      	ldr	r3, [r4, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d023      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3c6>
 8003ad6:	bb73      	cbnz	r3, 8003b36 <HAL_RCC_OscConfig+0x3de>
 8003ad8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003adc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003ae0:	6a1a      	ldr	r2, [r3, #32]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	621a      	str	r2, [r3, #32]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	f022 0204 	bic.w	r2, r2, #4
 8003aee:	621a      	str	r2, [r3, #32]
 8003af0:	e01a      	b.n	8003b28 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2500      	movs	r5, #0
 8003af4:	e7e7      	b.n	8003ac6 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af6:	4a96      	ldr	r2, [pc, #600]	; (8003d50 <HAL_RCC_OscConfig+0x5f8>)
 8003af8:	6813      	ldr	r3, [r2, #0]
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b00:	f7fd fe12 	bl	8001728 <HAL_GetTick>
 8003b04:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <HAL_RCC_OscConfig+0x5f8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b0e:	d1df      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fd fe0a 	bl	8001728 <HAL_GetTick>
 8003b14:	1b80      	subs	r0, r0, r6
 8003b16:	2864      	cmp	r0, #100	; 0x64
 8003b18:	d9f5      	bls.n	8003b06 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8003b1a:	2003      	movs	r0, #3
 8003b1c:	e135      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1e:	4a8b      	ldr	r2, [pc, #556]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003b20:	6a13      	ldr	r3, [r2, #32]
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b28:	68e3      	ldr	r3, [r4, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d041      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fdfb 	bl	8001728 <HAL_GetTick>
 8003b32:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	e02b      	b.n	8003b8e <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_OscConfig+0x3f6>
 8003b3a:	4b84      	ldr	r3, [pc, #528]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003b3c:	6a1a      	ldr	r2, [r3, #32]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	621a      	str	r2, [r3, #32]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	f022 0204 	bic.w	r2, r2, #4
 8003b4a:	621a      	str	r2, [r3, #32]
 8003b4c:	e7ec      	b.n	8003b28 <HAL_RCC_OscConfig+0x3d0>
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003b50:	6a1a      	ldr	r2, [r3, #32]
 8003b52:	f042 0204 	orr.w	r2, r2, #4
 8003b56:	621a      	str	r2, [r3, #32]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	621a      	str	r2, [r3, #32]
 8003b60:	e7e2      	b.n	8003b28 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	4b7a      	ldr	r3, [pc, #488]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003b64:	6a19      	ldr	r1, [r3, #32]
 8003b66:	2302      	movs	r3, #2
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2201      	movs	r2, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	4219      	tst	r1, r3
 8003b7c:	d145      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fdd3 	bl	8001728 <HAL_GetTick>
 8003b82:	1b80      	subs	r0, r0, r6
 8003b84:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b88:	4298      	cmp	r0, r3
 8003b8a:	f200 80f9 	bhi.w	8003d80 <HAL_RCC_OscConfig+0x628>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	fa93 f2a3 	rbit	r2, r3
 8003b94:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f043 0302 	orr.w	r3, r3, #2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d0dd      	beq.n	8003b62 <HAL_RCC_OscConfig+0x40a>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	4b67      	ldr	r3, [pc, #412]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003bae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bb0:	e7d9      	b.n	8003b66 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fd fdb9 	bl	8001728 <HAL_GetTick>
 8003bb6:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e015      	b.n	8003be6 <HAL_RCC_OscConfig+0x48e>
 8003bba:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003bbc:	6a19      	ldr	r1, [r3, #32]
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2201      	movs	r2, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	4219      	tst	r1, r3
 8003bd4:	d019      	beq.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd fda7 	bl	8001728 <HAL_GetTick>
 8003bda:	1b80      	subs	r0, r0, r6
 8003bdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003be0:	4298      	cmp	r0, r3
 8003be2:	f200 80cf 	bhi.w	8003d84 <HAL_RCC_OscConfig+0x62c>
 8003be6:	2302      	movs	r3, #2
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d0dd      	beq.n	8003bba <HAL_RCC_OscConfig+0x462>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003c06:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c08:	e7d9      	b.n	8003bbe <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c0a:	bbb5      	cbnz	r5, 8003c7a <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0c:	69e3      	ldr	r3, [r4, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80ba 	beq.w	8003d88 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c14:	4a4d      	ldr	r2, [pc, #308]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003c16:	6852      	ldr	r2, [r2, #4]
 8003c18:	f002 020c 	and.w	r2, r2, #12
 8003c1c:	2a08      	cmp	r2, #8
 8003c1e:	f000 8099 	beq.w	8003d54 <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d02f      	beq.n	8003c86 <HAL_RCC_OscConfig+0x52e>
 8003c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c2a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd fd72 	bl	8001728 <HAL_GetTick>
 8003c44:	4604      	mov	r4, r0
 8003c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	2201      	movs	r2, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	4219      	tst	r1, r3
 8003c6a:	d06b      	beq.n	8003d44 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fd fd5c 	bl	8001728 <HAL_GetTick>
 8003c70:	1b00      	subs	r0, r0, r4
 8003c72:	2802      	cmp	r0, #2
 8003c74:	d9e7      	bls.n	8003c46 <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 8003c76:	2003      	movs	r0, #3
 8003c78:	e087      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7a:	4a34      	ldr	r2, [pc, #208]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003c7c:	69d3      	ldr	r3, [r2, #28]
 8003c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c82:	61d3      	str	r3, [r2, #28]
 8003c84:	e7c2      	b.n	8003c0c <HAL_RCC_OscConfig+0x4b4>
 8003c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fd42 	bl	8001728 <HAL_GetTick>
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003caa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cae:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	4219      	tst	r1, r3
 8003cca:	d006      	beq.n	8003cda <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd fd2c 	bl	8001728 <HAL_GetTick>
 8003cd0:	1b40      	subs	r0, r0, r5
 8003cd2:	2802      	cmp	r0, #2
 8003cd4:	d9e7      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	e057      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cda:	491c      	ldr	r1, [pc, #112]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003cdc:	684b      	ldr	r3, [r1, #4]
 8003cde:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003ce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ce4:	6a20      	ldr	r0, [r4, #32]
 8003ce6:	4302      	orrs	r2, r0
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
 8003cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d06:	f7fd fd0f 	bl	8001728 <HAL_GetTick>
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d10:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <HAL_RCC_OscConfig+0x5f4>)
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2201      	movs	r2, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	4219      	tst	r1, r3
 8003d30:	d106      	bne.n	8003d40 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fd fcf9 	bl	8001728 <HAL_GetTick>
 8003d36:	1b00      	subs	r0, r0, r4
 8003d38:	2802      	cmp	r0, #2
 8003d3a:	d9e7      	bls.n	8003d0c <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	e024      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8003d40:	2000      	movs	r0, #0
 8003d42:	e022      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
 8003d44:	2000      	movs	r0, #0
 8003d46:	e020      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
 8003d48:	10908120 	.word	0x10908120
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d01a      	beq.n	8003d8e <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <HAL_RCC_OscConfig+0x640>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d5c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003d60:	6a22      	ldr	r2, [r4, #32]
 8003d62:	4291      	cmp	r1, r2
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 8003d66:	2001      	movs	r0, #1
 8003d68:	e00f      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d6a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
}
 8003d7a:	4770      	bx	lr
        return HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	e004      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8003d80:	2003      	movs	r0, #3
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8003d84:	2003      	movs	r0, #3
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8003d88:	2000      	movs	r0, #0
}
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003d8e:	2001      	movs	r0, #1
 8003d90:	e7fb      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8003d92:	2000      	movs	r0, #0
 8003d94:	e7f9      	b.n	8003d8a <HAL_RCC_OscConfig+0x632>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000

08003d9c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003d9c:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x64>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da0:	f003 020c 	and.w	r2, r3, #12
 8003da4:	2a04      	cmp	r2, #4
 8003da6:	d003      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x14>
 8003da8:	2a08      	cmp	r2, #8
 8003daa:	d003      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x18>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4815      	ldr	r0, [pc, #84]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x68>)
      break;
    }
  }
  return sysclockfreq;
}
 8003dae:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003db0:	4815      	ldr	r0, [pc, #84]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003db2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003db4:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8003db8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003dbc:	fa92 f2a2 	rbit	r2, r2
 8003dc0:	fab2 f282 	clz	r2, r2
 8003dc4:	fa21 f202 	lsr.w	r2, r1, r2
 8003dc8:	4910      	ldr	r1, [pc, #64]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x70>)
 8003dca:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x64>)
 8003dce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dd0:	f002 020f 	and.w	r2, r2, #15
 8003dd4:	210f      	movs	r1, #15
 8003dd6:	fa91 f1a1 	rbit	r1, r1
 8003dda:	fab1 f181 	clz	r1, r1
 8003dde:	40ca      	lsrs	r2, r1
 8003de0:	490b      	ldr	r1, [pc, #44]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x74>)
 8003de2:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003de4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x5a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df0:	fb00 f003 	mul.w	r0, r0, r3
 8003df4:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x78>)
 8003df8:	fb03 f000 	mul.w	r0, r3, r0
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	007a1200 	.word	0x007a1200
 8003e08:	01e84800 	.word	0x01e84800
 8003e0c:	08007df4 	.word	0x08007df4
 8003e10:	08007e04 	.word	0x08007e04
 8003e14:	003d0900 	.word	0x003d0900

08003e18 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	f000 80c1 	beq.w	8003fa0 <HAL_RCC_ClockConfig+0x188>
{
 8003e1e:	b570      	push	{r4, r5, r6, lr}
 8003e20:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e22:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <HAL_RCC_ClockConfig+0x190>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	428b      	cmp	r3, r1
 8003e2c:	d20c      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4a5e      	ldr	r2, [pc, #376]	; (8003fa8 <HAL_RCC_ClockConfig+0x190>)
 8003e30:	6813      	ldr	r3, [r2, #0]
 8003e32:	f023 0307 	bic.w	r3, r3, #7
 8003e36:	430b      	orrs	r3, r1
 8003e38:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	428b      	cmp	r3, r1
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003e44:	2001      	movs	r0, #1
}
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f013 0f02 	tst.w	r3, #2
 8003e4e:	d006      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4a56      	ldr	r2, [pc, #344]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003e52:	6853      	ldr	r3, [r2, #4]
 8003e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e58:	68a0      	ldr	r0, [r4, #8]
 8003e5a:	4303      	orrs	r3, r0
 8003e5c:	6053      	str	r3, [r2, #4]
 8003e5e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	f013 0f01 	tst.w	r3, #1
 8003e66:	d05a      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e68:	6863      	ldr	r3, [r4, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d02d      	beq.n	8003eca <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d040      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0xdc>
 8003e72:	2202      	movs	r2, #2
 8003e74:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	4a4c      	ldr	r2, [pc, #304]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003e7a:	6810      	ldr	r0, [r2, #0]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	fa92 f2a2 	rbit	r2, r2
 8003e82:	fab2 f282 	clz	r2, r2
 8003e86:	f002 021f 	and.w	r2, r2, #31
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e90:	4210      	tst	r0, r2
 8003e92:	f000 8087 	beq.w	8003fa4 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4945      	ldr	r1, [pc, #276]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003e98:	684a      	ldr	r2, [r1, #4]
 8003e9a:	f022 0203 	bic.w	r2, r2, #3
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003ea2:	f7fd fc41 	bl	8001728 <HAL_GetTick>
 8003ea6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea8:	4b40      	ldr	r3, [pc, #256]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	6862      	ldr	r2, [r4, #4]
 8003eb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003eb6:	d032      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fd fc36 	bl	8001728 <HAL_GetTick>
 8003ebc:	1b80      	subs	r0, r0, r6
 8003ebe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ec2:	4298      	cmp	r0, r3
 8003ec4:	d9f0      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8003ec6:	2003      	movs	r0, #3
 8003ec8:	e7bd      	b.n	8003e46 <HAL_RCC_ClockConfig+0x2e>
 8003eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ece:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4a36      	ldr	r2, [pc, #216]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003ed4:	6810      	ldr	r0, [r2, #0]
 8003ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eda:	fa92 f2a2 	rbit	r2, r2
 8003ede:	fab2 f282 	clz	r2, r2
 8003ee2:	f002 021f 	and.w	r2, r2, #31
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	4202      	tst	r2, r0
 8003eee:	d1d2      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	e7a8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x2e>
 8003ef4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef8:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003efe:	6810      	ldr	r0, [r2, #0]
 8003f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f04:	fa92 f2a2 	rbit	r2, r2
 8003f08:	fab2 f282 	clz	r2, r2
 8003f0c:	f002 021f 	and.w	r2, r2, #31
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f202 	lsl.w	r2, r1, r2
 8003f16:	4210      	tst	r0, r2
 8003f18:	d1bd      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	e793      	b.n	8003e46 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1e:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <HAL_RCC_ClockConfig+0x190>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	42ab      	cmp	r3, r5
 8003f28:	d90c      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_RCC_ClockConfig+0x190>)
 8003f2c:	6813      	ldr	r3, [r2, #0]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	432b      	orrs	r3, r5
 8003f34:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	6813      	ldr	r3, [r2, #0]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	42ab      	cmp	r3, r5
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8003f40:	2001      	movs	r0, #1
 8003f42:	e780      	b.n	8003e46 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	f013 0f04 	tst.w	r3, #4
 8003f4a:	d006      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4a17      	ldr	r2, [pc, #92]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003f4e:	6853      	ldr	r3, [r2, #4]
 8003f50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f54:	68e1      	ldr	r1, [r4, #12]
 8003f56:	430b      	orrs	r3, r1
 8003f58:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	f013 0f08 	tst.w	r3, #8
 8003f60:	d007      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003f64:	6853      	ldr	r3, [r2, #4]
 8003f66:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003f6a:	6921      	ldr	r1, [r4, #16]
 8003f6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f70:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f72:	f7ff ff13 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_RCC_ClockConfig+0x194>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f7e:	22f0      	movs	r2, #240	; 0xf0
 8003f80:	fa92 f2a2 	rbit	r2, r2
 8003f84:	fab2 f282 	clz	r2, r2
 8003f88:	40d3      	lsrs	r3, r2
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x198>)
 8003f8c:	5cd3      	ldrb	r3, [r2, r3]
 8003f8e:	40d8      	lsrs	r0, r3
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <HAL_RCC_ClockConfig+0x19c>)
 8003f92:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_RCC_ClockConfig+0x1a0>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	f7fd f962 	bl	8001260 <HAL_InitTick>
  return HAL_OK;
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e752      	b.n	8003e46 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003fa0:	2001      	movs	r0, #1
}
 8003fa2:	4770      	bx	lr
        return HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	e74e      	b.n	8003e46 <HAL_RCC_ClockConfig+0x2e>
 8003fa8:	40022000 	.word	0x40022000
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	08007ddc 	.word	0x08007ddc
 8003fb4:	20000004 	.word	0x20000004
 8003fb8:	2000000c 	.word	0x2000000c

08003fbc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003fbc:	4b01      	ldr	r3, [pc, #4]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000004 	.word	0x20000004

08003fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fca:	f7ff fff7 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003fd6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003fda:	fa92 f2a2 	rbit	r2, r2
 8003fde:	fab2 f282 	clz	r2, r2
 8003fe2:	40d3      	lsrs	r3, r2
 8003fe4:	4a02      	ldr	r2, [pc, #8]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003fe8:	40d8      	lsrs	r0, r3
 8003fea:	bd08      	pop	{r3, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	08007dec 	.word	0x08007dec

08003ff4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_GetClockConfig+0x34>)
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	f002 0203 	and.w	r2, r2, #3
 8004000:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004008:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004010:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800401a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCC_GetClockConfig+0x38>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	600b      	str	r3, [r1, #0]
}
 8004026:	4770      	bx	lr
 8004028:	40021000 	.word	0x40021000
 800402c:	40022000 	.word	0x40022000

08004030 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004032:	b083      	sub	sp, #12
 8004034:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004036:	6803      	ldr	r3, [r0, #0]
 8004038:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800403c:	d048      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403e:	4b83      	ldr	r3, [pc, #524]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004046:	f040 80b4 	bne.w	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	4b80      	ldr	r3, [pc, #512]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004052:	61da      	str	r2, [r3, #28]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800405e:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	4b7b      	ldr	r3, [pc, #492]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004068:	f000 80a5 	beq.w	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800406c:	4b77      	ldr	r3, [pc, #476]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004070:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004074:	d022      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004076:	6862      	ldr	r2, [r4, #4]
 8004078:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800407c:	429a      	cmp	r2, r3
 800407e:	d01d      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004080:	4872      	ldr	r0, [pc, #456]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004082:	6a01      	ldr	r1, [r0, #32]
 8004084:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8004088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800408c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004090:	fab2 f282 	clz	r2, r2
 8004094:	4f6f      	ldr	r7, [pc, #444]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004096:	443a      	add	r2, r7
 8004098:	0092      	lsls	r2, r2, #2
 800409a:	f04f 0c01 	mov.w	ip, #1
 800409e:	f8c2 c000 	str.w	ip, [r2]
 80040a2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	443b      	add	r3, r7
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040b2:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040b4:	f011 0f01 	tst.w	r1, #1
 80040b8:	f040 8092 	bne.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040bc:	4a63      	ldr	r2, [pc, #396]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80040be:	6a13      	ldr	r3, [r2, #32]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	6861      	ldr	r1, [r4, #4]
 80040c6:	430b      	orrs	r3, r1
 80040c8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040ca:	2d00      	cmp	r5, #0
 80040cc:	f040 80b4 	bne.w	8004238 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	f013 0f01 	tst.w	r3, #1
 80040d6:	d006      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d8:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80040da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040dc:	f023 0303 	bic.w	r3, r3, #3
 80040e0:	68a1      	ldr	r1, [r4, #8]
 80040e2:	430b      	orrs	r3, r1
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	f013 0f20 	tst.w	r3, #32
 80040ec:	d006      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ee:	4a57      	ldr	r2, [pc, #348]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80040f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	68e1      	ldr	r1, [r4, #12]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6313      	str	r3, [r2, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004102:	d006      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004104:	4a51      	ldr	r2, [pc, #324]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004106:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004108:	f023 0320 	bic.w	r3, r3, #32
 800410c:	6921      	ldr	r1, [r4, #16]
 800410e:	430b      	orrs	r3, r1
 8004110:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004118:	d006      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800411a:	4a4c      	ldr	r2, [pc, #304]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800411c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800411e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004122:	6961      	ldr	r1, [r4, #20]
 8004124:	430b      	orrs	r3, r1
 8004126:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800412e:	d006      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004130:	4a46      	ldr	r2, [pc, #280]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004132:	6853      	ldr	r3, [r2, #4]
 8004134:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004138:	69e1      	ldr	r1, [r4, #28]
 800413a:	430b      	orrs	r3, r1
 800413c:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004144:	d006      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004146:	4a41      	ldr	r2, [pc, #260]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004148:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800414a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800414e:	69a1      	ldr	r1, [r4, #24]
 8004150:	430b      	orrs	r3, r1
 8004152:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800415a:	d006      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800415c:	4a3b      	ldr	r2, [pc, #236]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800415e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	6a21      	ldr	r1, [r4, #32]
 8004166:	430b      	orrs	r3, r1
 8004168:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004170:	d006      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004172:	4a36      	ldr	r2, [pc, #216]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004174:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800417c:	430b      	orrs	r3, r1
 800417e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004186:	d006      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004188:	4a30      	ldr	r2, [pc, #192]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800418a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800418c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004190:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004192:	430b      	orrs	r3, r1
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800419c:	d053      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800419e:	4a2b      	ldr	r2, [pc, #172]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80041a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80041a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041ac:	2000      	movs	r0, #0
}
 80041ae:	b003      	add	sp, #12
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2500      	movs	r5, #0
 80041b4:	e754      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b6:	4a26      	ldr	r2, [pc, #152]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80041b8:	6813      	ldr	r3, [r2, #0]
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80041c0:	f7fd fab2 	bl	8001728 <HAL_GetTick>
 80041c4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b22      	ldr	r3, [pc, #136]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041ce:	f47f af4d 	bne.w	800406c <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fd faa9 	bl	8001728 <HAL_GetTick>
 80041d6:	1b80      	subs	r0, r0, r6
 80041d8:	2864      	cmp	r0, #100	; 0x64
 80041da:	d9f4      	bls.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 80041dc:	2003      	movs	r0, #3
 80041de:	e7e6      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
        tickstart = HAL_GetTick();
 80041e0:	f7fd faa2 	bl	8001728 <HAL_GetTick>
 80041e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e6:	e015      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80041ea:	6a19      	ldr	r1, [r3, #32]
 80041ec:	2302      	movs	r3, #2
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2201      	movs	r2, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	420b      	tst	r3, r1
 8004202:	f47f af5b 	bne.w	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd fa8f 	bl	8001728 <HAL_GetTick>
 800420a:	1b80      	subs	r0, r0, r6
 800420c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004210:	4298      	cmp	r0, r3
 8004212:	d816      	bhi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004214:	2302      	movs	r3, #2
 8004216:	fa93 f2a3 	rbit	r2, r3
 800421a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	2b02      	cmp	r3, #2
 800422a:	d0dd      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800422c:	2302      	movs	r3, #2
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004234:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004236:	e7d9      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004238:	69d3      	ldr	r3, [r2, #28]
 800423a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423e:	61d3      	str	r3, [r2, #28]
 8004240:	e746      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8004242:	2003      	movs	r0, #3
 8004244:	e7b3      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
  return HAL_OK;
 8004246:	2000      	movs	r0, #0
 8004248:	e7b1      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	40007000 	.word	0x40007000
 8004254:	10908100 	.word	0x10908100

08004258 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800425c:	6802      	ldr	r2, [r0, #0]
 800425e:	68d3      	ldr	r3, [r2, #12]
 8004260:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004264:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004266:	f7fd fa5f 	bl	8001728 <HAL_GetTick>
 800426a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f013 0f20 	tst.w	r3, #32
 8004274:	d107      	bne.n	8004286 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004276:	f7fd fa57 	bl	8001728 <HAL_GetTick>
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004280:	d9f4      	bls.n	800426c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004282:	2003      	movs	r0, #3
 8004284:	e000      	b.n	8004288 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8004286:	2000      	movs	r0, #0
}
 8004288:	bd38      	pop	{r3, r4, r5, pc}

0800428a <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800428a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800428c:	6803      	ldr	r3, [r0, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004294:	d001      	beq.n	800429a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004296:	2000      	movs	r0, #0
}
 8004298:	bd38      	pop	{r3, r4, r5, pc}
 800429a:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80042a2:	f7fd fa41 	bl	8001728 <HAL_GetTick>
 80042a6:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042b0:	d107      	bne.n	80042c2 <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042b2:	f7fd fa39 	bl	8001728 <HAL_GetTick>
 80042b6:	1b40      	subs	r0, r0, r5
 80042b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80042bc:	d9f4      	bls.n	80042a8 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80042be:	2003      	movs	r0, #3
 80042c0:	e7ea      	b.n	8004298 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80042c2:	2000      	movs	r0, #0
 80042c4:	e7e8      	b.n	8004298 <RTC_EnterInitMode+0xe>

080042c6 <HAL_RTC_Init>:
{
 80042c6:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d05c      	beq.n	8004386 <HAL_RTC_Init+0xc0>
 80042cc:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042ce:	7f43      	ldrb	r3, [r0, #29]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d040      	beq.n	8004356 <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042d4:	2302      	movs	r3, #2
 80042d6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	22ca      	movs	r2, #202	; 0xca
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	2253      	movs	r2, #83	; 0x53
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff ffd0 	bl	800428a <RTC_EnterInitMode>
 80042ea:	4605      	mov	r5, r0
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d136      	bne.n	800435e <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	6893      	ldr	r3, [r2, #8]
 80042f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fc:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	688a      	ldr	r2, [r1, #8]
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	6920      	ldr	r0, [r4, #16]
 8004306:	4303      	orrs	r3, r0
 8004308:	6960      	ldr	r0, [r4, #20]
 800430a:	4303      	orrs	r3, r0
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	68e2      	ldr	r2, [r4, #12]
 8004314:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	6913      	ldr	r3, [r2, #16]
 800431a:	68a1      	ldr	r1, [r4, #8]
 800431c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004320:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	68d3      	ldr	r3, [r2, #12]
 8004326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800432a:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f013 0f20 	tst.w	r3, #32
 8004334:	d01b      	beq.n	800436e <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800433a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004344:	69a1      	ldr	r1, [r4, #24]
 8004346:	430b      	orrs	r3, r1
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	22ff      	movs	r2, #255	; 0xff
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004350:	2301      	movs	r3, #1
 8004352:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8004354:	e009      	b.n	800436a <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8004356:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004358:	f7fc feea 	bl	8001130 <HAL_RTC_MspInit>
 800435c:	e7ba      	b.n	80042d4 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	22ff      	movs	r2, #255	; 0xff
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004364:	2304      	movs	r3, #4
 8004366:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8004368:	2501      	movs	r5, #1
}
 800436a:	4628      	mov	r0, r5
 800436c:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff ff72 	bl	8004258 <HAL_RTC_WaitForSynchro>
 8004374:	2800      	cmp	r0, #0
 8004376:	d0de      	beq.n	8004336 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	22ff      	movs	r2, #255	; 0xff
 800437c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800437e:	2304      	movs	r3, #4
 8004380:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8004382:	2501      	movs	r5, #1
 8004384:	e7f1      	b.n	800436a <HAL_RTC_Init+0xa4>
    return HAL_ERROR;
 8004386:	2501      	movs	r5, #1
 8004388:	e7ef      	b.n	800436a <HAL_RTC_Init+0xa4>

0800438a <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800438a:	0903      	lsrs	r3, r0, #4
 800438c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004390:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8004392:	f000 000f 	and.w	r0, r0, #15
 8004396:	4410      	add	r0, r2
}
 8004398:	b2c0      	uxtb	r0, r0
 800439a:	4770      	bx	lr

0800439c <HAL_RTC_GetTime>:
{
 800439c:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800439e:	6803      	ldr	r3, [r0, #0]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80043a4:	6803      	ldr	r3, [r0, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043ac:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80043ae:	6803      	ldr	r3, [r0, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80043b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80043ba:	0c1d      	lsrs	r5, r3, #16
 80043bc:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 80043c0:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80043c2:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80043c6:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80043c8:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 80043cc:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80043ce:	f005 0540 	and.w	r5, r5, #64	; 0x40
 80043d2:	70cd      	strb	r5, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80043d4:	b95a      	cbnz	r2, 80043ee <HAL_RTC_GetTime+0x52>
 80043d6:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80043d8:	f7ff ffd7 	bl	800438a <RTC_Bcd2ToByte>
 80043dc:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80043de:	4630      	mov	r0, r6
 80043e0:	f7ff ffd3 	bl	800438a <RTC_Bcd2ToByte>
 80043e4:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7ff ffcf 	bl	800438a <RTC_Bcd2ToByte>
 80043ec:	70a8      	strb	r0, [r5, #2]
}
 80043ee:	2000      	movs	r0, #0
 80043f0:	bd70      	pop	{r4, r5, r6, pc}

080043f2 <HAL_RTC_GetDate>:
{
 80043f2:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80043f4:	6803      	ldr	r3, [r0, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004400:	0c18      	lsrs	r0, r3, #16
 8004402:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004404:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8004408:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800440a:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 800440e:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004410:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004414:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004416:	b95a      	cbnz	r2, 8004430 <HAL_RTC_GetDate+0x3e>
 8004418:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800441a:	f7ff ffb6 	bl	800438a <RTC_Bcd2ToByte>
 800441e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004420:	4630      	mov	r0, r6
 8004422:	f7ff ffb2 	bl	800438a <RTC_Bcd2ToByte>
 8004426:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004428:	4628      	mov	r0, r5
 800442a:	f7ff ffae 	bl	800438a <RTC_Bcd2ToByte>
 800442e:	70a0      	strb	r0, [r4, #2]
}
 8004430:	2000      	movs	r0, #0
 8004432:	bd70      	pop	{r4, r5, r6, pc}

08004434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	4605      	mov	r5, r0
 8004438:	460f      	mov	r7, r1
 800443a:	4616      	mov	r6, r2
 800443c:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	ea37 0303 	bics.w	r3, r7, r3
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	42b3      	cmp	r3, r6
 800444e:	d037      	beq.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004450:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004454:	d0f3      	beq.n	800443e <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004456:	f7fd f967 	bl	8001728 <HAL_GetTick>
 800445a:	9b06      	ldr	r3, [sp, #24]
 800445c:	1ac0      	subs	r0, r0, r3
 800445e:	42a0      	cmp	r0, r4
 8004460:	d201      	bcs.n	8004466 <SPI_WaitFlagStateUntilTimeout+0x32>
 8004462:	2c00      	cmp	r4, #0
 8004464:	d1eb      	bne.n	800443e <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004466:	682a      	ldr	r2, [r5, #0]
 8004468:	6853      	ldr	r3, [r2, #4]
 800446a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800446e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004470:	686b      	ldr	r3, [r5, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d00b      	beq.n	8004490 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004478:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	d014      	beq.n	80044aa <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004480:	2301      	movs	r3, #1
 8004482:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004486:	2300      	movs	r3, #0
 8004488:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 800448c:	2003      	movs	r0, #3
 800448e:	e018      	b.n	80044c2 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004490:	68ab      	ldr	r3, [r5, #8]
 8004492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004496:	d002      	beq.n	800449e <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d1ec      	bne.n	8004478 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 800449e:	682a      	ldr	r2, [r5, #0]
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e7e6      	b.n	8004478 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80044aa:	682a      	ldr	r2, [r5, #0]
 80044ac:	6813      	ldr	r3, [r2, #0]
 80044ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	682a      	ldr	r2, [r5, #0]
 80044b6:	6813      	ldr	r3, [r2, #0]
 80044b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e7df      	b.n	8004480 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80044c0:	2000      	movs	r0, #0
}
 80044c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	4607      	mov	r7, r0
 80044c8:	460c      	mov	r4, r1
 80044ca:	4615      	mov	r5, r2
 80044cc:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80044ce:	e002      	b.n	80044d6 <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80044d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80044d4:	d10b      	bne.n	80044ee <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	6893      	ldr	r3, [r2, #8]
 80044da:	4023      	ands	r3, r4
 80044dc:	42ab      	cmp	r3, r5
 80044de:	d03b      	beq.n	8004558 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044e0:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80044e4:	d1f4      	bne.n	80044d0 <SPI_WaitFifoStateUntilTimeout+0xc>
 80044e6:	2d00      	cmp	r5, #0
 80044e8:	d1f2      	bne.n	80044d0 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80044ea:	7b13      	ldrb	r3, [r2, #12]
 80044ec:	e7f0      	b.n	80044d0 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044ee:	f7fd f91b 	bl	8001728 <HAL_GetTick>
 80044f2:	9b06      	ldr	r3, [sp, #24]
 80044f4:	1ac0      	subs	r0, r0, r3
 80044f6:	42b0      	cmp	r0, r6
 80044f8:	d201      	bcs.n	80044fe <SPI_WaitFifoStateUntilTimeout+0x3a>
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d1eb      	bne.n	80044d6 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	6853      	ldr	r3, [r2, #4]
 8004502:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004506:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450e:	d00b      	beq.n	8004528 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004516:	d014      	beq.n	8004542 <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800451e:	2300      	movs	r3, #0
 8004520:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004524:	2003      	movs	r0, #3
 8004526:	e018      	b.n	800455a <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	d002      	beq.n	8004536 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004534:	d1ec      	bne.n	8004510 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6813      	ldr	r3, [r2, #0]
 800453a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e7e6      	b.n	8004510 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	6813      	ldr	r3, [r2, #0]
 8004546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e7df      	b.n	8004518 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8004558:	2000      	movs	r0, #0
}
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800455c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	4604      	mov	r4, r0
 8004562:	460d      	mov	r5, r1
 8004564:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004566:	9200      	str	r2, [sp, #0]
 8004568:	460b      	mov	r3, r1
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004570:	f7ff ffa8 	bl	80044c4 <SPI_WaitFifoStateUntilTimeout>
 8004574:	b9b8      	cbnz	r0, 80045a6 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004576:	9600      	str	r6, [sp, #0]
 8004578:	462b      	mov	r3, r5
 800457a:	2200      	movs	r2, #0
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff ff58 	bl	8004434 <SPI_WaitFlagStateUntilTimeout>
 8004584:	b9b8      	cbnz	r0, 80045b6 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004586:	9600      	str	r6, [sp, #0]
 8004588:	462b      	mov	r3, r5
 800458a:	2200      	movs	r2, #0
 800458c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004590:	4620      	mov	r0, r4
 8004592:	f7ff ff97 	bl	80044c4 <SPI_WaitFifoStateUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	b150      	cbz	r0, 80045b0 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800459c:	f043 0320 	orr.w	r3, r3, #32
 80045a0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e004      	b.n	80045b0 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045a8:	f043 0320 	orr.w	r3, r3, #32
 80045ac:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	b002      	add	sp, #8
 80045b4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045b8:	f043 0320 	orr.w	r3, r3, #32
 80045bc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e7f6      	b.n	80045b0 <SPI_EndRxTxTransaction+0x54>

080045c2 <HAL_SPI_Init>:
  if (hspi == NULL)
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d058      	beq.n	8004678 <HAL_SPI_Init+0xb6>
{
 80045c6:	b510      	push	{r4, lr}
 80045c8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ce:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d045      	beq.n	8004662 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 80045d6:	2302      	movs	r3, #2
 80045d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045e6:	68e3      	ldr	r3, [r4, #12]
 80045e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045ec:	d93e      	bls.n	800466c <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045ee:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045f4:	d004      	beq.n	8004600 <HAL_SPI_Init+0x3e>
 80045f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045fa:	d001      	beq.n	8004600 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045fc:	2100      	movs	r1, #0
 80045fe:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004600:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004602:	b921      	cbnz	r1, 800460e <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004608:	d933      	bls.n	8004672 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800460a:	2302      	movs	r3, #2
 800460c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	68a1      	ldr	r1, [r4, #8]
 8004612:	430b      	orrs	r3, r1
 8004614:	6921      	ldr	r1, [r4, #16]
 8004616:	430b      	orrs	r3, r1
 8004618:	6961      	ldr	r1, [r4, #20]
 800461a:	430b      	orrs	r3, r1
 800461c:	69a1      	ldr	r1, [r4, #24]
 800461e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004622:	430b      	orrs	r3, r1
 8004624:	69e1      	ldr	r1, [r4, #28]
 8004626:	430b      	orrs	r3, r1
 8004628:	6a21      	ldr	r1, [r4, #32]
 800462a:	430b      	orrs	r3, r1
 800462c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800462e:	6821      	ldr	r1, [r4, #0]
 8004630:	4303      	orrs	r3, r0
 8004632:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004634:	8b63      	ldrh	r3, [r4, #26]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800463c:	430b      	orrs	r3, r1
 800463e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004640:	430b      	orrs	r3, r1
 8004642:	68e1      	ldr	r1, [r4, #12]
 8004644:	430b      	orrs	r3, r1
 8004646:	6821      	ldr	r1, [r4, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	69d3      	ldr	r3, [r2, #28]
 8004650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004654:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004656:	2000      	movs	r0, #0
 8004658:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800465a:	2301      	movs	r3, #1
 800465c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004660:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004662:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004666:	f7fc fd9f 	bl	80011a8 <HAL_SPI_MspInit>
 800466a:	e7b4      	b.n	80045d6 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800466c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004670:	e7be      	b.n	80045f0 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004672:	2301      	movs	r3, #1
 8004674:	6323      	str	r3, [r4, #48]	; 0x30
 8004676:	e7ca      	b.n	800460e <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004678:	2001      	movs	r0, #1
}
 800467a:	4770      	bx	lr

0800467c <HAL_SPI_Transmit>:
{
 800467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004680:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004682:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8004686:	2c01      	cmp	r4, #1
 8004688:	f000 80e4 	beq.w	8004854 <HAL_SPI_Transmit+0x1d8>
 800468c:	461e      	mov	r6, r3
 800468e:	4615      	mov	r5, r2
 8004690:	4688      	mov	r8, r1
 8004692:	4604      	mov	r4, r0
 8004694:	2301      	movs	r3, #1
 8004696:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800469a:	f7fd f845 	bl	8001728 <HAL_GetTick>
 800469e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80046a0:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	2a01      	cmp	r2, #1
 80046a8:	d009      	beq.n	80046be <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80046aa:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80046b2:	2300      	movs	r3, #0
 80046b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80046b8:	b002      	add	sp, #8
 80046ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80046be:	f1b8 0f00 	cmp.w	r8, #0
 80046c2:	f000 80b9 	beq.w	8004838 <HAL_SPI_Transmit+0x1bc>
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	f000 80b8 	beq.w	800483c <HAL_SPI_Transmit+0x1c0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046cc:	2303      	movs	r3, #3
 80046ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046d2:	2300      	movs	r3, #0
 80046d4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046d6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046da:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046dc:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046de:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046e0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046e4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80046e8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046ea:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ec:	68a3      	ldr	r3, [r4, #8]
 80046ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f2:	d01c      	beq.n	800472e <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046fc:	d103      	bne.n	8004706 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004704:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800470c:	d933      	bls.n	8004776 <HAL_SPI_Transmit+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470e:	6863      	ldr	r3, [r4, #4]
 8004710:	b10b      	cbz	r3, 8004716 <HAL_SPI_Transmit+0x9a>
 8004712:	2d01      	cmp	r5, #1
 8004714:	d11b      	bne.n	800474e <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004716:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	8812      	ldrh	r2, [r2, #0]
 800471c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800471e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004720:	3302      	adds	r3, #2
 8004722:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004724:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004726:	3b01      	subs	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800472c:	e00f      	b.n	800474e <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e7dc      	b.n	80046f4 <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800473a:	f7fc fff5 	bl	8001728 <HAL_GetTick>
 800473e:	1bc0      	subs	r0, r0, r7
 8004740:	42b0      	cmp	r0, r6
 8004742:	d302      	bcc.n	800474a <HAL_SPI_Transmit+0xce>
 8004744:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004748:	d17a      	bne.n	8004840 <HAL_SPI_Transmit+0x1c4>
 800474a:	2e00      	cmp	r6, #0
 800474c:	d07a      	beq.n	8004844 <HAL_SPI_Transmit+0x1c8>
    while (hspi->TxXferCount > 0U)
 800474e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d05b      	beq.n	800480e <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	f012 0f02 	tst.w	r2, #2
 800475e:	d0ec      	beq.n	800473a <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004760:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004762:	8812      	ldrh	r2, [r2, #0]
 8004764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004768:	3302      	adds	r3, #2
 800476a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800476c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800476e:	3b01      	subs	r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004774:	e7eb      	b.n	800474e <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	b10b      	cbz	r3, 800477e <HAL_SPI_Transmit+0x102>
 800477a:	2d01      	cmp	r5, #1
 800477c:	d130      	bne.n	80047e0 <HAL_SPI_Transmit+0x164>
      if (hspi->TxXferCount > 1U)
 800477e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d90b      	bls.n	800479e <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004786:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800478e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004790:	3302      	adds	r3, #2
 8004792:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004794:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004796:	3b02      	subs	r3, #2
 8004798:	b29b      	uxth	r3, r3
 800479a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800479c:	e020      	b.n	80047e0 <HAL_SPI_Transmit+0x164>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	7812      	ldrb	r2, [r2, #0]
 80047a4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80047a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047a8:	3301      	adds	r3, #1
 80047aa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80047ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80047b4:	e014      	b.n	80047e0 <HAL_SPI_Transmit+0x164>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80047bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047be:	3301      	adds	r3, #1
 80047c0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80047c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80047ca:	e009      	b.n	80047e0 <HAL_SPI_Transmit+0x164>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047cc:	f7fc ffac 	bl	8001728 <HAL_GetTick>
 80047d0:	1bc0      	subs	r0, r0, r7
 80047d2:	42b0      	cmp	r0, r6
 80047d4:	d302      	bcc.n	80047dc <HAL_SPI_Transmit+0x160>
 80047d6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80047da:	d135      	bne.n	8004848 <HAL_SPI_Transmit+0x1cc>
 80047dc:	2e00      	cmp	r6, #0
 80047de:	d035      	beq.n	800484c <HAL_SPI_Transmit+0x1d0>
    while (hspi->TxXferCount > 0U)
 80047e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	b19b      	cbz	r3, 800480e <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	6893      	ldr	r3, [r2, #8]
 80047ea:	f013 0f02 	tst.w	r3, #2
 80047ee:	d0ed      	beq.n	80047cc <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 80047f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d9de      	bls.n	80047b6 <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004800:	3302      	adds	r3, #2
 8004802:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004804:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004806:	3b02      	subs	r3, #2
 8004808:	b29b      	uxth	r3, r3
 800480a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800480c:	e7e8      	b.n	80047e0 <HAL_SPI_Transmit+0x164>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800480e:	463a      	mov	r2, r7
 8004810:	4631      	mov	r1, r6
 8004812:	4620      	mov	r0, r4
 8004814:	f7ff fea2 	bl	800455c <SPI_EndRxTxTransaction>
 8004818:	b108      	cbz	r0, 800481e <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800481a:	2320      	movs	r3, #32
 800481c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	b933      	cbnz	r3, 8004830 <HAL_SPI_Transmit+0x1b4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	9201      	str	r2, [sp, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004830:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004832:	b96b      	cbnz	r3, 8004850 <HAL_SPI_Transmit+0x1d4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004834:	2000      	movs	r0, #0
 8004836:	e739      	b.n	80046ac <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004838:	2001      	movs	r0, #1
 800483a:	e737      	b.n	80046ac <HAL_SPI_Transmit+0x30>
 800483c:	2001      	movs	r0, #1
 800483e:	e735      	b.n	80046ac <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004840:	2003      	movs	r0, #3
 8004842:	e733      	b.n	80046ac <HAL_SPI_Transmit+0x30>
 8004844:	2003      	movs	r0, #3
 8004846:	e731      	b.n	80046ac <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004848:	2003      	movs	r0, #3
 800484a:	e72f      	b.n	80046ac <HAL_SPI_Transmit+0x30>
 800484c:	2003      	movs	r0, #3
 800484e:	e72d      	b.n	80046ac <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004850:	2001      	movs	r0, #1
 8004852:	e72b      	b.n	80046ac <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8004854:	2002      	movs	r0, #2
 8004856:	e72f      	b.n	80046b8 <HAL_SPI_Transmit+0x3c>

08004858 <HAL_SPI_ErrorCallback>:
}
 8004858:	4770      	bx	lr
	...

0800485c <HAL_SPI_IRQHandler>:
{
 800485c:	b530      	push	{r4, r5, lr}
 800485e:	b085      	sub	sp, #20
 8004860:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8004862:	6802      	ldr	r2, [r0, #0]
 8004864:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004866:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004868:	f3c3 1180 	ubfx	r1, r3, #6, #1
 800486c:	b949      	cbnz	r1, 8004882 <HAL_SPI_IRQHandler+0x26>
 800486e:	f013 0f01 	tst.w	r3, #1
 8004872:	d006      	beq.n	8004882 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004874:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004878:	d003      	beq.n	8004882 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 800487a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800487c:	4620      	mov	r0, r4
 800487e:	4798      	blx	r3
    return;
 8004880:	e008      	b.n	8004894 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004882:	f013 0f02 	tst.w	r3, #2
 8004886:	d007      	beq.n	8004898 <HAL_SPI_IRQHandler+0x3c>
 8004888:	f010 0f80 	tst.w	r0, #128	; 0x80
 800488c:	d004      	beq.n	8004898 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 800488e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004890:	4620      	mov	r0, r4
 8004892:	4798      	blx	r3
}
 8004894:	b005      	add	sp, #20
 8004896:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004898:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800489c:	b91d      	cbnz	r5, 80048a6 <HAL_SPI_IRQHandler+0x4a>
 800489e:	b911      	cbnz	r1, 80048a6 <HAL_SPI_IRQHandler+0x4a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80048a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048a4:	d0f6      	beq.n	8004894 <HAL_SPI_IRQHandler+0x38>
 80048a6:	f010 0f20 	tst.w	r0, #32
 80048aa:	d0f3      	beq.n	8004894 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048ac:	b179      	cbz	r1, 80048ce <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048ae:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 80048b2:	b2c9      	uxtb	r1, r1
 80048b4:	2903      	cmp	r1, #3
 80048b6:	d053      	beq.n	8004960 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048b8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80048ba:	f041 0104 	orr.w	r1, r1, #4
 80048be:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048c0:	2100      	movs	r1, #0
 80048c2:	9100      	str	r1, [sp, #0]
 80048c4:	68d1      	ldr	r1, [r2, #12]
 80048c6:	9100      	str	r1, [sp, #0]
 80048c8:	6891      	ldr	r1, [r2, #8]
 80048ca:	9100      	str	r1, [sp, #0]
 80048cc:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80048ce:	b165      	cbz	r5, 80048ea <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048d0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80048d2:	f041 0101 	orr.w	r1, r1, #1
 80048d6:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048d8:	2100      	movs	r1, #0
 80048da:	9102      	str	r1, [sp, #8]
 80048dc:	6891      	ldr	r1, [r2, #8]
 80048de:	9102      	str	r1, [sp, #8]
 80048e0:	6811      	ldr	r1, [r2, #0]
 80048e2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80048e6:	6011      	str	r1, [r2, #0]
 80048e8:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80048ee:	d009      	beq.n	8004904 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80048f2:	f043 0308 	orr.w	r3, r3, #8
 80048f6:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048f8:	2300      	movs	r3, #0
 80048fa:	9303      	str	r3, [sp, #12]
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	9303      	str	r3, [sp, #12]
 8004902:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004904:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0c4      	beq.n	8004894 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	6853      	ldr	r3, [r2, #4]
 800490e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004912:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004914:	2301      	movs	r3, #1
 8004916:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800491a:	f010 0f03 	tst.w	r0, #3
 800491e:	d027      	beq.n	8004970 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	6853      	ldr	r3, [r2, #4]
 8004924:	f023 0303 	bic.w	r3, r3, #3
 8004928:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800492a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800492c:	b14b      	cbz	r3, 8004942 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <HAL_SPI_IRQHandler+0x11c>)
 8004930:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004932:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004934:	f7fd fc90 	bl	8002258 <HAL_DMA_Abort_IT>
 8004938:	b118      	cbz	r0, 8004942 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800493a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800493c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004940:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004942:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0a5      	beq.n	8004894 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_SPI_IRQHandler+0x11c>)
 800494a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800494c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800494e:	f7fd fc83 	bl	8002258 <HAL_DMA_Abort_IT>
 8004952:	2800      	cmp	r0, #0
 8004954:	d09e      	beq.n	8004894 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004956:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495c:	6623      	str	r3, [r4, #96]	; 0x60
 800495e:	e799      	b.n	8004894 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004960:	2300      	movs	r3, #0
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	68d3      	ldr	r3, [r2, #12]
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	6893      	ldr	r3, [r2, #8]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	9b01      	ldr	r3, [sp, #4]
        return;
 800496e:	e791      	b.n	8004894 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8004970:	4620      	mov	r0, r4
 8004972:	f7ff ff71 	bl	8004858 <HAL_SPI_ErrorCallback>
 8004976:	e78d      	b.n	8004894 <HAL_SPI_IRQHandler+0x38>
 8004978:	0800497d 	.word	0x0800497d

0800497c <SPI_DMAAbortOnError>:
{
 800497c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800497e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004986:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004988:	f7ff ff66 	bl	8004858 <HAL_SPI_ErrorCallback>
}
 800498c:	bd08      	pop	{r3, pc}
	...

08004990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004992:	6a03      	ldr	r3, [r0, #32]
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049a4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a8:	680d      	ldr	r5, [r1, #0]
 80049aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ac:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049b0:	688d      	ldr	r5, [r1, #8]
 80049b2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b4:	4d18      	ldr	r5, [pc, #96]	; (8004a18 <TIM_OC1_SetConfig+0x88>)
 80049b6:	42a8      	cmp	r0, r5
 80049b8:	d00b      	beq.n	80049d2 <TIM_OC1_SetConfig+0x42>
 80049ba:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80049be:	42a8      	cmp	r0, r5
 80049c0:	d007      	beq.n	80049d2 <TIM_OC1_SetConfig+0x42>
 80049c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049c6:	42a8      	cmp	r0, r5
 80049c8:	d003      	beq.n	80049d2 <TIM_OC1_SetConfig+0x42>
 80049ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049ce:	42a8      	cmp	r0, r5
 80049d0:	d105      	bne.n	80049de <TIM_OC1_SetConfig+0x4e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d6:	68cd      	ldr	r5, [r1, #12]
 80049d8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049da:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049de:	4d0e      	ldr	r5, [pc, #56]	; (8004a18 <TIM_OC1_SetConfig+0x88>)
 80049e0:	42a8      	cmp	r0, r5
 80049e2:	d00b      	beq.n	80049fc <TIM_OC1_SetConfig+0x6c>
 80049e4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80049e8:	42a8      	cmp	r0, r5
 80049ea:	d007      	beq.n	80049fc <TIM_OC1_SetConfig+0x6c>
 80049ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049f0:	42a8      	cmp	r0, r5
 80049f2:	d003      	beq.n	80049fc <TIM_OC1_SetConfig+0x6c>
 80049f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049f8:	42a8      	cmp	r0, r5
 80049fa:	d105      	bne.n	8004a08 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fc:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a00:	694c      	ldr	r4, [r1, #20]
 8004a02:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a04:	698d      	ldr	r5, [r1, #24]
 8004a06:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a0a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a0c:	684a      	ldr	r2, [r1, #4]
 8004a0e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a10:	6203      	str	r3, [r0, #32]
}
 8004a12:	bc30      	pop	{r4, r5}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40012c00 	.word	0x40012c00

08004a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a1e:	6a03      	ldr	r3, [r0, #32]
 8004a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a30:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	680d      	ldr	r5, [r1, #0]
 8004a36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3c:	688d      	ldr	r5, [r1, #8]
 8004a3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a42:	4d14      	ldr	r5, [pc, #80]	; (8004a94 <TIM_OC3_SetConfig+0x78>)
 8004a44:	42a8      	cmp	r0, r5
 8004a46:	d01d      	beq.n	8004a84 <TIM_OC3_SetConfig+0x68>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	4d12      	ldr	r5, [pc, #72]	; (8004a94 <TIM_OC3_SetConfig+0x78>)
 8004a4a:	42a8      	cmp	r0, r5
 8004a4c:	d00b      	beq.n	8004a66 <TIM_OC3_SetConfig+0x4a>
 8004a4e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004a52:	42a8      	cmp	r0, r5
 8004a54:	d007      	beq.n	8004a66 <TIM_OC3_SetConfig+0x4a>
 8004a56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a5a:	42a8      	cmp	r0, r5
 8004a5c:	d003      	beq.n	8004a66 <TIM_OC3_SetConfig+0x4a>
 8004a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a62:	42a8      	cmp	r0, r5
 8004a64:	d107      	bne.n	8004a76 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a66:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	694d      	ldr	r5, [r1, #20]
 8004a6c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a70:	698d      	ldr	r5, [r1, #24]
 8004a72:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a76:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a78:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7a:	684a      	ldr	r2, [r1, #4]
 8004a7c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7e:	6203      	str	r3, [r0, #32]
}
 8004a80:	bc30      	pop	{r4, r5}
 8004a82:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a88:	68cd      	ldr	r5, [r1, #12]
 8004a8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a92:	e7d9      	b.n	8004a48 <TIM_OC3_SetConfig+0x2c>
 8004a94:	40012c00 	.word	0x40012c00

08004a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9a:	6a03      	ldr	r3, [r0, #32]
 8004a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa6:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aac:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	680d      	ldr	r5, [r1, #0]
 8004ab2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aba:	688d      	ldr	r5, [r1, #8]
 8004abc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	4d0d      	ldr	r5, [pc, #52]	; (8004af8 <TIM_OC4_SetConfig+0x60>)
 8004ac2:	42a8      	cmp	r0, r5
 8004ac4:	d00b      	beq.n	8004ade <TIM_OC4_SetConfig+0x46>
 8004ac6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004aca:	42a8      	cmp	r0, r5
 8004acc:	d007      	beq.n	8004ade <TIM_OC4_SetConfig+0x46>
 8004ace:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ad2:	42a8      	cmp	r0, r5
 8004ad4:	d003      	beq.n	8004ade <TIM_OC4_SetConfig+0x46>
 8004ad6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ada:	42a8      	cmp	r0, r5
 8004adc:	d104      	bne.n	8004ae8 <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ade:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae2:	694d      	ldr	r5, [r1, #20]
 8004ae4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aea:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aec:	684b      	ldr	r3, [r1, #4]
 8004aee:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af0:	6202      	str	r2, [r0, #32]
}
 8004af2:	bc30      	pop	{r4, r5}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00

08004afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004afe:	6a03      	ldr	r3, [r0, #32]
 8004b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b0a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	680d      	ldr	r5, [r1, #0]
 8004b16:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b1c:	688d      	ldr	r5, [r1, #8]
 8004b1e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b22:	4d0d      	ldr	r5, [pc, #52]	; (8004b58 <TIM_OC5_SetConfig+0x5c>)
 8004b24:	42a8      	cmp	r0, r5
 8004b26:	d00b      	beq.n	8004b40 <TIM_OC5_SetConfig+0x44>
 8004b28:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004b2c:	42a8      	cmp	r0, r5
 8004b2e:	d007      	beq.n	8004b40 <TIM_OC5_SetConfig+0x44>
 8004b30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b34:	42a8      	cmp	r0, r5
 8004b36:	d003      	beq.n	8004b40 <TIM_OC5_SetConfig+0x44>
 8004b38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b3c:	42a8      	cmp	r0, r5
 8004b3e:	d104      	bne.n	8004b4a <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b40:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b44:	694d      	ldr	r5, [r1, #20]
 8004b46:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b4c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b4e:	684a      	ldr	r2, [r1, #4]
 8004b50:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b52:	6203      	str	r3, [r0, #32]
}
 8004b54:	bc30      	pop	{r4, r5}
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00

08004b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b5e:	6a03      	ldr	r3, [r0, #32]
 8004b60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b6a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b74:	680d      	ldr	r5, [r1, #0]
 8004b76:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b7a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b7e:	688d      	ldr	r5, [r1, #8]
 8004b80:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b84:	4d0d      	ldr	r5, [pc, #52]	; (8004bbc <TIM_OC6_SetConfig+0x60>)
 8004b86:	42a8      	cmp	r0, r5
 8004b88:	d00b      	beq.n	8004ba2 <TIM_OC6_SetConfig+0x46>
 8004b8a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004b8e:	42a8      	cmp	r0, r5
 8004b90:	d007      	beq.n	8004ba2 <TIM_OC6_SetConfig+0x46>
 8004b92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b96:	42a8      	cmp	r0, r5
 8004b98:	d003      	beq.n	8004ba2 <TIM_OC6_SetConfig+0x46>
 8004b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b9e:	42a8      	cmp	r0, r5
 8004ba0:	d104      	bne.n	8004bac <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ba2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ba6:	694d      	ldr	r5, [r1, #20]
 8004ba8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bae:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bb0:	684b      	ldr	r3, [r1, #4]
 8004bb2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb4:	6202      	str	r2, [r0, #32]
}
 8004bb6:	bc30      	pop	{r4, r5}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40012c00 	.word	0x40012c00

08004bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc4:	6a04      	ldr	r4, [r0, #32]
 8004bc6:	f024 0401 	bic.w	r4, r4, #1
 8004bca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bcc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bce:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bd2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004bda:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bdc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004bde:	6203      	str	r3, [r0, #32]
}
 8004be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be8:	6a03      	ldr	r3, [r0, #32]
 8004bea:	f023 0310 	bic.w	r3, r3, #16
 8004bee:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004bf2:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c00:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c06:	6203      	str	r3, [r0, #32]
}
 8004c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c14:	4319      	orrs	r1, r3
 8004c16:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1a:	6081      	str	r1, [r0, #8]
}
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	2302      	movs	r3, #2
 8004c22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c26:	6802      	ldr	r2, [r0, #0]
 8004c28:	6891      	ldr	r1, [r2, #8]
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <HAL_TIM_Base_Start+0x2c>)
 8004c2c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d006      	beq.n	8004c40 <HAL_TIM_Base_Start+0x20>
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c36:	d003      	beq.n	8004c40 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004c46:	2000      	movs	r0, #0
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	00010007 	.word	0x00010007

08004c50 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	2302      	movs	r3, #2
 8004c52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8004c56:	6803      	ldr	r3, [r0, #0]
 8004c58:	6a19      	ldr	r1, [r3, #32]
 8004c5a:	f241 1211 	movw	r2, #4369	; 0x1111
 8004c5e:	4211      	tst	r1, r2
 8004c60:	d108      	bne.n	8004c74 <HAL_TIM_Base_Stop+0x24>
 8004c62:	6a19      	ldr	r1, [r3, #32]
 8004c64:	f240 4244 	movw	r2, #1092	; 0x444
 8004c68:	4211      	tst	r1, r2
 8004c6a:	d103      	bne.n	8004c74 <HAL_TIM_Base_Stop+0x24>
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c80:	6802      	ldr	r2, [r0, #0]
 8004c82:	68d3      	ldr	r3, [r2, #12]
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8a:	6802      	ldr	r2, [r0, #0]
 8004c8c:	6891      	ldr	r1, [r2, #8]
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_TIM_Base_Start_IT+0x28>)
 8004c90:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d006      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x24>
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d003      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8004c9c:	6813      	ldr	r3, [r2, #0]
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	4770      	bx	lr
 8004ca8:	00010007 	.word	0x00010007

08004cac <HAL_TIM_OC_MspInit>:
}
 8004cac:	4770      	bx	lr

08004cae <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_IC_CaptureCallback>:
}
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_TriggerCallback>:
}
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_IRQHandler>:
{
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	f012 0f02 	tst.w	r2, #2
 8004cc2:	d011      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	f012 0f02 	tst.w	r2, #2
 8004cca:	d00d      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ccc:	f06f 0202 	mvn.w	r2, #2
 8004cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd6:	6803      	ldr	r3, [r0, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f013 0f03 	tst.w	r3, #3
 8004cde:	d079      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce0:	f7ff ffe6 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	f012 0f04 	tst.w	r2, #4
 8004cf0:	d012      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	f012 0f04 	tst.w	r2, #4
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cfa:	f06f 0204 	mvn.w	r2, #4
 8004cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d00:	2302      	movs	r3, #2
 8004d02:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004d0c:	d068      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7ff ffce 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d14:	2300      	movs	r3, #0
 8004d16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	f012 0f08 	tst.w	r2, #8
 8004d20:	d012      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	f012 0f08 	tst.w	r2, #8
 8004d28:	d00e      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d2a:	f06f 0208 	mvn.w	r2, #8
 8004d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d30:	2304      	movs	r3, #4
 8004d32:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f013 0f03 	tst.w	r3, #3
 8004d3c:	d057      	beq.n	8004dee <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7ff ffb6 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d44:	2300      	movs	r3, #0
 8004d46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	f012 0f10 	tst.w	r2, #16
 8004d50:	d012      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	f012 0f10 	tst.w	r2, #16
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d5a:	f06f 0210 	mvn.w	r2, #16
 8004d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d60:	2308      	movs	r3, #8
 8004d62:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004d6c:	d046      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f7ff ff9e 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d74:	2300      	movs	r3, #0
 8004d76:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	f012 0f01 	tst.w	r2, #1
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	f012 0f01 	tst.w	r2, #1
 8004d88:	d13f      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004d92:	d003      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004d9a:	d13d      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004dac:	d13b      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004db6:	d003      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004dbe:	d139      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	f012 0f20 	tst.w	r2, #32
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	f012 0f20 	tst.w	r2, #32
 8004dd0:	d137      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x18c>
}
 8004dd2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd4:	f7ff ff6b 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff ff6a 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dde:	e781      	b.n	8004ce4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de0:	4620      	mov	r0, r4
 8004de2:	f7ff ff64 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de6:	4620      	mov	r0, r4
 8004de8:	f7ff ff63 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dec:	e792      	b.n	8004d14 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff ff5d 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff ff5c 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dfa:	e7a3      	b.n	8004d44 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff ff56 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7ff ff55 	bl	8004cb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e08:	e7b4      	b.n	8004d74 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e0a:	f06f 0201 	mvn.w	r2, #1
 8004e0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7fc f855 	bl	8000ec0 <HAL_TIM_PeriodElapsedCallback>
 8004e16:	e7b8      	b.n	8004d8a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 f9b7 	bl	8005192 <HAL_TIMEx_BreakCallback>
 8004e24:	e7ba      	b.n	8004d9c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f000 f9b1 	bl	8005194 <HAL_TIMEx_Break2Callback>
 8004e32:	e7bc      	b.n	8004dae <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7ff ff3a 	bl	8004cb4 <HAL_TIM_TriggerCallback>
 8004e40:	e7be      	b.n	8004dc0 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e42:	f06f 0220 	mvn.w	r2, #32
 8004e46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f000 f9a1 	bl	8005190 <HAL_TIMEx_CommutCallback>
}
 8004e4e:	e7c0      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x11c>

08004e50 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004e50:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e52:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <TIM_Base_SetConfig+0x7c>)
 8004e54:	4290      	cmp	r0, r2
 8004e56:	d002      	beq.n	8004e5e <TIM_Base_SetConfig+0xe>
 8004e58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e5c:	d103      	bne.n	8004e66 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e62:	684a      	ldr	r2, [r1, #4]
 8004e64:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <TIM_Base_SetConfig+0x7c>)
 8004e68:	4290      	cmp	r0, r2
 8004e6a:	d00e      	beq.n	8004e8a <TIM_Base_SetConfig+0x3a>
 8004e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0x3a>
 8004e72:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004e76:	4290      	cmp	r0, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0x3a>
 8004e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e7e:	4290      	cmp	r0, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0x3a>
 8004e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e86:	4290      	cmp	r0, r2
 8004e88:	d103      	bne.n	8004e92 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	68ca      	ldr	r2, [r1, #12]
 8004e90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e96:	694a      	ldr	r2, [r1, #20]
 8004e98:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004e9a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9c:	688b      	ldr	r3, [r1, #8]
 8004e9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ea0:	680b      	ldr	r3, [r1, #0]
 8004ea2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <TIM_Base_SetConfig+0x7c>)
 8004ea6:	4298      	cmp	r0, r3
 8004ea8:	d00b      	beq.n	8004ec2 <TIM_Base_SetConfig+0x72>
 8004eaa:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	d007      	beq.n	8004ec2 <TIM_Base_SetConfig+0x72>
 8004eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb6:	4298      	cmp	r0, r3
 8004eb8:	d003      	beq.n	8004ec2 <TIM_Base_SetConfig+0x72>
 8004eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ebe:	4298      	cmp	r0, r3
 8004ec0:	d101      	bne.n	8004ec6 <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec2:	690b      	ldr	r3, [r1, #16]
 8004ec4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	6143      	str	r3, [r0, #20]
}
 8004eca:	4770      	bx	lr
 8004ecc:	40012c00 	.word	0x40012c00

08004ed0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004ed0:	b1a8      	cbz	r0, 8004efe <HAL_TIM_Base_Init+0x2e>
{
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004eda:	b15b      	cbz	r3, 8004ef4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	2302      	movs	r3, #2
 8004ede:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee2:	1d21      	adds	r1, r4, #4
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	f7ff ffb3 	bl	8004e50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004ef0:	2000      	movs	r0, #0
}
 8004ef2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004ef4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004ef8:	f7fc fb9e 	bl	8001638 <HAL_TIM_Base_MspInit>
 8004efc:	e7ee      	b.n	8004edc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004efe:	2001      	movs	r0, #1
}
 8004f00:	4770      	bx	lr

08004f02 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004f02:	b1a8      	cbz	r0, 8004f30 <HAL_TIM_OC_Init+0x2e>
{
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f0c:	b15b      	cbz	r3, 8004f26 <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f14:	1d21      	adds	r1, r4, #4
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	f7ff ff9a 	bl	8004e50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004f22:	2000      	movs	r0, #0
}
 8004f24:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004f26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004f2a:	f7ff febf 	bl	8004cac <HAL_TIM_OC_MspInit>
 8004f2e:	e7ee      	b.n	8004f0e <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8004f30:	2001      	movs	r0, #1
}
 8004f32:	4770      	bx	lr

08004f34 <TIM_OC2_SetConfig>:
{
 8004f34:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f36:	6a03      	ldr	r3, [r0, #32]
 8004f38:	f023 0310 	bic.w	r3, r3, #16
 8004f3c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004f3e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004f40:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004f42:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f44:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f48:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f4c:	680d      	ldr	r5, [r1, #0]
 8004f4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004f52:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f56:	688d      	ldr	r5, [r1, #8]
 8004f58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f5c:	4d14      	ldr	r5, [pc, #80]	; (8004fb0 <TIM_OC2_SetConfig+0x7c>)
 8004f5e:	42a8      	cmp	r0, r5
 8004f60:	d01d      	beq.n	8004f9e <TIM_OC2_SetConfig+0x6a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	4d13      	ldr	r5, [pc, #76]	; (8004fb0 <TIM_OC2_SetConfig+0x7c>)
 8004f64:	42a8      	cmp	r0, r5
 8004f66:	d00b      	beq.n	8004f80 <TIM_OC2_SetConfig+0x4c>
 8004f68:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004f6c:	42a8      	cmp	r0, r5
 8004f6e:	d007      	beq.n	8004f80 <TIM_OC2_SetConfig+0x4c>
 8004f70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f74:	42a8      	cmp	r0, r5
 8004f76:	d003      	beq.n	8004f80 <TIM_OC2_SetConfig+0x4c>
 8004f78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f7c:	42a8      	cmp	r0, r5
 8004f7e:	d107      	bne.n	8004f90 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f80:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f84:	694d      	ldr	r5, [r1, #20]
 8004f86:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f8a:	698d      	ldr	r5, [r1, #24]
 8004f8c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004f90:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004f92:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004f94:	684a      	ldr	r2, [r1, #4]
 8004f96:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004f98:	6203      	str	r3, [r0, #32]
}
 8004f9a:	bc30      	pop	{r4, r5}
 8004f9c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fa2:	68cd      	ldr	r5, [r1, #12]
 8004fa4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fac:	e7d9      	b.n	8004f62 <TIM_OC2_SetConfig+0x2e>
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00

08004fb4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004fb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d034      	beq.n	8005026 <HAL_TIM_OC_ConfigChannel+0x72>
{
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004fcc:	2a14      	cmp	r2, #20
 8004fce:	d80f      	bhi.n	8004ff0 <HAL_TIM_OC_ConfigChannel+0x3c>
 8004fd0:	e8df f002 	tbb	[pc, r2]
 8004fd4:	0e0e0e0b 	.word	0x0e0e0e0b
 8004fd8:	0e0e0e15 	.word	0x0e0e0e15
 8004fdc:	0e0e0e19 	.word	0x0e0e0e19
 8004fe0:	0e0e0e1d 	.word	0x0e0e0e1d
 8004fe4:	0e0e0e21 	.word	0x0e0e0e21
 8004fe8:	25          	.byte	0x25
 8004fe9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	f7ff fcd0 	bl	8004990 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004ffc:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ffe:	6800      	ldr	r0, [r0, #0]
 8005000:	f7ff ff98 	bl	8004f34 <TIM_OC2_SetConfig>
      break;
 8005004:	e7f4      	b.n	8004ff0 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005006:	6800      	ldr	r0, [r0, #0]
 8005008:	f7ff fd08 	bl	8004a1c <TIM_OC3_SetConfig>
      break;
 800500c:	e7f0      	b.n	8004ff0 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800500e:	6800      	ldr	r0, [r0, #0]
 8005010:	f7ff fd42 	bl	8004a98 <TIM_OC4_SetConfig>
      break;
 8005014:	e7ec      	b.n	8004ff0 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005016:	6800      	ldr	r0, [r0, #0]
 8005018:	f7ff fd70 	bl	8004afc <TIM_OC5_SetConfig>
      break;
 800501c:	e7e8      	b.n	8004ff0 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800501e:	6800      	ldr	r0, [r0, #0]
 8005020:	f7ff fd9c 	bl	8004b5c <TIM_OC6_SetConfig>
      break;
 8005024:	e7e4      	b.n	8004ff0 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 8005026:	2002      	movs	r0, #2
}
 8005028:	4770      	bx	lr

0800502a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800502a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800502c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005032:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005036:	430b      	orrs	r3, r1
 8005038:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	6083      	str	r3, [r0, #8]
}
 800503c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005044:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d064      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0xd2>
{
 800504c:	b510      	push	{r4, lr}
 800504e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005050:	2301      	movs	r3, #1
 8005052:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005056:	2302      	movs	r3, #2
 8005058:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800505c:	6802      	ldr	r2, [r0, #0]
 800505e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_TIM_ConfigClockSource+0xd8>)
 8005062:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005064:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005066:	680b      	ldr	r3, [r1, #0]
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d04a      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0xbe>
 800506c:	d913      	bls.n	8005096 <HAL_TIM_ConfigClockSource+0x52>
 800506e:	2b60      	cmp	r3, #96	; 0x60
 8005070:	d03d      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xaa>
 8005072:	d91e      	bls.n	80050b2 <HAL_TIM_ConfigClockSource+0x6e>
 8005074:	2b70      	cmp	r3, #112	; 0x70
 8005076:	d028      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x86>
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d130      	bne.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800507e:	68cb      	ldr	r3, [r1, #12]
 8005080:	684a      	ldr	r2, [r1, #4]
 8005082:	6889      	ldr	r1, [r1, #8]
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	f7ff ffd0 	bl	800502a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	6893      	ldr	r3, [r2, #8]
 800508e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005092:	6093      	str	r3, [r2, #8]
      break;
 8005094:	e024      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8005096:	2b10      	cmp	r3, #16
 8005098:	d006      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0x64>
 800509a:	d904      	bls.n	80050a6 <HAL_TIM_ConfigClockSource+0x62>
 800509c:	2b20      	cmp	r3, #32
 800509e:	d003      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0x64>
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0x64>
 80050a4:	e01c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
 80050a6:	b9db      	cbnz	r3, 80050e0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a8:	4619      	mov	r1, r3
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	f7ff fdaf 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 80050b0:	e016      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80050b2:	2b50      	cmp	r3, #80	; 0x50
 80050b4:	d114      	bne.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	68ca      	ldr	r2, [r1, #12]
 80050b8:	6849      	ldr	r1, [r1, #4]
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	f7ff fd80 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c0:	2150      	movs	r1, #80	; 0x50
 80050c2:	6820      	ldr	r0, [r4, #0]
 80050c4:	f7ff fda3 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 80050c8:	e00a      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80050ca:	68cb      	ldr	r3, [r1, #12]
 80050cc:	684a      	ldr	r2, [r1, #4]
 80050ce:	6889      	ldr	r1, [r1, #8]
 80050d0:	6820      	ldr	r0, [r4, #0]
 80050d2:	f7ff ffaa 	bl	800502a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80050de:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80050e6:	2000      	movs	r0, #0
 80050e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80050ec:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	68ca      	ldr	r2, [r1, #12]
 80050f0:	6849      	ldr	r1, [r1, #4]
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	f7ff fd77 	bl	8004be6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f8:	2160      	movs	r1, #96	; 0x60
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	f7ff fd87 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 8005100:	e7ee      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	68ca      	ldr	r2, [r1, #12]
 8005104:	6849      	ldr	r1, [r1, #4]
 8005106:	6820      	ldr	r0, [r4, #0]
 8005108:	f7ff fd5a 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	6820      	ldr	r0, [r4, #0]
 8005110:	f7ff fd7d 	bl	8004c0e <TIM_ITRx_SetConfig>
      break;
 8005114:	e7e4      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8005116:	2002      	movs	r0, #2
}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	fffe0088 	.word	0xfffe0088

08005120 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005120:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d02f      	beq.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8005128:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800512a:	2301      	movs	r3, #1
 800512c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	2302      	movs	r3, #2
 8005132:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005136:	6802      	ldr	r2, [r0, #0]
 8005138:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800513a:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800513c:	4c13      	ldr	r4, [pc, #76]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800513e:	42a2      	cmp	r2, r4
 8005140:	d01d      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005146:	680c      	ldr	r4, [r1, #0]
 8005148:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800514a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	6803      	ldr	r3, [r0, #0]
 800514e:	4a0f      	ldr	r2, [pc, #60]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d006      	beq.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d003      	beq.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800515a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800515e:	4293      	cmp	r3, r2
 8005160:	d104      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005162:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005166:	688a      	ldr	r2, [r1, #8]
 8005168:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800516a:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800516c:	2301      	movs	r3, #1
 800516e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005172:	2300      	movs	r3, #0
 8005174:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005178:	4618      	mov	r0, r3
}
 800517a:	bc30      	pop	{r4, r5}
 800517c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800517e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005182:	684c      	ldr	r4, [r1, #4]
 8005184:	4323      	orrs	r3, r4
 8005186:	e7dc      	b.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8005188:	2002      	movs	r0, #2
}
 800518a:	4770      	bx	lr
 800518c:	40012c00 	.word	0x40012c00

08005190 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005190:	4770      	bx	lr

08005192 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005192:	4770      	bx	lr

08005194 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005194:	4770      	bx	lr
	...

08005198 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005198:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800519c:	b99b      	cbnz	r3, 80051c6 <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8310 	mrs	r3, PRIMASK
 80051a2:	b99b      	cbnz	r3, 80051cc <osKernelInitialize+0x34>
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <osKernelInitialize+0x40>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d005      	beq.n	80051b8 <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80051ac:	b98b      	cbnz	r3, 80051d2 <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <osKernelInitialize+0x40>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051b4:	2000      	movs	r0, #0
 80051b6:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051b8:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80051bc:	2a00      	cmp	r2, #0
 80051be:	d0f5      	beq.n	80051ac <osKernelInitialize+0x14>
    stat = osErrorISR;
 80051c0:	f06f 0005 	mvn.w	r0, #5
 80051c4:	4770      	bx	lr
 80051c6:	f06f 0005 	mvn.w	r0, #5
 80051ca:	4770      	bx	lr
 80051cc:	f06f 0005 	mvn.w	r0, #5
 80051d0:	4770      	bx	lr
    } else {
      stat = osError;
 80051d2:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80051d6:	4770      	bx	lr
 80051d8:	200002bc 	.word	0x200002bc

080051dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051dc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051de:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80051e2:	b9b3      	cbnz	r3, 8005212 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e4:	f3ef 8310 	mrs	r3, PRIMASK
 80051e8:	b9b3      	cbnz	r3, 8005218 <osKernelStart+0x3c>
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <osKernelStart+0x48>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d008      	beq.n	8005204 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d113      	bne.n	800521e <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <osKernelStart+0x48>)
 80051f8:	2202      	movs	r2, #2
 80051fa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80051fc:	f001 fb9a 	bl	8006934 <vTaskStartScheduler>
      stat = osOK;
 8005200:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005202:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005204:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005208:	2a00      	cmp	r2, #0
 800520a:	d0f2      	beq.n	80051f2 <osKernelStart+0x16>
    stat = osErrorISR;
 800520c:	f06f 0005 	mvn.w	r0, #5
 8005210:	e7f7      	b.n	8005202 <osKernelStart+0x26>
 8005212:	f06f 0005 	mvn.w	r0, #5
 8005216:	e7f4      	b.n	8005202 <osKernelStart+0x26>
 8005218:	f06f 0005 	mvn.w	r0, #5
 800521c:	e7f1      	b.n	8005202 <osKernelStart+0x26>
      stat = osError;
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005222:	e7ee      	b.n	8005202 <osKernelStart+0x26>
 8005224:	200002bc 	.word	0x200002bc

08005228 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800522c:	2400      	movs	r4, #0
 800522e:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005230:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005234:	bb4c      	cbnz	r4, 800528a <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005236:	f3ef 8310 	mrs	r3, PRIMASK
 800523a:	bb33      	cbnz	r3, 800528a <osThreadNew+0x62>
 800523c:	4b33      	ldr	r3, [pc, #204]	; (800530c <osThreadNew+0xe4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d025      	beq.n	8005290 <osThreadNew+0x68>
 8005244:	b308      	cbz	r0, 800528a <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005246:	2300      	movs	r3, #0
 8005248:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800524c:	b392      	cbz	r2, 80052b4 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 800524e:	6816      	ldr	r6, [r2, #0]
 8005250:	b31e      	cbz	r6, 800529a <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005252:	6994      	ldr	r4, [r2, #24]
 8005254:	b904      	cbnz	r4, 8005258 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8005256:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005258:	1e63      	subs	r3, r4, #1
 800525a:	2b37      	cmp	r3, #55	; 0x37
 800525c:	d852      	bhi.n	8005304 <osThreadNew+0xdc>
 800525e:	6853      	ldr	r3, [r2, #4]
 8005260:	f013 0f01 	tst.w	r3, #1
 8005264:	d150      	bne.n	8005308 <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005266:	6955      	ldr	r5, [r2, #20]
 8005268:	b1d5      	cbz	r5, 80052a0 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800526a:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800526e:	6893      	ldr	r3, [r2, #8]
 8005270:	b12b      	cbz	r3, 800527e <osThreadNew+0x56>
 8005272:	68d7      	ldr	r7, [r2, #12]
 8005274:	2f5b      	cmp	r7, #91	; 0x5b
 8005276:	d902      	bls.n	800527e <osThreadNew+0x56>
 8005278:	6917      	ldr	r7, [r2, #16]
 800527a:	b107      	cbz	r7, 800527e <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800527c:	bb0d      	cbnz	r5, 80052c2 <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800527e:	b193      	cbz	r3, 80052a6 <osThreadNew+0x7e>
    mem   = -1;
 8005280:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8005284:	2d01      	cmp	r5, #1
 8005286:	d023      	beq.n	80052d0 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005288:	b375      	cbz	r5, 80052e8 <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800528a:	9804      	ldr	r0, [sp, #16]
}
 800528c:	b007      	add	sp, #28
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005290:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f8      	bne.n	800528a <osThreadNew+0x62>
 8005298:	e7d4      	b.n	8005244 <osThreadNew+0x1c>
    name  = &empty;
 800529a:	f10d 0617 	add.w	r6, sp, #23
 800529e:	e7d8      	b.n	8005252 <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 80052a0:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80052a4:	e7e3      	b.n	800526e <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052a6:	68d3      	ldr	r3, [r2, #12]
 80052a8:	b96b      	cbnz	r3, 80052c6 <osThreadNew+0x9e>
 80052aa:	6913      	ldr	r3, [r2, #16]
 80052ac:	b173      	cbz	r3, 80052cc <osThreadNew+0xa4>
    mem   = -1;
 80052ae:	f04f 35ff 	mov.w	r5, #4294967295
 80052b2:	e7e7      	b.n	8005284 <osThreadNew+0x5c>
      mem = 0;
 80052b4:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80052b6:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 80052b8:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 80052bc:	f10d 0617 	add.w	r6, sp, #23
 80052c0:	e7e0      	b.n	8005284 <osThreadNew+0x5c>
        mem = 1;
 80052c2:	2501      	movs	r5, #1
 80052c4:	e7de      	b.n	8005284 <osThreadNew+0x5c>
    mem   = -1;
 80052c6:	f04f 35ff 	mov.w	r5, #4294967295
 80052ca:	e7db      	b.n	8005284 <osThreadNew+0x5c>
          mem = 0;
 80052cc:	2500      	movs	r5, #0
 80052ce:	e7d9      	b.n	8005284 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052d0:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80052d2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052d4:	9202      	str	r2, [sp, #8]
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	9400      	str	r4, [sp, #0]
 80052da:	460b      	mov	r3, r1
 80052dc:	4662      	mov	r2, ip
 80052de:	4631      	mov	r1, r6
 80052e0:	f001 fabc 	bl	800685c <xTaskCreateStatic>
 80052e4:	9004      	str	r0, [sp, #16]
 80052e6:	e7d0      	b.n	800528a <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052e8:	aa04      	add	r2, sp, #16
 80052ea:	9201      	str	r2, [sp, #4]
 80052ec:	9400      	str	r4, [sp, #0]
 80052ee:	460b      	mov	r3, r1
 80052f0:	fa1f f28c 	uxth.w	r2, ip
 80052f4:	4631      	mov	r1, r6
 80052f6:	f001 faea 	bl	80068ce <xTaskCreate>
 80052fa:	2801      	cmp	r0, #1
 80052fc:	d0c5      	beq.n	800528a <osThreadNew+0x62>
          hTask = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	e7c2      	b.n	800528a <osThreadNew+0x62>
        return (NULL);
 8005304:	2000      	movs	r0, #0
 8005306:	e7c1      	b.n	800528c <osThreadNew+0x64>
 8005308:	2000      	movs	r0, #0
 800530a:	e7bf      	b.n	800528c <osThreadNew+0x64>
 800530c:	200002bc 	.word	0x200002bc

08005310 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005310:	b530      	push	{r4, r5, lr}
 8005312:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005314:	b370      	cbz	r0, 8005374 <osThreadFlagsSet+0x64>
 8005316:	4605      	mov	r5, r0
 8005318:	2900      	cmp	r1, #0
 800531a:	db2b      	blt.n	8005374 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005322:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 8005326:	b94b      	cbnz	r3, 800533c <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005328:	f3ef 8310 	mrs	r3, PRIMASK
 800532c:	b933      	cbnz	r3, 800533c <osThreadFlagsSet+0x2c>
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <osThreadFlagsSet+0x88>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d124      	bne.n	8005380 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005336:	f3ef 8311 	mrs	r3, BASEPRI
 800533a:	b30b      	cbz	r3, 8005380 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 800533c:	2400      	movs	r4, #0
 800533e:	ab04      	add	r3, sp, #16
 8005340:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4623      	mov	r3, r4
 8005348:	2201      	movs	r2, #1
 800534a:	4628      	mov	r0, r5
 800534c:	f001 ff52 	bl	80071f4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005350:	9400      	str	r4, [sp, #0]
 8005352:	ab03      	add	r3, sp, #12
 8005354:	4622      	mov	r2, r4
 8005356:	4621      	mov	r1, r4
 8005358:	4628      	mov	r0, r5
 800535a:	f001 ff4b 	bl	80071f4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800535e:	9b02      	ldr	r3, [sp, #8]
 8005360:	b15b      	cbz	r3, 800537a <osThreadFlagsSet+0x6a>
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <osThreadFlagsSet+0x8c>)
 8005364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	e002      	b.n	800537a <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8005374:	f06f 0303 	mvn.w	r3, #3
 8005378:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 800537a:	9803      	ldr	r0, [sp, #12]
 800537c:	b005      	add	sp, #20
 800537e:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005380:	2300      	movs	r3, #0
 8005382:	2201      	movs	r2, #1
 8005384:	4628      	mov	r0, r5
 8005386:	f001 fec5 	bl	8007114 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800538a:	ab03      	add	r3, sp, #12
 800538c:	2200      	movs	r2, #0
 800538e:	4611      	mov	r1, r2
 8005390:	4628      	mov	r0, r5
 8005392:	f001 febf 	bl	8007114 <xTaskGenericNotify>
 8005396:	e7f0      	b.n	800537a <osThreadFlagsSet+0x6a>
 8005398:	200002bc 	.word	0x200002bc
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053a4:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 80053a8:	bb5b      	cbnz	r3, 8005402 <osThreadFlagsClear+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053aa:	f3ef 8310 	mrs	r3, PRIMASK
 80053ae:	bb6b      	cbnz	r3, 800540c <osThreadFlagsClear+0x6c>
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <osThreadFlagsClear+0x78>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d00f      	beq.n	80053d8 <osThreadFlagsClear+0x38>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80053b8:	2800      	cmp	r0, #0
 80053ba:	db2a      	blt.n	8005412 <osThreadFlagsClear+0x72>
 80053bc:	4604      	mov	r4, r0
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80053be:	f001 fd55 	bl	8006e6c <xTaskGetCurrentTaskHandle>
 80053c2:	4606      	mov	r6, r0

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80053c4:	ab01      	add	r3, sp, #4
 80053c6:	2200      	movs	r2, #0
 80053c8:	4611      	mov	r1, r2
 80053ca:	f001 fea3 	bl	8007114 <xTaskGenericNotify>
 80053ce:	2801      	cmp	r0, #1
 80053d0:	d009      	beq.n	80053e6 <osThreadFlagsClear+0x46>
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
        rflags = (uint32_t)osError;
      }
    }
    else {
      rflags = (uint32_t)osError;
 80053d2:	f04f 35ff 	mov.w	r5, #4294967295
 80053d6:	e016      	b.n	8005406 <osThreadFlagsClear+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0eb      	beq.n	80053b8 <osThreadFlagsClear+0x18>
    rflags = (uint32_t)osErrorISR;
 80053e0:	f06f 0505 	mvn.w	r5, #5
 80053e4:	e00f      	b.n	8005406 <osThreadFlagsClear+0x66>
      rflags = cflags;
 80053e6:	9d01      	ldr	r5, [sp, #4]
      cflags &= ~flags;
 80053e8:	ea25 0104 	bic.w	r1, r5, r4
 80053ec:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80053ee:	2300      	movs	r3, #0
 80053f0:	2203      	movs	r2, #3
 80053f2:	4630      	mov	r0, r6
 80053f4:	f001 fe8e 	bl	8007114 <xTaskGenericNotify>
 80053f8:	2801      	cmp	r0, #1
 80053fa:	d004      	beq.n	8005406 <osThreadFlagsClear+0x66>
        rflags = (uint32_t)osError;
 80053fc:	f04f 35ff 	mov.w	r5, #4294967295
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8005400:	e001      	b.n	8005406 <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorISR;
 8005402:	f06f 0505 	mvn.w	r5, #5
}
 8005406:	4628      	mov	r0, r5
 8005408:	b002      	add	sp, #8
 800540a:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 800540c:	f06f 0505 	mvn.w	r5, #5
 8005410:	e7f9      	b.n	8005406 <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorParameter;
 8005412:	f06f 0503 	mvn.w	r5, #3
 8005416:	e7f6      	b.n	8005406 <osThreadFlagsClear+0x66>
 8005418:	200002bc 	.word	0x200002bc

0800541c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005422:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005426:	2b00      	cmp	r3, #0
 8005428:	d14d      	bne.n	80054c6 <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542a:	f3ef 8710 	mrs	r7, PRIMASK
 800542e:	463d      	mov	r5, r7
 8005430:	2f00      	cmp	r7, #0
 8005432:	d14e      	bne.n	80054d2 <osThreadFlagsWait+0xb6>
 8005434:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <osThreadFlagsWait+0xc8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d00d      	beq.n	8005458 <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800543c:	2800      	cmp	r0, #0
 800543e:	db4b      	blt.n	80054d8 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005440:	f011 0f02 	tst.w	r1, #2
 8005444:	d00f      	beq.n	8005466 <osThreadFlagsWait+0x4a>
      clear = 0U;
 8005446:	46b8      	mov	r8, r7
 8005448:	4617      	mov	r7, r2
 800544a:	468a      	mov	sl, r1
 800544c:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 800544e:	f001 fac3 	bl	80069d8 <xTaskGetTickCount>
 8005452:	4683      	mov	fp, r0
    tout   = timeout;
 8005454:	463e      	mov	r6, r7
 8005456:	e028      	b.n	80054aa <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005458:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ed      	beq.n	800543c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005460:	f06f 0505 	mvn.w	r5, #5
 8005464:	e031      	b.n	80054ca <osThreadFlagsWait+0xae>
      clear = flags;
 8005466:	4680      	mov	r8, r0
 8005468:	e7ee      	b.n	8005448 <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 800546a:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005472:	f01a 0f01 	tst.w	sl, #1
 8005476:	d00b      	beq.n	8005490 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8005478:	ea39 0305 	bics.w	r3, r9, r5
 800547c:	d025      	beq.n	80054ca <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 800547e:	b377      	cbz	r7, 80054de <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8005480:	f001 faaa 	bl	80069d8 <xTaskGetTickCount>
 8005484:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 8005488:	4286      	cmp	r6, r0
 800548a:	d309      	bcc.n	80054a0 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 800548c:	1a36      	subs	r6, r6, r0
 800548e:	e00b      	b.n	80054a8 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8005490:	ea19 0f05 	tst.w	r9, r5
 8005494:	d119      	bne.n	80054ca <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8005496:	2f00      	cmp	r7, #0
 8005498:	d1f2      	bne.n	8005480 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 800549a:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 800549e:	e014      	b.n	80054ca <osThreadFlagsWait+0xae>
          tout  = 0;
 80054a0:	2600      	movs	r6, #0
 80054a2:	e001      	b.n	80054a8 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 80054a4:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 80054a8:	b17c      	cbz	r4, 80054ca <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80054aa:	4633      	mov	r3, r6
 80054ac:	aa01      	add	r2, sp, #4
 80054ae:	4641      	mov	r1, r8
 80054b0:	2000      	movs	r0, #0
 80054b2:	f001 fde3 	bl	800707c <xTaskNotifyWait>
 80054b6:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 80054b8:	2801      	cmp	r0, #1
 80054ba:	d0d6      	beq.n	800546a <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 80054bc:	2f00      	cmp	r7, #0
 80054be:	d1f1      	bne.n	80054a4 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 80054c0:	f06f 0502 	mvn.w	r5, #2
 80054c4:	e7f0      	b.n	80054a8 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 80054c6:	f06f 0505 	mvn.w	r5, #5
}
 80054ca:	4628      	mov	r0, r5
 80054cc:	b003      	add	sp, #12
 80054ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 80054d2:	f06f 0505 	mvn.w	r5, #5
 80054d6:	e7f8      	b.n	80054ca <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 80054d8:	f06f 0503 	mvn.w	r5, #3
 80054dc:	e7f5      	b.n	80054ca <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 80054de:	f06f 0502 	mvn.w	r5, #2
 80054e2:	e7f2      	b.n	80054ca <osThreadFlagsWait+0xae>
 80054e4:	200002bc 	.word	0x200002bc

080054e8 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80054e8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ea:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80054ee:	b9a3      	cbnz	r3, 800551a <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f0:	f3ef 8310 	mrs	r3, PRIMASK
 80054f4:	b9a3      	cbnz	r3, 8005520 <osDelay+0x38>
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <osDelay+0x40>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d002      	beq.n	8005504 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80054fe:	b940      	cbnz	r0, 8005512 <osDelay+0x2a>
    stat = osOK;
 8005500:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005502:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005504:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f8      	beq.n	80054fe <osDelay+0x16>
    stat = osErrorISR;
 800550c:	f06f 0005 	mvn.w	r0, #5
 8005510:	e7f7      	b.n	8005502 <osDelay+0x1a>
      vTaskDelay(ticks);
 8005512:	f001 fb6d 	bl	8006bf0 <vTaskDelay>
    stat = osOK;
 8005516:	2000      	movs	r0, #0
 8005518:	e7f3      	b.n	8005502 <osDelay+0x1a>
    stat = osErrorISR;
 800551a:	f06f 0005 	mvn.w	r0, #5
 800551e:	e7f0      	b.n	8005502 <osDelay+0x1a>
 8005520:	f06f 0005 	mvn.w	r0, #5
 8005524:	e7ed      	b.n	8005502 <osDelay+0x1a>
 8005526:	bf00      	nop
 8005528:	200002bc 	.word	0x200002bc

0800552c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005530:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005534:	2b00      	cmp	r3, #0
 8005536:	d15b      	bne.n	80055f0 <osSemaphoreNew+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005538:	f3ef 8310 	mrs	r3, PRIMASK
 800553c:	2b00      	cmp	r3, #0
 800553e:	d159      	bne.n	80055f4 <osSemaphoreNew+0xc8>
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <osSemaphoreNew+0xdc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d021      	beq.n	800558c <osSemaphoreNew+0x60>
 8005548:	2800      	cmp	r0, #0
 800554a:	d055      	beq.n	80055f8 <osSemaphoreNew+0xcc>
 800554c:	4288      	cmp	r0, r1
 800554e:	d355      	bcc.n	80055fc <osSemaphoreNew+0xd0>
    mem = -1;

    if (attr != NULL) {
 8005550:	b312      	cbz	r2, 8005598 <osSemaphoreNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005552:	6893      	ldr	r3, [r2, #8]
 8005554:	b113      	cbz	r3, 800555c <osSemaphoreNew+0x30>
 8005556:	68d4      	ldr	r4, [r2, #12]
 8005558:	2c4f      	cmp	r4, #79	; 0x4f
 800555a:	d81f      	bhi.n	800559c <osSemaphoreNew+0x70>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800555c:	2b00      	cmp	r3, #0
 800555e:	d14f      	bne.n	8005600 <osSemaphoreNew+0xd4>
 8005560:	68d3      	ldr	r3, [r2, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d14e      	bne.n	8005604 <osSemaphoreNew+0xd8>
 8005566:	4614      	mov	r4, r2
 8005568:	460d      	mov	r5, r1
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800556a:	2801      	cmp	r0, #1
 800556c:	d018      	beq.n	80055a0 <osSemaphoreNew+0x74>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800556e:	2b00      	cmp	r3, #0
 8005570:	d137      	bne.n	80055e2 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005572:	f000 fc00 	bl	8005d76 <xQueueCreateCountingSemaphore>
 8005576:	4606      	mov	r6, r0
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005578:	b12e      	cbz	r6, 8005586 <osSemaphoreNew+0x5a>
        if (attr != NULL) {
 800557a:	2c00      	cmp	r4, #0
 800557c:	d036      	beq.n	80055ec <osSemaphoreNew+0xc0>
          name = attr->name;
 800557e:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005580:	4630      	mov	r0, r6
 8005582:	f000 ff85 	bl	8006490 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8005586:	4630      	mov	r0, r6
 8005588:	b002      	add	sp, #8
 800558a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800558c:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0d9      	beq.n	8005548 <osSemaphoreNew+0x1c>
  hSemaphore = NULL;
 8005594:	2600      	movs	r6, #0
 8005596:	e7f6      	b.n	8005586 <osSemaphoreNew+0x5a>
      mem = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	e7e4      	b.n	8005566 <osSemaphoreNew+0x3a>
        mem = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	e7e2      	b.n	8005566 <osSemaphoreNew+0x3a>
        if (mem == 1) {
 80055a0:	b9b3      	cbnz	r3, 80055d0 <osSemaphoreNew+0xa4>
          hSemaphore = xSemaphoreCreateBinary();
 80055a2:	2203      	movs	r2, #3
 80055a4:	2100      	movs	r1, #0
 80055a6:	2001      	movs	r0, #1
 80055a8:	f000 fb99 	bl	8005cde <xQueueGenericCreate>
 80055ac:	4606      	mov	r6, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	d0e2      	beq.n	8005578 <osSemaphoreNew+0x4c>
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	d0e0      	beq.n	8005578 <osSemaphoreNew+0x4c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80055b6:	2300      	movs	r3, #0
 80055b8:	461a      	mov	r2, r3
 80055ba:	4619      	mov	r1, r3
 80055bc:	4630      	mov	r0, r6
 80055be:	f000 fbfb 	bl	8005db8 <xQueueGenericSend>
 80055c2:	2801      	cmp	r0, #1
 80055c4:	d0d8      	beq.n	8005578 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 80055c6:	4630      	mov	r0, r6
 80055c8:	f000 ff8c 	bl	80064e4 <vQueueDelete>
            hSemaphore = NULL;
 80055cc:	2600      	movs	r6, #0
 80055ce:	e7da      	b.n	8005586 <osSemaphoreNew+0x5a>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80055d0:	2303      	movs	r3, #3
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	6893      	ldr	r3, [r2, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	4611      	mov	r1, r2
 80055da:	f000 fb38 	bl	8005c4e <xQueueGenericCreateStatic>
 80055de:	4606      	mov	r6, r0
 80055e0:	e7e5      	b.n	80055ae <osSemaphoreNew+0x82>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80055e2:	6892      	ldr	r2, [r2, #8]
 80055e4:	f000 fba2 	bl	8005d2c <xQueueCreateCountingSemaphoreStatic>
 80055e8:	4606      	mov	r6, r0
 80055ea:	e7c5      	b.n	8005578 <osSemaphoreNew+0x4c>
          name = NULL;
 80055ec:	2100      	movs	r1, #0
 80055ee:	e7c7      	b.n	8005580 <osSemaphoreNew+0x54>
  hSemaphore = NULL;
 80055f0:	2600      	movs	r6, #0
 80055f2:	e7c8      	b.n	8005586 <osSemaphoreNew+0x5a>
 80055f4:	2600      	movs	r6, #0
 80055f6:	e7c6      	b.n	8005586 <osSemaphoreNew+0x5a>
 80055f8:	2600      	movs	r6, #0
 80055fa:	e7c4      	b.n	8005586 <osSemaphoreNew+0x5a>
 80055fc:	2600      	movs	r6, #0
 80055fe:	e7c2      	b.n	8005586 <osSemaphoreNew+0x5a>
 8005600:	2600      	movs	r6, #0
 8005602:	e7c0      	b.n	8005586 <osSemaphoreNew+0x5a>
 8005604:	2600      	movs	r6, #0
  return ((osSemaphoreId_t)hSemaphore);
 8005606:	e7be      	b.n	8005586 <osSemaphoreNew+0x5a>
 8005608:	200002bc 	.word	0x200002bc

0800560c <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800560c:	b370      	cbz	r0, 800566c <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800560e:	b510      	push	{r4, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005614:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005618:	b94b      	cbnz	r3, 800562e <osSemaphoreAcquire+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561a:	f3ef 8310 	mrs	r3, PRIMASK
 800561e:	b933      	cbnz	r3, 800562e <osSemaphoreAcquire+0x22>
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <osSemaphoreAcquire+0x80>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d118      	bne.n	800565a <osSemaphoreAcquire+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005628:	f3ef 8311 	mrs	r3, BASEPRI
 800562c:	b1ab      	cbz	r3, 800565a <osSemaphoreAcquire+0x4e>
    if (timeout != 0U) {
 800562e:	bb04      	cbnz	r4, 8005672 <osSemaphoreAcquire+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8005630:	2100      	movs	r1, #0
 8005632:	aa02      	add	r2, sp, #8
 8005634:	f842 1d04 	str.w	r1, [r2, #-4]!

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005638:	f000 feb6 	bl	80063a8 <xQueueReceiveFromISR>
 800563c:	2801      	cmp	r0, #1
 800563e:	d11b      	bne.n	8005678 <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	b1e3      	cbz	r3, 800567e <osSemaphoreAcquire+0x72>
 8005644:	4b12      	ldr	r3, [pc, #72]	; (8005690 <osSemaphoreAcquire+0x84>)
 8005646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005654:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005656:	b002      	add	sp, #8
 8005658:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800565a:	4621      	mov	r1, r4
 800565c:	f000 fdd6 	bl	800620c <xQueueSemaphoreTake>
 8005660:	2801      	cmp	r0, #1
 8005662:	d00e      	beq.n	8005682 <osSemaphoreAcquire+0x76>
      if (timeout != 0U) {
 8005664:	b17c      	cbz	r4, 8005686 <osSemaphoreAcquire+0x7a>
        stat = osErrorTimeout;
 8005666:	f06f 0001 	mvn.w	r0, #1
 800566a:	e7f4      	b.n	8005656 <osSemaphoreAcquire+0x4a>
    stat = osErrorParameter;
 800566c:	f06f 0003 	mvn.w	r0, #3
}
 8005670:	4770      	bx	lr
      stat = osErrorParameter;
 8005672:	f06f 0003 	mvn.w	r0, #3
 8005676:	e7ee      	b.n	8005656 <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8005678:	f06f 0002 	mvn.w	r0, #2
 800567c:	e7eb      	b.n	8005656 <osSemaphoreAcquire+0x4a>
  stat = osOK;
 800567e:	2000      	movs	r0, #0
 8005680:	e7e9      	b.n	8005656 <osSemaphoreAcquire+0x4a>
 8005682:	2000      	movs	r0, #0
 8005684:	e7e7      	b.n	8005656 <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8005686:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800568a:	e7e4      	b.n	8005656 <osSemaphoreAcquire+0x4a>
 800568c:	200002bc 	.word	0x200002bc
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005694:	b368      	cbz	r0, 80056f2 <osSemaphoreRelease+0x5e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005696:	b500      	push	{lr}
 8005698:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800569a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800569e:	b94b      	cbnz	r3, 80056b4 <osSemaphoreRelease+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a0:	f3ef 8310 	mrs	r3, PRIMASK
 80056a4:	b933      	cbnz	r3, 80056b4 <osSemaphoreRelease+0x20>
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <osSemaphoreRelease+0x74>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d118      	bne.n	80056e0 <osSemaphoreRelease+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
 80056b2:	b1ab      	cbz	r3, 80056e0 <osSemaphoreRelease+0x4c>
    yield = pdFALSE;
 80056b4:	a902      	add	r1, sp, #8
 80056b6:	2300      	movs	r3, #0
 80056b8:	f841 3d04 	str.w	r3, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056bc:	f000 fca0 	bl	8006000 <xQueueGiveFromISR>
 80056c0:	2801      	cmp	r0, #1
 80056c2:	d119      	bne.n	80056f8 <osSemaphoreRelease+0x64>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	b1d3      	cbz	r3, 80056fe <osSemaphoreRelease+0x6a>
 80056c8:	4b10      	ldr	r3, [pc, #64]	; (800570c <osSemaphoreRelease+0x78>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80056d8:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80056da:	b003      	add	sp, #12
 80056dc:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056e0:	2300      	movs	r3, #0
 80056e2:	461a      	mov	r2, r3
 80056e4:	4619      	mov	r1, r3
 80056e6:	f000 fb67 	bl	8005db8 <xQueueGenericSend>
 80056ea:	2801      	cmp	r0, #1
 80056ec:	d109      	bne.n	8005702 <osSemaphoreRelease+0x6e>
  stat = osOK;
 80056ee:	2000      	movs	r0, #0
 80056f0:	e7f3      	b.n	80056da <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80056f2:	f06f 0003 	mvn.w	r0, #3
}
 80056f6:	4770      	bx	lr
      stat = osErrorResource;
 80056f8:	f06f 0002 	mvn.w	r0, #2
 80056fc:	e7ed      	b.n	80056da <osSemaphoreRelease+0x46>
  stat = osOK;
 80056fe:	2000      	movs	r0, #0
 8005700:	e7eb      	b.n	80056da <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8005702:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005706:	e7e8      	b.n	80056da <osSemaphoreRelease+0x46>
 8005708:	200002bc 	.word	0x200002bc
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005714:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005718:	2b00      	cmp	r3, #0
 800571a:	d14c      	bne.n	80057b6 <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8310 	mrs	r3, PRIMASK
 8005720:	2b00      	cmp	r3, #0
 8005722:	d14a      	bne.n	80057ba <osMessageQueueNew+0xaa>
 8005724:	4b29      	ldr	r3, [pc, #164]	; (80057cc <osMessageQueueNew+0xbc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d023      	beq.n	8005774 <osMessageQueueNew+0x64>
 800572c:	2800      	cmp	r0, #0
 800572e:	d046      	beq.n	80057be <osMessageQueueNew+0xae>
 8005730:	2900      	cmp	r1, #0
 8005732:	d046      	beq.n	80057c2 <osMessageQueueNew+0xb2>
 8005734:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 8005736:	2a00      	cmp	r2, #0
 8005738:	d034      	beq.n	80057a4 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800573a:	6893      	ldr	r3, [r2, #8]
 800573c:	b14b      	cbz	r3, 8005752 <osMessageQueueNew+0x42>
 800573e:	68d2      	ldr	r2, [r2, #12]
 8005740:	2a4f      	cmp	r2, #79	; 0x4f
 8005742:	d906      	bls.n	8005752 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005744:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005746:	b122      	cbz	r2, 8005752 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005748:	6966      	ldr	r6, [r4, #20]
 800574a:	fb01 f500 	mul.w	r5, r1, r0
 800574e:	42ae      	cmp	r6, r5
 8005750:	d222      	bcs.n	8005798 <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005752:	b1ab      	cbz	r3, 8005780 <osMessageQueueNew+0x70>
    mem = -1;
 8005754:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005758:	bbab      	cbnz	r3, 80057c6 <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 800575a:	2200      	movs	r2, #0
 800575c:	f000 fabf 	bl	8005cde <xQueueGenericCreate>
 8005760:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005762:	b125      	cbz	r5, 800576e <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8005764:	b32c      	cbz	r4, 80057b2 <osMessageQueueNew+0xa2>
        name = attr->name;
 8005766:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8005768:	4628      	mov	r0, r5
 800576a:	f000 fe91 	bl	8006490 <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800576e:	4628      	mov	r0, r5
 8005770:	b002      	add	sp, #8
 8005772:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005774:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0d7      	beq.n	800572c <osMessageQueueNew+0x1c>
  hQueue = NULL;
 800577c:	2500      	movs	r5, #0
 800577e:	e7f6      	b.n	800576e <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005780:	68e3      	ldr	r3, [r4, #12]
 8005782:	b98b      	cbnz	r3, 80057a8 <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005784:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005786:	b113      	cbz	r3, 800578e <osMessageQueueNew+0x7e>
    mem = -1;
 8005788:	f04f 33ff 	mov.w	r3, #4294967295
 800578c:	e7e4      	b.n	8005758 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800578e:	6963      	ldr	r3, [r4, #20]
 8005790:	b16b      	cbz	r3, 80057ae <osMessageQueueNew+0x9e>
    mem = -1;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	e7df      	b.n	8005758 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005798:	2500      	movs	r5, #0
 800579a:	9500      	str	r5, [sp, #0]
 800579c:	f000 fa57 	bl	8005c4e <xQueueGenericCreateStatic>
 80057a0:	4605      	mov	r5, r0
 80057a2:	e7de      	b.n	8005762 <osMessageQueueNew+0x52>
      mem = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e7d7      	b.n	8005758 <osMessageQueueNew+0x48>
    mem = -1;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	e7d4      	b.n	8005758 <osMessageQueueNew+0x48>
          mem = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e7d2      	b.n	8005758 <osMessageQueueNew+0x48>
        name = NULL;
 80057b2:	2100      	movs	r1, #0
 80057b4:	e7d8      	b.n	8005768 <osMessageQueueNew+0x58>
  hQueue = NULL;
 80057b6:	2500      	movs	r5, #0
 80057b8:	e7d9      	b.n	800576e <osMessageQueueNew+0x5e>
 80057ba:	2500      	movs	r5, #0
 80057bc:	e7d7      	b.n	800576e <osMessageQueueNew+0x5e>
 80057be:	2500      	movs	r5, #0
 80057c0:	e7d5      	b.n	800576e <osMessageQueueNew+0x5e>
 80057c2:	2500      	movs	r5, #0
 80057c4:	e7d3      	b.n	800576e <osMessageQueueNew+0x5e>
 80057c6:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 80057c8:	e7d1      	b.n	800576e <osMessageQueueNew+0x5e>
 80057ca:	bf00      	nop
 80057cc:	200002bc 	.word	0x200002bc

080057d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80057d0:	b510      	push	{r4, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80057da:	b9b3      	cbnz	r3, 800580a <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057dc:	f3ef 8310 	mrs	r3, PRIMASK
 80057e0:	b99b      	cbnz	r3, 800580a <osMessageQueuePut+0x3a>
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <osMessageQueuePut+0x9c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d00b      	beq.n	8005802 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80057ea:	b3a0      	cbz	r0, 8005856 <osMessageQueuePut+0x86>
 80057ec:	b3b1      	cbz	r1, 800585c <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80057ee:	2300      	movs	r3, #0
 80057f0:	4622      	mov	r2, r4
 80057f2:	f000 fae1 	bl	8005db8 <xQueueGenericSend>
 80057f6:	2801      	cmp	r0, #1
 80057f8:	d033      	beq.n	8005862 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 80057fa:	b3a4      	cbz	r4, 8005866 <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 80057fc:	f06f 0001 	mvn.w	r0, #1
 8005800:	e027      	b.n	8005852 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005802:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0ef      	beq.n	80057ea <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800580a:	b1a8      	cbz	r0, 8005838 <osMessageQueuePut+0x68>
 800580c:	b1b9      	cbz	r1, 800583e <osMessageQueuePut+0x6e>
 800580e:	b9cc      	cbnz	r4, 8005844 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	aa02      	add	r2, sp, #8
 8005814:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005818:	f000 fb8c 	bl	8005f34 <xQueueGenericSendFromISR>
 800581c:	2801      	cmp	r0, #1
 800581e:	d114      	bne.n	800584a <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8005820:	9b01      	ldr	r3, [sp, #4]
 8005822:	b1ab      	cbz	r3, 8005850 <osMessageQueuePut+0x80>
 8005824:	4b12      	ldr	r3, [pc, #72]	; (8005870 <osMessageQueuePut+0xa0>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005834:	2000      	movs	r0, #0
 8005836:	e00c      	b.n	8005852 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8005838:	f06f 0003 	mvn.w	r0, #3
 800583c:	e009      	b.n	8005852 <osMessageQueuePut+0x82>
 800583e:	f06f 0003 	mvn.w	r0, #3
 8005842:	e006      	b.n	8005852 <osMessageQueuePut+0x82>
 8005844:	f06f 0003 	mvn.w	r0, #3
 8005848:	e003      	b.n	8005852 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 800584a:	f06f 0002 	mvn.w	r0, #2
 800584e:	e000      	b.n	8005852 <osMessageQueuePut+0x82>
  stat = osOK;
 8005850:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005852:	b002      	add	sp, #8
 8005854:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005856:	f06f 0003 	mvn.w	r0, #3
 800585a:	e7fa      	b.n	8005852 <osMessageQueuePut+0x82>
 800585c:	f06f 0003 	mvn.w	r0, #3
 8005860:	e7f7      	b.n	8005852 <osMessageQueuePut+0x82>
  stat = osOK;
 8005862:	2000      	movs	r0, #0
 8005864:	e7f5      	b.n	8005852 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 8005866:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800586a:	e7f2      	b.n	8005852 <osMessageQueuePut+0x82>
 800586c:	200002bc 	.word	0x200002bc
 8005870:	e000ed04 	.word	0xe000ed04

08005874 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005874:	b510      	push	{r4, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800587a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800587e:	b9ab      	cbnz	r3, 80058ac <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005880:	f3ef 8310 	mrs	r3, PRIMASK
 8005884:	b993      	cbnz	r3, 80058ac <osMessageQueueGet+0x38>
 8005886:	4b22      	ldr	r3, [pc, #136]	; (8005910 <osMessageQueueGet+0x9c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d00a      	beq.n	80058a4 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800588e:	b398      	cbz	r0, 80058f8 <osMessageQueueGet+0x84>
 8005890:	b3a9      	cbz	r1, 80058fe <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005892:	4622      	mov	r2, r4
 8005894:	f000 fc0e 	bl	80060b4 <xQueueReceive>
 8005898:	2801      	cmp	r0, #1
 800589a:	d033      	beq.n	8005904 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 800589c:	b3a4      	cbz	r4, 8005908 <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 800589e:	f06f 0001 	mvn.w	r0, #1
 80058a2:	e027      	b.n	80058f4 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058a4:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058ac:	b1a8      	cbz	r0, 80058da <osMessageQueueGet+0x66>
 80058ae:	b1b9      	cbz	r1, 80058e0 <osMessageQueueGet+0x6c>
 80058b0:	b9cc      	cbnz	r4, 80058e6 <osMessageQueueGet+0x72>
      yield = pdFALSE;
 80058b2:	aa02      	add	r2, sp, #8
 80058b4:	2300      	movs	r3, #0
 80058b6:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80058ba:	f000 fd75 	bl	80063a8 <xQueueReceiveFromISR>
 80058be:	2801      	cmp	r0, #1
 80058c0:	d114      	bne.n	80058ec <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	b1ab      	cbz	r3, 80058f2 <osMessageQueueGet+0x7e>
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <osMessageQueueGet+0xa0>)
 80058c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80058d6:	2000      	movs	r0, #0
 80058d8:	e00c      	b.n	80058f4 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 80058da:	f06f 0003 	mvn.w	r0, #3
 80058de:	e009      	b.n	80058f4 <osMessageQueueGet+0x80>
 80058e0:	f06f 0003 	mvn.w	r0, #3
 80058e4:	e006      	b.n	80058f4 <osMessageQueueGet+0x80>
 80058e6:	f06f 0003 	mvn.w	r0, #3
 80058ea:	e003      	b.n	80058f4 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 80058ec:	f06f 0002 	mvn.w	r0, #2
 80058f0:	e000      	b.n	80058f4 <osMessageQueueGet+0x80>
  stat = osOK;
 80058f2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80058f4:	b002      	add	sp, #8
 80058f6:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 80058f8:	f06f 0003 	mvn.w	r0, #3
 80058fc:	e7fa      	b.n	80058f4 <osMessageQueueGet+0x80>
 80058fe:	f06f 0003 	mvn.w	r0, #3
 8005902:	e7f7      	b.n	80058f4 <osMessageQueueGet+0x80>
  stat = osOK;
 8005904:	2000      	movs	r0, #0
 8005906:	e7f5      	b.n	80058f4 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 8005908:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800590c:	e7f2      	b.n	80058f4 <osMessageQueueGet+0x80>
 800590e:	bf00      	nop
 8005910:	200002bc 	.word	0x200002bc
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8005918:	b198      	cbz	r0, 8005942 <osMessageQueueGetCount+0x2a>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800591a:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591c:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8005920:	b963      	cbnz	r3, 800593c <osMessageQueueGetCount+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005922:	f3ef 8310 	mrs	r3, PRIMASK
 8005926:	b94b      	cbnz	r3, 800593c <osMessageQueueGetCount+0x24>
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <osMessageQueueGetCount+0x30>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d102      	bne.n	8005936 <osMessageQueueGetCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005930:	f3ef 8311 	mrs	r3, BASEPRI
 8005934:	b913      	cbnz	r3, 800593c <osMessageQueueGetCount+0x24>
    count = uxQueueMessagesWaitingFromISR (hQueue);
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005936:	f000 fd8c 	bl	8006452 <uxQueueMessagesWaiting>
 800593a:	e001      	b.n	8005940 <osMessageQueueGetCount+0x28>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800593c:	f000 fd9c 	bl	8006478 <uxQueueMessagesWaitingFromISR>
  }

  return ((uint32_t)count);
}
 8005940:	bd08      	pop	{r3, pc}
    count = 0U;
 8005942:	2000      	movs	r0, #0
}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	200002bc 	.word	0x200002bc

0800594c <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800594c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800594e:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005952:	b99b      	cbnz	r3, 800597c <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005954:	f3ef 8310 	mrs	r3, PRIMASK
 8005958:	b99b      	cbnz	r3, 8005982 <osMessageQueueReset+0x36>
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <osMessageQueueReset+0x44>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d005      	beq.n	800596e <osMessageQueueReset+0x22>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8005962:	b188      	cbz	r0, 8005988 <osMessageQueueReset+0x3c>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8005964:	2100      	movs	r1, #0
 8005966:	f000 f91f 	bl	8005ba8 <xQueueGenericReset>
    stat = osOK;
 800596a:	2000      	movs	r0, #0
  }

  return (stat);
}
 800596c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800596e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f5      	beq.n	8005962 <osMessageQueueReset+0x16>
    stat = osErrorISR;
 8005976:	f06f 0005 	mvn.w	r0, #5
 800597a:	e7f7      	b.n	800596c <osMessageQueueReset+0x20>
 800597c:	f06f 0005 	mvn.w	r0, #5
 8005980:	e7f4      	b.n	800596c <osMessageQueueReset+0x20>
 8005982:	f06f 0005 	mvn.w	r0, #5
 8005986:	e7f1      	b.n	800596c <osMessageQueueReset+0x20>
    stat = osErrorParameter;
 8005988:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800598c:	e7ee      	b.n	800596c <osMessageQueueReset+0x20>
 800598e:	bf00      	nop
 8005990:	200002bc 	.word	0x200002bc

08005994 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <vApplicationGetIdleTaskMemory+0x10>)
 8005996:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005998:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <vApplicationGetIdleTaskMemory+0x14>)
 800599a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000260 	.word	0x20000260
 80059a8:	20000060 	.word	0x20000060

080059ac <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059ac:	4b03      	ldr	r3, [pc, #12]	; (80059bc <vApplicationGetTimerTaskMemory+0x10>)
 80059ae:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <vApplicationGetTimerTaskMemory+0x14>)
 80059b2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b8:	6013      	str	r3, [r2, #0]
}
 80059ba:	4770      	bx	lr
 80059bc:	200006c0 	.word	0x200006c0
 80059c0:	200002c0 	.word	0x200002c0

080059c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c4:	f100 0308 	add.w	r3, r0, #8
 80059c8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ca:	f04f 32ff 	mov.w	r2, #4294967295
 80059ce:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059d8:	4770      	bx	lr

080059da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059de:	4770      	bx	lr

080059e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80059e0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059e2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059ec:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059ee:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80059f0:	6803      	ldr	r3, [r0, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	6003      	str	r3, [r0, #0]
}
 80059f6:	4770      	bx	lr

080059f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059f8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059fa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a00:	d002      	beq.n	8005a08 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a02:	f100 0208 	add.w	r2, r0, #8
 8005a06:	e002      	b.n	8005a0e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a08:	6902      	ldr	r2, [r0, #16]
 8005a0a:	e004      	b.n	8005a16 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6853      	ldr	r3, [r2, #4]
 8005a10:	681c      	ldr	r4, [r3, #0]
 8005a12:	42ac      	cmp	r4, r5
 8005a14:	d9fa      	bls.n	8005a0c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a16:	6853      	ldr	r3, [r2, #4]
 8005a18:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a1a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a1c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a1e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a20:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005a22:	6803      	ldr	r3, [r0, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	6003      	str	r3, [r0, #0]
}
 8005a28:	bc30      	pop	{r4, r5}
 8005a2a:	4770      	bx	lr

08005a2c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a2c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a2e:	6842      	ldr	r2, [r0, #4]
 8005a30:	6881      	ldr	r1, [r0, #8]
 8005a32:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a34:	6882      	ldr	r2, [r0, #8]
 8005a36:	6841      	ldr	r1, [r0, #4]
 8005a38:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	4282      	cmp	r2, r0
 8005a3e:	d006      	beq.n	8005a4e <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a40:	2200      	movs	r2, #0
 8005a42:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	3a01      	subs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a4a:	6818      	ldr	r0, [r3, #0]
}
 8005a4c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a4e:	6882      	ldr	r2, [r0, #8]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	e7f5      	b.n	8005a40 <uxListRemove+0x14>

08005a54 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005a54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a56:	b123      	cbz	r3, 8005a62 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a58:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 8005a60:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a62:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8005a64:	4770      	bx	lr

08005a66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a66:	b510      	push	{r4, lr}
 8005a68:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a6a:	f001 fed3 	bl	8007814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d004      	beq.n	8005a80 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8005a76:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8005a78:	f001 feee 	bl	8007858 <vPortExitCritical>

	return xReturn;
}
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005a80:	2401      	movs	r4, #1
 8005a82:	e7f9      	b.n	8005a78 <prvIsQueueFull+0x12>

08005a84 <prvIsQueueEmpty>:
{
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005a88:	f001 fec4 	bl	8007814 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a8e:	b123      	cbz	r3, 8005a9a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8005a90:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005a92:	f001 fee1 	bl	8007858 <vPortExitCritical>
}
 8005a96:	4620      	mov	r0, r4
 8005a98:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005a9a:	2401      	movs	r4, #1
 8005a9c:	e7f9      	b.n	8005a92 <prvIsQueueEmpty+0xe>

08005a9e <prvCopyDataToQueue>:
{
 8005a9e:	b570      	push	{r4, r5, r6, lr}
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aa6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005aa8:	b95a      	cbnz	r2, 8005ac2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aaa:	6803      	ldr	r3, [r0, #0]
 8005aac:	b11b      	cbz	r3, 8005ab6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005aae:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ab0:	3501      	adds	r5, #1
 8005ab2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005ab4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005ab6:	6840      	ldr	r0, [r0, #4]
 8005ab8:	f001 fa3a 	bl	8006f30 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	6063      	str	r3, [r4, #4]
 8005ac0:	e7f6      	b.n	8005ab0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005ac2:	b96e      	cbnz	r6, 8005ae0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ac4:	6880      	ldr	r0, [r0, #8]
 8005ac6:	f002 f93d 	bl	8007d44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005aca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005acc:	68a3      	ldr	r3, [r4, #8]
 8005ace:	4413      	add	r3, r2
 8005ad0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ad2:	6862      	ldr	r2, [r4, #4]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d319      	bcc.n	8005b0c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005adc:	2000      	movs	r0, #0
 8005ade:	e7e7      	b.n	8005ab0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae0:	68c0      	ldr	r0, [r0, #12]
 8005ae2:	f002 f92f 	bl	8007d44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ae6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ae8:	4252      	negs	r2, r2
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005af0:	6821      	ldr	r1, [r4, #0]
 8005af2:	428b      	cmp	r3, r1
 8005af4:	d202      	bcs.n	8005afc <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	441a      	add	r2, r3
 8005afa:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005afc:	2e02      	cmp	r6, #2
 8005afe:	d001      	beq.n	8005b04 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005b00:	2000      	movs	r0, #0
 8005b02:	e7d5      	b.n	8005ab0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b04:	b125      	cbz	r5, 8005b10 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005b06:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e7d1      	b.n	8005ab0 <prvCopyDataToQueue+0x12>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e7cf      	b.n	8005ab0 <prvCopyDataToQueue+0x12>
 8005b10:	2000      	movs	r0, #0
 8005b12:	e7cd      	b.n	8005ab0 <prvCopyDataToQueue+0x12>

08005b14 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b14:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005b16:	b172      	cbz	r2, 8005b36 <prvCopyDataFromQueue+0x22>
{
 8005b18:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b1a:	68c3      	ldr	r3, [r0, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b20:	6844      	ldr	r4, [r0, #4]
 8005b22:	42a3      	cmp	r3, r4
 8005b24:	d301      	bcc.n	8005b2a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b26:	6803      	ldr	r3, [r0, #0]
 8005b28:	60c3      	str	r3, [r0, #12]
 8005b2a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b2c:	68c1      	ldr	r1, [r0, #12]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f002 f908 	bl	8007d44 <memcpy>
}
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	4770      	bx	lr

08005b38 <prvUnlockQueue>:
{
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005b3c:	f001 fe6a 	bl	8007814 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005b40:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005b44:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b46:	e003      	b.n	8005b50 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005b48:	f001 f98a 	bl	8006e60 <vTaskMissedYield>
			--cTxLock;
 8005b4c:	3c01      	subs	r4, #1
 8005b4e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b50:	2c00      	cmp	r4, #0
 8005b52:	dd08      	ble.n	8005b66 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b56:	b133      	cbz	r3, 8005b66 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b58:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005b5c:	f001 f8ee 	bl	8006d3c <xTaskRemoveFromEventList>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d0f3      	beq.n	8005b4c <prvUnlockQueue+0x14>
 8005b64:	e7f0      	b.n	8005b48 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8005b66:	23ff      	movs	r3, #255	; 0xff
 8005b68:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005b6c:	f001 fe74 	bl	8007858 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005b70:	f001 fe50 	bl	8007814 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005b74:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005b78:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b7a:	e003      	b.n	8005b84 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8005b7c:	f001 f970 	bl	8006e60 <vTaskMissedYield>
				--cRxLock;
 8005b80:	3c01      	subs	r4, #1
 8005b82:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	dd08      	ble.n	8005b9a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b88:	692b      	ldr	r3, [r5, #16]
 8005b8a:	b133      	cbz	r3, 8005b9a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b8c:	f105 0010 	add.w	r0, r5, #16
 8005b90:	f001 f8d4 	bl	8006d3c <xTaskRemoveFromEventList>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d0f3      	beq.n	8005b80 <prvUnlockQueue+0x48>
 8005b98:	e7f0      	b.n	8005b7c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8005b9a:	23ff      	movs	r3, #255	; 0xff
 8005b9c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005ba0:	f001 fe5a 	bl	8007858 <vPortExitCritical>
}
 8005ba4:	bd38      	pop	{r3, r4, r5, pc}
	...

08005ba8 <xQueueGenericReset>:
{
 8005ba8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005baa:	b940      	cbnz	r0, 8005bbe <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	e7fe      	b.n	8005bbc <xQueueGenericReset+0x14>
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8005bc2:	f001 fe27 	bl	8007814 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005bc6:	6821      	ldr	r1, [r4, #0]
 8005bc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bcc:	fb03 1002 	mla	r0, r3, r2, r1
 8005bd0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bd6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005bd8:	3a01      	subs	r2, #1
 8005bda:	fb02 1303 	mla	r3, r2, r3, r1
 8005bde:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005be0:	23ff      	movs	r3, #255	; 0xff
 8005be2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005bea:	b9a5      	cbnz	r5, 8005c16 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	b91b      	cbnz	r3, 8005bf8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005bf0:	f001 fe32 	bl	8007858 <vPortExitCritical>
}
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bf8:	f104 0010 	add.w	r0, r4, #16
 8005bfc:	f001 f89e 	bl	8006d3c <xTaskRemoveFromEventList>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d0f5      	beq.n	8005bf0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8005c04:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <xQueueGenericReset+0x80>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	e7ec      	b.n	8005bf0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c16:	f104 0010 	add.w	r0, r4, #16
 8005c1a:	f7ff fed3 	bl	80059c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c22:	f7ff fecf 	bl	80059c4 <vListInitialise>
 8005c26:	e7e3      	b.n	8005bf0 <xQueueGenericReset+0x48>
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <prvInitialiseNewQueue>:
{
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	461d      	mov	r5, r3
 8005c30:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c32:	460b      	mov	r3, r1
 8005c34:	b149      	cbz	r1, 8005c4a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c36:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005c38:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c3a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f7ff ffb2 	bl	8005ba8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005c44:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c4a:	6024      	str	r4, [r4, #0]
 8005c4c:	e7f4      	b.n	8005c38 <prvInitialiseNewQueue+0xc>

08005c4e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c4e:	b940      	cbnz	r0, 8005c62 <xQueueGenericCreateStatic+0x14>
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericCreateStatic+0x12>
	{
 8005c62:	b510      	push	{r4, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8005c68:	b153      	cbz	r3, 8005c80 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c6a:	b192      	cbz	r2, 8005c92 <xQueueGenericCreateStatic+0x44>
 8005c6c:	b989      	cbnz	r1, 8005c92 <xQueueGenericCreateStatic+0x44>
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	e7fe      	b.n	8005c7e <xQueueGenericCreateStatic+0x30>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c92:	b94a      	cbnz	r2, 8005ca8 <xQueueGenericCreateStatic+0x5a>
 8005c94:	b141      	cbz	r1, 8005ca8 <xQueueGenericCreateStatic+0x5a>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ca8:	2050      	movs	r0, #80	; 0x50
 8005caa:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cac:	9803      	ldr	r0, [sp, #12]
 8005cae:	2850      	cmp	r0, #80	; 0x50
 8005cb0:	d008      	beq.n	8005cc4 <xQueueGenericCreateStatic+0x76>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueGenericCreateStatic+0x74>
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cce:	9400      	str	r4, [sp, #0]
 8005cd0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005cd4:	f7ff ffaa 	bl	8005c2c <prvInitialiseNewQueue>
	}
 8005cd8:	4620      	mov	r0, r4
 8005cda:	b004      	add	sp, #16
 8005cdc:	bd10      	pop	{r4, pc}

08005cde <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cde:	b940      	cbnz	r0, 8005cf2 <xQueueGenericCreate+0x14>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueGenericCreate+0x12>
	{
 8005cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005cf8:	b111      	cbz	r1, 8005d00 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cfa:	fb01 f000 	mul.w	r0, r1, r0
 8005cfe:	e000      	b.n	8005d02 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8005d00:	2000      	movs	r0, #0
 8005d02:	4617      	mov	r7, r2
 8005d04:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005d06:	3050      	adds	r0, #80	; 0x50
 8005d08:	f001 ff3c 	bl	8007b84 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	b150      	cbz	r0, 8005d26 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d16:	9000      	str	r0, [sp, #0]
 8005d18:	463b      	mov	r3, r7
 8005d1a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff ff83 	bl	8005c2c <prvInitialiseNewQueue>
	}
 8005d26:	4628      	mov	r0, r5
 8005d28:	b003      	add	sp, #12
 8005d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d2c <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8005d2c:	b940      	cbnz	r0, 8005d40 <xQueueCreateCountingSemaphoreStatic+0x14>
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	e7fe      	b.n	8005d3e <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d40:	4288      	cmp	r0, r1
 8005d42:	d208      	bcs.n	8005d56 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	e7fe      	b.n	8005d54 <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 8005d56:	b510      	push	{r4, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d5e:	2202      	movs	r2, #2
 8005d60:	9200      	str	r2, [sp, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	4611      	mov	r1, r2
 8005d66:	f7ff ff72 	bl	8005c4e <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	b100      	cbz	r0, 8005d70 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d6e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005d70:	4618      	mov	r0, r3
 8005d72:	b002      	add	sp, #8
 8005d74:	bd10      	pop	{r4, pc}

08005d76 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8005d76:	b940      	cbnz	r0, 8005d8a <xQueueCreateCountingSemaphore+0x14>
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	e7fe      	b.n	8005d88 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d8a:	4288      	cmp	r0, r1
 8005d8c:	d208      	bcs.n	8005da0 <xQueueCreateCountingSemaphore+0x2a>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	e7fe      	b.n	8005d9e <xQueueCreateCountingSemaphore+0x28>
	{
 8005da0:	b510      	push	{r4, lr}
 8005da2:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005da4:	2202      	movs	r2, #2
 8005da6:	2100      	movs	r1, #0
 8005da8:	f7ff ff99 	bl	8005cde <xQueueGenericCreate>
		if( xHandle != NULL )
 8005dac:	4603      	mov	r3, r0
 8005dae:	b100      	cbz	r0, 8005db2 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005db0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005db2:	4618      	mov	r0, r3
 8005db4:	bd10      	pop	{r4, pc}
	...

08005db8 <xQueueGenericSend>:
{
 8005db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005dbe:	b160      	cbz	r0, 8005dda <xQueueGenericSend+0x22>
 8005dc0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc2:	b999      	cbnz	r1, 8005dec <xQueueGenericSend+0x34>
 8005dc4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005dc6:	b18a      	cbz	r2, 8005dec <xQueueGenericSend+0x34>
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericSend+0x20>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	e7fe      	b.n	8005dea <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d10b      	bne.n	8005e08 <xQueueGenericSend+0x50>
 8005df0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005df2:	2a01      	cmp	r2, #1
 8005df4:	d008      	beq.n	8005e08 <xQueueGenericSend+0x50>
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	e7fe      	b.n	8005e06 <xQueueGenericSend+0x4e>
 8005e08:	461e      	mov	r6, r3
 8005e0a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e0c:	f001 f834 	bl	8006e78 <xTaskGetSchedulerState>
 8005e10:	b950      	cbnz	r0, 8005e28 <xQueueGenericSend+0x70>
 8005e12:	9b01      	ldr	r3, [sp, #4]
 8005e14:	b153      	cbz	r3, 8005e2c <xQueueGenericSend+0x74>
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	e7fe      	b.n	8005e26 <xQueueGenericSend+0x6e>
 8005e28:	2500      	movs	r5, #0
 8005e2a:	e03a      	b.n	8005ea2 <xQueueGenericSend+0xea>
 8005e2c:	2500      	movs	r5, #0
 8005e2e:	e038      	b.n	8005ea2 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e30:	4632      	mov	r2, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7ff fe32 	bl	8005a9e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e3c:	b94b      	cbnz	r3, 8005e52 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8005e3e:	b1a8      	cbz	r0, 8005e6c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8005e40:	4b3b      	ldr	r3, [pc, #236]	; (8005f30 <xQueueGenericSend+0x178>)
 8005e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	e00c      	b.n	8005e6c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e56:	f000 ff71 	bl	8006d3c <xTaskRemoveFromEventList>
 8005e5a:	b138      	cbz	r0, 8005e6c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <xQueueGenericSend+0x178>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005e6c:	f001 fcf4 	bl	8007858 <vPortExitCritical>
				return pdPASS;
 8005e70:	2001      	movs	r0, #1
}
 8005e72:	b005      	add	sp, #20
 8005e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8005e76:	f001 fcef 	bl	8007858 <vPortExitCritical>
					return errQUEUE_FULL;
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e7f9      	b.n	8005e72 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e7e:	a802      	add	r0, sp, #8
 8005e80:	f000 ffa2 	bl	8006dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e84:	2501      	movs	r5, #1
 8005e86:	e019      	b.n	8005ebc <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005e8e:	e021      	b.n	8005ed4 <xQueueGenericSend+0x11c>
 8005e90:	2300      	movs	r3, #0
 8005e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e96:	e023      	b.n	8005ee0 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f7ff fe4d 	bl	8005b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e9e:	f000 fe2d 	bl	8006afc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005ea2:	f001 fcb7 	bl	8007814 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ea6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3c0      	bcc.n	8005e30 <xQueueGenericSend+0x78>
 8005eae:	2e02      	cmp	r6, #2
 8005eb0:	d0be      	beq.n	8005e30 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0de      	beq.n	8005e76 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	d0e0      	beq.n	8005e7e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8005ebc:	f001 fccc 	bl	8007858 <vPortExitCritical>
		vTaskSuspendAll();
 8005ec0:	f000 fd82 	bl	80069c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ec4:	f001 fca6 	bl	8007814 <vPortEnterCritical>
 8005ec8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d0d9      	beq.n	8005e88 <xQueueGenericSend+0xd0>
 8005ed4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005ed8:	b25b      	sxtb	r3, r3
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d0d7      	beq.n	8005e90 <xQueueGenericSend+0xd8>
 8005ee0:	f001 fcba 	bl	8007858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ee4:	a901      	add	r1, sp, #4
 8005ee6:	a802      	add	r0, sp, #8
 8005ee8:	f000 ff7a 	bl	8006de0 <xTaskCheckForTimeOut>
 8005eec:	b9c8      	cbnz	r0, 8005f22 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f7ff fdb9 	bl	8005a66 <prvIsQueueFull>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0cf      	beq.n	8005e98 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ef8:	9901      	ldr	r1, [sp, #4]
 8005efa:	f104 0010 	add.w	r0, r4, #16
 8005efe:	f000 fee9 	bl	8006cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff fe18 	bl	8005b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f08:	f000 fdf8 	bl	8006afc <xTaskResumeAll>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d1c8      	bne.n	8005ea2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <xQueueGenericSend+0x178>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	e7bf      	b.n	8005ea2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff fe08 	bl	8005b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f28:	f000 fde8 	bl	8006afc <xTaskResumeAll>
			return errQUEUE_FULL;
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	e7a0      	b.n	8005e72 <xQueueGenericSend+0xba>
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <xQueueGenericSendFromISR>:
{
 8005f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005f38:	b160      	cbz	r0, 8005f54 <xQueueGenericSendFromISR+0x20>
 8005f3a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f3c:	b999      	cbnz	r1, 8005f66 <xQueueGenericSendFromISR+0x32>
 8005f3e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005f40:	b188      	cbz	r0, 8005f66 <xQueueGenericSendFromISR+0x32>
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	e7fe      	b.n	8005f52 <xQueueGenericSendFromISR+0x1e>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	e7fe      	b.n	8005f64 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d10b      	bne.n	8005f82 <xQueueGenericSendFromISR+0x4e>
 8005f6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005f6c:	2801      	cmp	r0, #1
 8005f6e:	d008      	beq.n	8005f82 <xQueueGenericSendFromISR+0x4e>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	e7fe      	b.n	8005f80 <xQueueGenericSendFromISR+0x4c>
 8005f82:	461f      	mov	r7, r3
 8005f84:	4690      	mov	r8, r2
 8005f86:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f88:	f001 fd6e 	bl	8007a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f8c:	f3ef 8611 	mrs	r6, BASEPRI
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005fa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d303      	bcc.n	8005fb0 <xQueueGenericSendFromISR+0x7c>
 8005fa8:	2f02      	cmp	r7, #2
 8005faa:	d001      	beq.n	8005fb0 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8005fac:	2000      	movs	r0, #0
 8005fae:	e00f      	b.n	8005fd0 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fb0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005fb4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	4649      	mov	r1, r9
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff fd6f 	bl	8005a9e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005fc0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005fc4:	d008      	beq.n	8005fd8 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fc6:	1c6b      	adds	r3, r5, #1
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8005fce:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fd0:	f386 8811 	msr	BASEPRI, r6
}
 8005fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fda:	b15b      	cbz	r3, 8005ff4 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005fe0:	f000 feac 	bl	8006d3c <xTaskRemoveFromEventList>
 8005fe4:	b140      	cbz	r0, 8005ff8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005fe6:	f1b8 0f00 	cmp.w	r8, #0
 8005fea:	d007      	beq.n	8005ffc <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fec:	2001      	movs	r0, #1
 8005fee:	f8c8 0000 	str.w	r0, [r8]
 8005ff2:	e7ed      	b.n	8005fd0 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	e7eb      	b.n	8005fd0 <xQueueGenericSendFromISR+0x9c>
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	e7e9      	b.n	8005fd0 <xQueueGenericSendFromISR+0x9c>
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	e7e7      	b.n	8005fd0 <xQueueGenericSendFromISR+0x9c>

08006000 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8006000:	b160      	cbz	r0, 800601c <xQueueGiveFromISR+0x1c>
{
 8006002:	b570      	push	{r4, r5, r6, lr}
 8006004:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006006:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006008:	b18b      	cbz	r3, 800602e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	e7fe      	b.n	800601a <xQueueGiveFromISR+0x1a>
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	e7fe      	b.n	800602c <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800602e:	6803      	ldr	r3, [r0, #0]
 8006030:	b32b      	cbz	r3, 800607e <xQueueGiveFromISR+0x7e>
 8006032:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006034:	f001 fd18 	bl	8007a68 <vPortValidateInterruptPriority>
	__asm volatile
 8006038:	f3ef 8511 	mrs	r5, BASEPRI
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800604c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800604e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006050:	4293      	cmp	r3, r2
 8006052:	d926      	bls.n	80060a2 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006054:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006058:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800605a:	3201      	adds	r2, #1
 800605c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d118      	bne.n	8006096 <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006066:	b1f3      	cbz	r3, 80060a6 <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006068:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800606c:	f000 fe66 	bl	8006d3c <xTaskRemoveFromEventList>
 8006070:	b1d8      	cbz	r0, 80060aa <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8006072:	b1e6      	cbz	r6, 80060ae <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006074:	2001      	movs	r0, #1
 8006076:	6030      	str	r0, [r6, #0]
	__asm volatile
 8006078:	f385 8811 	msr	BASEPRI, r5
}
 800607c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800607e:	6843      	ldr	r3, [r0, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0d6      	beq.n	8006032 <xQueueGiveFromISR+0x32>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	e7fe      	b.n	8006094 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006096:	3301      	adds	r3, #1
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800609e:	2001      	movs	r0, #1
 80060a0:	e7ea      	b.n	8006078 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 80060a2:	2000      	movs	r0, #0
 80060a4:	e7e8      	b.n	8006078 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 80060a6:	2001      	movs	r0, #1
 80060a8:	e7e6      	b.n	8006078 <xQueueGiveFromISR+0x78>
 80060aa:	2001      	movs	r0, #1
 80060ac:	e7e4      	b.n	8006078 <xQueueGiveFromISR+0x78>
 80060ae:	2001      	movs	r0, #1
 80060b0:	e7e2      	b.n	8006078 <xQueueGiveFromISR+0x78>
	...

080060b4 <xQueueReceive>:
{
 80060b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b6:	b085      	sub	sp, #20
 80060b8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80060ba:	b160      	cbz	r0, 80060d6 <xQueueReceive+0x22>
 80060bc:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060be:	b999      	cbnz	r1, 80060e8 <xQueueReceive+0x34>
 80060c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80060c2:	b18b      	cbz	r3, 80060e8 <xQueueReceive+0x34>
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	e7fe      	b.n	80060d4 <xQueueReceive+0x20>
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	e7fe      	b.n	80060e6 <xQueueReceive+0x32>
 80060e8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ea:	f000 fec5 	bl	8006e78 <xTaskGetSchedulerState>
 80060ee:	b950      	cbnz	r0, 8006106 <xQueueReceive+0x52>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	b153      	cbz	r3, 800610a <xQueueReceive+0x56>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	e7fe      	b.n	8006104 <xQueueReceive+0x50>
 8006106:	2600      	movs	r6, #0
 8006108:	e03e      	b.n	8006188 <xQueueReceive+0xd4>
 800610a:	2600      	movs	r6, #0
 800610c:	e03c      	b.n	8006188 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800610e:	4639      	mov	r1, r7
 8006110:	4620      	mov	r0, r4
 8006112:	f7ff fcff 	bl	8005b14 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006116:	3d01      	subs	r5, #1
 8006118:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	b923      	cbnz	r3, 8006128 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800611e:	f001 fb9b 	bl	8007858 <vPortExitCritical>
				return pdPASS;
 8006122:	2001      	movs	r0, #1
}
 8006124:	b005      	add	sp, #20
 8006126:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006128:	f104 0010 	add.w	r0, r4, #16
 800612c:	f000 fe06 	bl	8006d3c <xTaskRemoveFromEventList>
 8006130:	2800      	cmp	r0, #0
 8006132:	d0f4      	beq.n	800611e <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8006134:	4b34      	ldr	r3, [pc, #208]	; (8006208 <xQueueReceive+0x154>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	e7eb      	b.n	800611e <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8006146:	f001 fb87 	bl	8007858 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800614a:	2000      	movs	r0, #0
 800614c:	e7ea      	b.n	8006124 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800614e:	a802      	add	r0, sp, #8
 8006150:	f000 fe3a 	bl	8006dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006154:	2601      	movs	r6, #1
 8006156:	e021      	b.n	800619c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8006158:	2300      	movs	r3, #0
 800615a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800615e:	e029      	b.n	80061b4 <xQueueReceive+0x100>
 8006160:	2300      	movs	r3, #0
 8006162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006166:	e02b      	b.n	80061c0 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff fce5 	bl	8005b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800616e:	f000 fcc5 	bl	8006afc <xTaskResumeAll>
 8006172:	e009      	b.n	8006188 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff fcdf 	bl	8005b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800617a:	f000 fcbf 	bl	8006afc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800617e:	4620      	mov	r0, r4
 8006180:	f7ff fc80 	bl	8005a84 <prvIsQueueEmpty>
 8006184:	2800      	cmp	r0, #0
 8006186:	d13d      	bne.n	8006204 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8006188:	f001 fb44 	bl	8007814 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800618c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800618e:	2d00      	cmp	r5, #0
 8006190:	d1bd      	bne.n	800610e <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0d6      	beq.n	8006146 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8006198:	2e00      	cmp	r6, #0
 800619a:	d0d8      	beq.n	800614e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 800619c:	f001 fb5c 	bl	8007858 <vPortExitCritical>
		vTaskSuspendAll();
 80061a0:	f000 fc12 	bl	80069c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061a4:	f001 fb36 	bl	8007814 <vPortEnterCritical>
 80061a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d0d1      	beq.n	8006158 <xQueueReceive+0xa4>
 80061b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d0cf      	beq.n	8006160 <xQueueReceive+0xac>
 80061c0:	f001 fb4a 	bl	8007858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c4:	a901      	add	r1, sp, #4
 80061c6:	a802      	add	r0, sp, #8
 80061c8:	f000 fe0a 	bl	8006de0 <xTaskCheckForTimeOut>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d1d1      	bne.n	8006174 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d0:	4620      	mov	r0, r4
 80061d2:	f7ff fc57 	bl	8005a84 <prvIsQueueEmpty>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d0c6      	beq.n	8006168 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061da:	9901      	ldr	r1, [sp, #4]
 80061dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061e0:	f000 fd78 	bl	8006cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061e4:	4620      	mov	r0, r4
 80061e6:	f7ff fca7 	bl	8005b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061ea:	f000 fc87 	bl	8006afc <xTaskResumeAll>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d1ca      	bne.n	8006188 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <xQueueReceive+0x154>)
 80061f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	e7c1      	b.n	8006188 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8006204:	2000      	movs	r0, #0
 8006206:	e78d      	b.n	8006124 <xQueueReceive+0x70>
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <xQueueSemaphoreTake>:
{
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006212:	b940      	cbnz	r0, 8006226 <xQueueSemaphoreTake+0x1a>
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	e7fe      	b.n	8006224 <xQueueSemaphoreTake+0x18>
 8006226:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006228:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800622a:	b143      	cbz	r3, 800623e <xQueueSemaphoreTake+0x32>
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	e7fe      	b.n	800623c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800623e:	f000 fe1b 	bl	8006e78 <xTaskGetSchedulerState>
 8006242:	b950      	cbnz	r0, 800625a <xQueueSemaphoreTake+0x4e>
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	b15b      	cbz	r3, 8006260 <xQueueSemaphoreTake+0x54>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	e7fe      	b.n	8006258 <xQueueSemaphoreTake+0x4c>
 800625a:	2500      	movs	r5, #0
 800625c:	462e      	mov	r6, r5
 800625e:	e051      	b.n	8006304 <xQueueSemaphoreTake+0xf8>
 8006260:	2500      	movs	r5, #0
 8006262:	462e      	mov	r6, r5
 8006264:	e04e      	b.n	8006304 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006266:	3b01      	subs	r3, #1
 8006268:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	b913      	cbnz	r3, 8006274 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800626e:	f000 fef7 	bl	8007060 <pvTaskIncrementMutexHeldCount>
 8006272:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	b163      	cbz	r3, 8006292 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006278:	f104 0010 	add.w	r0, r4, #16
 800627c:	f000 fd5e 	bl	8006d3c <xTaskRemoveFromEventList>
 8006280:	b138      	cbz	r0, 8006292 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 8006282:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <xQueueSemaphoreTake+0x198>)
 8006284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006292:	f001 fae1 	bl	8007858 <vPortExitCritical>
				return pdPASS;
 8006296:	2501      	movs	r5, #1
}
 8006298:	4628      	mov	r0, r5
 800629a:	b004      	add	sp, #16
 800629c:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800629e:	b145      	cbz	r5, 80062b2 <xQueueSemaphoreTake+0xa6>
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	e7fe      	b.n	80062b0 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 80062b2:	f001 fad1 	bl	8007858 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80062b6:	e7ef      	b.n	8006298 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062b8:	a802      	add	r0, sp, #8
 80062ba:	f000 fd85 	bl	8006dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062be:	2601      	movs	r6, #1
 80062c0:	e02a      	b.n	8006318 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 80062c2:	2300      	movs	r3, #0
 80062c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80062c8:	e032      	b.n	8006330 <xQueueSemaphoreTake+0x124>
 80062ca:	2300      	movs	r3, #0
 80062cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062d0:	e034      	b.n	800633c <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 80062d2:	f001 fa9f 	bl	8007814 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80062d6:	6860      	ldr	r0, [r4, #4]
 80062d8:	f000 fdde 	bl	8006e98 <xTaskPriorityInherit>
 80062dc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80062de:	f001 fabb 	bl	8007858 <vPortExitCritical>
 80062e2:	e03b      	b.n	800635c <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 80062e4:	4620      	mov	r0, r4
 80062e6:	f7ff fc27 	bl	8005b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ea:	f000 fc07 	bl	8006afc <xTaskResumeAll>
 80062ee:	e009      	b.n	8006304 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff fc21 	bl	8005b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f6:	f000 fc01 	bl	8006afc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062fa:	4620      	mov	r0, r4
 80062fc:	f7ff fbc2 	bl	8005a84 <prvIsQueueEmpty>
 8006300:	2800      	cmp	r0, #0
 8006302:	d140      	bne.n	8006386 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8006304:	f001 fa86 	bl	8007814 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1ab      	bne.n	8006266 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800630e:	9b01      	ldr	r3, [sp, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0c4      	beq.n	800629e <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8006314:	2e00      	cmp	r6, #0
 8006316:	d0cf      	beq.n	80062b8 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8006318:	f001 fa9e 	bl	8007858 <vPortExitCritical>
		vTaskSuspendAll();
 800631c:	f000 fb54 	bl	80069c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006320:	f001 fa78 	bl	8007814 <vPortEnterCritical>
 8006324:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d0c8      	beq.n	80062c2 <xQueueSemaphoreTake+0xb6>
 8006330:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006334:	b25b      	sxtb	r3, r3
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d0c6      	beq.n	80062ca <xQueueSemaphoreTake+0xbe>
 800633c:	f001 fa8c 	bl	8007858 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006340:	a901      	add	r1, sp, #4
 8006342:	a802      	add	r0, sp, #8
 8006344:	f000 fd4c 	bl	8006de0 <xTaskCheckForTimeOut>
 8006348:	2800      	cmp	r0, #0
 800634a:	d1d1      	bne.n	80062f0 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff fb99 	bl	8005a84 <prvIsQueueEmpty>
 8006352:	2800      	cmp	r0, #0
 8006354:	d0c6      	beq.n	80062e4 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0ba      	beq.n	80062d2 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800635c:	9901      	ldr	r1, [sp, #4]
 800635e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006362:	f000 fcb7 	bl	8006cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006366:	4620      	mov	r0, r4
 8006368:	f7ff fbe6 	bl	8005b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800636c:	f000 fbc6 	bl	8006afc <xTaskResumeAll>
 8006370:	2800      	cmp	r0, #0
 8006372:	d1c7      	bne.n	8006304 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <xQueueSemaphoreTake+0x198>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	e7be      	b.n	8006304 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 8006386:	2d00      	cmp	r5, #0
 8006388:	d086      	beq.n	8006298 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 800638a:	f001 fa43 	bl	8007814 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800638e:	4620      	mov	r0, r4
 8006390:	f7ff fb60 	bl	8005a54 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006394:	4601      	mov	r1, r0
 8006396:	6860      	ldr	r0, [r4, #4]
 8006398:	f000 fe12 	bl	8006fc0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800639c:	f001 fa5c 	bl	8007858 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80063a0:	2500      	movs	r5, #0
 80063a2:	e779      	b.n	8006298 <xQueueSemaphoreTake+0x8c>
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <xQueueReceiveFromISR>:
{
 80063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80063ac:	b160      	cbz	r0, 80063c8 <xQueueReceiveFromISR+0x20>
 80063ae:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b0:	b999      	cbnz	r1, 80063da <xQueueReceiveFromISR+0x32>
 80063b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063b4:	b18b      	cbz	r3, 80063da <xQueueReceiveFromISR+0x32>
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	e7fe      	b.n	80063c6 <xQueueReceiveFromISR+0x1e>
 80063c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	e7fe      	b.n	80063d8 <xQueueReceiveFromISR+0x30>
 80063da:	4617      	mov	r7, r2
 80063dc:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063de:	f001 fb43 	bl	8007a68 <vPortValidateInterruptPriority>
	__asm volatile
 80063e2:	f3ef 8611 	mrs	r6, BASEPRI
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063fa:	f1b8 0f00 	cmp.w	r8, #0
 80063fe:	d01d      	beq.n	800643c <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006400:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006404:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006406:	4649      	mov	r1, r9
 8006408:	4620      	mov	r0, r4
 800640a:	f7ff fb83 	bl	8005b14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800640e:	f108 33ff 	add.w	r3, r8, #4294967295
 8006412:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8006414:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006418:	d005      	beq.n	8006426 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800641a:	1c6b      	adds	r3, r5, #1
 800641c:	b25b      	sxtb	r3, r3
 800641e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8006422:	2001      	movs	r0, #1
 8006424:	e00b      	b.n	800643e <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	b16b      	cbz	r3, 8006446 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642a:	f104 0010 	add.w	r0, r4, #16
 800642e:	f000 fc85 	bl	8006d3c <xTaskRemoveFromEventList>
 8006432:	b150      	cbz	r0, 800644a <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8006434:	b15f      	cbz	r7, 800644e <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006436:	2001      	movs	r0, #1
 8006438:	6038      	str	r0, [r7, #0]
 800643a:	e000      	b.n	800643e <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 800643c:	2000      	movs	r0, #0
	__asm volatile
 800643e:	f386 8811 	msr	BASEPRI, r6
}
 8006442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 8006446:	2001      	movs	r0, #1
 8006448:	e7f9      	b.n	800643e <xQueueReceiveFromISR+0x96>
 800644a:	2001      	movs	r0, #1
 800644c:	e7f7      	b.n	800643e <xQueueReceiveFromISR+0x96>
 800644e:	2001      	movs	r0, #1
 8006450:	e7f5      	b.n	800643e <xQueueReceiveFromISR+0x96>

08006452 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8006452:	b940      	cbnz	r0, 8006466 <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	e7fe      	b.n	8006464 <uxQueueMessagesWaiting+0x12>
{
 8006466:	b510      	push	{r4, lr}
 8006468:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800646a:	f001 f9d3 	bl	8007814 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800646e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8006470:	f001 f9f2 	bl	8007858 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006474:	4620      	mov	r0, r4
 8006476:	bd10      	pop	{r4, pc}

08006478 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8006478:	b108      	cbz	r0, 800647e <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800647a:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800647c:	4770      	bx	lr
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	e7fe      	b.n	800648e <uxQueueMessagesWaitingFromISR+0x16>

08006490 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006490:	2300      	movs	r3, #0
 8006492:	2b07      	cmp	r3, #7
 8006494:	d80c      	bhi.n	80064b0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006496:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <vQueueAddToRegistry+0x24>)
 8006498:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800649c:	b10a      	cbz	r2, 80064a2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800649e:	3301      	adds	r3, #1
 80064a0:	e7f7      	b.n	8006492 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064a2:	4a04      	ldr	r2, [pc, #16]	; (80064b4 <vQueueAddToRegistry+0x24>)
 80064a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064ac:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064ae:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	200028c8 	.word	0x200028c8

080064b8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b07      	cmp	r3, #7
 80064bc:	d80f      	bhi.n	80064de <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80064be:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <vQueueUnregisterQueue+0x28>)
 80064c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80064c4:	6852      	ldr	r2, [r2, #4]
 80064c6:	4282      	cmp	r2, r0
 80064c8:	d001      	beq.n	80064ce <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ca:	3301      	adds	r3, #1
 80064cc:	e7f5      	b.n	80064ba <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80064ce:	4a04      	ldr	r2, [pc, #16]	; (80064e0 <vQueueUnregisterQueue+0x28>)
 80064d0:	2100      	movs	r1, #0
 80064d2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80064d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064da:	6059      	str	r1, [r3, #4]
				break;
 80064dc:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80064de:	4770      	bx	lr
 80064e0:	200028c8 	.word	0x200028c8

080064e4 <vQueueDelete>:
	configASSERT( pxQueue );
 80064e4:	b940      	cbnz	r0, 80064f8 <vQueueDelete+0x14>
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	e7fe      	b.n	80064f6 <vQueueDelete+0x12>
{
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 80064fc:	f7ff ffdc 	bl	80064b8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006500:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006504:	b103      	cbz	r3, 8006508 <vQueueDelete+0x24>
}
 8006506:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 8006508:	4620      	mov	r0, r4
 800650a:	f001 fbbf 	bl	8007c8c <vPortFree>
}
 800650e:	e7fa      	b.n	8006506 <vQueueDelete+0x22>

08006510 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	4604      	mov	r4, r0
 8006514:	460d      	mov	r5, r1
 8006516:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006518:	f001 f97c 	bl	8007814 <vPortEnterCritical>
 800651c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006520:	b25b      	sxtb	r3, r3
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d00d      	beq.n	8006544 <vQueueWaitForMessageRestricted+0x34>
 8006528:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800652c:	b25b      	sxtb	r3, r3
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d00b      	beq.n	800654c <vQueueWaitForMessageRestricted+0x3c>
 8006534:	f001 f990 	bl	8007858 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800653a:	b15b      	cbz	r3, 8006554 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff fafb 	bl	8005b38 <prvUnlockQueue>
	}
 8006542:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8006544:	2300      	movs	r3, #0
 8006546:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800654a:	e7ed      	b.n	8006528 <vQueueWaitForMessageRestricted+0x18>
 800654c:	2300      	movs	r3, #0
 800654e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006552:	e7ef      	b.n	8006534 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006554:	4632      	mov	r2, r6
 8006556:	4629      	mov	r1, r5
 8006558:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800655c:	f000 fbd2 	bl	8006d04 <vTaskPlaceOnEventListRestricted>
 8006560:	e7ec      	b.n	800653c <vQueueWaitForMessageRestricted+0x2c>
	...

08006564 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006564:	4b08      	ldr	r3, [pc, #32]	; (8006588 <prvResetNextTaskUnblockTime+0x24>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	b13b      	cbz	r3, 800657c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <prvResetNextTaskUnblockTime+0x24>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <prvResetNextTaskUnblockTime+0x28>)
 8006578:	601a      	str	r2, [r3, #0]
	}
}
 800657a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <prvResetNextTaskUnblockTime+0x28>)
 800657e:	f04f 32ff 	mov.w	r2, #4294967295
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000720 	.word	0x20000720
 800658c:	20000bc8 	.word	0x20000bc8

08006590 <prvInitialiseNewTask>:
{
 8006590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006594:	4681      	mov	r9, r0
 8006596:	460d      	mov	r5, r1
 8006598:	4617      	mov	r7, r2
 800659a:	469a      	mov	sl, r3
 800659c:	9e08      	ldr	r6, [sp, #32]
 800659e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80065a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065a4:	0092      	lsls	r2, r2, #2
 80065a6:	21a5      	movs	r1, #165	; 0xa5
 80065a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80065aa:	f001 fbd6 	bl	8007d5a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80065ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065b0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80065b4:	3a01      	subs	r2, #1
 80065b6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80065ba:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065be:	2300      	movs	r3, #0
 80065c0:	2b0f      	cmp	r3, #15
 80065c2:	d807      	bhi.n	80065d4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065c4:	5ce9      	ldrb	r1, [r5, r3]
 80065c6:	18e2      	adds	r2, r4, r3
 80065c8:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80065cc:	5cea      	ldrb	r2, [r5, r3]
 80065ce:	b10a      	cbz	r2, 80065d4 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d0:	3301      	adds	r3, #1
 80065d2:	e7f5      	b.n	80065c0 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065d4:	2300      	movs	r3, #0
 80065d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065da:	2e37      	cmp	r6, #55	; 0x37
 80065dc:	d900      	bls.n	80065e0 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065de:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80065e0:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80065e2:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065e4:	2500      	movs	r5, #0
 80065e6:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065e8:	1d20      	adds	r0, r4, #4
 80065ea:	f7ff f9f6 	bl	80059da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065ee:	f104 0018 	add.w	r0, r4, #24
 80065f2:	f7ff f9f2 	bl	80059da <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065f6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f8:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 80065fc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065fe:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006600:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006602:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006606:	4652      	mov	r2, sl
 8006608:	4649      	mov	r1, r9
 800660a:	4638      	mov	r0, r7
 800660c:	f001 f8da 	bl	80077c4 <pxPortInitialiseStack>
 8006610:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006612:	f1b8 0f00 	cmp.w	r8, #0
 8006616:	d001      	beq.n	800661c <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006618:	f8c8 4000 	str.w	r4, [r8]
}
 800661c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006620 <prvInitialiseTaskLists>:
{
 8006620:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006622:	2400      	movs	r4, #0
 8006624:	e007      	b.n	8006636 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006626:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800662a:	0093      	lsls	r3, r2, #2
 800662c:	480e      	ldr	r0, [pc, #56]	; (8006668 <prvInitialiseTaskLists+0x48>)
 800662e:	4418      	add	r0, r3
 8006630:	f7ff f9c8 	bl	80059c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006634:	3401      	adds	r4, #1
 8006636:	2c37      	cmp	r4, #55	; 0x37
 8006638:	d9f5      	bls.n	8006626 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800663a:	4d0c      	ldr	r5, [pc, #48]	; (800666c <prvInitialiseTaskLists+0x4c>)
 800663c:	4628      	mov	r0, r5
 800663e:	f7ff f9c1 	bl	80059c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006642:	4c0b      	ldr	r4, [pc, #44]	; (8006670 <prvInitialiseTaskLists+0x50>)
 8006644:	4620      	mov	r0, r4
 8006646:	f7ff f9bd 	bl	80059c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800664a:	480a      	ldr	r0, [pc, #40]	; (8006674 <prvInitialiseTaskLists+0x54>)
 800664c:	f7ff f9ba 	bl	80059c4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006650:	4809      	ldr	r0, [pc, #36]	; (8006678 <prvInitialiseTaskLists+0x58>)
 8006652:	f7ff f9b7 	bl	80059c4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006656:	4809      	ldr	r0, [pc, #36]	; (800667c <prvInitialiseTaskLists+0x5c>)
 8006658:	f7ff f9b4 	bl	80059c4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800665c:	4b08      	ldr	r3, [pc, #32]	; (8006680 <prvInitialiseTaskLists+0x60>)
 800665e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006660:	4b08      	ldr	r3, [pc, #32]	; (8006684 <prvInitialiseTaskLists+0x64>)
 8006662:	601c      	str	r4, [r3, #0]
}
 8006664:	bd38      	pop	{r3, r4, r5, pc}
 8006666:	bf00      	nop
 8006668:	20000728 	.word	0x20000728
 800666c:	20000ba0 	.word	0x20000ba0
 8006670:	20000bb4 	.word	0x20000bb4
 8006674:	20000bd0 	.word	0x20000bd0
 8006678:	20000bfc 	.word	0x20000bfc
 800667c:	20000be8 	.word	0x20000be8
 8006680:	20000720 	.word	0x20000720
 8006684:	20000724 	.word	0x20000724

08006688 <prvAddNewTaskToReadyList>:
{
 8006688:	b510      	push	{r4, lr}
 800668a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800668c:	f001 f8c2 	bl	8007814 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006690:	4a21      	ldr	r2, [pc, #132]	; (8006718 <prvAddNewTaskToReadyList+0x90>)
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006698:	4b20      	ldr	r3, [pc, #128]	; (800671c <prvAddNewTaskToReadyList+0x94>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	b15b      	cbz	r3, 80066b6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800669e:	4b20      	ldr	r3, [pc, #128]	; (8006720 <prvAddNewTaskToReadyList+0x98>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	b96b      	cbnz	r3, 80066c0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <prvAddNewTaskToReadyList+0x94>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d807      	bhi.n	80066c0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80066b0:	4b1a      	ldr	r3, [pc, #104]	; (800671c <prvAddNewTaskToReadyList+0x94>)
 80066b2:	601c      	str	r4, [r3, #0]
 80066b4:	e004      	b.n	80066c0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80066b6:	4b19      	ldr	r3, [pc, #100]	; (800671c <prvAddNewTaskToReadyList+0x94>)
 80066b8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d027      	beq.n	8006710 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80066c0:	4a18      	ldr	r2, [pc, #96]	; (8006724 <prvAddNewTaskToReadyList+0x9c>)
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066c8:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80066ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066cc:	4a16      	ldr	r2, [pc, #88]	; (8006728 <prvAddNewTaskToReadyList+0xa0>)
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d901      	bls.n	80066d8 <prvAddNewTaskToReadyList+0x50>
 80066d4:	4a14      	ldr	r2, [pc, #80]	; (8006728 <prvAddNewTaskToReadyList+0xa0>)
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80066dc:	009a      	lsls	r2, r3, #2
 80066de:	1d21      	adds	r1, r4, #4
 80066e0:	4812      	ldr	r0, [pc, #72]	; (800672c <prvAddNewTaskToReadyList+0xa4>)
 80066e2:	4410      	add	r0, r2
 80066e4:	f7ff f97c 	bl	80059e0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80066e8:	f001 f8b6 	bl	8007858 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80066ec:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <prvAddNewTaskToReadyList+0x98>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	b16b      	cbz	r3, 800670e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <prvAddNewTaskToReadyList+0x94>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d207      	bcs.n	800670e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <prvAddNewTaskToReadyList+0xa8>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
}
 800670e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006710:	f7ff ff86 	bl	8006620 <prvInitialiseTaskLists>
 8006714:	e7d4      	b.n	80066c0 <prvAddNewTaskToReadyList+0x38>
 8006716:	bf00      	nop
 8006718:	20000b88 	.word	0x20000b88
 800671c:	2000071c 	.word	0x2000071c
 8006720:	20000be4 	.word	0x20000be4
 8006724:	20000b98 	.word	0x20000b98
 8006728:	20000b9c 	.word	0x20000b9c
 800672c:	20000728 	.word	0x20000728
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <prvDeleteTCB>:
	{
 8006734:	b510      	push	{r4, lr}
 8006736:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006738:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800673c:	b933      	cbnz	r3, 800674c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800673e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006740:	f001 faa4 	bl	8007c8c <vPortFree>
				vPortFree( pxTCB );
 8006744:	4620      	mov	r0, r4
 8006746:	f001 faa1 	bl	8007c8c <vPortFree>
	}
 800674a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800674c:	2b01      	cmp	r3, #1
 800674e:	d00a      	beq.n	8006766 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006750:	2b02      	cmp	r3, #2
 8006752:	d0fa      	beq.n	800674a <prvDeleteTCB+0x16>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	e7fe      	b.n	8006764 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8006766:	f001 fa91 	bl	8007c8c <vPortFree>
 800676a:	e7ee      	b.n	800674a <prvDeleteTCB+0x16>

0800676c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <prvCheckTasksWaitingTermination+0x40>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	b1d3      	cbz	r3, 80067a8 <prvCheckTasksWaitingTermination+0x3c>
{
 8006772:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006774:	f001 f84e 	bl	8007814 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006778:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <prvCheckTasksWaitingTermination+0x44>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800677e:	1d20      	adds	r0, r4, #4
 8006780:	f7ff f954 	bl	8005a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006784:	4a0b      	ldr	r2, [pc, #44]	; (80067b4 <prvCheckTasksWaitingTermination+0x48>)
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	3b01      	subs	r3, #1
 800678a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800678c:	4a07      	ldr	r2, [pc, #28]	; (80067ac <prvCheckTasksWaitingTermination+0x40>)
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	3b01      	subs	r3, #1
 8006792:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006794:	f001 f860 	bl	8007858 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff ffcb 	bl	8006734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800679e:	4b03      	ldr	r3, [pc, #12]	; (80067ac <prvCheckTasksWaitingTermination+0x40>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <prvCheckTasksWaitingTermination+0x8>
}
 80067a6:	bd10      	pop	{r4, pc}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	20000b8c 	.word	0x20000b8c
 80067b0:	20000bfc 	.word	0x20000bfc
 80067b4:	20000b88 	.word	0x20000b88

080067b8 <prvIdleTask>:
{
 80067b8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80067ba:	f7ff ffd7 	bl	800676c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <prvIdleTask+0x20>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d9f9      	bls.n	80067ba <prvIdleTask+0x2>
				taskYIELD();
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <prvIdleTask+0x24>)
 80067c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	e7f0      	b.n	80067ba <prvIdleTask+0x2>
 80067d8:	20000728 	.word	0x20000728
 80067dc:	e000ed04 	.word	0xe000ed04

080067e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067e6:	4b17      	ldr	r3, [pc, #92]	; (8006844 <prvAddCurrentTaskToDelayedList+0x64>)
 80067e8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ea:	4b17      	ldr	r3, [pc, #92]	; (8006848 <prvAddCurrentTaskToDelayedList+0x68>)
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	3004      	adds	r0, #4
 80067f0:	f7ff f91c 	bl	8005a2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80067f8:	d013      	beq.n	8006822 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067fa:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067fc:	4b12      	ldr	r3, [pc, #72]	; (8006848 <prvAddCurrentTaskToDelayedList+0x68>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006802:	42a5      	cmp	r5, r4
 8006804:	d816      	bhi.n	8006834 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <prvAddCurrentTaskToDelayedList+0x6c>)
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <prvAddCurrentTaskToDelayedList+0x68>)
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	3104      	adds	r1, #4
 8006810:	f7ff f8f2 	bl	80059f8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006814:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <prvAddCurrentTaskToDelayedList+0x70>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	42a3      	cmp	r3, r4
 800681a:	d912      	bls.n	8006842 <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800681c:	4b0c      	ldr	r3, [pc, #48]	; (8006850 <prvAddCurrentTaskToDelayedList+0x70>)
 800681e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006820:	e00f      	b.n	8006842 <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006822:	2e00      	cmp	r6, #0
 8006824:	d0e9      	beq.n	80067fa <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006826:	4b08      	ldr	r3, [pc, #32]	; (8006848 <prvAddCurrentTaskToDelayedList+0x68>)
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	3104      	adds	r1, #4
 800682c:	4809      	ldr	r0, [pc, #36]	; (8006854 <prvAddCurrentTaskToDelayedList+0x74>)
 800682e:	f7ff f8d7 	bl	80059e0 <vListInsertEnd>
 8006832:	e006      	b.n	8006842 <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <prvAddCurrentTaskToDelayedList+0x78>)
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	4b03      	ldr	r3, [pc, #12]	; (8006848 <prvAddCurrentTaskToDelayedList+0x68>)
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	3104      	adds	r1, #4
 800683e:	f7ff f8db 	bl	80059f8 <vListInsert>
}
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	20000c10 	.word	0x20000c10
 8006848:	2000071c 	.word	0x2000071c
 800684c:	20000720 	.word	0x20000720
 8006850:	20000bc8 	.word	0x20000bc8
 8006854:	20000be8 	.word	0x20000be8
 8006858:	20000724 	.word	0x20000724

0800685c <xTaskCreateStatic>:
	{
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006862:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006864:	b945      	cbnz	r5, 8006878 <xTaskCreateStatic+0x1c>
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	e7fe      	b.n	8006876 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006878:	b944      	cbnz	r4, 800688c <xTaskCreateStatic+0x30>
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	e7fe      	b.n	800688a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800688c:	265c      	movs	r6, #92	; 0x5c
 800688e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006890:	9e04      	ldr	r6, [sp, #16]
 8006892:	2e5c      	cmp	r6, #92	; 0x5c
 8006894:	d008      	beq.n	80068a8 <xTaskCreateStatic+0x4c>
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	e7fe      	b.n	80068a6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068a8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068aa:	2502      	movs	r5, #2
 80068ac:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068b0:	2500      	movs	r5, #0
 80068b2:	9503      	str	r5, [sp, #12]
 80068b4:	9402      	str	r4, [sp, #8]
 80068b6:	ad05      	add	r5, sp, #20
 80068b8:	9501      	str	r5, [sp, #4]
 80068ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80068bc:	9500      	str	r5, [sp, #0]
 80068be:	f7ff fe67 	bl	8006590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff fee0 	bl	8006688 <prvAddNewTaskToReadyList>
	}
 80068c8:	9805      	ldr	r0, [sp, #20]
 80068ca:	b006      	add	sp, #24
 80068cc:	bd70      	pop	{r4, r5, r6, pc}

080068ce <xTaskCreate>:
	{
 80068ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068d2:	b085      	sub	sp, #20
 80068d4:	4607      	mov	r7, r0
 80068d6:	4688      	mov	r8, r1
 80068d8:	4615      	mov	r5, r2
 80068da:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068dc:	0090      	lsls	r0, r2, #2
 80068de:	f001 f951 	bl	8007b84 <pvPortMalloc>
			if( pxStack != NULL )
 80068e2:	b308      	cbz	r0, 8006928 <xTaskCreate+0x5a>
 80068e4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80068e6:	205c      	movs	r0, #92	; 0x5c
 80068e8:	f001 f94c 	bl	8007b84 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80068ec:	4604      	mov	r4, r0
 80068ee:	b1b8      	cbz	r0, 8006920 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 80068f0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80068f2:	b1e4      	cbz	r4, 800692e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068f4:	2300      	movs	r3, #0
 80068f6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068fa:	9303      	str	r3, [sp, #12]
 80068fc:	9402      	str	r4, [sp, #8]
 80068fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	464b      	mov	r3, r9
 8006908:	462a      	mov	r2, r5
 800690a:	4641      	mov	r1, r8
 800690c:	4638      	mov	r0, r7
 800690e:	f7ff fe3f 	bl	8006590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff feb8 	bl	8006688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006918:	2001      	movs	r0, #1
	}
 800691a:	b005      	add	sp, #20
 800691c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006920:	4630      	mov	r0, r6
 8006922:	f001 f9b3 	bl	8007c8c <vPortFree>
 8006926:	e7e4      	b.n	80068f2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	e7f5      	b.n	800691a <xTaskCreate+0x4c>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006932:	e7f2      	b.n	800691a <xTaskCreate+0x4c>

08006934 <vTaskStartScheduler>:
{
 8006934:	b510      	push	{r4, lr}
 8006936:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006938:	2400      	movs	r4, #0
 800693a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800693c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800693e:	aa07      	add	r2, sp, #28
 8006940:	a906      	add	r1, sp, #24
 8006942:	a805      	add	r0, sp, #20
 8006944:	f7ff f826 	bl	8005994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006948:	9b05      	ldr	r3, [sp, #20]
 800694a:	9302      	str	r3, [sp, #8]
 800694c:	9b06      	ldr	r3, [sp, #24]
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	9400      	str	r4, [sp, #0]
 8006952:	4623      	mov	r3, r4
 8006954:	9a07      	ldr	r2, [sp, #28]
 8006956:	4917      	ldr	r1, [pc, #92]	; (80069b4 <vTaskStartScheduler+0x80>)
 8006958:	4817      	ldr	r0, [pc, #92]	; (80069b8 <vTaskStartScheduler+0x84>)
 800695a:	f7ff ff7f 	bl	800685c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800695e:	b140      	cbz	r0, 8006972 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8006960:	f000 fd44 	bl	80073ec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006964:	2801      	cmp	r0, #1
 8006966:	d006      	beq.n	8006976 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006968:	f1b0 3fff 	cmp.w	r0, #4294967295
 800696c:	d018      	beq.n	80069a0 <vTaskStartScheduler+0x6c>
}
 800696e:	b008      	add	sp, #32
 8006970:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8006972:	2000      	movs	r0, #0
 8006974:	e7f6      	b.n	8006964 <vTaskStartScheduler+0x30>
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <vTaskStartScheduler+0x88>)
 8006988:	f04f 32ff 	mov.w	r2, #4294967295
 800698c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <vTaskStartScheduler+0x8c>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <vTaskStartScheduler+0x90>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800699a:	f000 ffdd 	bl	8007958 <xPortStartScheduler>
 800699e:	e7e6      	b.n	800696e <vTaskStartScheduler+0x3a>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	e7fe      	b.n	80069b0 <vTaskStartScheduler+0x7c>
 80069b2:	bf00      	nop
 80069b4:	08007e14 	.word	0x08007e14
 80069b8:	080067b9 	.word	0x080067b9
 80069bc:	20000bc8 	.word	0x20000bc8
 80069c0:	20000be4 	.word	0x20000be4
 80069c4:	20000c10 	.word	0x20000c10

080069c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80069c8:	4a02      	ldr	r2, [pc, #8]	; (80069d4 <vTaskSuspendAll+0xc>)
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	3301      	adds	r3, #1
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000b94 	.word	0x20000b94

080069d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80069d8:	4b01      	ldr	r3, [pc, #4]	; (80069e0 <xTaskGetTickCount+0x8>)
 80069da:	6818      	ldr	r0, [r3, #0]
}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000c10 	.word	0x20000c10

080069e4 <xTaskIncrementTick>:
{
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e6:	4b3a      	ldr	r3, [pc, #232]	; (8006ad0 <xTaskIncrementTick+0xec>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d164      	bne.n	8006ab8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069ee:	4b39      	ldr	r3, [pc, #228]	; (8006ad4 <xTaskIncrementTick+0xf0>)
 80069f0:	681d      	ldr	r5, [r3, #0]
 80069f2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80069f4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069f6:	b9c5      	cbnz	r5, 8006a2a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80069f8:	4b37      	ldr	r3, [pc, #220]	; (8006ad8 <xTaskIncrementTick+0xf4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	b143      	cbz	r3, 8006a12 <xTaskIncrementTick+0x2e>
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	e7fe      	b.n	8006a10 <xTaskIncrementTick+0x2c>
 8006a12:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <xTaskIncrementTick+0xf4>)
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	4b31      	ldr	r3, [pc, #196]	; (8006adc <xTaskIncrementTick+0xf8>)
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	6010      	str	r0, [r2, #0]
 8006a1c:	6019      	str	r1, [r3, #0]
 8006a1e:	4a30      	ldr	r2, [pc, #192]	; (8006ae0 <xTaskIncrementTick+0xfc>)
 8006a20:	6813      	ldr	r3, [r2, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	f7ff fd9d 	bl	8006564 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <xTaskIncrementTick+0x100>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	42ab      	cmp	r3, r5
 8006a30:	d938      	bls.n	8006aa4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8006a32:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a34:	4b2c      	ldr	r3, [pc, #176]	; (8006ae8 <xTaskIncrementTick+0x104>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a3e:	009a      	lsls	r2, r3, #2
 8006a40:	4b2a      	ldr	r3, [pc, #168]	; (8006aec <xTaskIncrementTick+0x108>)
 8006a42:	589b      	ldr	r3, [r3, r2]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d93c      	bls.n	8006ac2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8006a48:	2401      	movs	r4, #1
 8006a4a:	e03a      	b.n	8006ac2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8006a4c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4e:	4b22      	ldr	r3, [pc, #136]	; (8006ad8 <xTaskIncrementTick+0xf4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	b343      	cbz	r3, 8006aa8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a56:	4b20      	ldr	r3, [pc, #128]	; (8006ad8 <xTaskIncrementTick+0xf4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a5e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006a60:	429d      	cmp	r5, r3
 8006a62:	d326      	bcc.n	8006ab2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a64:	1d37      	adds	r7, r6, #4
 8006a66:	4638      	mov	r0, r7
 8006a68:	f7fe ffe0 	bl	8005a2c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a6c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006a6e:	b11b      	cbz	r3, 8006a78 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a70:	f106 0018 	add.w	r0, r6, #24
 8006a74:	f7fe ffda 	bl	8005a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006a7a:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <xTaskIncrementTick+0x10c>)
 8006a7c:	6812      	ldr	r2, [r2, #0]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <xTaskIncrementTick+0xa2>
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <xTaskIncrementTick+0x10c>)
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a8a:	009a      	lsls	r2, r3, #2
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	4817      	ldr	r0, [pc, #92]	; (8006aec <xTaskIncrementTick+0x108>)
 8006a90:	4410      	add	r0, r2
 8006a92:	f7fe ffa5 	bl	80059e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a96:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006a98:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <xTaskIncrementTick+0x104>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d2d4      	bcs.n	8006a4c <xTaskIncrementTick+0x68>
 8006aa2:	e7d4      	b.n	8006a4e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8006aa4:	2400      	movs	r4, #0
 8006aa6:	e7d2      	b.n	8006a4e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <xTaskIncrementTick+0x100>)
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006aae:	601a      	str	r2, [r3, #0]
					break;
 8006ab0:	e7c0      	b.n	8006a34 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006ab2:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <xTaskIncrementTick+0x100>)
 8006ab4:	6013      	str	r3, [r2, #0]
						break;
 8006ab6:	e7bd      	b.n	8006a34 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8006ab8:	4a0e      	ldr	r2, [pc, #56]	; (8006af4 <xTaskIncrementTick+0x110>)
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006ac0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006ac2:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <xTaskIncrementTick+0x114>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8006ac8:	2401      	movs	r4, #1
}
 8006aca:	4620      	mov	r0, r4
 8006acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000b94 	.word	0x20000b94
 8006ad4:	20000c10 	.word	0x20000c10
 8006ad8:	20000720 	.word	0x20000720
 8006adc:	20000724 	.word	0x20000724
 8006ae0:	20000bcc 	.word	0x20000bcc
 8006ae4:	20000bc8 	.word	0x20000bc8
 8006ae8:	2000071c 	.word	0x2000071c
 8006aec:	20000728 	.word	0x20000728
 8006af0:	20000b9c 	.word	0x20000b9c
 8006af4:	20000b90 	.word	0x20000b90
 8006af8:	20000c14 	.word	0x20000c14

08006afc <xTaskResumeAll>:
{
 8006afc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006afe:	4b33      	ldr	r3, [pc, #204]	; (8006bcc <xTaskResumeAll+0xd0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	b943      	cbnz	r3, 8006b16 <xTaskResumeAll+0x1a>
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	e7fe      	b.n	8006b14 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006b16:	f000 fe7d 	bl	8007814 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006b1a:	4b2c      	ldr	r3, [pc, #176]	; (8006bcc <xTaskResumeAll+0xd0>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	3a01      	subs	r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d14d      	bne.n	8006bc4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b28:	4b29      	ldr	r3, [pc, #164]	; (8006bd0 <xTaskResumeAll+0xd4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	b923      	cbnz	r3, 8006b38 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8006b2e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006b30:	f000 fe92 	bl	8007858 <vPortExitCritical>
}
 8006b34:	4620      	mov	r0, r4
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8006b38:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b3a:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <xTaskResumeAll+0xd8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	b31b      	cbz	r3, 8006b88 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b40:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <xTaskResumeAll+0xd8>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b46:	f104 0018 	add.w	r0, r4, #24
 8006b4a:	f7fe ff6f 	bl	8005a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b4e:	1d25      	adds	r5, r4, #4
 8006b50:	4628      	mov	r0, r5
 8006b52:	f7fe ff6b 	bl	8005a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b58:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <xTaskResumeAll+0xdc>)
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d901      	bls.n	8006b64 <xTaskResumeAll+0x68>
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <xTaskResumeAll+0xdc>)
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b68:	009a      	lsls	r2, r3, #2
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	481b      	ldr	r0, [pc, #108]	; (8006bdc <xTaskResumeAll+0xe0>)
 8006b6e:	4410      	add	r0, r2
 8006b70:	f7fe ff36 	bl	80059e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <xTaskResumeAll+0xe4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d3dc      	bcc.n	8006b3a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8006b80:	4b18      	ldr	r3, [pc, #96]	; (8006be4 <xTaskResumeAll+0xe8>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e7d8      	b.n	8006b3a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8006b88:	b10c      	cbz	r4, 8006b8e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8006b8a:	f7ff fceb 	bl	8006564 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b8e:	4b16      	ldr	r3, [pc, #88]	; (8006be8 <xTaskResumeAll+0xec>)
 8006b90:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b92:	b154      	cbz	r4, 8006baa <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8006b94:	f7ff ff26 	bl	80069e4 <xTaskIncrementTick>
 8006b98:	b110      	cbz	r0, 8006ba0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006b9a:	4b12      	ldr	r3, [pc, #72]	; (8006be4 <xTaskResumeAll+0xe8>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ba0:	3c01      	subs	r4, #1
 8006ba2:	d1f7      	bne.n	8006b94 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8006ba4:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <xTaskResumeAll+0xec>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006baa:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <xTaskResumeAll+0xe8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	b15b      	cbz	r3, 8006bc8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8006bb0:	4b0e      	ldr	r3, [pc, #56]	; (8006bec <xTaskResumeAll+0xf0>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006bc0:	2401      	movs	r4, #1
 8006bc2:	e7b5      	b.n	8006b30 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8006bc4:	2400      	movs	r4, #0
 8006bc6:	e7b3      	b.n	8006b30 <xTaskResumeAll+0x34>
 8006bc8:	2400      	movs	r4, #0
 8006bca:	e7b1      	b.n	8006b30 <xTaskResumeAll+0x34>
 8006bcc:	20000b94 	.word	0x20000b94
 8006bd0:	20000b88 	.word	0x20000b88
 8006bd4:	20000bd0 	.word	0x20000bd0
 8006bd8:	20000b9c 	.word	0x20000b9c
 8006bdc:	20000728 	.word	0x20000728
 8006be0:	2000071c 	.word	0x2000071c
 8006be4:	20000c14 	.word	0x20000c14
 8006be8:	20000b90 	.word	0x20000b90
 8006bec:	e000ed04 	.word	0xe000ed04

08006bf0 <vTaskDelay>:
	{
 8006bf0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bf2:	b1a8      	cbz	r0, 8006c20 <vTaskDelay+0x30>
 8006bf4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <vTaskDelay+0x44>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	b143      	cbz	r3, 8006c0e <vTaskDelay+0x1e>
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	e7fe      	b.n	8006c0c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006c0e:	f7ff fedb 	bl	80069c8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c12:	2100      	movs	r1, #0
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7ff fde3 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006c1a:	f7ff ff6f 	bl	8006afc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006c1e:	b938      	cbnz	r0, 8006c30 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <vTaskDelay+0x48>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
	}
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	bf00      	nop
 8006c34:	20000b94 	.word	0x20000b94
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c3c:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <vTaskSwitchContext+0x84>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	b11b      	cbz	r3, 8006c4a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006c42:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <vTaskSwitchContext+0x88>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006c4a:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <vTaskSwitchContext+0x88>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c50:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <vTaskSwitchContext+0x8c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006c58:	008a      	lsls	r2, r1, #2
 8006c5a:	491c      	ldr	r1, [pc, #112]	; (8006ccc <vTaskSwitchContext+0x90>)
 8006c5c:	588a      	ldr	r2, [r1, r2]
 8006c5e:	b95a      	cbnz	r2, 8006c78 <vTaskSwitchContext+0x3c>
 8006c60:	b10b      	cbz	r3, 8006c66 <vTaskSwitchContext+0x2a>
 8006c62:	3b01      	subs	r3, #1
 8006c64:	e7f6      	b.n	8006c54 <vTaskSwitchContext+0x18>
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	e7fe      	b.n	8006c76 <vTaskSwitchContext+0x3a>
{
 8006c78:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	009a      	lsls	r2, r3, #2
 8006c7e:	18d4      	adds	r4, r2, r3
 8006c80:	00a1      	lsls	r1, r4, #2
 8006c82:	4401      	add	r1, r0
 8006c84:	684c      	ldr	r4, [r1, #4]
 8006c86:	6864      	ldr	r4, [r4, #4]
 8006c88:	604c      	str	r4, [r1, #4]
 8006c8a:	441a      	add	r2, r3
 8006c8c:	0091      	lsls	r1, r2, #2
 8006c8e:	3108      	adds	r1, #8
 8006c90:	4408      	add	r0, r1
 8006c92:	4284      	cmp	r4, r0
 8006c94:	d00d      	beq.n	8006cb2 <vTaskSwitchContext+0x76>
 8006c96:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006c9a:	0091      	lsls	r1, r2, #2
 8006c9c:	4a0b      	ldr	r2, [pc, #44]	; (8006ccc <vTaskSwitchContext+0x90>)
 8006c9e:	440a      	add	r2, r1
 8006ca0:	6852      	ldr	r2, [r2, #4]
 8006ca2:	68d1      	ldr	r1, [r2, #12]
 8006ca4:	4a0a      	ldr	r2, [pc, #40]	; (8006cd0 <vTaskSwitchContext+0x94>)
 8006ca6:	6011      	str	r1, [r2, #0]
 8006ca8:	4a07      	ldr	r2, [pc, #28]	; (8006cc8 <vTaskSwitchContext+0x8c>)
 8006caa:	6013      	str	r3, [r2, #0]
}
 8006cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cb2:	6861      	ldr	r1, [r4, #4]
 8006cb4:	4805      	ldr	r0, [pc, #20]	; (8006ccc <vTaskSwitchContext+0x90>)
 8006cb6:	2214      	movs	r2, #20
 8006cb8:	fb02 0203 	mla	r2, r2, r3, r0
 8006cbc:	6051      	str	r1, [r2, #4]
 8006cbe:	e7ea      	b.n	8006c96 <vTaskSwitchContext+0x5a>
 8006cc0:	20000b94 	.word	0x20000b94
 8006cc4:	20000c14 	.word	0x20000c14
 8006cc8:	20000b9c 	.word	0x20000b9c
 8006ccc:	20000728 	.word	0x20000728
 8006cd0:	2000071c 	.word	0x2000071c

08006cd4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006cd4:	b940      	cbnz	r0, 8006ce8 <vTaskPlaceOnEventList+0x14>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	e7fe      	b.n	8006ce6 <vTaskPlaceOnEventList+0x12>
{
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cec:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <vTaskPlaceOnEventList+0x2c>)
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	3118      	adds	r1, #24
 8006cf2:	f7fe fe81 	bl	80059f8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff fd71 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
}
 8006cfe:	bd10      	pop	{r4, pc}
 8006d00:	2000071c 	.word	0x2000071c

08006d04 <vTaskPlaceOnEventListRestricted>:
	{
 8006d04:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006d06:	b940      	cbnz	r0, 8006d1a <vTaskPlaceOnEventListRestricted+0x16>
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	e7fe      	b.n	8006d18 <vTaskPlaceOnEventListRestricted+0x14>
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d1e:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <vTaskPlaceOnEventListRestricted+0x34>)
 8006d20:	6811      	ldr	r1, [r2, #0]
 8006d22:	3118      	adds	r1, #24
 8006d24:	f7fe fe5c 	bl	80059e0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8006d28:	b10d      	cbz	r5, 8006d2e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8006d2a:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7ff fd55 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
	}
 8006d36:	bd38      	pop	{r3, r4, r5, pc}
 8006d38:	2000071c 	.word	0x2000071c

08006d3c <xTaskRemoveFromEventList>:
{
 8006d3c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d3e:	68c3      	ldr	r3, [r0, #12]
 8006d40:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006d42:	b944      	cbnz	r4, 8006d56 <xTaskRemoveFromEventList+0x1a>
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	e7fe      	b.n	8006d54 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d56:	f104 0518 	add.w	r5, r4, #24
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f7fe fe66 	bl	8005a2c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d60:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <xTaskRemoveFromEventList+0x74>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	b9e3      	cbnz	r3, 8006da0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d66:	1d25      	adds	r5, r4, #4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7fe fe5f 	bl	8005a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d70:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <xTaskRemoveFromEventList+0x78>)
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <xTaskRemoveFromEventList+0x40>
 8006d78:	4a0e      	ldr	r2, [pc, #56]	; (8006db4 <xTaskRemoveFromEventList+0x78>)
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d80:	009a      	lsls	r2, r3, #2
 8006d82:	4629      	mov	r1, r5
 8006d84:	480c      	ldr	r0, [pc, #48]	; (8006db8 <xTaskRemoveFromEventList+0x7c>)
 8006d86:	4410      	add	r0, r2
 8006d88:	f7fe fe2a 	bl	80059e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <xTaskRemoveFromEventList+0x80>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d908      	bls.n	8006daa <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006d98:	2001      	movs	r0, #1
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <xTaskRemoveFromEventList+0x84>)
 8006d9c:	6018      	str	r0, [r3, #0]
}
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006da0:	4629      	mov	r1, r5
 8006da2:	4808      	ldr	r0, [pc, #32]	; (8006dc4 <xTaskRemoveFromEventList+0x88>)
 8006da4:	f7fe fe1c 	bl	80059e0 <vListInsertEnd>
 8006da8:	e7f0      	b.n	8006d8c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8006daa:	2000      	movs	r0, #0
	return xReturn;
 8006dac:	e7f7      	b.n	8006d9e <xTaskRemoveFromEventList+0x62>
 8006dae:	bf00      	nop
 8006db0:	20000b94 	.word	0x20000b94
 8006db4:	20000b9c 	.word	0x20000b9c
 8006db8:	20000728 	.word	0x20000728
 8006dbc:	2000071c 	.word	0x2000071c
 8006dc0:	20000c14 	.word	0x20000c14
 8006dc4:	20000bd0 	.word	0x20000bd0

08006dc8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <vTaskInternalSetTimeOutState+0x10>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dce:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <vTaskInternalSetTimeOutState+0x14>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6043      	str	r3, [r0, #4]
}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000bcc 	.word	0x20000bcc
 8006ddc:	20000c10 	.word	0x20000c10

08006de0 <xTaskCheckForTimeOut>:
{
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006de2:	b150      	cbz	r0, 8006dfa <xTaskCheckForTimeOut+0x1a>
 8006de4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006de6:	b989      	cbnz	r1, 8006e0c <xTaskCheckForTimeOut+0x2c>
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	e7fe      	b.n	8006df8 <xTaskCheckForTimeOut+0x18>
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	e7fe      	b.n	8006e0a <xTaskCheckForTimeOut+0x2a>
 8006e0c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8006e0e:	f000 fd01 	bl	8007814 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <xTaskCheckForTimeOut+0x78>)
 8006e14:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e16:	6868      	ldr	r0, [r5, #4]
 8006e18:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d016      	beq.n	8006e50 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e22:	682f      	ldr	r7, [r5, #0]
 8006e24:	4e0d      	ldr	r6, [pc, #52]	; (8006e5c <xTaskCheckForTimeOut+0x7c>)
 8006e26:	6836      	ldr	r6, [r6, #0]
 8006e28:	42b7      	cmp	r7, r6
 8006e2a:	d001      	beq.n	8006e30 <xTaskCheckForTimeOut+0x50>
 8006e2c:	4288      	cmp	r0, r1
 8006e2e:	d911      	bls.n	8006e54 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d803      	bhi.n	8006e3c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006e38:	2401      	movs	r4, #1
 8006e3a:	e005      	b.n	8006e48 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff ffc1 	bl	8006dc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e48:	f000 fd06 	bl	8007858 <vPortExitCritical>
}
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8006e50:	2400      	movs	r4, #0
 8006e52:	e7f9      	b.n	8006e48 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8006e54:	2401      	movs	r4, #1
 8006e56:	e7f7      	b.n	8006e48 <xTaskCheckForTimeOut+0x68>
 8006e58:	20000c10 	.word	0x20000c10
 8006e5c:	20000bcc 	.word	0x20000bcc

08006e60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006e60:	4b01      	ldr	r3, [pc, #4]	; (8006e68 <vTaskMissedYield+0x8>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
}
 8006e66:	4770      	bx	lr
 8006e68:	20000c14 	.word	0x20000c14

08006e6c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8006e6c:	4b01      	ldr	r3, [pc, #4]	; (8006e74 <xTaskGetCurrentTaskHandle+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
	}
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	2000071c 	.word	0x2000071c

08006e78 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <xTaskGetSchedulerState+0x18>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	b133      	cbz	r3, 8006e8c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <xTaskGetSchedulerState+0x1c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	b10b      	cbz	r3, 8006e88 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e84:	2000      	movs	r0, #0
	}
 8006e86:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006e88:	2002      	movs	r0, #2
 8006e8a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	4770      	bx	lr
 8006e90:	20000be4 	.word	0x20000be4
 8006e94:	20000b94 	.word	0x20000b94

08006e98 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d040      	beq.n	8006f1e <xTaskPriorityInherit+0x86>
	{
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ea0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006ea2:	4920      	ldr	r1, [pc, #128]	; (8006f24 <xTaskPriorityInherit+0x8c>)
 8006ea4:	6809      	ldr	r1, [r1, #0]
 8006ea6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006ea8:	428a      	cmp	r2, r1
 8006eaa:	d22e      	bcs.n	8006f0a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006eac:	6981      	ldr	r1, [r0, #24]
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	db05      	blt.n	8006ebe <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb2:	491c      	ldr	r1, [pc, #112]	; (8006f24 <xTaskPriorityInherit+0x8c>)
 8006eb4:	6809      	ldr	r1, [r1, #0]
 8006eb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006eb8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8006ebc:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ebe:	6968      	ldr	r0, [r5, #20]
 8006ec0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006ec4:	0091      	lsls	r1, r2, #2
 8006ec6:	4a18      	ldr	r2, [pc, #96]	; (8006f28 <xTaskPriorityInherit+0x90>)
 8006ec8:	440a      	add	r2, r1
 8006eca:	4290      	cmp	r0, r2
 8006ecc:	d005      	beq.n	8006eda <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ece:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <xTaskPriorityInherit+0x8c>)
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ed4:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 8006ed6:	2001      	movs	r0, #1
	}
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eda:	1d2c      	adds	r4, r5, #4
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7fe fda5 	bl	8005a2c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ee2:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <xTaskPriorityInherit+0x8c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006eea:	4a10      	ldr	r2, [pc, #64]	; (8006f2c <xTaskPriorityInherit+0x94>)
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <xTaskPriorityInherit+0x5e>
 8006ef2:	4a0e      	ldr	r2, [pc, #56]	; (8006f2c <xTaskPriorityInherit+0x94>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006efa:	009a      	lsls	r2, r3, #2
 8006efc:	4621      	mov	r1, r4
 8006efe:	480a      	ldr	r0, [pc, #40]	; (8006f28 <xTaskPriorityInherit+0x90>)
 8006f00:	4410      	add	r0, r2
 8006f02:	f7fe fd6d 	bl	80059e0 <vListInsertEnd>
				xReturn = pdTRUE;
 8006f06:	2001      	movs	r0, #1
 8006f08:	e7e6      	b.n	8006ed8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f0a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <xTaskPriorityInherit+0x8c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d201      	bcs.n	8006f1a <xTaskPriorityInherit+0x82>
					xReturn = pdTRUE;
 8006f16:	2001      	movs	r0, #1
		return xReturn;
 8006f18:	e7de      	b.n	8006ed8 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	e7dc      	b.n	8006ed8 <xTaskPriorityInherit+0x40>
 8006f1e:	2000      	movs	r0, #0
	}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000071c 	.word	0x2000071c
 8006f28:	20000728 	.word	0x20000728
 8006f2c:	20000b9c 	.word	0x20000b9c

08006f30 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d038      	beq.n	8006fa6 <xTaskPriorityDisinherit+0x76>
	{
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006f38:	4a1e      	ldr	r2, [pc, #120]	; (8006fb4 <xTaskPriorityDisinherit+0x84>)
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	4282      	cmp	r2, r0
 8006f3e:	d008      	beq.n	8006f52 <xTaskPriorityDisinherit+0x22>
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	e7fe      	b.n	8006f50 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f52:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006f54:	b942      	cbnz	r2, 8006f68 <xTaskPriorityDisinherit+0x38>
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	e7fe      	b.n	8006f66 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006f68:	3a01      	subs	r2, #1
 8006f6a:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f6c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006f6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006f70:	4288      	cmp	r0, r1
 8006f72:	d01a      	beq.n	8006faa <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f74:	b9da      	cbnz	r2, 8006fae <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f76:	1d25      	adds	r5, r4, #4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f7fe fd57 	bl	8005a2c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006f80:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f86:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f88:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <xTaskPriorityDisinherit+0x88>)
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d901      	bls.n	8006f94 <xTaskPriorityDisinherit+0x64>
 8006f90:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <xTaskPriorityDisinherit+0x88>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	4629      	mov	r1, r5
 8006f96:	4a09      	ldr	r2, [pc, #36]	; (8006fbc <xTaskPriorityDisinherit+0x8c>)
 8006f98:	2014      	movs	r0, #20
 8006f9a:	fb00 2003 	mla	r0, r0, r3, r2
 8006f9e:	f7fe fd1f 	bl	80059e0 <vListInsertEnd>
					xReturn = pdTRUE;
 8006fa2:	2001      	movs	r0, #1
	}
 8006fa4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8006fa6:	2000      	movs	r0, #0
	}
 8006fa8:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006faa:	2000      	movs	r0, #0
 8006fac:	e7fa      	b.n	8006fa4 <xTaskPriorityDisinherit+0x74>
 8006fae:	2000      	movs	r0, #0
		return xReturn;
 8006fb0:	e7f8      	b.n	8006fa4 <xTaskPriorityDisinherit+0x74>
 8006fb2:	bf00      	nop
 8006fb4:	2000071c 	.word	0x2000071c
 8006fb8:	20000b9c 	.word	0x20000b9c
 8006fbc:	20000728 	.word	0x20000728

08006fc0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d045      	beq.n	8007050 <vTaskPriorityDisinheritAfterTimeout+0x90>
	{
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8006fc8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8006fca:	b940      	cbnz	r0, 8006fde <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	e7fe      	b.n	8006fdc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fe0:	428a      	cmp	r2, r1
 8006fe2:	d200      	bcs.n	8006fe6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fe4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fe6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fe8:	4291      	cmp	r1, r2
 8006fea:	d001      	beq.n	8006ff0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fec:	2801      	cmp	r0, #1
 8006fee:	d000      	beq.n	8006ff2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8006ff0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8006ff2:	4818      	ldr	r0, [pc, #96]	; (8007054 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8006ff4:	6800      	ldr	r0, [r0, #0]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	d108      	bne.n	800700c <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	e7fe      	b.n	800700a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800700e:	6998      	ldr	r0, [r3, #24]
 8007010:	2800      	cmp	r0, #0
 8007012:	db02      	blt.n	800701a <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007014:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007018:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	480e      	ldr	r0, [pc, #56]	; (8007058 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800701e:	2414      	movs	r4, #20
 8007020:	fb04 0101 	mla	r1, r4, r1, r0
 8007024:	428a      	cmp	r2, r1
 8007026:	d1e3      	bne.n	8006ff0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8007028:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702a:	1d1d      	adds	r5, r3, #4
 800702c:	4628      	mov	r0, r5
 800702e:	f7fe fcfd 	bl	8005a2c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007032:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007034:	4a09      	ldr	r2, [pc, #36]	; (800705c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	4293      	cmp	r3, r2
 800703a:	d901      	bls.n	8007040 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800703c:	4a07      	ldr	r2, [pc, #28]	; (800705c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	4629      	mov	r1, r5
 8007042:	4a05      	ldr	r2, [pc, #20]	; (8007058 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007044:	2014      	movs	r0, #20
 8007046:	fb00 2003 	mla	r0, r0, r3, r2
 800704a:	f7fe fcc9 	bl	80059e0 <vListInsertEnd>
	}
 800704e:	e7cf      	b.n	8006ff0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	2000071c 	.word	0x2000071c
 8007058:	20000728 	.word	0x20000728
 800705c:	20000b9c 	.word	0x20000b9c

08007060 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007060:	4b05      	ldr	r3, [pc, #20]	; (8007078 <pvTaskIncrementMutexHeldCount+0x18>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	b123      	cbz	r3, 8007070 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007066:	4b04      	ldr	r3, [pc, #16]	; (8007078 <pvTaskIncrementMutexHeldCount+0x18>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800706c:	3301      	adds	r3, #1
 800706e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8007070:	4b01      	ldr	r3, [pc, #4]	; (8007078 <pvTaskIncrementMutexHeldCount+0x18>)
 8007072:	6818      	ldr	r0, [r3, #0]
	}
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	2000071c 	.word	0x2000071c

0800707c <xTaskNotifyWait>:
	{
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	4607      	mov	r7, r0
 8007080:	460d      	mov	r5, r1
 8007082:	4614      	mov	r4, r2
 8007084:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8007086:	f000 fbc5 	bl	8007814 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800708a:	4b20      	ldr	r3, [pc, #128]	; (800710c <xTaskNotifyWait+0x90>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d00a      	beq.n	80070ae <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007098:	4b1c      	ldr	r3, [pc, #112]	; (800710c <xTaskNotifyWait+0x90>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800709e:	ea20 0007 	bic.w	r0, r0, r7
 80070a2:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 80070ac:	b9ce      	cbnz	r6, 80070e2 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 80070ae:	f000 fbd3 	bl	8007858 <vPortExitCritical>
		taskENTER_CRITICAL();
 80070b2:	f000 fbaf 	bl	8007814 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80070b6:	b11c      	cbz	r4, 80070c0 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80070b8:	4b14      	ldr	r3, [pc, #80]	; (800710c <xTaskNotifyWait+0x90>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80070c0:	4b12      	ldr	r3, [pc, #72]	; (800710c <xTaskNotifyWait+0x90>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d016      	beq.n	80070fc <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 80070ce:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <xTaskNotifyWait+0x90>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 80070da:	f000 fbbd 	bl	8007858 <vPortExitCritical>
	}
 80070de:	4620      	mov	r0, r4
 80070e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070e2:	4611      	mov	r1, r2
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff fb7b 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <xTaskNotifyWait+0x94>)
 80070ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	e7d8      	b.n	80070ae <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <xTaskNotifyWait+0x90>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007102:	ea23 0505 	bic.w	r5, r3, r5
 8007106:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8007108:	2401      	movs	r4, #1
 800710a:	e7e1      	b.n	80070d0 <xTaskNotifyWait+0x54>
 800710c:	2000071c 	.word	0x2000071c
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <xTaskGenericNotify>:
	{
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8007116:	b940      	cbnz	r0, 800712a <xTaskGenericNotify+0x16>
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	e7fe      	b.n	8007128 <xTaskGenericNotify+0x14>
 800712a:	4604      	mov	r4, r0
 800712c:	461f      	mov	r7, r3
 800712e:	4615      	mov	r5, r2
 8007130:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 8007132:	f000 fb6f 	bl	8007814 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8007136:	b10f      	cbz	r7, 800713c <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007138:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800713a:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800713c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8007140:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007142:	2202      	movs	r2, #2
 8007144:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8007148:	1e6a      	subs	r2, r5, #1
 800714a:	2a03      	cmp	r2, #3
 800714c:	d81a      	bhi.n	8007184 <xTaskGenericNotify+0x70>
 800714e:	e8df f002 	tbb	[pc, r2]
 8007152:	0c02      	.short	0x0c02
 8007154:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 8007156:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007158:	4316      	orrs	r6, r2
 800715a:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800715c:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800715e:	2b01      	cmp	r3, #1
 8007160:	d014      	beq.n	800718c <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 8007162:	f000 fb79 	bl	8007858 <vPortExitCritical>
	}
 8007166:	4628      	mov	r0, r5
 8007168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800716a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800716c:	3201      	adds	r2, #1
 800716e:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8007170:	2501      	movs	r5, #1
					break;
 8007172:	e7f4      	b.n	800715e <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 8007174:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8007176:	2501      	movs	r5, #1
					break;
 8007178:	e7f1      	b.n	800715e <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800717a:	2b02      	cmp	r3, #2
 800717c:	d004      	beq.n	8007188 <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 800717e:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8007180:	2501      	movs	r5, #1
 8007182:	e7ec      	b.n	800715e <xTaskGenericNotify+0x4a>
 8007184:	2501      	movs	r5, #1
 8007186:	e7ea      	b.n	800715e <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8007188:	2500      	movs	r5, #0
 800718a:	e7e8      	b.n	800715e <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800718c:	1d26      	adds	r6, r4, #4
 800718e:	4630      	mov	r0, r6
 8007190:	f7fe fc4c 	bl	8005a2c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007194:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007196:	4a13      	ldr	r2, [pc, #76]	; (80071e4 <xTaskGenericNotify+0xd0>)
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <xTaskGenericNotify+0x8e>
 800719e:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <xTaskGenericNotify+0xd0>)
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	4631      	mov	r1, r6
 80071a4:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <xTaskGenericNotify+0xd4>)
 80071a6:	2014      	movs	r0, #20
 80071a8:	fb00 2003 	mla	r0, r0, r3, r2
 80071ac:	f7fe fc18 	bl	80059e0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80071b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071b2:	b143      	cbz	r3, 80071c6 <xTaskGenericNotify+0xb2>
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	e7fe      	b.n	80071c4 <xTaskGenericNotify+0xb0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <xTaskGenericNotify+0xd8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d9c7      	bls.n	8007162 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <xTaskGenericNotify+0xdc>)
 80071d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	e7be      	b.n	8007162 <xTaskGenericNotify+0x4e>
 80071e4:	20000b9c 	.word	0x20000b9c
 80071e8:	20000728 	.word	0x20000728
 80071ec:	2000071c 	.word	0x2000071c
 80071f0:	e000ed04 	.word	0xe000ed04

080071f4 <xTaskGenericNotifyFromISR>:
	{
 80071f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f8:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 80071fa:	b940      	cbnz	r0, 800720e <xTaskGenericNotifyFromISR+0x1a>
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	e7fe      	b.n	800720c <xTaskGenericNotifyFromISR+0x18>
 800720e:	4604      	mov	r4, r0
 8007210:	4699      	mov	r9, r3
 8007212:	4615      	mov	r5, r2
 8007214:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007216:	f000 fc27 	bl	8007a68 <vPortValidateInterruptPriority>
	__asm volatile
 800721a:	f3ef 8711 	mrs	r7, BASEPRI
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800722e:	f1b9 0f00 	cmp.w	r9, #0
 8007232:	d002      	beq.n	800723a <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007234:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007236:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800723a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800723e:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007240:	2202      	movs	r2, #2
 8007242:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8007246:	1e6a      	subs	r2, r5, #1
 8007248:	2a03      	cmp	r2, #3
 800724a:	d81e      	bhi.n	800728a <xTaskGenericNotifyFromISR+0x96>
 800724c:	e8df f002 	tbb	[pc, r2]
 8007250:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 8007254:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007256:	ea42 0208 	orr.w	r2, r2, r8
 800725a:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800725c:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800725e:	2b01      	cmp	r3, #1
 8007260:	d017      	beq.n	8007292 <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 8007262:	f387 8811 	msr	BASEPRI, r7
	}
 8007266:	4628      	mov	r0, r5
 8007268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800726c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800726e:	3201      	adds	r2, #1
 8007270:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8007272:	2501      	movs	r5, #1
					break;
 8007274:	e7f3      	b.n	800725e <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8007276:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800727a:	2501      	movs	r5, #1
					break;
 800727c:	e7ef      	b.n	800725e <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800727e:	2b02      	cmp	r3, #2
 8007280:	d005      	beq.n	800728e <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 8007282:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8007286:	2501      	movs	r5, #1
 8007288:	e7e9      	b.n	800725e <xTaskGenericNotifyFromISR+0x6a>
 800728a:	2501      	movs	r5, #1
 800728c:	e7e7      	b.n	800725e <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800728e:	2500      	movs	r5, #0
 8007290:	e7e5      	b.n	800725e <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007294:	b143      	cbz	r3, 80072a8 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	e7fe      	b.n	80072a6 <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a8:	4b14      	ldr	r3, [pc, #80]	; (80072fc <xTaskGenericNotifyFromISR+0x108>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	b9e3      	cbnz	r3, 80072e8 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ae:	f104 0804 	add.w	r8, r4, #4
 80072b2:	4640      	mov	r0, r8
 80072b4:	f7fe fbba 	bl	8005a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072ba:	4a11      	ldr	r2, [pc, #68]	; (8007300 <xTaskGenericNotifyFromISR+0x10c>)
 80072bc:	6812      	ldr	r2, [r2, #0]
 80072be:	4293      	cmp	r3, r2
 80072c0:	d901      	bls.n	80072c6 <xTaskGenericNotifyFromISR+0xd2>
 80072c2:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <xTaskGenericNotifyFromISR+0x10c>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4641      	mov	r1, r8
 80072c8:	4a0e      	ldr	r2, [pc, #56]	; (8007304 <xTaskGenericNotifyFromISR+0x110>)
 80072ca:	2014      	movs	r0, #20
 80072cc:	fb00 2003 	mla	r0, r0, r3, r2
 80072d0:	f7fe fb86 	bl	80059e0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80072d6:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <xTaskGenericNotifyFromISR+0x114>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	429a      	cmp	r2, r3
 80072de:	d9c0      	bls.n	8007262 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 80072e0:	b146      	cbz	r6, 80072f4 <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80072e2:	2301      	movs	r3, #1
 80072e4:	6033      	str	r3, [r6, #0]
 80072e6:	e7bc      	b.n	8007262 <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80072e8:	f104 0118 	add.w	r1, r4, #24
 80072ec:	4807      	ldr	r0, [pc, #28]	; (800730c <xTaskGenericNotifyFromISR+0x118>)
 80072ee:	f7fe fb77 	bl	80059e0 <vListInsertEnd>
 80072f2:	e7ef      	b.n	80072d4 <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 80072f4:	4b06      	ldr	r3, [pc, #24]	; (8007310 <xTaskGenericNotifyFromISR+0x11c>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e7b2      	b.n	8007262 <xTaskGenericNotifyFromISR+0x6e>
 80072fc:	20000b94 	.word	0x20000b94
 8007300:	20000b9c 	.word	0x20000b9c
 8007304:	20000728 	.word	0x20000728
 8007308:	2000071c 	.word	0x2000071c
 800730c:	20000bd0 	.word	0x20000bd0
 8007310:	20000c14 	.word	0x20000c14

08007314 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007314:	4b06      	ldr	r3, [pc, #24]	; (8007330 <prvGetNextExpireTime+0x1c>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	6813      	ldr	r3, [r2, #0]
 800731a:	fab3 f383 	clz	r3, r3
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007322:	b913      	cbnz	r3, 800732a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007324:	68d3      	ldr	r3, [r2, #12]
 8007326:	6818      	ldr	r0, [r3, #0]
 8007328:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800732a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000c18 	.word	0x20000c18

08007334 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007334:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007336:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007338:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800733a:	4291      	cmp	r1, r2
 800733c:	d80c      	bhi.n	8007358 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733e:	1ad2      	subs	r2, r2, r3
 8007340:	6983      	ldr	r3, [r0, #24]
 8007342:	429a      	cmp	r2, r3
 8007344:	d301      	bcc.n	800734a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007346:	2001      	movs	r0, #1
 8007348:	e010      	b.n	800736c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800734a:	1d01      	adds	r1, r0, #4
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <prvInsertTimerInActiveList+0x40>)
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	f7fe fb52 	bl	80059f8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007354:	2000      	movs	r0, #0
 8007356:	e009      	b.n	800736c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007358:	429a      	cmp	r2, r3
 800735a:	d201      	bcs.n	8007360 <prvInsertTimerInActiveList+0x2c>
 800735c:	4299      	cmp	r1, r3
 800735e:	d206      	bcs.n	800736e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007360:	1d01      	adds	r1, r0, #4
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <prvInsertTimerInActiveList+0x44>)
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	f7fe fb47 	bl	80059f8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800736a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800736c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800736e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007370:	e7fc      	b.n	800736c <prvInsertTimerInActiveList+0x38>
 8007372:	bf00      	nop
 8007374:	20000c1c 	.word	0x20000c1c
 8007378:	20000c18 	.word	0x20000c18

0800737c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800737c:	b530      	push	{r4, r5, lr}
 800737e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007380:	f000 fa48 	bl	8007814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007384:	4b11      	ldr	r3, [pc, #68]	; (80073cc <prvCheckForValidListAndQueue+0x50>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	b11b      	cbz	r3, 8007392 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800738a:	f000 fa65 	bl	8007858 <vPortExitCritical>
}
 800738e:	b003      	add	sp, #12
 8007390:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8007392:	4d0f      	ldr	r5, [pc, #60]	; (80073d0 <prvCheckForValidListAndQueue+0x54>)
 8007394:	4628      	mov	r0, r5
 8007396:	f7fe fb15 	bl	80059c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800739a:	4c0e      	ldr	r4, [pc, #56]	; (80073d4 <prvCheckForValidListAndQueue+0x58>)
 800739c:	4620      	mov	r0, r4
 800739e:	f7fe fb11 	bl	80059c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <prvCheckForValidListAndQueue+0x5c>)
 80073a4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <prvCheckForValidListAndQueue+0x60>)
 80073a8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073aa:	2300      	movs	r3, #0
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <prvCheckForValidListAndQueue+0x64>)
 80073b0:	4a0c      	ldr	r2, [pc, #48]	; (80073e4 <prvCheckForValidListAndQueue+0x68>)
 80073b2:	2110      	movs	r1, #16
 80073b4:	200a      	movs	r0, #10
 80073b6:	f7fe fc4a 	bl	8005c4e <xQueueGenericCreateStatic>
 80073ba:	4b04      	ldr	r3, [pc, #16]	; (80073cc <prvCheckForValidListAndQueue+0x50>)
 80073bc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80073be:	2800      	cmp	r0, #0
 80073c0:	d0e3      	beq.n	800738a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073c2:	4909      	ldr	r1, [pc, #36]	; (80073e8 <prvCheckForValidListAndQueue+0x6c>)
 80073c4:	f7ff f864 	bl	8006490 <vQueueAddToRegistry>
 80073c8:	e7df      	b.n	800738a <prvCheckForValidListAndQueue+0xe>
 80073ca:	bf00      	nop
 80073cc:	20000d3c 	.word	0x20000d3c
 80073d0:	20000cc0 	.word	0x20000cc0
 80073d4:	20000cd4 	.word	0x20000cd4
 80073d8:	20000c18 	.word	0x20000c18
 80073dc:	20000c1c 	.word	0x20000c1c
 80073e0:	20000cec 	.word	0x20000cec
 80073e4:	20000c20 	.word	0x20000c20
 80073e8:	08007e1c 	.word	0x08007e1c

080073ec <xTimerCreateTimerTask>:
{
 80073ec:	b510      	push	{r4, lr}
 80073ee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80073f0:	f7ff ffc4 	bl	800737c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80073f4:	4b12      	ldr	r3, [pc, #72]	; (8007440 <xTimerCreateTimerTask+0x54>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	b1cb      	cbz	r3, 800742e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073fa:	2400      	movs	r4, #0
 80073fc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073fe:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007400:	aa07      	add	r2, sp, #28
 8007402:	a906      	add	r1, sp, #24
 8007404:	a805      	add	r0, sp, #20
 8007406:	f7fe fad1 	bl	80059ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800740a:	9b05      	ldr	r3, [sp, #20]
 800740c:	9302      	str	r3, [sp, #8]
 800740e:	9b06      	ldr	r3, [sp, #24]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	2302      	movs	r3, #2
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	4623      	mov	r3, r4
 8007418:	9a07      	ldr	r2, [sp, #28]
 800741a:	490a      	ldr	r1, [pc, #40]	; (8007444 <xTimerCreateTimerTask+0x58>)
 800741c:	480a      	ldr	r0, [pc, #40]	; (8007448 <xTimerCreateTimerTask+0x5c>)
 800741e:	f7ff fa1d 	bl	800685c <xTaskCreateStatic>
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <xTimerCreateTimerTask+0x60>)
 8007424:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007426:	b110      	cbz	r0, 800742e <xTimerCreateTimerTask+0x42>
}
 8007428:	2001      	movs	r0, #1
 800742a:	b008      	add	sp, #32
 800742c:	bd10      	pop	{r4, pc}
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	e7fe      	b.n	800743e <xTimerCreateTimerTask+0x52>
 8007440:	20000d3c 	.word	0x20000d3c
 8007444:	08007e24 	.word	0x08007e24
 8007448:	08007731 	.word	0x08007731
 800744c:	20000d40 	.word	0x20000d40

08007450 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007450:	b1c8      	cbz	r0, 8007486 <xTimerGenericCommand+0x36>
{
 8007452:	b530      	push	{r4, r5, lr}
 8007454:	b085      	sub	sp, #20
 8007456:	4615      	mov	r5, r2
 8007458:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <xTimerGenericCommand+0x68>)
 800745c:	6810      	ldr	r0, [r2, #0]
 800745e:	b340      	cbz	r0, 80074b2 <xTimerGenericCommand+0x62>
 8007460:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8007462:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007464:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007466:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007468:	2905      	cmp	r1, #5
 800746a:	dc1d      	bgt.n	80074a8 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800746c:	f7ff fd04 	bl	8006e78 <xTaskGetSchedulerState>
 8007470:	2802      	cmp	r0, #2
 8007472:	d011      	beq.n	8007498 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007474:	2300      	movs	r3, #0
 8007476:	461a      	mov	r2, r3
 8007478:	4669      	mov	r1, sp
 800747a:	480f      	ldr	r0, [pc, #60]	; (80074b8 <xTimerGenericCommand+0x68>)
 800747c:	6800      	ldr	r0, [r0, #0]
 800747e:	f7fe fc9b 	bl	8005db8 <xQueueGenericSend>
}
 8007482:	b005      	add	sp, #20
 8007484:	bd30      	pop	{r4, r5, pc}
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	e7fe      	b.n	8007496 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007498:	2300      	movs	r3, #0
 800749a:	9a08      	ldr	r2, [sp, #32]
 800749c:	4669      	mov	r1, sp
 800749e:	4806      	ldr	r0, [pc, #24]	; (80074b8 <xTimerGenericCommand+0x68>)
 80074a0:	6800      	ldr	r0, [r0, #0]
 80074a2:	f7fe fc89 	bl	8005db8 <xQueueGenericSend>
 80074a6:	e7ec      	b.n	8007482 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074a8:	2300      	movs	r3, #0
 80074aa:	4669      	mov	r1, sp
 80074ac:	f7fe fd42 	bl	8005f34 <xQueueGenericSendFromISR>
 80074b0:	e7e7      	b.n	8007482 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 80074b2:	2000      	movs	r0, #0
	return xReturn;
 80074b4:	e7e5      	b.n	8007482 <xTimerGenericCommand+0x32>
 80074b6:	bf00      	nop
 80074b8:	20000d3c 	.word	0x20000d3c

080074bc <prvSwitchTimerLists>:
{
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074c0:	4b1a      	ldr	r3, [pc, #104]	; (800752c <prvSwitchTimerLists+0x70>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	b352      	cbz	r2, 800751e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074cc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ce:	1d25      	adds	r5, r4, #4
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7fe faab 	bl	8005a2c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d8:	4620      	mov	r0, r4
 80074da:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074dc:	69e3      	ldr	r3, [r4, #28]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d1ee      	bne.n	80074c0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074e2:	69a3      	ldr	r3, [r4, #24]
 80074e4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80074e6:	429e      	cmp	r6, r3
 80074e8:	d207      	bcs.n	80074fa <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074ec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ee:	4629      	mov	r1, r5
 80074f0:	4b0e      	ldr	r3, [pc, #56]	; (800752c <prvSwitchTimerLists+0x70>)
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	f7fe fa80 	bl	80059f8 <vListInsert>
 80074f8:	e7e2      	b.n	80074c0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074fa:	2100      	movs	r1, #0
 80074fc:	9100      	str	r1, [sp, #0]
 80074fe:	460b      	mov	r3, r1
 8007500:	4632      	mov	r2, r6
 8007502:	4620      	mov	r0, r4
 8007504:	f7ff ffa4 	bl	8007450 <xTimerGenericCommand>
				configASSERT( xResult );
 8007508:	2800      	cmp	r0, #0
 800750a:	d1d9      	bne.n	80074c0 <prvSwitchTimerLists+0x4>
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	e7fe      	b.n	800751c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800751e:	4a04      	ldr	r2, [pc, #16]	; (8007530 <prvSwitchTimerLists+0x74>)
 8007520:	6810      	ldr	r0, [r2, #0]
 8007522:	4902      	ldr	r1, [pc, #8]	; (800752c <prvSwitchTimerLists+0x70>)
 8007524:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8007526:	6013      	str	r3, [r2, #0]
}
 8007528:	b002      	add	sp, #8
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	20000c18 	.word	0x20000c18
 8007530:	20000c1c 	.word	0x20000c1c

08007534 <prvSampleTimeNow>:
{
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8007538:	f7ff fa4e 	bl	80069d8 <xTaskGetTickCount>
 800753c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800753e:	4b07      	ldr	r3, [pc, #28]	; (800755c <prvSampleTimeNow+0x28>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4283      	cmp	r3, r0
 8007544:	d805      	bhi.n	8007552 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8007546:	2300      	movs	r3, #0
 8007548:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800754a:	4b04      	ldr	r3, [pc, #16]	; (800755c <prvSampleTimeNow+0x28>)
 800754c:	601c      	str	r4, [r3, #0]
}
 800754e:	4620      	mov	r0, r4
 8007550:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8007552:	f7ff ffb3 	bl	80074bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	e7f6      	b.n	800754a <prvSampleTimeNow+0x16>
 800755c:	20000ce8 	.word	0x20000ce8

08007560 <prvProcessExpiredTimer>:
{
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	4605      	mov	r5, r0
 8007566:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007568:	4b14      	ldr	r3, [pc, #80]	; (80075bc <prvProcessExpiredTimer+0x5c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007570:	1d20      	adds	r0, r4, #4
 8007572:	f7fe fa5b 	bl	8005a2c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007576:	69e3      	ldr	r3, [r4, #28]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d004      	beq.n	8007586 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800757c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800757e:	4620      	mov	r0, r4
 8007580:	4798      	blx	r3
}
 8007582:	b002      	add	sp, #8
 8007584:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007586:	69a1      	ldr	r1, [r4, #24]
 8007588:	462b      	mov	r3, r5
 800758a:	4632      	mov	r2, r6
 800758c:	4429      	add	r1, r5
 800758e:	4620      	mov	r0, r4
 8007590:	f7ff fed0 	bl	8007334 <prvInsertTimerInActiveList>
 8007594:	2800      	cmp	r0, #0
 8007596:	d0f1      	beq.n	800757c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007598:	2100      	movs	r1, #0
 800759a:	9100      	str	r1, [sp, #0]
 800759c:	460b      	mov	r3, r1
 800759e:	462a      	mov	r2, r5
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff ff55 	bl	8007450 <xTimerGenericCommand>
			configASSERT( xResult );
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d1e8      	bne.n	800757c <prvProcessExpiredTimer+0x1c>
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	e7fe      	b.n	80075ba <prvProcessExpiredTimer+0x5a>
 80075bc:	20000c18 	.word	0x20000c18

080075c0 <prvProcessTimerOrBlockTask>:
{
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	4606      	mov	r6, r0
 80075c6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80075c8:	f7ff f9fe 	bl	80069c8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075cc:	a801      	add	r0, sp, #4
 80075ce:	f7ff ffb1 	bl	8007534 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	bb1b      	cbnz	r3, 800761e <prvProcessTimerOrBlockTask+0x5e>
 80075d6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075d8:	b90c      	cbnz	r4, 80075de <prvProcessTimerOrBlockTask+0x1e>
 80075da:	42b0      	cmp	r0, r6
 80075dc:	d218      	bcs.n	8007610 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 80075de:	b12c      	cbz	r4, 80075ec <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075e0:	4b11      	ldr	r3, [pc, #68]	; (8007628 <prvProcessTimerOrBlockTask+0x68>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681c      	ldr	r4, [r3, #0]
 80075e6:	fab4 f484 	clz	r4, r4
 80075ea:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075ec:	4622      	mov	r2, r4
 80075ee:	1b71      	subs	r1, r6, r5
 80075f0:	4b0e      	ldr	r3, [pc, #56]	; (800762c <prvProcessTimerOrBlockTask+0x6c>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	f7fe ff8c 	bl	8006510 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075f8:	f7ff fa80 	bl	8006afc <xTaskResumeAll>
 80075fc:	b988      	cbnz	r0, 8007622 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <prvProcessTimerOrBlockTask+0x70>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	e008      	b.n	8007622 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 8007610:	f7ff fa74 	bl	8006afc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007614:	4629      	mov	r1, r5
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ffa2 	bl	8007560 <prvProcessExpiredTimer>
 800761c:	e001      	b.n	8007622 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 800761e:	f7ff fa6d 	bl	8006afc <xTaskResumeAll>
}
 8007622:	b002      	add	sp, #8
 8007624:	bd70      	pop	{r4, r5, r6, pc}
 8007626:	bf00      	nop
 8007628:	20000c1c 	.word	0x20000c1c
 800762c:	20000d3c 	.word	0x20000d3c
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <prvProcessReceivedCommands>:
{
 8007634:	b530      	push	{r4, r5, lr}
 8007636:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007638:	e002      	b.n	8007640 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	da0f      	bge.n	8007660 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007640:	2200      	movs	r2, #0
 8007642:	a904      	add	r1, sp, #16
 8007644:	4b39      	ldr	r3, [pc, #228]	; (800772c <prvProcessReceivedCommands+0xf8>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	f7fe fd34 	bl	80060b4 <xQueueReceive>
 800764c:	2800      	cmp	r0, #0
 800764e:	d06a      	beq.n	8007726 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007650:	9b04      	ldr	r3, [sp, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	daf1      	bge.n	800763a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007656:	9907      	ldr	r1, [sp, #28]
 8007658:	9806      	ldr	r0, [sp, #24]
 800765a:	9b05      	ldr	r3, [sp, #20]
 800765c:	4798      	blx	r3
 800765e:	e7ec      	b.n	800763a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007660:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007662:	6963      	ldr	r3, [r4, #20]
 8007664:	b113      	cbz	r3, 800766c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007666:	1d20      	adds	r0, r4, #4
 8007668:	f7fe f9e0 	bl	8005a2c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800766c:	a803      	add	r0, sp, #12
 800766e:	f7ff ff61 	bl	8007534 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	2b09      	cmp	r3, #9
 8007676:	d8e3      	bhi.n	8007640 <prvProcessReceivedCommands+0xc>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <prvProcessReceivedCommands+0x4c>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076a9 	.word	0x080076a9
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076a9 	.word	0x080076a9
 800768c:	08007641 	.word	0x08007641
 8007690:	080076f1 	.word	0x080076f1
 8007694:	08007717 	.word	0x08007717
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076a9 	.word	0x080076a9
 80076a0:	08007641 	.word	0x08007641
 80076a4:	080076f1 	.word	0x080076f1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076a8:	9905      	ldr	r1, [sp, #20]
 80076aa:	69a5      	ldr	r5, [r4, #24]
 80076ac:	460b      	mov	r3, r1
 80076ae:	4602      	mov	r2, r0
 80076b0:	4429      	add	r1, r5
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff fe3e 	bl	8007334 <prvInsertTimerInActiveList>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d0c1      	beq.n	8007640 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076be:	4620      	mov	r0, r4
 80076c0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076c2:	69e3      	ldr	r3, [r4, #28]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d1bb      	bne.n	8007640 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076c8:	69a2      	ldr	r2, [r4, #24]
 80076ca:	2100      	movs	r1, #0
 80076cc:	9100      	str	r1, [sp, #0]
 80076ce:	460b      	mov	r3, r1
 80076d0:	9805      	ldr	r0, [sp, #20]
 80076d2:	4402      	add	r2, r0
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff febb 	bl	8007450 <xTimerGenericCommand>
							configASSERT( xResult );
 80076da:	2800      	cmp	r0, #0
 80076dc:	d1b0      	bne.n	8007640 <prvProcessReceivedCommands+0xc>
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	e7fe      	b.n	80076ee <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076f0:	9905      	ldr	r1, [sp, #20]
 80076f2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076f4:	b131      	cbz	r1, 8007704 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076f6:	4603      	mov	r3, r0
 80076f8:	4602      	mov	r2, r0
 80076fa:	4401      	add	r1, r0
 80076fc:	4620      	mov	r0, r4
 80076fe:	f7ff fe19 	bl	8007334 <prvInsertTimerInActiveList>
					break;
 8007702:	e79d      	b.n	8007640 <prvProcessReceivedCommands+0xc>
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	e7fe      	b.n	8007714 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007716:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d190      	bne.n	8007640 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800771e:	4620      	mov	r0, r4
 8007720:	f000 fab4 	bl	8007c8c <vPortFree>
 8007724:	e78c      	b.n	8007640 <prvProcessReceivedCommands+0xc>
}
 8007726:	b009      	add	sp, #36	; 0x24
 8007728:	bd30      	pop	{r4, r5, pc}
 800772a:	bf00      	nop
 800772c:	20000d3c 	.word	0x20000d3c

08007730 <prvTimerTask>:
{
 8007730:	b500      	push	{lr}
 8007732:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007734:	a801      	add	r0, sp, #4
 8007736:	f7ff fded 	bl	8007314 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800773a:	9901      	ldr	r1, [sp, #4]
 800773c:	f7ff ff40 	bl	80075c0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8007740:	f7ff ff78 	bl	8007634 <prvProcessReceivedCommands>
 8007744:	e7f6      	b.n	8007734 <prvTimerTask+0x4>
	...

08007748 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007748:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800774e:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <prvTaskExitError+0x3c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d008      	beq.n	800776a <prvTaskExitError+0x22>
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	e7fe      	b.n	8007768 <prvTaskExitError+0x20>
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0fc      	beq.n	800777a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007780:	b002      	add	sp, #8
 8007782:	4770      	bx	lr
 8007784:	20000010 	.word	0x20000010

08007788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007788:	4808      	ldr	r0, [pc, #32]	; (80077ac <prvPortStartFirstTask+0x24>)
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f380 8808 	msr	MSP, r0
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8814 	msr	CONTROL, r0
 800779a:	b662      	cpsie	i
 800779c:	b661      	cpsie	f
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	df00      	svc	0
 80077a8:	bf00      	nop
 80077aa:	0000      	.short	0x0000
 80077ac:	e000ed08 	.word	0xe000ed08

080077b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077c0 <vPortEnableVFP+0x10>
 80077b4:	6801      	ldr	r1, [r0, #0]
 80077b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077ba:	6001      	str	r1, [r0, #0]
 80077bc:	4770      	bx	lr
 80077be:	0000      	.short	0x0000
 80077c0:	e000ed88 	.word	0xe000ed88

080077c4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077c8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077cc:	f021 0101 	bic.w	r1, r1, #1
 80077d0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <pxPortInitialiseStack+0x28>)
 80077d6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077da:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077de:	f06f 0302 	mvn.w	r3, #2
 80077e2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80077e6:	3844      	subs	r0, #68	; 0x44
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	08007749 	.word	0x08007749

080077f0 <SVC_Handler>:
	__asm volatile (
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <pxCurrentTCBConst2>)
 80077f2:	6819      	ldr	r1, [r3, #0]
 80077f4:	6808      	ldr	r0, [r1, #0]
 80077f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	f380 8809 	msr	PSP, r0
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8811 	msr	BASEPRI, r0
 800780a:	4770      	bx	lr
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst2>:
 8007810:	2000071c 	.word	0x2000071c

08007814 <vPortEnterCritical>:
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007824:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <vPortEnterCritical+0x3c>)
 8007826:	6813      	ldr	r3, [r2, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800782c:	2b01      	cmp	r3, #1
 800782e:	d000      	beq.n	8007832 <vPortEnterCritical+0x1e>
}
 8007830:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007832:	4b08      	ldr	r3, [pc, #32]	; (8007854 <vPortEnterCritical+0x40>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f013 0fff 	tst.w	r3, #255	; 0xff
 800783a:	d0f9      	beq.n	8007830 <vPortEnterCritical+0x1c>
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	e7fe      	b.n	800784c <vPortEnterCritical+0x38>
 800784e:	bf00      	nop
 8007850:	20000010 	.word	0x20000010
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007858:	4b09      	ldr	r3, [pc, #36]	; (8007880 <vPortExitCritical+0x28>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	b943      	cbnz	r3, 8007870 <vPortExitCritical+0x18>
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	e7fe      	b.n	800786e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007870:	3b01      	subs	r3, #1
 8007872:	4a03      	ldr	r2, [pc, #12]	; (8007880 <vPortExitCritical+0x28>)
 8007874:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007876:	b90b      	cbnz	r3, 800787c <vPortExitCritical+0x24>
	__asm volatile
 8007878:	f383 8811 	msr	BASEPRI, r3
}
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20000010 	.word	0x20000010
	...

08007890 <PendSV_Handler>:
	__asm volatile
 8007890:	f3ef 8009 	mrs	r0, PSP
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <pxCurrentTCBConst>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f01e 0f10 	tst.w	lr, #16
 80078a0:	bf08      	it	eq
 80078a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	6010      	str	r0, [r2, #0]
 80078ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078b4:	f380 8811 	msr	BASEPRI, r0
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f7ff f9bc 	bl	8006c3c <vTaskSwitchContext>
 80078c4:	f04f 0000 	mov.w	r0, #0
 80078c8:	f380 8811 	msr	BASEPRI, r0
 80078cc:	bc09      	pop	{r0, r3}
 80078ce:	6819      	ldr	r1, [r3, #0]
 80078d0:	6808      	ldr	r0, [r1, #0]
 80078d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d6:	f01e 0f10 	tst.w	lr, #16
 80078da:	bf08      	it	eq
 80078dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078e0:	f380 8809 	msr	PSP, r0
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	f3af 8000 	nop.w

080078f0 <pxCurrentTCBConst>:
 80078f0:	2000071c 	.word	0x2000071c

080078f4 <SysTick_Handler>:
{
 80078f4:	b508      	push	{r3, lr}
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007906:	f7ff f86d 	bl	80069e4 <xTaskIncrementTick>
 800790a:	b118      	cbz	r0, 8007914 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800790c:	4b03      	ldr	r3, [pc, #12]	; (800791c <SysTick_Handler+0x28>)
 800790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007912:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007914:	2300      	movs	r3, #0
 8007916:	f383 8811 	msr	BASEPRI, r3
}
 800791a:	bd08      	pop	{r3, pc}
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007920:	4a08      	ldr	r2, [pc, #32]	; (8007944 <vPortSetupTimerInterrupt+0x24>)
 8007922:	2300      	movs	r3, #0
 8007924:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007926:	4908      	ldr	r1, [pc, #32]	; (8007948 <vPortSetupTimerInterrupt+0x28>)
 8007928:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800792a:	4b08      	ldr	r3, [pc, #32]	; (800794c <vPortSetupTimerInterrupt+0x2c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4908      	ldr	r1, [pc, #32]	; (8007950 <vPortSetupTimerInterrupt+0x30>)
 8007930:	fba1 1303 	umull	r1, r3, r1, r3
 8007934:	099b      	lsrs	r3, r3, #6
 8007936:	3b01      	subs	r3, #1
 8007938:	4906      	ldr	r1, [pc, #24]	; (8007954 <vPortSetupTimerInterrupt+0x34>)
 800793a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800793c:	2307      	movs	r3, #7
 800793e:	6013      	str	r3, [r2, #0]
}
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	e000e010 	.word	0xe000e010
 8007948:	e000e018 	.word	0xe000e018
 800794c:	20000004 	.word	0x20000004
 8007950:	10624dd3 	.word	0x10624dd3
 8007954:	e000e014 	.word	0xe000e014

08007958 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007958:	4b3a      	ldr	r3, [pc, #232]	; (8007a44 <xPortStartScheduler+0xec>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4b3a      	ldr	r3, [pc, #232]	; (8007a48 <xPortStartScheduler+0xf0>)
 800795e:	429a      	cmp	r2, r3
 8007960:	d00d      	beq.n	800797e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007962:	4b38      	ldr	r3, [pc, #224]	; (8007a44 <xPortStartScheduler+0xec>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4b39      	ldr	r3, [pc, #228]	; (8007a4c <xPortStartScheduler+0xf4>)
 8007968:	429a      	cmp	r2, r3
 800796a:	d111      	bne.n	8007990 <xPortStartScheduler+0x38>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	e7fe      	b.n	800797c <xPortStartScheduler+0x24>
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	e7fe      	b.n	800798e <xPortStartScheduler+0x36>
{
 8007990:	b510      	push	{r4, lr}
 8007992:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007994:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <xPortStartScheduler+0xf8>)
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800799c:	22ff      	movs	r2, #255	; 0xff
 800799e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079b0:	4a28      	ldr	r2, [pc, #160]	; (8007a54 <xPortStartScheduler+0xfc>)
 80079b2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079b4:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <xPortStartScheduler+0x100>)
 80079b6:	2207      	movs	r2, #7
 80079b8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	e009      	b.n	80079d0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80079bc:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <xPortStartScheduler+0x100>)
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079d8:	d1f0      	bne.n	80079bc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079da:	4b1f      	ldr	r3, [pc, #124]	; (8007a58 <xPortStartScheduler+0x100>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d008      	beq.n	80079f4 <xPortStartScheduler+0x9c>
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	e7fe      	b.n	80079f2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079f4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <xPortStartScheduler+0x100>)
 80079fc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	4a13      	ldr	r2, [pc, #76]	; (8007a50 <xPortStartScheduler+0xf8>)
 8007a04:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a06:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <xPortStartScheduler+0x104>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007a0e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007a16:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007a18:	f7ff ff82 	bl	8007920 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007a1c:	2400      	movs	r4, #0
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <xPortStartScheduler+0x108>)
 8007a20:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007a22:	f7ff fec5 	bl	80077b0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a26:	4a0f      	ldr	r2, [pc, #60]	; (8007a64 <xPortStartScheduler+0x10c>)
 8007a28:	6813      	ldr	r3, [r2, #0]
 8007a2a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a2e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007a30:	f7ff feaa 	bl	8007788 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007a34:	f7ff f902 	bl	8006c3c <vTaskSwitchContext>
	prvTaskExitError();
 8007a38:	f7ff fe86 	bl	8007748 <prvTaskExitError>
}
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	b002      	add	sp, #8
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	e000ed00 	.word	0xe000ed00
 8007a48:	410fc271 	.word	0x410fc271
 8007a4c:	410fc270 	.word	0x410fc270
 8007a50:	e000e400 	.word	0xe000e400
 8007a54:	20000d44 	.word	0x20000d44
 8007a58:	20000d48 	.word	0x20000d48
 8007a5c:	e000ed20 	.word	0xe000ed20
 8007a60:	20000010 	.word	0x20000010
 8007a64:	e000ef34 	.word	0xe000ef34

08007a68 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a68:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a6c:	2b0f      	cmp	r3, #15
 8007a6e:	d90f      	bls.n	8007a90 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a70:	4a10      	ldr	r2, [pc, #64]	; (8007ab4 <vPortValidateInterruptPriority+0x4c>)
 8007a72:	5c9b      	ldrb	r3, [r3, r2]
 8007a74:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a76:	4a10      	ldr	r2, [pc, #64]	; (8007ab8 <vPortValidateInterruptPriority+0x50>)
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d908      	bls.n	8007a90 <vPortValidateInterruptPriority+0x28>
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	e7fe      	b.n	8007a8e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <vPortValidateInterruptPriority+0x54>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <vPortValidateInterruptPriority+0x58>)
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d908      	bls.n	8007ab2 <vPortValidateInterruptPriority+0x4a>
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	e7fe      	b.n	8007ab0 <vPortValidateInterruptPriority+0x48>
	}
 8007ab2:	4770      	bx	lr
 8007ab4:	e000e3f0 	.word	0xe000e3f0
 8007ab8:	20000d44 	.word	0x20000d44
 8007abc:	e000ed0c 	.word	0xe000ed0c
 8007ac0:	20000d48 	.word	0x20000d48

08007ac4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ac4:	4a13      	ldr	r2, [pc, #76]	; (8007b14 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ac6:	f012 0f07 	tst.w	r2, #7
 8007aca:	d01f      	beq.n	8007b0c <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007acc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ace:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ad2:	f5c1 539c 	rsb	r3, r1, #4992	; 0x1380
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ada:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007adc:	480e      	ldr	r0, [pc, #56]	; (8007b18 <prvHeapInit+0x54>)
 8007ade:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ae4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007ae6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007aec:	480b      	ldr	r0, [pc, #44]	; (8007b1c <prvHeapInit+0x58>)
 8007aee:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007af0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007af2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007af4:	1a99      	subs	r1, r3, r2
 8007af6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007af8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <prvHeapInit+0x5c>)
 8007afc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <prvHeapInit+0x60>)
 8007b00:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b02:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <prvHeapInit+0x64>)
 8007b04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b08:	601a      	str	r2, [r3, #0]
}
 8007b0a:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b10:	e7e4      	b.n	8007adc <prvHeapInit+0x18>
 8007b12:	bf00      	nop
 8007b14:	20000d50 	.word	0x20000d50
 8007b18:	200020e4 	.word	0x200020e4
 8007b1c:	20000d4c 	.word	0x20000d4c
 8007b20:	200020e0 	.word	0x200020e0
 8007b24:	200020dc 	.word	0x200020dc
 8007b28:	200020d8 	.word	0x200020d8

08007b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b2c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <prvInsertBlockIntoFreeList+0x50>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4282      	cmp	r2, r0
 8007b34:	d31b      	bcc.n	8007b6e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b36:	6859      	ldr	r1, [r3, #4]
 8007b38:	185c      	adds	r4, r3, r1
 8007b3a:	4284      	cmp	r4, r0
 8007b3c:	d103      	bne.n	8007b46 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b3e:	6840      	ldr	r0, [r0, #4]
 8007b40:	4401      	add	r1, r0
 8007b42:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b44:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b46:	6841      	ldr	r1, [r0, #4]
 8007b48:	1844      	adds	r4, r0, r1
 8007b4a:	42a2      	cmp	r2, r4
 8007b4c:	d113      	bne.n	8007b76 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b4e:	4c0c      	ldr	r4, [pc, #48]	; (8007b80 <prvInsertBlockIntoFreeList+0x54>)
 8007b50:	6824      	ldr	r4, [r4, #0]
 8007b52:	42a2      	cmp	r2, r4
 8007b54:	d00d      	beq.n	8007b72 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b56:	6852      	ldr	r2, [r2, #4]
 8007b58:	4411      	add	r1, r2
 8007b5a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b62:	4298      	cmp	r0, r3
 8007b64:	d000      	beq.n	8007b68 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b66:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b6c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b6e:	4613      	mov	r3, r2
 8007b70:	e7de      	b.n	8007b30 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b72:	6004      	str	r4, [r0, #0]
 8007b74:	e7f5      	b.n	8007b62 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b76:	6002      	str	r2, [r0, #0]
 8007b78:	e7f3      	b.n	8007b62 <prvInsertBlockIntoFreeList+0x36>
 8007b7a:	bf00      	nop
 8007b7c:	200020e4 	.word	0x200020e4
 8007b80:	20000d4c 	.word	0x20000d4c

08007b84 <pvPortMalloc>:
{
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007b88:	f7fe ff1e 	bl	80069c8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007b8c:	4b3a      	ldr	r3, [pc, #232]	; (8007c78 <pvPortMalloc+0xf4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	b1bb      	cbz	r3, 8007bc2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b92:	4b3a      	ldr	r3, [pc, #232]	; (8007c7c <pvPortMalloc+0xf8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	421c      	tst	r4, r3
 8007b98:	d163      	bne.n	8007c62 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8007b9a:	b1ac      	cbz	r4, 8007bc8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8007b9c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b9e:	f014 0f07 	tst.w	r4, #7
 8007ba2:	d011      	beq.n	8007bc8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ba4:	f024 0407 	bic.w	r4, r4, #7
 8007ba8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007baa:	f004 0307 	and.w	r3, r4, #7
 8007bae:	b15b      	cbz	r3, 8007bc8 <pvPortMalloc+0x44>
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	e7fe      	b.n	8007bc0 <pvPortMalloc+0x3c>
			prvHeapInit();
 8007bc2:	f7ff ff7f 	bl	8007ac4 <prvHeapInit>
 8007bc6:	e7e4      	b.n	8007b92 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bc8:	2c00      	cmp	r4, #0
 8007bca:	d04c      	beq.n	8007c66 <pvPortMalloc+0xe2>
 8007bcc:	4b2c      	ldr	r3, [pc, #176]	; (8007c80 <pvPortMalloc+0xfc>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d34a      	bcc.n	8007c6a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8007bd4:	4b2b      	ldr	r3, [pc, #172]	; (8007c84 <pvPortMalloc+0x100>)
 8007bd6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bd8:	e001      	b.n	8007bde <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8007bda:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bdc:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bde:	686a      	ldr	r2, [r5, #4]
 8007be0:	42a2      	cmp	r2, r4
 8007be2:	d202      	bcs.n	8007bea <pvPortMalloc+0x66>
 8007be4:	682a      	ldr	r2, [r5, #0]
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	d1f7      	bne.n	8007bda <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8007bea:	4a23      	ldr	r2, [pc, #140]	; (8007c78 <pvPortMalloc+0xf4>)
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	42aa      	cmp	r2, r5
 8007bf0:	d03d      	beq.n	8007c6e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bf2:	681e      	ldr	r6, [r3, #0]
 8007bf4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bf6:	682a      	ldr	r2, [r5, #0]
 8007bf8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bfa:	686b      	ldr	r3, [r5, #4]
 8007bfc:	1b1b      	subs	r3, r3, r4
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d910      	bls.n	8007c24 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c02:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c04:	f010 0f07 	tst.w	r0, #7
 8007c08:	d008      	beq.n	8007c1c <pvPortMalloc+0x98>
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	e7fe      	b.n	8007c1a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c1c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c1e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c20:	f7ff ff84 	bl	8007b2c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c24:	686a      	ldr	r2, [r5, #4]
 8007c26:	4916      	ldr	r1, [pc, #88]	; (8007c80 <pvPortMalloc+0xfc>)
 8007c28:	680b      	ldr	r3, [r1, #0]
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c2e:	4916      	ldr	r1, [pc, #88]	; (8007c88 <pvPortMalloc+0x104>)
 8007c30:	6809      	ldr	r1, [r1, #0]
 8007c32:	428b      	cmp	r3, r1
 8007c34:	d201      	bcs.n	8007c3a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c36:	4914      	ldr	r1, [pc, #80]	; (8007c88 <pvPortMalloc+0x104>)
 8007c38:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c3a:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <pvPortMalloc+0xf8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007c46:	f7fe ff59 	bl	8006afc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c4a:	f016 0f07 	tst.w	r6, #7
 8007c4e:	d010      	beq.n	8007c72 <pvPortMalloc+0xee>
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	e7fe      	b.n	8007c60 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8007c62:	2600      	movs	r6, #0
 8007c64:	e7ef      	b.n	8007c46 <pvPortMalloc+0xc2>
 8007c66:	2600      	movs	r6, #0
 8007c68:	e7ed      	b.n	8007c46 <pvPortMalloc+0xc2>
 8007c6a:	2600      	movs	r6, #0
 8007c6c:	e7eb      	b.n	8007c46 <pvPortMalloc+0xc2>
 8007c6e:	2600      	movs	r6, #0
 8007c70:	e7e9      	b.n	8007c46 <pvPortMalloc+0xc2>
}
 8007c72:	4630      	mov	r0, r6
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	bf00      	nop
 8007c78:	20000d4c 	.word	0x20000d4c
 8007c7c:	200020d8 	.word	0x200020d8
 8007c80:	200020dc 	.word	0x200020dc
 8007c84:	200020e4 	.word	0x200020e4
 8007c88:	200020e0 	.word	0x200020e0

08007c8c <vPortFree>:
	if( pv != NULL )
 8007c8c:	b380      	cbz	r0, 8007cf0 <vPortFree+0x64>
{
 8007c8e:	b538      	push	{r3, r4, r5, lr}
 8007c90:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007c92:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c96:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007c9a:	4916      	ldr	r1, [pc, #88]	; (8007cf4 <vPortFree+0x68>)
 8007c9c:	6809      	ldr	r1, [r1, #0]
 8007c9e:	420a      	tst	r2, r1
 8007ca0:	d108      	bne.n	8007cb4 <vPortFree+0x28>
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	e7fe      	b.n	8007cb2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cb4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8007cb8:	b140      	cbz	r0, 8007ccc <vPortFree+0x40>
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	e7fe      	b.n	8007cca <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ccc:	ea22 0201 	bic.w	r2, r2, r1
 8007cd0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8007cd4:	f7fe fe78 	bl	80069c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cd8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007cdc:	4a06      	ldr	r2, [pc, #24]	; (8007cf8 <vPortFree+0x6c>)
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	440b      	add	r3, r1
 8007ce2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7ff ff21 	bl	8007b2c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007cea:	f7fe ff07 	bl	8006afc <xTaskResumeAll>
}
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	200020d8 	.word	0x200020d8
 8007cf8:	200020dc 	.word	0x200020dc

08007cfc <__libc_init_array>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	4e0d      	ldr	r6, [pc, #52]	; (8007d34 <__libc_init_array+0x38>)
 8007d00:	4c0d      	ldr	r4, [pc, #52]	; (8007d38 <__libc_init_array+0x3c>)
 8007d02:	1ba4      	subs	r4, r4, r6
 8007d04:	10a4      	asrs	r4, r4, #2
 8007d06:	2500      	movs	r5, #0
 8007d08:	42a5      	cmp	r5, r4
 8007d0a:	d109      	bne.n	8007d20 <__libc_init_array+0x24>
 8007d0c:	4e0b      	ldr	r6, [pc, #44]	; (8007d3c <__libc_init_array+0x40>)
 8007d0e:	4c0c      	ldr	r4, [pc, #48]	; (8007d40 <__libc_init_array+0x44>)
 8007d10:	f000 f82c 	bl	8007d6c <_init>
 8007d14:	1ba4      	subs	r4, r4, r6
 8007d16:	10a4      	asrs	r4, r4, #2
 8007d18:	2500      	movs	r5, #0
 8007d1a:	42a5      	cmp	r5, r4
 8007d1c:	d105      	bne.n	8007d2a <__libc_init_array+0x2e>
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d24:	4798      	blx	r3
 8007d26:	3501      	adds	r5, #1
 8007d28:	e7ee      	b.n	8007d08 <__libc_init_array+0xc>
 8007d2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d2e:	4798      	blx	r3
 8007d30:	3501      	adds	r5, #1
 8007d32:	e7f2      	b.n	8007d1a <__libc_init_array+0x1e>
 8007d34:	08007e2c 	.word	0x08007e2c
 8007d38:	08007e2c 	.word	0x08007e2c
 8007d3c:	08007e2c 	.word	0x08007e2c
 8007d40:	08007e30 	.word	0x08007e30

08007d44 <memcpy>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	1e43      	subs	r3, r0, #1
 8007d48:	440a      	add	r2, r1
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	d100      	bne.n	8007d50 <memcpy+0xc>
 8007d4e:	bd10      	pop	{r4, pc}
 8007d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d58:	e7f7      	b.n	8007d4a <memcpy+0x6>

08007d5a <memset>:
 8007d5a:	4402      	add	r2, r0
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d100      	bne.n	8007d64 <memset+0xa>
 8007d62:	4770      	bx	lr
 8007d64:	f803 1b01 	strb.w	r1, [r3], #1
 8007d68:	e7f9      	b.n	8007d5e <memset+0x4>
	...

08007d6c <_init>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr

08007d78 <_fini>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr
