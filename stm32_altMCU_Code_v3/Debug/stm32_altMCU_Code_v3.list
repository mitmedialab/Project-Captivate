
stm32_altMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e94  08005e94  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005e94  08005e94  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e94  08005e94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d20  20000010  08005eac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d30  08005eac  00021d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b401  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fc2  00000000  00000000  0004b441  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017ece  00000000  00000000  00050403  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001a48  00000000  00000000  000682d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a68  00000000  00000000  00069d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000165d3  00000000  00000000  0006b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00019257  00000000  00000000  00081d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00082d71  00000000  00000000  0009afb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011dd23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049e4  00000000  00000000  0011dda0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005de8 	.word	0x08005de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005de8 	.word	0x08005de8

080001d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d0:	b500      	push	{lr}
 80001d2:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80001d4:	2300      	movs	r3, #0
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	9303      	str	r3, [sp, #12]
 80001de:	9304      	str	r3, [sp, #16]
 80001e0:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001e2:	4818      	ldr	r0, [pc, #96]	; (8000244 <MX_ADC1_Init+0x74>)
 80001e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001e8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001ee:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001f2:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001f4:	2201      	movs	r2, #1
 80001f6:	7642      	strb	r2, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001f8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80001fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001fe:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000200:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000202:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000204:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000208:	2208      	movs	r2, #8
 800020a:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800020c:	7603      	strb	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800020e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000210:	f000 ff34 	bl	800107c <HAL_ADC_Init>
 8000214:	b980      	cbnz	r0, 8000238 <MX_ADC1_Init+0x68>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000216:	2202      	movs	r2, #2
 8000218:	9200      	str	r2, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800021e:	2300      	movs	r3, #0
 8000220:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8000222:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000224:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000226:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000228:	4669      	mov	r1, sp
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <MX_ADC1_Init+0x74>)
 800022c:	f001 f9de 	bl	80015ec <HAL_ADC_ConfigChannel>
 8000230:	b928      	cbnz	r0, 800023e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
  }

}
 8000232:	b007      	add	sp, #28
 8000234:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000238:	f000 fa54 	bl	80006e4 <Error_Handler>
 800023c:	e7eb      	b.n	8000216 <MX_ADC1_Init+0x46>
    Error_Handler();
 800023e:	f000 fa51 	bl	80006e4 <Error_Handler>
}
 8000242:	e7f6      	b.n	8000232 <MX_ADC1_Init+0x62>
 8000244:	20001994 	.word	0x20001994

08000248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000248:	b510      	push	{r4, lr}
 800024a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	2300      	movs	r3, #0
 800024e:	9303      	str	r3, [sp, #12]
 8000250:	9304      	str	r3, [sp, #16]
 8000252:	9305      	str	r3, [sp, #20]
 8000254:	9306      	str	r3, [sp, #24]
 8000256:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000258:	6803      	ldr	r3, [r0, #0]
 800025a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800025e:	d001      	beq.n	8000264 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000260:	b008      	add	sp, #32
 8000262:	bd10      	pop	{r4, pc}
 8000264:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000266:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800026a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000274:	615a      	str	r2, [r3, #20]
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800027c:	9201      	str	r2, [sp, #4]
 800027e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000280:	695a      	ldr	r2, [r3, #20]
 8000282:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000286:	615a      	str	r2, [r3, #20]
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000292:	2302      	movs	r3, #2
 8000294:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000296:	2303      	movs	r3, #3
 8000298:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029a:	a903      	add	r1, sp, #12
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f001 fcc4 	bl	8001c2c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80002a4:	4811      	ldr	r0, [pc, #68]	; (80002ec <HAL_ADC_MspInit+0xa4>)
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <HAL_ADC_MspInit+0xa8>)
 80002a8:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002aa:	2300      	movs	r3, #0
 80002ac:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002ae:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b8:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002be:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002c0:	2220      	movs	r2, #32
 80002c2:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002c4:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002c6:	f001 fbad 	bl	8001a24 <HAL_DMA_Init>
 80002ca:	b958      	cbnz	r0, 80002e4 <HAL_ADC_MspInit+0x9c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <HAL_ADC_MspInit+0xa4>)
 80002ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80002d0:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2105      	movs	r1, #5
 80002d6:	2012      	movs	r0, #18
 80002d8:	f001 fb3a 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80002dc:	2012      	movs	r0, #18
 80002de:	f001 fb6b 	bl	80019b8 <HAL_NVIC_EnableIRQ>
}
 80002e2:	e7bd      	b.n	8000260 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80002e4:	f000 f9fe 	bl	80006e4 <Error_Handler>
 80002e8:	e7f0      	b.n	80002cc <HAL_ADC_MspInit+0x84>
 80002ea:	bf00      	nop
 80002ec:	200019e4 	.word	0x200019e4
 80002f0:	40020008 	.word	0x40020008

080002f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80002f4:	b500      	push	{lr}
 80002f6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_DMA_Init+0x30>)
 80002fa:	695a      	ldr	r2, [r3, #20]
 80002fc:	f042 0201 	orr.w	r2, r2, #1
 8000300:	615a      	str	r2, [r3, #20]
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2105      	movs	r1, #5
 8000310:	200b      	movs	r0, #11
 8000312:	f001 fb1d 	bl	8001950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000316:	200b      	movs	r0, #11
 8000318:	f001 fb4e 	bl	80019b8 <HAL_NVIC_EnableIRQ>

}
 800031c:	b003      	add	sp, #12
 800031e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000328:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f003 fcb6 	bl	8003c9c <osDelay>
 8000330:	e7fb      	b.n	800032a <StartDefaultTask+0x2>
	...

08000334 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	b0a4      	sub	sp, #144	; 0x90
osKernelInitialize();
 8000338:	f003 fb08 	bl	800394c <osKernelInitialize>
  const osThreadAttr_t defaultTask_attributes = {
 800033c:	2520      	movs	r5, #32
 800033e:	462a      	mov	r2, r5
 8000340:	2100      	movs	r1, #0
 8000342:	a81c      	add	r0, sp, #112	; 0x70
 8000344:	f005 fd47 	bl	8005dd6 <memset>
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <MX_FREERTOS_Init+0xc0>)
 800034a:	931b      	str	r3, [sp, #108]	; 0x6c
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	9320      	str	r3, [sp, #128]	; 0x80
 8000350:	2418      	movs	r4, #24
 8000352:	9421      	str	r4, [sp, #132]	; 0x84
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000354:	aa1b      	add	r2, sp, #108	; 0x6c
 8000356:	2100      	movs	r1, #0
 8000358:	4827      	ldr	r0, [pc, #156]	; (80003f8 <MX_FREERTOS_Init+0xc4>)
 800035a:	f003 fb3f 	bl	80039dc <osThreadNew>
 800035e:	4b27      	ldr	r3, [pc, #156]	; (80003fc <MX_FREERTOS_Init+0xc8>)
 8000360:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t thermopileTask_attributes = {
 8000362:	462a      	mov	r2, r5
 8000364:	2100      	movs	r1, #0
 8000366:	a813      	add	r0, sp, #76	; 0x4c
 8000368:	f005 fd35 	bl	8005dd6 <memset>
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <MX_FREERTOS_Init+0xcc>)
 800036e:	9312      	str	r3, [sp, #72]	; 0x48
 8000370:	f44f 7680 	mov.w	r6, #256	; 0x100
 8000374:	9617      	str	r6, [sp, #92]	; 0x5c
 8000376:	9418      	str	r4, [sp, #96]	; 0x60
    thermopileTaskHandle = osThreadNew(ThermopileTask, NULL, &thermopileTask_attributes);
 8000378:	aa12      	add	r2, sp, #72	; 0x48
 800037a:	2100      	movs	r1, #0
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <MX_FREERTOS_Init+0xd0>)
 800037e:	f003 fb2d 	bl	80039dc <osThreadNew>
 8000382:	4b21      	ldr	r3, [pc, #132]	; (8000408 <MX_FREERTOS_Init+0xd4>)
 8000384:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t masterThreadTask_attributes = {
 8000386:	462a      	mov	r2, r5
 8000388:	2100      	movs	r1, #0
 800038a:	a80a      	add	r0, sp, #40	; 0x28
 800038c:	f005 fd23 	bl	8005dd6 <memset>
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <MX_FREERTOS_Init+0xd8>)
 8000392:	9309      	str	r3, [sp, #36]	; 0x24
 8000394:	960e      	str	r6, [sp, #56]	; 0x38
 8000396:	940f      	str	r4, [sp, #60]	; 0x3c
  masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 8000398:	aa09      	add	r2, sp, #36	; 0x24
 800039a:	2100      	movs	r1, #0
 800039c:	481c      	ldr	r0, [pc, #112]	; (8000410 <MX_FREERTOS_Init+0xdc>)
 800039e:	f003 fb1d 	bl	80039dc <osThreadNew>
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <MX_FREERTOS_Init+0xe0>)
 80003a4:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t sendMsgToMainTask_attributes = {
 80003a6:	462a      	mov	r2, r5
 80003a8:	2100      	movs	r1, #0
 80003aa:	a801      	add	r0, sp, #4
 80003ac:	f005 fd13 	bl	8005dd6 <memset>
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_FREERTOS_Init+0xe4>)
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	9605      	str	r6, [sp, #20]
 80003b6:	9406      	str	r4, [sp, #24]
  sendMsgToMainTaskHandle = osThreadNew(SendPacketToMainTask, NULL, &sendMsgToMainTask_attributes);
 80003b8:	466a      	mov	r2, sp
 80003ba:	2100      	movs	r1, #0
 80003bc:	4817      	ldr	r0, [pc, #92]	; (800041c <MX_FREERTOS_Init+0xe8>)
 80003be:	f003 fb0d 	bl	80039dc <osThreadNew>
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_FREERTOS_Init+0xec>)
 80003c4:	6018      	str	r0, [r3, #0]
  togLoggingQueueHandle = osMessageQueueNew (2, sizeof(struct LogMessage), NULL);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2106      	movs	r1, #6
 80003ca:	2002      	movs	r0, #2
 80003cc:	f003 fc88 	bl	8003ce0 <osMessageQueueNew>
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_FREERTOS_Init+0xf0>)
 80003d2:	6018      	str	r0, [r3, #0]
  thermMsgQueueHandle = osMessageQueueNew (10, sizeof(struct thermopileData), NULL);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2158      	movs	r1, #88	; 0x58
 80003d8:	200a      	movs	r0, #10
 80003da:	f003 fc81 	bl	8003ce0 <osMessageQueueNew>
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_FREERTOS_Init+0xf4>)
 80003e0:	6018      	str	r0, [r3, #0]
  sendMsgToMainQueueHandle = osMessageQueueNew (10, sizeof(struct LogPacket), NULL);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2170      	movs	r1, #112	; 0x70
 80003e6:	200a      	movs	r0, #10
 80003e8:	f003 fc7a 	bl	8003ce0 <osMessageQueueNew>
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_FREERTOS_Init+0xf8>)
 80003ee:	6018      	str	r0, [r3, #0]
}
 80003f0:	b024      	add	sp, #144	; 0x90
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	08005e00 	.word	0x08005e00
 80003f8:	08000329 	.word	0x08000329
 80003fc:	20001a28 	.word	0x20001a28
 8000400:	08005e0c 	.word	0x08005e0c
 8000404:	08000bc9 	.word	0x08000bc9
 8000408:	20000030 	.word	0x20000030
 800040c:	08005e1c 	.word	0x08005e1c
 8000410:	080007dd 	.word	0x080007dd
 8000414:	20001a38 	.word	0x20001a38
 8000418:	08005e30 	.word	0x08005e30
 800041c:	080005f5 	.word	0x080005f5
 8000420:	20001a2c 	.word	0x20001a2c
 8000424:	20001a34 	.word	0x20001a34
 8000428:	2000002c 	.word	0x2000002c
 800042c:	20001a30 	.word	0x20001a30

08000430 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	2400      	movs	r4, #0
 8000436:	9403      	str	r4, [sp, #12]
 8000438:	9404      	str	r4, [sp, #16]
 800043a:	9405      	str	r4, [sp, #20]
 800043c:	9406      	str	r4, [sp, #24]
 800043e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000440:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <MX_GPIO_Init+0xb8>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000462:	9201      	str	r2, [sp, #4]
 8000464:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000474:	9302      	str	r3, [sp, #8]
 8000476:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_INT_Pin|TP25_Pin|TP24_Pin|TP22_Pin 
 8000478:	4622      	mov	r2, r4
 800047a:	f241 7110 	movw	r1, #5904	; 0x1710
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f001 fc97 	bl	8001db4 <HAL_GPIO_WritePin>
                          |TP20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048e:	f001 fc91 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_11;
 8000492:	f640 0381 	movw	r3, #2177	; 0x881
 8000496:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000498:	2503      	movs	r5, #3
 800049a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	a903      	add	r1, sp, #12
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f001 fbc2 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOG_EXP_CONN_Pin|ADC_ALERT_Pin|IMU_INT_Pin;
 80004a8:	232c      	movs	r3, #44	; 0x2c
 80004aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_GPIO_Init+0xbc>)
 80004ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	a903      	add	r1, sp, #12
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b8:	f001 fbb8 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin|TP_SS_Pin|TP25_Pin|TP24_Pin 
 80004bc:	f241 7350 	movw	r3, #5968	; 0x1750
 80004c0:	9303      	str	r3, [sp, #12]
                          |TP22_Pin|TP20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	a903      	add	r1, sp, #12
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f001 fbac 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 80004d4:	2341      	movs	r3, #65	; 0x41
 80004d6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	a903      	add	r1, sp, #12
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <MX_GPIO_Init+0xc0>)
 80004e0:	f001 fba4 	bl	8001c2c <HAL_GPIO_Init>

}
 80004e4:	b009      	add	sp, #36	; 0x24
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	10110000 	.word	0x10110000
 80004f0:	48000400 	.word	0x48000400

080004f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004f4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80004f6:	4813      	ldr	r0, [pc, #76]	; (8000544 <MX_I2C1_Init+0x50>)
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <MX_I2C1_Init+0x54>)
 80004fa:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00E07CB4;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_I2C1_Init+0x58>)
 80004fe:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 230;
 8000500:	23e6      	movs	r3, #230	; 0xe6
 8000502:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000504:	2301      	movs	r3, #1
 8000506:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800050c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800050e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000510:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000512:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000514:	f001 fc53 	bl	8001dbe <HAL_I2C_Init>
 8000518:	b950      	cbnz	r0, 8000530 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800051a:	2100      	movs	r1, #0
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <MX_I2C1_Init+0x50>)
 800051e:	f001 fcb4 	bl	8001e8a <HAL_I2CEx_ConfigAnalogFilter>
 8000522:	b940      	cbnz	r0, 8000536 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000524:	2100      	movs	r1, #0
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <MX_I2C1_Init+0x50>)
 8000528:	f001 fcdd 	bl	8001ee6 <HAL_I2CEx_ConfigDigitalFilter>
 800052c:	b930      	cbnz	r0, 800053c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 800052e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000530:	f000 f8d8 	bl	80006e4 <Error_Handler>
 8000534:	e7f1      	b.n	800051a <MX_I2C1_Init+0x26>
    Error_Handler();
 8000536:	f000 f8d5 	bl	80006e4 <Error_Handler>
 800053a:	e7f3      	b.n	8000524 <MX_I2C1_Init+0x30>
    Error_Handler();
 800053c:	f000 f8d2 	bl	80006e4 <Error_Handler>
}
 8000540:	e7f5      	b.n	800052e <MX_I2C1_Init+0x3a>
 8000542:	bf00      	nop
 8000544:	20001a3c 	.word	0x20001a3c
 8000548:	40005400 	.word	0x40005400
 800054c:	00e07cb4 	.word	0x00e07cb4

08000550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	2300      	movs	r3, #0
 8000556:	9303      	str	r3, [sp, #12]
 8000558:	9304      	str	r3, [sp, #16]
 800055a:	9305      	str	r3, [sp, #20]
 800055c:	9306      	str	r3, [sp, #24]
 800055e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000560:	6802      	ldr	r2, [r0, #0]
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <HAL_I2C_MspInit+0x98>)
 8000564:	429a      	cmp	r2, r3
 8000566:	d001      	beq.n	800056c <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000568:	b009      	add	sp, #36	; 0x24
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4c1f      	ldr	r4, [pc, #124]	; (80005ec <HAL_I2C_MspInit+0x9c>)
 800056e:	6963      	ldr	r3, [r4, #20]
 8000570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000574:	6163      	str	r3, [r4, #20]
 8000576:	6963      	ldr	r3, [r4, #20]
 8000578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	6963      	ldr	r3, [r4, #20]
 8000582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000586:	6163      	str	r3, [r4, #20]
 8000588:	6963      	ldr	r3, [r4, #20]
 800058a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000596:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000598:	2512      	movs	r5, #18
 800059a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2703      	movs	r7, #3
 800059e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005a0:	2604      	movs	r6, #4
 80005a2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	a903      	add	r1, sp, #12
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f001 fb3f 	bl	8001c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2500      	movs	r5, #0
 80005b6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ba:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	a903      	add	r1, sp, #12
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <HAL_I2C_MspInit+0xa0>)
 80005c0:	f001 fb34 	bl	8001c2c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c4:	69e3      	ldr	r3, [r4, #28]
 80005c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ca:	61e3      	str	r3, [r4, #28]
 80005cc:	69e3      	ldr	r3, [r4, #28]
 80005ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005d2:	9302      	str	r3, [sp, #8]
 80005d4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80005d6:	462a      	mov	r2, r5
 80005d8:	2105      	movs	r1, #5
 80005da:	201f      	movs	r0, #31
 80005dc:	f001 f9b8 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005e0:	201f      	movs	r0, #31
 80005e2:	f001 f9e9 	bl	80019b8 <HAL_NVIC_EnableIRQ>
}
 80005e6:	e7bf      	b.n	8000568 <HAL_I2C_MspInit+0x18>
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <SendPacketToMainTask>:


struct LogPacket packetReceived;

/* Functions Definition ------------------------------------------------------*/
void SendPacketToMainTask(void *argument){
 80005f4:	b508      	push	{r3, lr}

	// wait for packet
	osMessageQueueGet(sendMsgToMainQueueHandle, &packetReceived, 0U, osWaitForever);
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2200      	movs	r2, #0
 80005fc:	490a      	ldr	r1, [pc, #40]	; (8000628 <SendPacketToMainTask+0x34>)
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <SendPacketToMainTask+0x38>)
 8000600:	6800      	ldr	r0, [r0, #0]
 8000602:	f003 fc1f 	bl	8003e44 <osMessageQueueGet>

	// trigger interrupt line to MCU to tell it that a packet is ready
	HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f001 fbd1 	bl	8001db4 <HAL_GPIO_WritePin>

	// send packet via I2C
	osDelay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f003 fb42 	bl	8003c9c <osDelay>

	// reset trigger
	HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f001 fbc8 	bl	8001db4 <HAL_GPIO_WritePin>


}
 8000624:	bd08      	pop	{r3, pc}
 8000626:	bf00      	nop
 8000628:	20001a88 	.word	0x20001a88
 800062c:	20001a30 	.word	0x20001a30

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b530      	push	{r4, r5, lr}
 8000632:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000634:	2220      	movs	r2, #32
 8000636:	2100      	movs	r1, #0
 8000638:	a814      	add	r0, sp, #80	; 0x50
 800063a:	f005 fbcc 	bl	8005dd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063e:	2400      	movs	r4, #0
 8000640:	940d      	str	r4, [sp, #52]	; 0x34
 8000642:	940e      	str	r4, [sp, #56]	; 0x38
 8000644:	940f      	str	r4, [sp, #60]	; 0x3c
 8000646:	9410      	str	r4, [sp, #64]	; 0x40
 8000648:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	4621      	mov	r1, r4
 800064e:	a801      	add	r0, sp, #4
 8000650:	f005 fbc1 	bl	8005dd6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000654:	2309      	movs	r3, #9
 8000656:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	2501      	movs	r5, #1
 8000660:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000662:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	a812      	add	r0, sp, #72	; 0x48
 8000666:	f001 fc6b 	bl	8001f40 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	930d      	str	r3, [sp, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800066e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	9411      	str	r4, [sp, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000676:	4629      	mov	r1, r5
 8000678:	a80d      	add	r0, sp, #52	; 0x34
 800067a:	f001 ffc1 	bl	8002600 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <SystemClock_Config+0x68>)
 8000680:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000682:	2310      	movs	r3, #16
 8000684:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	a801      	add	r0, sp, #4
 800068e:	f002 f8c3 	bl	8002818 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000692:	b01d      	add	sp, #116	; 0x74
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	bf00      	nop
 8000698:	00010020 	.word	0x00010020

0800069c <main>:
{
 800069c:	b508      	push	{r3, lr}
  HAL_Init();
 800069e:	f000 fb95 	bl	8000dcc <HAL_Init>
  SystemClock_Config();
 80006a2:	f7ff ffc5 	bl	8000630 <SystemClock_Config>
  MX_GPIO_Init();
 80006a6:	f7ff fec3 	bl	8000430 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006aa:	f7ff ff23 	bl	80004f4 <MX_I2C1_Init>
  MX_SPI3_Init();
 80006ae:	f000 f917 	bl	80008e0 <MX_SPI3_Init>
  MX_ADC1_Init();
 80006b2:	f7ff fd8d 	bl	80001d0 <MX_ADC1_Init>
  MX_DMA_Init();
 80006b6:	f7ff fe1d 	bl	80002f4 <MX_DMA_Init>
  MX_TIM2_Init();
 80006ba:	f000 fae9 	bl	8000c90 <MX_TIM2_Init>
  MX_RTC_Init();
 80006be:	f000 f8e1 	bl	8000884 <MX_RTC_Init>
  MX_FREERTOS_Init(); 
 80006c2:	f7ff fe37 	bl	8000334 <MX_FREERTOS_Init>
  osKernelStart();
 80006c6:	f003 f963 	bl	8003990 <osKernelStart>
 80006ca:	e7fe      	b.n	80006ca <main+0x2e>

080006cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006ce:	6802      	ldr	r2, [r0, #0]
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d000      	beq.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80006d8:	f000 fb8a 	bl	8000df0 <HAL_IncTick>
}
 80006dc:	e7fb      	b.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80006de:	bf00      	nop
 80006e0:	40012c00 	.word	0x40012c00

080006e4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006e4:	4770      	bx	lr
	...

080006e8 <RTC_ToEpoch>:
	// add sensor data
	memcpy ( &(packet->temp), temp, sizeof(struct tempData) );
}

// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80006e8:	b430      	push	{r4, r5}
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 80006ea:	784b      	ldrb	r3, [r1, #1]
 80006ec:	f1c3 040e 	rsb	r4, r3, #14
 80006f0:	4d22      	ldr	r5, [pc, #136]	; (800077c <RTC_ToEpoch+0x94>)
 80006f2:	fb85 2504 	smull	r2, r5, r5, r4
 80006f6:	17e2      	asrs	r2, r4, #31
 80006f8:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 80006fc:	b2d2      	uxtb	r2, r2
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 80006fe:	78cc      	ldrb	r4, [r1, #3]
 8000700:	1aa4      	subs	r4, r4, r2
 8000702:	f641 2590 	movw	r5, #6800	; 0x1a90
 8000706:	fa15 f484 	uxtah	r4, r5, r4
 800070a:	b2a4      	uxth	r4, r4
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 800070c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000710:	0095      	lsls	r5, r2, #2
 8000712:	442b      	add	r3, r5
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3b03      	subs	r3, #3
 8000718:	b2db      	uxtb	r3, r3

	// Gregorian calendar date compute
    JDN  = date->Date;
 800071a:	788a      	ldrb	r2, [r1, #2]
    JDN += (153 * m + 2) / 5;
 800071c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000720:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000724:	3302      	adds	r3, #2
 8000726:	4916      	ldr	r1, [pc, #88]	; (8000780 <RTC_ToEpoch+0x98>)
 8000728:	fb81 1303 	smull	r1, r3, r1, r3
 800072c:	eb02 0263 	add.w	r2, r2, r3, asr #1
    JDN += 365 * y;
 8000730:	f240 136d 	movw	r3, #365	; 0x16d
 8000734:	fb03 2304 	mla	r3, r3, r4, r2
    JDN += y / 4;
 8000738:	eb03 0394 	add.w	r3, r3, r4, lsr #2
    JDN += -y / 100;
 800073c:	4262      	negs	r2, r4
 800073e:	4911      	ldr	r1, [pc, #68]	; (8000784 <RTC_ToEpoch+0x9c>)
 8000740:	fb81 c502 	smull	ip, r5, r1, r2
 8000744:	17d2      	asrs	r2, r2, #31
 8000746:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 800074a:	441a      	add	r2, r3
    JDN += y / 400;
 800074c:	fba1 3404 	umull	r3, r4, r1, r4
 8000750:	eb02 14d4 	add.w	r4, r2, r4, lsr #7
    JDN  = JDN - 32045;
    JDN  = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <RTC_ToEpoch+0xa0>)
 8000756:	4423      	add	r3, r4
    JDN *= 86400;                     // Days to seconds
    JDN += time->Hours * 3600;    // ... and today seconds
 8000758:	7801      	ldrb	r1, [r0, #0]
 800075a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800075e:	fb02 f201 	mul.w	r2, r2, r1
 8000762:	490a      	ldr	r1, [pc, #40]	; (800078c <RTC_ToEpoch+0xa4>)
 8000764:	fb01 2303 	mla	r3, r1, r3, r2
    JDN += time->Minutes * 60;
 8000768:	7842      	ldrb	r2, [r0, #1]
 800076a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800076e:	0091      	lsls	r1, r2, #2
 8000770:	440b      	add	r3, r1
    JDN += time->Seconds;
 8000772:	7880      	ldrb	r0, [r0, #2]

	return JDN;
}
 8000774:	4418      	add	r0, r3
 8000776:	bc30      	pop	{r4, r5}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	2aaaaaab 	.word	0x2aaaaaab
 8000780:	66666667 	.word	0x66666667
 8000784:	51eb851f 	.word	0x51eb851f
 8000788:	ffda4547 	.word	0xffda4547
 800078c:	00015180 	.word	0x00015180

08000790 <packetizeData>:
{
 8000790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000794:	4604      	mov	r4, r0
 8000796:	4688      	mov	r8, r1
	packet->tick_ms = HAL_GetTick();
 8000798:	f000 fb36 	bl	8000e08 <HAL_GetTick>
 800079c:	66a0      	str	r0, [r4, #104]	; 0x68
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 800079e:	4d0c      	ldr	r5, [pc, #48]	; (80007d0 <packetizeData+0x40>)
 80007a0:	4f0c      	ldr	r7, [pc, #48]	; (80007d4 <packetizeData+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	4629      	mov	r1, r5
 80007a6:	4638      	mov	r0, r7
 80007a8:	f002 f9ec 	bl	8002b84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 80007ac:	4e0a      	ldr	r6, [pc, #40]	; (80007d8 <packetizeData+0x48>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	4631      	mov	r1, r6
 80007b2:	4638      	mov	r0, r7
 80007b4:	f002 fa11 	bl	8002bda <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 80007b8:	4631      	mov	r1, r6
 80007ba:	4628      	mov	r0, r5
 80007bc:	f7ff ff94 	bl	80006e8 <RTC_ToEpoch>
 80007c0:	66e0      	str	r0, [r4, #108]	; 0x6c
	memcpy ( &(packet->temp), temp, sizeof(struct tempData) );
 80007c2:	2268      	movs	r2, #104	; 0x68
 80007c4:	4641      	mov	r1, r8
 80007c6:	4620      	mov	r0, r4
 80007c8:	f005 fafa 	bl	8005dc0 <memcpy>
}
 80007cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007d0:	20001bc8 	.word	0x20001bc8
 80007d4:	20001be8 	.word	0x20001be8
 80007d8:	20001be4 	.word	0x20001be4

080007dc <MasterThreadTask>:
{
 80007dc:	b508      	push	{r3, lr}
		togLogMessageReceived.status = 1;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MasterThreadTask+0x88>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	7019      	strb	r1, [r3, #0]
		togLogMessageReceived.logStatus = 1;
 80007e4:	7059      	strb	r1, [r3, #1]
		togLogMessageReceived.blinkEnabled = 1;
 80007e6:	7099      	strb	r1, [r3, #2]
		togLogMessageReceived.tempEnabled = 1;
 80007e8:	70d9      	strb	r1, [r3, #3]
		togLogMessageReceived.intertialEnabled = 1;
 80007ea:	7119      	strb	r1, [r3, #4]
		togLogMessageReceived.positionEnabled = 1;
 80007ec:	7159      	strb	r1, [r3, #5]
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <MasterThreadTask+0x8c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	6010      	str	r0, [r2, #0]
 80007f4:	889b      	ldrh	r3, [r3, #4]
 80007f6:	8093      	strh	r3, [r2, #4]
				osThreadFlagsSet(thermopileTaskHandle, 0x00000001U);
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MasterThreadTask+0x90>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	f003 f962 	bl	8003ac4 <osThreadFlagsSet>
				if(togLogMessageReceived.tempEnabled == SENSOR_ENABLE)
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MasterThreadTask+0x88>)
 8000802:	78db      	ldrb	r3, [r3, #3]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d023      	beq.n	8000850 <MasterThreadTask+0x74>
				packetizeData(&sensorPacket, &thermMsgReceived, NULL);
 8000808:	4c19      	ldr	r4, [pc, #100]	; (8000870 <MasterThreadTask+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	4919      	ldr	r1, [pc, #100]	; (8000874 <MasterThreadTask+0x98>)
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff ffbe 	bl	8000790 <packetizeData>
				osMessageQueuePut(sendMsgToMainQueueHandle, (void *) &sensorPacket, 0U, 0);
 8000814:	2300      	movs	r3, #0
 8000816:	461a      	mov	r2, r3
 8000818:	4621      	mov	r1, r4
 800081a:	4817      	ldr	r0, [pc, #92]	; (8000878 <MasterThreadTask+0x9c>)
 800081c:	6800      	ldr	r0, [r0, #0]
 800081e:	f003 fabf 	bl	8003da0 <osMessageQueuePut>
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 8000822:	2300      	movs	r3, #0
 8000824:	461a      	mov	r2, r3
 8000826:	490f      	ldr	r1, [pc, #60]	; (8000864 <MasterThreadTask+0x88>)
 8000828:	4814      	ldr	r0, [pc, #80]	; (800087c <MasterThreadTask+0xa0>)
 800082a:	6800      	ldr	r0, [r0, #0]
 800082c:	f003 fb0a 	bl	8003e44 <osMessageQueueGet>
 8000830:	2800      	cmp	r0, #0
 8000832:	d1e5      	bne.n	8000800 <MasterThreadTask+0x24>
					if(togLogMessageReceived.status == DISABLE_SENSING){
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MasterThreadTask+0x88>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e1      	bne.n	8000800 <MasterThreadTask+0x24>
						if(prevLogMessage.tempEnabled == SENSOR_ENABLE)
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MasterThreadTask+0x8c>)
 800083e:	78db      	ldrb	r3, [r3, #3]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d1cc      	bne.n	80007de <MasterThreadTask+0x2>
							osThreadFlagsSet(thermopileTaskHandle, 0x00000002U);
 8000844:	2102      	movs	r1, #2
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MasterThreadTask+0x90>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	f003 f93b 	bl	8003ac4 <osThreadFlagsSet>
 800084e:	e7c6      	b.n	80007de <MasterThreadTask+0x2>
					osMessageQueueGet(thermMsgQueueHandle, &thermMsgReceived, 0U, osWaitForever);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2200      	movs	r2, #0
 8000856:	4907      	ldr	r1, [pc, #28]	; (8000874 <MasterThreadTask+0x98>)
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <MasterThreadTask+0xa4>)
 800085a:	6800      	ldr	r0, [r0, #0]
 800085c:	f003 faf2 	bl	8003e44 <osMessageQueueGet>
 8000860:	e7d2      	b.n	8000808 <MasterThreadTask+0x2c>
 8000862:	bf00      	nop
 8000864:	20001af8 	.word	0x20001af8
 8000868:	20001bdc 	.word	0x20001bdc
 800086c:	20000030 	.word	0x20000030
 8000870:	20001b58 	.word	0x20001b58
 8000874:	20001b00 	.word	0x20001b00
 8000878:	20001a30 	.word	0x20001a30
 800087c:	20001a34 	.word	0x20001a34
 8000880:	2000002c 	.word	0x2000002c

08000884 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000884:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_RTC_Init+0x28>)
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_RTC_Init+0x2c>)
 800088a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800088c:	2300      	movs	r3, #0
 800088e:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000890:	227f      	movs	r2, #127	; 0x7f
 8000892:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000898:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800089a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800089e:	f002 f906 	bl	8002aae <HAL_RTC_Init>
 80008a2:	b900      	cbnz	r0, 80008a6 <MX_RTC_Init+0x22>
  {
    Error_Handler();
  }

}
 80008a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008a6:	f7ff ff1d 	bl	80006e4 <Error_Handler>
}
 80008aa:	e7fb      	b.n	80008a4 <MX_RTC_Init+0x20>
 80008ac:	20001be8 	.word	0x20001be8
 80008b0:	40002800 	.word	0x40002800

080008b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80008b4:	6802      	ldr	r2, [r0, #0]
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_RTC_MspInit+0x24>)
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d000      	beq.n	80008be <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008bc:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008c2:	fa92 f2a2 	rbit	r2, r2
    __HAL_RCC_RTC_ENABLE();
 80008c6:	fab2 f282 	clz	r2, r2
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HAL_RTC_MspInit+0x28>)
 80008cc:	4413      	add	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	e7f2      	b.n	80008bc <HAL_RTC_MspInit+0x8>
 80008d6:	bf00      	nop
 80008d8:	40002800 	.word	0x40002800
 80008dc:	10908100 	.word	0x10908100

080008e0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008e0:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <MX_SPI3_Init+0x44>)
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_SPI3_Init+0x48>)
 80008e6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008e8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80008ec:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	2300      	movs	r3, #0
 80008f0:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008f6:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f8:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000902:	2228      	movs	r2, #40	; 0x28
 8000904:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000908:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800090c:	2207      	movs	r2, #7
 800090e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000910:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000912:	2308      	movs	r3, #8
 8000914:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000916:	f002 fa48 	bl	8002daa <HAL_SPI_Init>
 800091a:	b900      	cbnz	r0, 800091e <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 800091c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800091e:	f7ff fee1 	bl	80006e4 <Error_Handler>
}
 8000922:	e7fb      	b.n	800091c <MX_SPI3_Init+0x3c>
 8000924:	20001c08 	.word	0x20001c08
 8000928:	40003c00 	.word	0x40003c00

0800092c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800092c:	b500      	push	{lr}
 800092e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	2300      	movs	r3, #0
 8000932:	9303      	str	r3, [sp, #12]
 8000934:	9304      	str	r3, [sp, #16]
 8000936:	9305      	str	r3, [sp, #20]
 8000938:	9306      	str	r3, [sp, #24]
 800093a:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 800093c:	6802      	ldr	r2, [r0, #0]
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_SPI_MspInit+0x70>)
 8000940:	429a      	cmp	r2, r3
 8000942:	d002      	beq.n	800094a <HAL_SPI_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000944:	b009      	add	sp, #36	; 0x24
 8000946:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800094a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800094e:	69da      	ldr	r2, [r3, #28]
 8000950:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000954:	61da      	str	r2, [r3, #28]
 8000956:	69da      	ldr	r2, [r3, #28]
 8000958:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800095c:	9201      	str	r2, [sp, #4]
 800095e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000972:	2338      	movs	r3, #56	; 0x38
 8000974:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097e:	2306      	movs	r3, #6
 8000980:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	a903      	add	r1, sp, #12
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <HAL_SPI_MspInit+0x74>)
 8000986:	f001 f951 	bl	8001c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	2033      	movs	r0, #51	; 0x33
 8000990:	f000 ffde 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000994:	2033      	movs	r0, #51	; 0x33
 8000996:	f001 f80f 	bl	80019b8 <HAL_NVIC_EnableIRQ>
}
 800099a:	e7d3      	b.n	8000944 <HAL_SPI_MspInit+0x18>
 800099c:	40003c00 	.word	0x40003c00
 80009a0:	48000400 	.word	0x48000400

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b500      	push	{lr}
 80009a6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x3c>)
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	f042 0201 	orr.w	r2, r2, #1
 80009b0:	619a      	str	r2, [r3, #24]
 80009b2:	699a      	ldr	r2, [r3, #24]
 80009b4:	f002 0201 	and.w	r2, r2, #1
 80009b8:	9200      	str	r2, [sp, #0]
 80009ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009c2:	61da      	str	r2, [r3, #28]
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	210f      	movs	r1, #15
 80009d2:	f06f 0001 	mvn.w	r0, #1
 80009d6:	f000 ffbb 	bl	8001950 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	b003      	add	sp, #12
 80009dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b500      	push	{lr}
 80009e6:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80009e8:	2200      	movs	r2, #0
 80009ea:	4601      	mov	r1, r0
 80009ec:	2019      	movs	r0, #25
 80009ee:	f000 ffaf 	bl	8001950 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80009f2:	2019      	movs	r0, #25
 80009f4:	f000 ffe0 	bl	80019b8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_InitTick+0x68>)
 80009fa:	699a      	ldr	r2, [r3, #24]
 80009fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a00:	619a      	str	r2, [r3, #24]
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	a902      	add	r1, sp, #8
 8000a0e:	a803      	add	r0, sp, #12
 8000a10:	f001 fee4 	bl	80027dc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a14:	f001 fecc 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_InitTick+0x6c>)
 8000a1a:	fba3 2300 	umull	r2, r3, r3, r0
 8000a1e:	0c9b      	lsrs	r3, r3, #18
 8000a20:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a22:	480c      	ldr	r0, [pc, #48]	; (8000a54 <HAL_InitTick+0x70>)
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <HAL_InitTick+0x74>)
 8000a26:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2c:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2e:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a36:	f002 fe25 	bl	8003684 <HAL_TIM_Base_Init>
 8000a3a:	b118      	cbz	r0, 8000a44 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a3c:	2001      	movs	r0, #1
}
 8000a3e:	b009      	add	sp, #36	; 0x24
 8000a40:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <HAL_InitTick+0x70>)
 8000a46:	f002 fcdf 	bl	8003408 <HAL_TIM_Base_Start_IT>
 8000a4a:	e7f8      	b.n	8000a3e <HAL_InitTick+0x5a>
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	20001c6c 	.word	0x20001c6c
 8000a58:	40012c00 	.word	0x40012c00

08000a5c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a5c:	4770      	bx	lr

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler>

08000a66 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	4770      	bx	lr

08000a68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a6a:	4802      	ldr	r0, [pc, #8]	; (8000a74 <DMA1_Channel1_IRQHandler+0xc>)
 8000a6c:	f001 f883 	bl	8001b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a70:	bd08      	pop	{r3, pc}
 8000a72:	bf00      	nop
 8000a74:	200019e4 	.word	0x200019e4

08000a78 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a7a:	4802      	ldr	r0, [pc, #8]	; (8000a84 <ADC1_IRQHandler+0xc>)
 8000a7c:	f000 fc9a 	bl	80013b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000a80:	bd08      	pop	{r3, pc}
 8000a82:	bf00      	nop
 8000a84:	20001994 	.word	0x20001994

08000a88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a8a:	4802      	ldr	r0, [pc, #8]	; (8000a94 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000a8c:	f002 fced 	bl	800346a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a90:	bd08      	pop	{r3, pc}
 8000a92:	bf00      	nop
 8000a94:	20001c6c 	.word	0x20001c6c

08000a98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a9a:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM2_IRQHandler+0xc>)
 8000a9c:	f002 fce5 	bl	800346a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aa0:	bd08      	pop	{r3, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20001cac 	.word	0x20001cac

08000aa8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000aa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000aaa:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <I2C1_EV_IRQHandler+0xc>)
 8000aac:	f001 f9e5 	bl	8001e7a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ab0:	bd08      	pop	{r3, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20001a3c 	.word	0x20001a3c

08000ab8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <SPI3_IRQHandler+0xc>)
 8000abc:	f002 fac2 	bl	8003044 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000ac0:	bd08      	pop	{r3, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20001c08 	.word	0x20001c08

08000ac8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SystemInit+0x18>)
 8000aca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ace:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ada:	609a      	str	r2, [r3, #8]
#endif
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <HAL_ADC_ErrorCallback>:
}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 8000ae4:	4a02      	ldr	r2, [pc, #8]	; (8000af0 <HAL_ADC_ErrorCallback+0xc>)
 8000ae6:	7813      	ldrb	r3, [r2, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	7013      	strb	r3, [r2, #0]
}
 8000aee:	4770      	bx	lr
 8000af0:	20000036 	.word	0x20000036

08000af4 <HAL_ADC_ConvCpltCallback>:

volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000af4:	b508      	push	{r3, lr}
	complete++;
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_ADC_ConvCpltCallback+0x20>)
 8000af8:	7813      	ldrb	r3, [r2, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	7013      	strb	r3, [r2, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b02:	f000 fc17 	bl	8001334 <HAL_ADC_Stop_DMA>
//
//	// notify ThermopileTask that conversion is complete
	osThreadFlagsSet(thermopileTaskHandle, 0x00000004U);
 8000b06:	2104      	movs	r1, #4
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_ADC_ConvCpltCallback+0x28>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f002 ffda 	bl	8003ac4 <osThreadFlagsSet>

}
 8000b10:	bd08      	pop	{r3, pc}
 8000b12:	bf00      	nop
 8000b14:	20000034 	.word	0x20000034
 8000b18:	20001994 	.word	0x20001994
 8000b1c:	20000030 	.word	0x20000030

08000b20 <HAL_ADC_ConvHalfCpltCallback>:

volatile uint8_t half = 0;
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
	half++;
 8000b20:	4a02      	ldr	r2, [pc, #8]	; (8000b2c <HAL_ADC_ConvHalfCpltCallback+0xc>)
 8000b22:	7813      	ldrb	r3, [r2, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	7013      	strb	r3, [r2, #0]
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
//	blink_ptr = &blink_buffer;
//	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);

}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000035 	.word	0x20000035

08000b30 <SwitchTemperatureSensor>:
//}

/*
 * Helper Functions
 */
void SwitchTemperatureSensor(sensorChoice sense){
 8000b30:	b500      	push	{lr}
 8000b32:	b083      	sub	sp, #12

	uint8_t packet[2] = {0};
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8ad 3004 	strh.w	r3, [sp, #4]

	packet[0] = LMP91051_CFG_REG;

	if(sense == nose){
 8000b3a:	2801      	cmp	r0, #1
 8000b3c:	d01b      	beq.n	8000b76 <SwitchTemperatureSensor+0x46>
		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_250 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
	}
	else if(sense == temple){
 8000b3e:	b910      	cbnz	r0, 8000b46 <SwitchTemperatureSensor+0x16>
		packet[1] = TP_TEMPLE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_250 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
 8000b40:	23e2      	movs	r3, #226	; 0xe2
 8000b42:	f88d 3005 	strb.w	r3, [sp, #5]
	}

	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f001 f931 	bl	8001db4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000b52:	2301      	movs	r3, #1
 8000b54:	2202      	movs	r2, #2
 8000b56:	a901      	add	r1, sp, #4
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <SwitchTemperatureSensor+0x50>)
 8000b5a:	f002 f983 	bl	8002e64 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f000 f958 	bl	8000e14 <HAL_Delay>
	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f001 f922 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000b70:	b003      	add	sp, #12
 8000b72:	f85d fb04 	ldr.w	pc, [sp], #4
		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_250 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
 8000b76:	2362      	movs	r3, #98	; 0x62
 8000b78:	f88d 3005 	strb.w	r3, [sp, #5]
 8000b7c:	e7e3      	b.n	8000b46 <SwitchTemperatureSensor+0x16>
 8000b7e:	bf00      	nop
 8000b80:	20001c08 	.word	0x20001c08

08000b84 <Setup_LMP91051>:

void Setup_LMP91051(void){
 8000b84:	b500      	push	{lr}
 8000b86:	b083      	sub	sp, #12
  uint8_t packet[2];
  packet[0] = LMP91051_CFG_REG;
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f88d 2004 	strb.w	r2, [sp, #4]
  packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_8 | GAIN1_250 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
 8000b8e:	2362      	movs	r3, #98	; 0x62
 8000b90:	f88d 3005 	strb.w	r3, [sp, #5]

  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f001 f90b 	bl	8001db4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	a901      	add	r1, sp, #4
 8000ba4:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <Setup_LMP91051+0x40>)
 8000ba6:	f002 f95d 	bl	8002e64 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f000 f932 	bl	8000e14 <HAL_Delay>
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f001 f8fc 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8000bbc:	b003      	add	sp, #12
 8000bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bc2:	bf00      	nop
 8000bc4:	20001c08 	.word	0x20001c08

08000bc8 <ThermopileTask>:
void ThermopileTask(void *argument){
 8000bc8:	b538      	push	{r3, r4, r5, lr}
  Setup_LMP91051();
 8000bca:	f7ff ffdb 	bl	8000b84 <Setup_LMP91051>
 8000bce:	e043      	b.n	8000c58 <ThermopileTask+0x90>
					SwitchTemperatureSensor(nose);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff ffad 	bl	8000b30 <SwitchTemperatureSensor>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*) tempData.noseData, sizeof(tempData.noseData));
 8000bd6:	4c29      	ldr	r4, [pc, #164]	; (8000c7c <ThermopileTask+0xb4>)
 8000bd8:	2228      	movs	r2, #40	; 0x28
 8000bda:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8000bde:	4828      	ldr	r0, [pc, #160]	; (8000c80 <ThermopileTask+0xb8>)
 8000be0:	f000 fb3c 	bl	800125c <HAL_ADC_Start_DMA>
					evt = osThreadFlagsWait (0x00000004U, osFlagsWaitAny, osWaitForever);
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	2100      	movs	r1, #0
 8000bea:	2004      	movs	r0, #4
 8000bec:	f002 fff0 	bl	8003bd0 <osThreadFlagsWait>
 8000bf0:	4605      	mov	r5, r0
					tempData.nose_tick_ms = HAL_GetTick();
 8000bf2:	f000 f909 	bl	8000e08 <HAL_GetTick>
 8000bf6:	6560      	str	r0, [r4, #84]	; 0x54
					if( (evt & 0x00000002U) == 0x00000002U) break;
 8000bf8:	f015 0f02 	tst.w	r5, #2
 8000bfc:	d12c      	bne.n	8000c58 <ThermopileTask+0x90>
					SwitchTemperatureSensor(temple);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ff96 	bl	8000b30 <SwitchTemperatureSensor>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*) tempData.templeData, sizeof(tempData.templeData));
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	4621      	mov	r1, r4
 8000c08:	481d      	ldr	r0, [pc, #116]	; (8000c80 <ThermopileTask+0xb8>)
 8000c0a:	f000 fb27 	bl	800125c <HAL_ADC_Start_DMA>
					evt = osThreadFlagsWait (0x00000004U, osFlagsWaitAny, osWaitForever);
 8000c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c12:	2100      	movs	r1, #0
 8000c14:	2004      	movs	r0, #4
 8000c16:	f002 ffdb 	bl	8003bd0 <osThreadFlagsWait>
					tempData.temple_tick_ms = HAL_GetTick();
 8000c1a:	f000 f8f5 	bl	8000e08 <HAL_GetTick>
 8000c1e:	62a0      	str	r0, [r4, #40]	; 0x28
					osMessageQueuePut(thermMsgQueueHandle, (void *) &tempData, 0U, 0);
 8000c20:	2300      	movs	r3, #0
 8000c22:	461a      	mov	r2, r3
 8000c24:	4621      	mov	r1, r4
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <ThermopileTask+0xbc>)
 8000c28:	6800      	ldr	r0, [r0, #0]
 8000c2a:	f003 f8b9 	bl	8003da0 <osMessageQueuePut>
				evt = osThreadFlagsWait (0x0000000AU, osFlagsWaitAny, osWaitForever);
 8000c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c32:	2100      	movs	r1, #0
 8000c34:	200a      	movs	r0, #10
 8000c36:	f002 ffcb 	bl	8003bd0 <osThreadFlagsWait>
				if( (evt & 0x00000008U) == 0x00000008U){
 8000c3a:	f010 0f08 	tst.w	r0, #8
 8000c3e:	d1c7      	bne.n	8000bd0 <ThermopileTask+0x8>
				else if( (evt & 0x00000002U) == 0x00000002U){
 8000c40:	f010 0f02 	tst.w	r0, #2
 8000c44:	d0f3      	beq.n	8000c2e <ThermopileTask+0x66>
					HAL_ADC_Stop_DMA(&hadc1);
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <ThermopileTask+0xb8>)
 8000c48:	f000 fb74 	bl	8001334 <HAL_ADC_Stop_DMA>
					HAL_TIM_Base_Stop_IT(&htim2);
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <ThermopileTask+0xc0>)
 8000c4e:	f002 fbf1 	bl	8003434 <HAL_TIM_Base_Stop_IT>
					osThreadFlagsClear(0x0000000EU);
 8000c52:	200e      	movs	r0, #14
 8000c54:	f002 ff7e 	bl	8003b54 <osThreadFlagsClear>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f002 ffb6 	bl	8003bd0 <osThreadFlagsWait>
		if (evt == 0x00000001U)  {
 8000c64:	2801      	cmp	r0, #1
 8000c66:	d1f7      	bne.n	8000c58 <ThermopileTask+0x90>
			osThreadFlagsSet(thermopileTaskHandle, 0x00000008U);
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <ThermopileTask+0xc4>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	f002 ff29 	bl	8003ac4 <osThreadFlagsSet>
			HAL_TIM_Base_Start_IT(&htim2);
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <ThermopileTask+0xc0>)
 8000c74:	f002 fbc8 	bl	8003408 <HAL_TIM_Base_Start_IT>
 8000c78:	e7d9      	b.n	8000c2e <ThermopileTask+0x66>
 8000c7a:	bf00      	nop
 8000c7c:	20000038 	.word	0x20000038
 8000c80:	20001994 	.word	0x20001994
 8000c84:	2000002c 	.word	0x2000002c
 8000c88:	20001cac 	.word	0x20001cac
 8000c8c:	20000030 	.word	0x20000030

08000c90 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c90:	b500      	push	{lr}
 8000c92:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c94:	2300      	movs	r3, #0
 8000c96:	930a      	str	r3, [sp, #40]	; 0x28
 8000c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8000c9c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	9307      	str	r3, [sp, #28]
 8000ca0:	9308      	str	r3, [sp, #32]
 8000ca2:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	9303      	str	r3, [sp, #12]
 8000cac:	9304      	str	r3, [sp, #16]
 8000cae:	9305      	str	r3, [sp, #20]
 8000cb0:	9306      	str	r3, [sp, #24]

  htim2.Instance = TIM2;
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <MX_TIM2_Init+0xa8>)
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 31999;
 8000cba:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000cbe:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4;
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ccc:	f002 fcda 	bl	8003684 <HAL_TIM_Base_Init>
 8000cd0:	bb18      	cbnz	r0, 8000d1a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd2:	a90e      	add	r1, sp, #56	; 0x38
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cdc:	4816      	ldr	r0, [pc, #88]	; (8000d38 <MX_TIM2_Init+0xa8>)
 8000cde:	f002 fd8b 	bl	80037f8 <HAL_TIM_ConfigClockSource>
 8000ce2:	b9e8      	cbnz	r0, 8000d20 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ce4:	4814      	ldr	r0, [pc, #80]	; (8000d38 <MX_TIM2_Init+0xa8>)
 8000ce6:	f002 fce6 	bl	80036b6 <HAL_TIM_OC_Init>
 8000cea:	b9e0      	cbnz	r0, 8000d26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cec:	2320      	movs	r3, #32
 8000cee:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf4:	a907      	add	r1, sp, #28
 8000cf6:	4810      	ldr	r0, [pc, #64]	; (8000d38 <MX_TIM2_Init+0xa8>)
 8000cf8:	f002 fdec 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfc:	b9b0      	cbnz	r0, 8000d2c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8000d02:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d06:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d08:	220c      	movs	r2, #12
 8000d0a:	4669      	mov	r1, sp
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <MX_TIM2_Init+0xa8>)
 8000d0e:	f002 fd2b 	bl	8003768 <HAL_TIM_OC_ConfigChannel>
 8000d12:	b970      	cbnz	r0, 8000d32 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
  }

}
 8000d14:	b00f      	add	sp, #60	; 0x3c
 8000d16:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d1a:	f7ff fce3 	bl	80006e4 <Error_Handler>
 8000d1e:	e7d8      	b.n	8000cd2 <MX_TIM2_Init+0x42>
    Error_Handler();
 8000d20:	f7ff fce0 	bl	80006e4 <Error_Handler>
 8000d24:	e7de      	b.n	8000ce4 <MX_TIM2_Init+0x54>
    Error_Handler();
 8000d26:	f7ff fcdd 	bl	80006e4 <Error_Handler>
 8000d2a:	e7df      	b.n	8000cec <MX_TIM2_Init+0x5c>
    Error_Handler();
 8000d2c:	f7ff fcda 	bl	80006e4 <Error_Handler>
 8000d30:	e7e5      	b.n	8000cfe <MX_TIM2_Init+0x6e>
    Error_Handler();
 8000d32:	f7ff fcd7 	bl	80006e4 <Error_Handler>
}
 8000d36:	e7ed      	b.n	8000d14 <MX_TIM2_Init+0x84>
 8000d38:	20001cac 	.word	0x20001cac

08000d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000d3c:	6803      	ldr	r3, [r0, #0]
 8000d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d42:	d000      	beq.n	8000d46 <HAL_TIM_Base_MspInit+0xa>
 8000d44:	4770      	bx	lr
{
 8000d46:	b500      	push	{lr}
 8000d48:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	f042 0201 	orr.w	r2, r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2105      	movs	r1, #5
 8000d64:	201c      	movs	r0, #28
 8000d66:	f000 fdf3 	bl	8001950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d6a:	201c      	movs	r0, #28
 8000d6c:	f000 fe24 	bl	80019b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d70:	b003      	add	sp, #12
 8000d72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d7e:	e003      	b.n	8000d88 <LoopCopyDataInit>

08000d80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d86:	3104      	adds	r1, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d90:	d3f6      	bcc.n	8000d80 <CopyDataInit>
	ldr	r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d94:	e002      	b.n	8000d9c <LoopFillZerobss>

08000d96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d98:	f842 3b04 	str.w	r3, [r2], #4

08000d9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <LoopForever+0x16>)
	cmp	r2, r3
 8000d9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000da0:	d3f9      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000da2:	f7ff fe91 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f004 ffe7 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fc77 	bl	800069c <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000db0:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000db4:	08005e9c 	.word	0x08005e9c
	ldr	r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dbc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000dc0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000dc4:	20001d30 	.word	0x20001d30

08000dc8 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <COMP2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x20>)
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 fda7 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fe00 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fdde 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000de8:	2000      	movs	r0, #0
 8000dea:	bd08      	pop	{r3, pc}
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x10>)
 8000df2:	6811      	ldr	r1, [r2, #0]
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_IncTick+0x14>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	440b      	add	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20001cec 	.word	0x20001cec
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000e08:	4b01      	ldr	r3, [pc, #4]	; (8000e10 <HAL_GetTick+0x8>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20001cec 	.word	0x20001cec

08000e14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b538      	push	{r3, r4, r5, lr}
 8000e16:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff6 	bl	8000e08 <HAL_GetTick>
 8000e1c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e22:	d002      	beq.n	8000e2a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <HAL_Delay+0x24>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	f7ff ffed 	bl	8000e08 <HAL_GetTick>
 8000e2e:	1b40      	subs	r0, r0, r5
 8000e30:	42a0      	cmp	r0, r4
 8000e32:	d3fa      	bcc.n	8000e2a <HAL_Delay+0x16>
  {
  }
}
 8000e34:	bd38      	pop	{r3, r4, r5, pc}
 8000e36:	bf00      	nop
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000e3c:	4770      	bx	lr

08000e3e <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000e3e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e40:	6802      	ldr	r2, [r0, #0]
 8000e42:	6893      	ldr	r3, [r2, #8]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d001      	beq.n	8000e50 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e4c:	2000      	movs	r0, #0
}
 8000e4e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000e50:	6813      	ldr	r3, [r2, #0]
 8000e52:	f013 0f01 	tst.w	r3, #1
 8000e56:	d02f      	beq.n	8000eb8 <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000e58:	6893      	ldr	r3, [r2, #8]
 8000e5a:	f003 030d 	and.w	r3, r3, #13
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d009      	beq.n	8000e76 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8000e72:	2001      	movs	r0, #1
 8000e74:	e7eb      	b.n	8000e4e <ADC_Disable+0x10>
 8000e76:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000e78:	6893      	ldr	r3, [r2, #8]
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	6093      	str	r3, [r2, #8]
 8000e80:	6803      	ldr	r3, [r0, #0]
 8000e82:	2203      	movs	r2, #3
 8000e84:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000e86:	f7ff ffbf 	bl	8000e08 <HAL_GetTick>
 8000e8a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f013 0f01 	tst.w	r3, #1
 8000e94:	d00e      	beq.n	8000eb4 <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e96:	f7ff ffb7 	bl	8000e08 <HAL_GetTick>
 8000e9a:	1b40      	subs	r0, r0, r5
 8000e9c:	2802      	cmp	r0, #2
 8000e9e:	d9f5      	bls.n	8000e8c <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	e7cc      	b.n	8000e4e <ADC_Disable+0x10>
  return HAL_OK;
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	e7ca      	b.n	8000e4e <ADC_Disable+0x10>
 8000eb8:	2000      	movs	r0, #0
 8000eba:	e7c8      	b.n	8000e4e <ADC_Disable+0x10>

08000ebc <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	f012 0f0c 	tst.w	r2, #12
 8000ec4:	d061      	beq.n	8000f8a <ADC_ConversionStop+0xce>
{
 8000ec6:	b570      	push	{r4, r5, r6, lr}
 8000ec8:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000ed0:	d004      	beq.n	8000edc <ADC_ConversionStop+0x20>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000ed2:	8b00      	ldrh	r0, [r0, #24]
 8000ed4:	f240 1201 	movw	r2, #257	; 0x101
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	d042      	beq.n	8000f62 <ADC_ConversionStop+0xa6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000edc:	2960      	cmp	r1, #96	; 0x60
 8000ede:	d00c      	beq.n	8000efa <ADC_ConversionStop+0x3e>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	f012 0f04 	tst.w	r2, #4
 8000ee8:	d007      	beq.n	8000efa <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8000eea:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000eec:	f012 0f02 	tst.w	r2, #2
 8000ef0:	d103      	bne.n	8000efa <ADC_ConversionStop+0x3e>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	f042 0210 	orr.w	r2, r2, #16
 8000ef8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8000efa:	290c      	cmp	r1, #12
 8000efc:	d00c      	beq.n	8000f18 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	f012 0f08 	tst.w	r2, #8
 8000f06:	d007      	beq.n	8000f18 <ADC_ConversionStop+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000f08:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000f0a:	f012 0f02 	tst.w	r2, #2
 8000f0e:	d103      	bne.n	8000f18 <ADC_ConversionStop+0x5c>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8000f18:	2960      	cmp	r1, #96	; 0x60
 8000f1a:	d032      	beq.n	8000f82 <ADC_ConversionStop+0xc6>
 8000f1c:	296c      	cmp	r1, #108	; 0x6c
 8000f1e:	d12e      	bne.n	8000f7e <ADC_ConversionStop+0xc2>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000f20:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8000f22:	f7ff ff71 	bl	8000e08 <HAL_GetTick>
 8000f26:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	422b      	tst	r3, r5
 8000f2e:	d02a      	beq.n	8000f86 <ADC_ConversionStop+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000f30:	f7ff ff6a 	bl	8000e08 <HAL_GetTick>
 8000f34:	1b80      	subs	r0, r0, r6
 8000f36:	280b      	cmp	r0, #11
 8000f38:	d9f6      	bls.n	8000f28 <ADC_ConversionStop+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6463      	str	r3, [r4, #68]	; 0x44
        
        return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e01c      	b.n	8000f88 <ADC_ConversionStop+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	e012      	b.n	8000f88 <ADC_ConversionStop+0xcc>
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f62:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000f6a:	d104      	bne.n	8000f76 <ADC_ConversionStop+0xba>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <ADC_ConversionStop+0xd4>)
 8000f6e:	428a      	cmp	r2, r1
 8000f70:	d8ed      	bhi.n	8000f4e <ADC_ConversionStop+0x92>
        Conversion_Timeout_CPU_cycles ++;
 8000f72:	3201      	adds	r2, #1
 8000f74:	e7f6      	b.n	8000f64 <ADC_ConversionStop+0xa8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000f76:	2240      	movs	r2, #64	; 0x40
 8000f78:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	e7b0      	b.n	8000ee0 <ADC_ConversionStop+0x24>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000f7e:	2504      	movs	r5, #4
        break;
 8000f80:	e7cf      	b.n	8000f22 <ADC_ConversionStop+0x66>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000f82:	2508      	movs	r5, #8
 8000f84:	e7cd      	b.n	8000f22 <ADC_ConversionStop+0x66>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f86:	2000      	movs	r0, #0
}
 8000f88:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	000993ff 	.word	0x000993ff

08000f94 <ADC_Enable>:
{
 8000f94:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f96:	6802      	ldr	r2, [r0, #0]
 8000f98:	6893      	ldr	r3, [r2, #8]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d00d      	beq.n	8000fbe <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000fa2:	6891      	ldr	r1, [r2, #8]
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <ADC_Enable+0x74>)
 8000fa6:	4219      	tst	r1, r3
 8000fa8:	d00f      	beq.n	8000fca <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000faa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8000fba:	2001      	movs	r0, #1
}
 8000fbc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	f013 0f01 	tst.w	r3, #1
 8000fc4:	d0ed      	beq.n	8000fa2 <ADC_Enable+0xe>
  return HAL_OK;
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e7f8      	b.n	8000fbc <ADC_Enable+0x28>
 8000fca:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000fcc:	6893      	ldr	r3, [r2, #8]
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000fd4:	f7ff ff18 	bl	8000e08 <HAL_GetTick>
 8000fd8:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f013 0f01 	tst.w	r3, #1
 8000fe2:	d10e      	bne.n	8001002 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fe4:	f7ff ff10 	bl	8000e08 <HAL_GetTick>
 8000fe8:	1b40      	subs	r0, r0, r5
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f5      	bls.n	8000fda <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
 8001000:	e7dc      	b.n	8000fbc <ADC_Enable+0x28>
  return HAL_OK;
 8001002:	2000      	movs	r0, #0
 8001004:	e7da      	b.n	8000fbc <ADC_Enable+0x28>
 8001006:	bf00      	nop
 8001008:	8000003f 	.word	0x8000003f

0800100c <ADC_DMAError>:
{
 800100c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800100e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001010:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001016:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001018:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001020:	f7ff fd60 	bl	8000ae4 <HAL_ADC_ErrorCallback>
}
 8001024:	bd08      	pop	{r3, pc}

08001026 <ADC_DMAHalfConvCplt>:
{
 8001026:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001028:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800102a:	f7ff fd79 	bl	8000b20 <HAL_ADC_ConvHalfCpltCallback>
}
 800102e:	bd08      	pop	{r3, pc}

08001030 <ADC_DMAConvCplt>:
{
 8001030:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001032:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001036:	f012 0f50 	tst.w	r2, #80	; 0x50
 800103a:	d003      	beq.n	8001044 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800103c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4798      	blx	r3
}
 8001042:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68d2      	ldr	r2, [r2, #12]
 8001050:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001054:	d10d      	bne.n	8001072 <ADC_DMAConvCplt+0x42>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001056:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001058:	b95a      	cbnz	r2, 8001072 <ADC_DMAConvCplt+0x42>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800105a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001064:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001068:	d103      	bne.n	8001072 <ADC_DMAConvCplt+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800106a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fd3e 	bl	8000af4 <HAL_ADC_ConvCpltCallback>
 8001078:	e7e3      	b.n	8001042 <ADC_DMAConvCplt+0x12>
	...

0800107c <HAL_ADC_Init>:
{
 800107c:	b530      	push	{r4, r5, lr}
 800107e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001084:	2800      	cmp	r0, #0
 8001086:	f000 80df 	beq.w	8001248 <HAL_ADC_Init+0x1cc>
 800108a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800108e:	f013 0f10 	tst.w	r3, #16
 8001092:	d152      	bne.n	800113a <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001094:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001096:	b1ab      	cbz	r3, 80010c4 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80010a2:	d003      	beq.n	80010ac <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010a4:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010a6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80010aa:	d047      	beq.n	800113c <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 80010ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ae:	f023 0312 	bic.w	r3, r3, #18
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
 80010c2:	e03b      	b.n	800113c <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 80010c6:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010c8:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 80010ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80010ce:	f7ff f8bb 	bl	8000248 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010da:	d001      	beq.n	80010e0 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010dc:	2000      	movs	r0, #0
 80010de:	e7dc      	b.n	800109a <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff feac 	bl	8000e3e <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e8:	f013 0f10 	tst.w	r3, #16
 80010ec:	d1d5      	bne.n	800109a <HAL_ADC_Init+0x1e>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d1d3      	bne.n	800109a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 80010f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f8:	f023 0302 	bic.w	r3, r3, #2
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	6893      	ldr	r3, [r2, #8]
 8001106:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800110a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	6893      	ldr	r3, [r2, #8]
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001116:	4b4d      	ldr	r3, [pc, #308]	; (800124c <HAL_ADC_Init+0x1d0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <HAL_ADC_Init+0x1d4>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	0c9b      	lsrs	r3, r3, #18
 8001122:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001126:	005a      	lsls	r2, r3, #1
 8001128:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800112a:	e002      	b.n	8001132 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 800112c:	9b01      	ldr	r3, [sp, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001132:	9b01      	ldr	r3, [sp, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f9      	bne.n	800112c <HAL_ADC_Init+0xb0>
 8001138:	e7af      	b.n	800109a <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800113c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800113e:	f013 0f10 	tst.w	r3, #16
 8001142:	d178      	bne.n	8001236 <HAL_ADC_Init+0x1ba>
 8001144:	2800      	cmp	r0, #0
 8001146:	d176      	bne.n	8001236 <HAL_ADC_Init+0x1ba>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001148:	6821      	ldr	r1, [r4, #0]
 800114a:	688a      	ldr	r2, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800114c:	f012 0204 	ands.w	r2, r2, #4
 8001150:	d171      	bne.n	8001236 <HAL_ADC_Init+0x1ba>
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6423      	str	r3, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800115e:	688b      	ldr	r3, [r1, #8]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d045      	beq.n	80011f4 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001168:	493a      	ldr	r1, [pc, #232]	; (8001254 <HAL_ADC_Init+0x1d8>)
 800116a:	688b      	ldr	r3, [r1, #8]
 800116c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001170:	6865      	ldr	r5, [r4, #4]
 8001172:	432b      	orrs	r3, r5
 8001174:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001176:	7e61      	ldrb	r1, [r4, #25]
 8001178:	034b      	lsls	r3, r1, #13
 800117a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800117c:	2d01      	cmp	r5, #1
 800117e:	d001      	beq.n	8001184 <HAL_ADC_Init+0x108>
 8001180:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001184:	4313      	orrs	r3, r2
 8001186:	68e2      	ldr	r2, [r4, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	68a2      	ldr	r2, [r4, #8]
 800118c:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800118e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001192:	2a01      	cmp	r2, #1
 8001194:	d033      	beq.n	80011fe <HAL_ADC_Init+0x182>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001196:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001198:	2a01      	cmp	r2, #1
 800119a:	d002      	beq.n	80011a2 <HAL_ADC_Init+0x126>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800119c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800119e:	430a      	orrs	r2, r1
 80011a0:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	6891      	ldr	r1, [r2, #8]
 80011a6:	f011 0f0c 	tst.w	r1, #12
 80011aa:	d10c      	bne.n	80011c6 <HAL_ADC_Init+0x14a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80011ac:	68d1      	ldr	r1, [r2, #12]
 80011ae:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80011b2:	f021 0102 	bic.w	r1, r1, #2
 80011b6:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80011b8:	7e21      	ldrb	r1, [r4, #24]
 80011ba:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80011be:	0052      	lsls	r2, r2, #1
 80011c0:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80011c4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80011c6:	6821      	ldr	r1, [r4, #0]
 80011c8:	68cd      	ldr	r5, [r1, #12]
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <HAL_ADC_Init+0x1dc>)
 80011cc:	402a      	ands	r2, r5
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011d2:	6923      	ldr	r3, [r4, #16]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d025      	beq.n	8001224 <HAL_ADC_Init+0x1a8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011dc:	f023 030f 	bic.w	r3, r3, #15
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80011e2:	2300      	movs	r3, #0
 80011e4:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011e8:	f023 0303 	bic.w	r3, r3, #3
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6423      	str	r3, [r4, #64]	; 0x40
 80011f2:	e027      	b.n	8001244 <HAL_ADC_Init+0x1c8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011f4:	680b      	ldr	r3, [r1, #0]
 80011f6:	f013 0f01 	tst.w	r3, #1
 80011fa:	d1bc      	bne.n	8001176 <HAL_ADC_Init+0xfa>
 80011fc:	e7b4      	b.n	8001168 <HAL_ADC_Init+0xec>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011fe:	b931      	cbnz	r1, 800120e <HAL_ADC_Init+0x192>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001200:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001202:	3a01      	subs	r2, #1
 8001204:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	e7c3      	b.n	8001196 <HAL_ADC_Init+0x11a>
        ADC_STATE_CLR_SET(hadc->State,
 800120e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001210:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001214:	f042 0220 	orr.w	r2, r2, #32
 8001218:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800121c:	f042 0201 	orr.w	r2, r2, #1
 8001220:	6462      	str	r2, [r4, #68]	; 0x44
 8001222:	e7b8      	b.n	8001196 <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001224:	6821      	ldr	r1, [r4, #0]
 8001226:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001228:	f023 030f 	bic.w	r3, r3, #15
 800122c:	69e2      	ldr	r2, [r4, #28]
 800122e:	3a01      	subs	r2, #1
 8001230:	4313      	orrs	r3, r2
 8001232:	630b      	str	r3, [r1, #48]	; 0x30
 8001234:	e7d5      	b.n	80011e2 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001238:	f023 0312 	bic.w	r3, r3, #18
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8001242:	2001      	movs	r0, #1
}
 8001244:	b003      	add	sp, #12
 8001246:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001248:	2001      	movs	r0, #1
 800124a:	e7fb      	b.n	8001244 <HAL_ADC_Init+0x1c8>
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83
 8001254:	50000300 	.word	0x50000300
 8001258:	fff0c007 	.word	0xfff0c007

0800125c <HAL_ADC_Start_DMA>:
{
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800125e:	6804      	ldr	r4, [r0, #0]
 8001260:	68a4      	ldr	r4, [r4, #8]
 8001262:	f014 0f04 	tst.w	r4, #4
 8001266:	d15a      	bne.n	800131e <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 8001268:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800126c:	2b01      	cmp	r3, #1
 800126e:	d059      	beq.n	8001324 <HAL_ADC_Start_DMA+0xc8>
 8001270:	4616      	mov	r6, r2
 8001272:	460f      	mov	r7, r1
 8001274:	4604      	mov	r4, r0
 8001276:	2301      	movs	r3, #1
 8001278:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = ADC_Enable(hadc);
 800127c:	f7ff fe8a 	bl	8000f94 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001280:	4605      	mov	r5, r0
 8001282:	2800      	cmp	r0, #0
 8001284:	d147      	bne.n	8001316 <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 8001286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001288:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001298:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800129c:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012a6:	d005      	beq.n	80012b4 <HAL_ADC_Start_DMA+0x58>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b2:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012b6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80012ba:	d029      	beq.n	8001310 <HAL_ADC_Start_DMA+0xb4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012be:	f023 0306 	bic.w	r3, r3, #6
 80012c2:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80012c4:	2300      	movs	r3, #0
 80012c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012cc:	4a16      	ldr	r2, [pc, #88]	; (8001328 <HAL_ADC_Start_DMA+0xcc>)
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <HAL_ADC_Start_DMA+0xd0>)
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <HAL_ADC_Start_DMA+0xd4>)
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	221c      	movs	r2, #28
 80012e0:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012e2:	6822      	ldr	r2, [r4, #0]
 80012e4:	6853      	ldr	r3, [r2, #4]
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012ec:	6822      	ldr	r2, [r4, #0]
 80012ee:	68d3      	ldr	r3, [r2, #12]
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012f6:	6821      	ldr	r1, [r4, #0]
 80012f8:	4633      	mov	r3, r6
 80012fa:	463a      	mov	r2, r7
 80012fc:	3140      	adds	r1, #64	; 0x40
 80012fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001300:	f000 fbb8 	bl	8001a74 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001304:	6822      	ldr	r2, [r4, #0]
 8001306:	6893      	ldr	r3, [r2, #8]
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6093      	str	r3, [r2, #8]
 800130e:	e007      	b.n	8001320 <HAL_ADC_Start_DMA+0xc4>
          ADC_CLEAR_ERRORCODE(hadc);
 8001310:	2300      	movs	r3, #0
 8001312:	6463      	str	r3, [r4, #68]	; 0x44
 8001314:	e7d6      	b.n	80012c4 <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 8001316:	2300      	movs	r3, #0
 8001318:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800131c:	e000      	b.n	8001320 <HAL_ADC_Start_DMA+0xc4>
    tmp_hal_status = HAL_BUSY;
 800131e:	2502      	movs	r5, #2
}
 8001320:	4628      	mov	r0, r5
 8001322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001324:	2502      	movs	r5, #2
 8001326:	e7fb      	b.n	8001320 <HAL_ADC_Start_DMA+0xc4>
 8001328:	08001031 	.word	0x08001031
 800132c:	08001027 	.word	0x08001027
 8001330:	0800100d 	.word	0x0800100d

08001334 <HAL_ADC_Stop_DMA>:
{  
 8001334:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8001336:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800133a:	2b01      	cmp	r3, #1
 800133c:	d034      	beq.n	80013a8 <HAL_ADC_Stop_DMA+0x74>
 800133e:	4604      	mov	r4, r0
 8001340:	2301      	movs	r3, #1
 8001342:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001346:	216c      	movs	r1, #108	; 0x6c
 8001348:	f7ff fdb8 	bl	8000ebc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800134c:	4605      	mov	r5, r0
 800134e:	b120      	cbz	r0, 800135a <HAL_ADC_Stop_DMA+0x26>
  __HAL_UNLOCK(hadc);
 8001350:	2300      	movs	r3, #0
 8001352:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001356:	4628      	mov	r0, r5
 8001358:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	68d3      	ldr	r3, [r2, #12]
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001364:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001366:	f000 fbbf 	bl	8001ae8 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 800136a:	4605      	mov	r5, r0
 800136c:	b118      	cbz	r0, 8001376 <HAL_ADC_Stop_DMA+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800136e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001374:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	6853      	ldr	r3, [r2, #4]
 800137a:	f023 0310 	bic.w	r3, r3, #16
 800137e:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8001380:	b975      	cbnz	r5, 80013a0 <HAL_ADC_Stop_DMA+0x6c>
      tmp_hal_status = ADC_Disable(hadc);
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff fd5b 	bl	8000e3e <ADC_Disable>
 8001388:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 800138a:	2d00      	cmp	r5, #0
 800138c:	d1e0      	bne.n	8001350 <HAL_ADC_Stop_DMA+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 800138e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6423      	str	r3, [r4, #64]	; 0x40
 800139e:	e7d7      	b.n	8001350 <HAL_ADC_Stop_DMA+0x1c>
      ADC_Disable(hadc);
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fd4c 	bl	8000e3e <ADC_Disable>
 80013a6:	e7f0      	b.n	800138a <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 80013a8:	2502      	movs	r5, #2
 80013aa:	e7d4      	b.n	8001356 <HAL_ADC_Stop_DMA+0x22>

080013ac <HAL_ADCEx_InjectedConvCpltCallback>:
}
 80013ac:	4770      	bx	lr

080013ae <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 80013ae:	4770      	bx	lr

080013b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 80013b0:	4770      	bx	lr

080013b2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 80013b2:	4770      	bx	lr

080013b4 <HAL_ADC_IRQHandler>:
{
 80013b4:	b510      	push	{r4, lr}
 80013b6:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	f012 0f04 	tst.w	r2, #4
 80013c0:	d003      	beq.n	80013ca <HAL_ADC_IRQHandler+0x16>
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	f012 0f04 	tst.w	r2, #4
 80013c8:	d107      	bne.n	80013da <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013ca:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80013cc:	f012 0f08 	tst.w	r2, #8
 80013d0:	d03a      	beq.n	8001448 <HAL_ADC_IRQHandler+0x94>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	f012 0f08 	tst.w	r2, #8
 80013d8:	d036      	beq.n	8001448 <HAL_ADC_IRQHandler+0x94>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013dc:	f012 0f10 	tst.w	r2, #16
 80013e0:	d103      	bne.n	80013ea <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e8:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80013ea:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80013f2:	d123      	bne.n	800143c <HAL_ADC_IRQHandler+0x88>
 80013f4:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80013f8:	d120      	bne.n	800143c <HAL_ADC_IRQHandler+0x88>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f012 0f08 	tst.w	r2, #8
 8001400:	d01c      	beq.n	800143c <HAL_ADC_IRQHandler+0x88>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	f012 0f04 	tst.w	r2, #4
 8001408:	d110      	bne.n	800142c <HAL_ADC_IRQHandler+0x78>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	f022 020c 	bic.w	r2, r2, #12
 8001410:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001418:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800141c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001420:	d10c      	bne.n	800143c <HAL_ADC_IRQHandler+0x88>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6423      	str	r3, [r4, #64]	; 0x40
 800142a:	e007      	b.n	800143c <HAL_ADC_IRQHandler+0x88>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff fb59 	bl	8000af4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	220c      	movs	r2, #12
 8001446:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f012 0f20 	tst.w	r2, #32
 8001450:	d003      	beq.n	800145a <HAL_ADC_IRQHandler+0xa6>
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	f012 0f20 	tst.w	r2, #32
 8001458:	d107      	bne.n	800146a <HAL_ADC_IRQHandler+0xb6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800145a:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800145c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001460:	d041      	beq.n	80014e6 <HAL_ADC_IRQHandler+0x132>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001468:	d03d      	beq.n	80014e6 <HAL_ADC_IRQHandler+0x132>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800146a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800146c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001470:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001472:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001476:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800147a:	d009      	beq.n	8001490 <HAL_ADC_IRQHandler+0xdc>
 800147c:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001480:	d12b      	bne.n	80014da <HAL_ADC_IRQHandler+0x126>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001482:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001484:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001488:	d127      	bne.n	80014da <HAL_ADC_IRQHandler+0x126>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800148a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 800148e:	d124      	bne.n	80014da <HAL_ADC_IRQHandler+0x126>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001496:	d020      	beq.n	80014da <HAL_ADC_IRQHandler+0x126>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001498:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800149a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800149e:	d11c      	bne.n	80014da <HAL_ADC_IRQHandler+0x126>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	f012 0f08 	tst.w	r2, #8
 80014a6:	d110      	bne.n	80014ca <HAL_ADC_IRQHandler+0x116>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014ae:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80014b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014b6:	6423      	str	r3, [r4, #64]	; 0x40
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014be:	d10c      	bne.n	80014da <HAL_ADC_IRQHandler+0x126>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6423      	str	r3, [r4, #64]	; 0x40
 80014c8:	e007      	b.n	80014da <HAL_ADC_IRQHandler+0x126>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6423      	str	r3, [r4, #64]	; 0x40
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff ff66 	bl	80013ac <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	2260      	movs	r2, #96	; 0x60
 80014e4:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014ee:	d003      	beq.n	80014f8 <HAL_ADC_IRQHandler+0x144>
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014f6:	d13e      	bne.n	8001576 <HAL_ADC_IRQHandler+0x1c2>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001500:	d003      	beq.n	800150a <HAL_ADC_IRQHandler+0x156>
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001508:	d140      	bne.n	800158c <HAL_ADC_IRQHandler+0x1d8>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001512:	d003      	beq.n	800151c <HAL_ADC_IRQHandler+0x168>
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f413 7f00 	tst.w	r3, #512	; 0x200
 800151a:	d143      	bne.n	80015a4 <HAL_ADC_IRQHandler+0x1f0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	f012 0f10 	tst.w	r2, #16
 8001524:	d01d      	beq.n	8001562 <HAL_ADC_IRQHandler+0x1ae>
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	f012 0f10 	tst.w	r2, #16
 800152c:	d019      	beq.n	8001562 <HAL_ADC_IRQHandler+0x1ae>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800152e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001530:	2a01      	cmp	r2, #1
 8001532:	d008      	beq.n	8001546 <HAL_ADC_IRQHandler+0x192>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001534:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <HAL_ADC_IRQHandler+0x234>)
 8001536:	6892      	ldr	r2, [r2, #8]
 8001538:	f012 0f1f 	tst.w	r2, #31
 800153c:	d13e      	bne.n	80015bc <HAL_ADC_IRQHandler+0x208>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f013 0f01 	tst.w	r3, #1
 8001544:	d00a      	beq.n	800155c <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001548:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154c:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800154e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001556:	4620      	mov	r0, r4
 8001558:	f7ff fac4 	bl	8000ae4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	2210      	movs	r2, #16
 8001560:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800156a:	d003      	beq.n	8001574 <HAL_ADC_IRQHandler+0x1c0>
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001572:	d129      	bne.n	80015c8 <HAL_ADC_IRQHandler+0x214>
}
 8001574:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff fc5c 	bl	8000e3c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e7b5      	b.n	80014f8 <HAL_ADC_IRQHandler+0x144>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800158c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff0b 	bl	80013b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e7b2      	b.n	800150a <HAL_ADC_IRQHandler+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80015a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015aa:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff ff00 	bl	80013b2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e7af      	b.n	800151c <HAL_ADC_IRQHandler+0x168>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_ADC_IRQHandler+0x234>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80015c4:	d0ca      	beq.n	800155c <HAL_ADC_IRQHandler+0x1a8>
 80015c6:	e7be      	b.n	8001546 <HAL_ADC_IRQHandler+0x192>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80015c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ce:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80015d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015d2:	f042 0208 	orr.w	r2, r2, #8
 80015d6:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80015d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015dc:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fee5 	bl	80013ae <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80015e4:	e7c6      	b.n	8001574 <HAL_ADC_IRQHandler+0x1c0>
 80015e6:	bf00      	nop
 80015e8:	50000300 	.word	0x50000300

080015ec <HAL_ADC_ConfigChannel>:
{
 80015ec:	b430      	push	{r4, r5}
 80015ee:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80015f0:	2200      	movs	r2, #0
 80015f2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80015f4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80015f8:	2a01      	cmp	r2, #1
 80015fa:	f000 818e 	beq.w	800191a <HAL_ADC_ConfigChannel+0x32e>
 80015fe:	4603      	mov	r3, r0
 8001600:	2201      	movs	r2, #1
 8001602:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001606:	6800      	ldr	r0, [r0, #0]
 8001608:	6882      	ldr	r2, [r0, #8]
 800160a:	f012 0f04 	tst.w	r2, #4
 800160e:	f040 8179 	bne.w	8001904 <HAL_ADC_ConfigChannel+0x318>
    if (sConfig->Rank < 5U)
 8001612:	684a      	ldr	r2, [r1, #4]
 8001614:	2a04      	cmp	r2, #4
 8001616:	d831      	bhi.n	800167c <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8001618:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800161a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800161e:	0055      	lsls	r5, r2, #1
 8001620:	221f      	movs	r2, #31
 8001622:	40aa      	lsls	r2, r5
 8001624:	ea24 0202 	bic.w	r2, r4, r2
 8001628:	680c      	ldr	r4, [r1, #0]
 800162a:	40ac      	lsls	r4, r5
 800162c:	4322      	orrs	r2, r4
 800162e:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	6882      	ldr	r2, [r0, #8]
 8001634:	f012 0f0c 	tst.w	r2, #12
 8001638:	d168      	bne.n	800170c <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800163a:	680a      	ldr	r2, [r1, #0]
 800163c:	2a09      	cmp	r2, #9
 800163e:	d94e      	bls.n	80016de <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001640:	6984      	ldr	r4, [r0, #24]
 8001642:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001646:	3a1e      	subs	r2, #30
 8001648:	2507      	movs	r5, #7
 800164a:	4095      	lsls	r5, r2
 800164c:	ea24 0405 	bic.w	r4, r4, r5
 8001650:	688d      	ldr	r5, [r1, #8]
 8001652:	fa05 f202 	lsl.w	r2, r5, r2
 8001656:	4322      	orrs	r2, r4
 8001658:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800165a:	6948      	ldr	r0, [r1, #20]
 800165c:	681c      	ldr	r4, [r3, #0]
 800165e:	68e2      	ldr	r2, [r4, #12]
 8001660:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001664:	0052      	lsls	r2, r2, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 800166a:	6908      	ldr	r0, [r1, #16]
 800166c:	3801      	subs	r0, #1
 800166e:	2803      	cmp	r0, #3
 8001670:	f200 808b 	bhi.w	800178a <HAL_ADC_ConfigChannel+0x19e>
 8001674:	e8df f000 	tbb	[pc, r0]
 8001678:	7e736840 	.word	0x7e736840
    else if (sConfig->Rank < 10U)
 800167c:	2a09      	cmp	r2, #9
 800167e:	d80e      	bhi.n	800169e <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001680:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001682:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001686:	0055      	lsls	r5, r2, #1
 8001688:	3d1e      	subs	r5, #30
 800168a:	221f      	movs	r2, #31
 800168c:	40aa      	lsls	r2, r5
 800168e:	ea24 0202 	bic.w	r2, r4, r2
 8001692:	680c      	ldr	r4, [r1, #0]
 8001694:	fa04 f505 	lsl.w	r5, r4, r5
 8001698:	432a      	orrs	r2, r5
 800169a:	6342      	str	r2, [r0, #52]	; 0x34
 800169c:	e7c8      	b.n	8001630 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800169e:	2a0e      	cmp	r2, #14
 80016a0:	d80e      	bhi.n	80016c0 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80016a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016a8:	0055      	lsls	r5, r2, #1
 80016aa:	3d3c      	subs	r5, #60	; 0x3c
 80016ac:	221f      	movs	r2, #31
 80016ae:	40aa      	lsls	r2, r5
 80016b0:	ea24 0202 	bic.w	r2, r4, r2
 80016b4:	680c      	ldr	r4, [r1, #0]
 80016b6:	fa04 f505 	lsl.w	r5, r4, r5
 80016ba:	432a      	orrs	r2, r5
 80016bc:	6382      	str	r2, [r0, #56]	; 0x38
 80016be:	e7b7      	b.n	8001630 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016c0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80016c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016c6:	0055      	lsls	r5, r2, #1
 80016c8:	3d5a      	subs	r5, #90	; 0x5a
 80016ca:	221f      	movs	r2, #31
 80016cc:	40aa      	lsls	r2, r5
 80016ce:	ea24 0202 	bic.w	r2, r4, r2
 80016d2:	680c      	ldr	r4, [r1, #0]
 80016d4:	fa04 f505 	lsl.w	r5, r4, r5
 80016d8:	432a      	orrs	r2, r5
 80016da:	63c2      	str	r2, [r0, #60]	; 0x3c
 80016dc:	e7a8      	b.n	8001630 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016de:	6944      	ldr	r4, [r0, #20]
 80016e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016e4:	2507      	movs	r5, #7
 80016e6:	4095      	lsls	r5, r2
 80016e8:	ea24 0405 	bic.w	r4, r4, r5
 80016ec:	688d      	ldr	r5, [r1, #8]
 80016ee:	fa05 f202 	lsl.w	r2, r5, r2
 80016f2:	4322      	orrs	r2, r4
 80016f4:	6142      	str	r2, [r0, #20]
 80016f6:	e7b0      	b.n	800165a <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80016f8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80016fa:	4d89      	ldr	r5, [pc, #548]	; (8001920 <HAL_ADC_ConfigChannel+0x334>)
 80016fc:	4005      	ands	r5, r0
 80016fe:	6808      	ldr	r0, [r1, #0]
 8001700:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001704:	4315      	orrs	r5, r2
 8001706:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800170a:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	6882      	ldr	r2, [r0, #8]
 8001710:	f002 0203 	and.w	r2, r2, #3
 8001714:	2a01      	cmp	r2, #1
 8001716:	d06b      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x204>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001718:	68ca      	ldr	r2, [r1, #12]
 800171a:	2a01      	cmp	r2, #1
 800171c:	d06e      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x210>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800171e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001722:	680d      	ldr	r5, [r1, #0]
 8001724:	2401      	movs	r4, #1
 8001726:	40ac      	lsls	r4, r5
 8001728:	ea22 0204 	bic.w	r2, r2, r4
 800172c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001730:	680a      	ldr	r2, [r1, #0]
 8001732:	2a10      	cmp	r2, #16
 8001734:	f000 808b 	beq.w	800184e <HAL_ADC_ConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001738:	2a11      	cmp	r2, #17
 800173a:	f000 809c 	beq.w	8001876 <HAL_ADC_ConfigChannel+0x28a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800173e:	2a12      	cmp	r2, #18
 8001740:	f000 809f 	beq.w	8001882 <HAL_ADC_ConfigChannel+0x296>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2000      	movs	r0, #0
 8001746:	e0e2      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001748:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800174a:	4d75      	ldr	r5, [pc, #468]	; (8001920 <HAL_ADC_ConfigChannel+0x334>)
 800174c:	4005      	ands	r5, r0
 800174e:	6808      	ldr	r0, [r1, #0]
 8001750:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001754:	4315      	orrs	r5, r2
 8001756:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800175a:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 800175c:	e7d6      	b.n	800170c <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800175e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001760:	4d6f      	ldr	r5, [pc, #444]	; (8001920 <HAL_ADC_ConfigChannel+0x334>)
 8001762:	4005      	ands	r5, r0
 8001764:	6808      	ldr	r0, [r1, #0]
 8001766:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 800176a:	4315      	orrs	r5, r2
 800176c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001770:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001772:	e7cb      	b.n	800170c <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001774:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001776:	486a      	ldr	r0, [pc, #424]	; (8001920 <HAL_ADC_ConfigChannel+0x334>)
 8001778:	4028      	ands	r0, r5
 800177a:	680d      	ldr	r5, [r1, #0]
 800177c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001780:	4302      	orrs	r2, r0
 8001782:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001786:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001788:	e7c0      	b.n	800170c <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800178a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800178c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001790:	6808      	ldr	r0, [r1, #0]
 8001792:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001796:	d01c      	beq.n	80017d2 <HAL_ADC_ConfigChannel+0x1e6>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800179c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017a0:	680c      	ldr	r4, [r1, #0]
 80017a2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80017a6:	d019      	beq.n	80017dc <HAL_ADC_ConfigChannel+0x1f0>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80017ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017b0:	680c      	ldr	r4, [r1, #0]
 80017b2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80017b6:	d016      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80017bc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017c0:	680c      	ldr	r4, [r1, #0]
 80017c2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80017c6:	d1a1      	bne.n	800170c <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80017c8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80017ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ce:	66c2      	str	r2, [r0, #108]	; 0x6c
 80017d0:	e79c      	b.n	800170c <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80017d2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80017d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017d8:	6622      	str	r2, [r4, #96]	; 0x60
 80017da:	e7dd      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1ac>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017dc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80017de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017e2:	6642      	str	r2, [r0, #100]	; 0x64
 80017e4:	e7e0      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x1bc>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80017e6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80017e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ec:	6682      	str	r2, [r0, #104]	; 0x68
 80017ee:	e7e3      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x1cc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017f0:	6802      	ldr	r2, [r0, #0]
 80017f2:	f012 0f01 	tst.w	r2, #1
 80017f6:	d08f      	beq.n	8001718 <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2000      	movs	r0, #0
 80017fa:	e088      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017fc:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001800:	680d      	ldr	r5, [r1, #0]
 8001802:	2401      	movs	r4, #1
 8001804:	40ac      	lsls	r4, r5
 8001806:	4322      	orrs	r2, r4
 8001808:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800180c:	680a      	ldr	r2, [r1, #0]
 800180e:	2a09      	cmp	r2, #9
 8001810:	d90e      	bls.n	8001830 <HAL_ADC_ConfigChannel+0x244>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001812:	681d      	ldr	r5, [r3, #0]
 8001814:	69a8      	ldr	r0, [r5, #24]
 8001816:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800181a:	3a1b      	subs	r2, #27
 800181c:	2407      	movs	r4, #7
 800181e:	4094      	lsls	r4, r2
 8001820:	ea20 0004 	bic.w	r0, r0, r4
 8001824:	688c      	ldr	r4, [r1, #8]
 8001826:	fa04 f202 	lsl.w	r2, r4, r2
 800182a:	4302      	orrs	r2, r0
 800182c:	61aa      	str	r2, [r5, #24]
 800182e:	e77f      	b.n	8001730 <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001830:	681d      	ldr	r5, [r3, #0]
 8001832:	6968      	ldr	r0, [r5, #20]
 8001834:	3201      	adds	r2, #1
 8001836:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800183a:	2407      	movs	r4, #7
 800183c:	4094      	lsls	r4, r2
 800183e:	ea20 0004 	bic.w	r0, r0, r4
 8001842:	688c      	ldr	r4, [r1, #8]
 8001844:	fa04 f202 	lsl.w	r2, r4, r2
 8001848:	4302      	orrs	r2, r0
 800184a:	616a      	str	r2, [r5, #20]
 800184c:	e770      	b.n	8001730 <HAL_ADC_ConfigChannel+0x144>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800184e:	4935      	ldr	r1, [pc, #212]	; (8001924 <HAL_ADC_ConfigChannel+0x338>)
 8001850:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001852:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8001856:	f47f af6f 	bne.w	8001738 <HAL_ADC_ConfigChannel+0x14c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	6881      	ldr	r1, [r0, #8]
 800185e:	f001 0103 	and.w	r1, r1, #3
 8001862:	2901      	cmp	r1, #1
 8001864:	d014      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001866:	2a10      	cmp	r2, #16
 8001868:	d01c      	beq.n	80018a4 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800186a:	2a11      	cmp	r2, #17
 800186c:	d039      	beq.n	80018e2 <HAL_ADC_ConfigChannel+0x2f6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800186e:	2a12      	cmp	r2, #18
 8001870:	d041      	beq.n	80018f6 <HAL_ADC_ConfigChannel+0x30a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001872:	2000      	movs	r0, #0
 8001874:	e04b      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001876:	492b      	ldr	r1, [pc, #172]	; (8001924 <HAL_ADC_ConfigChannel+0x338>)
 8001878:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800187a:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800187e:	d0ec      	beq.n	800185a <HAL_ADC_ConfigChannel+0x26e>
 8001880:	e75d      	b.n	800173e <HAL_ADC_ConfigChannel+0x152>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001882:	4928      	ldr	r1, [pc, #160]	; (8001924 <HAL_ADC_ConfigChannel+0x338>)
 8001884:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001886:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800188a:	d0e6      	beq.n	800185a <HAL_ADC_ConfigChannel+0x26e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188c:	2000      	movs	r0, #0
 800188e:	e03e      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001890:	6801      	ldr	r1, [r0, #0]
 8001892:	f011 0f01 	tst.w	r1, #1
 8001896:	d0e6      	beq.n	8001866 <HAL_ADC_ConfigChannel+0x27a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
 80018a2:	e034      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018a4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80018a8:	d1df      	bne.n	800186a <HAL_ADC_ConfigChannel+0x27e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018aa:	491e      	ldr	r1, [pc, #120]	; (8001924 <HAL_ADC_ConfigChannel+0x338>)
 80018ac:	688a      	ldr	r2, [r1, #8]
 80018ae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018b2:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_ADC_ConfigChannel+0x33c>)
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 80018bc:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 80018c0:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 80018c4:	fba1 1202 	umull	r1, r2, r1, r2
 80018c8:	0c92      	lsrs	r2, r2, #18
 80018ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018ce:	0051      	lsls	r1, r2, #1
 80018d0:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80018d2:	9a01      	ldr	r2, [sp, #4]
 80018d4:	b11a      	cbz	r2, 80018de <HAL_ADC_ConfigChannel+0x2f2>
            wait_loop_index--;
 80018d6:	9a01      	ldr	r2, [sp, #4]
 80018d8:	3a01      	subs	r2, #1
 80018da:	9201      	str	r2, [sp, #4]
 80018dc:	e7f9      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x2e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018de:	2000      	movs	r0, #0
 80018e0:	e015      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018e2:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80018e6:	d1c2      	bne.n	800186e <HAL_ADC_ConfigChannel+0x282>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_ADC_ConfigChannel+0x338>)
 80018ea:	688a      	ldr	r2, [r1, #8]
 80018ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80018f0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f2:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018f4:	e00b      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018f6:	490b      	ldr	r1, [pc, #44]	; (8001924 <HAL_ADC_ConfigChannel+0x338>)
 80018f8:	688a      	ldr	r2, [r1, #8]
 80018fa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018fe:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001900:	2000      	movs	r0, #0
 8001902:	e004      	b.n	800190e <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 800190c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001914:	b002      	add	sp, #8
 8001916:	bc30      	pop	{r4, r5}
 8001918:	4770      	bx	lr
  __HAL_LOCK(hadc);
 800191a:	2002      	movs	r0, #2
 800191c:	e7fa      	b.n	8001914 <HAL_ADC_ConfigChannel+0x328>
 800191e:	bf00      	nop
 8001920:	83fff000 	.word	0x83fff000
 8001924:	50000300 	.word	0x50000300
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800192e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001930:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	0200      	lsls	r0, r0, #8
 800193a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001940:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001944:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001948:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_NVIC_SetPriority+0x60>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195a:	f1c3 0407 	rsb	r4, r3, #7
 800195e:	2c04      	cmp	r4, #4
 8001960:	bf28      	it	cs
 8001962:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001964:	1d1d      	adds	r5, r3, #4
 8001966:	2d06      	cmp	r5, #6
 8001968:	d918      	bls.n	800199c <HAL_NVIC_SetPriority+0x4c>
 800196a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 35ff 	mov.w	r5, #4294967295
 8001970:	fa05 f404 	lsl.w	r4, r5, r4
 8001974:	ea21 0104 	bic.w	r1, r1, r4
 8001978:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197a:	fa05 f303 	lsl.w	r3, r5, r3
 800197e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001982:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001984:	2800      	cmp	r0, #0
 8001986:	db0b      	blt.n	80019a0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	0109      	lsls	r1, r1, #4
 800198a:	b2c9      	uxtb	r1, r1
 800198c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001990:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001994:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001998:	bc30      	pop	{r4, r5}
 800199a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199c:	2300      	movs	r3, #0
 800199e:	e7e5      	b.n	800196c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	f000 000f 	and.w	r0, r0, #15
 80019a4:	0109      	lsls	r1, r1, #4
 80019a6:	b2c9      	uxtb	r1, r1
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <HAL_NVIC_SetPriority+0x64>)
 80019aa:	5419      	strb	r1, [r3, r0]
 80019ac:	e7f4      	b.n	8001998 <HAL_NVIC_SetPriority+0x48>
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00
 80019b4:	e000ed14 	.word	0xe000ed14

080019b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019b8:	2800      	cmp	r0, #0
 80019ba:	db07      	blt.n	80019cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019bc:	f000 021f 	and.w	r2, r0, #31
 80019c0:	0940      	lsrs	r0, r0, #5
 80019c2:	2301      	movs	r3, #1
 80019c4:	4093      	lsls	r3, r2
 80019c6:	4a02      	ldr	r2, [pc, #8]	; (80019d0 <HAL_NVIC_EnableIRQ+0x18>)
 80019c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d4:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019d6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80019d8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80019da:	2401      	movs	r4, #1
 80019dc:	40b4      	lsls	r4, r6
 80019de:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019e0:	6804      	ldr	r4, [r0, #0]
 80019e2:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019e4:	6843      	ldr	r3, [r0, #4]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d005      	beq.n	80019f6 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80019ea:	6803      	ldr	r3, [r0, #0]
 80019ec:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	60da      	str	r2, [r3, #12]
  }
}
 80019f2:	bc70      	pop	{r4, r5, r6}
 80019f4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80019f6:	6803      	ldr	r3, [r0, #0]
 80019f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80019fa:	6803      	ldr	r3, [r0, #0]
 80019fc:	60d9      	str	r1, [r3, #12]
 80019fe:	e7f8      	b.n	80019f2 <DMA_SetConfig+0x1e>

08001a00 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a00:	6802      	ldr	r2, [r0, #0]
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <DMA_CalcBaseAndBitshift+0x18>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <DMA_CalcBaseAndBitshift+0x1c>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <DMA_CalcBaseAndBitshift+0x20>)
 8001a14:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8001a16:	4770      	bx	lr
 8001a18:	bffdfff8 	.word	0xbffdfff8
 8001a1c:	cccccccd 	.word	0xcccccccd
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_DMA_Init>:
  if(NULL == hdma)
 8001a24:	b320      	cbz	r0, 8001a70 <HAL_DMA_Init+0x4c>
{ 
 8001a26:	b510      	push	{r4, lr}
 8001a28:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001a30:	6801      	ldr	r1, [r0, #0]
 8001a32:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a34:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001a38:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001a3c:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3e:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8001a40:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	68e0      	ldr	r0, [r4, #12]
 8001a44:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a48:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4a:	6960      	ldr	r0, [r4, #20]
 8001a4c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a50:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a52:	69e0      	ldr	r0, [r4, #28]
 8001a54:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001a56:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001a58:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff ffd0 	bl	8001a00 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a60:	2000      	movs	r0, #0
 8001a62:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001a6a:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8001a6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a70:	2001      	movs	r0, #1
}  
 8001a72:	4770      	bx	lr

08001a74 <HAL_DMA_Start_IT>:
{
 8001a74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001a76:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001a7a:	2c01      	cmp	r4, #1
 8001a7c:	d032      	beq.n	8001ae4 <HAL_DMA_Start_IT+0x70>
 8001a7e:	2401      	movs	r4, #1
 8001a80:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a84:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001a88:	2c01      	cmp	r4, #1
 8001a8a:	d004      	beq.n	8001a96 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001a92:	2002      	movs	r0, #2
} 
 8001a94:	bd38      	pop	{r3, r4, r5, pc}
 8001a96:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aa2:	6825      	ldr	r5, [r4, #0]
 8001aa4:	6828      	ldr	r0, [r5, #0]
 8001aa6:	f020 0001 	bic.w	r0, r0, #1
 8001aaa:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff ff91 	bl	80019d4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ab4:	b15b      	cbz	r3, 8001ace <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	f043 030e 	orr.w	r3, r3, #14
 8001abe:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2000      	movs	r0, #0
 8001acc:	e7e2      	b.n	8001a94 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	f043 030a 	orr.w	r3, r3, #10
 8001ad6:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e7ed      	b.n	8001ac0 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	e7d5      	b.n	8001a94 <HAL_DMA_Start_IT+0x20>

08001ae8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d006      	beq.n	8001afe <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	2304      	movs	r3, #4
 8001af2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001af4:	2300      	movs	r3, #0
 8001af6:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
 8001afc:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001afe:	6802      	ldr	r2, [r0, #0]
 8001b00:	6813      	ldr	r3, [r2, #0]
 8001b02:	f023 030e 	bic.w	r3, r3, #14
 8001b06:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b08:	6802      	ldr	r2, [r0, #0]
 8001b0a:	6813      	ldr	r3, [r2, #0]
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b14:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b16:	2201      	movs	r2, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001b1e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001b22:	2300      	movs	r3, #0
 8001b24:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001b28:	4618      	mov	r0, r3
}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_DMA_Abort_IT>:
{  
 8001b2c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b2e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b36:	2304      	movs	r3, #4
 8001b38:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
}
 8001b3c:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	f023 030e 	bic.w	r3, r3, #14
 8001b46:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b48:	6802      	ldr	r2, [r0, #0]
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b54:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b56:	2201      	movs	r2, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001b62:	2300      	movs	r3, #0
 8001b64:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001b68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b6a:	b113      	cbz	r3, 8001b72 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001b6c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e7e4      	b.n	8001b3c <HAL_DMA_Abort_IT+0x10>
 8001b72:	2000      	movs	r0, #0
 8001b74:	e7e2      	b.n	8001b3c <HAL_DMA_Abort_IT+0x10>

08001b76 <HAL_DMA_IRQHandler>:
{
 8001b76:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001b7a:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b7c:	6804      	ldr	r4, [r0, #0]
 8001b7e:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b80:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001b82:	2304      	movs	r3, #4
 8001b84:	408b      	lsls	r3, r1
 8001b86:	4213      	tst	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x3c>
 8001b8a:	f015 0f04 	tst.w	r5, #4
 8001b8e:	d010      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f013 0f20 	tst.w	r3, #32
 8001b96:	d103      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ba0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ba2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	408b      	lsls	r3, r1
 8001ba8:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001baa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bac:	b103      	cbz	r3, 8001bb0 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8001bae:	4798      	blx	r3
}  
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	408b      	lsls	r3, r1
 8001bb6:	4213      	tst	r3, r2
 8001bb8:	d01a      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x7a>
 8001bba:	f015 0f02 	tst.w	r5, #2
 8001bbe:	d017      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	f013 0f20 	tst.w	r3, #32
 8001bc6:	d106      	bne.n	8001bd6 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	f023 030a 	bic.w	r3, r3, #10
 8001bce:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001bd6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001bd8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001bda:	2302      	movs	r3, #2
 8001bdc:	408b      	lsls	r3, r1
 8001bde:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001be0:	2300      	movs	r3, #0
 8001be2:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001be6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0e1      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8001bec:	4798      	blx	r3
 8001bee:	e7df      	b.n	8001bb0 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	fa03 f101 	lsl.w	r1, r3, r1
 8001bf6:	4211      	tst	r1, r2
 8001bf8:	d0da      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x3a>
 8001bfa:	f015 0f08 	tst.w	r5, #8
 8001bfe:	d0d7      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	f023 030e 	bic.w	r3, r3, #14
 8001c06:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c08:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001c0a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	fa03 f202 	lsl.w	r2, r3, r2
 8001c12:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c14:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001c16:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001c20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0c4      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8001c26:	4798      	blx	r3
}  
 8001c28:	e7c2      	b.n	8001bb0 <HAL_DMA_IRQHandler+0x3a>
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b4f0      	push	{r4, r5, r6, r7}
 8001c2e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001c30:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	e036      	b.n	8001ca2 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c34:	2403      	movs	r4, #3
 8001c36:	e000      	b.n	8001c3a <HAL_GPIO_Init+0xe>
 8001c38:	2400      	movs	r4, #0
 8001c3a:	40b4      	lsls	r4, r6
 8001c3c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3e:	3502      	adds	r5, #2
 8001c40:	4e58      	ldr	r6, [pc, #352]	; (8001da4 <HAL_GPIO_Init+0x178>)
 8001c42:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c46:	4c58      	ldr	r4, [pc, #352]	; (8001da8 <HAL_GPIO_Init+0x17c>)
 8001c48:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001c4a:	43d4      	mvns	r4, r2
 8001c4c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c50:	684f      	ldr	r7, [r1, #4]
 8001c52:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001c56:	d001      	beq.n	8001c5c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8001c58:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001c5c:	4d52      	ldr	r5, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x17c>)
 8001c5e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001c60:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001c62:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c66:	684f      	ldr	r7, [r1, #4]
 8001c68:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001c6c:	d001      	beq.n	8001c72 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8001c6e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001c72:	4d4d      	ldr	r5, [pc, #308]	; (8001da8 <HAL_GPIO_Init+0x17c>)
 8001c74:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001c78:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7c:	684f      	ldr	r7, [r1, #4]
 8001c7e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001c82:	d001      	beq.n	8001c88 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8001c84:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001c88:	4d47      	ldr	r5, [pc, #284]	; (8001da8 <HAL_GPIO_Init+0x17c>)
 8001c8a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001c8c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001c8e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c90:	684e      	ldr	r6, [r1, #4]
 8001c92:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001c96:	d001      	beq.n	8001c9c <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001c98:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001c9c:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <HAL_GPIO_Init+0x17c>)
 8001c9e:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001ca0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	680a      	ldr	r2, [r1, #0]
 8001ca4:	fa32 f403 	lsrs.w	r4, r2, r3
 8001ca8:	d078      	beq.n	8001d9c <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001caa:	2401      	movs	r4, #1
 8001cac:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001cae:	4022      	ands	r2, r4
 8001cb0:	d0f6      	beq.n	8001ca0 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb2:	684d      	ldr	r5, [r1, #4]
 8001cb4:	2d02      	cmp	r5, #2
 8001cb6:	d001      	beq.n	8001cbc <HAL_GPIO_Init+0x90>
 8001cb8:	2d12      	cmp	r5, #18
 8001cba:	d110      	bne.n	8001cde <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 8001cbc:	08de      	lsrs	r6, r3, #3
 8001cbe:	3608      	adds	r6, #8
 8001cc0:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cc4:	f003 0507 	and.w	r5, r3, #7
 8001cc8:	00af      	lsls	r7, r5, #2
 8001cca:	250f      	movs	r5, #15
 8001ccc:	40bd      	lsls	r5, r7
 8001cce:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cd2:	690d      	ldr	r5, [r1, #16]
 8001cd4:	40bd      	lsls	r5, r7
 8001cd6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001cda:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001cde:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ce0:	005f      	lsls	r7, r3, #1
 8001ce2:	2503      	movs	r5, #3
 8001ce4:	40bd      	lsls	r5, r7
 8001ce6:	43ed      	mvns	r5, r5
 8001ce8:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cec:	684e      	ldr	r6, [r1, #4]
 8001cee:	f006 0603 	and.w	r6, r6, #3
 8001cf2:	40be      	lsls	r6, r7
 8001cf4:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8001cf8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cfa:	684e      	ldr	r6, [r1, #4]
 8001cfc:	f106 3cff 	add.w	ip, r6, #4294967295
 8001d00:	f1bc 0f01 	cmp.w	ip, #1
 8001d04:	d903      	bls.n	8001d0e <HAL_GPIO_Init+0xe2>
 8001d06:	2e11      	cmp	r6, #17
 8001d08:	d001      	beq.n	8001d0e <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0a:	2e12      	cmp	r6, #18
 8001d0c:	d110      	bne.n	8001d30 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8001d0e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d10:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d14:	68ce      	ldr	r6, [r1, #12]
 8001d16:	40be      	lsls	r6, r7
 8001d18:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001d1c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d1e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d24:	684e      	ldr	r6, [r1, #4]
 8001d26:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001d2a:	409e      	lsls	r6, r3
 8001d2c:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001d2e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001d30:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d32:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d34:	688c      	ldr	r4, [r1, #8]
 8001d36:	40bc      	lsls	r4, r7
 8001d38:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001d3a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3c:	684c      	ldr	r4, [r1, #4]
 8001d3e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001d42:	d0ad      	beq.n	8001ca0 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d44:	4c19      	ldr	r4, [pc, #100]	; (8001dac <HAL_GPIO_Init+0x180>)
 8001d46:	69a5      	ldr	r5, [r4, #24]
 8001d48:	f045 0501 	orr.w	r5, r5, #1
 8001d4c:	61a5      	str	r5, [r4, #24]
 8001d4e:	69a4      	ldr	r4, [r4, #24]
 8001d50:	f004 0401 	and.w	r4, r4, #1
 8001d54:	9401      	str	r4, [sp, #4]
 8001d56:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d58:	089d      	lsrs	r5, r3, #2
 8001d5a:	1cae      	adds	r6, r5, #2
 8001d5c:	4c11      	ldr	r4, [pc, #68]	; (8001da4 <HAL_GPIO_Init+0x178>)
 8001d5e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d62:	f003 0403 	and.w	r4, r3, #3
 8001d66:	00a6      	lsls	r6, r4, #2
 8001d68:	240f      	movs	r4, #15
 8001d6a:	40b4      	lsls	r4, r6
 8001d6c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d70:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001d74:	f43f af60 	beq.w	8001c38 <HAL_GPIO_Init+0xc>
 8001d78:	4c0d      	ldr	r4, [pc, #52]	; (8001db0 <HAL_GPIO_Init+0x184>)
 8001d7a:	42a0      	cmp	r0, r4
 8001d7c:	d00a      	beq.n	8001d94 <HAL_GPIO_Init+0x168>
 8001d7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d82:	42a0      	cmp	r0, r4
 8001d84:	d008      	beq.n	8001d98 <HAL_GPIO_Init+0x16c>
 8001d86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d8a:	42a0      	cmp	r0, r4
 8001d8c:	f43f af52 	beq.w	8001c34 <HAL_GPIO_Init+0x8>
 8001d90:	2405      	movs	r4, #5
 8001d92:	e752      	b.n	8001c3a <HAL_GPIO_Init+0xe>
 8001d94:	2401      	movs	r4, #1
 8001d96:	e750      	b.n	8001c3a <HAL_GPIO_Init+0xe>
 8001d98:	2402      	movs	r4, #2
 8001d9a:	e74e      	b.n	8001c3a <HAL_GPIO_Init+0xe>
  }
}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40010400 	.word	0x40010400
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400

08001db4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	b90a      	cbnz	r2, 8001dba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001db8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dba:	6181      	str	r1, [r0, #24]
 8001dbc:	4770      	bx	lr

08001dbe <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d059      	beq.n	8001e76 <HAL_I2C_Init+0xb8>
{
 8001dc2:	b510      	push	{r4, lr}
 8001dc4:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d043      	beq.n	8001e56 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dce:	2324      	movs	r3, #36	; 0x24
 8001dd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dde:	6863      	ldr	r3, [r4, #4]
 8001de0:	6822      	ldr	r2, [r4, #0]
 8001de2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001de6:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	6893      	ldr	r3, [r2, #8]
 8001dec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001df0:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df2:	68e3      	ldr	r3, [r4, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d033      	beq.n	8001e60 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001df8:	68a3      	ldr	r3, [r4, #8]
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001e00:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e02:	68e3      	ldr	r3, [r4, #12]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d031      	beq.n	8001e6c <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e08:	6822      	ldr	r2, [r4, #0]
 8001e0a:	6853      	ldr	r3, [r2, #4]
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	68d3      	ldr	r3, [r2, #12]
 8001e1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e1e:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e20:	6923      	ldr	r3, [r4, #16]
 8001e22:	6962      	ldr	r2, [r4, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	69a1      	ldr	r1, [r4, #24]
 8001e28:	6822      	ldr	r2, [r4, #0]
 8001e2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e2e:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e30:	69e3      	ldr	r3, [r4, #28]
 8001e32:	6a21      	ldr	r1, [r4, #32]
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	430b      	orrs	r3, r1
 8001e38:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	6813      	ldr	r3, [r2, #0]
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	2000      	movs	r0, #0
 8001e46:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8001e54:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001e56:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001e5a:	f7fe fb79 	bl	8000550 <HAL_I2C_MspInit>
 8001e5e:	e7b6      	b.n	8001dce <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e60:	68a3      	ldr	r3, [r4, #8]
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e68:	6093      	str	r3, [r2, #8]
 8001e6a:	e7ca      	b.n	8001e02 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	e7c8      	b.n	8001e08 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
}
 8001e78:	4770      	bx	lr

08001e7a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e7a:	b508      	push	{r3, lr}
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e7c:	6803      	ldr	r3, [r0, #0]
 8001e7e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e80:	681a      	ldr	r2, [r3, #0]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e84:	b103      	cbz	r3, 8001e88 <HAL_I2C_EV_IRQHandler+0xe>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e86:	4798      	blx	r3
  }
}
 8001e88:	bd08      	pop	{r3, pc}

08001e8a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d124      	bne.n	8001ede <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d022      	beq.n	8001ee2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea2:	2324      	movs	r3, #36	; 0x24
 8001ea4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea8:	6802      	ldr	r2, [r0, #0]
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eb2:	6802      	ldr	r2, [r0, #0]
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eba:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ebc:	6802      	ldr	r2, [r0, #0]
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	4319      	orrs	r1, r3
 8001ec2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec4:	6802      	ldr	r2, [r0, #0]
 8001ec6:	6813      	ldr	r3, [r2, #0]
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001eda:	4618      	mov	r0, r3
 8001edc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001ede:	2002      	movs	r0, #2
 8001ee0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001ee2:	2002      	movs	r0, #2
  }
}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d122      	bne.n	8001f36 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d020      	beq.n	8001f3a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001efe:	2324      	movs	r3, #36	; 0x24
 8001f00:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	6813      	ldr	r3, [r2, #0]
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0e:	6802      	ldr	r2, [r0, #0]
 8001f10:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f16:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f1a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f1c:	6802      	ldr	r2, [r0, #0]
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	2320      	movs	r3, #32
 8001f28:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001f32:	4618      	mov	r0, r3
 8001f34:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2002      	movs	r0, #2
 8001f38:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f3a:	2002      	movs	r0, #2
  }
}
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	f000 830d 	beq.w	8002560 <HAL_RCC_OscConfig+0x620>
{
 8001f46:	b570      	push	{r4, r5, r6, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4c:	6803      	ldr	r3, [r0, #0]
 8001f4e:	f013 0f01 	tst.w	r3, #1
 8001f52:	d03b      	beq.n	8001fcc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f54:	4bb5      	ldr	r3, [pc, #724]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d01e      	beq.n	8001f9e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f60:	4bb2      	ldr	r3, [pc, #712]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	6863      	ldr	r3, [r4, #4]
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f72:	d068      	beq.n	8002046 <HAL_RCC_OscConfig+0x106>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 8092 	bne.w	800209e <HAL_RCC_OscConfig+0x15e>
 8001f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f7e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e05d      	b.n	8002050 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f94:	4ba5      	ldr	r3, [pc, #660]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f9c:	d0e6      	beq.n	8001f6c <HAL_RCC_OscConfig+0x2c>
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa6:	4ba1      	ldr	r3, [pc, #644]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2201      	movs	r2, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	420b      	tst	r3, r1
 8001fc2:	d003      	beq.n	8001fcc <HAL_RCC_OscConfig+0x8c>
 8001fc4:	6863      	ldr	r3, [r4, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 82cc 	beq.w	8002564 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	f013 0f02 	tst.w	r3, #2
 8001fd2:	f000 80c6 	beq.w	8002162 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fd6:	4b95      	ldr	r3, [pc, #596]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f013 0f0c 	tst.w	r3, #12
 8001fde:	f000 809c 	beq.w	800211a <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe2:	4b92      	ldr	r3, [pc, #584]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	f000 808f 	beq.w	800210e <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80f3 	beq.w	80021de <HAL_RCC_OscConfig+0x29e>
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002006:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe fefb 	bl	8000e08 <HAL_GetTick>
 8002012:	4605      	mov	r5, r0
 8002014:	2302      	movs	r3, #2
 8002016:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b84      	ldr	r3, [pc, #528]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	2302      	movs	r3, #2
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2201      	movs	r2, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	420b      	tst	r3, r1
 8002034:	f040 80c4 	bne.w	80021c0 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7fe fee6 	bl	8000e08 <HAL_GetTick>
 800203c:	1b40      	subs	r0, r0, r5
 800203e:	2802      	cmp	r0, #2
 8002040:	d9e8      	bls.n	8002014 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
 8002044:	e295      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	4a79      	ldr	r2, [pc, #484]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002050:	4a76      	ldr	r2, [pc, #472]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8002052:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002054:	f023 030f 	bic.w	r3, r3, #15
 8002058:	68a1      	ldr	r1, [r4, #8]
 800205a:	430b      	orrs	r3, r1
 800205c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205e:	6863      	ldr	r3, [r4, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d036      	beq.n	80020d2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002064:	f7fe fed0 	bl	8000e08 <HAL_GetTick>
 8002068:	4605      	mov	r5, r0
 800206a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b6e      	ldr	r3, [pc, #440]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2201      	movs	r2, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	420b      	tst	r3, r1
 800208e:	d19d      	bne.n	8001fcc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe feba 	bl	8000e08 <HAL_GetTick>
 8002094:	1b40      	subs	r0, r0, r5
 8002096:	2864      	cmp	r0, #100	; 0x64
 8002098:	d9e7      	bls.n	800206a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
 800209c:	e269      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a2:	d009      	beq.n	80020b8 <HAL_RCC_OscConfig+0x178>
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e7cb      	b.n	8002050 <HAL_RCC_OscConfig+0x110>
 80020b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020bc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e7be      	b.n	8002050 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80020d2:	f7fe fe99 	bl	8000e08 <HAL_GetTick>
 80020d6:	4605      	mov	r5, r0
 80020d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020dc:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e0:	4b52      	ldr	r3, [pc, #328]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2201      	movs	r2, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	420b      	tst	r3, r1
 80020fc:	f43f af66 	beq.w	8001fcc <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe fe82 	bl	8000e08 <HAL_GetTick>
 8002104:	1b40      	subs	r0, r0, r5
 8002106:	2864      	cmp	r0, #100	; 0x64
 8002108:	d9e6      	bls.n	80020d8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 800210a:	2003      	movs	r0, #3
 800210c:	e231      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002116:	f47f af6b 	bne.w	8001ff0 <HAL_RCC_OscConfig+0xb0>
 800211a:	2302      	movs	r3, #2
 800211c:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002120:	4b42      	ldr	r3, [pc, #264]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	2302      	movs	r3, #2
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2201      	movs	r2, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	420b      	tst	r3, r1
 800213a:	d004      	beq.n	8002146 <HAL_RCC_OscConfig+0x206>
 800213c:	6923      	ldr	r3, [r4, #16]
 800213e:	4293      	cmp	r3, r2
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002142:	2001      	movs	r0, #1
 8002144:	e215      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4839      	ldr	r0, [pc, #228]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8002148:	6803      	ldr	r3, [r0, #0]
 800214a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800214e:	6961      	ldr	r1, [r4, #20]
 8002150:	22f8      	movs	r2, #248	; 0xf8
 8002152:	fa92 f2a2 	rbit	r2, r2
 8002156:	fab2 f282 	clz	r2, r2
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4313      	orrs	r3, r2
 8002160:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	f013 0f08 	tst.w	r3, #8
 8002168:	f000 808c 	beq.w	8002284 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216c:	69a3      	ldr	r3, [r4, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d060      	beq.n	8002234 <HAL_RCC_OscConfig+0x2f4>
 8002172:	2101      	movs	r1, #1
 8002174:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x2f0>)
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe fe40 	bl	8000e08 <HAL_GetTick>
 8002188:	4605      	mov	r5, r0
 800218a:	2302      	movs	r3, #2
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	fa93 f2a3 	rbit	r2, r3
 8002194:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 800219a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2201      	movs	r2, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	420b      	tst	r3, r1
 80021b0:	d168      	bne.n	8002284 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b2:	f7fe fe29 	bl	8000e08 <HAL_GetTick>
 80021b6:	1b40      	subs	r0, r0, r5
 80021b8:	2802      	cmp	r0, #2
 80021ba:	d9e6      	bls.n	800218a <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 80021bc:	2003      	movs	r0, #3
 80021be:	e1d8      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	481a      	ldr	r0, [pc, #104]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 80021c2:	6803      	ldr	r3, [r0, #0]
 80021c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021c8:	6961      	ldr	r1, [r4, #20]
 80021ca:	22f8      	movs	r2, #248	; 0xf8
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	4313      	orrs	r3, r2
 80021da:	6003      	str	r3, [r0, #0]
 80021dc:	e7c1      	b.n	8002162 <HAL_RCC_OscConfig+0x222>
 80021de:	2301      	movs	r3, #1
 80021e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021f6:	f7fe fe07 	bl	8000e08 <HAL_GetTick>
 80021fa:	4605      	mov	r5, r0
 80021fc:	2302      	movs	r3, #2
 80021fe:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_RCC_OscConfig+0x2ec>)
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	2302      	movs	r3, #2
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2201      	movs	r2, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	420b      	tst	r3, r1
 800221c:	d0a1      	beq.n	8002162 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221e:	f7fe fdf3 	bl	8000e08 <HAL_GetTick>
 8002222:	1b40      	subs	r0, r0, r5
 8002224:	2802      	cmp	r0, #2
 8002226:	d9e9      	bls.n	80021fc <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8002228:	2003      	movs	r0, #3
 800222a:	e1a2      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
 800222c:	40021000 	.word	0x40021000
 8002230:	10908120 	.word	0x10908120
 8002234:	2201      	movs	r2, #1
 8002236:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	4bbc      	ldr	r3, [pc, #752]	; (8002530 <HAL_RCC_OscConfig+0x5f0>)
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7fe fdde 	bl	8000e08 <HAL_GetTick>
 800224c:	4605      	mov	r5, r0
 800224e:	2302      	movs	r3, #2
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4ab5      	ldr	r2, [pc, #724]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 800225e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2201      	movs	r2, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	420b      	tst	r3, r1
 8002274:	d006      	beq.n	8002284 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002276:	f7fe fdc7 	bl	8000e08 <HAL_GetTick>
 800227a:	1b40      	subs	r0, r0, r5
 800227c:	2802      	cmp	r0, #2
 800227e:	d9e6      	bls.n	800224e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002280:	2003      	movs	r0, #3
 8002282:	e176      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	f013 0f04 	tst.w	r3, #4
 800228a:	f000 80b3 	beq.w	80023f4 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4ba9      	ldr	r3, [pc, #676]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002296:	d120      	bne.n	80022da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4ba6      	ldr	r3, [pc, #664]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 800229a:	69da      	ldr	r2, [r3, #28]
 800229c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a0:	61da      	str	r2, [r3, #28]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022ac:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4ba2      	ldr	r3, [pc, #648]	; (8002538 <HAL_RCC_OscConfig+0x5f8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022b6:	d012      	beq.n	80022de <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b8:	68e3      	ldr	r3, [r4, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d023      	beq.n	8002306 <HAL_RCC_OscConfig+0x3c6>
 80022be:	bb73      	cbnz	r3, 800231e <HAL_RCC_OscConfig+0x3de>
 80022c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	621a      	str	r2, [r3, #32]
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	621a      	str	r2, [r3, #32]
 80022d8:	e01a      	b.n	8002310 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80022da:	2500      	movs	r5, #0
 80022dc:	e7e7      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4a96      	ldr	r2, [pc, #600]	; (8002538 <HAL_RCC_OscConfig+0x5f8>)
 80022e0:	6813      	ldr	r3, [r2, #0]
 80022e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022e8:	f7fe fd8e 	bl	8000e08 <HAL_GetTick>
 80022ec:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b92      	ldr	r3, [pc, #584]	; (8002538 <HAL_RCC_OscConfig+0x5f8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022f6:	d1df      	bne.n	80022b8 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7fe fd86 	bl	8000e08 <HAL_GetTick>
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	2864      	cmp	r0, #100	; 0x64
 8002300:	d9f5      	bls.n	80022ee <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8002302:	2003      	movs	r0, #3
 8002304:	e135      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002306:	4a8b      	ldr	r2, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002308:	6a13      	ldr	r3, [r2, #32]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002310:	68e3      	ldr	r3, [r4, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d041      	beq.n	800239a <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe fd77 	bl	8000e08 <HAL_GetTick>
 800231a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	e02b      	b.n	8002376 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231e:	2b05      	cmp	r3, #5
 8002320:	d009      	beq.n	8002336 <HAL_RCC_OscConfig+0x3f6>
 8002322:	4b84      	ldr	r3, [pc, #528]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002324:	6a1a      	ldr	r2, [r3, #32]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	621a      	str	r2, [r3, #32]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	621a      	str	r2, [r3, #32]
 8002334:	e7ec      	b.n	8002310 <HAL_RCC_OscConfig+0x3d0>
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002338:	6a1a      	ldr	r2, [r3, #32]
 800233a:	f042 0204 	orr.w	r2, r2, #4
 800233e:	621a      	str	r2, [r3, #32]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	621a      	str	r2, [r3, #32]
 8002348:	e7e2      	b.n	8002310 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 800234c:	6a19      	ldr	r1, [r3, #32]
 800234e:	2302      	movs	r3, #2
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2201      	movs	r2, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	4219      	tst	r1, r3
 8002364:	d145      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe fd4f 	bl	8000e08 <HAL_GetTick>
 800236a:	1b80      	subs	r0, r0, r6
 800236c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002370:	4298      	cmp	r0, r3
 8002372:	f200 80f9 	bhi.w	8002568 <HAL_RCC_OscConfig+0x628>
 8002376:	2302      	movs	r3, #2
 8002378:	fa93 f2a3 	rbit	r2, r3
 800237c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d0dd      	beq.n	800234a <HAL_RCC_OscConfig+0x40a>
 800238e:	2302      	movs	r3, #2
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002396:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002398:	e7d9      	b.n	800234e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fd35 	bl	8000e08 <HAL_GetTick>
 800239e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x48e>
 80023a2:	4b64      	ldr	r3, [pc, #400]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 80023a4:	6a19      	ldr	r1, [r3, #32]
 80023a6:	2302      	movs	r3, #2
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	2201      	movs	r2, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	4219      	tst	r1, r3
 80023bc:	d019      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fd23 	bl	8000e08 <HAL_GetTick>
 80023c2:	1b80      	subs	r0, r0, r6
 80023c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80023c8:	4298      	cmp	r0, r3
 80023ca:	f200 80cf 	bhi.w	800256c <HAL_RCC_OscConfig+0x62c>
 80023ce:	2302      	movs	r3, #2
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d0dd      	beq.n	80023a2 <HAL_RCC_OscConfig+0x462>
 80023e6:	2302      	movs	r3, #2
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 80023ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023f0:	e7d9      	b.n	80023a6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f2:	bbb5      	cbnz	r5, 8002462 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f4:	69e3      	ldr	r3, [r4, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80ba 	beq.w	8002570 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fc:	4a4d      	ldr	r2, [pc, #308]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 80023fe:	6852      	ldr	r2, [r2, #4]
 8002400:	f002 020c 	and.w	r2, r2, #12
 8002404:	2a08      	cmp	r2, #8
 8002406:	f000 8099 	beq.w	800253c <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240a:	2b02      	cmp	r3, #2
 800240c:	d02f      	beq.n	800246e <HAL_RCC_OscConfig+0x52e>
 800240e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002412:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fcee 	bl	8000e08 <HAL_GetTick>
 800242c:	4604      	mov	r4, r0
 800242e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002432:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002436:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2201      	movs	r2, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	4219      	tst	r1, r3
 8002452:	d06b      	beq.n	800252c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fcd8 	bl	8000e08 <HAL_GetTick>
 8002458:	1b00      	subs	r0, r0, r4
 800245a:	2802      	cmp	r0, #2
 800245c:	d9e7      	bls.n	800242e <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 800245e:	2003      	movs	r0, #3
 8002460:	e087      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4a34      	ldr	r2, [pc, #208]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002464:	69d3      	ldr	r3, [r2, #28]
 8002466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246a:	61d3      	str	r3, [r2, #28]
 800246c:	e7c2      	b.n	80023f4 <HAL_RCC_OscConfig+0x4b4>
 800246e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002472:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800247e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002488:	f7fe fcbe 	bl	8000e08 <HAL_GetTick>
 800248c:	4605      	mov	r5, r0
 800248e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002492:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	4219      	tst	r1, r3
 80024b2:	d006      	beq.n	80024c2 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fca8 	bl	8000e08 <HAL_GetTick>
 80024b8:	1b40      	subs	r0, r0, r5
 80024ba:	2802      	cmp	r0, #2
 80024bc:	d9e7      	bls.n	800248e <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 80024be:	2003      	movs	r0, #3
 80024c0:	e057      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c2:	491c      	ldr	r1, [pc, #112]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 80024c4:	684b      	ldr	r3, [r1, #4]
 80024c6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80024ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024cc:	6a20      	ldr	r0, [r4, #32]
 80024ce:	4302      	orrs	r2, r0
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
 80024d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024ee:	f7fe fc8b 	bl	8000e08 <HAL_GetTick>
 80024f2:	4604      	mov	r4, r0
 80024f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_RCC_OscConfig+0x5f4>)
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2201      	movs	r2, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	4219      	tst	r1, r3
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fc75 	bl	8000e08 <HAL_GetTick>
 800251e:	1b00      	subs	r0, r0, r4
 8002520:	2802      	cmp	r0, #2
 8002522:	d9e7      	bls.n	80024f4 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	e024      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8002528:	2000      	movs	r0, #0
 800252a:	e022      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
 800252c:	2000      	movs	r0, #0
 800252e:	e020      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
 8002530:	10908120 	.word	0x10908120
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253c:	2b01      	cmp	r3, #1
 800253e:	d01a      	beq.n	8002576 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_RCC_OscConfig+0x640>)
 8002542:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002544:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002548:	6a22      	ldr	r2, [r4, #32]
 800254a:	4291      	cmp	r1, r2
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 800254e:	2001      	movs	r0, #1
 8002550:	e00f      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002552:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002556:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002558:	4293      	cmp	r3, r2
 800255a:	d00e      	beq.n	800257a <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 800255c:	2001      	movs	r0, #1
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8002560:	2001      	movs	r0, #1
}
 8002562:	4770      	bx	lr
        return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	e004      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002568:	2003      	movs	r0, #3
 800256a:	e002      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 800256c:	2003      	movs	r0, #3
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002570:	2000      	movs	r0, #0
}
 8002572:	b002      	add	sp, #8
 8002574:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002576:	2001      	movs	r0, #1
 8002578:	e7fb      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 800257a:	2000      	movs	r0, #0
 800257c:	e7f9      	b.n	8002572 <HAL_RCC_OscConfig+0x632>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x64>)
 8002586:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002588:	f003 020c 	and.w	r2, r3, #12
 800258c:	2a04      	cmp	r2, #4
 800258e:	d003      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x14>
 8002590:	2a08      	cmp	r2, #8
 8002592:	d003      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x18>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4815      	ldr	r0, [pc, #84]	; (80025ec <HAL_RCC_GetSysClockFreq+0x68>)
      break;
    }
  }
  return sysclockfreq;
}
 8002596:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002598:	4815      	ldr	r0, [pc, #84]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x6c>)
 800259a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800259c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80025a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025a4:	fa92 f2a2 	rbit	r2, r2
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	fa21 f202 	lsr.w	r2, r1, r2
 80025b0:	4910      	ldr	r1, [pc, #64]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x70>)
 80025b2:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x64>)
 80025b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025b8:	f002 020f 	and.w	r2, r2, #15
 80025bc:	210f      	movs	r1, #15
 80025be:	fa91 f1a1 	rbit	r1, r1
 80025c2:	fab1 f181 	clz	r1, r1
 80025c6:	40ca      	lsrs	r2, r1
 80025c8:	490b      	ldr	r1, [pc, #44]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x74>)
 80025ca:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80025d0:	d005      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x5a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80025d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d8:	fb00 f003 	mul.w	r0, r0, r3
 80025dc:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_RCC_GetSysClockFreq+0x78>)
 80025e0:	fb03 f000 	mul.w	r0, r3, r0
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	01e84800 	.word	0x01e84800
 80025f4:	08005e5c 	.word	0x08005e5c
 80025f8:	08005e6c 	.word	0x08005e6c
 80025fc:	003d0900 	.word	0x003d0900

08002600 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002600:	2800      	cmp	r0, #0
 8002602:	f000 80c1 	beq.w	8002788 <HAL_RCC_ClockConfig+0x188>
{
 8002606:	b570      	push	{r4, r5, r6, lr}
 8002608:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800260a:	4b61      	ldr	r3, [pc, #388]	; (8002790 <HAL_RCC_ClockConfig+0x190>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	428b      	cmp	r3, r1
 8002614:	d20c      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4a5e      	ldr	r2, [pc, #376]	; (8002790 <HAL_RCC_ClockConfig+0x190>)
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	f023 0307 	bic.w	r3, r3, #7
 800261e:	430b      	orrs	r3, r1
 8002620:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	428b      	cmp	r3, r1
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
}
 800262e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f013 0f02 	tst.w	r3, #2
 8002636:	d006      	beq.n	8002646 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4a56      	ldr	r2, [pc, #344]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 800263a:	6853      	ldr	r3, [r2, #4]
 800263c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002640:	68a0      	ldr	r0, [r4, #8]
 8002642:	4303      	orrs	r3, r0
 8002644:	6053      	str	r3, [r2, #4]
 8002646:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f013 0f01 	tst.w	r3, #1
 800264e:	d05a      	beq.n	8002706 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d02d      	beq.n	80026b2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002656:	2b02      	cmp	r3, #2
 8002658:	d040      	beq.n	80026dc <HAL_RCC_ClockConfig+0xdc>
 800265a:	2202      	movs	r2, #2
 800265c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4a4c      	ldr	r2, [pc, #304]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 8002662:	6810      	ldr	r0, [r2, #0]
 8002664:	2202      	movs	r2, #2
 8002666:	fa92 f2a2 	rbit	r2, r2
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	f002 021f 	and.w	r2, r2, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	4210      	tst	r0, r2
 800267a:	f000 8087 	beq.w	800278c <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4945      	ldr	r1, [pc, #276]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 8002680:	684a      	ldr	r2, [r1, #4]
 8002682:	f022 0203 	bic.w	r2, r2, #3
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800268a:	f7fe fbbd 	bl	8000e08 <HAL_GetTick>
 800268e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002690:	4b40      	ldr	r3, [pc, #256]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	6862      	ldr	r2, [r4, #4]
 800269a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800269e:	d032      	beq.n	8002706 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fbb2 	bl	8000e08 <HAL_GetTick>
 80026a4:	1b80      	subs	r0, r0, r6
 80026a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80026aa:	4298      	cmp	r0, r3
 80026ac:	d9f0      	bls.n	8002690 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80026ae:	2003      	movs	r0, #3
 80026b0:	e7bd      	b.n	800262e <HAL_RCC_ClockConfig+0x2e>
 80026b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4a36      	ldr	r2, [pc, #216]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 80026bc:	6810      	ldr	r0, [r2, #0]
 80026be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026c2:	fa92 f2a2 	rbit	r2, r2
 80026c6:	fab2 f282 	clz	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4202      	tst	r2, r0
 80026d6:	d1d2      	bne.n	800267e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7a8      	b.n	800262e <HAL_RCC_ClockConfig+0x2e>
 80026dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 80026e6:	6810      	ldr	r0, [r2, #0]
 80026e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	f002 021f 	and.w	r2, r2, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	4210      	tst	r0, r2
 8002700:	d1bd      	bne.n	800267e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002702:	2001      	movs	r0, #1
 8002704:	e793      	b.n	800262e <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x190>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	42ab      	cmp	r3, r5
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <HAL_RCC_ClockConfig+0x190>)
 8002714:	6813      	ldr	r3, [r2, #0]
 8002716:	f023 0307 	bic.w	r3, r3, #7
 800271a:	432b      	orrs	r3, r5
 800271c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	6813      	ldr	r3, [r2, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	42ab      	cmp	r3, r5
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	e780      	b.n	800262e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	f013 0f04 	tst.w	r3, #4
 8002732:	d006      	beq.n	8002742 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 8002736:	6853      	ldr	r3, [r2, #4]
 8002738:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800273c:	68e1      	ldr	r1, [r4, #12]
 800273e:	430b      	orrs	r3, r1
 8002740:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	f013 0f08 	tst.w	r3, #8
 8002748:	d007      	beq.n	800275a <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 800274c:	6853      	ldr	r3, [r2, #4]
 800274e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002752:	6921      	ldr	r1, [r4, #16]
 8002754:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002758:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800275a:	f7ff ff13 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_RCC_ClockConfig+0x194>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002766:	22f0      	movs	r2, #240	; 0xf0
 8002768:	fa92 f2a2 	rbit	r2, r2
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	40d3      	lsrs	r3, r2
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x198>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	40d8      	lsrs	r0, r3
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_RCC_ClockConfig+0x19c>)
 800277a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_RCC_ClockConfig+0x1a0>)
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	f7fe f930 	bl	80009e4 <HAL_InitTick>
  return HAL_OK;
 8002784:	2000      	movs	r0, #0
 8002786:	e752      	b.n	800262e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002788:	2001      	movs	r0, #1
}
 800278a:	4770      	bx	lr
        return HAL_ERROR;
 800278c:	2001      	movs	r0, #1
 800278e:	e74e      	b.n	800262e <HAL_RCC_ClockConfig+0x2e>
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	08005e44 	.word	0x08005e44
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000008 	.word	0x20000008

080027a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80027a4:	4b01      	ldr	r3, [pc, #4]	; (80027ac <HAL_RCC_GetHCLKFreq+0x8>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027b2:	f7ff fff7 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80027be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	40d3      	lsrs	r3, r2
 80027cc:	4a02      	ldr	r2, [pc, #8]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
} 
 80027d0:	40d8      	lsrs	r0, r3
 80027d2:	bd08      	pop	{r3, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08005e54 	.word	0x08005e54

080027dc <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027dc:	230f      	movs	r3, #15
 80027de:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_GetClockConfig+0x34>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	f002 0203 	and.w	r2, r2, #3
 80027e8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80027f0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80027f8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002802:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_RCC_GetClockConfig+0x38>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	600b      	str	r3, [r1, #0]
}
 800280e:	4770      	bx	lr
 8002810:	40021000 	.word	0x40021000
 8002814:	40022000 	.word	0x40022000

08002818 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	b083      	sub	sp, #12
 800281c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800281e:	6803      	ldr	r3, [r0, #0]
 8002820:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002824:	d048      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b83      	ldr	r3, [pc, #524]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800282e:	f040 80b4 	bne.w	800299a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b80      	ldr	r3, [pc, #512]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800283a:	61da      	str	r2, [r3, #28]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002846:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b7b      	ldr	r3, [pc, #492]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002850:	f000 80a5 	beq.w	800299e <HAL_RCCEx_PeriphCLKConfig+0x186>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002854:	4b77      	ldr	r3, [pc, #476]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002858:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800285c:	d022      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800285e:	6862      	ldr	r2, [r4, #4]
 8002860:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002864:	429a      	cmp	r2, r3
 8002866:	d01d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002868:	4872      	ldr	r0, [pc, #456]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800286a:	6a01      	ldr	r1, [r0, #32]
 800286c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002874:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	4f6f      	ldr	r7, [pc, #444]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800287e:	443a      	add	r2, r7
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	f04f 0c01 	mov.w	ip, #1
 8002886:	f8c2 c000 	str.w	ip, [r2]
 800288a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	443b      	add	r3, r7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800289a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800289c:	f011 0f01 	tst.w	r1, #1
 80028a0:	f040 8092 	bne.w	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028a4:	4a63      	ldr	r2, [pc, #396]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80028a6:	6a13      	ldr	r3, [r2, #32]
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	6861      	ldr	r1, [r4, #4]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028b2:	2d00      	cmp	r5, #0
 80028b4:	f040 80b4 	bne.w	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f013 0f01 	tst.w	r3, #1
 80028be:	d006      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c0:	4a5c      	ldr	r2, [pc, #368]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80028c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028c4:	f023 0303 	bic.w	r3, r3, #3
 80028c8:	68a1      	ldr	r1, [r4, #8]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	f013 0f20 	tst.w	r3, #32
 80028d4:	d006      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d6:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80028d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028da:	f023 0310 	bic.w	r3, r3, #16
 80028de:	68e1      	ldr	r1, [r4, #12]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80028ea:	d006      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ec:	4a51      	ldr	r2, [pc, #324]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80028ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028f0:	f023 0320 	bic.w	r3, r3, #32
 80028f4:	6921      	ldr	r1, [r4, #16]
 80028f6:	430b      	orrs	r3, r1
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002900:	d006      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002902:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002904:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800290a:	6961      	ldr	r1, [r4, #20]
 800290c:	430b      	orrs	r3, r1
 800290e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002916:	d006      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002918:	4a46      	ldr	r2, [pc, #280]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800291a:	6853      	ldr	r3, [r2, #4]
 800291c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002920:	69e1      	ldr	r1, [r4, #28]
 8002922:	430b      	orrs	r3, r1
 8002924:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	f013 0f80 	tst.w	r3, #128	; 0x80
 800292c:	d006      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800292e:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002930:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002932:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002936:	69a1      	ldr	r1, [r4, #24]
 8002938:	430b      	orrs	r3, r1
 800293a:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002942:	d006      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002944:	4a3b      	ldr	r2, [pc, #236]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002946:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800294c:	6a21      	ldr	r1, [r4, #32]
 800294e:	430b      	orrs	r3, r1
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002958:	d006      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800295a:	4a36      	ldr	r2, [pc, #216]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800295c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800295e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002962:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002964:	430b      	orrs	r3, r1
 8002966:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800296e:	d006      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002970:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002972:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002978:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800297a:	430b      	orrs	r3, r1
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002984:	d053      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002986:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002988:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800298a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800298e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002990:	430b      	orrs	r3, r1
 8002992:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002994:	2000      	movs	r0, #0
}
 8002996:	b003      	add	sp, #12
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2500      	movs	r5, #0
 800299c:	e754      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299e:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80029a0:	6813      	ldr	r3, [r2, #0]
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029a8:	f7fe fa2e 	bl	8000e08 <HAL_GetTick>
 80029ac:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029b6:	f47f af4d 	bne.w	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe fa25 	bl	8000e08 <HAL_GetTick>
 80029be:	1b80      	subs	r0, r0, r6
 80029c0:	2864      	cmp	r0, #100	; 0x64
 80029c2:	d9f4      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 80029c4:	2003      	movs	r0, #3
 80029c6:	e7e6      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        tickstart = HAL_GetTick();
 80029c8:	f7fe fa1e 	bl	8000e08 <HAL_GetTick>
 80029cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	e015      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80029d2:	6a19      	ldr	r1, [r3, #32]
 80029d4:	2302      	movs	r3, #2
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	2201      	movs	r2, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	420b      	tst	r3, r1
 80029ea:	f47f af5b 	bne.w	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fa0b 	bl	8000e08 <HAL_GetTick>
 80029f2:	1b80      	subs	r0, r0, r6
 80029f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80029f8:	4298      	cmp	r0, r3
 80029fa:	d816      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x212>
 80029fc:	2302      	movs	r3, #2
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d0dd      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a14:	2302      	movs	r3, #2
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002a1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a1e:	e7d9      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	69d3      	ldr	r3, [r2, #28]
 8002a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a26:	61d3      	str	r3, [r2, #28]
 8002a28:	e746      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8002a2a:	2003      	movs	r0, #3
 8002a2c:	e7b3      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  return HAL_OK;
 8002a2e:	2000      	movs	r0, #0
 8002a30:	e7b1      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	10908100 	.word	0x10908100

08002a40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a44:	6802      	ldr	r2, [r0, #0]
 8002a46:	68d3      	ldr	r3, [r2, #12]
 8002a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a4c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002a4e:	f7fe f9db 	bl	8000e08 <HAL_GetTick>
 8002a52:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f013 0f20 	tst.w	r3, #32
 8002a5c:	d107      	bne.n	8002a6e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a5e:	f7fe f9d3 	bl	8000e08 <HAL_GetTick>
 8002a62:	1b40      	subs	r0, r0, r5
 8002a64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a68:	d9f4      	bls.n	8002a54 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	e000      	b.n	8002a70 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
}
 8002a70:	bd38      	pop	{r3, r4, r5, pc}

08002a72 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a72:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a74:	6803      	ldr	r3, [r0, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a7c:	d001      	beq.n	8002a82 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002a7e:	2000      	movs	r0, #0
}
 8002a80:	bd38      	pop	{r3, r4, r5, pc}
 8002a82:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002a8a:	f7fe f9bd 	bl	8000e08 <HAL_GetTick>
 8002a8e:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a98:	d107      	bne.n	8002aaa <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a9a:	f7fe f9b5 	bl	8000e08 <HAL_GetTick>
 8002a9e:	1b40      	subs	r0, r0, r5
 8002aa0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002aa4:	d9f4      	bls.n	8002a90 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	e7ea      	b.n	8002a80 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8002aaa:	2000      	movs	r0, #0
 8002aac:	e7e8      	b.n	8002a80 <RTC_EnterInitMode+0xe>

08002aae <HAL_RTC_Init>:
{
 8002aae:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d05c      	beq.n	8002b6e <HAL_RTC_Init+0xc0>
 8002ab4:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ab6:	7f43      	ldrb	r3, [r0, #29]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d040      	beq.n	8002b3e <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	22ca      	movs	r2, #202	; 0xca
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	2253      	movs	r2, #83	; 0x53
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff ffd0 	bl	8002a72 <RTC_EnterInitMode>
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d136      	bne.n	8002b46 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	6893      	ldr	r3, [r2, #8]
 8002adc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ae6:	6821      	ldr	r1, [r4, #0]
 8002ae8:	688a      	ldr	r2, [r1, #8]
 8002aea:	6863      	ldr	r3, [r4, #4]
 8002aec:	6920      	ldr	r0, [r4, #16]
 8002aee:	4303      	orrs	r3, r0
 8002af0:	6960      	ldr	r0, [r4, #20]
 8002af2:	4303      	orrs	r3, r0
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	68e2      	ldr	r2, [r4, #12]
 8002afc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002afe:	6822      	ldr	r2, [r4, #0]
 8002b00:	6913      	ldr	r3, [r2, #16]
 8002b02:	68a1      	ldr	r1, [r4, #8]
 8002b04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002b08:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	68d3      	ldr	r3, [r2, #12]
 8002b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b12:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f013 0f20 	tst.w	r3, #32
 8002b1c:	d01b      	beq.n	8002b56 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002b1e:	6822      	ldr	r2, [r4, #0]
 8002b20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b2c:	69a1      	ldr	r1, [r4, #24]
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	22ff      	movs	r2, #255	; 0xff
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8002b3c:	e009      	b.n	8002b52 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8002b3e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002b40:	f7fd feb8 	bl	80008b4 <HAL_RTC_MspInit>
 8002b44:	e7ba      	b.n	8002abc <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002b50:	2501      	movs	r5, #1
}
 8002b52:	4628      	mov	r0, r5
 8002b54:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff ff72 	bl	8002a40 <HAL_RTC_WaitForSynchro>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d0de      	beq.n	8002b1e <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b66:	2304      	movs	r3, #4
 8002b68:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002b6a:	2501      	movs	r5, #1
 8002b6c:	e7f1      	b.n	8002b52 <HAL_RTC_Init+0xa4>
    return HAL_ERROR;
 8002b6e:	2501      	movs	r5, #1
 8002b70:	e7ef      	b.n	8002b52 <HAL_RTC_Init+0xa4>

08002b72 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002b72:	0903      	lsrs	r3, r0, #4
 8002b74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b78:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002b7a:	f000 000f 	and.w	r0, r0, #15
 8002b7e:	4410      	add	r0, r2
}
 8002b80:	b2c0      	uxtb	r0, r0
 8002b82:	4770      	bx	lr

08002b84 <HAL_RTC_GetTime>:
{
 8002b84:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b86:	6803      	ldr	r3, [r0, #0]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b8c:	6803      	ldr	r3, [r0, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b94:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002b96:	6803      	ldr	r3, [r0, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002ba2:	0c1d      	lsrs	r5, r3, #16
 8002ba4:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002ba8:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002baa:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002bae:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002bb0:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002bb4:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002bb6:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002bba:	70cd      	strb	r5, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8002bbc:	b95a      	cbnz	r2, 8002bd6 <HAL_RTC_GetTime+0x52>
 8002bbe:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bc0:	f7ff ffd7 	bl	8002b72 <RTC_Bcd2ToByte>
 8002bc4:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	f7ff ffd3 	bl	8002b72 <RTC_Bcd2ToByte>
 8002bcc:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff ffcf 	bl	8002b72 <RTC_Bcd2ToByte>
 8002bd4:	70a8      	strb	r0, [r5, #2]
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}

08002bda <HAL_RTC_GetDate>:
{
 8002bda:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002bdc:	6803      	ldr	r3, [r0, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002be4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002be8:	0c18      	lsrs	r0, r3, #16
 8002bea:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002bec:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002bf0:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002bf2:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002bf6:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002bf8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002bfc:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8002bfe:	b95a      	cbnz	r2, 8002c18 <HAL_RTC_GetDate+0x3e>
 8002c00:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002c02:	f7ff ffb6 	bl	8002b72 <RTC_Bcd2ToByte>
 8002c06:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002c08:	4630      	mov	r0, r6
 8002c0a:	f7ff ffb2 	bl	8002b72 <RTC_Bcd2ToByte>
 8002c0e:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7ff ffae 	bl	8002b72 <RTC_Bcd2ToByte>
 8002c16:	70a0      	strb	r0, [r4, #2]
}
 8002c18:	2000      	movs	r0, #0
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}

08002c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	4605      	mov	r5, r0
 8002c20:	460f      	mov	r7, r1
 8002c22:	4616      	mov	r6, r2
 8002c24:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	ea37 0303 	bics.w	r3, r7, r3
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	42b3      	cmp	r3, r6
 8002c36:	d037      	beq.n	8002ca8 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c38:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002c3c:	d0f3      	beq.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c3e:	f7fe f8e3 	bl	8000e08 <HAL_GetTick>
 8002c42:	9b06      	ldr	r3, [sp, #24]
 8002c44:	1ac0      	subs	r0, r0, r3
 8002c46:	42a0      	cmp	r0, r4
 8002c48:	d201      	bcs.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0x32>
 8002c4a:	2c00      	cmp	r4, #0
 8002c4c:	d1eb      	bne.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c4e:	682a      	ldr	r2, [r5, #0]
 8002c50:	6853      	ldr	r3, [r2, #4]
 8002c52:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002c56:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c58:	686b      	ldr	r3, [r5, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5e:	d00b      	beq.n	8002c78 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c66:	d014      	beq.n	8002c92 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c74:	2003      	movs	r0, #3
 8002c76:	e018      	b.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c78:	68ab      	ldr	r3, [r5, #8]
 8002c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7e:	d002      	beq.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c84:	d1ec      	bne.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8002c86:	682a      	ldr	r2, [r5, #0]
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e7e6      	b.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8002c92:	682a      	ldr	r2, [r5, #0]
 8002c94:	6813      	ldr	r3, [r2, #0]
 8002c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	682a      	ldr	r2, [r5, #0]
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e7df      	b.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8002ca8:	2000      	movs	r0, #0
}
 8002caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	4607      	mov	r7, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	4615      	mov	r5, r2
 8002cb4:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8002cb6:	e002      	b.n	8002cbe <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cb8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002cbc:	d10b      	bne.n	8002cd6 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	6893      	ldr	r3, [r2, #8]
 8002cc2:	4023      	ands	r3, r4
 8002cc4:	42ab      	cmp	r3, r5
 8002cc6:	d03b      	beq.n	8002d40 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cc8:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002ccc:	d1f4      	bne.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0xc>
 8002cce:	2d00      	cmp	r5, #0
 8002cd0:	d1f2      	bne.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002cd2:	7b13      	ldrb	r3, [r2, #12]
 8002cd4:	e7f0      	b.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cd6:	f7fe f897 	bl	8000e08 <HAL_GetTick>
 8002cda:	9b06      	ldr	r3, [sp, #24]
 8002cdc:	1ac0      	subs	r0, r0, r3
 8002cde:	42b0      	cmp	r0, r6
 8002ce0:	d201      	bcs.n	8002ce6 <SPI_WaitFifoStateUntilTimeout+0x3a>
 8002ce2:	2e00      	cmp	r6, #0
 8002ce4:	d1eb      	bne.n	8002cbe <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	6853      	ldr	r3, [r2, #4]
 8002cea:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002cee:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf6:	d00b      	beq.n	8002d10 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d014      	beq.n	8002d2a <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	e018      	b.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d16:	d002      	beq.n	8002d1e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1c:	d1ec      	bne.n	8002cf8 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	6813      	ldr	r3, [r2, #0]
 8002d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e7e6      	b.n	8002cf8 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e7df      	b.n	8002d00 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8002d40:	2000      	movs	r0, #0
}
 8002d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	4604      	mov	r4, r0
 8002d4a:	460d      	mov	r5, r1
 8002d4c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d4e:	9200      	str	r2, [sp, #0]
 8002d50:	460b      	mov	r3, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d58:	f7ff ffa8 	bl	8002cac <SPI_WaitFifoStateUntilTimeout>
 8002d5c:	b9b8      	cbnz	r0, 8002d8e <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5e:	9600      	str	r6, [sp, #0]
 8002d60:	462b      	mov	r3, r5
 8002d62:	2200      	movs	r2, #0
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff ff58 	bl	8002c1c <SPI_WaitFlagStateUntilTimeout>
 8002d6c:	b9b8      	cbnz	r0, 8002d9e <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d6e:	9600      	str	r6, [sp, #0]
 8002d70:	462b      	mov	r3, r5
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff ff97 	bl	8002cac <SPI_WaitFifoStateUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	b150      	cbz	r0, 8002d98 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e004      	b.n	8002d98 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002da0:	f043 0320 	orr.w	r3, r3, #32
 8002da4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e7f6      	b.n	8002d98 <SPI_EndRxTxTransaction+0x54>

08002daa <HAL_SPI_Init>:
  if (hspi == NULL)
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d058      	beq.n	8002e60 <HAL_SPI_Init+0xb6>
{
 8002dae:	b510      	push	{r4, lr}
 8002db0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002db6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d045      	beq.n	8002e4a <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dcc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dd4:	d93e      	bls.n	8002e54 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002dd6:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dd8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ddc:	d004      	beq.n	8002de8 <HAL_SPI_Init+0x3e>
 8002dde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002de2:	d001      	beq.n	8002de8 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de4:	2100      	movs	r1, #0
 8002de6:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002de8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002dea:	b921      	cbnz	r1, 8002df6 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002df0:	d933      	bls.n	8002e5a <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002df2:	2302      	movs	r3, #2
 8002df4:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	68a1      	ldr	r1, [r4, #8]
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	6921      	ldr	r1, [r4, #16]
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6961      	ldr	r1, [r4, #20]
 8002e02:	430b      	orrs	r3, r1
 8002e04:	69a1      	ldr	r1, [r4, #24]
 8002e06:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	69e1      	ldr	r1, [r4, #28]
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6a21      	ldr	r1, [r4, #32]
 8002e12:	430b      	orrs	r3, r1
 8002e14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e16:	6821      	ldr	r1, [r4, #0]
 8002e18:	4303      	orrs	r3, r0
 8002e1a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002e1c:	8b63      	ldrh	r3, [r4, #26]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	68e1      	ldr	r1, [r4, #12]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6821      	ldr	r1, [r4, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	69d3      	ldr	r3, [r2, #28]
 8002e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e3c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3e:	2000      	movs	r0, #0
 8002e40:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002e48:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002e4a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002e4e:	f7fd fd6d 	bl	800092c <HAL_SPI_MspInit>
 8002e52:	e7b4      	b.n	8002dbe <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e58:	e7be      	b.n	8002dd8 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	6323      	str	r3, [r4, #48]	; 0x30
 8002e5e:	e7ca      	b.n	8002df6 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8002e60:	2001      	movs	r0, #1
}
 8002e62:	4770      	bx	lr

08002e64 <HAL_SPI_Transmit>:
{
 8002e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e68:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8002e6a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8002e6e:	2c01      	cmp	r4, #1
 8002e70:	f000 80e4 	beq.w	800303c <HAL_SPI_Transmit+0x1d8>
 8002e74:	461e      	mov	r6, r3
 8002e76:	4615      	mov	r5, r2
 8002e78:	4688      	mov	r8, r1
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002e82:	f7fd ffc1 	bl	8000e08 <HAL_GetTick>
 8002e86:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e88:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	2a01      	cmp	r2, #1
 8002e90:	d009      	beq.n	8002ea6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8002e92:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002ea0:	b002      	add	sp, #8
 8002ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8002ea6:	f1b8 0f00 	cmp.w	r8, #0
 8002eaa:	f000 80b9 	beq.w	8003020 <HAL_SPI_Transmit+0x1bc>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	f000 80b8 	beq.w	8003024 <HAL_SPI_Transmit+0x1c0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ebe:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ec2:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ec4:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ec6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ec8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002ecc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002ed0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ed2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed4:	68a3      	ldr	r3, [r4, #8]
 8002ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eda:	d01c      	beq.n	8002f16 <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002ee4:	d103      	bne.n	8002eee <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eec:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eee:	68e3      	ldr	r3, [r4, #12]
 8002ef0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ef4:	d933      	bls.n	8002f5e <HAL_SPI_Transmit+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef6:	6863      	ldr	r3, [r4, #4]
 8002ef8:	b10b      	cbz	r3, 8002efe <HAL_SPI_Transmit+0x9a>
 8002efa:	2d01      	cmp	r5, #1
 8002efc:	d11b      	bne.n	8002f36 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002efe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	8812      	ldrh	r2, [r2, #0]
 8002f04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f08:	3302      	adds	r3, #2
 8002f0a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002f0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f14:	e00f      	b.n	8002f36 <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	6813      	ldr	r3, [r2, #0]
 8002f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e7dc      	b.n	8002edc <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f22:	f7fd ff71 	bl	8000e08 <HAL_GetTick>
 8002f26:	1bc0      	subs	r0, r0, r7
 8002f28:	42b0      	cmp	r0, r6
 8002f2a:	d302      	bcc.n	8002f32 <HAL_SPI_Transmit+0xce>
 8002f2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002f30:	d17a      	bne.n	8003028 <HAL_SPI_Transmit+0x1c4>
 8002f32:	2e00      	cmp	r6, #0
 8002f34:	d07a      	beq.n	800302c <HAL_SPI_Transmit+0x1c8>
    while (hspi->TxXferCount > 0U)
 8002f36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d05b      	beq.n	8002ff6 <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	f012 0f02 	tst.w	r2, #2
 8002f46:	d0ec      	beq.n	8002f22 <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f4a:	8812      	ldrh	r2, [r2, #0]
 8002f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f50:	3302      	adds	r3, #2
 8002f52:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002f54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f5c:	e7eb      	b.n	8002f36 <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5e:	6863      	ldr	r3, [r4, #4]
 8002f60:	b10b      	cbz	r3, 8002f66 <HAL_SPI_Transmit+0x102>
 8002f62:	2d01      	cmp	r5, #1
 8002f64:	d130      	bne.n	8002fc8 <HAL_SPI_Transmit+0x164>
      if (hspi->TxXferCount > 1U)
 8002f66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d90b      	bls.n	8002f86 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	8812      	ldrh	r2, [r2, #0]
 8002f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f78:	3302      	adds	r3, #2
 8002f7a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f7e:	3b02      	subs	r3, #2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f84:	e020      	b.n	8002fc8 <HAL_SPI_Transmit+0x164>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8002f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f90:	3301      	adds	r3, #1
 8002f92:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002f94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f9c:	e014      	b.n	8002fc8 <HAL_SPI_Transmit+0x164>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002faa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002fb2:	e009      	b.n	8002fc8 <HAL_SPI_Transmit+0x164>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb4:	f7fd ff28 	bl	8000e08 <HAL_GetTick>
 8002fb8:	1bc0      	subs	r0, r0, r7
 8002fba:	42b0      	cmp	r0, r6
 8002fbc:	d302      	bcc.n	8002fc4 <HAL_SPI_Transmit+0x160>
 8002fbe:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002fc2:	d135      	bne.n	8003030 <HAL_SPI_Transmit+0x1cc>
 8002fc4:	2e00      	cmp	r6, #0
 8002fc6:	d035      	beq.n	8003034 <HAL_SPI_Transmit+0x1d0>
    while (hspi->TxXferCount > 0U)
 8002fc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	b19b      	cbz	r3, 8002ff6 <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	6893      	ldr	r3, [r2, #8]
 8002fd2:	f013 0f02 	tst.w	r3, #2
 8002fd6:	d0ed      	beq.n	8002fb4 <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 8002fd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d9de      	bls.n	8002f9e <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe8:	3302      	adds	r3, #2
 8002fea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002fee:	3b02      	subs	r3, #2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002ff4:	e7e8      	b.n	8002fc8 <HAL_SPI_Transmit+0x164>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff6:	463a      	mov	r2, r7
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f7ff fea2 	bl	8002d44 <SPI_EndRxTxTransaction>
 8003000:	b108      	cbz	r0, 8003006 <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003002:	2320      	movs	r3, #32
 8003004:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	b933      	cbnz	r3, 8003018 <HAL_SPI_Transmit+0x1b4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	9201      	str	r2, [sp, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003018:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800301a:	b96b      	cbnz	r3, 8003038 <HAL_SPI_Transmit+0x1d4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800301c:	2000      	movs	r0, #0
 800301e:	e739      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003020:	2001      	movs	r0, #1
 8003022:	e737      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
 8003024:	2001      	movs	r0, #1
 8003026:	e735      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003028:	2003      	movs	r0, #3
 800302a:	e733      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
 800302c:	2003      	movs	r0, #3
 800302e:	e731      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003030:	2003      	movs	r0, #3
 8003032:	e72f      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
 8003034:	2003      	movs	r0, #3
 8003036:	e72d      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003038:	2001      	movs	r0, #1
 800303a:	e72b      	b.n	8002e94 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800303c:	2002      	movs	r0, #2
 800303e:	e72f      	b.n	8002ea0 <HAL_SPI_Transmit+0x3c>

08003040 <HAL_SPI_ErrorCallback>:
}
 8003040:	4770      	bx	lr
	...

08003044 <HAL_SPI_IRQHandler>:
{
 8003044:	b530      	push	{r4, r5, lr}
 8003046:	b085      	sub	sp, #20
 8003048:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800304a:	6802      	ldr	r2, [r0, #0]
 800304c:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800304e:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003050:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8003054:	b949      	cbnz	r1, 800306a <HAL_SPI_IRQHandler+0x26>
 8003056:	f013 0f01 	tst.w	r3, #1
 800305a:	d006      	beq.n	800306a <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800305c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003060:	d003      	beq.n	800306a <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8003062:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003064:	4620      	mov	r0, r4
 8003066:	4798      	blx	r3
    return;
 8003068:	e008      	b.n	800307c <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800306a:	f013 0f02 	tst.w	r3, #2
 800306e:	d007      	beq.n	8003080 <HAL_SPI_IRQHandler+0x3c>
 8003070:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003074:	d004      	beq.n	8003080 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003076:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003078:	4620      	mov	r0, r4
 800307a:	4798      	blx	r3
}
 800307c:	b005      	add	sp, #20
 800307e:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003080:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8003084:	b91d      	cbnz	r5, 800308e <HAL_SPI_IRQHandler+0x4a>
 8003086:	b911      	cbnz	r1, 800308e <HAL_SPI_IRQHandler+0x4a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003088:	f413 7f80 	tst.w	r3, #256	; 0x100
 800308c:	d0f6      	beq.n	800307c <HAL_SPI_IRQHandler+0x38>
 800308e:	f010 0f20 	tst.w	r0, #32
 8003092:	d0f3      	beq.n	800307c <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003094:	b179      	cbz	r1, 80030b6 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003096:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 800309a:	b2c9      	uxtb	r1, r1
 800309c:	2903      	cmp	r1, #3
 800309e:	d053      	beq.n	8003148 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80030a0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80030a2:	f041 0104 	orr.w	r1, r1, #4
 80030a6:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a8:	2100      	movs	r1, #0
 80030aa:	9100      	str	r1, [sp, #0]
 80030ac:	68d1      	ldr	r1, [r2, #12]
 80030ae:	9100      	str	r1, [sp, #0]
 80030b0:	6891      	ldr	r1, [r2, #8]
 80030b2:	9100      	str	r1, [sp, #0]
 80030b4:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80030b6:	b165      	cbz	r5, 80030d2 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80030b8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80030ba:	f041 0101 	orr.w	r1, r1, #1
 80030be:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030c0:	2100      	movs	r1, #0
 80030c2:	9102      	str	r1, [sp, #8]
 80030c4:	6891      	ldr	r1, [r2, #8]
 80030c6:	9102      	str	r1, [sp, #8]
 80030c8:	6811      	ldr	r1, [r2, #0]
 80030ca:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80030ce:	6011      	str	r1, [r2, #0]
 80030d0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80030d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030d6:	d009      	beq.n	80030ec <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80030d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80030e0:	2300      	movs	r3, #0
 80030e2:	9303      	str	r3, [sp, #12]
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	9303      	str	r3, [sp, #12]
 80030ea:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0c4      	beq.n	800307c <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	6853      	ldr	r3, [r2, #4]
 80030f6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80030fa:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003102:	f010 0f03 	tst.w	r0, #3
 8003106:	d027      	beq.n	8003158 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003108:	6822      	ldr	r2, [r4, #0]
 800310a:	6853      	ldr	r3, [r2, #4]
 800310c:	f023 0303 	bic.w	r3, r3, #3
 8003110:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003114:	b14b      	cbz	r3, 800312a <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <HAL_SPI_IRQHandler+0x11c>)
 8003118:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800311a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800311c:	f7fe fd06 	bl	8001b2c <HAL_DMA_Abort_IT>
 8003120:	b118      	cbz	r0, 800312a <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003122:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003128:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800312a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0a5      	beq.n	800307c <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <HAL_SPI_IRQHandler+0x11c>)
 8003132:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003134:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003136:	f7fe fcf9 	bl	8001b2c <HAL_DMA_Abort_IT>
 800313a:	2800      	cmp	r0, #0
 800313c:	d09e      	beq.n	800307c <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800313e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003144:	6623      	str	r3, [r4, #96]	; 0x60
 8003146:	e799      	b.n	800307c <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003148:	2300      	movs	r3, #0
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	68d3      	ldr	r3, [r2, #12]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	6893      	ldr	r3, [r2, #8]
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	9b01      	ldr	r3, [sp, #4]
        return;
 8003156:	e791      	b.n	800307c <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8003158:	4620      	mov	r0, r4
 800315a:	f7ff ff71 	bl	8003040 <HAL_SPI_ErrorCallback>
 800315e:	e78d      	b.n	800307c <HAL_SPI_IRQHandler+0x38>
 8003160:	08003165 	.word	0x08003165

08003164 <SPI_DMAAbortOnError>:
{
 8003164:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003166:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800316e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003170:	f7ff ff66 	bl	8003040 <HAL_SPI_ErrorCallback>
}
 8003174:	bd08      	pop	{r3, pc}
	...

08003178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003178:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317a:	6a03      	ldr	r3, [r0, #32]
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003184:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003186:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003188:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800318c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003190:	680d      	ldr	r5, [r1, #0]
 8003192:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003194:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003198:	688d      	ldr	r5, [r1, #8]
 800319a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800319c:	4d18      	ldr	r5, [pc, #96]	; (8003200 <TIM_OC1_SetConfig+0x88>)
 800319e:	42a8      	cmp	r0, r5
 80031a0:	d00b      	beq.n	80031ba <TIM_OC1_SetConfig+0x42>
 80031a2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80031a6:	42a8      	cmp	r0, r5
 80031a8:	d007      	beq.n	80031ba <TIM_OC1_SetConfig+0x42>
 80031aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031ae:	42a8      	cmp	r0, r5
 80031b0:	d003      	beq.n	80031ba <TIM_OC1_SetConfig+0x42>
 80031b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031b6:	42a8      	cmp	r0, r5
 80031b8:	d105      	bne.n	80031c6 <TIM_OC1_SetConfig+0x4e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ba:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031be:	68cd      	ldr	r5, [r1, #12]
 80031c0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031c2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c6:	4d0e      	ldr	r5, [pc, #56]	; (8003200 <TIM_OC1_SetConfig+0x88>)
 80031c8:	42a8      	cmp	r0, r5
 80031ca:	d00b      	beq.n	80031e4 <TIM_OC1_SetConfig+0x6c>
 80031cc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80031d0:	42a8      	cmp	r0, r5
 80031d2:	d007      	beq.n	80031e4 <TIM_OC1_SetConfig+0x6c>
 80031d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031d8:	42a8      	cmp	r0, r5
 80031da:	d003      	beq.n	80031e4 <TIM_OC1_SetConfig+0x6c>
 80031dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031e0:	42a8      	cmp	r0, r5
 80031e2:	d105      	bne.n	80031f0 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031e4:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031e8:	694c      	ldr	r4, [r1, #20]
 80031ea:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ec:	698d      	ldr	r5, [r1, #24]
 80031ee:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031f2:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031f4:	684a      	ldr	r2, [r1, #4]
 80031f6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f8:	6203      	str	r3, [r0, #32]
}
 80031fa:	bc30      	pop	{r4, r5}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40012c00 	.word	0x40012c00

08003204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003206:	6a03      	ldr	r3, [r0, #32]
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003212:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003214:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003218:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800321c:	680d      	ldr	r5, [r1, #0]
 800321e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003224:	688d      	ldr	r5, [r1, #8]
 8003226:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800322a:	4d14      	ldr	r5, [pc, #80]	; (800327c <TIM_OC3_SetConfig+0x78>)
 800322c:	42a8      	cmp	r0, r5
 800322e:	d01d      	beq.n	800326c <TIM_OC3_SetConfig+0x68>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003230:	4d12      	ldr	r5, [pc, #72]	; (800327c <TIM_OC3_SetConfig+0x78>)
 8003232:	42a8      	cmp	r0, r5
 8003234:	d00b      	beq.n	800324e <TIM_OC3_SetConfig+0x4a>
 8003236:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800323a:	42a8      	cmp	r0, r5
 800323c:	d007      	beq.n	800324e <TIM_OC3_SetConfig+0x4a>
 800323e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003242:	42a8      	cmp	r0, r5
 8003244:	d003      	beq.n	800324e <TIM_OC3_SetConfig+0x4a>
 8003246:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800324a:	42a8      	cmp	r0, r5
 800324c:	d107      	bne.n	800325e <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003252:	694d      	ldr	r5, [r1, #20]
 8003254:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003258:	698d      	ldr	r5, [r1, #24]
 800325a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003260:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003262:	684a      	ldr	r2, [r1, #4]
 8003264:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	6203      	str	r3, [r0, #32]
}
 8003268:	bc30      	pop	{r4, r5}
 800326a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800326c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003270:	68cd      	ldr	r5, [r1, #12]
 8003272:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327a:	e7d9      	b.n	8003230 <TIM_OC3_SetConfig+0x2c>
 800327c:	40012c00 	.word	0x40012c00

08003280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003282:	6a03      	ldr	r3, [r0, #32]
 8003284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003288:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800328e:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003294:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	680d      	ldr	r5, [r1, #0]
 800329a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800329e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a2:	688d      	ldr	r5, [r1, #8]
 80032a4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a8:	4d0d      	ldr	r5, [pc, #52]	; (80032e0 <TIM_OC4_SetConfig+0x60>)
 80032aa:	42a8      	cmp	r0, r5
 80032ac:	d00b      	beq.n	80032c6 <TIM_OC4_SetConfig+0x46>
 80032ae:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80032b2:	42a8      	cmp	r0, r5
 80032b4:	d007      	beq.n	80032c6 <TIM_OC4_SetConfig+0x46>
 80032b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032ba:	42a8      	cmp	r0, r5
 80032bc:	d003      	beq.n	80032c6 <TIM_OC4_SetConfig+0x46>
 80032be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032c2:	42a8      	cmp	r0, r5
 80032c4:	d104      	bne.n	80032d0 <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032c6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032ca:	694d      	ldr	r5, [r1, #20]
 80032cc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d4:	684b      	ldr	r3, [r1, #4]
 80032d6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d8:	6202      	str	r2, [r0, #32]
}
 80032da:	bc30      	pop	{r4, r5}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40012c00 	.word	0x40012c00

080032e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032e6:	6a03      	ldr	r3, [r0, #32]
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032f2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032fc:	680d      	ldr	r5, [r1, #0]
 80032fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003304:	688d      	ldr	r5, [r1, #8]
 8003306:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	4d0d      	ldr	r5, [pc, #52]	; (8003340 <TIM_OC5_SetConfig+0x5c>)
 800330c:	42a8      	cmp	r0, r5
 800330e:	d00b      	beq.n	8003328 <TIM_OC5_SetConfig+0x44>
 8003310:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003314:	42a8      	cmp	r0, r5
 8003316:	d007      	beq.n	8003328 <TIM_OC5_SetConfig+0x44>
 8003318:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800331c:	42a8      	cmp	r0, r5
 800331e:	d003      	beq.n	8003328 <TIM_OC5_SetConfig+0x44>
 8003320:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003324:	42a8      	cmp	r0, r5
 8003326:	d104      	bne.n	8003332 <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003328:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800332c:	694d      	ldr	r5, [r1, #20]
 800332e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003334:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003336:	684a      	ldr	r2, [r1, #4]
 8003338:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333a:	6203      	str	r3, [r0, #32]
}
 800333c:	bc30      	pop	{r4, r5}
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00

08003344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003346:	6a03      	ldr	r3, [r0, #32]
 8003348:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800334c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003352:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800335c:	680d      	ldr	r5, [r1, #0]
 800335e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003362:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003366:	688d      	ldr	r5, [r1, #8]
 8003368:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336c:	4d0d      	ldr	r5, [pc, #52]	; (80033a4 <TIM_OC6_SetConfig+0x60>)
 800336e:	42a8      	cmp	r0, r5
 8003370:	d00b      	beq.n	800338a <TIM_OC6_SetConfig+0x46>
 8003372:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003376:	42a8      	cmp	r0, r5
 8003378:	d007      	beq.n	800338a <TIM_OC6_SetConfig+0x46>
 800337a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800337e:	42a8      	cmp	r0, r5
 8003380:	d003      	beq.n	800338a <TIM_OC6_SetConfig+0x46>
 8003382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003386:	42a8      	cmp	r0, r5
 8003388:	d104      	bne.n	8003394 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800338a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800338e:	694d      	ldr	r5, [r1, #20]
 8003390:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003394:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003396:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003398:	684b      	ldr	r3, [r1, #4]
 800339a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339c:	6202      	str	r2, [r0, #32]
}
 800339e:	bc30      	pop	{r4, r5}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033aa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ac:	6a04      	ldr	r4, [r0, #32]
 80033ae:	f024 0401 	bic.w	r4, r4, #1
 80033b2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ba:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033be:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80033c2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80033c6:	6203      	str	r3, [r0, #32]
}
 80033c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ce:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d0:	6a03      	ldr	r3, [r0, #32]
 80033d2:	f023 0310 	bic.w	r3, r3, #16
 80033d6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80033da:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033dc:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e0:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80033e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80033ee:	6203      	str	r3, [r0, #32]
}
 80033f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033fc:	4319      	orrs	r1, r3
 80033fe:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003402:	6081      	str	r1, [r0, #8]
}
 8003404:	4770      	bx	lr
	...

08003408 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003408:	6802      	ldr	r2, [r0, #0]
 800340a:	68d3      	ldr	r3, [r2, #12]
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003412:	6802      	ldr	r2, [r0, #0]
 8003414:	6891      	ldr	r1, [r2, #8]
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_TIM_Base_Start_IT+0x28>)
 8003418:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	2b06      	cmp	r3, #6
 800341c:	d006      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x24>
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003422:	d003      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	2000      	movs	r0, #0
 800342e:	4770      	bx	lr
 8003430:	00010007 	.word	0x00010007

08003434 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003434:	6802      	ldr	r2, [r0, #0]
 8003436:	68d3      	ldr	r3, [r2, #12]
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800343e:	6803      	ldr	r3, [r0, #0]
 8003440:	6a19      	ldr	r1, [r3, #32]
 8003442:	f241 1211 	movw	r2, #4369	; 0x1111
 8003446:	4211      	tst	r1, r2
 8003448:	d108      	bne.n	800345c <HAL_TIM_Base_Stop_IT+0x28>
 800344a:	6a19      	ldr	r1, [r3, #32]
 800344c:	f240 4244 	movw	r2, #1092	; 0x444
 8003450:	4211      	tst	r1, r2
 8003452:	d103      	bne.n	800345c <HAL_TIM_Base_Stop_IT+0x28>
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	2000      	movs	r0, #0
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_OC_MspInit>:
}
 8003460:	4770      	bx	lr

08003462 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003462:	4770      	bx	lr

08003464 <HAL_TIM_IC_CaptureCallback>:
}
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_TriggerCallback>:
}
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_IRQHandler>:
{
 800346a:	b510      	push	{r4, lr}
 800346c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800346e:	6803      	ldr	r3, [r0, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	f012 0f02 	tst.w	r2, #2
 8003476:	d011      	beq.n	800349c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	f012 0f02 	tst.w	r2, #2
 800347e:	d00d      	beq.n	800349c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003480:	f06f 0202 	mvn.w	r2, #2
 8003484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003486:	2301      	movs	r3, #1
 8003488:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800348a:	6803      	ldr	r3, [r0, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f013 0f03 	tst.w	r3, #3
 8003492:	d079      	beq.n	8003588 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003494:	f7ff ffe6 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003498:	2300      	movs	r3, #0
 800349a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	f012 0f04 	tst.w	r2, #4
 80034a4:	d012      	beq.n	80034cc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	f012 0f04 	tst.w	r2, #4
 80034ac:	d00e      	beq.n	80034cc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ae:	f06f 0204 	mvn.w	r2, #4
 80034b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b4:	2302      	movs	r3, #2
 80034b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80034c0:	d068      	beq.n	8003594 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	4620      	mov	r0, r4
 80034c4:	f7ff ffce 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c8:	2300      	movs	r3, #0
 80034ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	f012 0f08 	tst.w	r2, #8
 80034d4:	d012      	beq.n	80034fc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	f012 0f08 	tst.w	r2, #8
 80034dc:	d00e      	beq.n	80034fc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034de:	f06f 0208 	mvn.w	r2, #8
 80034e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e4:	2304      	movs	r3, #4
 80034e6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f013 0f03 	tst.w	r3, #3
 80034f0:	d057      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff ffb6 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f8:	2300      	movs	r3, #0
 80034fa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	f012 0f10 	tst.w	r2, #16
 8003504:	d012      	beq.n	800352c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	f012 0f10 	tst.w	r2, #16
 800350c:	d00e      	beq.n	800352c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800350e:	f06f 0210 	mvn.w	r2, #16
 8003512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003514:	2308      	movs	r3, #8
 8003516:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003520:	d046      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	4620      	mov	r0, r4
 8003524:	f7ff ff9e 	bl	8003464 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003528:	2300      	movs	r3, #0
 800352a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	f012 0f01 	tst.w	r2, #1
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	f012 0f01 	tst.w	r2, #1
 800353c:	d13f      	bne.n	80035be <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003546:	d003      	beq.n	8003550 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800354e:	d13d      	bne.n	80035cc <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003560:	d13b      	bne.n	80035da <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	f012 0f40 	tst.w	r2, #64	; 0x40
 800356a:	d003      	beq.n	8003574 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003572:	d139      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	f012 0f20 	tst.w	r2, #32
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	f012 0f20 	tst.w	r2, #32
 8003584:	d137      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x18c>
}
 8003586:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003588:	f7ff ff6b 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	4620      	mov	r0, r4
 800358e:	f7ff ff6a 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
 8003592:	e781      	b.n	8003498 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff ff64 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359a:	4620      	mov	r0, r4
 800359c:	f7ff ff63 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
 80035a0:	e792      	b.n	80034c8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	4620      	mov	r0, r4
 80035a4:	f7ff ff5d 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	4620      	mov	r0, r4
 80035aa:	f7ff ff5c 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
 80035ae:	e7a3      	b.n	80034f8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff ff56 	bl	8003462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff ff55 	bl	8003466 <HAL_TIM_PWM_PulseFinishedCallback>
 80035bc:	e7b4      	b.n	8003528 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035be:	f06f 0201 	mvn.w	r2, #1
 80035c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80035c4:	4620      	mov	r0, r4
 80035c6:	f7fd f881 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
 80035ca:	e7b8      	b.n	800353e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80035d2:	4620      	mov	r0, r4
 80035d4:	f000 f9b7 	bl	8003946 <HAL_TIMEx_BreakCallback>
 80035d8:	e7ba      	b.n	8003550 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 f9b1 	bl	8003948 <HAL_TIMEx_Break2Callback>
 80035e6:	e7bc      	b.n	8003562 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7ff ff3a 	bl	8003468 <HAL_TIM_TriggerCallback>
 80035f4:	e7be      	b.n	8003574 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f6:	f06f 0220 	mvn.w	r2, #32
 80035fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80035fc:	4620      	mov	r0, r4
 80035fe:	f000 f9a1 	bl	8003944 <HAL_TIMEx_CommutCallback>
}
 8003602:	e7c0      	b.n	8003586 <HAL_TIM_IRQHandler+0x11c>

08003604 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003604:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <TIM_Base_SetConfig+0x7c>)
 8003608:	4290      	cmp	r0, r2
 800360a:	d002      	beq.n	8003612 <TIM_Base_SetConfig+0xe>
 800360c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003610:	d103      	bne.n	800361a <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003616:	684a      	ldr	r2, [r1, #4]
 8003618:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <TIM_Base_SetConfig+0x7c>)
 800361c:	4290      	cmp	r0, r2
 800361e:	d00e      	beq.n	800363e <TIM_Base_SetConfig+0x3a>
 8003620:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0x3a>
 8003626:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800362a:	4290      	cmp	r0, r2
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0x3a>
 800362e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003632:	4290      	cmp	r0, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0x3a>
 8003636:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800363a:	4290      	cmp	r0, r2
 800363c:	d103      	bne.n	8003646 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	68ca      	ldr	r2, [r1, #12]
 8003644:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364a:	694a      	ldr	r2, [r1, #20]
 800364c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800364e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003650:	688b      	ldr	r3, [r1, #8]
 8003652:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003654:	680b      	ldr	r3, [r1, #0]
 8003656:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <TIM_Base_SetConfig+0x7c>)
 800365a:	4298      	cmp	r0, r3
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0x72>
 800365e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003662:	4298      	cmp	r0, r3
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0x72>
 8003666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800366a:	4298      	cmp	r0, r3
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0x72>
 800366e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003672:	4298      	cmp	r0, r3
 8003674:	d101      	bne.n	800367a <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8003676:	690b      	ldr	r3, [r1, #16]
 8003678:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800367a:	2301      	movs	r3, #1
 800367c:	6143      	str	r3, [r0, #20]
}
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00

08003684 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003684:	b1a8      	cbz	r0, 80036b2 <HAL_TIM_Base_Init+0x2e>
{
 8003686:	b510      	push	{r4, lr}
 8003688:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800368a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800368e:	b15b      	cbz	r3, 80036a8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003696:	1d21      	adds	r1, r4, #4
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	f7ff ffb3 	bl	8003604 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800369e:	2301      	movs	r3, #1
 80036a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80036a4:	2000      	movs	r0, #0
}
 80036a6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80036ac:	f7fd fb46 	bl	8000d3c <HAL_TIM_Base_MspInit>
 80036b0:	e7ee      	b.n	8003690 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80036b2:	2001      	movs	r0, #1
}
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80036b6:	b1a8      	cbz	r0, 80036e4 <HAL_TIM_OC_Init+0x2e>
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80036bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036c0:	b15b      	cbz	r3, 80036da <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036c8:	1d21      	adds	r1, r4, #4
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	f7ff ff9a 	bl	8003604 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80036d6:	2000      	movs	r0, #0
}
 80036d8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80036de:	f7ff febf 	bl	8003460 <HAL_TIM_OC_MspInit>
 80036e2:	e7ee      	b.n	80036c2 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80036e4:	2001      	movs	r0, #1
}
 80036e6:	4770      	bx	lr

080036e8 <TIM_OC2_SetConfig>:
{
 80036e8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ea:	6a03      	ldr	r3, [r0, #32]
 80036ec:	f023 0310 	bic.w	r3, r3, #16
 80036f0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80036f2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80036f4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80036f6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80036fc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003700:	680d      	ldr	r5, [r1, #0]
 8003702:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003706:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800370a:	688d      	ldr	r5, [r1, #8]
 800370c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003710:	4d14      	ldr	r5, [pc, #80]	; (8003764 <TIM_OC2_SetConfig+0x7c>)
 8003712:	42a8      	cmp	r0, r5
 8003714:	d01d      	beq.n	8003752 <TIM_OC2_SetConfig+0x6a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003716:	4d13      	ldr	r5, [pc, #76]	; (8003764 <TIM_OC2_SetConfig+0x7c>)
 8003718:	42a8      	cmp	r0, r5
 800371a:	d00b      	beq.n	8003734 <TIM_OC2_SetConfig+0x4c>
 800371c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003720:	42a8      	cmp	r0, r5
 8003722:	d007      	beq.n	8003734 <TIM_OC2_SetConfig+0x4c>
 8003724:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003728:	42a8      	cmp	r0, r5
 800372a:	d003      	beq.n	8003734 <TIM_OC2_SetConfig+0x4c>
 800372c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003730:	42a8      	cmp	r0, r5
 8003732:	d107      	bne.n	8003744 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003734:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003738:	694d      	ldr	r5, [r1, #20]
 800373a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800373e:	698d      	ldr	r5, [r1, #24]
 8003740:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003744:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003746:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003748:	684a      	ldr	r2, [r1, #4]
 800374a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800374c:	6203      	str	r3, [r0, #32]
}
 800374e:	bc30      	pop	{r4, r5}
 8003750:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003756:	68cd      	ldr	r5, [r1, #12]
 8003758:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800375c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003760:	e7d9      	b.n	8003716 <TIM_OC2_SetConfig+0x2e>
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00

08003768 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003768:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d034      	beq.n	80037da <HAL_TIM_OC_ConfigChannel+0x72>
{
 8003770:	b510      	push	{r4, lr}
 8003772:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003774:	2301      	movs	r3, #1
 8003776:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003780:	2a14      	cmp	r2, #20
 8003782:	d80f      	bhi.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x3c>
 8003784:	e8df f002 	tbb	[pc, r2]
 8003788:	0e0e0e0b 	.word	0x0e0e0e0b
 800378c:	0e0e0e15 	.word	0x0e0e0e15
 8003790:	0e0e0e19 	.word	0x0e0e0e19
 8003794:	0e0e0e1d 	.word	0x0e0e0e1d
 8003798:	0e0e0e21 	.word	0x0e0e0e21
 800379c:	25          	.byte	0x25
 800379d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	f7ff fcea 	bl	8003178 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80037b0:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	f7ff ff98 	bl	80036e8 <TIM_OC2_SetConfig>
      break;
 80037b8:	e7f4      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	f7ff fd22 	bl	8003204 <TIM_OC3_SetConfig>
      break;
 80037c0:	e7f0      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037c2:	6800      	ldr	r0, [r0, #0]
 80037c4:	f7ff fd5c 	bl	8003280 <TIM_OC4_SetConfig>
      break;
 80037c8:	e7ec      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037ca:	6800      	ldr	r0, [r0, #0]
 80037cc:	f7ff fd8a 	bl	80032e4 <TIM_OC5_SetConfig>
      break;
 80037d0:	e7e8      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037d2:	6800      	ldr	r0, [r0, #0]
 80037d4:	f7ff fdb6 	bl	8003344 <TIM_OC6_SetConfig>
      break;
 80037d8:	e7e4      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 80037da:	2002      	movs	r0, #2
}
 80037dc:	4770      	bx	lr

080037de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037de:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037e0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80037ea:	430b      	orrs	r3, r1
 80037ec:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ee:	6083      	str	r3, [r0, #8]
}
 80037f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80037f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d064      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0xd2>
{
 8003800:	b510      	push	{r4, lr}
 8003802:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003804:	2301      	movs	r3, #1
 8003806:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003810:	6802      	ldr	r2, [r0, #0]
 8003812:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_TIM_ConfigClockSource+0xd8>)
 8003816:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003818:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800381a:	680b      	ldr	r3, [r1, #0]
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d04a      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0xbe>
 8003820:	d913      	bls.n	800384a <HAL_TIM_ConfigClockSource+0x52>
 8003822:	2b60      	cmp	r3, #96	; 0x60
 8003824:	d03d      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0xaa>
 8003826:	d91e      	bls.n	8003866 <HAL_TIM_ConfigClockSource+0x6e>
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d028      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x86>
 800382c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003830:	d130      	bne.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8003832:	68cb      	ldr	r3, [r1, #12]
 8003834:	684a      	ldr	r2, [r1, #4]
 8003836:	6889      	ldr	r1, [r1, #8]
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	f7ff ffd0 	bl	80037de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	6893      	ldr	r3, [r2, #8]
 8003842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003846:	6093      	str	r3, [r2, #8]
      break;
 8003848:	e024      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800384a:	2b10      	cmp	r3, #16
 800384c:	d006      	beq.n	800385c <HAL_TIM_ConfigClockSource+0x64>
 800384e:	d904      	bls.n	800385a <HAL_TIM_ConfigClockSource+0x62>
 8003850:	2b20      	cmp	r3, #32
 8003852:	d003      	beq.n	800385c <HAL_TIM_ConfigClockSource+0x64>
 8003854:	2b30      	cmp	r3, #48	; 0x30
 8003856:	d001      	beq.n	800385c <HAL_TIM_ConfigClockSource+0x64>
 8003858:	e01c      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
 800385a:	b9db      	cbnz	r3, 8003894 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385c:	4619      	mov	r1, r3
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	f7ff fdc9 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8003864:	e016      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8003866:	2b50      	cmp	r3, #80	; 0x50
 8003868:	d114      	bne.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	68ca      	ldr	r2, [r1, #12]
 800386c:	6849      	ldr	r1, [r1, #4]
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	f7ff fd9a 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003874:	2150      	movs	r1, #80	; 0x50
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	f7ff fdbd 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 800387c:	e00a      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	68cb      	ldr	r3, [r1, #12]
 8003880:	684a      	ldr	r2, [r1, #4]
 8003882:	6889      	ldr	r1, [r1, #8]
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	f7ff ffaa 	bl	80037de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003892:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003894:	2301      	movs	r3, #1
 8003896:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800389a:	2000      	movs	r0, #0
 800389c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80038a0:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a2:	68ca      	ldr	r2, [r1, #12]
 80038a4:	6849      	ldr	r1, [r1, #4]
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	f7ff fd91 	bl	80033ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ac:	2160      	movs	r1, #96	; 0x60
 80038ae:	6820      	ldr	r0, [r4, #0]
 80038b0:	f7ff fda1 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 80038b4:	e7ee      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b6:	68ca      	ldr	r2, [r1, #12]
 80038b8:	6849      	ldr	r1, [r1, #4]
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	f7ff fd74 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	f7ff fd97 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 80038c8:	e7e4      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 80038ca:	2002      	movs	r0, #2
}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	fffe0088 	.word	0xfffe0088

080038d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d02f      	beq.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 80038dc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80038de:	2301      	movs	r3, #1
 80038e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	2302      	movs	r3, #2
 80038e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038ea:	6802      	ldr	r2, [r0, #0]
 80038ec:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ee:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038f0:	4c13      	ldr	r4, [pc, #76]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80038f2:	42a2      	cmp	r2, r4
 80038f4:	d01d      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038fa:	680c      	ldr	r4, [r1, #0]
 80038fc:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038fe:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003900:	6803      	ldr	r3, [r0, #0]
 8003902:	4a0f      	ldr	r2, [pc, #60]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d006      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d003      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800390e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003912:	4293      	cmp	r3, r2
 8003914:	d104      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003916:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800391a:	688a      	ldr	r2, [r1, #8]
 800391c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003920:	2301      	movs	r3, #1
 8003922:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003926:	2300      	movs	r3, #0
 8003928:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800392c:	4618      	mov	r0, r3
}
 800392e:	bc30      	pop	{r4, r5}
 8003930:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003932:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003936:	684c      	ldr	r4, [r1, #4]
 8003938:	4323      	orrs	r3, r4
 800393a:	e7dc      	b.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800393c:	2002      	movs	r0, #2
}
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00

08003944 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003944:	4770      	bx	lr

08003946 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003948:	4770      	bx	lr
	...

0800394c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003950:	b99b      	cbnz	r3, 800397a <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003952:	f3ef 8310 	mrs	r3, PRIMASK
 8003956:	b99b      	cbnz	r3, 8003980 <osKernelInitialize+0x34>
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <osKernelInitialize+0x40>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d005      	beq.n	800396c <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003960:	b98b      	cbnz	r3, 8003986 <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <osKernelInitialize+0x40>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003968:	2000      	movs	r0, #0
 800396a:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800396c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8003970:	2a00      	cmp	r2, #0
 8003972:	d0f5      	beq.n	8003960 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8003974:	f06f 0005 	mvn.w	r0, #5
 8003978:	4770      	bx	lr
 800397a:	f06f 0005 	mvn.w	r0, #5
 800397e:	4770      	bx	lr
 8003980:	f06f 0005 	mvn.w	r0, #5
 8003984:	4770      	bx	lr
    } else {
      stat = osError;
 8003986:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800398a:	4770      	bx	lr
 800398c:	200002ec 	.word	0x200002ec

08003990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003990:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003992:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003996:	b9b3      	cbnz	r3, 80039c6 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	b9b3      	cbnz	r3, 80039cc <osKernelStart+0x3c>
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <osKernelStart+0x48>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d008      	beq.n	80039b8 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d113      	bne.n	80039d2 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <osKernelStart+0x48>)
 80039ac:	2202      	movs	r2, #2
 80039ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80039b0:	f001 f8a8 	bl	8004b04 <vTaskStartScheduler>
      stat = osOK;
 80039b4:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80039b6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039b8:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80039bc:	2a00      	cmp	r2, #0
 80039be:	d0f2      	beq.n	80039a6 <osKernelStart+0x16>
    stat = osErrorISR;
 80039c0:	f06f 0005 	mvn.w	r0, #5
 80039c4:	e7f7      	b.n	80039b6 <osKernelStart+0x26>
 80039c6:	f06f 0005 	mvn.w	r0, #5
 80039ca:	e7f4      	b.n	80039b6 <osKernelStart+0x26>
 80039cc:	f06f 0005 	mvn.w	r0, #5
 80039d0:	e7f1      	b.n	80039b6 <osKernelStart+0x26>
      stat = osError;
 80039d2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80039d6:	e7ee      	b.n	80039b6 <osKernelStart+0x26>
 80039d8:	200002ec 	.word	0x200002ec

080039dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039e0:	2400      	movs	r4, #0
 80039e2:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80039e8:	bb4c      	cbnz	r4, 8003a3e <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ea:	f3ef 8310 	mrs	r3, PRIMASK
 80039ee:	bb33      	cbnz	r3, 8003a3e <osThreadNew+0x62>
 80039f0:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <osThreadNew+0xe4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d025      	beq.n	8003a44 <osThreadNew+0x68>
 80039f8:	b308      	cbz	r0, 8003a3e <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80039fa:	2300      	movs	r3, #0
 80039fc:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8003a00:	b392      	cbz	r2, 8003a68 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 8003a02:	6816      	ldr	r6, [r2, #0]
 8003a04:	b31e      	cbz	r6, 8003a4e <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003a06:	6994      	ldr	r4, [r2, #24]
 8003a08:	b904      	cbnz	r4, 8003a0c <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8003a0a:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a0c:	1e63      	subs	r3, r4, #1
 8003a0e:	2b37      	cmp	r3, #55	; 0x37
 8003a10:	d852      	bhi.n	8003ab8 <osThreadNew+0xdc>
 8003a12:	6853      	ldr	r3, [r2, #4]
 8003a14:	f013 0f01 	tst.w	r3, #1
 8003a18:	d150      	bne.n	8003abc <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003a1a:	6955      	ldr	r5, [r2, #20]
 8003a1c:	b1d5      	cbz	r5, 8003a54 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a1e:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a22:	6893      	ldr	r3, [r2, #8]
 8003a24:	b12b      	cbz	r3, 8003a32 <osThreadNew+0x56>
 8003a26:	68d7      	ldr	r7, [r2, #12]
 8003a28:	2f5b      	cmp	r7, #91	; 0x5b
 8003a2a:	d902      	bls.n	8003a32 <osThreadNew+0x56>
 8003a2c:	6917      	ldr	r7, [r2, #16]
 8003a2e:	b107      	cbz	r7, 8003a32 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a30:	bb0d      	cbnz	r5, 8003a76 <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a32:	b193      	cbz	r3, 8003a5a <osThreadNew+0x7e>
    mem   = -1;
 8003a34:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8003a38:	2d01      	cmp	r5, #1
 8003a3a:	d023      	beq.n	8003a84 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8003a3c:	b375      	cbz	r5, 8003a9c <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a3e:	9804      	ldr	r0, [sp, #16]
}
 8003a40:	b007      	add	sp, #28
 8003a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a44:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f8      	bne.n	8003a3e <osThreadNew+0x62>
 8003a4c:	e7d4      	b.n	80039f8 <osThreadNew+0x1c>
    name  = &empty;
 8003a4e:	f10d 0617 	add.w	r6, sp, #23
 8003a52:	e7d8      	b.n	8003a06 <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 8003a54:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8003a58:	e7e3      	b.n	8003a22 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a5a:	68d3      	ldr	r3, [r2, #12]
 8003a5c:	b96b      	cbnz	r3, 8003a7a <osThreadNew+0x9e>
 8003a5e:	6913      	ldr	r3, [r2, #16]
 8003a60:	b173      	cbz	r3, 8003a80 <osThreadNew+0xa4>
    mem   = -1;
 8003a62:	f04f 35ff 	mov.w	r5, #4294967295
 8003a66:	e7e7      	b.n	8003a38 <osThreadNew+0x5c>
      mem = 0;
 8003a68:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8003a6a:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 8003a6c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8003a70:	f10d 0617 	add.w	r6, sp, #23
 8003a74:	e7e0      	b.n	8003a38 <osThreadNew+0x5c>
        mem = 1;
 8003a76:	2501      	movs	r5, #1
 8003a78:	e7de      	b.n	8003a38 <osThreadNew+0x5c>
    mem   = -1;
 8003a7a:	f04f 35ff 	mov.w	r5, #4294967295
 8003a7e:	e7db      	b.n	8003a38 <osThreadNew+0x5c>
          mem = 0;
 8003a80:	2500      	movs	r5, #0
 8003a82:	e7d9      	b.n	8003a38 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a84:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a86:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a88:	9202      	str	r2, [sp, #8]
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	9400      	str	r4, [sp, #0]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4662      	mov	r2, ip
 8003a92:	4631      	mov	r1, r6
 8003a94:	f000 ffca 	bl	8004a2c <xTaskCreateStatic>
 8003a98:	9004      	str	r0, [sp, #16]
 8003a9a:	e7d0      	b.n	8003a3e <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a9c:	aa04      	add	r2, sp, #16
 8003a9e:	9201      	str	r2, [sp, #4]
 8003aa0:	9400      	str	r4, [sp, #0]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	fa1f f28c 	uxth.w	r2, ip
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	f000 fff8 	bl	8004a9e <xTaskCreate>
 8003aae:	2801      	cmp	r0, #1
 8003ab0:	d0c5      	beq.n	8003a3e <osThreadNew+0x62>
          hTask = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9304      	str	r3, [sp, #16]
 8003ab6:	e7c2      	b.n	8003a3e <osThreadNew+0x62>
        return (NULL);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	e7c1      	b.n	8003a40 <osThreadNew+0x64>
 8003abc:	2000      	movs	r0, #0
 8003abe:	e7bf      	b.n	8003a40 <osThreadNew+0x64>
 8003ac0:	200002ec 	.word	0x200002ec

08003ac4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003ac4:	b530      	push	{r4, r5, lr}
 8003ac6:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003ac8:	b370      	cbz	r0, 8003b28 <osThreadFlagsSet+0x64>
 8003aca:	4605      	mov	r5, r0
 8003acc:	2900      	cmp	r1, #0
 8003ace:	db2b      	blt.n	8003b28 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad6:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 8003ada:	b94b      	cbnz	r3, 8003af0 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003adc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae0:	b933      	cbnz	r3, 8003af0 <osThreadFlagsSet+0x2c>
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <osThreadFlagsSet+0x88>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d124      	bne.n	8003b34 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003aea:	f3ef 8311 	mrs	r3, BASEPRI
 8003aee:	b30b      	cbz	r3, 8003b34 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 8003af0:	2400      	movs	r4, #0
 8003af2:	ab04      	add	r3, sp, #16
 8003af4:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4623      	mov	r3, r4
 8003afc:	2201      	movs	r2, #1
 8003afe:	4628      	mov	r0, r5
 8003b00:	f001 fbb6 	bl	8005270 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003b04:	9400      	str	r4, [sp, #0]
 8003b06:	ab03      	add	r3, sp, #12
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f001 fbaf 	bl	8005270 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003b12:	9b02      	ldr	r3, [sp, #8]
 8003b14:	b15b      	cbz	r3, 8003b2e <osThreadFlagsSet+0x6a>
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <osThreadFlagsSet+0x8c>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	e002      	b.n	8003b2e <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8003b28:	f06f 0303 	mvn.w	r3, #3
 8003b2c:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8003b2e:	9803      	ldr	r0, [sp, #12]
 8003b30:	b005      	add	sp, #20
 8003b32:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003b34:	2300      	movs	r3, #0
 8003b36:	2201      	movs	r2, #1
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f001 fb29 	bl	8005190 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003b3e:	ab03      	add	r3, sp, #12
 8003b40:	2200      	movs	r2, #0
 8003b42:	4611      	mov	r1, r2
 8003b44:	4628      	mov	r0, r5
 8003b46:	f001 fb23 	bl	8005190 <xTaskGenericNotify>
 8003b4a:	e7f0      	b.n	8003b2e <osThreadFlagsSet+0x6a>
 8003b4c:	200002ec 	.word	0x200002ec
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b58:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8003b5c:	bb5b      	cbnz	r3, 8003bb6 <osThreadFlagsClear+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b62:	bb6b      	cbnz	r3, 8003bc0 <osThreadFlagsClear+0x6c>
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <osThreadFlagsClear+0x78>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d00f      	beq.n	8003b8c <osThreadFlagsClear+0x38>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	db2a      	blt.n	8003bc6 <osThreadFlagsClear+0x72>
 8003b70:	4604      	mov	r4, r0
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8003b72:	f001 fa63 	bl	800503c <xTaskGetCurrentTaskHandle>
 8003b76:	4606      	mov	r6, r0

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8003b78:	ab01      	add	r3, sp, #4
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	f001 fb07 	bl	8005190 <xTaskGenericNotify>
 8003b82:	2801      	cmp	r0, #1
 8003b84:	d009      	beq.n	8003b9a <osThreadFlagsClear+0x46>
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
        rflags = (uint32_t)osError;
      }
    }
    else {
      rflags = (uint32_t)osError;
 8003b86:	f04f 35ff 	mov.w	r5, #4294967295
 8003b8a:	e016      	b.n	8003bba <osThreadFlagsClear+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b8c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0eb      	beq.n	8003b6c <osThreadFlagsClear+0x18>
    rflags = (uint32_t)osErrorISR;
 8003b94:	f06f 0505 	mvn.w	r5, #5
 8003b98:	e00f      	b.n	8003bba <osThreadFlagsClear+0x66>
      rflags = cflags;
 8003b9a:	9d01      	ldr	r5, [sp, #4]
      cflags &= ~flags;
 8003b9c:	ea25 0104 	bic.w	r1, r5, r4
 8003ba0:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f001 faf2 	bl	8005190 <xTaskGenericNotify>
 8003bac:	2801      	cmp	r0, #1
 8003bae:	d004      	beq.n	8003bba <osThreadFlagsClear+0x66>
        rflags = (uint32_t)osError;
 8003bb0:	f04f 35ff 	mov.w	r5, #4294967295
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8003bb4:	e001      	b.n	8003bba <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorISR;
 8003bb6:	f06f 0505 	mvn.w	r5, #5
}
 8003bba:	4628      	mov	r0, r5
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8003bc0:	f06f 0505 	mvn.w	r5, #5
 8003bc4:	e7f9      	b.n	8003bba <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorParameter;
 8003bc6:	f06f 0503 	mvn.w	r5, #3
 8003bca:	e7f6      	b.n	8003bba <osThreadFlagsClear+0x66>
 8003bcc:	200002ec 	.word	0x200002ec

08003bd0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd6:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d14d      	bne.n	8003c7a <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8710 	mrs	r7, PRIMASK
 8003be2:	463d      	mov	r5, r7
 8003be4:	2f00      	cmp	r7, #0
 8003be6:	d14e      	bne.n	8003c86 <osThreadFlagsWait+0xb6>
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <osThreadFlagsWait+0xc8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d00d      	beq.n	8003c0c <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	db4b      	blt.n	8003c8c <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8003bf4:	f011 0f02 	tst.w	r1, #2
 8003bf8:	d00f      	beq.n	8003c1a <osThreadFlagsWait+0x4a>
      clear = 0U;
 8003bfa:	46b8      	mov	r8, r7
 8003bfc:	4617      	mov	r7, r2
 8003bfe:	468a      	mov	sl, r1
 8003c00:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8003c02:	f000 ffd1 	bl	8004ba8 <xTaskGetTickCount>
 8003c06:	4683      	mov	fp, r0
    tout   = timeout;
 8003c08:	463e      	mov	r6, r7
 8003c0a:	e028      	b.n	8003c5e <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c0c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ed      	beq.n	8003bf0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8003c14:	f06f 0505 	mvn.w	r5, #5
 8003c18:	e031      	b.n	8003c7e <osThreadFlagsWait+0xae>
      clear = flags;
 8003c1a:	4680      	mov	r8, r0
 8003c1c:	e7ee      	b.n	8003bfc <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8003c1e:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8003c22:	9b01      	ldr	r3, [sp, #4]
 8003c24:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003c26:	f01a 0f01 	tst.w	sl, #1
 8003c2a:	d00b      	beq.n	8003c44 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8003c2c:	ea39 0305 	bics.w	r3, r9, r5
 8003c30:	d025      	beq.n	8003c7e <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8003c32:	b377      	cbz	r7, 8003c92 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003c34:	f000 ffb8 	bl	8004ba8 <xTaskGetTickCount>
 8003c38:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 8003c3c:	4286      	cmp	r6, r0
 8003c3e:	d309      	bcc.n	8003c54 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8003c40:	1a36      	subs	r6, r6, r0
 8003c42:	e00b      	b.n	8003c5c <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8003c44:	ea19 0f05 	tst.w	r9, r5
 8003c48:	d119      	bne.n	8003c7e <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8003c4a:	2f00      	cmp	r7, #0
 8003c4c:	d1f2      	bne.n	8003c34 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 8003c4e:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8003c52:	e014      	b.n	8003c7e <osThreadFlagsWait+0xae>
          tout  = 0;
 8003c54:	2600      	movs	r6, #0
 8003c56:	e001      	b.n	8003c5c <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8003c58:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8003c5c:	b17c      	cbz	r4, 8003c7e <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003c5e:	4633      	mov	r3, r6
 8003c60:	aa01      	add	r2, sp, #4
 8003c62:	4641      	mov	r1, r8
 8003c64:	2000      	movs	r0, #0
 8003c66:	f001 fa47 	bl	80050f8 <xTaskNotifyWait>
 8003c6a:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 8003c6c:	2801      	cmp	r0, #1
 8003c6e:	d0d6      	beq.n	8003c1e <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 8003c70:	2f00      	cmp	r7, #0
 8003c72:	d1f1      	bne.n	8003c58 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8003c74:	f06f 0502 	mvn.w	r5, #2
 8003c78:	e7f0      	b.n	8003c5c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8003c7a:	f06f 0505 	mvn.w	r5, #5
}
 8003c7e:	4628      	mov	r0, r5
 8003c80:	b003      	add	sp, #12
 8003c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8003c86:	f06f 0505 	mvn.w	r5, #5
 8003c8a:	e7f8      	b.n	8003c7e <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8003c8c:	f06f 0503 	mvn.w	r5, #3
 8003c90:	e7f5      	b.n	8003c7e <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 8003c92:	f06f 0502 	mvn.w	r5, #2
 8003c96:	e7f2      	b.n	8003c7e <osThreadFlagsWait+0xae>
 8003c98:	200002ec 	.word	0x200002ec

08003c9c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8003c9c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ca2:	b9a3      	cbnz	r3, 8003cce <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca8:	b9a3      	cbnz	r3, 8003cd4 <osDelay+0x38>
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <osDelay+0x40>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d002      	beq.n	8003cb8 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003cb2:	b940      	cbnz	r0, 8003cc6 <osDelay+0x2a>
    stat = osOK;
 8003cb4:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003cb6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cb8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f8      	beq.n	8003cb2 <osDelay+0x16>
    stat = osErrorISR;
 8003cc0:	f06f 0005 	mvn.w	r0, #5
 8003cc4:	e7f7      	b.n	8003cb6 <osDelay+0x1a>
      vTaskDelay(ticks);
 8003cc6:	f001 f87b 	bl	8004dc0 <vTaskDelay>
    stat = osOK;
 8003cca:	2000      	movs	r0, #0
 8003ccc:	e7f3      	b.n	8003cb6 <osDelay+0x1a>
    stat = osErrorISR;
 8003cce:	f06f 0005 	mvn.w	r0, #5
 8003cd2:	e7f0      	b.n	8003cb6 <osDelay+0x1a>
 8003cd4:	f06f 0005 	mvn.w	r0, #5
 8003cd8:	e7ed      	b.n	8003cb6 <osDelay+0x1a>
 8003cda:	bf00      	nop
 8003cdc:	200002ec 	.word	0x200002ec

08003ce0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d14c      	bne.n	8003d86 <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d14a      	bne.n	8003d8a <osMessageQueueNew+0xaa>
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <osMessageQueueNew+0xbc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d023      	beq.n	8003d44 <osMessageQueueNew+0x64>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d046      	beq.n	8003d8e <osMessageQueueNew+0xae>
 8003d00:	2900      	cmp	r1, #0
 8003d02:	d046      	beq.n	8003d92 <osMessageQueueNew+0xb2>
 8003d04:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	d034      	beq.n	8003d74 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d0a:	6893      	ldr	r3, [r2, #8]
 8003d0c:	b14b      	cbz	r3, 8003d22 <osMessageQueueNew+0x42>
 8003d0e:	68d2      	ldr	r2, [r2, #12]
 8003d10:	2a4f      	cmp	r2, #79	; 0x4f
 8003d12:	d906      	bls.n	8003d22 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d14:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d16:	b122      	cbz	r2, 8003d22 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d18:	6966      	ldr	r6, [r4, #20]
 8003d1a:	fb01 f500 	mul.w	r5, r1, r0
 8003d1e:	42ae      	cmp	r6, r5
 8003d20:	d222      	bcs.n	8003d68 <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d22:	b1ab      	cbz	r3, 8003d50 <osMessageQueueNew+0x70>
    mem = -1;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8003d28:	bbab      	cbnz	r3, 8003d96 <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f000 fa77 	bl	800421e <xQueueGenericCreate>
 8003d30:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003d32:	b125      	cbz	r5, 8003d3e <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8003d34:	b32c      	cbz	r4, 8003d82 <osMessageQueueNew+0xa2>
        name = attr->name;
 8003d36:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 fcbd 	bl	80046b8 <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003d3e:	4628      	mov	r0, r5
 8003d40:	b002      	add	sp, #8
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d44:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0d7      	beq.n	8003cfc <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e7f6      	b.n	8003d3e <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d50:	68e3      	ldr	r3, [r4, #12]
 8003d52:	b98b      	cbnz	r3, 8003d78 <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d54:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d56:	b113      	cbz	r3, 8003d5e <osMessageQueueNew+0x7e>
    mem = -1;
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5c:	e7e4      	b.n	8003d28 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d5e:	6963      	ldr	r3, [r4, #20]
 8003d60:	b16b      	cbz	r3, 8003d7e <osMessageQueueNew+0x9e>
    mem = -1;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	e7df      	b.n	8003d28 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d68:	2500      	movs	r5, #0
 8003d6a:	9500      	str	r5, [sp, #0]
 8003d6c:	f000 fa0f 	bl	800418e <xQueueGenericCreateStatic>
 8003d70:	4605      	mov	r5, r0
 8003d72:	e7de      	b.n	8003d32 <osMessageQueueNew+0x52>
      mem = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e7d7      	b.n	8003d28 <osMessageQueueNew+0x48>
    mem = -1;
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7c:	e7d4      	b.n	8003d28 <osMessageQueueNew+0x48>
          mem = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e7d2      	b.n	8003d28 <osMessageQueueNew+0x48>
        name = NULL;
 8003d82:	2100      	movs	r1, #0
 8003d84:	e7d8      	b.n	8003d38 <osMessageQueueNew+0x58>
  hQueue = NULL;
 8003d86:	2500      	movs	r5, #0
 8003d88:	e7d9      	b.n	8003d3e <osMessageQueueNew+0x5e>
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	e7d7      	b.n	8003d3e <osMessageQueueNew+0x5e>
 8003d8e:	2500      	movs	r5, #0
 8003d90:	e7d5      	b.n	8003d3e <osMessageQueueNew+0x5e>
 8003d92:	2500      	movs	r5, #0
 8003d94:	e7d3      	b.n	8003d3e <osMessageQueueNew+0x5e>
 8003d96:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8003d98:	e7d1      	b.n	8003d3e <osMessageQueueNew+0x5e>
 8003d9a:	bf00      	nop
 8003d9c:	200002ec 	.word	0x200002ec

08003da0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003da0:	b510      	push	{r4, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003da6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003daa:	b9b3      	cbnz	r3, 8003dda <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dac:	f3ef 8310 	mrs	r3, PRIMASK
 8003db0:	b99b      	cbnz	r3, 8003dda <osMessageQueuePut+0x3a>
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <osMessageQueuePut+0x9c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d00b      	beq.n	8003dd2 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003dba:	b3a0      	cbz	r0, 8003e26 <osMessageQueuePut+0x86>
 8003dbc:	b3b1      	cbz	r1, 8003e2c <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	f000 fa53 	bl	800426c <xQueueGenericSend>
 8003dc6:	2801      	cmp	r0, #1
 8003dc8:	d033      	beq.n	8003e32 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 8003dca:	b3a4      	cbz	r4, 8003e36 <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8003dcc:	f06f 0001 	mvn.w	r0, #1
 8003dd0:	e027      	b.n	8003e22 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dd2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0ef      	beq.n	8003dba <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003dda:	b1a8      	cbz	r0, 8003e08 <osMessageQueuePut+0x68>
 8003ddc:	b1b9      	cbz	r1, 8003e0e <osMessageQueuePut+0x6e>
 8003dde:	b9cc      	cbnz	r4, 8003e14 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	aa02      	add	r2, sp, #8
 8003de4:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003de8:	f000 fafe 	bl	80043e8 <xQueueGenericSendFromISR>
 8003dec:	2801      	cmp	r0, #1
 8003dee:	d114      	bne.n	8003e1a <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8003df0:	9b01      	ldr	r3, [sp, #4]
 8003df2:	b1ab      	cbz	r3, 8003e20 <osMessageQueuePut+0x80>
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <osMessageQueuePut+0xa0>)
 8003df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003e04:	2000      	movs	r0, #0
 8003e06:	e00c      	b.n	8003e22 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8003e08:	f06f 0003 	mvn.w	r0, #3
 8003e0c:	e009      	b.n	8003e22 <osMessageQueuePut+0x82>
 8003e0e:	f06f 0003 	mvn.w	r0, #3
 8003e12:	e006      	b.n	8003e22 <osMessageQueuePut+0x82>
 8003e14:	f06f 0003 	mvn.w	r0, #3
 8003e18:	e003      	b.n	8003e22 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 8003e1a:	f06f 0002 	mvn.w	r0, #2
 8003e1e:	e000      	b.n	8003e22 <osMessageQueuePut+0x82>
  stat = osOK;
 8003e20:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003e22:	b002      	add	sp, #8
 8003e24:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003e26:	f06f 0003 	mvn.w	r0, #3
 8003e2a:	e7fa      	b.n	8003e22 <osMessageQueuePut+0x82>
 8003e2c:	f06f 0003 	mvn.w	r0, #3
 8003e30:	e7f7      	b.n	8003e22 <osMessageQueuePut+0x82>
  stat = osOK;
 8003e32:	2000      	movs	r0, #0
 8003e34:	e7f5      	b.n	8003e22 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 8003e36:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8003e3a:	e7f2      	b.n	8003e22 <osMessageQueuePut+0x82>
 8003e3c:	200002ec 	.word	0x200002ec
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003e44:	b510      	push	{r4, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e4a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003e4e:	b9ab      	cbnz	r3, 8003e7c <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e50:	f3ef 8310 	mrs	r3, PRIMASK
 8003e54:	b993      	cbnz	r3, 8003e7c <osMessageQueueGet+0x38>
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <osMessageQueueGet+0x9c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d00a      	beq.n	8003e74 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e5e:	b398      	cbz	r0, 8003ec8 <osMessageQueueGet+0x84>
 8003e60:	b3a9      	cbz	r1, 8003ece <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e62:	4622      	mov	r2, r4
 8003e64:	f000 fb26 	bl	80044b4 <xQueueReceive>
 8003e68:	2801      	cmp	r0, #1
 8003e6a:	d033      	beq.n	8003ed4 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 8003e6c:	b3a4      	cbz	r4, 8003ed8 <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 8003e6e:	f06f 0001 	mvn.w	r0, #1
 8003e72:	e027      	b.n	8003ec4 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e74:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e7c:	b1a8      	cbz	r0, 8003eaa <osMessageQueueGet+0x66>
 8003e7e:	b1b9      	cbz	r1, 8003eb0 <osMessageQueueGet+0x6c>
 8003e80:	b9cc      	cbnz	r4, 8003eb6 <osMessageQueueGet+0x72>
      yield = pdFALSE;
 8003e82:	aa02      	add	r2, sp, #8
 8003e84:	2300      	movs	r3, #0
 8003e86:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e8a:	f000 fbbf 	bl	800460c <xQueueReceiveFromISR>
 8003e8e:	2801      	cmp	r0, #1
 8003e90:	d114      	bne.n	8003ebc <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 8003e92:	9b01      	ldr	r3, [sp, #4]
 8003e94:	b1ab      	cbz	r3, 8003ec2 <osMessageQueueGet+0x7e>
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <osMessageQueueGet+0xa0>)
 8003e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e00c      	b.n	8003ec4 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8003eaa:	f06f 0003 	mvn.w	r0, #3
 8003eae:	e009      	b.n	8003ec4 <osMessageQueueGet+0x80>
 8003eb0:	f06f 0003 	mvn.w	r0, #3
 8003eb4:	e006      	b.n	8003ec4 <osMessageQueueGet+0x80>
 8003eb6:	f06f 0003 	mvn.w	r0, #3
 8003eba:	e003      	b.n	8003ec4 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 8003ebc:	f06f 0002 	mvn.w	r0, #2
 8003ec0:	e000      	b.n	8003ec4 <osMessageQueueGet+0x80>
  stat = osOK;
 8003ec2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003ec8:	f06f 0003 	mvn.w	r0, #3
 8003ecc:	e7fa      	b.n	8003ec4 <osMessageQueueGet+0x80>
 8003ece:	f06f 0003 	mvn.w	r0, #3
 8003ed2:	e7f7      	b.n	8003ec4 <osMessageQueueGet+0x80>
  stat = osOK;
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e7f5      	b.n	8003ec4 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 8003ed8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8003edc:	e7f2      	b.n	8003ec4 <osMessageQueueGet+0x80>
 8003ede:	bf00      	nop
 8003ee0:	200002ec 	.word	0x200002ec
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <vApplicationGetIdleTaskMemory+0x10>)
 8003eea:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <vApplicationGetIdleTaskMemory+0x14>)
 8003eee:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	6013      	str	r3, [r2, #0]
}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000290 	.word	0x20000290
 8003efc:	20000090 	.word	0x20000090

08003f00 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <vApplicationGetTimerTaskMemory+0x10>)
 8003f02:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <vApplicationGetTimerTaskMemory+0x14>)
 8003f06:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f0c:	6013      	str	r3, [r2, #0]
}
 8003f0e:	4770      	bx	lr
 8003f10:	200006f0 	.word	0x200006f0
 8003f14:	200002f0 	.word	0x200002f0

08003f18 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f18:	f100 0308 	add.w	r3, r0, #8
 8003f1c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f22:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f24:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f26:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f2c:	4770      	bx	lr

08003f2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f32:	4770      	bx	lr

08003f34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f34:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f40:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f42:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003f44:	6803      	ldr	r3, [r0, #0]
 8003f46:	3301      	adds	r3, #1
 8003f48:	6003      	str	r3, [r0, #0]
}
 8003f4a:	4770      	bx	lr

08003f4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f4c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f4e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f50:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f54:	d002      	beq.n	8003f5c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f56:	f100 0208 	add.w	r2, r0, #8
 8003f5a:	e002      	b.n	8003f62 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f5c:	6902      	ldr	r2, [r0, #16]
 8003f5e:	e004      	b.n	8003f6a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f60:	461a      	mov	r2, r3
 8003f62:	6853      	ldr	r3, [r2, #4]
 8003f64:	681c      	ldr	r4, [r3, #0]
 8003f66:	42ac      	cmp	r4, r5
 8003f68:	d9fa      	bls.n	8003f60 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f6a:	6853      	ldr	r3, [r2, #4]
 8003f6c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f6e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f70:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f72:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f74:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003f76:	6803      	ldr	r3, [r0, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	6003      	str	r3, [r0, #0]
}
 8003f7c:	bc30      	pop	{r4, r5}
 8003f7e:	4770      	bx	lr

08003f80 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003f80:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f82:	6842      	ldr	r2, [r0, #4]
 8003f84:	6881      	ldr	r1, [r0, #8]
 8003f86:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f88:	6882      	ldr	r2, [r0, #8]
 8003f8a:	6841      	ldr	r1, [r0, #4]
 8003f8c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4282      	cmp	r2, r0
 8003f92:	d006      	beq.n	8003fa2 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003f94:	2200      	movs	r2, #0
 8003f96:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f9e:	6818      	ldr	r0, [r3, #0]
}
 8003fa0:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fa2:	6882      	ldr	r2, [r0, #8]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	e7f5      	b.n	8003f94 <uxListRemove+0x14>

08003fa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fac:	f001 fc72 	bl	8005894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d004      	beq.n	8003fc2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8003fb8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003fba:	f001 fc8d 	bl	80058d8 <vPortExitCritical>

	return xReturn;
}
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003fc2:	2401      	movs	r4, #1
 8003fc4:	e7f9      	b.n	8003fba <prvIsQueueFull+0x12>

08003fc6 <prvIsQueueEmpty>:
{
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003fca:	f001 fc63 	bl	8005894 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fd0:	b123      	cbz	r3, 8003fdc <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8003fd2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003fd4:	f001 fc80 	bl	80058d8 <vPortExitCritical>
}
 8003fd8:	4620      	mov	r0, r4
 8003fda:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003fdc:	2401      	movs	r4, #1
 8003fde:	e7f9      	b.n	8003fd4 <prvIsQueueEmpty+0xe>

08003fe0 <prvCopyDataToQueue>:
{
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fe8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003fea:	b95a      	cbnz	r2, 8004004 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fec:	6803      	ldr	r3, [r0, #0]
 8003fee:	b11b      	cbz	r3, 8003ff8 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003ff0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ff2:	3501      	adds	r5, #1
 8003ff4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ff8:	6840      	ldr	r0, [r0, #4]
 8003ffa:	f001 f835 	bl	8005068 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	e7f6      	b.n	8003ff2 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004004:	b96e      	cbnz	r6, 8004022 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004006:	6880      	ldr	r0, [r0, #8]
 8004008:	f001 feda 	bl	8005dc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800400c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800400e:	68a3      	ldr	r3, [r4, #8]
 8004010:	4413      	add	r3, r2
 8004012:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004014:	6862      	ldr	r2, [r4, #4]
 8004016:	4293      	cmp	r3, r2
 8004018:	d319      	bcc.n	800404e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800401e:	2000      	movs	r0, #0
 8004020:	e7e7      	b.n	8003ff2 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004022:	68c0      	ldr	r0, [r0, #12]
 8004024:	f001 fecc 	bl	8005dc0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004028:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800402a:	4252      	negs	r2, r2
 800402c:	68e3      	ldr	r3, [r4, #12]
 800402e:	4413      	add	r3, r2
 8004030:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004032:	6821      	ldr	r1, [r4, #0]
 8004034:	428b      	cmp	r3, r1
 8004036:	d202      	bcs.n	800403e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004038:	6863      	ldr	r3, [r4, #4]
 800403a:	441a      	add	r2, r3
 800403c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800403e:	2e02      	cmp	r6, #2
 8004040:	d001      	beq.n	8004046 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004042:	2000      	movs	r0, #0
 8004044:	e7d5      	b.n	8003ff2 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004046:	b125      	cbz	r5, 8004052 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004048:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800404a:	2000      	movs	r0, #0
 800404c:	e7d1      	b.n	8003ff2 <prvCopyDataToQueue+0x12>
 800404e:	2000      	movs	r0, #0
 8004050:	e7cf      	b.n	8003ff2 <prvCopyDataToQueue+0x12>
 8004052:	2000      	movs	r0, #0
 8004054:	e7cd      	b.n	8003ff2 <prvCopyDataToQueue+0x12>

08004056 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004056:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004058:	b172      	cbz	r2, 8004078 <prvCopyDataFromQueue+0x22>
{
 800405a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800405c:	68c3      	ldr	r3, [r0, #12]
 800405e:	4413      	add	r3, r2
 8004060:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004062:	6844      	ldr	r4, [r0, #4]
 8004064:	42a3      	cmp	r3, r4
 8004066:	d301      	bcc.n	800406c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004068:	6803      	ldr	r3, [r0, #0]
 800406a:	60c3      	str	r3, [r0, #12]
 800406c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800406e:	68c1      	ldr	r1, [r0, #12]
 8004070:	4620      	mov	r0, r4
 8004072:	f001 fea5 	bl	8005dc0 <memcpy>
}
 8004076:	bd10      	pop	{r4, pc}
 8004078:	4770      	bx	lr

0800407a <prvUnlockQueue>:
{
 800407a:	b538      	push	{r3, r4, r5, lr}
 800407c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800407e:	f001 fc09 	bl	8005894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004082:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004086:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004088:	e003      	b.n	8004092 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800408a:	f000 ffd1 	bl	8005030 <vTaskMissedYield>
			--cTxLock;
 800408e:	3c01      	subs	r4, #1
 8004090:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004092:	2c00      	cmp	r4, #0
 8004094:	dd08      	ble.n	80040a8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004098:	b133      	cbz	r3, 80040a8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800409e:	f000 ff35 	bl	8004f0c <xTaskRemoveFromEventList>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d0f3      	beq.n	800408e <prvUnlockQueue+0x14>
 80040a6:	e7f0      	b.n	800408a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80040a8:	23ff      	movs	r3, #255	; 0xff
 80040aa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80040ae:	f001 fc13 	bl	80058d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80040b2:	f001 fbef 	bl	8005894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80040b6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80040ba:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040bc:	e003      	b.n	80040c6 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80040be:	f000 ffb7 	bl	8005030 <vTaskMissedYield>
				--cRxLock;
 80040c2:	3c01      	subs	r4, #1
 80040c4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040c6:	2c00      	cmp	r4, #0
 80040c8:	dd08      	ble.n	80040dc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ca:	692b      	ldr	r3, [r5, #16]
 80040cc:	b133      	cbz	r3, 80040dc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ce:	f105 0010 	add.w	r0, r5, #16
 80040d2:	f000 ff1b 	bl	8004f0c <xTaskRemoveFromEventList>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d0f3      	beq.n	80040c2 <prvUnlockQueue+0x48>
 80040da:	e7f0      	b.n	80040be <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80040dc:	23ff      	movs	r3, #255	; 0xff
 80040de:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80040e2:	f001 fbf9 	bl	80058d8 <vPortExitCritical>
}
 80040e6:	bd38      	pop	{r3, r4, r5, pc}

080040e8 <xQueueGenericReset>:
{
 80040e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80040ea:	b940      	cbnz	r0, 80040fe <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericReset+0x14>
 80040fe:	4604      	mov	r4, r0
 8004100:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004102:	f001 fbc7 	bl	8005894 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800410a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800410c:	fb03 1002 	mla	r0, r3, r2, r1
 8004110:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004112:	2000      	movs	r0, #0
 8004114:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004116:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004118:	3a01      	subs	r2, #1
 800411a:	fb02 1303 	mla	r3, r2, r3, r1
 800411e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004120:	23ff      	movs	r3, #255	; 0xff
 8004122:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800412a:	b9a5      	cbnz	r5, 8004156 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	b91b      	cbnz	r3, 8004138 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004130:	f001 fbd2 	bl	80058d8 <vPortExitCritical>
}
 8004134:	2001      	movs	r0, #1
 8004136:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004138:	f104 0010 	add.w	r0, r4, #16
 800413c:	f000 fee6 	bl	8004f0c <xTaskRemoveFromEventList>
 8004140:	2800      	cmp	r0, #0
 8004142:	d0f5      	beq.n	8004130 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <xQueueGenericReset+0x80>)
 8004146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	e7ec      	b.n	8004130 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004156:	f104 0010 	add.w	r0, r4, #16
 800415a:	f7ff fedd 	bl	8003f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800415e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004162:	f7ff fed9 	bl	8003f18 <vListInitialise>
 8004166:	e7e3      	b.n	8004130 <xQueueGenericReset+0x48>
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <prvInitialiseNewQueue>:
{
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	461d      	mov	r5, r3
 8004170:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004172:	460b      	mov	r3, r1
 8004174:	b149      	cbz	r1, 800418a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004176:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004178:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800417a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800417c:	2101      	movs	r1, #1
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff ffb2 	bl	80040e8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004184:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8004188:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800418a:	6024      	str	r4, [r4, #0]
 800418c:	e7f4      	b.n	8004178 <prvInitialiseNewQueue+0xc>

0800418e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800418e:	b940      	cbnz	r0, 80041a2 <xQueueGenericCreateStatic+0x14>
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	e7fe      	b.n	80041a0 <xQueueGenericCreateStatic+0x12>
	{
 80041a2:	b510      	push	{r4, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80041a8:	b153      	cbz	r3, 80041c0 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041aa:	b192      	cbz	r2, 80041d2 <xQueueGenericCreateStatic+0x44>
 80041ac:	b989      	cbnz	r1, 80041d2 <xQueueGenericCreateStatic+0x44>
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	e7fe      	b.n	80041be <xQueueGenericCreateStatic+0x30>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	e7fe      	b.n	80041d0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041d2:	b94a      	cbnz	r2, 80041e8 <xQueueGenericCreateStatic+0x5a>
 80041d4:	b141      	cbz	r1, 80041e8 <xQueueGenericCreateStatic+0x5a>
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	e7fe      	b.n	80041e6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041e8:	2050      	movs	r0, #80	; 0x50
 80041ea:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041ec:	9803      	ldr	r0, [sp, #12]
 80041ee:	2850      	cmp	r0, #80	; 0x50
 80041f0:	d008      	beq.n	8004204 <xQueueGenericCreateStatic+0x76>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	e7fe      	b.n	8004202 <xQueueGenericCreateStatic+0x74>
 8004204:	4620      	mov	r0, r4
 8004206:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800420e:	9400      	str	r4, [sp, #0]
 8004210:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004214:	f7ff ffaa 	bl	800416c <prvInitialiseNewQueue>
	}
 8004218:	4620      	mov	r0, r4
 800421a:	b004      	add	sp, #16
 800421c:	bd10      	pop	{r4, pc}

0800421e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800421e:	b940      	cbnz	r0, 8004232 <xQueueGenericCreate+0x14>
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	e7fe      	b.n	8004230 <xQueueGenericCreate+0x12>
	{
 8004232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004234:	b083      	sub	sp, #12
 8004236:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8004238:	b111      	cbz	r1, 8004240 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423a:	fb01 f000 	mul.w	r0, r1, r0
 800423e:	e000      	b.n	8004242 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8004240:	2000      	movs	r0, #0
 8004242:	4617      	mov	r7, r2
 8004244:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004246:	3050      	adds	r0, #80	; 0x50
 8004248:	f001 fcda 	bl	8005c00 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800424c:	4605      	mov	r5, r0
 800424e:	b150      	cbz	r0, 8004266 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004250:	2300      	movs	r3, #0
 8004252:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004256:	9000      	str	r0, [sp, #0]
 8004258:	463b      	mov	r3, r7
 800425a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800425e:	4621      	mov	r1, r4
 8004260:	4630      	mov	r0, r6
 8004262:	f7ff ff83 	bl	800416c <prvInitialiseNewQueue>
	}
 8004266:	4628      	mov	r0, r5
 8004268:	b003      	add	sp, #12
 800426a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800426c <xQueueGenericSend>:
{
 800426c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426e:	b085      	sub	sp, #20
 8004270:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004272:	b160      	cbz	r0, 800428e <xQueueGenericSend+0x22>
 8004274:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004276:	b999      	cbnz	r1, 80042a0 <xQueueGenericSend+0x34>
 8004278:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800427a:	b18a      	cbz	r2, 80042a0 <xQueueGenericSend+0x34>
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	e7fe      	b.n	800428c <xQueueGenericSend+0x20>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	e7fe      	b.n	800429e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d10b      	bne.n	80042bc <xQueueGenericSend+0x50>
 80042a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80042a6:	2a01      	cmp	r2, #1
 80042a8:	d008      	beq.n	80042bc <xQueueGenericSend+0x50>
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	e7fe      	b.n	80042ba <xQueueGenericSend+0x4e>
 80042bc:	461e      	mov	r6, r3
 80042be:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042c0:	f000 fec2 	bl	8005048 <xTaskGetSchedulerState>
 80042c4:	b950      	cbnz	r0, 80042dc <xQueueGenericSend+0x70>
 80042c6:	9b01      	ldr	r3, [sp, #4]
 80042c8:	b153      	cbz	r3, 80042e0 <xQueueGenericSend+0x74>
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	e7fe      	b.n	80042da <xQueueGenericSend+0x6e>
 80042dc:	2500      	movs	r5, #0
 80042de:	e03a      	b.n	8004356 <xQueueGenericSend+0xea>
 80042e0:	2500      	movs	r5, #0
 80042e2:	e038      	b.n	8004356 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042e4:	4632      	mov	r2, r6
 80042e6:	4639      	mov	r1, r7
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff fe79 	bl	8003fe0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042f0:	b94b      	cbnz	r3, 8004306 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 80042f2:	b1a8      	cbz	r0, 8004320 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 80042f4:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <xQueueGenericSend+0x178>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	e00c      	b.n	8004320 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004306:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800430a:	f000 fdff 	bl	8004f0c <xTaskRemoveFromEventList>
 800430e:	b138      	cbz	r0, 8004320 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8004310:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <xQueueGenericSend+0x178>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004320:	f001 fada 	bl	80058d8 <vPortExitCritical>
				return pdPASS;
 8004324:	2001      	movs	r0, #1
}
 8004326:	b005      	add	sp, #20
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800432a:	f001 fad5 	bl	80058d8 <vPortExitCritical>
					return errQUEUE_FULL;
 800432e:	2000      	movs	r0, #0
 8004330:	e7f9      	b.n	8004326 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004332:	a802      	add	r0, sp, #8
 8004334:	f000 fe30 	bl	8004f98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004338:	2501      	movs	r5, #1
 800433a:	e019      	b.n	8004370 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 800433c:	2300      	movs	r3, #0
 800433e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004342:	e021      	b.n	8004388 <xQueueGenericSend+0x11c>
 8004344:	2300      	movs	r3, #0
 8004346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800434a:	e023      	b.n	8004394 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 800434c:	4620      	mov	r0, r4
 800434e:	f7ff fe94 	bl	800407a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004352:	f000 fcbb 	bl	8004ccc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004356:	f001 fa9d 	bl	8005894 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800435a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800435c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800435e:	429a      	cmp	r2, r3
 8004360:	d3c0      	bcc.n	80042e4 <xQueueGenericSend+0x78>
 8004362:	2e02      	cmp	r6, #2
 8004364:	d0be      	beq.n	80042e4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004366:	9b01      	ldr	r3, [sp, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0de      	beq.n	800432a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 800436c:	2d00      	cmp	r5, #0
 800436e:	d0e0      	beq.n	8004332 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8004370:	f001 fab2 	bl	80058d8 <vPortExitCritical>
		vTaskSuspendAll();
 8004374:	f000 fc10 	bl	8004b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004378:	f001 fa8c 	bl	8005894 <vPortEnterCritical>
 800437c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004380:	b25b      	sxtb	r3, r3
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d0d9      	beq.n	800433c <xQueueGenericSend+0xd0>
 8004388:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800438c:	b25b      	sxtb	r3, r3
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d0d7      	beq.n	8004344 <xQueueGenericSend+0xd8>
 8004394:	f001 faa0 	bl	80058d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004398:	a901      	add	r1, sp, #4
 800439a:	a802      	add	r0, sp, #8
 800439c:	f000 fe08 	bl	8004fb0 <xTaskCheckForTimeOut>
 80043a0:	b9c8      	cbnz	r0, 80043d6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043a2:	4620      	mov	r0, r4
 80043a4:	f7ff fe00 	bl	8003fa8 <prvIsQueueFull>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d0cf      	beq.n	800434c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043ac:	9901      	ldr	r1, [sp, #4]
 80043ae:	f104 0010 	add.w	r0, r4, #16
 80043b2:	f000 fd77 	bl	8004ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff fe5f 	bl	800407a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043bc:	f000 fc86 	bl	8004ccc <xTaskResumeAll>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d1c8      	bne.n	8004356 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80043c4:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <xQueueGenericSend+0x178>)
 80043c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	e7bf      	b.n	8004356 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7ff fe4f 	bl	800407a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043dc:	f000 fc76 	bl	8004ccc <xTaskResumeAll>
			return errQUEUE_FULL;
 80043e0:	2000      	movs	r0, #0
 80043e2:	e7a0      	b.n	8004326 <xQueueGenericSend+0xba>
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <xQueueGenericSendFromISR>:
{
 80043e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80043ec:	b160      	cbz	r0, 8004408 <xQueueGenericSendFromISR+0x20>
 80043ee:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f0:	b999      	cbnz	r1, 800441a <xQueueGenericSendFromISR+0x32>
 80043f2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80043f4:	b188      	cbz	r0, 800441a <xQueueGenericSendFromISR+0x32>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	e7fe      	b.n	8004406 <xQueueGenericSendFromISR+0x1e>
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	e7fe      	b.n	8004418 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800441a:	2b02      	cmp	r3, #2
 800441c:	d10b      	bne.n	8004436 <xQueueGenericSendFromISR+0x4e>
 800441e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004420:	2801      	cmp	r0, #1
 8004422:	d008      	beq.n	8004436 <xQueueGenericSendFromISR+0x4e>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	e7fe      	b.n	8004434 <xQueueGenericSendFromISR+0x4c>
 8004436:	461f      	mov	r7, r3
 8004438:	4690      	mov	r8, r2
 800443a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800443c:	f001 fb54 	bl	8005ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004440:	f3ef 8611 	mrs	r6, BASEPRI
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004454:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004458:	429a      	cmp	r2, r3
 800445a:	d303      	bcc.n	8004464 <xQueueGenericSendFromISR+0x7c>
 800445c:	2f02      	cmp	r7, #2
 800445e:	d001      	beq.n	8004464 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8004460:	2000      	movs	r0, #0
 8004462:	e00f      	b.n	8004484 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004464:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8004468:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800446a:	463a      	mov	r2, r7
 800446c:	4649      	mov	r1, r9
 800446e:	4620      	mov	r0, r4
 8004470:	f7ff fdb6 	bl	8003fe0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004474:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004478:	d008      	beq.n	800448c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800447a:	1c6b      	adds	r3, r5, #1
 800447c:	b25b      	sxtb	r3, r3
 800447e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8004482:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004484:	f386 8811 	msr	BASEPRI, r6
}
 8004488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800448c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800448e:	b15b      	cbz	r3, 80044a8 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004490:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004494:	f000 fd3a 	bl	8004f0c <xTaskRemoveFromEventList>
 8004498:	b140      	cbz	r0, 80044ac <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800449a:	f1b8 0f00 	cmp.w	r8, #0
 800449e:	d007      	beq.n	80044b0 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044a0:	2001      	movs	r0, #1
 80044a2:	f8c8 0000 	str.w	r0, [r8]
 80044a6:	e7ed      	b.n	8004484 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 80044a8:	2001      	movs	r0, #1
 80044aa:	e7eb      	b.n	8004484 <xQueueGenericSendFromISR+0x9c>
 80044ac:	2001      	movs	r0, #1
 80044ae:	e7e9      	b.n	8004484 <xQueueGenericSendFromISR+0x9c>
 80044b0:	2001      	movs	r0, #1
 80044b2:	e7e7      	b.n	8004484 <xQueueGenericSendFromISR+0x9c>

080044b4 <xQueueReceive>:
{
 80044b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b6:	b085      	sub	sp, #20
 80044b8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80044ba:	b160      	cbz	r0, 80044d6 <xQueueReceive+0x22>
 80044bc:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044be:	b999      	cbnz	r1, 80044e8 <xQueueReceive+0x34>
 80044c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044c2:	b18b      	cbz	r3, 80044e8 <xQueueReceive+0x34>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	e7fe      	b.n	80044d4 <xQueueReceive+0x20>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	e7fe      	b.n	80044e6 <xQueueReceive+0x32>
 80044e8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ea:	f000 fdad 	bl	8005048 <xTaskGetSchedulerState>
 80044ee:	b950      	cbnz	r0, 8004506 <xQueueReceive+0x52>
 80044f0:	9b01      	ldr	r3, [sp, #4]
 80044f2:	b153      	cbz	r3, 800450a <xQueueReceive+0x56>
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	e7fe      	b.n	8004504 <xQueueReceive+0x50>
 8004506:	2600      	movs	r6, #0
 8004508:	e03e      	b.n	8004588 <xQueueReceive+0xd4>
 800450a:	2600      	movs	r6, #0
 800450c:	e03c      	b.n	8004588 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800450e:	4639      	mov	r1, r7
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff fda0 	bl	8004056 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004516:	3d01      	subs	r5, #1
 8004518:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	b923      	cbnz	r3, 8004528 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800451e:	f001 f9db 	bl	80058d8 <vPortExitCritical>
				return pdPASS;
 8004522:	2001      	movs	r0, #1
}
 8004524:	b005      	add	sp, #20
 8004526:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004528:	f104 0010 	add.w	r0, r4, #16
 800452c:	f000 fcee 	bl	8004f0c <xTaskRemoveFromEventList>
 8004530:	2800      	cmp	r0, #0
 8004532:	d0f4      	beq.n	800451e <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8004534:	4b34      	ldr	r3, [pc, #208]	; (8004608 <xQueueReceive+0x154>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	e7eb      	b.n	800451e <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8004546:	f001 f9c7 	bl	80058d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800454a:	2000      	movs	r0, #0
 800454c:	e7ea      	b.n	8004524 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800454e:	a802      	add	r0, sp, #8
 8004550:	f000 fd22 	bl	8004f98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004554:	2601      	movs	r6, #1
 8004556:	e021      	b.n	800459c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8004558:	2300      	movs	r3, #0
 800455a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800455e:	e029      	b.n	80045b4 <xQueueReceive+0x100>
 8004560:	2300      	movs	r3, #0
 8004562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004566:	e02b      	b.n	80045c0 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8004568:	4620      	mov	r0, r4
 800456a:	f7ff fd86 	bl	800407a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800456e:	f000 fbad 	bl	8004ccc <xTaskResumeAll>
 8004572:	e009      	b.n	8004588 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff fd80 	bl	800407a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800457a:	f000 fba7 	bl	8004ccc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff fd21 	bl	8003fc6 <prvIsQueueEmpty>
 8004584:	2800      	cmp	r0, #0
 8004586:	d13d      	bne.n	8004604 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8004588:	f001 f984 	bl	8005894 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800458c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800458e:	2d00      	cmp	r5, #0
 8004590:	d1bd      	bne.n	800450e <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004592:	9b01      	ldr	r3, [sp, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0d6      	beq.n	8004546 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8004598:	2e00      	cmp	r6, #0
 800459a:	d0d8      	beq.n	800454e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 800459c:	f001 f99c 	bl	80058d8 <vPortExitCritical>
		vTaskSuspendAll();
 80045a0:	f000 fafa 	bl	8004b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045a4:	f001 f976 	bl	8005894 <vPortEnterCritical>
 80045a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d0d1      	beq.n	8004558 <xQueueReceive+0xa4>
 80045b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d0cf      	beq.n	8004560 <xQueueReceive+0xac>
 80045c0:	f001 f98a 	bl	80058d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045c4:	a901      	add	r1, sp, #4
 80045c6:	a802      	add	r0, sp, #8
 80045c8:	f000 fcf2 	bl	8004fb0 <xTaskCheckForTimeOut>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d1d1      	bne.n	8004574 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7ff fcf8 	bl	8003fc6 <prvIsQueueEmpty>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d0c6      	beq.n	8004568 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045da:	9901      	ldr	r1, [sp, #4]
 80045dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045e0:	f000 fc60 	bl	8004ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff fd48 	bl	800407a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045ea:	f000 fb6f 	bl	8004ccc <xTaskResumeAll>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d1ca      	bne.n	8004588 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <xQueueReceive+0x154>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	e7c1      	b.n	8004588 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8004604:	2000      	movs	r0, #0
 8004606:	e78d      	b.n	8004524 <xQueueReceive+0x70>
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <xQueueReceiveFromISR>:
{
 800460c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004610:	b160      	cbz	r0, 800462c <xQueueReceiveFromISR+0x20>
 8004612:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004614:	b999      	cbnz	r1, 800463e <xQueueReceiveFromISR+0x32>
 8004616:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004618:	b18b      	cbz	r3, 800463e <xQueueReceiveFromISR+0x32>
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	e7fe      	b.n	800462a <xQueueReceiveFromISR+0x1e>
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	e7fe      	b.n	800463c <xQueueReceiveFromISR+0x30>
 800463e:	4617      	mov	r7, r2
 8004640:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004642:	f001 fa51 	bl	8005ae8 <vPortValidateInterruptPriority>
	__asm volatile
 8004646:	f3ef 8611 	mrs	r6, BASEPRI
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800465a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800465e:	f1b8 0f00 	cmp.w	r8, #0
 8004662:	d01d      	beq.n	80046a0 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004664:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004668:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800466a:	4649      	mov	r1, r9
 800466c:	4620      	mov	r0, r4
 800466e:	f7ff fcf2 	bl	8004056 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004672:	f108 33ff 	add.w	r3, r8, #4294967295
 8004676:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004678:	f1b5 3fff 	cmp.w	r5, #4294967295
 800467c:	d005      	beq.n	800468a <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800467e:	1c6b      	adds	r3, r5, #1
 8004680:	b25b      	sxtb	r3, r3
 8004682:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8004686:	2001      	movs	r0, #1
 8004688:	e00b      	b.n	80046a2 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	b16b      	cbz	r3, 80046aa <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800468e:	f104 0010 	add.w	r0, r4, #16
 8004692:	f000 fc3b 	bl	8004f0c <xTaskRemoveFromEventList>
 8004696:	b150      	cbz	r0, 80046ae <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8004698:	b15f      	cbz	r7, 80046b2 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800469a:	2001      	movs	r0, #1
 800469c:	6038      	str	r0, [r7, #0]
 800469e:	e000      	b.n	80046a2 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 80046a0:	2000      	movs	r0, #0
	__asm volatile
 80046a2:	f386 8811 	msr	BASEPRI, r6
}
 80046a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 80046aa:	2001      	movs	r0, #1
 80046ac:	e7f9      	b.n	80046a2 <xQueueReceiveFromISR+0x96>
 80046ae:	2001      	movs	r0, #1
 80046b0:	e7f7      	b.n	80046a2 <xQueueReceiveFromISR+0x96>
 80046b2:	2001      	movs	r0, #1
 80046b4:	e7f5      	b.n	80046a2 <xQueueReceiveFromISR+0x96>
	...

080046b8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b07      	cmp	r3, #7
 80046bc:	d80c      	bhi.n	80046d8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046be:	4a07      	ldr	r2, [pc, #28]	; (80046dc <vQueueAddToRegistry+0x24>)
 80046c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80046c4:	b10a      	cbz	r2, 80046ca <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046c6:	3301      	adds	r3, #1
 80046c8:	e7f7      	b.n	80046ba <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046ca:	4a04      	ldr	r2, [pc, #16]	; (80046dc <vQueueAddToRegistry+0x24>)
 80046cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046d4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046d6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20001cf0 	.word	0x20001cf0

080046e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4604      	mov	r4, r0
 80046e4:	460d      	mov	r5, r1
 80046e6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046e8:	f001 f8d4 	bl	8005894 <vPortEnterCritical>
 80046ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046f0:	b25b      	sxtb	r3, r3
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d00d      	beq.n	8004714 <vQueueWaitForMessageRestricted+0x34>
 80046f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046fc:	b25b      	sxtb	r3, r3
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d00b      	beq.n	800471c <vQueueWaitForMessageRestricted+0x3c>
 8004704:	f001 f8e8 	bl	80058d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800470a:	b15b      	cbz	r3, 8004724 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff fcb4 	bl	800407a <prvUnlockQueue>
	}
 8004712:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8004714:	2300      	movs	r3, #0
 8004716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800471a:	e7ed      	b.n	80046f8 <vQueueWaitForMessageRestricted+0x18>
 800471c:	2300      	movs	r3, #0
 800471e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004722:	e7ef      	b.n	8004704 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004724:	4632      	mov	r2, r6
 8004726:	4629      	mov	r1, r5
 8004728:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800472c:	f000 fbd2 	bl	8004ed4 <vTaskPlaceOnEventListRestricted>
 8004730:	e7ec      	b.n	800470c <vQueueWaitForMessageRestricted+0x2c>
	...

08004734 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <prvResetNextTaskUnblockTime+0x24>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	b13b      	cbz	r3, 800474c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <prvResetNextTaskUnblockTime+0x24>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <prvResetNextTaskUnblockTime+0x28>)
 8004748:	601a      	str	r2, [r3, #0]
	}
}
 800474a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800474c:	4b03      	ldr	r3, [pc, #12]	; (800475c <prvResetNextTaskUnblockTime+0x28>)
 800474e:	f04f 32ff 	mov.w	r2, #4294967295
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000750 	.word	0x20000750
 800475c:	20000bf8 	.word	0x20000bf8

08004760 <prvInitialiseNewTask>:
{
 8004760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	4681      	mov	r9, r0
 8004766:	460d      	mov	r5, r1
 8004768:	4617      	mov	r7, r2
 800476a:	469a      	mov	sl, r3
 800476c:	9e08      	ldr	r6, [sp, #32]
 800476e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004772:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004774:	0092      	lsls	r2, r2, #2
 8004776:	21a5      	movs	r1, #165	; 0xa5
 8004778:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800477a:	f001 fb2c 	bl	8005dd6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800477e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004780:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8004784:	3a01      	subs	r2, #1
 8004786:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800478a:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800478e:	2300      	movs	r3, #0
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d807      	bhi.n	80047a4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004794:	5ce9      	ldrb	r1, [r5, r3]
 8004796:	18e2      	adds	r2, r4, r3
 8004798:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800479c:	5cea      	ldrb	r2, [r5, r3]
 800479e:	b10a      	cbz	r2, 80047a4 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047a0:	3301      	adds	r3, #1
 80047a2:	e7f5      	b.n	8004790 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047a4:	2300      	movs	r3, #0
 80047a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047aa:	2e37      	cmp	r6, #55	; 0x37
 80047ac:	d900      	bls.n	80047b0 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047ae:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80047b0:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80047b2:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047b4:	2500      	movs	r5, #0
 80047b6:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047b8:	1d20      	adds	r0, r4, #4
 80047ba:	f7ff fbb8 	bl	8003f2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047be:	f104 0018 	add.w	r0, r4, #24
 80047c2:	f7ff fbb4 	bl	8003f2e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047c6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c8:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 80047cc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047ce:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80047d0:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047d2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047d6:	4652      	mov	r2, sl
 80047d8:	4649      	mov	r1, r9
 80047da:	4638      	mov	r0, r7
 80047dc:	f001 f830 	bl	8005840 <pxPortInitialiseStack>
 80047e0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80047e2:	f1b8 0f00 	cmp.w	r8, #0
 80047e6:	d001      	beq.n	80047ec <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047e8:	f8c8 4000 	str.w	r4, [r8]
}
 80047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080047f0 <prvInitialiseTaskLists>:
{
 80047f0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047f2:	2400      	movs	r4, #0
 80047f4:	e007      	b.n	8004806 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80047fa:	0093      	lsls	r3, r2, #2
 80047fc:	480e      	ldr	r0, [pc, #56]	; (8004838 <prvInitialiseTaskLists+0x48>)
 80047fe:	4418      	add	r0, r3
 8004800:	f7ff fb8a 	bl	8003f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004804:	3401      	adds	r4, #1
 8004806:	2c37      	cmp	r4, #55	; 0x37
 8004808:	d9f5      	bls.n	80047f6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800480a:	4d0c      	ldr	r5, [pc, #48]	; (800483c <prvInitialiseTaskLists+0x4c>)
 800480c:	4628      	mov	r0, r5
 800480e:	f7ff fb83 	bl	8003f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004812:	4c0b      	ldr	r4, [pc, #44]	; (8004840 <prvInitialiseTaskLists+0x50>)
 8004814:	4620      	mov	r0, r4
 8004816:	f7ff fb7f 	bl	8003f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800481a:	480a      	ldr	r0, [pc, #40]	; (8004844 <prvInitialiseTaskLists+0x54>)
 800481c:	f7ff fb7c 	bl	8003f18 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004820:	4809      	ldr	r0, [pc, #36]	; (8004848 <prvInitialiseTaskLists+0x58>)
 8004822:	f7ff fb79 	bl	8003f18 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004826:	4809      	ldr	r0, [pc, #36]	; (800484c <prvInitialiseTaskLists+0x5c>)
 8004828:	f7ff fb76 	bl	8003f18 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <prvInitialiseTaskLists+0x60>)
 800482e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <prvInitialiseTaskLists+0x64>)
 8004832:	601c      	str	r4, [r3, #0]
}
 8004834:	bd38      	pop	{r3, r4, r5, pc}
 8004836:	bf00      	nop
 8004838:	20000758 	.word	0x20000758
 800483c:	20000bd0 	.word	0x20000bd0
 8004840:	20000be4 	.word	0x20000be4
 8004844:	20000c00 	.word	0x20000c00
 8004848:	20000c2c 	.word	0x20000c2c
 800484c:	20000c18 	.word	0x20000c18
 8004850:	20000750 	.word	0x20000750
 8004854:	20000754 	.word	0x20000754

08004858 <prvAddNewTaskToReadyList>:
{
 8004858:	b510      	push	{r4, lr}
 800485a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800485c:	f001 f81a 	bl	8005894 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004860:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <prvAddNewTaskToReadyList+0x90>)
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004868:	4b20      	ldr	r3, [pc, #128]	; (80048ec <prvAddNewTaskToReadyList+0x94>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b15b      	cbz	r3, 8004886 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <prvAddNewTaskToReadyList+0x98>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	b96b      	cbnz	r3, 8004890 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004874:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <prvAddNewTaskToReadyList+0x94>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800487c:	429a      	cmp	r2, r3
 800487e:	d807      	bhi.n	8004890 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <prvAddNewTaskToReadyList+0x94>)
 8004882:	601c      	str	r4, [r3, #0]
 8004884:	e004      	b.n	8004890 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8004886:	4b19      	ldr	r3, [pc, #100]	; (80048ec <prvAddNewTaskToReadyList+0x94>)
 8004888:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d027      	beq.n	80048e0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8004890:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <prvAddNewTaskToReadyList+0x9c>)
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004898:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800489a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800489c:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <prvAddNewTaskToReadyList+0xa0>)
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <prvAddNewTaskToReadyList+0x50>
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <prvAddNewTaskToReadyList+0xa0>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80048ac:	009a      	lsls	r2, r3, #2
 80048ae:	1d21      	adds	r1, r4, #4
 80048b0:	4812      	ldr	r0, [pc, #72]	; (80048fc <prvAddNewTaskToReadyList+0xa4>)
 80048b2:	4410      	add	r0, r2
 80048b4:	f7ff fb3e 	bl	8003f34 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80048b8:	f001 f80e 	bl	80058d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <prvAddNewTaskToReadyList+0x98>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	b16b      	cbz	r3, 80048de <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <prvAddNewTaskToReadyList+0x94>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d207      	bcs.n	80048de <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 80048ce:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <prvAddNewTaskToReadyList+0xa8>)
 80048d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	f3bf 8f6f 	isb	sy
}
 80048de:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80048e0:	f7ff ff86 	bl	80047f0 <prvInitialiseTaskLists>
 80048e4:	e7d4      	b.n	8004890 <prvAddNewTaskToReadyList+0x38>
 80048e6:	bf00      	nop
 80048e8:	20000bb8 	.word	0x20000bb8
 80048ec:	2000074c 	.word	0x2000074c
 80048f0:	20000c14 	.word	0x20000c14
 80048f4:	20000bc8 	.word	0x20000bc8
 80048f8:	20000bcc 	.word	0x20000bcc
 80048fc:	20000758 	.word	0x20000758
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <prvDeleteTCB>:
	{
 8004904:	b510      	push	{r4, lr}
 8004906:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004908:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800490c:	b933      	cbnz	r3, 800491c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800490e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004910:	f001 f9fa 	bl	8005d08 <vPortFree>
				vPortFree( pxTCB );
 8004914:	4620      	mov	r0, r4
 8004916:	f001 f9f7 	bl	8005d08 <vPortFree>
	}
 800491a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800491c:	2b01      	cmp	r3, #1
 800491e:	d00a      	beq.n	8004936 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004920:	2b02      	cmp	r3, #2
 8004922:	d0fa      	beq.n	800491a <prvDeleteTCB+0x16>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	e7fe      	b.n	8004934 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8004936:	f001 f9e7 	bl	8005d08 <vPortFree>
 800493a:	e7ee      	b.n	800491a <prvDeleteTCB+0x16>

0800493c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <prvCheckTasksWaitingTermination+0x40>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	b1d3      	cbz	r3, 8004978 <prvCheckTasksWaitingTermination+0x3c>
{
 8004942:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8004944:	f000 ffa6 	bl	8005894 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <prvCheckTasksWaitingTermination+0x44>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494e:	1d20      	adds	r0, r4, #4
 8004950:	f7ff fb16 	bl	8003f80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004954:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <prvCheckTasksWaitingTermination+0x48>)
 8004956:	6813      	ldr	r3, [r2, #0]
 8004958:	3b01      	subs	r3, #1
 800495a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800495c:	4a07      	ldr	r2, [pc, #28]	; (800497c <prvCheckTasksWaitingTermination+0x40>)
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8004964:	f000 ffb8 	bl	80058d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004968:	4620      	mov	r0, r4
 800496a:	f7ff ffcb 	bl	8004904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800496e:	4b03      	ldr	r3, [pc, #12]	; (800497c <prvCheckTasksWaitingTermination+0x40>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <prvCheckTasksWaitingTermination+0x8>
}
 8004976:	bd10      	pop	{r4, pc}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000bbc 	.word	0x20000bbc
 8004980:	20000c2c 	.word	0x20000c2c
 8004984:	20000bb8 	.word	0x20000bb8

08004988 <prvIdleTask>:
{
 8004988:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800498a:	f7ff ffd7 	bl	800493c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <prvIdleTask+0x20>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d9f9      	bls.n	800498a <prvIdleTask+0x2>
				taskYIELD();
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <prvIdleTask+0x24>)
 8004998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	e7f0      	b.n	800498a <prvIdleTask+0x2>
 80049a8:	20000758 	.word	0x20000758
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4604      	mov	r4, r0
 80049b4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049b6:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <prvAddCurrentTaskToDelayedList+0x64>)
 80049b8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049ba:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <prvAddCurrentTaskToDelayedList+0x68>)
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	3004      	adds	r0, #4
 80049c0:	f7ff fade 	bl	8003f80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80049c8:	d013      	beq.n	80049f2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049ca:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <prvAddCurrentTaskToDelayedList+0x68>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80049d2:	42a5      	cmp	r5, r4
 80049d4:	d816      	bhi.n	8004a04 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <prvAddCurrentTaskToDelayedList+0x6c>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <prvAddCurrentTaskToDelayedList+0x68>)
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	3104      	adds	r1, #4
 80049e0:	f7ff fab4 	bl	8003f4c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <prvAddCurrentTaskToDelayedList+0x70>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	d912      	bls.n	8004a12 <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <prvAddCurrentTaskToDelayedList+0x70>)
 80049ee:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049f0:	e00f      	b.n	8004a12 <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049f2:	2e00      	cmp	r6, #0
 80049f4:	d0e9      	beq.n	80049ca <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <prvAddCurrentTaskToDelayedList+0x68>)
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	3104      	adds	r1, #4
 80049fc:	4809      	ldr	r0, [pc, #36]	; (8004a24 <prvAddCurrentTaskToDelayedList+0x74>)
 80049fe:	f7ff fa99 	bl	8003f34 <vListInsertEnd>
 8004a02:	e006      	b.n	8004a12 <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <prvAddCurrentTaskToDelayedList+0x78>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <prvAddCurrentTaskToDelayedList+0x68>)
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	3104      	adds	r1, #4
 8004a0e:	f7ff fa9d 	bl	8003f4c <vListInsert>
}
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	20000c40 	.word	0x20000c40
 8004a18:	2000074c 	.word	0x2000074c
 8004a1c:	20000750 	.word	0x20000750
 8004a20:	20000bf8 	.word	0x20000bf8
 8004a24:	20000c18 	.word	0x20000c18
 8004a28:	20000754 	.word	0x20000754

08004a2c <xTaskCreateStatic>:
	{
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004a32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004a34:	b945      	cbnz	r5, 8004a48 <xTaskCreateStatic+0x1c>
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	e7fe      	b.n	8004a46 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004a48:	b944      	cbnz	r4, 8004a5c <xTaskCreateStatic+0x30>
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	e7fe      	b.n	8004a5a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a5c:	265c      	movs	r6, #92	; 0x5c
 8004a5e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a60:	9e04      	ldr	r6, [sp, #16]
 8004a62:	2e5c      	cmp	r6, #92	; 0x5c
 8004a64:	d008      	beq.n	8004a78 <xTaskCreateStatic+0x4c>
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	e7fe      	b.n	8004a76 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a78:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a7a:	2502      	movs	r5, #2
 8004a7c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a80:	2500      	movs	r5, #0
 8004a82:	9503      	str	r5, [sp, #12]
 8004a84:	9402      	str	r4, [sp, #8]
 8004a86:	ad05      	add	r5, sp, #20
 8004a88:	9501      	str	r5, [sp, #4]
 8004a8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004a8c:	9500      	str	r5, [sp, #0]
 8004a8e:	f7ff fe67 	bl	8004760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff fee0 	bl	8004858 <prvAddNewTaskToReadyList>
	}
 8004a98:	9805      	ldr	r0, [sp, #20]
 8004a9a:	b006      	add	sp, #24
 8004a9c:	bd70      	pop	{r4, r5, r6, pc}

08004a9e <xTaskCreate>:
	{
 8004a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	4688      	mov	r8, r1
 8004aa8:	4615      	mov	r5, r2
 8004aaa:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aac:	0090      	lsls	r0, r2, #2
 8004aae:	f001 f8a7 	bl	8005c00 <pvPortMalloc>
			if( pxStack != NULL )
 8004ab2:	b308      	cbz	r0, 8004af8 <xTaskCreate+0x5a>
 8004ab4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ab6:	205c      	movs	r0, #92	; 0x5c
 8004ab8:	f001 f8a2 	bl	8005c00 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004abc:	4604      	mov	r4, r0
 8004abe:	b1b8      	cbz	r0, 8004af0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8004ac0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8004ac2:	b1e4      	cbz	r4, 8004afe <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aca:	9303      	str	r3, [sp, #12]
 8004acc:	9402      	str	r4, [sp, #8]
 8004ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4641      	mov	r1, r8
 8004adc:	4638      	mov	r0, r7
 8004ade:	f7ff fe3f 	bl	8004760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff feb8 	bl	8004858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ae8:	2001      	movs	r0, #1
	}
 8004aea:	b005      	add	sp, #20
 8004aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004af0:	4630      	mov	r0, r6
 8004af2:	f001 f909 	bl	8005d08 <vPortFree>
 8004af6:	e7e4      	b.n	8004ac2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295
 8004afc:	e7f5      	b.n	8004aea <xTaskCreate+0x4c>
 8004afe:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004b02:	e7f2      	b.n	8004aea <xTaskCreate+0x4c>

08004b04 <vTaskStartScheduler>:
{
 8004b04:	b510      	push	{r4, lr}
 8004b06:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b08:	2400      	movs	r4, #0
 8004b0a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b0c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b0e:	aa07      	add	r2, sp, #28
 8004b10:	a906      	add	r1, sp, #24
 8004b12:	a805      	add	r0, sp, #20
 8004b14:	f7ff f9e8 	bl	8003ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	9302      	str	r3, [sp, #8]
 8004b1c:	9b06      	ldr	r3, [sp, #24]
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	9400      	str	r4, [sp, #0]
 8004b22:	4623      	mov	r3, r4
 8004b24:	9a07      	ldr	r2, [sp, #28]
 8004b26:	4917      	ldr	r1, [pc, #92]	; (8004b84 <vTaskStartScheduler+0x80>)
 8004b28:	4817      	ldr	r0, [pc, #92]	; (8004b88 <vTaskStartScheduler+0x84>)
 8004b2a:	f7ff ff7f 	bl	8004a2c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004b2e:	b140      	cbz	r0, 8004b42 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8004b30:	f000 fc9a 	bl	8005468 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004b34:	2801      	cmp	r0, #1
 8004b36:	d006      	beq.n	8004b46 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b3c:	d018      	beq.n	8004b70 <vTaskStartScheduler+0x6c>
}
 8004b3e:	b008      	add	sp, #32
 8004b40:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8004b42:	2000      	movs	r0, #0
 8004b44:	e7f6      	b.n	8004b34 <vTaskStartScheduler+0x30>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <vTaskStartScheduler+0x88>)
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <vTaskStartScheduler+0x8c>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <vTaskStartScheduler+0x90>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004b6a:	f000 ff35 	bl	80059d8 <xPortStartScheduler>
 8004b6e:	e7e6      	b.n	8004b3e <vTaskStartScheduler+0x3a>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	e7fe      	b.n	8004b80 <vTaskStartScheduler+0x7c>
 8004b82:	bf00      	nop
 8004b84:	08005e7c 	.word	0x08005e7c
 8004b88:	08004989 	.word	0x08004989
 8004b8c:	20000bf8 	.word	0x20000bf8
 8004b90:	20000c14 	.word	0x20000c14
 8004b94:	20000c40 	.word	0x20000c40

08004b98 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004b98:	4a02      	ldr	r2, [pc, #8]	; (8004ba4 <vTaskSuspendAll+0xc>)
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	6013      	str	r3, [r2, #0]
}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000bc4 	.word	0x20000bc4

08004ba8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004ba8:	4b01      	ldr	r3, [pc, #4]	; (8004bb0 <xTaskGetTickCount+0x8>)
 8004baa:	6818      	ldr	r0, [r3, #0]
}
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20000c40 	.word	0x20000c40

08004bb4 <xTaskIncrementTick>:
{
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb6:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <xTaskIncrementTick+0xec>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d164      	bne.n	8004c88 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bbe:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <xTaskIncrementTick+0xf0>)
 8004bc0:	681d      	ldr	r5, [r3, #0]
 8004bc2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004bc4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bc6:	b9c5      	cbnz	r5, 8004bfa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004bc8:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <xTaskIncrementTick+0xf4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	b143      	cbz	r3, 8004be2 <xTaskIncrementTick+0x2e>
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	e7fe      	b.n	8004be0 <xTaskIncrementTick+0x2c>
 8004be2:	4a31      	ldr	r2, [pc, #196]	; (8004ca8 <xTaskIncrementTick+0xf4>)
 8004be4:	6811      	ldr	r1, [r2, #0]
 8004be6:	4b31      	ldr	r3, [pc, #196]	; (8004cac <xTaskIncrementTick+0xf8>)
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	6019      	str	r1, [r3, #0]
 8004bee:	4a30      	ldr	r2, [pc, #192]	; (8004cb0 <xTaskIncrementTick+0xfc>)
 8004bf0:	6813      	ldr	r3, [r2, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	f7ff fd9d 	bl	8004734 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bfa:	4b2e      	ldr	r3, [pc, #184]	; (8004cb4 <xTaskIncrementTick+0x100>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	42ab      	cmp	r3, r5
 8004c00:	d938      	bls.n	8004c74 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8004c02:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <xTaskIncrementTick+0x104>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c0e:	009a      	lsls	r2, r3, #2
 8004c10:	4b2a      	ldr	r3, [pc, #168]	; (8004cbc <xTaskIncrementTick+0x108>)
 8004c12:	589b      	ldr	r3, [r3, r2]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d93c      	bls.n	8004c92 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8004c18:	2401      	movs	r4, #1
 8004c1a:	e03a      	b.n	8004c92 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8004c1c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1e:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <xTaskIncrementTick+0xf4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	b343      	cbz	r3, 8004c78 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c26:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <xTaskIncrementTick+0xf4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c2e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004c30:	429d      	cmp	r5, r3
 8004c32:	d326      	bcc.n	8004c82 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c34:	1d37      	adds	r7, r6, #4
 8004c36:	4638      	mov	r0, r7
 8004c38:	f7ff f9a2 	bl	8003f80 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c3c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004c3e:	b11b      	cbz	r3, 8004c48 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c40:	f106 0018 	add.w	r0, r6, #24
 8004c44:	f7ff f99c 	bl	8003f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c48:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <xTaskIncrementTick+0x10c>)
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <xTaskIncrementTick+0xa2>
 8004c52:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <xTaskIncrementTick+0x10c>)
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c5a:	009a      	lsls	r2, r3, #2
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	4817      	ldr	r0, [pc, #92]	; (8004cbc <xTaskIncrementTick+0x108>)
 8004c60:	4410      	add	r0, r2
 8004c62:	f7ff f967 	bl	8003f34 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c66:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <xTaskIncrementTick+0x104>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d2d4      	bcs.n	8004c1c <xTaskIncrementTick+0x68>
 8004c72:	e7d4      	b.n	8004c1e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8004c74:	2400      	movs	r4, #0
 8004c76:	e7d2      	b.n	8004c1e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <xTaskIncrementTick+0x100>)
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7e:	601a      	str	r2, [r3, #0]
					break;
 8004c80:	e7c0      	b.n	8004c04 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8004c82:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <xTaskIncrementTick+0x100>)
 8004c84:	6013      	str	r3, [r2, #0]
						break;
 8004c86:	e7bd      	b.n	8004c04 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8004c88:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <xTaskIncrementTick+0x110>)
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004c90:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <xTaskIncrementTick+0x114>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8004c98:	2401      	movs	r4, #1
}
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000bc4 	.word	0x20000bc4
 8004ca4:	20000c40 	.word	0x20000c40
 8004ca8:	20000750 	.word	0x20000750
 8004cac:	20000754 	.word	0x20000754
 8004cb0:	20000bfc 	.word	0x20000bfc
 8004cb4:	20000bf8 	.word	0x20000bf8
 8004cb8:	2000074c 	.word	0x2000074c
 8004cbc:	20000758 	.word	0x20000758
 8004cc0:	20000bcc 	.word	0x20000bcc
 8004cc4:	20000bc0 	.word	0x20000bc0
 8004cc8:	20000c44 	.word	0x20000c44

08004ccc <xTaskResumeAll>:
{
 8004ccc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <xTaskResumeAll+0xd0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	b943      	cbnz	r3, 8004ce6 <xTaskResumeAll+0x1a>
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	e7fe      	b.n	8004ce4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8004ce6:	f000 fdd5 	bl	8005894 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <xTaskResumeAll+0xd0>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d14d      	bne.n	8004d94 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <xTaskResumeAll+0xd4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	b923      	cbnz	r3, 8004d08 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8004cfe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004d00:	f000 fdea 	bl	80058d8 <vPortExitCritical>
}
 8004d04:	4620      	mov	r0, r4
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8004d08:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <xTaskResumeAll+0xd8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b31b      	cbz	r3, 8004d58 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <xTaskResumeAll+0xd8>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d16:	f104 0018 	add.w	r0, r4, #24
 8004d1a:	f7ff f931 	bl	8003f80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d1e:	1d25      	adds	r5, r4, #4
 8004d20:	4628      	mov	r0, r5
 8004d22:	f7ff f92d 	bl	8003f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d28:	4a1f      	ldr	r2, [pc, #124]	; (8004da8 <xTaskResumeAll+0xdc>)
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <xTaskResumeAll+0x68>
 8004d30:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <xTaskResumeAll+0xdc>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d38:	009a      	lsls	r2, r3, #2
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	481b      	ldr	r0, [pc, #108]	; (8004dac <xTaskResumeAll+0xe0>)
 8004d3e:	4410      	add	r0, r2
 8004d40:	f7ff f8f8 	bl	8003f34 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d46:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <xTaskResumeAll+0xe4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d3dc      	bcc.n	8004d0a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8004d50:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <xTaskResumeAll+0xe8>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e7d8      	b.n	8004d0a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8004d58:	b10c      	cbz	r4, 8004d5e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8004d5a:	f7ff fceb 	bl	8004734 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <xTaskResumeAll+0xec>)
 8004d60:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d62:	b154      	cbz	r4, 8004d7a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8004d64:	f7ff ff26 	bl	8004bb4 <xTaskIncrementTick>
 8004d68:	b110      	cbz	r0, 8004d70 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <xTaskResumeAll+0xe8>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d70:	3c01      	subs	r4, #1
 8004d72:	d1f7      	bne.n	8004d64 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <xTaskResumeAll+0xec>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <xTaskResumeAll+0xe8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b15b      	cbz	r3, 8004d98 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <xTaskResumeAll+0xf0>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004d90:	2401      	movs	r4, #1
 8004d92:	e7b5      	b.n	8004d00 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8004d94:	2400      	movs	r4, #0
 8004d96:	e7b3      	b.n	8004d00 <xTaskResumeAll+0x34>
 8004d98:	2400      	movs	r4, #0
 8004d9a:	e7b1      	b.n	8004d00 <xTaskResumeAll+0x34>
 8004d9c:	20000bc4 	.word	0x20000bc4
 8004da0:	20000bb8 	.word	0x20000bb8
 8004da4:	20000c00 	.word	0x20000c00
 8004da8:	20000bcc 	.word	0x20000bcc
 8004dac:	20000758 	.word	0x20000758
 8004db0:	2000074c 	.word	0x2000074c
 8004db4:	20000c44 	.word	0x20000c44
 8004db8:	20000bc0 	.word	0x20000bc0
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <vTaskDelay>:
	{
 8004dc0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dc2:	b1a8      	cbz	r0, 8004df0 <vTaskDelay+0x30>
 8004dc4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <vTaskDelay+0x44>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	b143      	cbz	r3, 8004dde <vTaskDelay+0x1e>
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	e7fe      	b.n	8004ddc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004dde:	f7ff fedb 	bl	8004b98 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004de2:	2100      	movs	r1, #0
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7ff fde3 	bl	80049b0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004dea:	f7ff ff6f 	bl	8004ccc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004dee:	b938      	cbnz	r0, 8004e00 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <vTaskDelay+0x48>)
 8004df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
	}
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	bf00      	nop
 8004e04:	20000bc4 	.word	0x20000bc4
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e0c:	4b20      	ldr	r3, [pc, #128]	; (8004e90 <vTaskSwitchContext+0x84>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	b11b      	cbz	r3, 8004e1a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <vTaskSwitchContext+0x88>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <vTaskSwitchContext+0x88>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e20:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <vTaskSwitchContext+0x8c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e28:	008a      	lsls	r2, r1, #2
 8004e2a:	491c      	ldr	r1, [pc, #112]	; (8004e9c <vTaskSwitchContext+0x90>)
 8004e2c:	588a      	ldr	r2, [r1, r2]
 8004e2e:	b95a      	cbnz	r2, 8004e48 <vTaskSwitchContext+0x3c>
 8004e30:	b10b      	cbz	r3, 8004e36 <vTaskSwitchContext+0x2a>
 8004e32:	3b01      	subs	r3, #1
 8004e34:	e7f6      	b.n	8004e24 <vTaskSwitchContext+0x18>
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	e7fe      	b.n	8004e46 <vTaskSwitchContext+0x3a>
{
 8004e48:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	009a      	lsls	r2, r3, #2
 8004e4e:	18d4      	adds	r4, r2, r3
 8004e50:	00a1      	lsls	r1, r4, #2
 8004e52:	4401      	add	r1, r0
 8004e54:	684c      	ldr	r4, [r1, #4]
 8004e56:	6864      	ldr	r4, [r4, #4]
 8004e58:	604c      	str	r4, [r1, #4]
 8004e5a:	441a      	add	r2, r3
 8004e5c:	0091      	lsls	r1, r2, #2
 8004e5e:	3108      	adds	r1, #8
 8004e60:	4408      	add	r0, r1
 8004e62:	4284      	cmp	r4, r0
 8004e64:	d00d      	beq.n	8004e82 <vTaskSwitchContext+0x76>
 8004e66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004e6a:	0091      	lsls	r1, r2, #2
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <vTaskSwitchContext+0x90>)
 8004e6e:	440a      	add	r2, r1
 8004e70:	6852      	ldr	r2, [r2, #4]
 8004e72:	68d1      	ldr	r1, [r2, #12]
 8004e74:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <vTaskSwitchContext+0x94>)
 8004e76:	6011      	str	r1, [r2, #0]
 8004e78:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <vTaskSwitchContext+0x8c>)
 8004e7a:	6013      	str	r3, [r2, #0]
}
 8004e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e80:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e82:	6861      	ldr	r1, [r4, #4]
 8004e84:	4805      	ldr	r0, [pc, #20]	; (8004e9c <vTaskSwitchContext+0x90>)
 8004e86:	2214      	movs	r2, #20
 8004e88:	fb02 0203 	mla	r2, r2, r3, r0
 8004e8c:	6051      	str	r1, [r2, #4]
 8004e8e:	e7ea      	b.n	8004e66 <vTaskSwitchContext+0x5a>
 8004e90:	20000bc4 	.word	0x20000bc4
 8004e94:	20000c44 	.word	0x20000c44
 8004e98:	20000bcc 	.word	0x20000bcc
 8004e9c:	20000758 	.word	0x20000758
 8004ea0:	2000074c 	.word	0x2000074c

08004ea4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004ea4:	b940      	cbnz	r0, 8004eb8 <vTaskPlaceOnEventList+0x14>
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	e7fe      	b.n	8004eb6 <vTaskPlaceOnEventList+0x12>
{
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <vTaskPlaceOnEventList+0x2c>)
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	3118      	adds	r1, #24
 8004ec2:	f7ff f843 	bl	8003f4c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff fd71 	bl	80049b0 <prvAddCurrentTaskToDelayedList>
}
 8004ece:	bd10      	pop	{r4, pc}
 8004ed0:	2000074c 	.word	0x2000074c

08004ed4 <vTaskPlaceOnEventListRestricted>:
	{
 8004ed4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004ed6:	b940      	cbnz	r0, 8004eea <vTaskPlaceOnEventListRestricted+0x16>
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	e7fe      	b.n	8004ee8 <vTaskPlaceOnEventListRestricted+0x14>
 8004eea:	460c      	mov	r4, r1
 8004eec:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eee:	4a06      	ldr	r2, [pc, #24]	; (8004f08 <vTaskPlaceOnEventListRestricted+0x34>)
 8004ef0:	6811      	ldr	r1, [r2, #0]
 8004ef2:	3118      	adds	r1, #24
 8004ef4:	f7ff f81e 	bl	8003f34 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8004ef8:	b10d      	cbz	r5, 8004efe <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8004efa:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004efe:	4629      	mov	r1, r5
 8004f00:	4620      	mov	r0, r4
 8004f02:	f7ff fd55 	bl	80049b0 <prvAddCurrentTaskToDelayedList>
	}
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	2000074c 	.word	0x2000074c

08004f0c <xTaskRemoveFromEventList>:
{
 8004f0c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f0e:	68c3      	ldr	r3, [r0, #12]
 8004f10:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004f12:	b944      	cbnz	r4, 8004f26 <xTaskRemoveFromEventList+0x1a>
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	e7fe      	b.n	8004f24 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f26:	f104 0518 	add.w	r5, r4, #24
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f7ff f828 	bl	8003f80 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f30:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <xTaskRemoveFromEventList+0x74>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b9e3      	cbnz	r3, 8004f70 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f36:	1d25      	adds	r5, r4, #4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7ff f821 	bl	8003f80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f40:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <xTaskRemoveFromEventList+0x78>)
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <xTaskRemoveFromEventList+0x40>
 8004f48:	4a0e      	ldr	r2, [pc, #56]	; (8004f84 <xTaskRemoveFromEventList+0x78>)
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f50:	009a      	lsls	r2, r3, #2
 8004f52:	4629      	mov	r1, r5
 8004f54:	480c      	ldr	r0, [pc, #48]	; (8004f88 <xTaskRemoveFromEventList+0x7c>)
 8004f56:	4410      	add	r0, r2
 8004f58:	f7fe ffec 	bl	8003f34 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <xTaskRemoveFromEventList+0x80>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d908      	bls.n	8004f7a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8004f68:	2001      	movs	r0, #1
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <xTaskRemoveFromEventList+0x84>)
 8004f6c:	6018      	str	r0, [r3, #0]
}
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f70:	4629      	mov	r1, r5
 8004f72:	4808      	ldr	r0, [pc, #32]	; (8004f94 <xTaskRemoveFromEventList+0x88>)
 8004f74:	f7fe ffde 	bl	8003f34 <vListInsertEnd>
 8004f78:	e7f0      	b.n	8004f5c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8004f7a:	2000      	movs	r0, #0
	return xReturn;
 8004f7c:	e7f7      	b.n	8004f6e <xTaskRemoveFromEventList+0x62>
 8004f7e:	bf00      	nop
 8004f80:	20000bc4 	.word	0x20000bc4
 8004f84:	20000bcc 	.word	0x20000bcc
 8004f88:	20000758 	.word	0x20000758
 8004f8c:	2000074c 	.word	0x2000074c
 8004f90:	20000c44 	.word	0x20000c44
 8004f94:	20000c00 	.word	0x20000c00

08004f98 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <vTaskInternalSetTimeOutState+0x10>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f9e:	4b03      	ldr	r3, [pc, #12]	; (8004fac <vTaskInternalSetTimeOutState+0x14>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6043      	str	r3, [r0, #4]
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000bfc 	.word	0x20000bfc
 8004fac:	20000c40 	.word	0x20000c40

08004fb0 <xTaskCheckForTimeOut>:
{
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8004fb2:	b150      	cbz	r0, 8004fca <xTaskCheckForTimeOut+0x1a>
 8004fb4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004fb6:	b989      	cbnz	r1, 8004fdc <xTaskCheckForTimeOut+0x2c>
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	e7fe      	b.n	8004fc8 <xTaskCheckForTimeOut+0x18>
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	e7fe      	b.n	8004fda <xTaskCheckForTimeOut+0x2a>
 8004fdc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8004fde:	f000 fc59 	bl	8005894 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <xTaskCheckForTimeOut+0x78>)
 8004fe4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fe6:	6868      	ldr	r0, [r5, #4]
 8004fe8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d016      	beq.n	8005020 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ff2:	682f      	ldr	r7, [r5, #0]
 8004ff4:	4e0d      	ldr	r6, [pc, #52]	; (800502c <xTaskCheckForTimeOut+0x7c>)
 8004ff6:	6836      	ldr	r6, [r6, #0]
 8004ff8:	42b7      	cmp	r7, r6
 8004ffa:	d001      	beq.n	8005000 <xTaskCheckForTimeOut+0x50>
 8004ffc:	4288      	cmp	r0, r1
 8004ffe:	d911      	bls.n	8005024 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005000:	4293      	cmp	r3, r2
 8005002:	d803      	bhi.n	800500c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005008:	2401      	movs	r4, #1
 800500a:	e005      	b.n	8005018 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005010:	4628      	mov	r0, r5
 8005012:	f7ff ffc1 	bl	8004f98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005016:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005018:	f000 fc5e 	bl	80058d8 <vPortExitCritical>
}
 800501c:	4620      	mov	r0, r4
 800501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8005020:	2400      	movs	r4, #0
 8005022:	e7f9      	b.n	8005018 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8005024:	2401      	movs	r4, #1
 8005026:	e7f7      	b.n	8005018 <xTaskCheckForTimeOut+0x68>
 8005028:	20000c40 	.word	0x20000c40
 800502c:	20000bfc 	.word	0x20000bfc

08005030 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005030:	4b01      	ldr	r3, [pc, #4]	; (8005038 <vTaskMissedYield+0x8>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
}
 8005036:	4770      	bx	lr
 8005038:	20000c44 	.word	0x20000c44

0800503c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800503c:	4b01      	ldr	r3, [pc, #4]	; (8005044 <xTaskGetCurrentTaskHandle+0x8>)
 800503e:	6818      	ldr	r0, [r3, #0]
	}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000074c 	.word	0x2000074c

08005048 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <xTaskGetSchedulerState+0x18>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	b133      	cbz	r3, 800505c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <xTaskGetSchedulerState+0x1c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b10b      	cbz	r3, 8005058 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005054:	2000      	movs	r0, #0
	}
 8005056:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005058:	2002      	movs	r0, #2
 800505a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800505c:	2001      	movs	r0, #1
 800505e:	4770      	bx	lr
 8005060:	20000c14 	.word	0x20000c14
 8005064:	20000bc4 	.word	0x20000bc4

08005068 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005068:	2800      	cmp	r0, #0
 800506a:	d038      	beq.n	80050de <xTaskPriorityDisinherit+0x76>
	{
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005070:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <xTaskPriorityDisinherit+0x84>)
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	4282      	cmp	r2, r0
 8005076:	d008      	beq.n	800508a <xTaskPriorityDisinherit+0x22>
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	e7fe      	b.n	8005088 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800508a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800508c:	b942      	cbnz	r2, 80050a0 <xTaskPriorityDisinherit+0x38>
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	e7fe      	b.n	800509e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80050a0:	3a01      	subs	r2, #1
 80050a2:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80050a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80050a8:	4288      	cmp	r0, r1
 80050aa:	d01a      	beq.n	80050e2 <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050ac:	b9da      	cbnz	r2, 80050e6 <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ae:	1d25      	adds	r5, r4, #4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f7fe ff65 	bl	8003f80 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80050b8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050be:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80050c0:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <xTaskPriorityDisinherit+0x88>)
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <xTaskPriorityDisinherit+0x64>
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <xTaskPriorityDisinherit+0x88>)
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4629      	mov	r1, r5
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <xTaskPriorityDisinherit+0x8c>)
 80050d0:	2014      	movs	r0, #20
 80050d2:	fb00 2003 	mla	r0, r0, r3, r2
 80050d6:	f7fe ff2d 	bl	8003f34 <vListInsertEnd>
					xReturn = pdTRUE;
 80050da:	2001      	movs	r0, #1
	}
 80050dc:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80050de:	2000      	movs	r0, #0
	}
 80050e0:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80050e2:	2000      	movs	r0, #0
 80050e4:	e7fa      	b.n	80050dc <xTaskPriorityDisinherit+0x74>
 80050e6:	2000      	movs	r0, #0
		return xReturn;
 80050e8:	e7f8      	b.n	80050dc <xTaskPriorityDisinherit+0x74>
 80050ea:	bf00      	nop
 80050ec:	2000074c 	.word	0x2000074c
 80050f0:	20000bcc 	.word	0x20000bcc
 80050f4:	20000758 	.word	0x20000758

080050f8 <xTaskNotifyWait>:
	{
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	4607      	mov	r7, r0
 80050fc:	460d      	mov	r5, r1
 80050fe:	4614      	mov	r4, r2
 8005100:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8005102:	f000 fbc7 	bl	8005894 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <xTaskNotifyWait+0x90>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d00a      	beq.n	800512a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <xTaskNotifyWait+0x90>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800511a:	ea20 0007 	bic.w	r0, r0, r7
 800511e:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8005128:	b9ce      	cbnz	r6, 800515e <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800512a:	f000 fbd5 	bl	80058d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800512e:	f000 fbb1 	bl	8005894 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8005132:	b11c      	cbz	r4, 800513c <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005134:	4b14      	ldr	r3, [pc, #80]	; (8005188 <xTaskNotifyWait+0x90>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <xTaskNotifyWait+0x90>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d016      	beq.n	8005178 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800514a:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <xTaskNotifyWait+0x90>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8005156:	f000 fbbf 	bl	80058d8 <vPortExitCritical>
	}
 800515a:	4620      	mov	r0, r4
 800515c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800515e:	4611      	mov	r1, r2
 8005160:	4630      	mov	r0, r6
 8005162:	f7ff fc25 	bl	80049b0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <xTaskNotifyWait+0x94>)
 8005168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	e7d8      	b.n	800512a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <xTaskNotifyWait+0x90>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800517e:	ea23 0505 	bic.w	r5, r3, r5
 8005182:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8005184:	2401      	movs	r4, #1
 8005186:	e7e1      	b.n	800514c <xTaskNotifyWait+0x54>
 8005188:	2000074c 	.word	0x2000074c
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <xTaskGenericNotify>:
	{
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8005192:	b940      	cbnz	r0, 80051a6 <xTaskGenericNotify+0x16>
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	e7fe      	b.n	80051a4 <xTaskGenericNotify+0x14>
 80051a6:	4604      	mov	r4, r0
 80051a8:	461f      	mov	r7, r3
 80051aa:	4615      	mov	r5, r2
 80051ac:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 80051ae:	f000 fb71 	bl	8005894 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80051b2:	b10f      	cbz	r7, 80051b8 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80051b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051b6:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80051b8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80051bc:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80051be:	2202      	movs	r2, #2
 80051c0:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 80051c4:	1e6a      	subs	r2, r5, #1
 80051c6:	2a03      	cmp	r2, #3
 80051c8:	d81a      	bhi.n	8005200 <xTaskGenericNotify+0x70>
 80051ca:	e8df f002 	tbb	[pc, r2]
 80051ce:	0c02      	.short	0x0c02
 80051d0:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 80051d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051d4:	4316      	orrs	r6, r2
 80051d6:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80051d8:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d014      	beq.n	8005208 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 80051de:	f000 fb7b 	bl	80058d8 <vPortExitCritical>
	}
 80051e2:	4628      	mov	r0, r5
 80051e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 80051e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051e8:	3201      	adds	r2, #1
 80051ea:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80051ec:	2501      	movs	r5, #1
					break;
 80051ee:	e7f4      	b.n	80051da <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 80051f0:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80051f2:	2501      	movs	r5, #1
					break;
 80051f4:	e7f1      	b.n	80051da <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d004      	beq.n	8005204 <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 80051fa:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80051fc:	2501      	movs	r5, #1
 80051fe:	e7ec      	b.n	80051da <xTaskGenericNotify+0x4a>
 8005200:	2501      	movs	r5, #1
 8005202:	e7ea      	b.n	80051da <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8005204:	2500      	movs	r5, #0
 8005206:	e7e8      	b.n	80051da <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005208:	1d26      	adds	r6, r4, #4
 800520a:	4630      	mov	r0, r6
 800520c:	f7fe feb8 	bl	8003f80 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005210:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005212:	4a13      	ldr	r2, [pc, #76]	; (8005260 <xTaskGenericNotify+0xd0>)
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <xTaskGenericNotify+0x8e>
 800521a:	4a11      	ldr	r2, [pc, #68]	; (8005260 <xTaskGenericNotify+0xd0>)
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	4631      	mov	r1, r6
 8005220:	4a10      	ldr	r2, [pc, #64]	; (8005264 <xTaskGenericNotify+0xd4>)
 8005222:	2014      	movs	r0, #20
 8005224:	fb00 2003 	mla	r0, r0, r3, r2
 8005228:	f7fe fe84 	bl	8003f34 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800522c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800522e:	b143      	cbz	r3, 8005242 <xTaskGenericNotify+0xb2>
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	e7fe      	b.n	8005240 <xTaskGenericNotify+0xb0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005242:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <xTaskGenericNotify+0xd8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	429a      	cmp	r2, r3
 800524c:	d9c7      	bls.n	80051de <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <xTaskGenericNotify+0xdc>)
 8005250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	e7be      	b.n	80051de <xTaskGenericNotify+0x4e>
 8005260:	20000bcc 	.word	0x20000bcc
 8005264:	20000758 	.word	0x20000758
 8005268:	2000074c 	.word	0x2000074c
 800526c:	e000ed04 	.word	0xe000ed04

08005270 <xTaskGenericNotifyFromISR>:
	{
 8005270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005274:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 8005276:	b940      	cbnz	r0, 800528a <xTaskGenericNotifyFromISR+0x1a>
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	e7fe      	b.n	8005288 <xTaskGenericNotifyFromISR+0x18>
 800528a:	4604      	mov	r4, r0
 800528c:	4699      	mov	r9, r3
 800528e:	4615      	mov	r5, r2
 8005290:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005292:	f000 fc29 	bl	8005ae8 <vPortValidateInterruptPriority>
	__asm volatile
 8005296:	f3ef 8711 	mrs	r7, BASEPRI
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 80052aa:	f1b9 0f00 	cmp.w	r9, #0
 80052ae:	d002      	beq.n	80052b6 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80052b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052b2:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80052b6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80052ba:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80052bc:	2202      	movs	r2, #2
 80052be:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 80052c2:	1e6a      	subs	r2, r5, #1
 80052c4:	2a03      	cmp	r2, #3
 80052c6:	d81e      	bhi.n	8005306 <xTaskGenericNotifyFromISR+0x96>
 80052c8:	e8df f002 	tbb	[pc, r2]
 80052cc:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 80052d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80052d2:	ea42 0208 	orr.w	r2, r2, r8
 80052d6:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80052d8:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d017      	beq.n	800530e <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 80052de:	f387 8811 	msr	BASEPRI, r7
	}
 80052e2:	4628      	mov	r0, r5
 80052e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 80052e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80052ea:	3201      	adds	r2, #1
 80052ec:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80052ee:	2501      	movs	r5, #1
					break;
 80052f0:	e7f3      	b.n	80052da <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 80052f2:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80052f6:	2501      	movs	r5, #1
					break;
 80052f8:	e7ef      	b.n	80052da <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d005      	beq.n	800530a <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 80052fe:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005302:	2501      	movs	r5, #1
 8005304:	e7e9      	b.n	80052da <xTaskGenericNotifyFromISR+0x6a>
 8005306:	2501      	movs	r5, #1
 8005308:	e7e7      	b.n	80052da <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800530a:	2500      	movs	r5, #0
 800530c:	e7e5      	b.n	80052da <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800530e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005310:	b143      	cbz	r3, 8005324 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	e7fe      	b.n	8005322 <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <xTaskGenericNotifyFromISR+0x108>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b9e3      	cbnz	r3, 8005364 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800532a:	f104 0804 	add.w	r8, r4, #4
 800532e:	4640      	mov	r0, r8
 8005330:	f7fe fe26 	bl	8003f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005336:	4a11      	ldr	r2, [pc, #68]	; (800537c <xTaskGenericNotifyFromISR+0x10c>)
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <xTaskGenericNotifyFromISR+0xd2>
 800533e:	4a0f      	ldr	r2, [pc, #60]	; (800537c <xTaskGenericNotifyFromISR+0x10c>)
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4641      	mov	r1, r8
 8005344:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <xTaskGenericNotifyFromISR+0x110>)
 8005346:	2014      	movs	r0, #20
 8005348:	fb00 2003 	mla	r0, r0, r3, r2
 800534c:	f7fe fdf2 	bl	8003f34 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005350:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <xTaskGenericNotifyFromISR+0x114>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	429a      	cmp	r2, r3
 800535a:	d9c0      	bls.n	80052de <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800535c:	b146      	cbz	r6, 8005370 <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	6033      	str	r3, [r6, #0]
 8005362:	e7bc      	b.n	80052de <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005364:	f104 0118 	add.w	r1, r4, #24
 8005368:	4807      	ldr	r0, [pc, #28]	; (8005388 <xTaskGenericNotifyFromISR+0x118>)
 800536a:	f7fe fde3 	bl	8003f34 <vListInsertEnd>
 800536e:	e7ef      	b.n	8005350 <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <xTaskGenericNotifyFromISR+0x11c>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e7b2      	b.n	80052de <xTaskGenericNotifyFromISR+0x6e>
 8005378:	20000bc4 	.word	0x20000bc4
 800537c:	20000bcc 	.word	0x20000bcc
 8005380:	20000758 	.word	0x20000758
 8005384:	2000074c 	.word	0x2000074c
 8005388:	20000c00 	.word	0x20000c00
 800538c:	20000c44 	.word	0x20000c44

08005390 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <prvGetNextExpireTime+0x1c>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6813      	ldr	r3, [r2, #0]
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800539e:	b913      	cbnz	r3, 80053a6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a0:	68d3      	ldr	r3, [r2, #12]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053a6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000c48 	.word	0x20000c48

080053b0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053b0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053b2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053b4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053b6:	4291      	cmp	r1, r2
 80053b8:	d80c      	bhi.n	80053d4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ba:	1ad2      	subs	r2, r2, r3
 80053bc:	6983      	ldr	r3, [r0, #24]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d301      	bcc.n	80053c6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053c2:	2001      	movs	r0, #1
 80053c4:	e010      	b.n	80053e8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053c6:	1d01      	adds	r1, r0, #4
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <prvInsertTimerInActiveList+0x40>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	f7fe fdbe 	bl	8003f4c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80053d0:	2000      	movs	r0, #0
 80053d2:	e009      	b.n	80053e8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d201      	bcs.n	80053dc <prvInsertTimerInActiveList+0x2c>
 80053d8:	4299      	cmp	r1, r3
 80053da:	d206      	bcs.n	80053ea <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053dc:	1d01      	adds	r1, r0, #4
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <prvInsertTimerInActiveList+0x44>)
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	f7fe fdb3 	bl	8003f4c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80053e6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80053e8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 80053ea:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80053ec:	e7fc      	b.n	80053e8 <prvInsertTimerInActiveList+0x38>
 80053ee:	bf00      	nop
 80053f0:	20000c4c 	.word	0x20000c4c
 80053f4:	20000c48 	.word	0x20000c48

080053f8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053f8:	b530      	push	{r4, r5, lr}
 80053fa:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053fc:	f000 fa4a 	bl	8005894 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <prvCheckForValidListAndQueue+0x50>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	b11b      	cbz	r3, 800540e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005406:	f000 fa67 	bl	80058d8 <vPortExitCritical>
}
 800540a:	b003      	add	sp, #12
 800540c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800540e:	4d0f      	ldr	r5, [pc, #60]	; (800544c <prvCheckForValidListAndQueue+0x54>)
 8005410:	4628      	mov	r0, r5
 8005412:	f7fe fd81 	bl	8003f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005416:	4c0e      	ldr	r4, [pc, #56]	; (8005450 <prvCheckForValidListAndQueue+0x58>)
 8005418:	4620      	mov	r0, r4
 800541a:	f7fe fd7d 	bl	8003f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800541e:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <prvCheckForValidListAndQueue+0x5c>)
 8005420:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <prvCheckForValidListAndQueue+0x60>)
 8005424:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005426:	2300      	movs	r3, #0
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <prvCheckForValidListAndQueue+0x64>)
 800542c:	4a0c      	ldr	r2, [pc, #48]	; (8005460 <prvCheckForValidListAndQueue+0x68>)
 800542e:	2110      	movs	r1, #16
 8005430:	200a      	movs	r0, #10
 8005432:	f7fe feac 	bl	800418e <xQueueGenericCreateStatic>
 8005436:	4b04      	ldr	r3, [pc, #16]	; (8005448 <prvCheckForValidListAndQueue+0x50>)
 8005438:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800543a:	2800      	cmp	r0, #0
 800543c:	d0e3      	beq.n	8005406 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800543e:	4909      	ldr	r1, [pc, #36]	; (8005464 <prvCheckForValidListAndQueue+0x6c>)
 8005440:	f7ff f93a 	bl	80046b8 <vQueueAddToRegistry>
 8005444:	e7df      	b.n	8005406 <prvCheckForValidListAndQueue+0xe>
 8005446:	bf00      	nop
 8005448:	20000d6c 	.word	0x20000d6c
 800544c:	20000cf0 	.word	0x20000cf0
 8005450:	20000d04 	.word	0x20000d04
 8005454:	20000c48 	.word	0x20000c48
 8005458:	20000c4c 	.word	0x20000c4c
 800545c:	20000d1c 	.word	0x20000d1c
 8005460:	20000c50 	.word	0x20000c50
 8005464:	08005e84 	.word	0x08005e84

08005468 <xTimerCreateTimerTask>:
{
 8005468:	b510      	push	{r4, lr}
 800546a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800546c:	f7ff ffc4 	bl	80053f8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005470:	4b12      	ldr	r3, [pc, #72]	; (80054bc <xTimerCreateTimerTask+0x54>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	b1cb      	cbz	r3, 80054aa <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005476:	2400      	movs	r4, #0
 8005478:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800547a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800547c:	aa07      	add	r2, sp, #28
 800547e:	a906      	add	r1, sp, #24
 8005480:	a805      	add	r0, sp, #20
 8005482:	f7fe fd3d 	bl	8003f00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005486:	9b05      	ldr	r3, [sp, #20]
 8005488:	9302      	str	r3, [sp, #8]
 800548a:	9b06      	ldr	r3, [sp, #24]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	2302      	movs	r3, #2
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	4623      	mov	r3, r4
 8005494:	9a07      	ldr	r2, [sp, #28]
 8005496:	490a      	ldr	r1, [pc, #40]	; (80054c0 <xTimerCreateTimerTask+0x58>)
 8005498:	480a      	ldr	r0, [pc, #40]	; (80054c4 <xTimerCreateTimerTask+0x5c>)
 800549a:	f7ff fac7 	bl	8004a2c <xTaskCreateStatic>
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <xTimerCreateTimerTask+0x60>)
 80054a0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80054a2:	b110      	cbz	r0, 80054aa <xTimerCreateTimerTask+0x42>
}
 80054a4:	2001      	movs	r0, #1
 80054a6:	b008      	add	sp, #32
 80054a8:	bd10      	pop	{r4, pc}
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	e7fe      	b.n	80054ba <xTimerCreateTimerTask+0x52>
 80054bc:	20000d6c 	.word	0x20000d6c
 80054c0:	08005e8c 	.word	0x08005e8c
 80054c4:	080057ad 	.word	0x080057ad
 80054c8:	20000d70 	.word	0x20000d70

080054cc <xTimerGenericCommand>:
	configASSERT( xTimer );
 80054cc:	b1c8      	cbz	r0, 8005502 <xTimerGenericCommand+0x36>
{
 80054ce:	b530      	push	{r4, r5, lr}
 80054d0:	b085      	sub	sp, #20
 80054d2:	4615      	mov	r5, r2
 80054d4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 80054d6:	4a17      	ldr	r2, [pc, #92]	; (8005534 <xTimerGenericCommand+0x68>)
 80054d8:	6810      	ldr	r0, [r2, #0]
 80054da:	b340      	cbz	r0, 800552e <xTimerGenericCommand+0x62>
 80054dc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 80054de:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054e0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80054e2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054e4:	2905      	cmp	r1, #5
 80054e6:	dc1d      	bgt.n	8005524 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054e8:	f7ff fdae 	bl	8005048 <xTaskGetSchedulerState>
 80054ec:	2802      	cmp	r0, #2
 80054ee:	d011      	beq.n	8005514 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054f0:	2300      	movs	r3, #0
 80054f2:	461a      	mov	r2, r3
 80054f4:	4669      	mov	r1, sp
 80054f6:	480f      	ldr	r0, [pc, #60]	; (8005534 <xTimerGenericCommand+0x68>)
 80054f8:	6800      	ldr	r0, [r0, #0]
 80054fa:	f7fe feb7 	bl	800426c <xQueueGenericSend>
}
 80054fe:	b005      	add	sp, #20
 8005500:	bd30      	pop	{r4, r5, pc}
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	e7fe      	b.n	8005512 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005514:	2300      	movs	r3, #0
 8005516:	9a08      	ldr	r2, [sp, #32]
 8005518:	4669      	mov	r1, sp
 800551a:	4806      	ldr	r0, [pc, #24]	; (8005534 <xTimerGenericCommand+0x68>)
 800551c:	6800      	ldr	r0, [r0, #0]
 800551e:	f7fe fea5 	bl	800426c <xQueueGenericSend>
 8005522:	e7ec      	b.n	80054fe <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005524:	2300      	movs	r3, #0
 8005526:	4669      	mov	r1, sp
 8005528:	f7fe ff5e 	bl	80043e8 <xQueueGenericSendFromISR>
 800552c:	e7e7      	b.n	80054fe <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800552e:	2000      	movs	r0, #0
	return xReturn;
 8005530:	e7e5      	b.n	80054fe <xTimerGenericCommand+0x32>
 8005532:	bf00      	nop
 8005534:	20000d6c 	.word	0x20000d6c

08005538 <prvSwitchTimerLists>:
{
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <prvSwitchTimerLists+0x70>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	b352      	cbz	r2, 800559a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005548:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800554a:	1d25      	adds	r5, r4, #4
 800554c:	4628      	mov	r0, r5
 800554e:	f7fe fd17 	bl	8003f80 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005554:	4620      	mov	r0, r4
 8005556:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005558:	69e3      	ldr	r3, [r4, #28]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d1ee      	bne.n	800553c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800555e:	69a3      	ldr	r3, [r4, #24]
 8005560:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8005562:	429e      	cmp	r6, r3
 8005564:	d207      	bcs.n	8005576 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005566:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005568:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800556a:	4629      	mov	r1, r5
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <prvSwitchTimerLists+0x70>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	f7fe fcec 	bl	8003f4c <vListInsert>
 8005574:	e7e2      	b.n	800553c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005576:	2100      	movs	r1, #0
 8005578:	9100      	str	r1, [sp, #0]
 800557a:	460b      	mov	r3, r1
 800557c:	4632      	mov	r2, r6
 800557e:	4620      	mov	r0, r4
 8005580:	f7ff ffa4 	bl	80054cc <xTimerGenericCommand>
				configASSERT( xResult );
 8005584:	2800      	cmp	r0, #0
 8005586:	d1d9      	bne.n	800553c <prvSwitchTimerLists+0x4>
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	e7fe      	b.n	8005598 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800559a:	4a04      	ldr	r2, [pc, #16]	; (80055ac <prvSwitchTimerLists+0x74>)
 800559c:	6810      	ldr	r0, [r2, #0]
 800559e:	4902      	ldr	r1, [pc, #8]	; (80055a8 <prvSwitchTimerLists+0x70>)
 80055a0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80055a2:	6013      	str	r3, [r2, #0]
}
 80055a4:	b002      	add	sp, #8
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
 80055a8:	20000c48 	.word	0x20000c48
 80055ac:	20000c4c 	.word	0x20000c4c

080055b0 <prvSampleTimeNow>:
{
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80055b4:	f7ff faf8 	bl	8004ba8 <xTaskGetTickCount>
 80055b8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <prvSampleTimeNow+0x28>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4283      	cmp	r3, r0
 80055c0:	d805      	bhi.n	80055ce <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80055c6:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <prvSampleTimeNow+0x28>)
 80055c8:	601c      	str	r4, [r3, #0]
}
 80055ca:	4620      	mov	r0, r4
 80055cc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80055ce:	f7ff ffb3 	bl	8005538 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	e7f6      	b.n	80055c6 <prvSampleTimeNow+0x16>
 80055d8:	20000d18 	.word	0x20000d18

080055dc <prvProcessExpiredTimer>:
{
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	4605      	mov	r5, r0
 80055e2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <prvProcessExpiredTimer+0x5c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ec:	1d20      	adds	r0, r4, #4
 80055ee:	f7fe fcc7 	bl	8003f80 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055f2:	69e3      	ldr	r3, [r4, #28]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d004      	beq.n	8005602 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fa:	4620      	mov	r0, r4
 80055fc:	4798      	blx	r3
}
 80055fe:	b002      	add	sp, #8
 8005600:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005602:	69a1      	ldr	r1, [r4, #24]
 8005604:	462b      	mov	r3, r5
 8005606:	4632      	mov	r2, r6
 8005608:	4429      	add	r1, r5
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff fed0 	bl	80053b0 <prvInsertTimerInActiveList>
 8005610:	2800      	cmp	r0, #0
 8005612:	d0f1      	beq.n	80055f8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005614:	2100      	movs	r1, #0
 8005616:	9100      	str	r1, [sp, #0]
 8005618:	460b      	mov	r3, r1
 800561a:	462a      	mov	r2, r5
 800561c:	4620      	mov	r0, r4
 800561e:	f7ff ff55 	bl	80054cc <xTimerGenericCommand>
			configASSERT( xResult );
 8005622:	2800      	cmp	r0, #0
 8005624:	d1e8      	bne.n	80055f8 <prvProcessExpiredTimer+0x1c>
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	e7fe      	b.n	8005636 <prvProcessExpiredTimer+0x5a>
 8005638:	20000c48 	.word	0x20000c48

0800563c <prvProcessTimerOrBlockTask>:
{
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	4606      	mov	r6, r0
 8005642:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8005644:	f7ff faa8 	bl	8004b98 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005648:	a801      	add	r0, sp, #4
 800564a:	f7ff ffb1 	bl	80055b0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800564e:	9b01      	ldr	r3, [sp, #4]
 8005650:	bb1b      	cbnz	r3, 800569a <prvProcessTimerOrBlockTask+0x5e>
 8005652:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005654:	b90c      	cbnz	r4, 800565a <prvProcessTimerOrBlockTask+0x1e>
 8005656:	42b0      	cmp	r0, r6
 8005658:	d218      	bcs.n	800568c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 800565a:	b12c      	cbz	r4, 8005668 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800565c:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <prvProcessTimerOrBlockTask+0x68>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681c      	ldr	r4, [r3, #0]
 8005662:	fab4 f484 	clz	r4, r4
 8005666:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005668:	4622      	mov	r2, r4
 800566a:	1b71      	subs	r1, r6, r5
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <prvProcessTimerOrBlockTask+0x6c>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	f7ff f836 	bl	80046e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005674:	f7ff fb2a 	bl	8004ccc <xTaskResumeAll>
 8005678:	b988      	cbnz	r0, 800569e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 800567a:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <prvProcessTimerOrBlockTask+0x70>)
 800567c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	e008      	b.n	800569e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 800568c:	f7ff fb1e 	bl	8004ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005690:	4629      	mov	r1, r5
 8005692:	4630      	mov	r0, r6
 8005694:	f7ff ffa2 	bl	80055dc <prvProcessExpiredTimer>
 8005698:	e001      	b.n	800569e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 800569a:	f7ff fb17 	bl	8004ccc <xTaskResumeAll>
}
 800569e:	b002      	add	sp, #8
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	bf00      	nop
 80056a4:	20000c4c 	.word	0x20000c4c
 80056a8:	20000d6c 	.word	0x20000d6c
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <prvProcessReceivedCommands>:
{
 80056b0:	b530      	push	{r4, r5, lr}
 80056b2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056b4:	e002      	b.n	80056bc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056b6:	9b04      	ldr	r3, [sp, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da0f      	bge.n	80056dc <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056bc:	2200      	movs	r2, #0
 80056be:	a904      	add	r1, sp, #16
 80056c0:	4b39      	ldr	r3, [pc, #228]	; (80057a8 <prvProcessReceivedCommands+0xf8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	f7fe fef6 	bl	80044b4 <xQueueReceive>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d06a      	beq.n	80057a2 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056cc:	9b04      	ldr	r3, [sp, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	daf1      	bge.n	80056b6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056d2:	9907      	ldr	r1, [sp, #28]
 80056d4:	9806      	ldr	r0, [sp, #24]
 80056d6:	9b05      	ldr	r3, [sp, #20]
 80056d8:	4798      	blx	r3
 80056da:	e7ec      	b.n	80056b6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056dc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056de:	6963      	ldr	r3, [r4, #20]
 80056e0:	b113      	cbz	r3, 80056e8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056e2:	1d20      	adds	r0, r4, #4
 80056e4:	f7fe fc4c 	bl	8003f80 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056e8:	a803      	add	r0, sp, #12
 80056ea:	f7ff ff61 	bl	80055b0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	2b09      	cmp	r3, #9
 80056f2:	d8e3      	bhi.n	80056bc <prvProcessReceivedCommands+0xc>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <prvProcessReceivedCommands+0x4c>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005725 	.word	0x08005725
 8005700:	08005725 	.word	0x08005725
 8005704:	08005725 	.word	0x08005725
 8005708:	080056bd 	.word	0x080056bd
 800570c:	0800576d 	.word	0x0800576d
 8005710:	08005793 	.word	0x08005793
 8005714:	08005725 	.word	0x08005725
 8005718:	08005725 	.word	0x08005725
 800571c:	080056bd 	.word	0x080056bd
 8005720:	0800576d 	.word	0x0800576d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005724:	9905      	ldr	r1, [sp, #20]
 8005726:	69a5      	ldr	r5, [r4, #24]
 8005728:	460b      	mov	r3, r1
 800572a:	4602      	mov	r2, r0
 800572c:	4429      	add	r1, r5
 800572e:	4620      	mov	r0, r4
 8005730:	f7ff fe3e 	bl	80053b0 <prvInsertTimerInActiveList>
 8005734:	2800      	cmp	r0, #0
 8005736:	d0c1      	beq.n	80056bc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800573a:	4620      	mov	r0, r4
 800573c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800573e:	69e3      	ldr	r3, [r4, #28]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d1bb      	bne.n	80056bc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005744:	69a2      	ldr	r2, [r4, #24]
 8005746:	2100      	movs	r1, #0
 8005748:	9100      	str	r1, [sp, #0]
 800574a:	460b      	mov	r3, r1
 800574c:	9805      	ldr	r0, [sp, #20]
 800574e:	4402      	add	r2, r0
 8005750:	4620      	mov	r0, r4
 8005752:	f7ff febb 	bl	80054cc <xTimerGenericCommand>
							configASSERT( xResult );
 8005756:	2800      	cmp	r0, #0
 8005758:	d1b0      	bne.n	80056bc <prvProcessReceivedCommands+0xc>
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	e7fe      	b.n	800576a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800576c:	9905      	ldr	r1, [sp, #20]
 800576e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005770:	b131      	cbz	r1, 8005780 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005772:	4603      	mov	r3, r0
 8005774:	4602      	mov	r2, r0
 8005776:	4401      	add	r1, r0
 8005778:	4620      	mov	r0, r4
 800577a:	f7ff fe19 	bl	80053b0 <prvInsertTimerInActiveList>
					break;
 800577e:	e79d      	b.n	80056bc <prvProcessReceivedCommands+0xc>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	e7fe      	b.n	8005790 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005792:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d190      	bne.n	80056bc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800579a:	4620      	mov	r0, r4
 800579c:	f000 fab4 	bl	8005d08 <vPortFree>
 80057a0:	e78c      	b.n	80056bc <prvProcessReceivedCommands+0xc>
}
 80057a2:	b009      	add	sp, #36	; 0x24
 80057a4:	bd30      	pop	{r4, r5, pc}
 80057a6:	bf00      	nop
 80057a8:	20000d6c 	.word	0x20000d6c

080057ac <prvTimerTask>:
{
 80057ac:	b500      	push	{lr}
 80057ae:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057b0:	a801      	add	r0, sp, #4
 80057b2:	f7ff fded 	bl	8005390 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057b6:	9901      	ldr	r1, [sp, #4]
 80057b8:	f7ff ff40 	bl	800563c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80057bc:	f7ff ff78 	bl	80056b0 <prvProcessReceivedCommands>
 80057c0:	e7f6      	b.n	80057b0 <prvTimerTask+0x4>
	...

080057c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ca:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <prvTaskExitError+0x3c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d008      	beq.n	80057e6 <prvTaskExitError+0x22>
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	e7fe      	b.n	80057e4 <prvTaskExitError+0x20>
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057f6:	9b01      	ldr	r3, [sp, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0fc      	beq.n	80057f6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057fc:	b002      	add	sp, #8
 80057fe:	4770      	bx	lr
 8005800:	2000000c 	.word	0x2000000c

08005804 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005804:	4808      	ldr	r0, [pc, #32]	; (8005828 <prvPortStartFirstTask+0x24>)
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	6800      	ldr	r0, [r0, #0]
 800580a:	f380 8808 	msr	MSP, r0
 800580e:	f04f 0000 	mov.w	r0, #0
 8005812:	f380 8814 	msr	CONTROL, r0
 8005816:	b662      	cpsie	i
 8005818:	b661      	cpsie	f
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	df00      	svc	0
 8005824:	bf00      	nop
 8005826:	0000      	.short	0x0000
 8005828:	e000ed08 	.word	0xe000ed08

0800582c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800582c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800583c <vPortEnableVFP+0x10>
 8005830:	6801      	ldr	r1, [r0, #0]
 8005832:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005836:	6001      	str	r1, [r0, #0]
 8005838:	4770      	bx	lr
 800583a:	0000      	.short	0x0000
 800583c:	e000ed88 	.word	0xe000ed88

08005840 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005844:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005848:	f021 0101 	bic.w	r1, r1, #1
 800584c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <pxPortInitialiseStack+0x28>)
 8005852:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005856:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800585a:	f06f 0302 	mvn.w	r3, #2
 800585e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005862:	3844      	subs	r0, #68	; 0x44
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	080057c5 	.word	0x080057c5
 800586c:	00000000 	.word	0x00000000

08005870 <SVC_Handler>:
	__asm volatile (
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <pxCurrentTCBConst2>)
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f380 8809 	msr	PSP, r0
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8811 	msr	BASEPRI, r0
 800588a:	4770      	bx	lr
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst2>:
 8005890:	2000074c 	.word	0x2000074c

08005894 <vPortEnterCritical>:
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80058a4:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <vPortEnterCritical+0x3c>)
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d000      	beq.n	80058b2 <vPortEnterCritical+0x1e>
}
 80058b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <vPortEnterCritical+0x40>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80058ba:	d0f9      	beq.n	80058b0 <vPortEnterCritical+0x1c>
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	e7fe      	b.n	80058cc <vPortEnterCritical+0x38>
 80058ce:	bf00      	nop
 80058d0:	2000000c 	.word	0x2000000c
 80058d4:	e000ed04 	.word	0xe000ed04

080058d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <vPortExitCritical+0x28>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	b943      	cbnz	r3, 80058f0 <vPortExitCritical+0x18>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	e7fe      	b.n	80058ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80058f0:	3b01      	subs	r3, #1
 80058f2:	4a03      	ldr	r2, [pc, #12]	; (8005900 <vPortExitCritical+0x28>)
 80058f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058f6:	b90b      	cbnz	r3, 80058fc <vPortExitCritical+0x24>
	__asm volatile
 80058f8:	f383 8811 	msr	BASEPRI, r3
}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	2000000c 	.word	0x2000000c
	...

08005910 <PendSV_Handler>:
	__asm volatile
 8005910:	f3ef 8009 	mrs	r0, PSP
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <pxCurrentTCBConst>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f01e 0f10 	tst.w	lr, #16
 8005920:	bf08      	it	eq
 8005922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	6010      	str	r0, [r2, #0]
 800592c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005934:	f380 8811 	msr	BASEPRI, r0
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f7ff fa64 	bl	8004e0c <vTaskSwitchContext>
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f380 8811 	msr	BASEPRI, r0
 800594c:	bc09      	pop	{r0, r3}
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	6808      	ldr	r0, [r1, #0]
 8005952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005956:	f01e 0f10 	tst.w	lr, #16
 800595a:	bf08      	it	eq
 800595c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005960:	f380 8809 	msr	PSP, r0
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	f3af 8000 	nop.w

08005970 <pxCurrentTCBConst>:
 8005970:	2000074c 	.word	0x2000074c

08005974 <SysTick_Handler>:
{
 8005974:	b508      	push	{r3, lr}
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005986:	f7ff f915 	bl	8004bb4 <xTaskIncrementTick>
 800598a:	b118      	cbz	r0, 8005994 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800598c:	4b03      	ldr	r3, [pc, #12]	; (800599c <SysTick_Handler+0x28>)
 800598e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005992:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005994:	2300      	movs	r3, #0
 8005996:	f383 8811 	msr	BASEPRI, r3
}
 800599a:	bd08      	pop	{r3, pc}
 800599c:	e000ed04 	.word	0xe000ed04

080059a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059a0:	4a08      	ldr	r2, [pc, #32]	; (80059c4 <vPortSetupTimerInterrupt+0x24>)
 80059a2:	2300      	movs	r3, #0
 80059a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059a6:	4908      	ldr	r1, [pc, #32]	; (80059c8 <vPortSetupTimerInterrupt+0x28>)
 80059a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <vPortSetupTimerInterrupt+0x2c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4908      	ldr	r1, [pc, #32]	; (80059d0 <vPortSetupTimerInterrupt+0x30>)
 80059b0:	fba1 1303 	umull	r1, r3, r1, r3
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	3b01      	subs	r3, #1
 80059b8:	4906      	ldr	r1, [pc, #24]	; (80059d4 <vPortSetupTimerInterrupt+0x34>)
 80059ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059bc:	2307      	movs	r3, #7
 80059be:	6013      	str	r3, [r2, #0]
}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	e000e010 	.word	0xe000e010
 80059c8:	e000e018 	.word	0xe000e018
 80059cc:	20000000 	.word	0x20000000
 80059d0:	10624dd3 	.word	0x10624dd3
 80059d4:	e000e014 	.word	0xe000e014

080059d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059d8:	4b3a      	ldr	r3, [pc, #232]	; (8005ac4 <xPortStartScheduler+0xec>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b3a      	ldr	r3, [pc, #232]	; (8005ac8 <xPortStartScheduler+0xf0>)
 80059de:	429a      	cmp	r2, r3
 80059e0:	d00d      	beq.n	80059fe <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059e2:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <xPortStartScheduler+0xec>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b39      	ldr	r3, [pc, #228]	; (8005acc <xPortStartScheduler+0xf4>)
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d111      	bne.n	8005a10 <xPortStartScheduler+0x38>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	e7fe      	b.n	80059fc <xPortStartScheduler+0x24>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	e7fe      	b.n	8005a0e <xPortStartScheduler+0x36>
{
 8005a10:	b510      	push	{r4, lr}
 8005a12:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a14:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <xPortStartScheduler+0xf8>)
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a1c:	22ff      	movs	r2, #255	; 0xff
 8005a1e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a28:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a30:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <xPortStartScheduler+0xfc>)
 8005a32:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a34:	4b28      	ldr	r3, [pc, #160]	; (8005ad8 <xPortStartScheduler+0x100>)
 8005a36:	2207      	movs	r2, #7
 8005a38:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a3a:	e009      	b.n	8005a50 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 8005a3c:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <xPortStartScheduler+0x100>)
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a44:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a50:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a58:	d1f0      	bne.n	8005a3c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a5a:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <xPortStartScheduler+0x100>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d008      	beq.n	8005a74 <xPortStartScheduler+0x9c>
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	e7fe      	b.n	8005a72 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a74:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a7a:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <xPortStartScheduler+0x100>)
 8005a7c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <xPortStartScheduler+0xf8>)
 8005a84:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a86:	4b15      	ldr	r3, [pc, #84]	; (8005adc <xPortStartScheduler+0x104>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005a8e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005a96:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005a98:	f7ff ff82 	bl	80059a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005a9c:	2400      	movs	r4, #0
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <xPortStartScheduler+0x108>)
 8005aa0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8005aa2:	f7ff fec3 	bl	800582c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aa6:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <xPortStartScheduler+0x10c>)
 8005aa8:	6813      	ldr	r3, [r2, #0]
 8005aaa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005aae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8005ab0:	f7ff fea8 	bl	8005804 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005ab4:	f7ff f9aa 	bl	8004e0c <vTaskSwitchContext>
	prvTaskExitError();
 8005ab8:	f7ff fe84 	bl	80057c4 <prvTaskExitError>
}
 8005abc:	4620      	mov	r0, r4
 8005abe:	b002      	add	sp, #8
 8005ac0:	bd10      	pop	{r4, pc}
 8005ac2:	bf00      	nop
 8005ac4:	e000ed00 	.word	0xe000ed00
 8005ac8:	410fc271 	.word	0x410fc271
 8005acc:	410fc270 	.word	0x410fc270
 8005ad0:	e000e400 	.word	0xe000e400
 8005ad4:	20000d74 	.word	0x20000d74
 8005ad8:	20000d78 	.word	0x20000d78
 8005adc:	e000ed20 	.word	0xe000ed20
 8005ae0:	2000000c 	.word	0x2000000c
 8005ae4:	e000ef34 	.word	0xe000ef34

08005ae8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ae8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005aec:	2b0f      	cmp	r3, #15
 8005aee:	d90f      	bls.n	8005b10 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005af0:	4a10      	ldr	r2, [pc, #64]	; (8005b34 <vPortValidateInterruptPriority+0x4c>)
 8005af2:	5c9b      	ldrb	r3, [r3, r2]
 8005af4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <vPortValidateInterruptPriority+0x50>)
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d908      	bls.n	8005b10 <vPortValidateInterruptPriority+0x28>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	e7fe      	b.n	8005b0e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <vPortValidateInterruptPriority+0x54>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <vPortValidateInterruptPriority+0x58>)
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d908      	bls.n	8005b32 <vPortValidateInterruptPriority+0x4a>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	e7fe      	b.n	8005b30 <vPortValidateInterruptPriority+0x48>
	}
 8005b32:	4770      	bx	lr
 8005b34:	e000e3f0 	.word	0xe000e3f0
 8005b38:	20000d74 	.word	0x20000d74
 8005b3c:	e000ed0c 	.word	0xe000ed0c
 8005b40:	20000d78 	.word	0x20000d78

08005b44 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b44:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b46:	f012 0f07 	tst.w	r2, #7
 8005b4a:	d01e      	beq.n	8005b8a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b4c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b4e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b52:	f5c1 6340 	rsb	r3, r1, #3072	; 0xc00
 8005b56:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b58:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b5a:	480e      	ldr	r0, [pc, #56]	; (8005b94 <prvHeapInit+0x50>)
 8005b5c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b5e:	2100      	movs	r1, #0
 8005b60:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b62:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005b64:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b66:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005b6a:	480b      	ldr	r0, [pc, #44]	; (8005b98 <prvHeapInit+0x54>)
 8005b6c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005b6e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b70:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b72:	1a99      	subs	r1, r3, r2
 8005b74:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b76:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b78:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <prvHeapInit+0x58>)
 8005b7a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <prvHeapInit+0x5c>)
 8005b7e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b80:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <prvHeapInit+0x60>)
 8005b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b86:	601a      	str	r2, [r3, #0]
}
 8005b88:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b8e:	e7e4      	b.n	8005b5a <prvHeapInit+0x16>
 8005b90:	20000d80 	.word	0x20000d80
 8005b94:	2000198c 	.word	0x2000198c
 8005b98:	20000d7c 	.word	0x20000d7c
 8005b9c:	20001988 	.word	0x20001988
 8005ba0:	20001984 	.word	0x20001984
 8005ba4:	20001980 	.word	0x20001980

08005ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ba8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <prvInsertBlockIntoFreeList+0x50>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4282      	cmp	r2, r0
 8005bb0:	d31b      	bcc.n	8005bea <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bb2:	6859      	ldr	r1, [r3, #4]
 8005bb4:	185c      	adds	r4, r3, r1
 8005bb6:	4284      	cmp	r4, r0
 8005bb8:	d103      	bne.n	8005bc2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bba:	6840      	ldr	r0, [r0, #4]
 8005bbc:	4401      	add	r1, r0
 8005bbe:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bc0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bc2:	6841      	ldr	r1, [r0, #4]
 8005bc4:	1844      	adds	r4, r0, r1
 8005bc6:	42a2      	cmp	r2, r4
 8005bc8:	d113      	bne.n	8005bf2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bca:	4c0c      	ldr	r4, [pc, #48]	; (8005bfc <prvInsertBlockIntoFreeList+0x54>)
 8005bcc:	6824      	ldr	r4, [r4, #0]
 8005bce:	42a2      	cmp	r2, r4
 8005bd0:	d00d      	beq.n	8005bee <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	4411      	add	r1, r2
 8005bd6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bde:	4298      	cmp	r0, r3
 8005be0:	d000      	beq.n	8005be4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005be2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bea:	4613      	mov	r3, r2
 8005bec:	e7de      	b.n	8005bac <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bee:	6004      	str	r4, [r0, #0]
 8005bf0:	e7f5      	b.n	8005bde <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bf2:	6002      	str	r2, [r0, #0]
 8005bf4:	e7f3      	b.n	8005bde <prvInsertBlockIntoFreeList+0x36>
 8005bf6:	bf00      	nop
 8005bf8:	2000198c 	.word	0x2000198c
 8005bfc:	20000d7c 	.word	0x20000d7c

08005c00 <pvPortMalloc>:
{
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005c04:	f7fe ffc8 	bl	8004b98 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005c08:	4b3a      	ldr	r3, [pc, #232]	; (8005cf4 <pvPortMalloc+0xf4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	b1bb      	cbz	r3, 8005c3e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c0e:	4b3a      	ldr	r3, [pc, #232]	; (8005cf8 <pvPortMalloc+0xf8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	421c      	tst	r4, r3
 8005c14:	d163      	bne.n	8005cde <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8005c16:	b1ac      	cbz	r4, 8005c44 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8005c18:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c1a:	f014 0f07 	tst.w	r4, #7
 8005c1e:	d011      	beq.n	8005c44 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c20:	f024 0407 	bic.w	r4, r4, #7
 8005c24:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c26:	f004 0307 	and.w	r3, r4, #7
 8005c2a:	b15b      	cbz	r3, 8005c44 <pvPortMalloc+0x44>
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	e7fe      	b.n	8005c3c <pvPortMalloc+0x3c>
			prvHeapInit();
 8005c3e:	f7ff ff81 	bl	8005b44 <prvHeapInit>
 8005c42:	e7e4      	b.n	8005c0e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d04c      	beq.n	8005ce2 <pvPortMalloc+0xe2>
 8005c48:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <pvPortMalloc+0xfc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	d34a      	bcc.n	8005ce6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8005c50:	4b2b      	ldr	r3, [pc, #172]	; (8005d00 <pvPortMalloc+0x100>)
 8005c52:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c54:	e001      	b.n	8005c5a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8005c56:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c58:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c5a:	686a      	ldr	r2, [r5, #4]
 8005c5c:	42a2      	cmp	r2, r4
 8005c5e:	d202      	bcs.n	8005c66 <pvPortMalloc+0x66>
 8005c60:	682a      	ldr	r2, [r5, #0]
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	d1f7      	bne.n	8005c56 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8005c66:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <pvPortMalloc+0xf4>)
 8005c68:	6812      	ldr	r2, [r2, #0]
 8005c6a:	42aa      	cmp	r2, r5
 8005c6c:	d03d      	beq.n	8005cea <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c6e:	681e      	ldr	r6, [r3, #0]
 8005c70:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c72:	682a      	ldr	r2, [r5, #0]
 8005c74:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c76:	686b      	ldr	r3, [r5, #4]
 8005c78:	1b1b      	subs	r3, r3, r4
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d910      	bls.n	8005ca0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c7e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c80:	f010 0f07 	tst.w	r0, #7
 8005c84:	d008      	beq.n	8005c98 <pvPortMalloc+0x98>
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	e7fe      	b.n	8005c96 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c98:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c9a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c9c:	f7ff ff84 	bl	8005ba8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ca0:	686a      	ldr	r2, [r5, #4]
 8005ca2:	4916      	ldr	r1, [pc, #88]	; (8005cfc <pvPortMalloc+0xfc>)
 8005ca4:	680b      	ldr	r3, [r1, #0]
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005caa:	4916      	ldr	r1, [pc, #88]	; (8005d04 <pvPortMalloc+0x104>)
 8005cac:	6809      	ldr	r1, [r1, #0]
 8005cae:	428b      	cmp	r3, r1
 8005cb0:	d201      	bcs.n	8005cb6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cb2:	4914      	ldr	r1, [pc, #80]	; (8005d04 <pvPortMalloc+0x104>)
 8005cb4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <pvPortMalloc+0xf8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005cc2:	f7ff f803 	bl	8004ccc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc6:	f016 0f07 	tst.w	r6, #7
 8005cca:	d010      	beq.n	8005cee <pvPortMalloc+0xee>
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	e7fe      	b.n	8005cdc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8005cde:	2600      	movs	r6, #0
 8005ce0:	e7ef      	b.n	8005cc2 <pvPortMalloc+0xc2>
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	e7ed      	b.n	8005cc2 <pvPortMalloc+0xc2>
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	e7eb      	b.n	8005cc2 <pvPortMalloc+0xc2>
 8005cea:	2600      	movs	r6, #0
 8005cec:	e7e9      	b.n	8005cc2 <pvPortMalloc+0xc2>
}
 8005cee:	4630      	mov	r0, r6
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000d7c 	.word	0x20000d7c
 8005cf8:	20001980 	.word	0x20001980
 8005cfc:	20001984 	.word	0x20001984
 8005d00:	2000198c 	.word	0x2000198c
 8005d04:	20001988 	.word	0x20001988

08005d08 <vPortFree>:
	if( pv != NULL )
 8005d08:	b380      	cbz	r0, 8005d6c <vPortFree+0x64>
{
 8005d0a:	b538      	push	{r3, r4, r5, lr}
 8005d0c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8005d0e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d12:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005d16:	4916      	ldr	r1, [pc, #88]	; (8005d70 <vPortFree+0x68>)
 8005d18:	6809      	ldr	r1, [r1, #0]
 8005d1a:	420a      	tst	r2, r1
 8005d1c:	d108      	bne.n	8005d30 <vPortFree+0x28>
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	e7fe      	b.n	8005d2e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d30:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8005d34:	b140      	cbz	r0, 8005d48 <vPortFree+0x40>
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	e7fe      	b.n	8005d46 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d48:	ea22 0201 	bic.w	r2, r2, r1
 8005d4c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8005d50:	f7fe ff22 	bl	8004b98 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d54:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005d58:	4a06      	ldr	r2, [pc, #24]	; (8005d74 <vPortFree+0x6c>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	440b      	add	r3, r1
 8005d5e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7ff ff21 	bl	8005ba8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8005d66:	f7fe ffb1 	bl	8004ccc <xTaskResumeAll>
}
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20001980 	.word	0x20001980
 8005d74:	20001984 	.word	0x20001984

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4e0d      	ldr	r6, [pc, #52]	; (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	; (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1ba4      	subs	r4, r4, r6
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2500      	movs	r5, #0
 8005d84:	42a5      	cmp	r5, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4e0b      	ldr	r6, [pc, #44]	; (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	; (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f000 f82c 	bl	8005de8 <_init>
 8005d90:	1ba4      	subs	r4, r4, r6
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2500      	movs	r5, #0
 8005d96:	42a5      	cmp	r5, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005da0:	4798      	blx	r3
 8005da2:	3501      	adds	r5, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005daa:	4798      	blx	r3
 8005dac:	3501      	adds	r5, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08005e94 	.word	0x08005e94
 8005db4:	08005e94 	.word	0x08005e94
 8005db8:	08005e94 	.word	0x08005e94
 8005dbc:	08005e98 	.word	0x08005e98

08005dc0 <memcpy>:
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	1e43      	subs	r3, r0, #1
 8005dc4:	440a      	add	r2, r1
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	d100      	bne.n	8005dcc <memcpy+0xc>
 8005dca:	bd10      	pop	{r4, pc}
 8005dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd4:	e7f7      	b.n	8005dc6 <memcpy+0x6>

08005dd6 <memset>:
 8005dd6:	4402      	add	r2, r0
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d100      	bne.n	8005de0 <memset+0xa>
 8005dde:	4770      	bx	lr
 8005de0:	f803 1b01 	strb.w	r1, [r3], #1
 8005de4:	e7f9      	b.n	8005dda <memset+0x4>
	...

08005de8 <_init>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr

08005df4 <_fini>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr
