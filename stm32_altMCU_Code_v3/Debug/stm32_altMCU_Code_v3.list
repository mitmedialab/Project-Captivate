
stm32_altMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c4c  08006c4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006c4c  08006c4c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c4c  08006c4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e4  20000010  08006c64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024f4  08006c64  000224f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002affa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e95  00000000  00000000  0004b03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017e08  00000000  00000000  0004fecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001998  00000000  00000000  00067cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019f8  00000000  00000000  00069670  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00016823  00000000  00000000  0006b068  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018b0f  00000000  00000000  0008188b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000828bb  00000000  00000000  0009a39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011cc55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048d8  00000000  00000000  0011ccd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b7c 	.word	0x08006b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006b7c 	.word	0x08006b7c

080001d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d0:	b500      	push	{lr}
 80001d2:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80001d4:	2300      	movs	r3, #0
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	9303      	str	r3, [sp, #12]
 80001de:	9304      	str	r3, [sp, #16]
 80001e0:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001e2:	485a      	ldr	r0, [pc, #360]	; (800034c <MX_ADC1_Init+0x17c>)
 80001e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001e8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80001ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80001ee:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f2:	2201      	movs	r2, #1
 80001f4:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001f6:	7642      	strb	r2, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001f8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80001fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000200:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000202:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000206:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000208:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 12;
 800020a:	210c      	movs	r1, #12
 800020c:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800020e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000212:	2208      	movs	r2, #8
 8000214:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000216:	7603      	strb	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000218:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800021a:	f001 f917 	bl	800144c <HAL_ADC_Init>
 800021e:	2800      	cmp	r0, #0
 8000220:	d16c      	bne.n	80002fc <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000222:	2301      	movs	r3, #1
 8000224:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000226:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000228:	2300      	movs	r3, #0
 800022a:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800022c:	2204      	movs	r2, #4
 800022e:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000230:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000232:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000234:	4669      	mov	r1, sp
 8000236:	4845      	ldr	r0, [pc, #276]	; (800034c <MX_ADC1_Init+0x17c>)
 8000238:	f001 fac6 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800023c:	2800      	cmp	r0, #0
 800023e:	d160      	bne.n	8000302 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000240:	2302      	movs	r3, #2
 8000242:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000244:	4669      	mov	r1, sp
 8000246:	4841      	ldr	r0, [pc, #260]	; (800034c <MX_ADC1_Init+0x17c>)
 8000248:	f001 fabe 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800024c:	2800      	cmp	r0, #0
 800024e:	d15b      	bne.n	8000308 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000250:	2303      	movs	r3, #3
 8000252:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000254:	4669      	mov	r1, sp
 8000256:	483d      	ldr	r0, [pc, #244]	; (800034c <MX_ADC1_Init+0x17c>)
 8000258:	f001 fab6 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800025c:	2800      	cmp	r0, #0
 800025e:	d156      	bne.n	800030e <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000260:	2304      	movs	r3, #4
 8000262:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000264:	4669      	mov	r1, sp
 8000266:	4839      	ldr	r0, [pc, #228]	; (800034c <MX_ADC1_Init+0x17c>)
 8000268:	f001 faae 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800026c:	2800      	cmp	r0, #0
 800026e:	d151      	bne.n	8000314 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000270:	2305      	movs	r3, #5
 8000272:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000274:	4669      	mov	r1, sp
 8000276:	4835      	ldr	r0, [pc, #212]	; (800034c <MX_ADC1_Init+0x17c>)
 8000278:	f001 faa6 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800027c:	2800      	cmp	r0, #0
 800027e:	d14c      	bne.n	800031a <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000280:	2306      	movs	r3, #6
 8000282:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000284:	4669      	mov	r1, sp
 8000286:	4831      	ldr	r0, [pc, #196]	; (800034c <MX_ADC1_Init+0x17c>)
 8000288:	f001 fa9e 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800028c:	2800      	cmp	r0, #0
 800028e:	d147      	bne.n	8000320 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000290:	2307      	movs	r3, #7
 8000292:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	4669      	mov	r1, sp
 8000296:	482d      	ldr	r0, [pc, #180]	; (800034c <MX_ADC1_Init+0x17c>)
 8000298:	f001 fa96 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800029c:	2800      	cmp	r0, #0
 800029e:	d142      	bne.n	8000326 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80002a0:	2308      	movs	r3, #8
 80002a2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a4:	4669      	mov	r1, sp
 80002a6:	4829      	ldr	r0, [pc, #164]	; (800034c <MX_ADC1_Init+0x17c>)
 80002a8:	f001 fa8e 	bl	80017c8 <HAL_ADC_ConfigChannel>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d13d      	bne.n	800032c <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80002b0:	2309      	movs	r3, #9
 80002b2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b4:	4669      	mov	r1, sp
 80002b6:	4825      	ldr	r0, [pc, #148]	; (800034c <MX_ADC1_Init+0x17c>)
 80002b8:	f001 fa86 	bl	80017c8 <HAL_ADC_ConfigChannel>
 80002bc:	2800      	cmp	r0, #0
 80002be:	d138      	bne.n	8000332 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80002c0:	230a      	movs	r3, #10
 80002c2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c4:	4669      	mov	r1, sp
 80002c6:	4821      	ldr	r0, [pc, #132]	; (800034c <MX_ADC1_Init+0x17c>)
 80002c8:	f001 fa7e 	bl	80017c8 <HAL_ADC_ConfigChannel>
 80002cc:	bba0      	cbnz	r0, 8000338 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80002d2:	230b      	movs	r3, #11
 80002d4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80002d6:	2305      	movs	r3, #5
 80002d8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002da:	4669      	mov	r1, sp
 80002dc:	481b      	ldr	r0, [pc, #108]	; (800034c <MX_ADC1_Init+0x17c>)
 80002de:	f001 fa73 	bl	80017c8 <HAL_ADC_ConfigChannel>
 80002e2:	bb60      	cbnz	r0, 800033e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002e4:	230b      	movs	r3, #11
 80002e6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80002e8:	230c      	movs	r3, #12
 80002ea:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ec:	4669      	mov	r1, sp
 80002ee:	4817      	ldr	r0, [pc, #92]	; (800034c <MX_ADC1_Init+0x17c>)
 80002f0:	f001 fa6a 	bl	80017c8 <HAL_ADC_ConfigChannel>
 80002f4:	bb30      	cbnz	r0, 8000344 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
  }

}
 80002f6:	b007      	add	sp, #28
 80002f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80002fc:	f000 faee 	bl	80008dc <Error_Handler>
 8000300:	e78f      	b.n	8000222 <MX_ADC1_Init+0x52>
    Error_Handler();
 8000302:	f000 faeb 	bl	80008dc <Error_Handler>
 8000306:	e79b      	b.n	8000240 <MX_ADC1_Init+0x70>
    Error_Handler();
 8000308:	f000 fae8 	bl	80008dc <Error_Handler>
 800030c:	e7a0      	b.n	8000250 <MX_ADC1_Init+0x80>
    Error_Handler();
 800030e:	f000 fae5 	bl	80008dc <Error_Handler>
 8000312:	e7a5      	b.n	8000260 <MX_ADC1_Init+0x90>
    Error_Handler();
 8000314:	f000 fae2 	bl	80008dc <Error_Handler>
 8000318:	e7aa      	b.n	8000270 <MX_ADC1_Init+0xa0>
    Error_Handler();
 800031a:	f000 fadf 	bl	80008dc <Error_Handler>
 800031e:	e7af      	b.n	8000280 <MX_ADC1_Init+0xb0>
    Error_Handler();
 8000320:	f000 fadc 	bl	80008dc <Error_Handler>
 8000324:	e7b4      	b.n	8000290 <MX_ADC1_Init+0xc0>
    Error_Handler();
 8000326:	f000 fad9 	bl	80008dc <Error_Handler>
 800032a:	e7b9      	b.n	80002a0 <MX_ADC1_Init+0xd0>
    Error_Handler();
 800032c:	f000 fad6 	bl	80008dc <Error_Handler>
 8000330:	e7be      	b.n	80002b0 <MX_ADC1_Init+0xe0>
    Error_Handler();
 8000332:	f000 fad3 	bl	80008dc <Error_Handler>
 8000336:	e7c3      	b.n	80002c0 <MX_ADC1_Init+0xf0>
    Error_Handler();
 8000338:	f000 fad0 	bl	80008dc <Error_Handler>
 800033c:	e7c7      	b.n	80002ce <MX_ADC1_Init+0xfe>
    Error_Handler();
 800033e:	f000 facd 	bl	80008dc <Error_Handler>
 8000342:	e7cf      	b.n	80002e4 <MX_ADC1_Init+0x114>
    Error_Handler();
 8000344:	f000 faca 	bl	80008dc <Error_Handler>
}
 8000348:	e7d5      	b.n	80002f6 <MX_ADC1_Init+0x126>
 800034a:	bf00      	nop
 800034c:	200020e0 	.word	0x200020e0

08000350 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000350:	b530      	push	{r4, r5, lr}
 8000352:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000354:	2300      	movs	r3, #0
 8000356:	9303      	str	r3, [sp, #12]
 8000358:	9304      	str	r3, [sp, #16]
 800035a:	9305      	str	r3, [sp, #20]
 800035c:	9306      	str	r3, [sp, #24]
 800035e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000360:	6803      	ldr	r3, [r0, #0]
 8000362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000366:	d001      	beq.n	800036c <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000368:	b009      	add	sp, #36	; 0x24
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800036e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8000372:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000376:	695a      	ldr	r2, [r3, #20]
 8000378:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800037c:	615a      	str	r2, [r3, #20]
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000396:	9201      	str	r2, [sp, #4]
 8000398:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003a8:	9302      	str	r3, [sp, #8]
 80003aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TP_AFE_OUT_Pin|TP_NOSE_THERMISTOR_Pin;
 80003ac:	2503      	movs	r5, #3
 80003ae:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003b0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	a903      	add	r1, sp, #12
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b8:	f001 fd26 	bl	8001e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TP_THERMISTOR_Pin;
 80003bc:	2301      	movs	r3, #1
 80003be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003c0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2500      	movs	r5, #0
 80003c4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(TP_THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 80003c6:	a903      	add	r1, sp, #12
 80003c8:	480d      	ldr	r0, [pc, #52]	; (8000400 <HAL_ADC_MspInit+0xb0>)
 80003ca:	f001 fd1d 	bl	8001e08 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80003ce:	480d      	ldr	r0, [pc, #52]	; (8000404 <HAL_ADC_MspInit+0xb4>)
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <HAL_ADC_MspInit+0xb8>)
 80003d2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003d4:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80003d6:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003e0:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e6:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80003e8:	6185      	str	r5, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80003ea:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003ec:	f001 fc08 	bl	8001c00 <HAL_DMA_Init>
 80003f0:	b918      	cbnz	r0, 80003fa <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <HAL_ADC_MspInit+0xb4>)
 80003f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80003f6:	625c      	str	r4, [r3, #36]	; 0x24
}
 80003f8:	e7b6      	b.n	8000368 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80003fa:	f000 fa6f 	bl	80008dc <Error_Handler>
 80003fe:	e7f8      	b.n	80003f2 <HAL_ADC_MspInit+0xa2>
 8000400:	48000400 	.word	0x48000400
 8000404:	20002130 	.word	0x20002130
 8000408:	40020008 	.word	0x40020008

0800040c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800040c:	b500      	push	{lr}
 800040e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <MX_DMA_Init+0x30>)
 8000412:	695a      	ldr	r2, [r3, #20]
 8000414:	f042 0201 	orr.w	r2, r2, #1
 8000418:	615a      	str	r2, [r3, #20]
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	2105      	movs	r1, #5
 8000428:	200b      	movs	r0, #11
 800042a:	f001 fb7f 	bl	8001b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800042e:	200b      	movs	r0, #11
 8000430:	f001 fbb0 	bl	8001b94 <HAL_NVIC_EnableIRQ>

}
 8000434:	b003      	add	sp, #12
 8000436:	f85d fb04 	ldr.w	pc, [sp], #4
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000440:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000442:	2001      	movs	r0, #1
 8000444:	f004 fa92 	bl	800496c <osDelay>
 8000448:	e7fb      	b.n	8000442 <StartDefaultTask+0x2>
	...

0800044c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	b09c      	sub	sp, #112	; 0x70
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <MX_FREERTOS_Init+0xac>)
 8000452:	2100      	movs	r1, #0
 8000454:	4829      	ldr	r0, [pc, #164]	; (80004fc <MX_FREERTOS_Init+0xb0>)
 8000456:	f004 f929 	bl	80046ac <osThreadNew>
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <MX_FREERTOS_Init+0xb4>)
 800045c:	6018      	str	r0, [r3, #0]
    const osThreadAttr_t thermopileTask_attributes = {
 800045e:	2520      	movs	r5, #32
 8000460:	462a      	mov	r2, r5
 8000462:	2100      	movs	r1, #0
 8000464:	a814      	add	r0, sp, #80	; 0x50
 8000466:	f006 fb80 	bl	8006b6a <memset>
 800046a:	4b26      	ldr	r3, [pc, #152]	; (8000504 <MX_FREERTOS_Init+0xb8>)
 800046c:	9313      	str	r3, [sp, #76]	; 0x4c
 800046e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8000472:	9618      	str	r6, [sp, #96]	; 0x60
 8000474:	2418      	movs	r4, #24
 8000476:	9419      	str	r4, [sp, #100]	; 0x64
    thermopileTaskHandle = osThreadNew(ThermopileTask, NULL, &thermopileTask_attributes);
 8000478:	aa13      	add	r2, sp, #76	; 0x4c
 800047a:	2100      	movs	r1, #0
 800047c:	4822      	ldr	r0, [pc, #136]	; (8000508 <MX_FREERTOS_Init+0xbc>)
 800047e:	f004 f915 	bl	80046ac <osThreadNew>
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <MX_FREERTOS_Init+0xc0>)
 8000484:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t masterThreadTask_attributes = {
 8000486:	462a      	mov	r2, r5
 8000488:	2100      	movs	r1, #0
 800048a:	a80b      	add	r0, sp, #44	; 0x2c
 800048c:	f006 fb6d 	bl	8006b6a <memset>
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <MX_FREERTOS_Init+0xc4>)
 8000492:	930a      	str	r3, [sp, #40]	; 0x28
 8000494:	960f      	str	r6, [sp, #60]	; 0x3c
 8000496:	9410      	str	r4, [sp, #64]	; 0x40
  masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 8000498:	aa0a      	add	r2, sp, #40	; 0x28
 800049a:	2100      	movs	r1, #0
 800049c:	481d      	ldr	r0, [pc, #116]	; (8000514 <MX_FREERTOS_Init+0xc8>)
 800049e:	f004 f905 	bl	80046ac <osThreadNew>
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <MX_FREERTOS_Init+0xcc>)
 80004a4:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t sendMsgToMainTask_attributes = {
 80004a6:	462a      	mov	r2, r5
 80004a8:	2100      	movs	r1, #0
 80004aa:	a802      	add	r0, sp, #8
 80004ac:	f006 fb5d 	bl	8006b6a <memset>
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <MX_FREERTOS_Init+0xd0>)
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	9306      	str	r3, [sp, #24]
 80004b8:	9407      	str	r4, [sp, #28]
  sendMsgToMainTaskHandle = osThreadNew(SendPacketToMainTask, NULL, &sendMsgToMainTask_attributes);
 80004ba:	aa01      	add	r2, sp, #4
 80004bc:	2100      	movs	r1, #0
 80004be:	4818      	ldr	r0, [pc, #96]	; (8000520 <MX_FREERTOS_Init+0xd4>)
 80004c0:	f004 f8f4 	bl	80046ac <osThreadNew>
 80004c4:	4b17      	ldr	r3, [pc, #92]	; (8000524 <MX_FREERTOS_Init+0xd8>)
 80004c6:	6018      	str	r0, [r3, #0]
  sendMsgToMainQueueHandle = osMessageQueueNew (4, sizeof(struct secondaryProcessorData), NULL);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2158      	movs	r1, #88	; 0x58
 80004cc:	2004      	movs	r0, #4
 80004ce:	f004 fa6f 	bl	80049b0 <osMessageQueueNew>
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_FREERTOS_Init+0xdc>)
 80004d4:	6018      	str	r0, [r3, #0]
  togLoggingQueueHandle = osMessageQueueNew (2, sizeof(struct LogMessage), NULL);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2106      	movs	r1, #6
 80004da:	2002      	movs	r0, #2
 80004dc:	f004 fa68 	bl	80049b0 <osMessageQueueNew>
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_FREERTOS_Init+0xe0>)
 80004e2:	6018      	str	r0, [r3, #0]
  thermMsgQueueHandle = osMessageQueueNew (10, sizeof(struct thermopilePackagedData), NULL);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2150      	movs	r1, #80	; 0x50
 80004e8:	200a      	movs	r0, #10
 80004ea:	f004 fa61 	bl	80049b0 <osMessageQueueNew>
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MX_FREERTOS_Init+0xe4>)
 80004f0:	6018      	str	r0, [r3, #0]
}
 80004f2:	b01c      	add	sp, #112	; 0x70
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
 80004f6:	bf00      	nop
 80004f8:	08006bcc 	.word	0x08006bcc
 80004fc:	08000441 	.word	0x08000441
 8000500:	20002174 	.word	0x20002174
 8000504:	08006b94 	.word	0x08006b94
 8000508:	08000e59 	.word	0x08000e59
 800050c:	20002194 	.word	0x20002194
 8000510:	08006ba4 	.word	0x08006ba4
 8000514:	080009d5 	.word	0x080009d5
 8000518:	20002188 	.word	0x20002188
 800051c:	08006bb8 	.word	0x08006bb8
 8000520:	080006f9 	.word	0x080006f9
 8000524:	20002178 	.word	0x20002178
 8000528:	2000217c 	.word	0x2000217c
 800052c:	20002184 	.word	0x20002184
 8000530:	20002180 	.word	0x20002180

08000534 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	2400      	movs	r4, #0
 800053a:	9403      	str	r4, [sp, #12]
 800053c:	9404      	str	r4, [sp, #16]
 800053e:	9405      	str	r4, [sp, #20]
 8000540:	9406      	str	r4, [sp, #24]
 8000542:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_GPIO_Init+0xb8>)
 8000546:	695a      	ldr	r2, [r3, #20]
 8000548:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800054c:	615a      	str	r2, [r3, #20]
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000566:	9201      	str	r2, [sp, #4]
 8000568:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000570:	615a      	str	r2, [r3, #20]
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000578:	9302      	str	r3, [sp, #8]
 800057a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_INT_Pin|TP25_Pin|TP24_Pin|TP22_Pin 
 800057c:	4622      	mov	r2, r4
 800057e:	f241 7110 	movw	r1, #5904	; 0x1710
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f001 fd03 	bl	8001f90 <HAL_GPIO_WritePin>
                          |TP20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f001 fcfd 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOG_EXP_CONN_Pin|ADC_ALERT_Pin;
 8000596:	230c      	movs	r3, #12
 8000598:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_GPIO_Init+0xbc>)
 800059c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	a903      	add	r1, sp, #12
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f001 fc2f 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin|TP_SS_Pin|TP25_Pin|TP24_Pin 
 80005aa:	f241 7350 	movw	r3, #5968	; 0x1750
 80005ae:	9303      	str	r3, [sp, #12]
                          |TP22_Pin|TP20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	a903      	add	r1, sp, #12
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f001 fc23 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11;
 80005c2:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 80005c6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c8:	2503      	movs	r5, #3
 80005ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	a903      	add	r1, sp, #12
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f001 fc18 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005d8:	2340      	movs	r3, #64	; 0x40
 80005da:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005dc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	a903      	add	r1, sp, #12
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_GPIO_Init+0xc0>)
 80005e4:	f001 fc10 	bl	8001e08 <HAL_GPIO_Init>

}
 80005e8:	b009      	add	sp, #36	; 0x24
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	10110000 	.word	0x10110000
 80005f4:	48000400 	.word	0x48000400

080005f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005f8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 80005fe:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00303D5D;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_I2C1_Init+0x58>)
 8000602:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 230;
 8000604:	23e6      	movs	r3, #230	; 0xe6
 8000606:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	2301      	movs	r3, #1
 800060a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000610:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000612:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	f001 fd88 	bl	800212c <HAL_I2C_Init>
 800061c:	b958      	cbnz	r0, 8000636 <MX_I2C1_Init+0x3e>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	f002 fa80 	bl	8002b28 <HAL_I2CEx_ConfigAnalogFilter>
 8000628:	b940      	cbnz	r0, 800063c <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 800062e:	f002 faa9 	bl	8002b84 <HAL_I2CEx_ConfigDigitalFilter>
 8000632:	b930      	cbnz	r0, 8000642 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }

}
 8000634:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000636:	f000 f951 	bl	80008dc <Error_Handler>
 800063a:	e7f0      	b.n	800061e <MX_I2C1_Init+0x26>
    Error_Handler();
 800063c:	f000 f94e 	bl	80008dc <Error_Handler>
 8000640:	e7f3      	b.n	800062a <MX_I2C1_Init+0x32>
    Error_Handler();
 8000642:	f000 f94b 	bl	80008dc <Error_Handler>
}
 8000646:	e7f5      	b.n	8000634 <MX_I2C1_Init+0x3c>
 8000648:	2000219c 	.word	0x2000219c
 800064c:	40005400 	.word	0x40005400
 8000650:	00303d5d 	.word	0x00303d5d

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	2300      	movs	r3, #0
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	9304      	str	r3, [sp, #16]
 800065e:	9305      	str	r3, [sp, #20]
 8000660:	9306      	str	r3, [sp, #24]
 8000662:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000664:	6802      	ldr	r2, [r0, #0]
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <HAL_I2C_MspInit+0x98>)
 8000668:	429a      	cmp	r2, r3
 800066a:	d001      	beq.n	8000670 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800066c:	b009      	add	sp, #36	; 0x24
 800066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4c1f      	ldr	r4, [pc, #124]	; (80006f0 <HAL_I2C_MspInit+0x9c>)
 8000672:	6963      	ldr	r3, [r4, #20]
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	6163      	str	r3, [r4, #20]
 800067a:	6963      	ldr	r3, [r4, #20]
 800067c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	6963      	ldr	r3, [r4, #20]
 8000686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800068a:	6163      	str	r3, [r4, #20]
 800068c:	6963      	ldr	r3, [r4, #20]
 800068e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800069a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069c:	2512      	movs	r5, #18
 800069e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2703      	movs	r7, #3
 80006a2:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a4:	2604      	movs	r6, #4
 80006a6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	a903      	add	r1, sp, #12
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f001 fbab 	bl	8001e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2500      	movs	r5, #0
 80006ba:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006be:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	a903      	add	r1, sp, #12
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <HAL_I2C_MspInit+0xa0>)
 80006c4:	f001 fba0 	bl	8001e08 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c8:	69e3      	ldr	r3, [r4, #28]
 80006ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ce:	61e3      	str	r3, [r4, #28]
 80006d0:	69e3      	ldr	r3, [r4, #28]
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d6:	9302      	str	r3, [sp, #8]
 80006d8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80006da:	462a      	mov	r2, r5
 80006dc:	2105      	movs	r1, #5
 80006de:	201f      	movs	r0, #31
 80006e0:	f001 fa24 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006e4:	201f      	movs	r0, #31
 80006e6:	f001 fa55 	bl	8001b94 <HAL_NVIC_EnableIRQ>
}
 80006ea:	e7bf      	b.n	800066c <HAL_I2C_MspInit+0x18>
 80006ec:	40005400 	.word	0x40005400
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000400 	.word	0x48000400

080006f8 <SendPacketToMainTask>:
struct LogMessage logMessage;

uint8_t logTracking = 0;

/* Functions Definition ------------------------------------------------------*/
void SendPacketToMainTask(void *argument){
 80006f8:	b510      	push	{r4, lr}
 80006fa:	e019      	b.n	8000730 <SendPacketToMainTask+0x38>

		evt = osThreadFlagsWait (0x00000004U, osFlagsWaitAny, osWaitForever);

		// if master is requesting to stop sampling, stop
		if(logMessage.status == SAMPLE_DISABLE){
			logTracking = 0;
 80006fc:	2400      	movs	r4, #0
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <SendPacketToMainTask+0xe0>)
 8000700:	701c      	strb	r4, [r3, #0]

			// stop sampling
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	4622      	mov	r2, r4
 8000708:	4934      	ldr	r1, [pc, #208]	; (80007dc <SendPacketToMainTask+0xe4>)
 800070a:	4835      	ldr	r0, [pc, #212]	; (80007e0 <SendPacketToMainTask+0xe8>)
 800070c:	6800      	ldr	r0, [r0, #0]
 800070e:	f004 f9af 	bl	8004a70 <osMessageQueuePut>

			// reset interrupt
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 8000712:	4622      	mov	r2, r4
 8000714:	2110      	movs	r1, #16
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f001 fc39 	bl	8001f90 <HAL_GPIO_WritePin>
				// reset trigger
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
			}
		}

		osDelay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f004 f924 	bl	800496c <osDelay>

		// if there is another message queued up, assert interrupt pin
		if( osMessageQueueGetCount(sendMsgToMainQueueHandle) > 0)
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <SendPacketToMainTask+0xec>)
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	f004 fa46 	bl	8004bb8 <osMessageQueueGetCount>
 800072c:	2800      	cmp	r0, #0
 800072e:	d14c      	bne.n	80007ca <SendPacketToMainTask+0xd2>
		while(HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *) &logMessage, sizeof(struct LogMessage)) != HAL_OK);
 8000730:	2206      	movs	r2, #6
 8000732:	492a      	ldr	r1, [pc, #168]	; (80007dc <SendPacketToMainTask+0xe4>)
 8000734:	482c      	ldr	r0, [pc, #176]	; (80007e8 <SendPacketToMainTask+0xf0>)
 8000736:	f001 fd89 	bl	800224c <HAL_I2C_Slave_Receive_IT>
 800073a:	2800      	cmp	r0, #0
 800073c:	d1f8      	bne.n	8000730 <SendPacketToMainTask+0x38>
		evt = osThreadFlagsWait (0x00000004U, osFlagsWaitAny, osWaitForever);
 800073e:	f04f 32ff 	mov.w	r2, #4294967295
 8000742:	2100      	movs	r1, #0
 8000744:	2004      	movs	r0, #4
 8000746:	f004 f8ab 	bl	80048a0 <osThreadFlagsWait>
		if(logMessage.status == SAMPLE_DISABLE){
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <SendPacketToMainTask+0xe4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0d4      	beq.n	80006fc <SendPacketToMainTask+0x4>
		else if(logMessage.status != SAMPLE_DISABLE && logTracking==0)
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <SendPacketToMainTask+0xe0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b1fb      	cbz	r3, 8000798 <SendPacketToMainTask+0xa0>
		else if(logTracking == 1)
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SendPacketToMainTask+0xe0>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d1de      	bne.n	800071e <SendPacketToMainTask+0x26>
			if(osMessageQueueGet(sendMsgToMainQueueHandle, &packetReceived, 0U, 0) == osOK)
 8000760:	2300      	movs	r3, #0
 8000762:	461a      	mov	r2, r3
 8000764:	4921      	ldr	r1, [pc, #132]	; (80007ec <SendPacketToMainTask+0xf4>)
 8000766:	481f      	ldr	r0, [pc, #124]	; (80007e4 <SendPacketToMainTask+0xec>)
 8000768:	6800      	ldr	r0, [r0, #0]
 800076a:	f004 f9d3 	bl	8004b14 <osMessageQueueGet>
 800076e:	bb28      	cbnz	r0, 80007bc <SendPacketToMainTask+0xc4>
				while(HAL_I2C_Slave_Transmit_IT(&hi2c1, (uint8_t *) &packetReceived, sizeof(struct secondaryProcessorData)) != HAL_OK);
 8000770:	2258      	movs	r2, #88	; 0x58
 8000772:	491e      	ldr	r1, [pc, #120]	; (80007ec <SendPacketToMainTask+0xf4>)
 8000774:	481c      	ldr	r0, [pc, #112]	; (80007e8 <SendPacketToMainTask+0xf0>)
 8000776:	f001 fd37 	bl	80021e8 <HAL_I2C_Slave_Transmit_IT>
 800077a:	2800      	cmp	r0, #0
 800077c:	d1f8      	bne.n	8000770 <SendPacketToMainTask+0x78>
				evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 800077e:	f04f 32ff 	mov.w	r2, #4294967295
 8000782:	2100      	movs	r1, #0
 8000784:	2001      	movs	r0, #1
 8000786:	f004 f88b 	bl	80048a0 <osThreadFlagsWait>
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2110      	movs	r1, #16
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f001 fbfd 	bl	8001f90 <HAL_GPIO_WritePin>
 8000796:	e7c2      	b.n	800071e <SendPacketToMainTask+0x26>
			logTracking = 1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <SendPacketToMainTask+0xe0>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2110      	movs	r1, #16
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f001 fbf3 	bl	8001f90 <HAL_GPIO_WritePin>
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	2200      	movs	r2, #0
 80007b0:	490a      	ldr	r1, [pc, #40]	; (80007dc <SendPacketToMainTask+0xe4>)
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <SendPacketToMainTask+0xe8>)
 80007b4:	6800      	ldr	r0, [r0, #0]
 80007b6:	f004 f95b 	bl	8004a70 <osMessageQueuePut>
 80007ba:	e7b0      	b.n	800071e <SendPacketToMainTask+0x26>
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2110      	movs	r1, #16
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f001 fbe4 	bl	8001f90 <HAL_GPIO_WritePin>
 80007c8:	e7a9      	b.n	800071e <SendPacketToMainTask+0x26>
		{
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2110      	movs	r1, #16
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f001 fbdd 	bl	8001f90 <HAL_GPIO_WritePin>
 80007d6:	e7ab      	b.n	8000730 <SendPacketToMainTask+0x38>
 80007d8:	2000002c 	.word	0x2000002c
 80007dc:	200021e8 	.word	0x200021e8
 80007e0:	20002184 	.word	0x20002184
 80007e4:	2000217c 	.word	0x2000217c
 80007e8:	2000219c 	.word	0x2000219c
 80007ec:	200021f0 	.word	0x200021f0

080007f0 <HAL_I2C_SlaveTxCpltCallback>:
//		osDelay(500);
//	}
//}

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80007f0:	b508      	push	{r3, lr}
	// notify sending thread that message has been sent
	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
 80007f2:	2101      	movs	r1, #1
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_I2C_SlaveTxCpltCallback+0x10>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	f003 ffcc 	bl	8004794 <osThreadFlagsSet>
}
 80007fc:	bd08      	pop	{r3, pc}
 80007fe:	bf00      	nop
 8000800:	20002178 	.word	0x20002178

08000804 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000804:	b508      	push	{r3, lr}
	//osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000004U);
	// notify receiving thread that a message has been received
	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000004U);
 8000806:	2104      	movs	r1, #4
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <HAL_I2C_SlaveRxCpltCallback+0x10>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	f003 ffc2 	bl	8004794 <osThreadFlagsSet>
}
 8000810:	bd08      	pop	{r3, pc}
 8000812:	bf00      	nop
 8000814:	20002178 	.word	0x20002178

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081c:	2400      	movs	r4, #0
 800081e:	9415      	str	r4, [sp, #84]	; 0x54
 8000820:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000822:	940d      	str	r4, [sp, #52]	; 0x34
 8000824:	940e      	str	r4, [sp, #56]	; 0x38
 8000826:	940f      	str	r4, [sp, #60]	; 0x3c
 8000828:	9410      	str	r4, [sp, #64]	; 0x40
 800082a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	2230      	movs	r2, #48	; 0x30
 800082e:	4621      	mov	r1, r4
 8000830:	a801      	add	r0, sp, #4
 8000832:	f006 f99a 	bl	8006b6a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000836:	2309      	movs	r3, #9
 8000838:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV16;
 8000840:	260f      	movs	r6, #15
 8000842:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2201      	movs	r2, #1
 8000846:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000848:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2502      	movs	r5, #2
 800084c:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000850:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000854:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	a812      	add	r0, sp, #72	; 0x48
 8000858:	f002 f9c0 	bl	8002bdc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	960d      	str	r6, [sp, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000860:	23b0      	movs	r3, #176	; 0xb0
 8000862:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000864:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	9411      	str	r4, [sp, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000868:	4621      	mov	r1, r4
 800086a:	a80d      	add	r0, sp, #52	; 0x34
 800086c:	f002 fd16 	bl	800329c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SystemClock_Config+0x70>)
 8000872:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000874:	2310      	movs	r3, #16
 8000876:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087c:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087e:	a801      	add	r0, sp, #4
 8000880:	f002 fe18 	bl	80034b4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000884:	b01c      	add	sp, #112	; 0x70
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	00010020 	.word	0x00010020

0800088c <main>:
{
 800088c:	b508      	push	{r3, lr}
  HAL_Init();
 800088e:	f000 fc85 	bl	800119c <HAL_Init>
  SystemClock_Config();
 8000892:	f7ff ffc1 	bl	8000818 <SystemClock_Config>
  MX_DMA_Init();
 8000896:	f7ff fdb9 	bl	800040c <MX_DMA_Init>
  MX_GPIO_Init();
 800089a:	f7ff fe4b 	bl	8000534 <MX_GPIO_Init>
  MX_I2C1_Init();
 800089e:	f7ff feab 	bl	80005f8 <MX_I2C1_Init>
  MX_SPI3_Init();
 80008a2:	f000 f94f 	bl	8000b44 <MX_SPI3_Init>
  MX_ADC1_Init();
 80008a6:	f7ff fc93 	bl	80001d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008aa:	f000 fb9b 	bl	8000fe4 <MX_TIM2_Init>
  MX_RTC_Init();
 80008ae:	f000 f91b 	bl	8000ae8 <MX_RTC_Init>
  MX_TIM6_Init();
 80008b2:	f000 fbef 	bl	8001094 <MX_TIM6_Init>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80008b6:	f003 feb1 	bl	800461c <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80008ba:	f7ff fdc7 	bl	800044c <MX_FREERTOS_Init>
  osKernelStart();
 80008be:	f003 fecf 	bl	8004660 <osKernelStart>
 80008c2:	e7fe      	b.n	80008c2 <main+0x36>

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c6:	6802      	ldr	r2, [r0, #0]
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d000      	beq.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80008d0:	f000 fc76 	bl	80011c0 <HAL_IncTick>
}
 80008d4:	e7fb      	b.n	80008ce <HAL_TIM_PeriodElapsedCallback+0xa>
 80008d6:	bf00      	nop
 80008d8:	40012c00 	.word	0x40012c00

080008dc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008dc:	4770      	bx	lr
	...

080008e0 <RTC_ToEpoch>:
	memcpy ( &(packet->temp), temp, sizeof(struct thermopilePackagedData) );

}

// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80008e0:	b430      	push	{r4, r5}
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 80008e2:	784b      	ldrb	r3, [r1, #1]
 80008e4:	f1c3 040e 	rsb	r4, r3, #14
 80008e8:	4d22      	ldr	r5, [pc, #136]	; (8000974 <RTC_ToEpoch+0x94>)
 80008ea:	fb85 2504 	smull	r2, r5, r5, r4
 80008ee:	17e2      	asrs	r2, r4, #31
 80008f0:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 80008f4:	b2d2      	uxtb	r2, r2
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 80008f6:	78cc      	ldrb	r4, [r1, #3]
 80008f8:	1aa4      	subs	r4, r4, r2
 80008fa:	f641 2590 	movw	r5, #6800	; 0x1a90
 80008fe:	fa15 f484 	uxtah	r4, r5, r4
 8000902:	b2a4      	uxth	r4, r4
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8000904:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000908:	0095      	lsls	r5, r2, #2
 800090a:	442b      	add	r3, r5
 800090c:	b2db      	uxtb	r3, r3
 800090e:	3b03      	subs	r3, #3
 8000910:	b2db      	uxtb	r3, r3

	// Gregorian calendar date compute
    JDN  = date->Date;
 8000912:	788a      	ldrb	r2, [r1, #2]
    JDN += (153 * m + 2) / 5;
 8000914:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000918:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800091c:	3302      	adds	r3, #2
 800091e:	4916      	ldr	r1, [pc, #88]	; (8000978 <RTC_ToEpoch+0x98>)
 8000920:	fb81 1303 	smull	r1, r3, r1, r3
 8000924:	eb02 0263 	add.w	r2, r2, r3, asr #1
    JDN += 365 * y;
 8000928:	f240 136d 	movw	r3, #365	; 0x16d
 800092c:	fb03 2304 	mla	r3, r3, r4, r2
    JDN += y / 4;
 8000930:	eb03 0394 	add.w	r3, r3, r4, lsr #2
    JDN += -y / 100;
 8000934:	4262      	negs	r2, r4
 8000936:	4911      	ldr	r1, [pc, #68]	; (800097c <RTC_ToEpoch+0x9c>)
 8000938:	fb81 c502 	smull	ip, r5, r1, r2
 800093c:	17d2      	asrs	r2, r2, #31
 800093e:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 8000942:	441a      	add	r2, r3
    JDN += y / 400;
 8000944:	fba1 3404 	umull	r3, r4, r1, r4
 8000948:	eb02 14d4 	add.w	r4, r2, r4, lsr #7
    JDN  = JDN - 32045;
    JDN  = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <RTC_ToEpoch+0xa0>)
 800094e:	4423      	add	r3, r4
    JDN *= 86400;                     // Days to seconds
    JDN += time->Hours * 3600;    // ... and today seconds
 8000950:	7801      	ldrb	r1, [r0, #0]
 8000952:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000956:	fb02 f201 	mul.w	r2, r2, r1
 800095a:	490a      	ldr	r1, [pc, #40]	; (8000984 <RTC_ToEpoch+0xa4>)
 800095c:	fb01 2303 	mla	r3, r1, r3, r2
    JDN += time->Minutes * 60;
 8000960:	7842      	ldrb	r2, [r0, #1]
 8000962:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8000966:	0091      	lsls	r1, r2, #2
 8000968:	440b      	add	r3, r1
    JDN += time->Seconds;
 800096a:	7880      	ldrb	r0, [r0, #2]

	return JDN;
}
 800096c:	4418      	add	r0, r3
 800096e:	bc30      	pop	{r4, r5}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2aaaaaab 	.word	0x2aaaaaab
 8000978:	66666667 	.word	0x66666667
 800097c:	51eb851f 	.word	0x51eb851f
 8000980:	ffda4547 	.word	0xffda4547
 8000984:	00015180 	.word	0x00015180

08000988 <packetizeData>:
{
 8000988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800098c:	4604      	mov	r4, r0
 800098e:	4688      	mov	r8, r1
	packet->tick_ms = HAL_GetTick();
 8000990:	f000 fc22 	bl	80011d8 <HAL_GetTick>
 8000994:	6520      	str	r0, [r4, #80]	; 0x50
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8000996:	4d0c      	ldr	r5, [pc, #48]	; (80009c8 <packetizeData+0x40>)
 8000998:	4f0c      	ldr	r7, [pc, #48]	; (80009cc <packetizeData+0x44>)
 800099a:	2200      	movs	r2, #0
 800099c:	4629      	mov	r1, r5
 800099e:	4638      	mov	r0, r7
 80009a0:	f002 ff3e 	bl	8003820 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 80009a4:	4e0a      	ldr	r6, [pc, #40]	; (80009d0 <packetizeData+0x48>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	4631      	mov	r1, r6
 80009aa:	4638      	mov	r0, r7
 80009ac:	f002 ff63 	bl	8003876 <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 80009b0:	4631      	mov	r1, r6
 80009b2:	4628      	mov	r0, r5
 80009b4:	f7ff ff94 	bl	80008e0 <RTC_ToEpoch>
 80009b8:	6560      	str	r0, [r4, #84]	; 0x54
	memcpy ( &(packet->temp), temp, sizeof(struct thermopilePackagedData) );
 80009ba:	2250      	movs	r2, #80	; 0x50
 80009bc:	4641      	mov	r1, r8
 80009be:	4620      	mov	r0, r4
 80009c0:	f006 f8c8 	bl	8006b54 <memcpy>
}
 80009c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009c8:	200022f8 	.word	0x200022f8
 80009cc:	20002318 	.word	0x20002318
 80009d0:	20002314 	.word	0x20002314

080009d4 <MasterThreadTask>:
{
 80009d4:	b510      	push	{r4, lr}
 80009d6:	e036      	b.n	8000a46 <MasterThreadTask+0x72>
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80009d8:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <MasterThreadTask+0xf0>)
 80009da:	6821      	ldr	r1, [r4, #0]
 80009dc:	6011      	str	r1, [r2, #0]
 80009de:	88a1      	ldrh	r1, [r4, #4]
 80009e0:	8091      	strh	r1, [r2, #4]
			if(togLogMessageReceived.tempEnabled == SENSOR_ENABLE)
 80009e2:	78e3      	ldrb	r3, [r4, #3]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d050      	beq.n	8000a8a <MasterThreadTask+0xb6>
				if(togLogMessageReceived.tempEnabled == SENSOR_ENABLE)
 80009e8:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <MasterThreadTask+0xf4>)
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d052      	beq.n	8000a96 <MasterThreadTask+0xc2>
					packetizeData(&sensorPacket, &thermMsgReceived);
 80009f0:	4c36      	ldr	r4, [pc, #216]	; (8000acc <MasterThreadTask+0xf8>)
 80009f2:	4937      	ldr	r1, [pc, #220]	; (8000ad0 <MasterThreadTask+0xfc>)
 80009f4:	4620      	mov	r0, r4
 80009f6:	f7ff ffc7 	bl	8000988 <packetizeData>
					osMessageQueuePut(sendMsgToMainQueueHandle, (void *) &sensorPacket, 0U, 0);
 80009fa:	2300      	movs	r3, #0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4621      	mov	r1, r4
 8000a00:	4834      	ldr	r0, [pc, #208]	; (8000ad4 <MasterThreadTask+0x100>)
 8000a02:	6800      	ldr	r0, [r0, #0]
 8000a04:	f004 f834 	bl	8004a70 <osMessageQueuePut>
					HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f001 fabe 	bl	8001f90 <HAL_GPIO_WritePin>
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 8000a14:	2300      	movs	r3, #0
 8000a16:	461a      	mov	r2, r3
 8000a18:	492b      	ldr	r1, [pc, #172]	; (8000ac8 <MasterThreadTask+0xf4>)
 8000a1a:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <MasterThreadTask+0x104>)
 8000a1c:	6800      	ldr	r0, [r0, #0]
 8000a1e:	f004 f879 	bl	8004b14 <osMessageQueueGet>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d1e0      	bne.n	80009e8 <MasterThreadTask+0x14>
					if(togLogMessageReceived.status == DISABLE_SENSING){
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MasterThreadTask+0xf4>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1dc      	bne.n	80009e8 <MasterThreadTask+0x14>
						if(prevLogMessage.tempEnabled == SENSOR_ENABLE)
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <MasterThreadTask+0xf0>)
 8000a30:	78db      	ldrb	r3, [r3, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d03a      	beq.n	8000aac <MasterThreadTask+0xd8>
						osDelay(500);
 8000a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3a:	f003 ff97 	bl	800496c <osDelay>
						osMessageQueueReset(sendMsgToMainQueueHandle);
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <MasterThreadTask+0x100>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f004 f8d3 	bl	8004bec <osMessageQueueReset>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 8000a46:	4c20      	ldr	r4, [pc, #128]	; (8000ac8 <MasterThreadTask+0xf4>)
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4621      	mov	r1, r4
 8000a50:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <MasterThreadTask+0x104>)
 8000a52:	6800      	ldr	r0, [r0, #0]
 8000a54:	f004 f85e 	bl	8004b14 <osMessageQueueGet>
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 8000a58:	7863      	ldrb	r3, [r4, #1]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d0bc      	beq.n	80009d8 <MasterThreadTask+0x4>
		else if( logEnabled==1 && togLogMessageReceived.logStatus == DISABLE_LOG)
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <MasterThreadTask+0x108>)
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	2a01      	cmp	r2, #1
 8000a64:	d1ef      	bne.n	8000a46 <MasterThreadTask+0x72>
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1ed      	bne.n	8000a46 <MasterThreadTask+0x72>
			logEnabled = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MasterThreadTask+0x108>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
			if(prevLogMessage.tempEnabled == SENSOR_ENABLE)
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MasterThreadTask+0xf0>)
 8000a72:	78db      	ldrb	r3, [r3, #3]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d01f      	beq.n	8000ab8 <MasterThreadTask+0xe4>
			osDelay(500);
 8000a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7c:	f003 ff76 	bl	800496c <osDelay>
			osMessageQueueReset(sendMsgToMainQueueHandle);
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MasterThreadTask+0x100>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	f004 f8b2 	bl	8004bec <osMessageQueueReset>
 8000a88:	e7dd      	b.n	8000a46 <MasterThreadTask+0x72>
				osThreadFlagsSet(thermopileTaskHandle, 0x00000001U);
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MasterThreadTask+0x10c>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	f003 fe80 	bl	8004794 <osThreadFlagsSet>
 8000a94:	e7a8      	b.n	80009e8 <MasterThreadTask+0x14>
					if( osOK != osMessageQueueGet(thermMsgQueueHandle, &thermMsgReceived, 0U, 1000)){
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <MasterThreadTask+0xfc>)
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MasterThreadTask+0x110>)
 8000aa0:	6800      	ldr	r0, [r0, #0]
 8000aa2:	f004 f837 	bl	8004b14 <osMessageQueueGet>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d1b4      	bne.n	8000a14 <MasterThreadTask+0x40>
 8000aaa:	e7a1      	b.n	80009f0 <MasterThreadTask+0x1c>
							osThreadFlagsSet(thermopileTaskHandle, 0x00000002U);
 8000aac:	2102      	movs	r1, #2
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MasterThreadTask+0x10c>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	f003 fe6f 	bl	8004794 <osThreadFlagsSet>
 8000ab6:	e7be      	b.n	8000a36 <MasterThreadTask+0x62>
				osThreadFlagsSet(thermopileTaskHandle, 0x00000002U);
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MasterThreadTask+0x10c>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	f003 fe69 	bl	8004794 <osThreadFlagsSet>
 8000ac2:	e7d9      	b.n	8000a78 <MasterThreadTask+0xa4>
 8000ac4:	2000230c 	.word	0x2000230c
 8000ac8:	20002248 	.word	0x20002248
 8000acc:	200022a0 	.word	0x200022a0
 8000ad0:	20002250 	.word	0x20002250
 8000ad4:	2000217c 	.word	0x2000217c
 8000ad8:	20002184 	.word	0x20002184
 8000adc:	2000002d 	.word	0x2000002d
 8000ae0:	20002194 	.word	0x20002194
 8000ae4:	20002180 	.word	0x20002180

08000ae8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ae8:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_RTC_Init+0x28>)
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_RTC_Init+0x2c>)
 8000aee:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000af0:	2300      	movs	r3, #0
 8000af2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000af4:	227f      	movs	r2, #127	; 0x7f
 8000af6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000af8:	22ff      	movs	r2, #255	; 0xff
 8000afa:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000afc:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afe:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b00:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b02:	f002 fe22 	bl	800374a <HAL_RTC_Init>
 8000b06:	b900      	cbnz	r0, 8000b0a <MX_RTC_Init+0x22>
  {
    Error_Handler();
  }

}
 8000b08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b0a:	f7ff fee7 	bl	80008dc <Error_Handler>
}
 8000b0e:	e7fb      	b.n	8000b08 <MX_RTC_Init+0x20>
 8000b10:	20002318 	.word	0x20002318
 8000b14:	40002800 	.word	0x40002800

08000b18 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8000b18:	6802      	ldr	r2, [r0, #0]
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_RTC_MspInit+0x24>)
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d000      	beq.n	8000b22 <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b20:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b26:	fa92 f2a2 	rbit	r2, r2
    __HAL_RCC_RTC_ENABLE();
 8000b2a:	fab2 f282 	clz	r2, r2
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <HAL_RTC_MspInit+0x28>)
 8000b30:	4413      	add	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	e7f2      	b.n	8000b20 <HAL_RTC_MspInit+0x8>
 8000b3a:	bf00      	nop
 8000b3c:	40002800 	.word	0x40002800
 8000b40:	10908100 	.word	0x10908100

08000b44 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b44:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8000b46:	4810      	ldr	r0, [pc, #64]	; (8000b88 <MX_SPI3_Init+0x44>)
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_SPI3_Init+0x48>)
 8000b4a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b4c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b50:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	2300      	movs	r3, #0
 8000b54:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b5a:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5e:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b66:	2228      	movs	r2, #40	; 0x28
 8000b68:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b6a:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b70:	2207      	movs	r2, #7
 8000b72:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b74:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b76:	2308      	movs	r3, #8
 8000b78:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b7a:	f002 ff64 	bl	8003a46 <HAL_SPI_Init>
 8000b7e:	b900      	cbnz	r0, 8000b82 <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 8000b80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b82:	f7ff feab 	bl	80008dc <Error_Handler>
}
 8000b86:	e7fb      	b.n	8000b80 <MX_SPI3_Init+0x3c>
 8000b88:	20002338 	.word	0x20002338
 8000b8c:	40003c00 	.word	0x40003c00

08000b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b90:	b500      	push	{lr}
 8000b92:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	2300      	movs	r3, #0
 8000b96:	9303      	str	r3, [sp, #12]
 8000b98:	9304      	str	r3, [sp, #16]
 8000b9a:	9305      	str	r3, [sp, #20]
 8000b9c:	9306      	str	r3, [sp, #24]
 8000b9e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 8000ba0:	6802      	ldr	r2, [r0, #0]
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_SPI_MspInit+0x70>)
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d002      	beq.n	8000bae <HAL_SPI_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ba8:	b009      	add	sp, #36	; 0x24
 8000baa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bae:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000bb2:	69da      	ldr	r2, [r3, #28]
 8000bb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bb8:	61da      	str	r2, [r3, #28]
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000bc0:	9201      	str	r2, [sp, #4]
 8000bc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bd6:	2338      	movs	r3, #56	; 0x38
 8000bd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be2:	2306      	movs	r3, #6
 8000be4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	a903      	add	r1, sp, #12
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_SPI_MspInit+0x74>)
 8000bea:	f001 f90d 	bl	8001e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2105      	movs	r1, #5
 8000bf2:	2033      	movs	r0, #51	; 0x33
 8000bf4:	f000 ff9a 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000bf8:	2033      	movs	r0, #51	; 0x33
 8000bfa:	f000 ffcb 	bl	8001b94 <HAL_NVIC_EnableIRQ>
}
 8000bfe:	e7d3      	b.n	8000ba8 <HAL_SPI_MspInit+0x18>
 8000c00:	40003c00 	.word	0x40003c00
 8000c04:	48000400 	.word	0x48000400

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b500      	push	{lr}
 8000c0a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_MspInit+0x3c>)
 8000c0e:	699a      	ldr	r2, [r3, #24]
 8000c10:	f042 0201 	orr.w	r2, r2, #1
 8000c14:	619a      	str	r2, [r3, #24]
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	f002 0201 	and.w	r2, r2, #1
 8000c1c:	9200      	str	r2, [sp, #0]
 8000c1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	69da      	ldr	r2, [r3, #28]
 8000c22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c26:	61da      	str	r2, [r3, #28]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	210f      	movs	r1, #15
 8000c36:	f06f 0001 	mvn.w	r0, #1
 8000c3a:	f000 ff77 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	b003      	add	sp, #12
 8000c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b500      	push	{lr}
 8000c4a:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4601      	mov	r1, r0
 8000c50:	2019      	movs	r0, #25
 8000c52:	f000 ff6b 	bl	8001b2c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000c56:	2019      	movs	r0, #25
 8000c58:	f000 ff9c 	bl	8001b94 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x68>)
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c64:	619a      	str	r2, [r3, #24]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c70:	a902      	add	r1, sp, #8
 8000c72:	a803      	add	r0, sp, #12
 8000c74:	f002 fc00 	bl	8003478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c78:	f002 fbe8 	bl	800344c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_InitTick+0x6c>)
 8000c7e:	fba3 2300 	umull	r2, r3, r3, r0
 8000c82:	0c9b      	lsrs	r3, r3, #18
 8000c84:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <HAL_InitTick+0x70>)
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_InitTick+0x74>)
 8000c8a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c90:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c92:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c9a:	f003 fb5b 	bl	8004354 <HAL_TIM_Base_Init>
 8000c9e:	b118      	cbz	r0, 8000ca8 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ca0:	2001      	movs	r0, #1
}
 8000ca2:	b009      	add	sp, #36	; 0x24
 8000ca4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <HAL_InitTick+0x70>)
 8000caa:	f003 fa2b 	bl	8004104 <HAL_TIM_Base_Start_IT>
 8000cae:	e7f8      	b.n	8000ca2 <HAL_InitTick+0x5a>
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	2000239c 	.word	0x2000239c
 8000cbc:	40012c00 	.word	0x40012c00

08000cc0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc0:	4770      	bx	lr

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler>

08000cca <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	4770      	bx	lr

08000ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ccc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cce:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DMA1_Channel1_IRQHandler+0xc>)
 8000cd0:	f001 f83f 	bl	8001d52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cd4:	bd08      	pop	{r3, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20002130 	.word	0x20002130

08000cdc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cde:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000ce0:	f003 fa2b 	bl	800413a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ce4:	bd08      	pop	{r3, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000239c 	.word	0x2000239c

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cee:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <TIM2_IRQHandler+0xc>)
 8000cf0:	f003 fa23 	bl	800413a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf4:	bd08      	pop	{r3, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20002470 	.word	0x20002470

08000cfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cfe:	4802      	ldr	r0, [pc, #8]	; (8000d08 <I2C1_EV_IRQHandler+0xc>)
 8000d00:	f001 fad6 	bl	80022b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d04:	bd08      	pop	{r3, pc}
 8000d06:	bf00      	nop
 8000d08:	2000219c 	.word	0x2000219c

08000d0c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d0e:	4802      	ldr	r0, [pc, #8]	; (8000d18 <SPI3_IRQHandler+0xc>)
 8000d10:	f002 ffe6 	bl	8003ce0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d14:	bd08      	pop	{r3, pc}
 8000d16:	bf00      	nop
 8000d18:	20002338 	.word	0x20002338

08000d1c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SystemInit+0x18>)
 8000d1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d22:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <HAL_ADC_ConvCpltCallback>:
	}
}

volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d38:	b508      	push	{r3, lr}
	complete++;
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_ADC_ConvCpltCallback+0x24>)
 8000d3c:	7813      	ldrb	r3, [r2, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	7013      	strb	r3, [r2, #0]

	// notify ThermopileTask that conversion is complete
	while( HAL_ADC_Stop(&hadc1) != HAL_OK);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <HAL_ADC_ConvCpltCallback+0x28>)
 8000d46:	f000 fc71 	bl	800162c <HAL_ADC_Stop>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d1fa      	bne.n	8000d44 <HAL_ADC_ConvCpltCallback+0xc>
	osThreadFlagsSet(thermopileTaskHandle, 0x00000004U);
 8000d4e:	2104      	movs	r1, #4
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	f003 fd1e 	bl	8004794 <osThreadFlagsSet>

}
 8000d58:	bd08      	pop	{r3, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000048 	.word	0x20000048
 8000d60:	200020e0 	.word	0x200020e0
 8000d64:	20002194 	.word	0x20002194

08000d68 <HAL_ADC_ConvHalfCpltCallback>:
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
//	blink_ptr = &blink_buffer;
//	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);

}
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_ADC_ErrorCallback>:

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 8000d6c:	4a02      	ldr	r2, [pc, #8]	; (8000d78 <HAL_ADC_ErrorCallback+0xc>)
 8000d6e:	7813      	ldrb	r3, [r2, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	7013      	strb	r3, [r2, #0]
}
 8000d76:	4770      	bx	lr
 8000d78:	20000050 	.word	0x20000050

08000d7c <SwitchTemperatureSensor>:
//}

/*
 * Helper Functions
 */
void SwitchTemperatureSensor(sensorChoice sense){
 8000d7c:	b500      	push	{lr}
 8000d7e:	b083      	sub	sp, #12

	uint8_t packet[2] = {0};
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8ad 3004 	strh.w	r3, [sp, #4]

	packet[0] = LMP91051_CFG_REG;

	if(sense == nose){
 8000d86:	2801      	cmp	r0, #1
 8000d88:	d01b      	beq.n	8000dc2 <SwitchTemperatureSensor+0x46>

		//		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_32| GAIN1_42 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict

//		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_16 | GAIN1_42 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
	}
	else if(sense == temple){
 8000d8a:	b910      	cbnz	r0, 8000d92 <SwitchTemperatureSensor+0x16>
		packet[1] = TP_TEMPLE_SEL | PGA1_EN | PGA2_EN | GAIN2_4 | GAIN1_250 | CMN_MODE_1_15 | EXT_FILT_EN; //todo: add blocking semaphore so no LED conflict
 8000d8c:	23f0      	movs	r3, #240	; 0xf0
 8000d8e:	f88d 3005 	strb.w	r3, [sp, #5]

//		packet[1] = TP_TEMPLE_SEL | PGA1_EN | PGA2_EN | GAIN2_4 | GAIN1_250 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
	}

	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f001 f8f9 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000d9e:	2301      	movs	r3, #1
 8000da0:	2202      	movs	r2, #2
 8000da2:	a901      	add	r1, sp, #4
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <SwitchTemperatureSensor+0x50>)
 8000da6:	f002 feab 	bl	8003b00 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f000 fa1a 	bl	80011e4 <HAL_Delay>
	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f001 f8ea 	bl	8001f90 <HAL_GPIO_WritePin>
//
//	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
//	HAL_SPI_Transmit(&hspi3, packet, 2, 1);
//	HAL_Delay(2);
//	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
}
 8000dbc:	b003      	add	sp, #12
 8000dbe:	f85d fb04 	ldr.w	pc, [sp], #4
		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_4 | GAIN1_250 | CMN_MODE_1_15 | EXT_FILT_EN; //todo: add blocking semaphore so no LED conflict
 8000dc2:	2370      	movs	r3, #112	; 0x70
 8000dc4:	f88d 3005 	strb.w	r3, [sp, #5]
 8000dc8:	e7e3      	b.n	8000d92 <SwitchTemperatureSensor+0x16>
 8000dca:	bf00      	nop
 8000dcc:	20002338 	.word	0x20002338

08000dd0 <TurnOff_LMP91051>:
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);

  TurnOff_LMP91051();
}

void TurnOff_LMP91051(void){
 8000dd0:	b500      	push	{lr}
 8000dd2:	b083      	sub	sp, #12
  uint8_t packet[2];
  packet[0] = LMP91051_CFG_REG;
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f88d 2004 	strb.w	r2, [sp, #4]
  packet[1] = 0; //todo: add blocking semaphore so no LED conflict
 8000dda:	f88d 2005 	strb.w	r2, [sp, #5]
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f001 f8d4 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000de8:	2301      	movs	r3, #1
 8000dea:	2202      	movs	r2, #2
 8000dec:	a901      	add	r1, sp, #4
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <TurnOff_LMP91051+0x3c>)
 8000df0:	f002 fe86 	bl	8003b00 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000df4:	2002      	movs	r0, #2
 8000df6:	f000 f9f5 	bl	80011e4 <HAL_Delay>
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f001 f8c5 	bl	8001f90 <HAL_GPIO_WritePin>
}
 8000e06:	b003      	add	sp, #12
 8000e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e0c:	20002338 	.word	0x20002338

08000e10 <Setup_LMP91051>:
void Setup_LMP91051(void){
 8000e10:	b510      	push	{r4, lr}
 8000e12:	b082      	sub	sp, #8
  packet[0] = LMP91051_DAC_REG;
 8000e14:	2401      	movs	r4, #1
 8000e16:	f88d 4004 	strb.w	r4, [sp, #4]
  packet[1] = 110; // shift signal down by -33.8mV (NDAC - 128) during 2nd stage amp
 8000e1a:	236e      	movs	r3, #110	; 0x6e
 8000e1c:	f88d 3005 	strb.w	r3, [sp, #5]
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f001 f8b2 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	2202      	movs	r2, #2
 8000e30:	a901      	add	r1, sp, #4
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <Setup_LMP91051+0x44>)
 8000e34:	f002 fe64 	bl	8003b00 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f000 f9d3 	bl	80011e4 <HAL_Delay>
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000e3e:	4622      	mov	r2, r4
 8000e40:	2140      	movs	r1, #64	; 0x40
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f001 f8a3 	bl	8001f90 <HAL_GPIO_WritePin>
  TurnOff_LMP91051();
 8000e4a:	f7ff ffc1 	bl	8000dd0 <TurnOff_LMP91051>
}
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd10      	pop	{r4, pc}
 8000e52:	bf00      	nop
 8000e54:	20002338 	.word	0x20002338

08000e58 <ThermopileTask>:
void ThermopileTask(void *argument){
 8000e58:	b538      	push	{r3, r4, r5, lr}
  Setup_LMP91051();
 8000e5a:	f7ff ffd9 	bl	8000e10 <Setup_LMP91051>
 8000e5e:	e08c      	b.n	8000f7a <ThermopileTask+0x122>
						avgVal += buffer.thermopile[index_thermopile];
 8000e60:	4957      	ldr	r1, [pc, #348]	; (8000fc0 <ThermopileTask+0x168>)
 8000e62:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000e66:	440a      	add	r2, r1
					for(index_thermopile = 0; index_thermopile<10; index_thermopile++){
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b09      	cmp	r3, #9
 8000e6e:	d9f7      	bls.n	8000e60 <ThermopileTask+0x8>
					avgVal = avgVal / 10;
 8000e70:	4c54      	ldr	r4, [pc, #336]	; (8000fc4 <ThermopileTask+0x16c>)
 8000e72:	fba4 3202 	umull	r3, r2, r4, r2
 8000e76:	08d4      	lsrs	r4, r2, #3
					tempData.nose[i].tick_ms = HAL_GetTick();
 8000e78:	f000 f9ae 	bl	80011d8 <HAL_GetTick>
 8000e7c:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <ThermopileTask+0x170>)
 8000e7e:	1d69      	adds	r1, r5, #5
 8000e80:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 8000e84:	6058      	str	r0, [r3, #4]
					tempData.nose[i].thermopile = (uint16_t) avgVal;
 8000e86:	f822 4031 	strh.w	r4, [r2, r1, lsl #3]
					tempData.nose[i].thermistor = buffer.nose_thermistor;
 8000e8a:	4c4d      	ldr	r4, [pc, #308]	; (8000fc0 <ThermopileTask+0x168>)
 8000e8c:	8ae2      	ldrh	r2, [r4, #22]
 8000e8e:	805a      	strh	r2, [r3, #2]
					SwitchTemperatureSensor(temple);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff ff73 	bl	8000d7c <SwitchTemperatureSensor>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 12);
 8000e96:	220c      	movs	r2, #12
 8000e98:	4621      	mov	r1, r4
 8000e9a:	484c      	ldr	r0, [pc, #304]	; (8000fcc <ThermopileTask+0x174>)
 8000e9c:	f000 fbec 	bl	8001678 <HAL_ADC_Start_DMA>
					evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2006      	movs	r0, #6
 8000ea8:	f003 fcfa 	bl	80048a0 <osThreadFlagsWait>
 8000eac:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <ThermopileTask+0x178>)
 8000eae:	6018      	str	r0, [r3, #0]
					if( (evt & 0x00000002U) == 0x00000002U){
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f013 0f02 	tst.w	r3, #2
 8000eb6:	d14d      	bne.n	8000f54 <ThermopileTask+0xfc>
					TurnOff_LMP91051();
 8000eb8:	f7ff ff8a 	bl	8000dd0 <TurnOff_LMP91051>
					avgVal = 0;
 8000ebc:	2200      	movs	r2, #0
					for(index_thermopile = 0; index_thermopile<10; index_thermopile++){
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	e005      	b.n	8000ece <ThermopileTask+0x76>
						avgVal += buffer.thermopile[index_thermopile];
 8000ec2:	493f      	ldr	r1, [pc, #252]	; (8000fc0 <ThermopileTask+0x168>)
 8000ec4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000ec8:	440a      	add	r2, r1
					for(index_thermopile = 0; index_thermopile<10; index_thermopile++){
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b09      	cmp	r3, #9
 8000ed0:	d9f7      	bls.n	8000ec2 <ThermopileTask+0x6a>
					avgVal = avgVal / 10;
 8000ed2:	4c3c      	ldr	r4, [pc, #240]	; (8000fc4 <ThermopileTask+0x16c>)
 8000ed4:	fba4 3202 	umull	r3, r2, r4, r2
 8000ed8:	08d4      	lsrs	r4, r2, #3
					tempData.temple[i].tick_ms = HAL_GetTick();
 8000eda:	f000 f97d 	bl	80011d8 <HAL_GetTick>
 8000ede:	4a3a      	ldr	r2, [pc, #232]	; (8000fc8 <ThermopileTask+0x170>)
 8000ee0:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 8000ee4:	6058      	str	r0, [r3, #4]
					tempData.temple[i].thermopile = (uint16_t) avgVal;
 8000ee6:	f822 4035 	strh.w	r4, [r2, r5, lsl #3]
					tempData.temple[i].thermistor = buffer.temple_thermistor;
 8000eea:	4a35      	ldr	r2, [pc, #212]	; (8000fc0 <ThermopileTask+0x168>)
 8000eec:	8a92      	ldrh	r2, [r2, #20]
 8000eee:	805a      	strh	r2, [r3, #2]
					stop = HAL_GetTick() - start;
 8000ef0:	f000 f972 	bl	80011d8 <HAL_GetTick>
 8000ef4:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <ThermopileTask+0x17c>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	1ac0      	subs	r0, r0, r3
 8000efa:	b280      	uxth	r0, r0
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <ThermopileTask+0x180>)
 8000efe:	8018      	strh	r0, [r3, #0]
					delta_time = SAMPLING_DELAY - stop;
 8000f00:	8818      	ldrh	r0, [r3, #0]
 8000f02:	f1c0 0062 	rsb	r0, r0, #98	; 0x62
					if((delta_time > 0) && (delta_time < SAMPLING_DELAY)){
 8000f06:	1e43      	subs	r3, r0, #1
 8000f08:	2b60      	cmp	r3, #96	; 0x60
 8000f0a:	d920      	bls.n	8000f4e <ThermopileTask+0xf6>
				for(int i = 0; i < NUM_THERM_SAMPLES; i++){
 8000f0c:	3501      	adds	r5, #1
 8000f0e:	2d04      	cmp	r5, #4
 8000f10:	dc20      	bgt.n	8000f54 <ThermopileTask+0xfc>
					start = HAL_GetTick();
 8000f12:	f000 f961 	bl	80011d8 <HAL_GetTick>
 8000f16:	b280      	uxth	r0, r0
 8000f18:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <ThermopileTask+0x17c>)
 8000f1a:	8018      	strh	r0, [r3, #0]
					SwitchTemperatureSensor(nose);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f7ff ff2d 	bl	8000d7c <SwitchTemperatureSensor>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 12);
 8000f22:	220c      	movs	r2, #12
 8000f24:	4926      	ldr	r1, [pc, #152]	; (8000fc0 <ThermopileTask+0x168>)
 8000f26:	4829      	ldr	r0, [pc, #164]	; (8000fcc <ThermopileTask+0x174>)
 8000f28:	f000 fba6 	bl	8001678 <HAL_ADC_Start_DMA>
					evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	2100      	movs	r1, #0
 8000f32:	2006      	movs	r0, #6
 8000f34:	f003 fcb4 	bl	80048a0 <osThreadFlagsWait>
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <ThermopileTask+0x178>)
 8000f3a:	6018      	str	r0, [r3, #0]
					if( (evt & 0x00000002U) == 0x00000002U){
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f013 0f02 	tst.w	r3, #2
 8000f42:	d107      	bne.n	8000f54 <ThermopileTask+0xfc>
					TurnOff_LMP91051();
 8000f44:	f7ff ff44 	bl	8000dd0 <TurnOff_LMP91051>
					avgVal = 0;
 8000f48:	2200      	movs	r2, #0
					for(index_thermopile = 0; index_thermopile<10; index_thermopile++){
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e78e      	b.n	8000e6c <ThermopileTask+0x14>
						osDelay(delta_time);
 8000f4e:	f003 fd0d 	bl	800496c <osDelay>
 8000f52:	e7db      	b.n	8000f0c <ThermopileTask+0xb4>
				if( (evt & 0x00000002U) == 0x00000002U){
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <ThermopileTask+0x178>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f013 0f02 	tst.w	r3, #2
 8000f5c:	d108      	bne.n	8000f70 <ThermopileTask+0x118>
					osMessageQueuePut(thermMsgQueueHandle, &tempData, 0U, 0);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4919      	ldr	r1, [pc, #100]	; (8000fc8 <ThermopileTask+0x170>)
 8000f64:	481d      	ldr	r0, [pc, #116]	; (8000fdc <ThermopileTask+0x184>)
 8000f66:	6800      	ldr	r0, [r0, #0]
 8000f68:	f003 fd82 	bl	8004a70 <osMessageQueuePut>
				for(int i = 0; i < NUM_THERM_SAMPLES; i++){
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	e7ce      	b.n	8000f0e <ThermopileTask+0xb6>
			if( (evt & 0x00000002U) == 0x00000002U){
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <ThermopileTask+0x178>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f013 0f02 	tst.w	r3, #2
 8000f78:	d10e      	bne.n	8000f98 <ThermopileTask+0x140>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2001      	movs	r0, #1
 8000f82:	f003 fc8d 	bl	80048a0 <osThreadFlagsWait>
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <ThermopileTask+0x178>)
 8000f88:	6018      	str	r0, [r3, #0]
		if (evt == 0x00000001U)  {
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d1f4      	bne.n	8000f7a <ThermopileTask+0x122>
			HAL_TIM_Base_Start(&htim6);
 8000f90:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <ThermopileTask+0x188>)
 8000f92:	f003 f887 	bl	80040a4 <HAL_TIM_Base_Start>
 8000f96:	e7e9      	b.n	8000f6c <ThermopileTask+0x114>
				HAL_ADC_Stop_DMA(&hadc1);
 8000f98:	4c0c      	ldr	r4, [pc, #48]	; (8000fcc <ThermopileTask+0x174>)
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f000 fbd8 	bl	8001750 <HAL_ADC_Stop_DMA>
				HAL_ADC_Stop(&hadc1);
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f000 fb43 	bl	800162c <HAL_ADC_Stop>
				HAL_TIM_Base_Stop(&htim6);
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <ThermopileTask+0x188>)
 8000fa8:	f003 f894 	bl	80040d4 <HAL_TIM_Base_Stop>
				osMessageQueueReset(thermMsgQueueHandle);
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <ThermopileTask+0x184>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	f003 fe1c 	bl	8004bec <osMessageQueueReset>
				osThreadFlagsClear(0x0000000EU);
 8000fb4:	200e      	movs	r0, #14
 8000fb6:	f003 fc35 	bl	8004824 <osThreadFlagsClear>
				TurnOff_LMP91051();
 8000fba:	f7ff ff09 	bl	8000dd0 <TurnOff_LMP91051>
 8000fbe:	e7dc      	b.n	8000f7a <ThermopileTask+0x122>
 8000fc0:	20000030 	.word	0x20000030
 8000fc4:	cccccccd 	.word	0xcccccccd
 8000fc8:	200023e0 	.word	0x200023e0
 8000fcc:	200020e0 	.word	0x200020e0
 8000fd0:	2000004c 	.word	0x2000004c
 8000fd4:	200023dc 	.word	0x200023dc
 8000fd8:	200023de 	.word	0x200023de
 8000fdc:	20002180 	.word	0x20002180
 8000fe0:	20002430 	.word	0x20002430

08000fe4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fe4:	b500      	push	{lr}
 8000fe6:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	930a      	str	r3, [sp, #40]	; 0x28
 8000fec:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fee:	930c      	str	r3, [sp, #48]	; 0x30
 8000ff0:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff2:	9307      	str	r3, [sp, #28]
 8000ff4:	9308      	str	r3, [sp, #32]
 8000ff6:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	9305      	str	r3, [sp, #20]
 8001004:	9306      	str	r3, [sp, #24]

  htim2.Instance = TIM2;
 8001006:	4822      	ldr	r0, [pc, #136]	; (8001090 <MX_TIM2_Init+0xac>)
 8001008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 999;
 800100e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001012:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4;
 8001016:	2204      	movs	r2, #4
 8001018:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001020:	f003 f998 	bl	8004354 <HAL_TIM_Base_Init>
 8001024:	bb20      	cbnz	r0, 8001070 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	a90e      	add	r1, sp, #56	; 0x38
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001030:	4817      	ldr	r0, [pc, #92]	; (8001090 <MX_TIM2_Init+0xac>)
 8001032:	f003 fa49 	bl	80044c8 <HAL_TIM_ConfigClockSource>
 8001036:	b9f0      	cbnz	r0, 8001076 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001038:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_TIM2_Init+0xac>)
 800103a:	f003 f9a4 	bl	8004386 <HAL_TIM_OC_Init>
 800103e:	b9e8      	cbnz	r0, 800107c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001040:	2320      	movs	r3, #32
 8001042:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001048:	a907      	add	r1, sp, #28
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_TIM2_Init+0xac>)
 800104c:	f003 faaa 	bl	80045a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	b9b8      	cbnz	r0, 8001082 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 10;
 8001056:	220a      	movs	r2, #10
 8001058:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105a:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	2204      	movs	r2, #4
 8001060:	4669      	mov	r1, sp
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <MX_TIM2_Init+0xac>)
 8001064:	f003 f9e8 	bl	8004438 <HAL_TIM_OC_ConfigChannel>
 8001068:	b970      	cbnz	r0, 8001088 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
  }

}
 800106a:	b00f      	add	sp, #60	; 0x3c
 800106c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001070:	f7ff fc34 	bl	80008dc <Error_Handler>
 8001074:	e7d7      	b.n	8001026 <MX_TIM2_Init+0x42>
    Error_Handler();
 8001076:	f7ff fc31 	bl	80008dc <Error_Handler>
 800107a:	e7dd      	b.n	8001038 <MX_TIM2_Init+0x54>
    Error_Handler();
 800107c:	f7ff fc2e 	bl	80008dc <Error_Handler>
 8001080:	e7de      	b.n	8001040 <MX_TIM2_Init+0x5c>
    Error_Handler();
 8001082:	f7ff fc2b 	bl	80008dc <Error_Handler>
 8001086:	e7e4      	b.n	8001052 <MX_TIM2_Init+0x6e>
    Error_Handler();
 8001088:	f7ff fc28 	bl	80008dc <Error_Handler>
}
 800108c:	e7ed      	b.n	800106a <MX_TIM2_Init+0x86>
 800108e:	bf00      	nop
 8001090:	20002470 	.word	0x20002470

08001094 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001094:	b500      	push	{lr}
 8001096:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	2300      	movs	r3, #0
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	9303      	str	r3, [sp, #12]

  htim6.Instance = TIM6;
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <MX_TIM6_Init+0x4c>)
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <MX_TIM6_Init+0x50>)
 80010a4:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 999;
 80010a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010aa:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 49;
 80010ae:	2231      	movs	r2, #49	; 0x31
 80010b0:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010b4:	f003 f94e 	bl	8004354 <HAL_TIM_Base_Init>
 80010b8:	b958      	cbnz	r0, 80010d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ba:	2320      	movs	r3, #32
 80010bc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010c2:	a901      	add	r1, sp, #4
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_TIM6_Init+0x4c>)
 80010c6:	f003 fa6d 	bl	80045a4 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	b928      	cbnz	r0, 80010d8 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
  }

}
 80010cc:	b005      	add	sp, #20
 80010ce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010d2:	f7ff fc03 	bl	80008dc <Error_Handler>
 80010d6:	e7f0      	b.n	80010ba <MX_TIM6_Init+0x26>
    Error_Handler();
 80010d8:	f7ff fc00 	bl	80008dc <Error_Handler>
}
 80010dc:	e7f6      	b.n	80010cc <MX_TIM6_Init+0x38>
 80010de:	bf00      	nop
 80010e0:	20002430 	.word	0x20002430
 80010e4:	40001000 	.word	0x40001000

080010e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010e8:	b500      	push	{lr}
 80010ea:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM2)
 80010ec:	6803      	ldr	r3, [r0, #0]
 80010ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f2:	d005      	beq.n	8001100 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_TIM_Base_MspInit+0x58>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d016      	beq.n	8001128 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010fa:	b003      	add	sp, #12
 80010fc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001100:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	61da      	str	r2, [r3, #28]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	201c      	movs	r0, #28
 800111c:	f000 fd06 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001120:	201c      	movs	r0, #28
 8001122:	f000 fd37 	bl	8001b94 <HAL_NVIC_EnableIRQ>
 8001126:	e7e8      	b.n	80010fa <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_TIM_Base_MspInit+0x5c>)
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	f042 0210 	orr.w	r2, r2, #16
 8001130:	61da      	str	r2, [r3, #28]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	9b01      	ldr	r3, [sp, #4]
}
 800113c:	e7dd      	b.n	80010fa <HAL_TIM_Base_MspInit+0x12>
 800113e:	bf00      	nop
 8001140:	40001000 	.word	0x40001000
 8001144:	40021000 	.word	0x40021000

08001148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800114c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800114e:	e003      	b.n	8001158 <LoopCopyDataInit>

08001150 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001152:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001154:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001156:	3104      	adds	r1, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <LoopForever+0xa>)
	ldr	r3, =_edata
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <LoopForever+0xe>)
	adds	r2, r0, r1
 800115c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800115e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001160:	d3f6      	bcc.n	8001150 <CopyDataInit>
	ldr	r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001164:	e002      	b.n	800116c <LoopFillZerobss>

08001166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001166:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001168:	f842 3b04 	str.w	r3, [r2], #4

0800116c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <LoopForever+0x16>)
	cmp	r2, r3
 800116e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001170:	d3f9      	bcc.n	8001166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001172:	f7ff fdd3 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f005 fcc9 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117a:	f7ff fb87 	bl	800088c <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001180:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001184:	08006c54 	.word	0x08006c54
	ldr	r0, =_sdata
 8001188:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800118c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001190:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001194:	200024f4 	.word	0x200024f4

08001198 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_IRQHandler>
	...

0800119c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x20>)
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 fcad 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fd4a 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fd28 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80011b8:	2000      	movs	r0, #0
 80011ba:	bd08      	pop	{r3, pc}
 80011bc:	40022000 	.word	0x40022000

080011c0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <HAL_IncTick+0x10>)
 80011c2:	6811      	ldr	r1, [r2, #0]
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_IncTick+0x14>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	440b      	add	r3, r1
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200024b0 	.word	0x200024b0
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80011d8:	4b01      	ldr	r3, [pc, #4]	; (80011e0 <HAL_GetTick+0x8>)
 80011da:	6818      	ldr	r0, [r3, #0]
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200024b0 	.word	0x200024b0

080011e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b538      	push	{r3, r4, r5, lr}
 80011e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff fff6 	bl	80011d8 <HAL_GetTick>
 80011ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	f1b4 3fff 	cmp.w	r4, #4294967295
 80011f2:	d002      	beq.n	80011fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <HAL_Delay+0x24>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	f7ff ffed 	bl	80011d8 <HAL_GetTick>
 80011fe:	1b40      	subs	r0, r0, r5
 8001200:	42a0      	cmp	r0, r4
 8001202:	d3fa      	bcc.n	80011fa <HAL_Delay+0x16>
  {
  }
}
 8001204:	bd38      	pop	{r3, r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	20000004 	.word	0x20000004

0800120c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800120c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800120e:	6802      	ldr	r2, [r0, #0]
 8001210:	6893      	ldr	r3, [r2, #8]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800121a:	2000      	movs	r0, #0
}
 800121c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800121e:	6813      	ldr	r3, [r2, #0]
 8001220:	f013 0f01 	tst.w	r3, #1
 8001224:	d02f      	beq.n	8001286 <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001226:	6893      	ldr	r3, [r2, #8]
 8001228:	f003 030d 	and.w	r3, r3, #13
 800122c:	2b01      	cmp	r3, #1
 800122e:	d009      	beq.n	8001244 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001230:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001238:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
 8001242:	e7eb      	b.n	800121c <ADC_Disable+0x10>
 8001244:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8001246:	6893      	ldr	r3, [r2, #8]
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6093      	str	r3, [r2, #8]
 800124e:	6803      	ldr	r3, [r0, #0]
 8001250:	2203      	movs	r2, #3
 8001252:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001254:	f7ff ffc0 	bl	80011d8 <HAL_GetTick>
 8001258:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f013 0f01 	tst.w	r3, #1
 8001262:	d00e      	beq.n	8001282 <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001264:	f7ff ffb8 	bl	80011d8 <HAL_GetTick>
 8001268:	1b40      	subs	r0, r0, r5
 800126a:	2802      	cmp	r0, #2
 800126c:	d9f5      	bls.n	800125a <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800127e:	2001      	movs	r0, #1
 8001280:	e7cc      	b.n	800121c <ADC_Disable+0x10>
  return HAL_OK;
 8001282:	2000      	movs	r0, #0
 8001284:	e7ca      	b.n	800121c <ADC_Disable+0x10>
 8001286:	2000      	movs	r0, #0
 8001288:	e7c8      	b.n	800121c <ADC_Disable+0x10>
	...

0800128c <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800128c:	6803      	ldr	r3, [r0, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	f012 0f0c 	tst.w	r2, #12
 8001294:	d061      	beq.n	800135a <ADC_ConversionStop+0xce>
{
 8001296:	b570      	push	{r4, r5, r6, lr}
 8001298:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80012a0:	d004      	beq.n	80012ac <ADC_ConversionStop+0x20>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80012a2:	8b00      	ldrh	r0, [r0, #24]
 80012a4:	f240 1201 	movw	r2, #257	; 0x101
 80012a8:	4290      	cmp	r0, r2
 80012aa:	d042      	beq.n	8001332 <ADC_ConversionStop+0xa6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80012ac:	2960      	cmp	r1, #96	; 0x60
 80012ae:	d00c      	beq.n	80012ca <ADC_ConversionStop+0x3e>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	f012 0f04 	tst.w	r2, #4
 80012b8:	d007      	beq.n	80012ca <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80012ba:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80012bc:	f012 0f02 	tst.w	r2, #2
 80012c0:	d103      	bne.n	80012ca <ADC_ConversionStop+0x3e>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	f042 0210 	orr.w	r2, r2, #16
 80012c8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80012ca:	290c      	cmp	r1, #12
 80012cc:	d00c      	beq.n	80012e8 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	f012 0f08 	tst.w	r2, #8
 80012d6:	d007      	beq.n	80012e8 <ADC_ConversionStop+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80012d8:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80012da:	f012 0f02 	tst.w	r2, #2
 80012de:	d103      	bne.n	80012e8 <ADC_ConversionStop+0x5c>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	f042 0220 	orr.w	r2, r2, #32
 80012e6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80012e8:	2960      	cmp	r1, #96	; 0x60
 80012ea:	d032      	beq.n	8001352 <ADC_ConversionStop+0xc6>
 80012ec:	296c      	cmp	r1, #108	; 0x6c
 80012ee:	d12e      	bne.n	800134e <ADC_ConversionStop+0xc2>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80012f0:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80012f2:	f7ff ff71 	bl	80011d8 <HAL_GetTick>
 80012f6:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	422b      	tst	r3, r5
 80012fe:	d02a      	beq.n	8001356 <ADC_ConversionStop+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001300:	f7ff ff6a 	bl	80011d8 <HAL_GetTick>
 8001304:	1b80      	subs	r0, r0, r6
 8001306:	280b      	cmp	r0, #11
 8001308:	d9f6      	bls.n	80012f8 <ADC_ConversionStop+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001312:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6463      	str	r3, [r4, #68]	; 0x44
        
        return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
 800131c:	e01c      	b.n	8001358 <ADC_ConversionStop+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001326:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800132e:	2001      	movs	r0, #1
 8001330:	e012      	b.n	8001358 <ADC_ConversionStop+0xcc>
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001332:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001334:	6819      	ldr	r1, [r3, #0]
 8001336:	f011 0f40 	tst.w	r1, #64	; 0x40
 800133a:	d104      	bne.n	8001346 <ADC_ConversionStop+0xba>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800133c:	4908      	ldr	r1, [pc, #32]	; (8001360 <ADC_ConversionStop+0xd4>)
 800133e:	428a      	cmp	r2, r1
 8001340:	d8ed      	bhi.n	800131e <ADC_ConversionStop+0x92>
        Conversion_Timeout_CPU_cycles ++;
 8001342:	3201      	adds	r2, #1
 8001344:	e7f6      	b.n	8001334 <ADC_ConversionStop+0xa8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 800134a:	210c      	movs	r1, #12
 800134c:	e7b0      	b.n	80012b0 <ADC_ConversionStop+0x24>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800134e:	2504      	movs	r5, #4
        break;
 8001350:	e7cf      	b.n	80012f2 <ADC_ConversionStop+0x66>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001352:	2508      	movs	r5, #8
 8001354:	e7cd      	b.n	80012f2 <ADC_ConversionStop+0x66>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001356:	2000      	movs	r0, #0
}
 8001358:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800135a:	2000      	movs	r0, #0
}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	000993ff 	.word	0x000993ff

08001364 <ADC_Enable>:
{
 8001364:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001366:	6802      	ldr	r2, [r0, #0]
 8001368:	6893      	ldr	r3, [r2, #8]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d00d      	beq.n	800138e <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001372:	6891      	ldr	r1, [r2, #8]
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <ADC_Enable+0x74>)
 8001376:	4219      	tst	r1, r3
 8001378:	d00f      	beq.n	800139a <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
}
 800138c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f013 0f01 	tst.w	r3, #1
 8001394:	d0ed      	beq.n	8001372 <ADC_Enable+0xe>
  return HAL_OK;
 8001396:	2000      	movs	r0, #0
 8001398:	e7f8      	b.n	800138c <ADC_Enable+0x28>
 800139a:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 800139c:	6893      	ldr	r3, [r2, #8]
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80013a4:	f7ff ff18 	bl	80011d8 <HAL_GetTick>
 80013a8:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f013 0f01 	tst.w	r3, #1
 80013b2:	d10e      	bne.n	80013d2 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013b4:	f7ff ff10 	bl	80011d8 <HAL_GetTick>
 80013b8:	1b40      	subs	r0, r0, r5
 80013ba:	2802      	cmp	r0, #2
 80013bc:	d9f5      	bls.n	80013aa <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
 80013d0:	e7dc      	b.n	800138c <ADC_Enable+0x28>
  return HAL_OK;
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7da      	b.n	800138c <ADC_Enable+0x28>
 80013d6:	bf00      	nop
 80013d8:	8000003f 	.word	0x8000003f

080013dc <ADC_DMAError>:
{
 80013dc:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013de:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80013f0:	f7ff fcbc 	bl	8000d6c <HAL_ADC_ErrorCallback>
}
 80013f4:	bd08      	pop	{r3, pc}

080013f6 <ADC_DMAHalfConvCplt>:
{
 80013f6:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80013fa:	f7ff fcb5 	bl	8000d68 <HAL_ADC_ConvHalfCpltCallback>
}
 80013fe:	bd08      	pop	{r3, pc}

08001400 <ADC_DMAConvCplt>:
{
 8001400:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001402:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001406:	f012 0f50 	tst.w	r2, #80	; 0x50
 800140a:	d003      	beq.n	8001414 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4798      	blx	r3
}
 8001412:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68d2      	ldr	r2, [r2, #12]
 8001420:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001424:	d10d      	bne.n	8001442 <ADC_DMAConvCplt+0x42>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001426:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001428:	b95a      	cbnz	r2, 8001442 <ADC_DMAConvCplt+0x42>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800142a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001434:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001438:	d103      	bne.n	8001442 <ADC_DMAConvCplt+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800143a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc78 	bl	8000d38 <HAL_ADC_ConvCpltCallback>
 8001448:	e7e3      	b.n	8001412 <ADC_DMAConvCplt+0x12>
	...

0800144c <HAL_ADC_Init>:
{
 800144c:	b530      	push	{r4, r5, lr}
 800144e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001454:	2800      	cmp	r0, #0
 8001456:	f000 80df 	beq.w	8001618 <HAL_ADC_Init+0x1cc>
 800145a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800145c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800145e:	f013 0f10 	tst.w	r3, #16
 8001462:	d152      	bne.n	800150a <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001464:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001466:	b1ab      	cbz	r3, 8001494 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001472:	d003      	beq.n	800147c <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001474:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001476:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800147a:	d047      	beq.n	800150c <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 800147c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800147e:	f023 0312 	bic.w	r3, r3, #18
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001488:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8001490:	2001      	movs	r0, #1
 8001492:	e03b      	b.n	800150c <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001494:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 8001496:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001498:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 800149a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800149e:	f7fe ff57 	bl	8000350 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ac:	2000      	movs	r0, #0
 80014ae:	e7dc      	b.n	800146a <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff feab 	bl	800120c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b8:	f013 0f10 	tst.w	r3, #16
 80014bc:	d1d5      	bne.n	800146a <HAL_ADC_Init+0x1e>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d1d3      	bne.n	800146a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 80014c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014c8:	f023 0302 	bic.w	r3, r3, #2
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	6893      	ldr	r3, [r2, #8]
 80014d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80014da:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014dc:	6822      	ldr	r2, [r4, #0]
 80014de:	6893      	ldr	r3, [r2, #8]
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014e6:	4b4d      	ldr	r3, [pc, #308]	; (800161c <HAL_ADC_Init+0x1d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_ADC_Init+0x1d4>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9b      	lsrs	r3, r3, #18
 80014f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014f6:	005a      	lsls	r2, r3, #1
 80014f8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80014fa:	e002      	b.n	8001502 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 80014fc:	9b01      	ldr	r3, [sp, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f9      	bne.n	80014fc <HAL_ADC_Init+0xb0>
 8001508:	e7af      	b.n	800146a <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800150a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800150c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800150e:	f013 0f10 	tst.w	r3, #16
 8001512:	d178      	bne.n	8001606 <HAL_ADC_Init+0x1ba>
 8001514:	2800      	cmp	r0, #0
 8001516:	d176      	bne.n	8001606 <HAL_ADC_Init+0x1ba>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001518:	6821      	ldr	r1, [r4, #0]
 800151a:	688a      	ldr	r2, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800151c:	f012 0204 	ands.w	r2, r2, #4
 8001520:	d171      	bne.n	8001606 <HAL_ADC_Init+0x1ba>
    ADC_STATE_CLR_SET(hadc->State,
 8001522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001524:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6423      	str	r3, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800152e:	688b      	ldr	r3, [r1, #8]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d045      	beq.n	80015c4 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001538:	493a      	ldr	r1, [pc, #232]	; (8001624 <HAL_ADC_Init+0x1d8>)
 800153a:	688b      	ldr	r3, [r1, #8]
 800153c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001540:	6865      	ldr	r5, [r4, #4]
 8001542:	432b      	orrs	r3, r5
 8001544:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001546:	7e61      	ldrb	r1, [r4, #25]
 8001548:	034b      	lsls	r3, r1, #13
 800154a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800154c:	2d01      	cmp	r5, #1
 800154e:	d001      	beq.n	8001554 <HAL_ADC_Init+0x108>
 8001550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001554:	4313      	orrs	r3, r2
 8001556:	68e2      	ldr	r2, [r4, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	68a2      	ldr	r2, [r4, #8]
 800155c:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800155e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001562:	2a01      	cmp	r2, #1
 8001564:	d033      	beq.n	80015ce <HAL_ADC_Init+0x182>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001566:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001568:	2a01      	cmp	r2, #1
 800156a:	d002      	beq.n	8001572 <HAL_ADC_Init+0x126>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800156c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800156e:	430a      	orrs	r2, r1
 8001570:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	6891      	ldr	r1, [r2, #8]
 8001576:	f011 0f0c 	tst.w	r1, #12
 800157a:	d10c      	bne.n	8001596 <HAL_ADC_Init+0x14a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800157c:	68d1      	ldr	r1, [r2, #12]
 800157e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001582:	f021 0102 	bic.w	r1, r1, #2
 8001586:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001588:	7e21      	ldrb	r1, [r4, #24]
 800158a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001594:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001596:	6821      	ldr	r1, [r4, #0]
 8001598:	68cd      	ldr	r5, [r1, #12]
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_ADC_Init+0x1dc>)
 800159c:	402a      	ands	r2, r5
 800159e:	4313      	orrs	r3, r2
 80015a0:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015a2:	6923      	ldr	r3, [r4, #16]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d025      	beq.n	80015f4 <HAL_ADC_Init+0x1a8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015ac:	f023 030f 	bic.w	r3, r3, #15
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	2300      	movs	r3, #0
 80015b4:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80015b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015b8:	f023 0303 	bic.w	r3, r3, #3
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6423      	str	r3, [r4, #64]	; 0x40
 80015c2:	e027      	b.n	8001614 <HAL_ADC_Init+0x1c8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015c4:	680b      	ldr	r3, [r1, #0]
 80015c6:	f013 0f01 	tst.w	r3, #1
 80015ca:	d1bc      	bne.n	8001546 <HAL_ADC_Init+0xfa>
 80015cc:	e7b4      	b.n	8001538 <HAL_ADC_Init+0xec>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015ce:	b931      	cbnz	r1, 80015de <HAL_ADC_Init+0x192>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80015d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015d2:	3a01      	subs	r2, #1
 80015d4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	e7c3      	b.n	8001566 <HAL_ADC_Init+0x11a>
        ADC_STATE_CLR_SET(hadc->State,
 80015de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015e0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	6462      	str	r2, [r4, #68]	; 0x44
 80015f2:	e7b8      	b.n	8001566 <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80015f4:	6821      	ldr	r1, [r4, #0]
 80015f6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015f8:	f023 030f 	bic.w	r3, r3, #15
 80015fc:	69e2      	ldr	r2, [r4, #28]
 80015fe:	3a01      	subs	r2, #1
 8001600:	4313      	orrs	r3, r2
 8001602:	630b      	str	r3, [r1, #48]	; 0x30
 8001604:	e7d5      	b.n	80015b2 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 8001606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001608:	f023 0312 	bic.w	r3, r3, #18
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8001612:	2001      	movs	r0, #1
}
 8001614:	b003      	add	sp, #12
 8001616:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
 800161a:	e7fb      	b.n	8001614 <HAL_ADC_Init+0x1c8>
 800161c:	20000000 	.word	0x20000000
 8001620:	431bde83 	.word	0x431bde83
 8001624:	50000300 	.word	0x50000300
 8001628:	fff0c007 	.word	0xfff0c007

0800162c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800162c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d01d      	beq.n	8001670 <HAL_ADC_Stop+0x44>
{
 8001634:	b510      	push	{r4, lr}
 8001636:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001638:	2301      	movs	r3, #1
 800163a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800163e:	216c      	movs	r1, #108	; 0x6c
 8001640:	f7ff fe24 	bl	800128c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001644:	4603      	mov	r3, r0
 8001646:	b120      	cbz	r0, 8001652 <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 8001648:	2200      	movs	r2, #0
 800164a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff fdda 	bl	800120c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001658:	4603      	mov	r3, r0
 800165a:	2800      	cmp	r0, #0
 800165c:	d1f4      	bne.n	8001648 <HAL_ADC_Stop+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 800165e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001660:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	6422      	str	r2, [r4, #64]	; 0x40
 800166e:	e7eb      	b.n	8001648 <HAL_ADC_Stop+0x1c>
  __HAL_LOCK(hadc);
 8001670:	2302      	movs	r3, #2
}
 8001672:	4618      	mov	r0, r3
 8001674:	4770      	bx	lr
	...

08001678 <HAL_ADC_Start_DMA>:
{
 8001678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800167a:	6804      	ldr	r4, [r0, #0]
 800167c:	68a4      	ldr	r4, [r4, #8]
 800167e:	f014 0f04 	tst.w	r4, #4
 8001682:	d15a      	bne.n	800173a <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 8001684:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001688:	2b01      	cmp	r3, #1
 800168a:	d059      	beq.n	8001740 <HAL_ADC_Start_DMA+0xc8>
 800168c:	4616      	mov	r6, r2
 800168e:	460f      	mov	r7, r1
 8001690:	4604      	mov	r4, r0
 8001692:	2301      	movs	r3, #1
 8001694:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = ADC_Enable(hadc);
 8001698:	f7ff fe64 	bl	8001364 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800169c:	4605      	mov	r5, r0
 800169e:	2800      	cmp	r0, #0
 80016a0:	d147      	bne.n	8001732 <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 80016a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016b8:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016c2:	d005      	beq.n	80016d0 <HAL_ADC_Start_DMA+0x58>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ce:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80016d6:	d029      	beq.n	800172c <HAL_ADC_Start_DMA+0xb4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016da:	f023 0306 	bic.w	r3, r3, #6
 80016de:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80016e0:	2300      	movs	r3, #0
 80016e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016e8:	4a16      	ldr	r2, [pc, #88]	; (8001744 <HAL_ADC_Start_DMA+0xcc>)
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_ADC_Start_DMA+0xd0>)
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016f4:	4a15      	ldr	r2, [pc, #84]	; (800174c <HAL_ADC_Start_DMA+0xd4>)
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	221c      	movs	r2, #28
 80016fc:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	6853      	ldr	r3, [r2, #4]
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	68d3      	ldr	r3, [r2, #12]
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001712:	6821      	ldr	r1, [r4, #0]
 8001714:	4633      	mov	r3, r6
 8001716:	463a      	mov	r2, r7
 8001718:	3140      	adds	r1, #64	; 0x40
 800171a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800171c:	f000 fa98 	bl	8001c50 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001720:	6822      	ldr	r2, [r4, #0]
 8001722:	6893      	ldr	r3, [r2, #8]
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6093      	str	r3, [r2, #8]
 800172a:	e007      	b.n	800173c <HAL_ADC_Start_DMA+0xc4>
          ADC_CLEAR_ERRORCODE(hadc);
 800172c:	2300      	movs	r3, #0
 800172e:	6463      	str	r3, [r4, #68]	; 0x44
 8001730:	e7d6      	b.n	80016e0 <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 8001732:	2300      	movs	r3, #0
 8001734:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001738:	e000      	b.n	800173c <HAL_ADC_Start_DMA+0xc4>
    tmp_hal_status = HAL_BUSY;
 800173a:	2502      	movs	r5, #2
}
 800173c:	4628      	mov	r0, r5
 800173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001740:	2502      	movs	r5, #2
 8001742:	e7fb      	b.n	800173c <HAL_ADC_Start_DMA+0xc4>
 8001744:	08001401 	.word	0x08001401
 8001748:	080013f7 	.word	0x080013f7
 800174c:	080013dd 	.word	0x080013dd

08001750 <HAL_ADC_Stop_DMA>:
{  
 8001750:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8001752:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001756:	2b01      	cmp	r3, #1
 8001758:	d034      	beq.n	80017c4 <HAL_ADC_Stop_DMA+0x74>
 800175a:	4604      	mov	r4, r0
 800175c:	2301      	movs	r3, #1
 800175e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001762:	216c      	movs	r1, #108	; 0x6c
 8001764:	f7ff fd92 	bl	800128c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001768:	4605      	mov	r5, r0
 800176a:	b120      	cbz	r0, 8001776 <HAL_ADC_Stop_DMA+0x26>
  __HAL_UNLOCK(hadc);
 800176c:	2300      	movs	r3, #0
 800176e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001772:	4628      	mov	r0, r5
 8001774:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001776:	6822      	ldr	r2, [r4, #0]
 8001778:	68d3      	ldr	r3, [r2, #12]
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001780:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001782:	f000 fa9f 	bl	8001cc4 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8001786:	4605      	mov	r5, r0
 8001788:	b118      	cbz	r0, 8001792 <HAL_ADC_Stop_DMA+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800178a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001790:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	6853      	ldr	r3, [r2, #4]
 8001796:	f023 0310 	bic.w	r3, r3, #16
 800179a:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800179c:	b975      	cbnz	r5, 80017bc <HAL_ADC_Stop_DMA+0x6c>
      tmp_hal_status = ADC_Disable(hadc);
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fd34 	bl	800120c <ADC_Disable>
 80017a4:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 80017a6:	2d00      	cmp	r5, #0
 80017a8:	d1e0      	bne.n	800176c <HAL_ADC_Stop_DMA+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 80017aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6423      	str	r3, [r4, #64]	; 0x40
 80017ba:	e7d7      	b.n	800176c <HAL_ADC_Stop_DMA+0x1c>
      ADC_Disable(hadc);
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fd25 	bl	800120c <ADC_Disable>
 80017c2:	e7f0      	b.n	80017a6 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 80017c4:	2502      	movs	r5, #2
 80017c6:	e7d4      	b.n	8001772 <HAL_ADC_Stop_DMA+0x22>

080017c8 <HAL_ADC_ConfigChannel>:
{
 80017c8:	b430      	push	{r4, r5}
 80017ca:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80017cc:	2200      	movs	r2, #0
 80017ce:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80017d0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80017d4:	2a01      	cmp	r2, #1
 80017d6:	f000 818e 	beq.w	8001af6 <HAL_ADC_ConfigChannel+0x32e>
 80017da:	4603      	mov	r3, r0
 80017dc:	2201      	movs	r2, #1
 80017de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017e2:	6800      	ldr	r0, [r0, #0]
 80017e4:	6882      	ldr	r2, [r0, #8]
 80017e6:	f012 0f04 	tst.w	r2, #4
 80017ea:	f040 8179 	bne.w	8001ae0 <HAL_ADC_ConfigChannel+0x318>
    if (sConfig->Rank < 5U)
 80017ee:	684a      	ldr	r2, [r1, #4]
 80017f0:	2a04      	cmp	r2, #4
 80017f2:	d831      	bhi.n	8001858 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 80017f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80017f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80017fa:	0055      	lsls	r5, r2, #1
 80017fc:	221f      	movs	r2, #31
 80017fe:	40aa      	lsls	r2, r5
 8001800:	ea24 0202 	bic.w	r2, r4, r2
 8001804:	680c      	ldr	r4, [r1, #0]
 8001806:	40ac      	lsls	r4, r5
 8001808:	4322      	orrs	r2, r4
 800180a:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	6882      	ldr	r2, [r0, #8]
 8001810:	f012 0f0c 	tst.w	r2, #12
 8001814:	d168      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001816:	680a      	ldr	r2, [r1, #0]
 8001818:	2a09      	cmp	r2, #9
 800181a:	d94e      	bls.n	80018ba <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800181c:	6984      	ldr	r4, [r0, #24]
 800181e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001822:	3a1e      	subs	r2, #30
 8001824:	2507      	movs	r5, #7
 8001826:	4095      	lsls	r5, r2
 8001828:	ea24 0405 	bic.w	r4, r4, r5
 800182c:	688d      	ldr	r5, [r1, #8]
 800182e:	fa05 f202 	lsl.w	r2, r5, r2
 8001832:	4322      	orrs	r2, r4
 8001834:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001836:	6948      	ldr	r0, [r1, #20]
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	68e2      	ldr	r2, [r4, #12]
 800183c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001840:	0052      	lsls	r2, r2, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001846:	6908      	ldr	r0, [r1, #16]
 8001848:	3801      	subs	r0, #1
 800184a:	2803      	cmp	r0, #3
 800184c:	f200 808b 	bhi.w	8001966 <HAL_ADC_ConfigChannel+0x19e>
 8001850:	e8df f000 	tbb	[pc, r0]
 8001854:	7e736840 	.word	0x7e736840
    else if (sConfig->Rank < 10U)
 8001858:	2a09      	cmp	r2, #9
 800185a:	d80e      	bhi.n	800187a <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800185c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800185e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001862:	0055      	lsls	r5, r2, #1
 8001864:	3d1e      	subs	r5, #30
 8001866:	221f      	movs	r2, #31
 8001868:	40aa      	lsls	r2, r5
 800186a:	ea24 0202 	bic.w	r2, r4, r2
 800186e:	680c      	ldr	r4, [r1, #0]
 8001870:	fa04 f505 	lsl.w	r5, r4, r5
 8001874:	432a      	orrs	r2, r5
 8001876:	6342      	str	r2, [r0, #52]	; 0x34
 8001878:	e7c8      	b.n	800180c <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800187a:	2a0e      	cmp	r2, #14
 800187c:	d80e      	bhi.n	800189c <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800187e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001880:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001884:	0055      	lsls	r5, r2, #1
 8001886:	3d3c      	subs	r5, #60	; 0x3c
 8001888:	221f      	movs	r2, #31
 800188a:	40aa      	lsls	r2, r5
 800188c:	ea24 0202 	bic.w	r2, r4, r2
 8001890:	680c      	ldr	r4, [r1, #0]
 8001892:	fa04 f505 	lsl.w	r5, r4, r5
 8001896:	432a      	orrs	r2, r5
 8001898:	6382      	str	r2, [r0, #56]	; 0x38
 800189a:	e7b7      	b.n	800180c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800189c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800189e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018a2:	0055      	lsls	r5, r2, #1
 80018a4:	3d5a      	subs	r5, #90	; 0x5a
 80018a6:	221f      	movs	r2, #31
 80018a8:	40aa      	lsls	r2, r5
 80018aa:	ea24 0202 	bic.w	r2, r4, r2
 80018ae:	680c      	ldr	r4, [r1, #0]
 80018b0:	fa04 f505 	lsl.w	r5, r4, r5
 80018b4:	432a      	orrs	r2, r5
 80018b6:	63c2      	str	r2, [r0, #60]	; 0x3c
 80018b8:	e7a8      	b.n	800180c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018ba:	6944      	ldr	r4, [r0, #20]
 80018bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018c0:	2507      	movs	r5, #7
 80018c2:	4095      	lsls	r5, r2
 80018c4:	ea24 0405 	bic.w	r4, r4, r5
 80018c8:	688d      	ldr	r5, [r1, #8]
 80018ca:	fa05 f202 	lsl.w	r2, r5, r2
 80018ce:	4322      	orrs	r2, r4
 80018d0:	6142      	str	r2, [r0, #20]
 80018d2:	e7b0      	b.n	8001836 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018d4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80018d6:	4d89      	ldr	r5, [pc, #548]	; (8001afc <HAL_ADC_ConfigChannel+0x334>)
 80018d8:	4005      	ands	r5, r0
 80018da:	6808      	ldr	r0, [r1, #0]
 80018dc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80018e0:	4315      	orrs	r5, r2
 80018e2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80018e6:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	6882      	ldr	r2, [r0, #8]
 80018ec:	f002 0203 	and.w	r2, r2, #3
 80018f0:	2a01      	cmp	r2, #1
 80018f2:	d06b      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x204>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018f4:	68ca      	ldr	r2, [r1, #12]
 80018f6:	2a01      	cmp	r2, #1
 80018f8:	d06e      	beq.n	80019d8 <HAL_ADC_ConfigChannel+0x210>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018fa:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 80018fe:	680d      	ldr	r5, [r1, #0]
 8001900:	2401      	movs	r4, #1
 8001902:	40ac      	lsls	r4, r5
 8001904:	ea22 0204 	bic.w	r2, r2, r4
 8001908:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800190c:	680a      	ldr	r2, [r1, #0]
 800190e:	2a10      	cmp	r2, #16
 8001910:	f000 808b 	beq.w	8001a2a <HAL_ADC_ConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001914:	2a11      	cmp	r2, #17
 8001916:	f000 809c 	beq.w	8001a52 <HAL_ADC_ConfigChannel+0x28a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800191a:	2a12      	cmp	r2, #18
 800191c:	f000 809f 	beq.w	8001a5e <HAL_ADC_ConfigChannel+0x296>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	2000      	movs	r0, #0
 8001922:	e0e2      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001924:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001926:	4d75      	ldr	r5, [pc, #468]	; (8001afc <HAL_ADC_ConfigChannel+0x334>)
 8001928:	4005      	ands	r5, r0
 800192a:	6808      	ldr	r0, [r1, #0]
 800192c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001930:	4315      	orrs	r5, r2
 8001932:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001936:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001938:	e7d6      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800193a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800193c:	4d6f      	ldr	r5, [pc, #444]	; (8001afc <HAL_ADC_ConfigChannel+0x334>)
 800193e:	4005      	ands	r5, r0
 8001940:	6808      	ldr	r0, [r1, #0]
 8001942:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001946:	4315      	orrs	r5, r2
 8001948:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800194c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 800194e:	e7cb      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001950:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001952:	486a      	ldr	r0, [pc, #424]	; (8001afc <HAL_ADC_ConfigChannel+0x334>)
 8001954:	4028      	ands	r0, r5
 8001956:	680d      	ldr	r5, [r1, #0]
 8001958:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 800195c:	4302      	orrs	r2, r0
 800195e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001962:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001964:	e7c0      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001966:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001968:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800196c:	6808      	ldr	r0, [r1, #0]
 800196e:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001972:	d01c      	beq.n	80019ae <HAL_ADC_ConfigChannel+0x1e6>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001978:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800197c:	680c      	ldr	r4, [r1, #0]
 800197e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001982:	d019      	beq.n	80019b8 <HAL_ADC_ConfigChannel+0x1f0>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001988:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800198c:	680c      	ldr	r4, [r1, #0]
 800198e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001992:	d016      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001998:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800199c:	680c      	ldr	r4, [r1, #0]
 800199e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80019a2:	d1a1      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019a4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80019a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019aa:	66c2      	str	r2, [r0, #108]	; 0x6c
 80019ac:	e79c      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019ae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80019b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019b4:	6622      	str	r2, [r4, #96]	; 0x60
 80019b6:	e7dd      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1ac>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019b8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80019ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019be:	6642      	str	r2, [r0, #100]	; 0x64
 80019c0:	e7e0      	b.n	8001984 <HAL_ADC_ConfigChannel+0x1bc>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019c2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80019c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019c8:	6682      	str	r2, [r0, #104]	; 0x68
 80019ca:	e7e3      	b.n	8001994 <HAL_ADC_ConfigChannel+0x1cc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019cc:	6802      	ldr	r2, [r0, #0]
 80019ce:	f012 0f01 	tst.w	r2, #1
 80019d2:	d08f      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2000      	movs	r0, #0
 80019d6:	e088      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019d8:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 80019dc:	680d      	ldr	r5, [r1, #0]
 80019de:	2401      	movs	r4, #1
 80019e0:	40ac      	lsls	r4, r5
 80019e2:	4322      	orrs	r2, r4
 80019e4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019e8:	680a      	ldr	r2, [r1, #0]
 80019ea:	2a09      	cmp	r2, #9
 80019ec:	d90e      	bls.n	8001a0c <HAL_ADC_ConfigChannel+0x244>
        MODIFY_REG(hadc->Instance->SMPR2,
 80019ee:	681d      	ldr	r5, [r3, #0]
 80019f0:	69a8      	ldr	r0, [r5, #24]
 80019f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019f6:	3a1b      	subs	r2, #27
 80019f8:	2407      	movs	r4, #7
 80019fa:	4094      	lsls	r4, r2
 80019fc:	ea20 0004 	bic.w	r0, r0, r4
 8001a00:	688c      	ldr	r4, [r1, #8]
 8001a02:	fa04 f202 	lsl.w	r2, r4, r2
 8001a06:	4302      	orrs	r2, r0
 8001a08:	61aa      	str	r2, [r5, #24]
 8001a0a:	e77f      	b.n	800190c <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a0c:	681d      	ldr	r5, [r3, #0]
 8001a0e:	6968      	ldr	r0, [r5, #20]
 8001a10:	3201      	adds	r2, #1
 8001a12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a16:	2407      	movs	r4, #7
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	ea20 0004 	bic.w	r0, r0, r4
 8001a1e:	688c      	ldr	r4, [r1, #8]
 8001a20:	fa04 f202 	lsl.w	r2, r4, r2
 8001a24:	4302      	orrs	r2, r0
 8001a26:	616a      	str	r2, [r5, #20]
 8001a28:	e770      	b.n	800190c <HAL_ADC_ConfigChannel+0x144>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a2a:	4935      	ldr	r1, [pc, #212]	; (8001b00 <HAL_ADC_ConfigChannel+0x338>)
 8001a2c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a2e:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8001a32:	f47f af6f 	bne.w	8001914 <HAL_ADC_ConfigChannel+0x14c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	6881      	ldr	r1, [r0, #8]
 8001a3a:	f001 0103 	and.w	r1, r1, #3
 8001a3e:	2901      	cmp	r1, #1
 8001a40:	d014      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a42:	2a10      	cmp	r2, #16
 8001a44:	d01c      	beq.n	8001a80 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a46:	2a11      	cmp	r2, #17
 8001a48:	d039      	beq.n	8001abe <HAL_ADC_ConfigChannel+0x2f6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a4a:	2a12      	cmp	r2, #18
 8001a4c:	d041      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x30a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4e:	2000      	movs	r0, #0
 8001a50:	e04b      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a52:	492b      	ldr	r1, [pc, #172]	; (8001b00 <HAL_ADC_ConfigChannel+0x338>)
 8001a54:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a56:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8001a5a:	d0ec      	beq.n	8001a36 <HAL_ADC_ConfigChannel+0x26e>
 8001a5c:	e75d      	b.n	800191a <HAL_ADC_ConfigChannel+0x152>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a5e:	4928      	ldr	r1, [pc, #160]	; (8001b00 <HAL_ADC_ConfigChannel+0x338>)
 8001a60:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a62:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8001a66:	d0e6      	beq.n	8001a36 <HAL_ADC_ConfigChannel+0x26e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a68:	2000      	movs	r0, #0
 8001a6a:	e03e      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a6c:	6801      	ldr	r1, [r0, #0]
 8001a6e:	f011 0f01 	tst.w	r1, #1
 8001a72:	d0e6      	beq.n	8001a42 <HAL_ADC_ConfigChannel+0x27a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	e034      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a80:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001a84:	d1df      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x27e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a86:	491e      	ldr	r1, [pc, #120]	; (8001b00 <HAL_ADC_ConfigChannel+0x338>)
 8001a88:	688a      	ldr	r2, [r1, #8]
 8001a8a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a8e:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a90:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <HAL_ADC_ConfigChannel+0x33c>)
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 8001a98:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8001a9c:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8001aa0:	fba1 1202 	umull	r1, r2, r1, r2
 8001aa4:	0c92      	lsrs	r2, r2, #18
 8001aa6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001aaa:	0051      	lsls	r1, r2, #1
 8001aac:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001aae:	9a01      	ldr	r2, [sp, #4]
 8001ab0:	b11a      	cbz	r2, 8001aba <HAL_ADC_ConfigChannel+0x2f2>
            wait_loop_index--;
 8001ab2:	9a01      	ldr	r2, [sp, #4]
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	9201      	str	r2, [sp, #4]
 8001ab8:	e7f9      	b.n	8001aae <HAL_ADC_ConfigChannel+0x2e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aba:	2000      	movs	r0, #0
 8001abc:	e015      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001abe:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001ac2:	d1c2      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x282>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_ADC_ConfigChannel+0x338>)
 8001ac6:	688a      	ldr	r2, [r1, #8]
 8001ac8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001acc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ace:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ad0:	e00b      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ad2:	490b      	ldr	r1, [pc, #44]	; (8001b00 <HAL_ADC_ConfigChannel+0x338>)
 8001ad4:	688a      	ldr	r2, [r1, #8]
 8001ad6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001ada:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2000      	movs	r0, #0
 8001ade:	e004      	b.n	8001aea <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001af0:	b002      	add	sp, #8
 8001af2:	bc30      	pop	{r4, r5}
 8001af4:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001af6:	2002      	movs	r0, #2
 8001af8:	e7fa      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x328>
 8001afa:	bf00      	nop
 8001afc:	83fff000 	.word	0x83fff000
 8001b00:	50000300 	.word	0x50000300
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b0a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	0200      	lsls	r0, r0, #8
 8001b16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001b1c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001b20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001b24:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_NVIC_SetPriority+0x60>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b36:	f1c3 0407 	rsb	r4, r3, #7
 8001b3a:	2c04      	cmp	r4, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b40:	1d1d      	adds	r5, r3, #4
 8001b42:	2d06      	cmp	r5, #6
 8001b44:	d918      	bls.n	8001b78 <HAL_NVIC_SetPriority+0x4c>
 8001b46:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 35ff 	mov.w	r5, #4294967295
 8001b4c:	fa05 f404 	lsl.w	r4, r5, r4
 8001b50:	ea21 0104 	bic.w	r1, r1, r4
 8001b54:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b56:	fa05 f303 	lsl.w	r3, r5, r3
 8001b5a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001b60:	2800      	cmp	r0, #0
 8001b62:	db0b      	blt.n	8001b7c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	0109      	lsls	r1, r1, #4
 8001b66:	b2c9      	uxtb	r1, r1
 8001b68:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b6c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b70:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b74:	bc30      	pop	{r4, r5}
 8001b76:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e7e5      	b.n	8001b48 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	f000 000f 	and.w	r0, r0, #15
 8001b80:	0109      	lsls	r1, r1, #4
 8001b82:	b2c9      	uxtb	r1, r1
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_NVIC_SetPriority+0x64>)
 8001b86:	5419      	strb	r1, [r3, r0]
 8001b88:	e7f4      	b.n	8001b74 <HAL_NVIC_SetPriority+0x48>
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00
 8001b90:	e000ed14 	.word	0xe000ed14

08001b94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b94:	2800      	cmp	r0, #0
 8001b96:	db07      	blt.n	8001ba8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b98:	f000 021f 	and.w	r2, r0, #31
 8001b9c:	0940      	lsrs	r0, r0, #5
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	4a02      	ldr	r2, [pc, #8]	; (8001bac <HAL_NVIC_EnableIRQ+0x18>)
 8001ba4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bb2:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001bb4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001bb6:	2401      	movs	r4, #1
 8001bb8:	40b4      	lsls	r4, r6
 8001bba:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bbc:	6804      	ldr	r4, [r0, #0]
 8001bbe:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc0:	6843      	ldr	r3, [r0, #4]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d005      	beq.n	8001bd2 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001bc6:	6803      	ldr	r3, [r0, #0]
 8001bc8:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001bca:	6803      	ldr	r3, [r0, #0]
 8001bcc:	60da      	str	r2, [r3, #12]
  }
}
 8001bce:	bc70      	pop	{r4, r5, r6}
 8001bd0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001bd2:	6803      	ldr	r3, [r0, #0]
 8001bd4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001bd6:	6803      	ldr	r3, [r0, #0]
 8001bd8:	60d9      	str	r1, [r3, #12]
 8001bda:	e7f8      	b.n	8001bce <DMA_SetConfig+0x1e>

08001bdc <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bdc:	6802      	ldr	r2, [r0, #0]
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <DMA_CalcBaseAndBitshift+0x18>)
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <DMA_CalcBaseAndBitshift+0x1c>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bee:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <DMA_CalcBaseAndBitshift+0x20>)
 8001bf0:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8001bf2:	4770      	bx	lr
 8001bf4:	bffdfff8 	.word	0xbffdfff8
 8001bf8:	cccccccd 	.word	0xcccccccd
 8001bfc:	40020000 	.word	0x40020000

08001c00 <HAL_DMA_Init>:
  if(NULL == hdma)
 8001c00:	b320      	cbz	r0, 8001c4c <HAL_DMA_Init+0x4c>
{ 
 8001c02:	b510      	push	{r4, lr}
 8001c04:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001c0c:	6801      	ldr	r1, [r0, #0]
 8001c0e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c10:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001c14:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001c18:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8001c1c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1e:	68e0      	ldr	r0, [r4, #12]
 8001c20:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c24:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	6960      	ldr	r0, [r4, #20]
 8001c28:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2e:	69e0      	ldr	r0, [r4, #28]
 8001c30:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001c32:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001c34:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff ffd0 	bl	8001bdc <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001c46:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8001c4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c4c:	2001      	movs	r0, #1
}  
 8001c4e:	4770      	bx	lr

08001c50 <HAL_DMA_Start_IT>:
{
 8001c50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001c52:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001c56:	2c01      	cmp	r4, #1
 8001c58:	d032      	beq.n	8001cc0 <HAL_DMA_Start_IT+0x70>
 8001c5a:	2401      	movs	r4, #1
 8001c5c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c60:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001c64:	2c01      	cmp	r4, #1
 8001c66:	d004      	beq.n	8001c72 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001c6e:	2002      	movs	r0, #2
} 
 8001c70:	bd38      	pop	{r3, r4, r5, pc}
 8001c72:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001c74:	2002      	movs	r0, #2
 8001c76:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c7e:	6825      	ldr	r5, [r4, #0]
 8001c80:	6828      	ldr	r0, [r5, #0]
 8001c82:	f020 0001 	bic.w	r0, r0, #1
 8001c86:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff ff91 	bl	8001bb0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c90:	b15b      	cbz	r3, 8001caa <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	f043 030e 	orr.w	r3, r3, #14
 8001c9a:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	6813      	ldr	r3, [r2, #0]
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	e7e2      	b.n	8001c70 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	f043 030a 	orr.w	r3, r3, #10
 8001cb2:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cb4:	6822      	ldr	r2, [r4, #0]
 8001cb6:	6813      	ldr	r3, [r2, #0]
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e7ed      	b.n	8001c9c <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	e7d5      	b.n	8001c70 <HAL_DMA_Start_IT+0x20>

08001cc4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d006      	beq.n	8001cda <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cda:	6802      	ldr	r2, [r0, #0]
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	f023 030e 	bic.w	r3, r3, #14
 8001ce2:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ce4:	6802      	ldr	r2, [r0, #0]
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cf0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001cfa:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001d04:	4618      	mov	r0, r3
}
 8001d06:	4770      	bx	lr

08001d08 <HAL_DMA_Abort_IT>:
{  
 8001d08:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d0a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d003      	beq.n	8001d1a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d12:	2304      	movs	r3, #4
 8001d14:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
}
 8001d18:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d1a:	6802      	ldr	r2, [r0, #0]
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f023 030e 	bic.w	r3, r3, #14
 8001d22:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d24:	6802      	ldr	r2, [r0, #0]
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d30:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001d32:	2201      	movs	r2, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001d44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d46:	b113      	cbz	r3, 8001d4e <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001d48:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	e7e4      	b.n	8001d18 <HAL_DMA_Abort_IT+0x10>
 8001d4e:	2000      	movs	r0, #0
 8001d50:	e7e2      	b.n	8001d18 <HAL_DMA_Abort_IT+0x10>

08001d52 <HAL_DMA_IRQHandler>:
{
 8001d52:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001d56:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d58:	6804      	ldr	r4, [r0, #0]
 8001d5a:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d5e:	2304      	movs	r3, #4
 8001d60:	408b      	lsls	r3, r1
 8001d62:	4213      	tst	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x3c>
 8001d66:	f015 0f04 	tst.w	r5, #4
 8001d6a:	d010      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	f013 0f20 	tst.w	r3, #32
 8001d72:	d103      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d7e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001d80:	2304      	movs	r3, #4
 8001d82:	408b      	lsls	r3, r1
 8001d84:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d88:	b103      	cbz	r3, 8001d8c <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8001d8a:	4798      	blx	r3
}  
 8001d8c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d8e:	2302      	movs	r3, #2
 8001d90:	408b      	lsls	r3, r1
 8001d92:	4213      	tst	r3, r2
 8001d94:	d01a      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x7a>
 8001d96:	f015 0f02 	tst.w	r5, #2
 8001d9a:	d017      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	f013 0f20 	tst.w	r3, #32
 8001da2:	d106      	bne.n	8001db2 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f023 030a 	bic.w	r3, r3, #10
 8001daa:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001db2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001db4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001db6:	2302      	movs	r3, #2
 8001db8:	408b      	lsls	r3, r1
 8001dba:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001dc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0e1      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8001dc8:	4798      	blx	r3
 8001dca:	e7df      	b.n	8001d8c <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dcc:	2308      	movs	r3, #8
 8001dce:	fa03 f101 	lsl.w	r1, r3, r1
 8001dd2:	4211      	tst	r1, r2
 8001dd4:	d0da      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x3a>
 8001dd6:	f015 0f08 	tst.w	r5, #8
 8001dda:	d0d7      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	f023 030e 	bic.w	r3, r3, #14
 8001de2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001de4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001de6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001de8:	2301      	movs	r3, #1
 8001dea:	fa03 f202 	lsl.w	r2, r3, r2
 8001dee:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001df0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001df2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001df6:	2300      	movs	r3, #0
 8001df8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001dfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0c4      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8001e02:	4798      	blx	r3
}  
 8001e04:	e7c2      	b.n	8001d8c <HAL_DMA_IRQHandler+0x3a>
	...

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b4f0      	push	{r4, r5, r6, r7}
 8001e0a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001e0c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	e036      	b.n	8001e7e <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e10:	2403      	movs	r4, #3
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_Init+0xe>
 8001e14:	2400      	movs	r4, #0
 8001e16:	40b4      	lsls	r4, r6
 8001e18:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1a:	3502      	adds	r5, #2
 8001e1c:	4e58      	ldr	r6, [pc, #352]	; (8001f80 <HAL_GPIO_Init+0x178>)
 8001e1e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e22:	4c58      	ldr	r4, [pc, #352]	; (8001f84 <HAL_GPIO_Init+0x17c>)
 8001e24:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001e26:	43d4      	mvns	r4, r2
 8001e28:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2c:	684f      	ldr	r7, [r1, #4]
 8001e2e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001e32:	d001      	beq.n	8001e38 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8001e34:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001e38:	4d52      	ldr	r5, [pc, #328]	; (8001f84 <HAL_GPIO_Init+0x17c>)
 8001e3a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001e3c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001e3e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e42:	684f      	ldr	r7, [r1, #4]
 8001e44:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001e48:	d001      	beq.n	8001e4e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8001e4a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001e4e:	4d4d      	ldr	r5, [pc, #308]	; (8001f84 <HAL_GPIO_Init+0x17c>)
 8001e50:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e52:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001e54:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e58:	684f      	ldr	r7, [r1, #4]
 8001e5a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001e5e:	d001      	beq.n	8001e64 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8001e60:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001e64:	4d47      	ldr	r5, [pc, #284]	; (8001f84 <HAL_GPIO_Init+0x17c>)
 8001e66:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001e68:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001e6a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6c:	684e      	ldr	r6, [r1, #4]
 8001e6e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001e72:	d001      	beq.n	8001e78 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001e74:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001e78:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <HAL_GPIO_Init+0x17c>)
 8001e7a:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001e7c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7e:	680a      	ldr	r2, [r1, #0]
 8001e80:	fa32 f403 	lsrs.w	r4, r2, r3
 8001e84:	d078      	beq.n	8001f78 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e86:	2401      	movs	r4, #1
 8001e88:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001e8a:	4022      	ands	r2, r4
 8001e8c:	d0f6      	beq.n	8001e7c <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8e:	684d      	ldr	r5, [r1, #4]
 8001e90:	2d02      	cmp	r5, #2
 8001e92:	d001      	beq.n	8001e98 <HAL_GPIO_Init+0x90>
 8001e94:	2d12      	cmp	r5, #18
 8001e96:	d110      	bne.n	8001eba <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 8001e98:	08de      	lsrs	r6, r3, #3
 8001e9a:	3608      	adds	r6, #8
 8001e9c:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea0:	f003 0507 	and.w	r5, r3, #7
 8001ea4:	00af      	lsls	r7, r5, #2
 8001ea6:	250f      	movs	r5, #15
 8001ea8:	40bd      	lsls	r5, r7
 8001eaa:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eae:	690d      	ldr	r5, [r1, #16]
 8001eb0:	40bd      	lsls	r5, r7
 8001eb2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001eb6:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001eba:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ebc:	005f      	lsls	r7, r3, #1
 8001ebe:	2503      	movs	r5, #3
 8001ec0:	40bd      	lsls	r5, r7
 8001ec2:	43ed      	mvns	r5, r5
 8001ec4:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec8:	684e      	ldr	r6, [r1, #4]
 8001eca:	f006 0603 	and.w	r6, r6, #3
 8001ece:	40be      	lsls	r6, r7
 8001ed0:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8001ed4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed6:	684e      	ldr	r6, [r1, #4]
 8001ed8:	f106 3cff 	add.w	ip, r6, #4294967295
 8001edc:	f1bc 0f01 	cmp.w	ip, #1
 8001ee0:	d903      	bls.n	8001eea <HAL_GPIO_Init+0xe2>
 8001ee2:	2e11      	cmp	r6, #17
 8001ee4:	d001      	beq.n	8001eea <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee6:	2e12      	cmp	r6, #18
 8001ee8:	d110      	bne.n	8001f0c <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8001eea:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eec:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef0:	68ce      	ldr	r6, [r1, #12]
 8001ef2:	40be      	lsls	r6, r7
 8001ef4:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001ef8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001efa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f00:	684e      	ldr	r6, [r1, #4]
 8001f02:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001f06:	409e      	lsls	r6, r3
 8001f08:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001f0a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001f0c:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f0e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f10:	688c      	ldr	r4, [r1, #8]
 8001f12:	40bc      	lsls	r4, r7
 8001f14:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001f16:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f18:	684c      	ldr	r4, [r1, #4]
 8001f1a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001f1e:	d0ad      	beq.n	8001e7c <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f20:	4c19      	ldr	r4, [pc, #100]	; (8001f88 <HAL_GPIO_Init+0x180>)
 8001f22:	69a5      	ldr	r5, [r4, #24]
 8001f24:	f045 0501 	orr.w	r5, r5, #1
 8001f28:	61a5      	str	r5, [r4, #24]
 8001f2a:	69a4      	ldr	r4, [r4, #24]
 8001f2c:	f004 0401 	and.w	r4, r4, #1
 8001f30:	9401      	str	r4, [sp, #4]
 8001f32:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f34:	089d      	lsrs	r5, r3, #2
 8001f36:	1cae      	adds	r6, r5, #2
 8001f38:	4c11      	ldr	r4, [pc, #68]	; (8001f80 <HAL_GPIO_Init+0x178>)
 8001f3a:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f3e:	f003 0403 	and.w	r4, r3, #3
 8001f42:	00a6      	lsls	r6, r4, #2
 8001f44:	240f      	movs	r4, #15
 8001f46:	40b4      	lsls	r4, r6
 8001f48:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f4c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001f50:	f43f af60 	beq.w	8001e14 <HAL_GPIO_Init+0xc>
 8001f54:	4c0d      	ldr	r4, [pc, #52]	; (8001f8c <HAL_GPIO_Init+0x184>)
 8001f56:	42a0      	cmp	r0, r4
 8001f58:	d00a      	beq.n	8001f70 <HAL_GPIO_Init+0x168>
 8001f5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f5e:	42a0      	cmp	r0, r4
 8001f60:	d008      	beq.n	8001f74 <HAL_GPIO_Init+0x16c>
 8001f62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f66:	42a0      	cmp	r0, r4
 8001f68:	f43f af52 	beq.w	8001e10 <HAL_GPIO_Init+0x8>
 8001f6c:	2405      	movs	r4, #5
 8001f6e:	e752      	b.n	8001e16 <HAL_GPIO_Init+0xe>
 8001f70:	2401      	movs	r4, #1
 8001f72:	e750      	b.n	8001e16 <HAL_GPIO_Init+0xe>
 8001f74:	2402      	movs	r4, #2
 8001f76:	e74e      	b.n	8001e16 <HAL_GPIO_Init+0xe>
  }
}
 8001f78:	b002      	add	sp, #8
 8001f7a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40010400 	.word	0x40010400
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	48000400 	.word	0x48000400

08001f90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	b90a      	cbnz	r2, 8001f96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f92:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001f94:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f96:	6181      	str	r1, [r0, #24]
 8001f98:	4770      	bx	lr

08001f9a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f9a:	6803      	ldr	r3, [r0, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	f012 0f02 	tst.w	r2, #2
 8001fa2:	d001      	beq.n	8001fa8 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa8:	6803      	ldr	r3, [r0, #0]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	f012 0f01 	tst.w	r2, #1
 8001fb0:	d103      	bne.n	8001fba <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	619a      	str	r2, [r3, #24]
  }
}
 8001fba:	4770      	bx	lr

08001fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001fbc:	b470      	push	{r4, r5, r6}
 8001fbe:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001fc0:	6805      	ldr	r5, [r0, #0]
 8001fc2:	6868      	ldr	r0, [r5, #4]
 8001fc4:	0d74      	lsrs	r4, r6, #21
 8001fc6:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001fca:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001fce:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001fd2:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001fd6:	f044 0403 	orr.w	r4, r4, #3
 8001fda:	ea20 0004 	bic.w	r0, r0, r4
 8001fde:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001fe2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001fe6:	4319      	orrs	r1, r3
 8001fe8:	4331      	orrs	r1, r6
 8001fea:	4301      	orrs	r1, r0
 8001fec:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001fee:	bc70      	pop	{r4, r5, r6}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <I2C_Enable_IRQ+0x78>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d017      	beq.n	800202c <I2C_Enable_IRQ+0x38>
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <I2C_Enable_IRQ+0x7c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d014      	beq.n	800202c <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002002:	f011 0f04 	tst.w	r1, #4
 8002006:	d12f      	bne.n	8002068 <I2C_Enable_IRQ+0x74>
  uint32_t tmpisr = 0U;
 8002008:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800200a:	f011 0f01 	tst.w	r1, #1
 800200e:	d001      	beq.n	8002014 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002010:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002014:	f011 0f02 	tst.w	r1, #2
 8002018:	d001      	beq.n	800201e <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800201a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800201e:	f001 0112 	and.w	r1, r1, #18
 8002022:	2912      	cmp	r1, #18
 8002024:	d110      	bne.n	8002048 <I2C_Enable_IRQ+0x54>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	e00d      	b.n	8002048 <I2C_Enable_IRQ+0x54>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800202c:	f011 0f04 	tst.w	r1, #4
 8002030:	d10f      	bne.n	8002052 <I2C_Enable_IRQ+0x5e>
  uint32_t tmpisr = 0U;
 8002032:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002034:	f001 0211 	and.w	r2, r1, #17
 8002038:	2a11      	cmp	r2, #17
 800203a:	d00c      	beq.n	8002056 <I2C_Enable_IRQ+0x62>
 800203c:	f001 0112 	and.w	r1, r1, #18
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002040:	2912      	cmp	r1, #18
 8002042:	d00b      	beq.n	800205c <I2C_Enable_IRQ+0x68>
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002044:	2912      	cmp	r1, #18
 8002046:	d00c      	beq.n	8002062 <I2C_Enable_IRQ+0x6e>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002048:	6801      	ldr	r1, [r0, #0]
 800204a:	680a      	ldr	r2, [r1, #0]
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
}
 8002050:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002052:	23b8      	movs	r3, #184	; 0xb8
 8002054:	e7ee      	b.n	8002034 <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002056:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800205a:	e7ef      	b.n	800203c <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_STOPI;
 800205c:	f043 0320 	orr.w	r3, r3, #32
 8002060:	e7f0      	b.n	8002044 <I2C_Enable_IRQ+0x50>
      tmpisr |= I2C_IT_TCI;
 8002062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002066:	e7ef      	b.n	8002048 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002068:	23b8      	movs	r3, #184	; 0xb8
 800206a:	e7ce      	b.n	800200a <I2C_Enable_IRQ+0x16>
 800206c:	080029bf 	.word	0x080029bf
 8002070:	080028c1 	.word	0x080028c1

08002074 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002074:	f011 0f01 	tst.w	r1, #1
 8002078:	d009      	beq.n	800208e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800207a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800207e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002082:	2b28      	cmp	r3, #40	; 0x28
 8002084:	d001      	beq.n	800208a <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002086:	23f2      	movs	r3, #242	; 0xf2
 8002088:	e002      	b.n	8002090 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800208a:	2342      	movs	r3, #66	; 0x42
 800208c:	e000      	b.n	8002090 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800208e:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002090:	f011 0f02 	tst.w	r1, #2
 8002094:	d02c      	beq.n	80020f0 <I2C_Disable_IRQ+0x7c>
{
 8002096:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002098:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800209c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80020a0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80020a4:	2a28      	cmp	r2, #40	; 0x28
 80020a6:	d018      	beq.n	80020da <I2C_Disable_IRQ+0x66>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020a8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80020ac:	f011 0f04 	tst.w	r1, #4
 80020b0:	d001      	beq.n	80020b6 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80020b6:	f001 0211 	and.w	r2, r1, #17
 80020ba:	2a11      	cmp	r2, #17
 80020bc:	d00f      	beq.n	80020de <I2C_Disable_IRQ+0x6a>
 80020be:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80020c2:	2912      	cmp	r1, #18
 80020c4:	d00e      	beq.n	80020e4 <I2C_Disable_IRQ+0x70>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80020c6:	2912      	cmp	r1, #18
 80020c8:	d00f      	beq.n	80020ea <I2C_Disable_IRQ+0x76>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80020ca:	6801      	ldr	r1, [r0, #0]
 80020cc:	680a      	ldr	r2, [r1, #0]
 80020ce:	ea22 0303 	bic.w	r3, r2, r3
 80020d2:	600b      	str	r3, [r1, #0]
}
 80020d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020d8:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80020da:	4623      	mov	r3, r4
 80020dc:	e7e6      	b.n	80020ac <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80020de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80020e2:	e7ec      	b.n	80020be <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	e7ed      	b.n	80020c6 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 80020ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ee:	e7ec      	b.n	80020ca <I2C_Disable_IRQ+0x56>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80020f0:	f011 0f04 	tst.w	r1, #4
 80020f4:	d001      	beq.n	80020fa <I2C_Disable_IRQ+0x86>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80020fa:	f001 0211 	and.w	r2, r1, #17
 80020fe:	2a11      	cmp	r2, #17
 8002100:	d00b      	beq.n	800211a <I2C_Disable_IRQ+0xa6>
 8002102:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002106:	2912      	cmp	r1, #18
 8002108:	d00a      	beq.n	8002120 <I2C_Disable_IRQ+0xac>
  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800210a:	2912      	cmp	r1, #18
 800210c:	d00b      	beq.n	8002126 <I2C_Disable_IRQ+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800210e:	6801      	ldr	r1, [r0, #0]
 8002110:	680a      	ldr	r2, [r1, #0]
 8002112:	ea22 0303 	bic.w	r3, r2, r3
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	4770      	bx	lr
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800211a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800211e:	e7f0      	b.n	8002102 <I2C_Disable_IRQ+0x8e>
    tmpisr |= I2C_IT_STOPI;
 8002120:	f043 0320 	orr.w	r3, r3, #32
 8002124:	e7f1      	b.n	800210a <I2C_Disable_IRQ+0x96>
    tmpisr |= I2C_IT_TCI;
 8002126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212a:	e7f0      	b.n	800210e <I2C_Disable_IRQ+0x9a>

0800212c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800212c:	2800      	cmp	r0, #0
 800212e:	d059      	beq.n	80021e4 <HAL_I2C_Init+0xb8>
{
 8002130:	b510      	push	{r4, lr}
 8002132:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002134:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002138:	2b00      	cmp	r3, #0
 800213a:	d043      	beq.n	80021c4 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	2324      	movs	r3, #36	; 0x24
 800213e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800214c:	6863      	ldr	r3, [r4, #4]
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002154:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002156:	6822      	ldr	r2, [r4, #0]
 8002158:	6893      	ldr	r3, [r2, #8]
 800215a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800215e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002160:	68e3      	ldr	r3, [r4, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d033      	beq.n	80021ce <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002166:	68a3      	ldr	r3, [r4, #8]
 8002168:	6822      	ldr	r2, [r4, #0]
 800216a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800216e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002170:	68e3      	ldr	r3, [r4, #12]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d031      	beq.n	80021da <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	6853      	ldr	r3, [r2, #4]
 800217a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800217e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002182:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002184:	6822      	ldr	r2, [r4, #0]
 8002186:	68d3      	ldr	r3, [r2, #12]
 8002188:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800218c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800218e:	6923      	ldr	r3, [r4, #16]
 8002190:	6962      	ldr	r2, [r4, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	69a1      	ldr	r1, [r4, #24]
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800219c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800219e:	69e3      	ldr	r3, [r4, #28]
 80021a0:	6a21      	ldr	r1, [r4, #32]
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80021a8:	6822      	ldr	r2, [r4, #0]
 80021aa:	6813      	ldr	r3, [r2, #0]
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b2:	2000      	movs	r0, #0
 80021b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	2320      	movs	r3, #32
 80021b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80021c2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80021c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80021c8:	f7fe fa44 	bl	8000654 <HAL_I2C_MspInit>
 80021cc:	e7b6      	b.n	800213c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ce:	68a3      	ldr	r3, [r4, #8]
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d6:	6093      	str	r3, [r2, #8]
 80021d8:	e7ca      	b.n	8002170 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	e7c8      	b.n	8002176 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
}
 80021e6:	4770      	bx	lr

080021e8 <HAL_I2C_Slave_Transmit_IT>:
{
 80021e8:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d122      	bne.n	800223a <HAL_I2C_Slave_Transmit_IT+0x52>
    __HAL_LOCK(hi2c);
 80021f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d020      	beq.n	800223e <HAL_I2C_Slave_Transmit_IT+0x56>
 80021fc:	2301      	movs	r3, #1
 80021fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002202:	2321      	movs	r3, #33	; 0x21
 8002204:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002208:	2320      	movs	r3, #32
 800220a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800220e:	2400      	movs	r4, #0
 8002210:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002212:	6805      	ldr	r5, [r0, #0]
 8002214:	686b      	ldr	r3, [r5, #4]
 8002216:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800221a:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 800221c:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 800221e:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002220:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002222:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_I2C_Slave_Transmit_IT+0x5c>)
 8002226:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_I2C_Slave_Transmit_IT+0x60>)
 800222a:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 800222c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002230:	2105      	movs	r1, #5
 8002232:	f7ff fedf 	bl	8001ff4 <I2C_Enable_IRQ>
    return HAL_OK;
 8002236:	4620      	mov	r0, r4
 8002238:	e000      	b.n	800223c <HAL_I2C_Slave_Transmit_IT+0x54>
    return HAL_BUSY;
 800223a:	2002      	movs	r0, #2
}
 800223c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 800223e:	2002      	movs	r0, #2
 8002240:	e7fc      	b.n	800223c <HAL_I2C_Slave_Transmit_IT+0x54>
 8002242:	bf00      	nop
 8002244:	ffff0000 	.word	0xffff0000
 8002248:	08002695 	.word	0x08002695

0800224c <HAL_I2C_Slave_Receive_IT>:
{
 800224c:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800224e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	d122      	bne.n	800229e <HAL_I2C_Slave_Receive_IT+0x52>
    __HAL_LOCK(hi2c);
 8002258:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800225c:	2b01      	cmp	r3, #1
 800225e:	d020      	beq.n	80022a2 <HAL_I2C_Slave_Receive_IT+0x56>
 8002260:	2301      	movs	r3, #1
 8002262:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002266:	2322      	movs	r3, #34	; 0x22
 8002268:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800226c:	2320      	movs	r3, #32
 800226e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002272:	2400      	movs	r4, #0
 8002274:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002276:	6805      	ldr	r5, [r0, #0]
 8002278:	686b      	ldr	r3, [r5, #4]
 800227a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800227e:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8002280:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002282:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002284:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002286:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_I2C_Slave_Receive_IT+0x5c>)
 800228a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_I2C_Slave_Receive_IT+0x60>)
 800228e:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002290:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002294:	2106      	movs	r1, #6
 8002296:	f7ff fead 	bl	8001ff4 <I2C_Enable_IRQ>
    return HAL_OK;
 800229a:	4620      	mov	r0, r4
 800229c:	e000      	b.n	80022a0 <HAL_I2C_Slave_Receive_IT+0x54>
    return HAL_BUSY;
 800229e:	2002      	movs	r0, #2
}
 80022a0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 80022a2:	2002      	movs	r0, #2
 80022a4:	e7fc      	b.n	80022a0 <HAL_I2C_Slave_Receive_IT+0x54>
 80022a6:	bf00      	nop
 80022a8:	ffff0000 	.word	0xffff0000
 80022ac:	08002695 	.word	0x08002695

080022b0 <HAL_I2C_EV_IRQHandler>:
{
 80022b0:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022b2:	6803      	ldr	r3, [r0, #0]
 80022b4:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022b6:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80022b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022ba:	b103      	cbz	r3, 80022be <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80022bc:	4798      	blx	r3
}
 80022be:	bd08      	pop	{r3, pc}

080022c0 <HAL_I2C_MasterTxCpltCallback>:
}
 80022c0:	4770      	bx	lr

080022c2 <HAL_I2C_MasterRxCpltCallback>:
}
 80022c2:	4770      	bx	lr

080022c4 <I2C_ITMasterSeqCplt>:
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b21      	cmp	r3, #33	; 0x21
 80022d6:	d00f      	beq.n	80022f8 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 80022d8:	2320      	movs	r3, #32
 80022da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022de:	2312      	movs	r3, #18
 80022e0:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80022e2:	2500      	movs	r5, #0
 80022e4:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022e6:	2102      	movs	r1, #2
 80022e8:	f7ff fec4 	bl	8002074 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80022ec:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7ff ffe6 	bl	80022c2 <HAL_I2C_MasterRxCpltCallback>
}
 80022f6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80022f8:	2320      	movs	r3, #32
 80022fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022fe:	2311      	movs	r3, #17
 8002300:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002302:	2500      	movs	r5, #0
 8002304:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002306:	2101      	movs	r1, #1
 8002308:	f7ff feb4 	bl	8002074 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800230c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff ffd5 	bl	80022c0 <HAL_I2C_MasterTxCpltCallback>
 8002316:	e7ee      	b.n	80022f6 <I2C_ITMasterSeqCplt+0x32>

08002318 <I2C_ITSlaveSeqCplt>:
{
 8002318:	b510      	push	{r4, lr}
 800231a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	2300      	movs	r3, #0
 800231e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002322:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b29      	cmp	r3, #41	; 0x29
 800232a:	d005      	beq.n	8002338 <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800232c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b2a      	cmp	r3, #42	; 0x2a
 8002334:	d00f      	beq.n	8002356 <I2C_ITSlaveSeqCplt+0x3e>
}
 8002336:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002338:	2328      	movs	r3, #40	; 0x28
 800233a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800233e:	2321      	movs	r3, #33	; 0x21
 8002340:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002342:	2101      	movs	r1, #1
 8002344:	f7ff fe96 	bl	8002074 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002348:	2300      	movs	r3, #0
 800234a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800234e:	4620      	mov	r0, r4
 8002350:	f7fe fa4e 	bl	80007f0 <HAL_I2C_SlaveTxCpltCallback>
 8002354:	e7ef      	b.n	8002336 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002356:	2328      	movs	r3, #40	; 0x28
 8002358:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800235c:	2322      	movs	r3, #34	; 0x22
 800235e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002360:	2102      	movs	r1, #2
 8002362:	f7ff fe87 	bl	8002074 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002366:	2300      	movs	r3, #0
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800236c:	4620      	mov	r0, r4
 800236e:	f7fe fa49 	bl	8000804 <HAL_I2C_SlaveRxCpltCallback>
}
 8002372:	e7e0      	b.n	8002336 <I2C_ITSlaveSeqCplt+0x1e>

08002374 <HAL_I2C_AddrCallback>:
}
 8002374:	4770      	bx	lr

08002376 <I2C_ITAddrCplt>:
{
 8002376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002378:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800237c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002380:	2b28      	cmp	r3, #40	; 0x28
 8002382:	d006      	beq.n	8002392 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002384:	6803      	ldr	r3, [r0, #0]
 8002386:	2208      	movs	r2, #8
 8002388:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8002390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002392:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	699e      	ldr	r6, [r3, #24]
 8002398:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	0c12      	lsrs	r2, r2, #16
 80023a0:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023aa:	68df      	ldr	r7, [r3, #12]
 80023ac:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023b0:	68c1      	ldr	r1, [r0, #12]
 80023b2:	2902      	cmp	r1, #2
 80023b4:	d121      	bne.n	80023fa <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80023b6:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80023ba:	f015 0f06 	tst.w	r5, #6
 80023be:	d110      	bne.n	80023e2 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80023c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80023c2:	3101      	adds	r1, #1
 80023c4:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80023c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80023c8:	2902      	cmp	r1, #2
 80023ca:	d1e1      	bne.n	8002390 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 80023cc:	2100      	movs	r1, #0
 80023ce:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023d0:	2008      	movs	r0, #8
 80023d2:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80023d4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023d8:	4631      	mov	r1, r6
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff ffca 	bl	8002374 <HAL_I2C_AddrCallback>
 80023e0:	e7d6      	b.n	8002390 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023e2:	2104      	movs	r1, #4
 80023e4:	f7ff fe46 	bl	8002074 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023e8:	2300      	movs	r3, #0
 80023ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023ee:	463a      	mov	r2, r7
 80023f0:	4631      	mov	r1, r6
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff ffbe 	bl	8002374 <HAL_I2C_AddrCallback>
 80023f8:	e7ca      	b.n	8002390 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023fa:	2104      	movs	r1, #4
 80023fc:	f7ff fe3a 	bl	8002074 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002400:	2300      	movs	r3, #0
 8002402:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002406:	462a      	mov	r2, r5
 8002408:	4631      	mov	r1, r6
 800240a:	4620      	mov	r0, r4
 800240c:	f7ff ffb2 	bl	8002374 <HAL_I2C_AddrCallback>
 8002410:	e7be      	b.n	8002390 <I2C_ITAddrCplt+0x1a>

08002412 <HAL_I2C_ListenCpltCallback>:
}
 8002412:	4770      	bx	lr

08002414 <I2C_ITListenCplt>:
{
 8002414:	b510      	push	{r4, lr}
 8002416:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <I2C_ITListenCplt+0x60>)
 800241a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002420:	2220      	movs	r2, #32
 8002422:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002426:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800242a:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800242c:	f011 0f04 	tst.w	r1, #4
 8002430:	d012      	beq.n	8002458 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002432:	6803      	ldr	r3, [r0, #0]
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002438:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800243a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800243c:	3301      	adds	r3, #1
 800243e:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002440:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002442:	b14b      	cbz	r3, 8002458 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8002444:	3b01      	subs	r3, #1
 8002446:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002448:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800244a:	3b01      	subs	r3, #1
 800244c:	b29b      	uxth	r3, r3
 800244e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002450:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002458:	2107      	movs	r1, #7
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff fe0a 	bl	8002074 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	2210      	movs	r2, #16
 8002464:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff ffd0 	bl	8002412 <HAL_I2C_ListenCpltCallback>
}
 8002472:	bd10      	pop	{r4, pc}
 8002474:	ffff0000 	.word	0xffff0000

08002478 <HAL_I2C_MemTxCpltCallback>:
}
 8002478:	4770      	bx	lr

0800247a <HAL_I2C_MemRxCpltCallback>:
}
 800247a:	4770      	bx	lr

0800247c <HAL_I2C_ErrorCallback>:
}
 800247c:	4770      	bx	lr

0800247e <HAL_I2C_AbortCpltCallback>:
}
 800247e:	4770      	bx	lr

08002480 <I2C_ITError>:
{
 8002480:	b510      	push	{r4, lr}
 8002482:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002484:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002488:	2200      	movs	r2, #0
 800248a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800248e:	4836      	ldr	r0, [pc, #216]	; (8002568 <I2C_ITError+0xe8>)
 8002490:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002492:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002494:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002496:	4311      	orrs	r1, r2
 8002498:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800249a:	3b28      	subs	r3, #40	; 0x28
 800249c:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d822      	bhi.n	80024e8 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80024a2:	2103      	movs	r1, #3
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff fde5 	bl	8002074 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024aa:	2328      	movs	r3, #40	; 0x28
 80024ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <I2C_ITError+0xec>)
 80024b6:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80024c0:	d022      	beq.n	8002508 <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024c8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80024ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024cc:	b15b      	cbz	r3, 80024e6 <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <I2C_ITError+0xf0>)
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80024d2:	2300      	movs	r3, #0
 80024d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80024d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024da:	f7ff fc15 	bl	8001d08 <HAL_DMA_Abort_IT>
 80024de:	b110      	cbz	r0, 80024e6 <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024e4:	4798      	blx	r3
}
 80024e6:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80024e8:	2107      	movs	r1, #7
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7ff fdc2 	bl	8002074 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80024f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b60      	cmp	r3, #96	; 0x60
 80024f8:	d002      	beq.n	8002500 <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 80024fa:	2320      	movs	r3, #32
 80024fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002500:	2300      	movs	r3, #0
 8002502:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002504:	6363      	str	r3, [r4, #52]	; 0x34
 8002506:	e7d7      	b.n	80024b8 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800250e:	d014      	beq.n	800253a <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002516:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0e3      	beq.n	80024e6 <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <I2C_ITError+0xf0>)
 8002520:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002528:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800252a:	f7ff fbed 	bl	8001d08 <HAL_DMA_Abort_IT>
 800252e:	2800      	cmp	r0, #0
 8002530:	d0d9      	beq.n	80024e6 <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002532:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002534:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002536:	4798      	blx	r3
 8002538:	e7d5      	b.n	80024e6 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800253a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b60      	cmp	r3, #96	; 0x60
 8002542:	d006      	beq.n	8002552 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8002544:	2300      	movs	r3, #0
 8002546:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff ff96 	bl	800247c <HAL_I2C_ErrorCallback>
}
 8002550:	e7c9      	b.n	80024e6 <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 8002552:	2320      	movs	r3, #32
 8002554:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002558:	2300      	movs	r3, #0
 800255a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800255e:	4620      	mov	r0, r4
 8002560:	f7ff ff8d 	bl	800247e <HAL_I2C_AbortCpltCallback>
 8002564:	e7bf      	b.n	80024e6 <I2C_ITError+0x66>
 8002566:	bf00      	nop
 8002568:	ffff0000 	.word	0xffff0000
 800256c:	08002695 	.word	0x08002695
 8002570:	08002aff 	.word	0x08002aff

08002574 <I2C_ITSlaveCplt>:
{
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	4604      	mov	r4, r0
 8002578:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800257a:	6803      	ldr	r3, [r0, #0]
 800257c:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800257e:	2220      	movs	r2, #32
 8002580:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002582:	2107      	movs	r1, #7
 8002584:	f7ff fd76 	bl	8002074 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	6853      	ldr	r3, [r2, #4]
 800258c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002590:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	6853      	ldr	r3, [r2, #4]
 8002596:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800259a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800259e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff fcf6 	bl	8001f9a <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80025ae:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80025b2:	d03a      	beq.n	800262a <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 80025b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025b6:	b11b      	cbz	r3, 80025c0 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80025c0:	f015 0f04 	tst.w	r5, #4
 80025c4:	d010      	beq.n	80025e8 <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025c6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80025d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025da:	b12b      	cbz	r3, 80025e8 <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 80025dc:	3b01      	subs	r3, #1
 80025de:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80025e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80025e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	b11b      	cbz	r3, 80025f6 <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80025fe:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002600:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002602:	b9eb      	cbnz	r3, 8002640 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002606:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800260a:	d127      	bne.n	800265c <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800260c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b22      	cmp	r3, #34	; 0x22
 8002614:	d031      	beq.n	800267a <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	2320      	movs	r3, #32
 8002618:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800261c:	2300      	movs	r3, #0
 800261e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002622:	4620      	mov	r0, r4
 8002624:	f7fe f8e4 	bl	80007f0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002628:	e026      	b.n	8002678 <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800262a:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 800262e:	d0c7      	beq.n	80025c0 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8002630:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0c4      	beq.n	80025c0 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b29b      	uxth	r3, r3
 800263c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800263e:	e7bf      	b.n	80025c0 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002640:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff ff1c 	bl	8002480 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002648:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b28      	cmp	r3, #40	; 0x28
 8002650:	d112      	bne.n	8002678 <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002652:	4629      	mov	r1, r5
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff fedd 	bl	8002414 <I2C_ITListenCplt>
 800265a:	e00d      	b.n	8002678 <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff fe5b 	bl	8002318 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <I2C_ITSlaveCplt+0x11c>)
 8002664:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002666:	2320      	movs	r3, #32
 8002668:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800266c:	2300      	movs	r3, #0
 800266e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff fecd 	bl	8002412 <HAL_I2C_ListenCpltCallback>
}
 8002678:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800267a:	2320      	movs	r3, #32
 800267c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002680:	2300      	movs	r3, #0
 8002682:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002686:	4620      	mov	r0, r4
 8002688:	f7fe f8bc 	bl	8000804 <HAL_I2C_SlaveRxCpltCallback>
 800268c:	e7f4      	b.n	8002678 <I2C_ITSlaveCplt+0x104>
 800268e:	bf00      	nop
 8002690:	ffff0000 	.word	0xffff0000

08002694 <I2C_Slave_ISR_IT>:
{
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8002696:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002698:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800269c:	2b01      	cmp	r3, #1
 800269e:	f000 809c 	beq.w	80027da <I2C_Slave_ISR_IT+0x146>
 80026a2:	4616      	mov	r6, r2
 80026a4:	460d      	mov	r5, r1
 80026a6:	4604      	mov	r4, r0
 80026a8:	2301      	movs	r3, #1
 80026aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026ae:	f011 0f20 	tst.w	r1, #32
 80026b2:	d002      	beq.n	80026ba <I2C_Slave_ISR_IT+0x26>
 80026b4:	f012 0f20 	tst.w	r2, #32
 80026b8:	d119      	bne.n	80026ee <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026ba:	f015 0f10 	tst.w	r5, #16
 80026be:	d03e      	beq.n	800273e <I2C_Slave_ISR_IT+0xaa>
 80026c0:	f016 0f10 	tst.w	r6, #16
 80026c4:	d03b      	beq.n	800273e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 80026c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	bb43      	cbnz	r3, 800271e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80026cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b28      	cmp	r3, #40	; 0x28
 80026d4:	d00e      	beq.n	80026f4 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80026d6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b29      	cmp	r3, #41	; 0x29
 80026de:	d011      	beq.n	8002704 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	2210      	movs	r2, #16
 80026e4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80026ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026ee:	f7ff ff41 	bl	8002574 <I2C_ITSlaveCplt>
 80026f2:	e7e2      	b.n	80026ba <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80026f4:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80026f8:	d1ed      	bne.n	80026d6 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80026fa:	4629      	mov	r1, r5
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff fe89 	bl	8002414 <I2C_ITListenCplt>
 8002702:	e7f0      	b.n	80026e6 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002704:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8002708:	d0ea      	beq.n	80026e0 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	2210      	movs	r2, #16
 800270e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff fc42 	bl	8001f9a <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff fdfe 	bl	8002318 <I2C_ITSlaveSeqCplt>
 800271c:	e7e3      	b.n	80026e6 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002724:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800272c:	b117      	cbz	r7, 8002734 <I2C_Slave_ISR_IT+0xa0>
 800272e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8002732:	d1d8      	bne.n	80026e6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002734:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff fea2 	bl	8002480 <I2C_ITError>
 800273c:	e7d3      	b.n	80026e6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800273e:	f015 0f04 	tst.w	r5, #4
 8002742:	d01e      	beq.n	8002782 <I2C_Slave_ISR_IT+0xee>
 8002744:	f016 0f04 	tst.w	r6, #4
 8002748:	d01b      	beq.n	8002782 <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 800274a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	b16b      	cbz	r3, 800276c <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002756:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800275a:	3301      	adds	r3, #1
 800275c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800275e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002760:	3b01      	subs	r3, #1
 8002762:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002764:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002766:	3b01      	subs	r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800276c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1b8      	bne.n	80026e6 <I2C_Slave_ISR_IT+0x52>
 8002774:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8002778:	d0b5      	beq.n	80026e6 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fdcc 	bl	8002318 <I2C_ITSlaveSeqCplt>
 8002780:	e7b1      	b.n	80026e6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002782:	f015 0f08 	tst.w	r5, #8
 8002786:	d002      	beq.n	800278e <I2C_Slave_ISR_IT+0xfa>
 8002788:	f016 0f08 	tst.w	r6, #8
 800278c:	d117      	bne.n	80027be <I2C_Slave_ISR_IT+0x12a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800278e:	f015 0f02 	tst.w	r5, #2
 8002792:	d0a8      	beq.n	80026e6 <I2C_Slave_ISR_IT+0x52>
 8002794:	f016 0f02 	tst.w	r6, #2
 8002798:	d0a5      	beq.n	80026e6 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800279a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	b19b      	cbz	r3, 80027c8 <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80027a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027aa:	3301      	adds	r3, #1
 80027ac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	8523      	strh	r3, [r4, #40]	; 0x28
 80027bc:	e793      	b.n	80026e6 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80027be:	4629      	mov	r1, r5
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fdd8 	bl	8002376 <I2C_ITAddrCplt>
 80027c6:	e78e      	b.n	80026e6 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80027c8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80027cc:	d001      	beq.n	80027d2 <I2C_Slave_ISR_IT+0x13e>
 80027ce:	2f00      	cmp	r7, #0
 80027d0:	d189      	bne.n	80026e6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7ff fda0 	bl	8002318 <I2C_ITSlaveSeqCplt>
 80027d8:	e785      	b.n	80026e6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80027da:	2002      	movs	r0, #2
 80027dc:	e786      	b.n	80026ec <I2C_Slave_ISR_IT+0x58>

080027de <I2C_ITMasterCplt>:
{
 80027de:	b510      	push	{r4, lr}
 80027e0:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	2220      	movs	r2, #32
 80027e6:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 80027e8:	6802      	ldr	r2, [r0, #0]
 80027ea:	6853      	ldr	r3, [r2, #4]
 80027ec:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80027f0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80027f4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	2300      	movs	r3, #0
 8002800:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8002802:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002804:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002808:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800280a:	f011 0f10 	tst.w	r1, #16
 800280e:	d006      	beq.n	800281e <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002810:	6803      	ldr	r3, [r0, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002816:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff fbbb 	bl	8001f9a <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002824:	2103      	movs	r1, #3
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fc24 	bl	8002074 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 800282c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800282e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d01b      	beq.n	8002870 <I2C_ITMasterCplt+0x92>
 8002838:	b9d2      	cbnz	r2, 8002870 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800283a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b21      	cmp	r3, #33	; 0x21
 8002842:	d01a      	beq.n	800287a <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002844:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b22      	cmp	r3, #34	; 0x22
 800284c:	d114      	bne.n	8002878 <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	2320      	movs	r3, #32
 8002850:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002854:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d027      	beq.n	80028ae <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	2300      	movs	r3, #0
 8002860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002864:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff fd2a 	bl	80022c2 <HAL_I2C_MasterRxCpltCallback>
}
 800286e:	e003      	b.n	8002878 <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002870:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff fe04 	bl	8002480 <I2C_ITError>
}
 8002878:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	2320      	movs	r3, #32
 800287c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002880:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d008      	beq.n	800289c <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	2300      	movs	r3, #0
 800288c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002890:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff fd13 	bl	80022c0 <HAL_I2C_MasterTxCpltCallback>
 800289a:	e7ed      	b.n	8002878 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	2300      	movs	r3, #0
 800289e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff fde6 	bl	8002478 <HAL_I2C_MemTxCpltCallback>
 80028ac:	e7e4      	b.n	8002878 <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff fdde 	bl	800247a <HAL_I2C_MemRxCpltCallback>
 80028be:	e7db      	b.n	8002878 <I2C_ITMasterCplt+0x9a>

080028c0 <I2C_Slave_ISR_DMA>:
{
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80028c2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80028c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d076      	beq.n	80029ba <I2C_Slave_ISR_DMA+0xfa>
 80028cc:	4616      	mov	r6, r2
 80028ce:	460d      	mov	r5, r1
 80028d0:	4604      	mov	r4, r0
 80028d2:	2301      	movs	r3, #1
 80028d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028d8:	f011 0f20 	tst.w	r1, #32
 80028dc:	d002      	beq.n	80028e4 <I2C_Slave_ISR_DMA+0x24>
 80028de:	f012 0f20 	tst.w	r2, #32
 80028e2:	d115      	bne.n	8002910 <I2C_Slave_ISR_DMA+0x50>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80028e4:	f015 0f10 	tst.w	r5, #16
 80028e8:	d058      	beq.n	800299c <I2C_Slave_ISR_DMA+0xdc>
 80028ea:	f016 0f10 	tst.w	r6, #16
 80028ee:	d055      	beq.n	800299c <I2C_Slave_ISR_DMA+0xdc>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028f0:	f3c6 3380 	ubfx	r3, r6, #14, #1
 80028f4:	b913      	cbnz	r3, 80028fc <I2C_Slave_ISR_DMA+0x3c>
 80028f6:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80028fa:	d04b      	beq.n	8002994 <I2C_Slave_ISR_DMA+0xd4>
      if (hi2c->hdmarx != NULL)
 80028fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028fe:	b152      	cbz	r2, 8002916 <I2C_Slave_ISR_DMA+0x56>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002900:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8002904:	d009      	beq.n	800291a <I2C_Slave_ISR_DMA+0x5a>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	6852      	ldr	r2, [r2, #4]
 800290a:	b1f2      	cbz	r2, 800294a <I2C_Slave_ISR_DMA+0x8a>
  uint32_t treatdmanack = 0U;
 800290c:	2100      	movs	r1, #0
 800290e:	e005      	b.n	800291c <I2C_Slave_ISR_DMA+0x5c>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002910:	f7ff fe30 	bl	8002574 <I2C_ITSlaveCplt>
 8002914:	e7e6      	b.n	80028e4 <I2C_Slave_ISR_DMA+0x24>
  uint32_t treatdmanack = 0U;
 8002916:	2100      	movs	r1, #0
 8002918:	e000      	b.n	800291c <I2C_Slave_ISR_DMA+0x5c>
 800291a:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
 800291c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800291e:	b11a      	cbz	r2, 8002928 <I2C_Slave_ISR_DMA+0x68>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002920:	b113      	cbz	r3, 8002928 <I2C_Slave_ISR_DMA+0x68>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	b193      	cbz	r3, 800294e <I2C_Slave_ISR_DMA+0x8e>
      if (treatdmanack == 1U)
 8002928:	b989      	cbnz	r1, 800294e <I2C_Slave_ISR_DMA+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	2210      	movs	r2, #16
 800292e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002930:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002938:	b117      	cbz	r7, 8002940 <I2C_Slave_ISR_DMA+0x80>
 800293a:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800293e:	d133      	bne.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002940:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fd9c 	bl	8002480 <I2C_ITError>
 8002948:	e02e      	b.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
            treatdmanack = 1U;
 800294a:	2101      	movs	r1, #1
 800294c:	e7e6      	b.n	800291c <I2C_Slave_ISR_DMA+0x5c>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800294e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b28      	cmp	r3, #40	; 0x28
 8002956:	d008      	beq.n	800296a <I2C_Slave_ISR_DMA+0xaa>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002958:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b29      	cmp	r3, #41	; 0x29
 8002960:	d00b      	beq.n	800297a <I2C_Slave_ISR_DMA+0xba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	2210      	movs	r2, #16
 8002966:	61da      	str	r2, [r3, #28]
 8002968:	e01e      	b.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800296a:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800296e:	d1f3      	bne.n	8002958 <I2C_Slave_ISR_DMA+0x98>
          I2C_ITListenCplt(hi2c, ITFlags);
 8002970:	4629      	mov	r1, r5
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff fd4e 	bl	8002414 <I2C_ITListenCplt>
 8002978:	e016      	b.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800297a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800297e:	d0f0      	beq.n	8002962 <I2C_Slave_ISR_DMA+0xa2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff fb07 	bl	8001f9a <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff fcc3 	bl	8002318 <I2C_ITSlaveSeqCplt>
 8002992:	e009      	b.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	2210      	movs	r2, #16
 8002998:	61da      	str	r2, [r3, #28]
 800299a:	e005      	b.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800299c:	f015 0f08 	tst.w	r5, #8
 80029a0:	d002      	beq.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
 80029a2:	f016 0f08 	tst.w	r6, #8
 80029a6:	d103      	bne.n	80029b0 <I2C_Slave_ISR_DMA+0xf0>
  __HAL_UNLOCK(hi2c);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80029ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80029b0:	4629      	mov	r1, r5
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff fcdf 	bl	8002376 <I2C_ITAddrCplt>
 80029b8:	e7f6      	b.n	80029a8 <I2C_Slave_ISR_DMA+0xe8>
  __HAL_LOCK(hi2c);
 80029ba:	2002      	movs	r0, #2
 80029bc:	e7f7      	b.n	80029ae <I2C_Slave_ISR_DMA+0xee>

080029be <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80029be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f000 8099 	beq.w	8002afa <I2C_Master_ISR_DMA+0x13c>
{
 80029c8:	b510      	push	{r4, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80029ce:	2301      	movs	r3, #1
 80029d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029d4:	f011 0f10 	tst.w	r1, #16
 80029d8:	d002      	beq.n	80029e0 <I2C_Master_ISR_DMA+0x22>
 80029da:	f012 0f10 	tst.w	r2, #16
 80029de:	d131      	bne.n	8002a44 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80029e4:	d05f      	beq.n	8002aa6 <I2C_Master_ISR_DMA+0xe8>
 80029e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80029ea:	d05c      	beq.n	8002aa6 <I2C_Master_ISR_DMA+0xe8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f4:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 80029f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d045      	beq.n	8002a8a <I2C_Master_ISR_DMA+0xcc>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2bff      	cmp	r3, #255	; 0xff
 8002a0c:	d92c      	bls.n	8002a68 <I2C_Master_ISR_DMA+0xaa>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0e:	23ff      	movs	r3, #255	; 0xff
 8002a10:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a16:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	9000      	str	r0, [sp, #0]
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff facc 	bl	8001fbc <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8002a24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a2e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b22      	cmp	r3, #34	; 0x22
 8002a36:	d022      	beq.n	8002a7e <I2C_Master_ISR_DMA+0xc0>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e00c      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a44:	6803      	ldr	r3, [r0, #0]
 8002a46:	2210      	movs	r2, #16
 8002a48:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a4c:	f043 0304 	orr.w	r3, r3, #4
 8002a50:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a52:	2112      	movs	r1, #18
 8002a54:	f7ff face 	bl	8001ff4 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7ff fa9e 	bl	8001f9a <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8002a64:	b002      	add	sp, #8
 8002a66:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8002a68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a6a:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a72:	d001      	beq.n	8002a78 <I2C_Master_ISR_DMA+0xba>
          xfermode = hi2c->XferOptions;
 8002a74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a76:	e7ce      	b.n	8002a16 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 8002a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7c:	e7cb      	b.n	8002a16 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a7e:	6822      	ldr	r2, [r4, #0]
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e7e9      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a92:	d103      	bne.n	8002a9c <I2C_Master_ISR_DMA+0xde>
        I2C_ITMasterSeqCplt(hi2c);
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7ff fc15 	bl	80022c4 <I2C_ITMasterSeqCplt>
 8002a9a:	e7e0      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a9c:	2140      	movs	r1, #64	; 0x40
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff fcee 	bl	8002480 <I2C_ITError>
 8002aa4:	e7db      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002aa6:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002aaa:	d01c      	beq.n	8002ae6 <I2C_Master_ISR_DMA+0x128>
 8002aac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002ab0:	d019      	beq.n	8002ae6 <I2C_Master_ISR_DMA+0x128>
    if (hi2c->XferCount == 0U)
 8002ab2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b98b      	cbnz	r3, 8002adc <I2C_Master_ISR_DMA+0x11e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002ac0:	d1cd      	bne.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002ac2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ac4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002ac8:	d104      	bne.n	8002ad4 <I2C_Master_ISR_DMA+0x116>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	e7c4      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
          I2C_ITMasterSeqCplt(hi2c);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7ff fbf5 	bl	80022c4 <I2C_ITMasterSeqCplt>
 8002ada:	e7c0      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002adc:	2140      	movs	r1, #64	; 0x40
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fcce 	bl	8002480 <I2C_ITError>
 8002ae4:	e7bb      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ae6:	f011 0f20 	tst.w	r1, #32
 8002aea:	d0b8      	beq.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
 8002aec:	f012 0f20 	tst.w	r2, #32
 8002af0:	d0b5      	beq.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff fe73 	bl	80027de <I2C_ITMasterCplt>
 8002af8:	e7b1      	b.n	8002a5e <I2C_Master_ISR_DMA+0xa0>
  __HAL_LOCK(hi2c);
 8002afa:	2002      	movs	r0, #2
}
 8002afc:	4770      	bx	lr

08002afe <I2C_DMAAbort>:
{
 8002afe:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b00:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002b02:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002b04:	2300      	movs	r3, #0
 8002b06:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002b08:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002b0a:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b60      	cmp	r3, #96	; 0x60
 8002b14:	d002      	beq.n	8002b1c <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8002b16:	f7ff fcb1 	bl	800247c <HAL_I2C_ErrorCallback>
}
 8002b1a:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b22:	f7ff fcac 	bl	800247e <HAL_I2C_AbortCpltCallback>
 8002b26:	e7f8      	b.n	8002b1a <I2C_DMAAbort+0x1c>

08002b28 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b28:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d124      	bne.n	8002b7c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b32:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d022      	beq.n	8002b80 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b40:	2324      	movs	r3, #36	; 0x24
 8002b42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b46:	6802      	ldr	r2, [r0, #0]
 8002b48:	6813      	ldr	r3, [r2, #0]
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b50:	6802      	ldr	r2, [r0, #0]
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b58:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	4319      	orrs	r1, r3
 8002b60:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b62:	6802      	ldr	r2, [r0, #0]
 8002b64:	6813      	ldr	r3, [r2, #0]
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002b80:	2002      	movs	r0, #2
  }
}
 8002b82:	4770      	bx	lr

08002b84 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d122      	bne.n	8002bd4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d020      	beq.n	8002bd8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002b96:	2301      	movs	r3, #1
 8002b98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9c:	2324      	movs	r3, #36	; 0x24
 8002b9e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba2:	6802      	ldr	r2, [r0, #0]
 8002ba4:	6813      	ldr	r3, [r2, #0]
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bb4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bb8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bba:	6802      	ldr	r2, [r0, #0]
 8002bbc:	6813      	ldr	r3, [r2, #0]
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002bd8:	2002      	movs	r0, #2
  }
}
 8002bda:	4770      	bx	lr

08002bdc <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f000 830d 	beq.w	80031fc <HAL_RCC_OscConfig+0x620>
{
 8002be2:	b570      	push	{r4, r5, r6, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be8:	6803      	ldr	r3, [r0, #0]
 8002bea:	f013 0f01 	tst.w	r3, #1
 8002bee:	d03b      	beq.n	8002c68 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bf0:	4bb5      	ldr	r3, [pc, #724]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d01e      	beq.n	8002c3a <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bfc:	4bb2      	ldr	r3, [pc, #712]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d068      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x106>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 8092 	bne.w	8002d3a <HAL_RCC_OscConfig+0x15e>
 8002c16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c1a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e05d      	b.n	8002cec <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c30:	4ba5      	ldr	r3, [pc, #660]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c38:	d0e6      	beq.n	8002c08 <HAL_RCC_OscConfig+0x2c>
 8002c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c42:	4ba1      	ldr	r3, [pc, #644]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2201      	movs	r2, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	420b      	tst	r3, r1
 8002c5e:	d003      	beq.n	8002c68 <HAL_RCC_OscConfig+0x8c>
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 82cc 	beq.w	8003200 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f013 0f02 	tst.w	r3, #2
 8002c6e:	f000 80c6 	beq.w	8002dfe <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c72:	4b95      	ldr	r3, [pc, #596]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f013 0f0c 	tst.w	r3, #12
 8002c7a:	f000 809c 	beq.w	8002db6 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c7e:	4b92      	ldr	r3, [pc, #584]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	f000 808f 	beq.w	8002daa <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80f3 	beq.w	8002e7a <HAL_RCC_OscConfig+0x29e>
 8002c94:	2201      	movs	r2, #1
 8002c96:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fe fa95 	bl	80011d8 <HAL_GetTick>
 8002cae:	4605      	mov	r5, r0
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b84      	ldr	r3, [pc, #528]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	2302      	movs	r3, #2
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2201      	movs	r2, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	420b      	tst	r3, r1
 8002cd0:	f040 80c4 	bne.w	8002e5c <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fa80 	bl	80011d8 <HAL_GetTick>
 8002cd8:	1b40      	subs	r0, r0, r5
 8002cda:	2802      	cmp	r0, #2
 8002cdc:	d9e8      	bls.n	8002cb0 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002cde:	2003      	movs	r0, #3
 8002ce0:	e295      	b.n	800320e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce2:	4a79      	ldr	r2, [pc, #484]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cec:	4a76      	ldr	r2, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002cee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002cf0:	f023 030f 	bic.w	r3, r3, #15
 8002cf4:	68a1      	ldr	r1, [r4, #8]
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfa:	6863      	ldr	r3, [r4, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d036      	beq.n	8002d6e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002d00:	f7fe fa6a 	bl	80011d8 <HAL_GetTick>
 8002d04:	4605      	mov	r5, r0
 8002d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b6e      	ldr	r3, [pc, #440]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	420b      	tst	r3, r1
 8002d2a:	d19d      	bne.n	8002c68 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fa54 	bl	80011d8 <HAL_GetTick>
 8002d30:	1b40      	subs	r0, r0, r5
 8002d32:	2864      	cmp	r0, #100	; 0x64
 8002d34:	d9e7      	bls.n	8002d06 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002d36:	2003      	movs	r0, #3
 8002d38:	e269      	b.n	800320e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCC_OscConfig+0x178>
 8002d40:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e7cb      	b.n	8002cec <HAL_RCC_OscConfig+0x110>
 8002d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d58:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e7be      	b.n	8002cec <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fa33 	bl	80011d8 <HAL_GetTick>
 8002d72:	4605      	mov	r5, r0
 8002d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d78:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7c:	4b52      	ldr	r3, [pc, #328]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2201      	movs	r2, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	420b      	tst	r3, r1
 8002d98:	f43f af66 	beq.w	8002c68 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe fa1c 	bl	80011d8 <HAL_GetTick>
 8002da0:	1b40      	subs	r0, r0, r5
 8002da2:	2864      	cmp	r0, #100	; 0x64
 8002da4:	d9e6      	bls.n	8002d74 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8002da6:	2003      	movs	r0, #3
 8002da8:	e231      	b.n	800320e <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002db2:	f47f af6b 	bne.w	8002c8c <HAL_RCC_OscConfig+0xb0>
 8002db6:	2302      	movs	r3, #2
 8002db8:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbc:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2201      	movs	r2, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	420b      	tst	r3, r1
 8002dd6:	d004      	beq.n	8002de2 <HAL_RCC_OscConfig+0x206>
 8002dd8:	6923      	ldr	r3, [r4, #16]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002dde:	2001      	movs	r0, #1
 8002de0:	e215      	b.n	800320e <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4839      	ldr	r0, [pc, #228]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002de4:	6803      	ldr	r3, [r0, #0]
 8002de6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002dea:	6961      	ldr	r1, [r4, #20]
 8002dec:	22f8      	movs	r2, #248	; 0xf8
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	f013 0f08 	tst.w	r3, #8
 8002e04:	f000 808c 	beq.w	8002f20 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e08:	69a3      	ldr	r3, [r4, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d060      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2f4>
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_RCC_OscConfig+0x2f0>)
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7fe f9da 	bl	80011d8 <HAL_GetTick>
 8002e24:	4605      	mov	r5, r0
 8002e26:	2302      	movs	r3, #2
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	fa93 f2a3 	rbit	r2, r3
 8002e30:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002e36:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2201      	movs	r2, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	420b      	tst	r3, r1
 8002e4c:	d168      	bne.n	8002f20 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7fe f9c3 	bl	80011d8 <HAL_GetTick>
 8002e52:	1b40      	subs	r0, r0, r5
 8002e54:	2802      	cmp	r0, #2
 8002e56:	d9e6      	bls.n	8002e26 <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8002e58:	2003      	movs	r0, #3
 8002e5a:	e1d8      	b.n	800320e <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	481a      	ldr	r0, [pc, #104]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002e5e:	6803      	ldr	r3, [r0, #0]
 8002e60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e64:	6961      	ldr	r1, [r4, #20]
 8002e66:	22f8      	movs	r2, #248	; 0xf8
 8002e68:	fa92 f2a2 	rbit	r2, r2
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	fa01 f202 	lsl.w	r2, r1, r2
 8002e74:	4313      	orrs	r3, r2
 8002e76:	6003      	str	r3, [r0, #0]
 8002e78:	e7c1      	b.n	8002dfe <HAL_RCC_OscConfig+0x222>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e92:	f7fe f9a1 	bl	80011d8 <HAL_GetTick>
 8002e96:	4605      	mov	r5, r0
 8002e98:	2302      	movs	r3, #2
 8002e9a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_OscConfig+0x2ec>)
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	420b      	tst	r3, r1
 8002eb8:	d0a1      	beq.n	8002dfe <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe f98d 	bl	80011d8 <HAL_GetTick>
 8002ebe:	1b40      	subs	r0, r0, r5
 8002ec0:	2802      	cmp	r0, #2
 8002ec2:	d9e9      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	e1a2      	b.n	800320e <HAL_RCC_OscConfig+0x632>
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	10908120 	.word	0x10908120
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed6:	fab2 f282 	clz	r2, r2
 8002eda:	4bbc      	ldr	r3, [pc, #752]	; (80031cc <HAL_RCC_OscConfig+0x5f0>)
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f978 	bl	80011d8 <HAL_GetTick>
 8002ee8:	4605      	mov	r5, r0
 8002eea:	2302      	movs	r3, #2
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4ab5      	ldr	r2, [pc, #724]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8002efa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2201      	movs	r2, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	420b      	tst	r3, r1
 8002f10:	d006      	beq.n	8002f20 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f12:	f7fe f961 	bl	80011d8 <HAL_GetTick>
 8002f16:	1b40      	subs	r0, r0, r5
 8002f18:	2802      	cmp	r0, #2
 8002f1a:	d9e6      	bls.n	8002eea <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	e176      	b.n	800320e <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	f013 0f04 	tst.w	r3, #4
 8002f26:	f000 80b3 	beq.w	8003090 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4ba9      	ldr	r3, [pc, #676]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f32:	d120      	bne.n	8002f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	4ba6      	ldr	r3, [pc, #664]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f3c:	61da      	str	r2, [r3, #28]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f48:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4ba2      	ldr	r3, [pc, #648]	; (80031d4 <HAL_RCC_OscConfig+0x5f8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f52:	d012      	beq.n	8002f7a <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	68e3      	ldr	r3, [r4, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d023      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x3c6>
 8002f5a:	bb73      	cbnz	r3, 8002fba <HAL_RCC_OscConfig+0x3de>
 8002f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f60:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	621a      	str	r2, [r3, #32]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	621a      	str	r2, [r3, #32]
 8002f74:	e01a      	b.n	8002fac <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2500      	movs	r5, #0
 8002f78:	e7e7      	b.n	8002f4a <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7a:	4a96      	ldr	r2, [pc, #600]	; (80031d4 <HAL_RCC_OscConfig+0x5f8>)
 8002f7c:	6813      	ldr	r3, [r2, #0]
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f82:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f84:	f7fe f928 	bl	80011d8 <HAL_GetTick>
 8002f88:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b92      	ldr	r3, [pc, #584]	; (80031d4 <HAL_RCC_OscConfig+0x5f8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f92:	d1df      	bne.n	8002f54 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7fe f920 	bl	80011d8 <HAL_GetTick>
 8002f98:	1b80      	subs	r0, r0, r6
 8002f9a:	2864      	cmp	r0, #100	; 0x64
 8002f9c:	d9f5      	bls.n	8002f8a <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8002f9e:	2003      	movs	r0, #3
 8002fa0:	e135      	b.n	800320e <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa2:	4a8b      	ldr	r2, [pc, #556]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8002fa4:	6a13      	ldr	r3, [r2, #32]
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fac:	68e3      	ldr	r3, [r4, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d041      	beq.n	8003036 <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe f911 	bl	80011d8 <HAL_GetTick>
 8002fb6:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb8:	e02b      	b.n	8003012 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3f6>
 8002fbe:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	621a      	str	r2, [r3, #32]
 8002fd0:	e7ec      	b.n	8002fac <HAL_RCC_OscConfig+0x3d0>
 8002fd2:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	f042 0204 	orr.w	r2, r2, #4
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	6a1a      	ldr	r2, [r3, #32]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	621a      	str	r2, [r3, #32]
 8002fe4:	e7e2      	b.n	8002fac <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4b7a      	ldr	r3, [pc, #488]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8002fe8:	6a19      	ldr	r1, [r3, #32]
 8002fea:	2302      	movs	r3, #2
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	4219      	tst	r1, r3
 8003000:	d145      	bne.n	800308e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe f8e9 	bl	80011d8 <HAL_GetTick>
 8003006:	1b80      	subs	r0, r0, r6
 8003008:	f241 3388 	movw	r3, #5000	; 0x1388
 800300c:	4298      	cmp	r0, r3
 800300e:	f200 80f9 	bhi.w	8003204 <HAL_RCC_OscConfig+0x628>
 8003012:	2302      	movs	r3, #2
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d0dd      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x40a>
 800302a:	2302      	movs	r3, #2
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8003032:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003034:	e7d9      	b.n	8002fea <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe f8cf 	bl	80011d8 <HAL_GetTick>
 800303a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	e015      	b.n	800306a <HAL_RCC_OscConfig+0x48e>
 800303e:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8003040:	6a19      	ldr	r1, [r3, #32]
 8003042:	2302      	movs	r3, #2
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2201      	movs	r2, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	4219      	tst	r1, r3
 8003058:	d019      	beq.n	800308e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe f8bd 	bl	80011d8 <HAL_GetTick>
 800305e:	1b80      	subs	r0, r0, r6
 8003060:	f241 3388 	movw	r3, #5000	; 0x1388
 8003064:	4298      	cmp	r0, r3
 8003066:	f200 80cf 	bhi.w	8003208 <HAL_RCC_OscConfig+0x62c>
 800306a:	2302      	movs	r3, #2
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d0dd      	beq.n	800303e <HAL_RCC_OscConfig+0x462>
 8003082:	2302      	movs	r3, #2
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	4b51      	ldr	r3, [pc, #324]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 800308a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800308c:	e7d9      	b.n	8003042 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800308e:	bbb5      	cbnz	r5, 80030fe <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	69e3      	ldr	r3, [r4, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80ba 	beq.w	800320c <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003098:	4a4d      	ldr	r2, [pc, #308]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 800309a:	6852      	ldr	r2, [r2, #4]
 800309c:	f002 020c 	and.w	r2, r2, #12
 80030a0:	2a08      	cmp	r2, #8
 80030a2:	f000 8099 	beq.w	80031d8 <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d02f      	beq.n	800310a <HAL_RCC_OscConfig+0x52e>
 80030aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ae:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe f888 	bl	80011d8 <HAL_GetTick>
 80030c8:	4604      	mov	r4, r0
 80030ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ce:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2201      	movs	r2, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	4219      	tst	r1, r3
 80030ee:	d06b      	beq.n	80031c8 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe f872 	bl	80011d8 <HAL_GetTick>
 80030f4:	1b00      	subs	r0, r0, r4
 80030f6:	2802      	cmp	r0, #2
 80030f8:	d9e7      	bls.n	80030ca <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 80030fa:	2003      	movs	r0, #3
 80030fc:	e087      	b.n	800320e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4a34      	ldr	r2, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8003100:	69d3      	ldr	r3, [r2, #28]
 8003102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003106:	61d3      	str	r3, [r2, #28]
 8003108:	e7c2      	b.n	8003090 <HAL_RCC_OscConfig+0x4b4>
 800310a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800310e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800311a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003124:	f7fe f858 	bl	80011d8 <HAL_GetTick>
 8003128:	4605      	mov	r5, r0
 800312a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003132:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	4219      	tst	r1, r3
 800314e:	d006      	beq.n	800315e <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe f842 	bl	80011d8 <HAL_GetTick>
 8003154:	1b40      	subs	r0, r0, r5
 8003156:	2802      	cmp	r0, #2
 8003158:	d9e7      	bls.n	800312a <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 800315a:	2003      	movs	r0, #3
 800315c:	e057      	b.n	800320e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315e:	491c      	ldr	r1, [pc, #112]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 8003160:	684b      	ldr	r3, [r1, #4]
 8003162:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003166:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003168:	6a20      	ldr	r0, [r4, #32]
 800316a:	4302      	orrs	r2, r0
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
 8003170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003174:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800318a:	f7fe f825 	bl	80011d8 <HAL_GetTick>
 800318e:	4604      	mov	r4, r0
 8003190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003194:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_OscConfig+0x5f4>)
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2201      	movs	r2, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	4219      	tst	r1, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe f80f 	bl	80011d8 <HAL_GetTick>
 80031ba:	1b00      	subs	r0, r0, r4
 80031bc:	2802      	cmp	r0, #2
 80031be:	d9e7      	bls.n	8003190 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 80031c0:	2003      	movs	r0, #3
 80031c2:	e024      	b.n	800320e <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 80031c4:	2000      	movs	r0, #0
 80031c6:	e022      	b.n	800320e <HAL_RCC_OscConfig+0x632>
 80031c8:	2000      	movs	r0, #0
 80031ca:	e020      	b.n	800320e <HAL_RCC_OscConfig+0x632>
 80031cc:	10908120 	.word	0x10908120
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d01a      	beq.n	8003212 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_RCC_OscConfig+0x640>)
 80031de:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031e0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80031e4:	6a22      	ldr	r2, [r4, #32]
 80031e6:	4291      	cmp	r1, r2
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 80031ea:	2001      	movs	r0, #1
 80031ec:	e00f      	b.n	800320e <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031ee:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 80031f8:	2001      	movs	r0, #1
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 80031fc:	2001      	movs	r0, #1
}
 80031fe:	4770      	bx	lr
        return HAL_ERROR;
 8003200:	2001      	movs	r0, #1
 8003202:	e004      	b.n	800320e <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8003204:	2003      	movs	r0, #3
 8003206:	e002      	b.n	800320e <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8003208:	2003      	movs	r0, #3
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 800320c:	2000      	movs	r0, #0
}
 800320e:	b002      	add	sp, #8
 8003210:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003212:	2001      	movs	r0, #1
 8003214:	e7fb      	b.n	800320e <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8003216:	2000      	movs	r0, #0
 8003218:	e7f9      	b.n	800320e <HAL_RCC_OscConfig+0x632>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_RCC_GetSysClockFreq+0x64>)
 8003222:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003224:	f003 020c 	and.w	r2, r3, #12
 8003228:	2a04      	cmp	r2, #4
 800322a:	d003      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x14>
 800322c:	2a08      	cmp	r2, #8
 800322e:	d003      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x18>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4815      	ldr	r0, [pc, #84]	; (8003288 <HAL_RCC_GetSysClockFreq+0x68>)
      break;
    }
  }
  return sysclockfreq;
}
 8003232:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003234:	4815      	ldr	r0, [pc, #84]	; (800328c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003236:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003238:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 800323c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003240:	fa92 f2a2 	rbit	r2, r2
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	fa21 f202 	lsr.w	r2, r1, r2
 800324c:	4910      	ldr	r1, [pc, #64]	; (8003290 <HAL_RCC_GetSysClockFreq+0x70>)
 800324e:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <HAL_RCC_GetSysClockFreq+0x64>)
 8003252:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003254:	f002 020f 	and.w	r2, r2, #15
 8003258:	210f      	movs	r1, #15
 800325a:	fa91 f1a1 	rbit	r1, r1
 800325e:	fab1 f181 	clz	r1, r1
 8003262:	40ca      	lsrs	r2, r1
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_RCC_GetSysClockFreq+0x74>)
 8003266:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800326c:	d005      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x5a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003270:	fbb3 f3f2 	udiv	r3, r3, r2
 8003274:	fb00 f003 	mul.w	r0, r0, r3
 8003278:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <HAL_RCC_GetSysClockFreq+0x78>)
 800327c:	fb03 f000 	mul.w	r0, r3, r0
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	007a1200 	.word	0x007a1200
 800328c:	01e84800 	.word	0x01e84800
 8003290:	08006c14 	.word	0x08006c14
 8003294:	08006c24 	.word	0x08006c24
 8003298:	003d0900 	.word	0x003d0900

0800329c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800329c:	2800      	cmp	r0, #0
 800329e:	f000 80c1 	beq.w	8003424 <HAL_RCC_ClockConfig+0x188>
{
 80032a2:	b570      	push	{r4, r5, r6, lr}
 80032a4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a6:	4b61      	ldr	r3, [pc, #388]	; (800342c <HAL_RCC_ClockConfig+0x190>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	428b      	cmp	r3, r1
 80032b0:	d20c      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4a5e      	ldr	r2, [pc, #376]	; (800342c <HAL_RCC_ClockConfig+0x190>)
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	f023 0307 	bic.w	r3, r3, #7
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	428b      	cmp	r3, r1
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80032c8:	2001      	movs	r0, #1
}
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	f013 0f02 	tst.w	r3, #2
 80032d2:	d006      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4a56      	ldr	r2, [pc, #344]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 80032d6:	6853      	ldr	r3, [r2, #4]
 80032d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032dc:	68a0      	ldr	r0, [r4, #8]
 80032de:	4303      	orrs	r3, r0
 80032e0:	6053      	str	r3, [r2, #4]
 80032e2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f013 0f01 	tst.w	r3, #1
 80032ea:	d05a      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d02d      	beq.n	800334e <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d040      	beq.n	8003378 <HAL_RCC_ClockConfig+0xdc>
 80032f6:	2202      	movs	r2, #2
 80032f8:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	4a4c      	ldr	r2, [pc, #304]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 80032fe:	6810      	ldr	r0, [r2, #0]
 8003300:	2202      	movs	r2, #2
 8003302:	fa92 f2a2 	rbit	r2, r2
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	f002 021f 	and.w	r2, r2, #31
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	4210      	tst	r0, r2
 8003316:	f000 8087 	beq.w	8003428 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4945      	ldr	r1, [pc, #276]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 800331c:	684a      	ldr	r2, [r1, #4]
 800331e:	f022 0203 	bic.w	r2, r2, #3
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003326:	f7fd ff57 	bl	80011d8 <HAL_GetTick>
 800332a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332c:	4b40      	ldr	r3, [pc, #256]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	6862      	ldr	r2, [r4, #4]
 8003336:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800333a:	d032      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fd ff4c 	bl	80011d8 <HAL_GetTick>
 8003340:	1b80      	subs	r0, r0, r6
 8003342:	f241 3388 	movw	r3, #5000	; 0x1388
 8003346:	4298      	cmp	r0, r3
 8003348:	d9f0      	bls.n	800332c <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800334a:	2003      	movs	r0, #3
 800334c:	e7bd      	b.n	80032ca <HAL_RCC_ClockConfig+0x2e>
 800334e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003352:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4a36      	ldr	r2, [pc, #216]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 8003358:	6810      	ldr	r0, [r2, #0]
 800335a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	fab2 f282 	clz	r2, r2
 8003366:	f002 021f 	and.w	r2, r2, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f202 	lsl.w	r2, r1, r2
 8003370:	4202      	tst	r2, r0
 8003372:	d1d2      	bne.n	800331a <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8003374:	2001      	movs	r0, #1
 8003376:	e7a8      	b.n	80032ca <HAL_RCC_ClockConfig+0x2e>
 8003378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003380:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 8003382:	6810      	ldr	r0, [r2, #0]
 8003384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003388:	fa92 f2a2 	rbit	r2, r2
 800338c:	fab2 f282 	clz	r2, r2
 8003390:	f002 021f 	and.w	r2, r2, #31
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	4210      	tst	r0, r2
 800339c:	d1bd      	bne.n	800331a <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 800339e:	2001      	movs	r0, #1
 80033a0:	e793      	b.n	80032ca <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_RCC_ClockConfig+0x190>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	42ab      	cmp	r3, r5
 80033ac:	d90c      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4a1f      	ldr	r2, [pc, #124]	; (800342c <HAL_RCC_ClockConfig+0x190>)
 80033b0:	6813      	ldr	r3, [r2, #0]
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	432b      	orrs	r3, r5
 80033b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	42ab      	cmp	r3, r5
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 80033c4:	2001      	movs	r0, #1
 80033c6:	e780      	b.n	80032ca <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	f013 0f04 	tst.w	r3, #4
 80033ce:	d006      	beq.n	80033de <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4a17      	ldr	r2, [pc, #92]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 80033d2:	6853      	ldr	r3, [r2, #4]
 80033d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033d8:	68e1      	ldr	r1, [r4, #12]
 80033da:	430b      	orrs	r3, r1
 80033dc:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	f013 0f08 	tst.w	r3, #8
 80033e4:	d007      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e6:	4a12      	ldr	r2, [pc, #72]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 80033e8:	6853      	ldr	r3, [r2, #4]
 80033ea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80033ee:	6921      	ldr	r1, [r4, #16]
 80033f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033f4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033f6:	f7ff ff13 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_RCC_ClockConfig+0x194>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003402:	22f0      	movs	r2, #240	; 0xf0
 8003404:	fa92 f2a2 	rbit	r2, r2
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	40d3      	lsrs	r3, r2
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x198>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	40d8      	lsrs	r0, r3
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCC_ClockConfig+0x19c>)
 8003416:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCC_ClockConfig+0x1a0>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	f7fd fc14 	bl	8000c48 <HAL_InitTick>
  return HAL_OK;
 8003420:	2000      	movs	r0, #0
 8003422:	e752      	b.n	80032ca <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003424:	2001      	movs	r0, #1
}
 8003426:	4770      	bx	lr
        return HAL_ERROR;
 8003428:	2001      	movs	r0, #1
 800342a:	e74e      	b.n	80032ca <HAL_RCC_ClockConfig+0x2e>
 800342c:	40022000 	.word	0x40022000
 8003430:	40021000 	.word	0x40021000
 8003434:	08006bfc 	.word	0x08006bfc
 8003438:	20000000 	.word	0x20000000
 800343c:	20000008 	.word	0x20000008

08003440 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <HAL_RCC_GetHCLKFreq+0x8>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800344e:	f7ff fff7 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800345a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800345e:	fa92 f2a2 	rbit	r2, r2
 8003462:	fab2 f282 	clz	r2, r2
 8003466:	40d3      	lsrs	r3, r2
 8003468:	4a02      	ldr	r2, [pc, #8]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x28>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800346c:	40d8      	lsrs	r0, r3
 800346e:	bd08      	pop	{r3, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08006c0c 	.word	0x08006c0c

08003478 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003478:	230f      	movs	r3, #15
 800347a:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_GetClockConfig+0x34>)
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	f002 0203 	and.w	r2, r2, #3
 8003484:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800348c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003494:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800349e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCC_GetClockConfig+0x38>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	600b      	str	r3, [r1, #0]
}
 80034aa:	4770      	bx	lr
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40022000 	.word	0x40022000

080034b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b083      	sub	sp, #12
 80034b8:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034ba:	6803      	ldr	r3, [r0, #0]
 80034bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034c0:	d048      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b83      	ldr	r3, [pc, #524]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80034ca:	f040 80b4 	bne.w	8003636 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	4b80      	ldr	r3, [pc, #512]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034d6:	61da      	str	r2, [r3, #28]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034e2:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b7b      	ldr	r3, [pc, #492]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034ec:	f000 80a5 	beq.w	800363a <HAL_RCCEx_PeriphCLKConfig+0x186>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f0:	4b77      	ldr	r3, [pc, #476]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034f8:	d022      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80034fa:	6862      	ldr	r2, [r4, #4]
 80034fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003500:	429a      	cmp	r2, r3
 8003502:	d01d      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003504:	4872      	ldr	r0, [pc, #456]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003506:	6a01      	ldr	r1, [r0, #32]
 8003508:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 800350c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003510:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	4f6f      	ldr	r7, [pc, #444]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800351a:	443a      	add	r2, r7
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	f04f 0c01 	mov.w	ip, #1
 8003522:	f8c2 c000 	str.w	ip, [r2]
 8003526:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	443b      	add	r3, r7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003536:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003538:	f011 0f01 	tst.w	r1, #1
 800353c:	f040 8092 	bne.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003540:	4a63      	ldr	r2, [pc, #396]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003542:	6a13      	ldr	r3, [r2, #32]
 8003544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003548:	6861      	ldr	r1, [r4, #4]
 800354a:	430b      	orrs	r3, r1
 800354c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800354e:	2d00      	cmp	r5, #0
 8003550:	f040 80b4 	bne.w	80036bc <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	f013 0f01 	tst.w	r3, #1
 800355a:	d006      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355c:	4a5c      	ldr	r2, [pc, #368]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800355e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003560:	f023 0303 	bic.w	r3, r3, #3
 8003564:	68a1      	ldr	r1, [r4, #8]
 8003566:	430b      	orrs	r3, r1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	f013 0f20 	tst.w	r3, #32
 8003570:	d006      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003572:	4a57      	ldr	r2, [pc, #348]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003574:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003576:	f023 0310 	bic.w	r3, r3, #16
 800357a:	68e1      	ldr	r1, [r4, #12]
 800357c:	430b      	orrs	r3, r1
 800357e:	6313      	str	r3, [r2, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003586:	d006      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003588:	4a51      	ldr	r2, [pc, #324]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800358a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800358c:	f023 0320 	bic.w	r3, r3, #32
 8003590:	6921      	ldr	r1, [r4, #16]
 8003592:	430b      	orrs	r3, r1
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800359c:	d006      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359e:	4a4c      	ldr	r2, [pc, #304]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80035a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a6:	6961      	ldr	r1, [r4, #20]
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035b2:	d006      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035b4:	4a46      	ldr	r2, [pc, #280]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80035b6:	6853      	ldr	r3, [r2, #4]
 80035b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035bc:	69e1      	ldr	r1, [r4, #28]
 80035be:	430b      	orrs	r3, r1
 80035c0:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035c8:	d006      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80035ca:	4a41      	ldr	r2, [pc, #260]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80035cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80035ce:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80035d2:	69a1      	ldr	r1, [r4, #24]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80035de:	d006      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035e0:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80035e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e8:	6a21      	ldr	r1, [r4, #32]
 80035ea:	430b      	orrs	r3, r1
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80035f4:	d006      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035f6:	4a36      	ldr	r2, [pc, #216]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80035f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80035fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800360a:	d006      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800360e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003614:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003616:	430b      	orrs	r3, r1
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003620:	d053      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003622:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003624:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800362a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800362c:	430b      	orrs	r3, r1
 800362e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003630:	2000      	movs	r0, #0
}
 8003632:	b003      	add	sp, #12
 8003634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2500      	movs	r5, #0
 8003638:	e754      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363a:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800363c:	6813      	ldr	r3, [r2, #0]
 800363e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003642:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003644:	f7fd fdc8 	bl	80011d8 <HAL_GetTick>
 8003648:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003652:	f47f af4d 	bne.w	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fd fdbf 	bl	80011d8 <HAL_GetTick>
 800365a:	1b80      	subs	r0, r0, r6
 800365c:	2864      	cmp	r0, #100	; 0x64
 800365e:	d9f4      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 8003660:	2003      	movs	r0, #3
 8003662:	e7e6      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        tickstart = HAL_GetTick();
 8003664:	f7fd fdb8 	bl	80011d8 <HAL_GetTick>
 8003668:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	e015      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800366c:	4b18      	ldr	r3, [pc, #96]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800366e:	6a19      	ldr	r1, [r3, #32]
 8003670:	2302      	movs	r3, #2
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2201      	movs	r2, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	420b      	tst	r3, r1
 8003686:	f47f af5b 	bne.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fd fda5 	bl	80011d8 <HAL_GetTick>
 800368e:	1b80      	subs	r0, r0, r6
 8003690:	f241 3388 	movw	r3, #5000	; 0x1388
 8003694:	4298      	cmp	r0, r3
 8003696:	d816      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003698:	2302      	movs	r3, #2
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d0dd      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036b0:	2302      	movs	r3, #2
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80036b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036ba:	e7d9      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80036bc:	69d3      	ldr	r3, [r2, #28]
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	61d3      	str	r3, [r2, #28]
 80036c4:	e746      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 80036c6:	2003      	movs	r0, #3
 80036c8:	e7b3      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  return HAL_OK;
 80036ca:	2000      	movs	r0, #0
 80036cc:	e7b1      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40007000 	.word	0x40007000
 80036d8:	10908100 	.word	0x10908100

080036dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036e0:	6802      	ldr	r2, [r0, #0]
 80036e2:	68d3      	ldr	r3, [r2, #12]
 80036e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036e8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80036ea:	f7fd fd75 	bl	80011d8 <HAL_GetTick>
 80036ee:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f013 0f20 	tst.w	r3, #32
 80036f8:	d107      	bne.n	800370a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036fa:	f7fd fd6d 	bl	80011d8 <HAL_GetTick>
 80036fe:	1b40      	subs	r0, r0, r5
 8003700:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003704:	d9f4      	bls.n	80036f0 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8003706:	2003      	movs	r0, #3
 8003708:	e000      	b.n	800370c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800370a:	2000      	movs	r0, #0
}
 800370c:	bd38      	pop	{r3, r4, r5, pc}

0800370e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800370e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003718:	d001      	beq.n	800371e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800371a:	2000      	movs	r0, #0
}
 800371c:	bd38      	pop	{r3, r4, r5, pc}
 800371e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003720:	f04f 32ff 	mov.w	r2, #4294967295
 8003724:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003726:	f7fd fd57 	bl	80011d8 <HAL_GetTick>
 800372a:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003734:	d107      	bne.n	8003746 <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003736:	f7fd fd4f 	bl	80011d8 <HAL_GetTick>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003740:	d9f4      	bls.n	800372c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8003742:	2003      	movs	r0, #3
 8003744:	e7ea      	b.n	800371c <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8003746:	2000      	movs	r0, #0
 8003748:	e7e8      	b.n	800371c <RTC_EnterInitMode+0xe>

0800374a <HAL_RTC_Init>:
{
 800374a:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800374c:	2800      	cmp	r0, #0
 800374e:	d05c      	beq.n	800380a <HAL_RTC_Init+0xc0>
 8003750:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003752:	7f43      	ldrb	r3, [r0, #29]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d040      	beq.n	80037da <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	22ca      	movs	r2, #202	; 0xca
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	2253      	movs	r2, #83	; 0x53
 8003766:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff ffd0 	bl	800370e <RTC_EnterInitMode>
 800376e:	4605      	mov	r5, r0
 8003770:	2800      	cmp	r0, #0
 8003772:	d136      	bne.n	80037e2 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	6893      	ldr	r3, [r2, #8]
 8003778:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800377c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003780:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003782:	6821      	ldr	r1, [r4, #0]
 8003784:	688a      	ldr	r2, [r1, #8]
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	6920      	ldr	r0, [r4, #16]
 800378a:	4303      	orrs	r3, r0
 800378c:	6960      	ldr	r0, [r4, #20]
 800378e:	4303      	orrs	r3, r0
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	68e2      	ldr	r2, [r4, #12]
 8003798:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	6913      	ldr	r3, [r2, #16]
 800379e:	68a1      	ldr	r1, [r4, #8]
 80037a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80037a4:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	68d3      	ldr	r3, [r2, #12]
 80037aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ae:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f013 0f20 	tst.w	r3, #32
 80037b8:	d01b      	beq.n	80037f2 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037c4:	6822      	ldr	r2, [r4, #0]
 80037c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80037c8:	69a1      	ldr	r1, [r4, #24]
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	22ff      	movs	r2, #255	; 0xff
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80037d4:	2301      	movs	r3, #1
 80037d6:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80037d8:	e009      	b.n	80037ee <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 80037da:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80037dc:	f7fd f99c 	bl	8000b18 <HAL_RTC_MspInit>
 80037e0:	e7ba      	b.n	8003758 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	22ff      	movs	r2, #255	; 0xff
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037e8:	2304      	movs	r3, #4
 80037ea:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80037ec:	2501      	movs	r5, #1
}
 80037ee:	4628      	mov	r0, r5
 80037f0:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037f2:	4620      	mov	r0, r4
 80037f4:	f7ff ff72 	bl	80036dc <HAL_RTC_WaitForSynchro>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d0de      	beq.n	80037ba <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003802:	2304      	movs	r3, #4
 8003804:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003806:	2501      	movs	r5, #1
 8003808:	e7f1      	b.n	80037ee <HAL_RTC_Init+0xa4>
    return HAL_ERROR;
 800380a:	2501      	movs	r5, #1
 800380c:	e7ef      	b.n	80037ee <HAL_RTC_Init+0xa4>

0800380e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800380e:	0903      	lsrs	r3, r0, #4
 8003810:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003814:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8003816:	f000 000f 	and.w	r0, r0, #15
 800381a:	4410      	add	r0, r2
}
 800381c:	b2c0      	uxtb	r0, r0
 800381e:	4770      	bx	lr

08003820 <HAL_RTC_GetTime>:
{
 8003820:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003822:	6803      	ldr	r3, [r0, #0]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003828:	6803      	ldr	r3, [r0, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003830:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003832:	6803      	ldr	r3, [r0, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800383a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800383e:	0c1d      	lsrs	r5, r3, #16
 8003840:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8003844:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003846:	f3c3 2606 	ubfx	r6, r3, #8, #7
 800384a:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800384c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8003850:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003852:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8003856:	70cd      	strb	r5, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8003858:	b95a      	cbnz	r2, 8003872 <HAL_RTC_GetTime+0x52>
 800385a:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800385c:	f7ff ffd7 	bl	800380e <RTC_Bcd2ToByte>
 8003860:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003862:	4630      	mov	r0, r6
 8003864:	f7ff ffd3 	bl	800380e <RTC_Bcd2ToByte>
 8003868:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800386a:	4620      	mov	r0, r4
 800386c:	f7ff ffcf 	bl	800380e <RTC_Bcd2ToByte>
 8003870:	70a8      	strb	r0, [r5, #2]
}
 8003872:	2000      	movs	r0, #0
 8003874:	bd70      	pop	{r4, r5, r6, pc}

08003876 <HAL_RTC_GetDate>:
{
 8003876:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003878:	6803      	ldr	r3, [r0, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003880:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003884:	0c18      	lsrs	r0, r3, #16
 8003886:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003888:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800388c:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800388e:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8003892:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003894:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003898:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800389a:	b95a      	cbnz	r2, 80038b4 <HAL_RTC_GetDate+0x3e>
 800389c:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800389e:	f7ff ffb6 	bl	800380e <RTC_Bcd2ToByte>
 80038a2:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80038a4:	4630      	mov	r0, r6
 80038a6:	f7ff ffb2 	bl	800380e <RTC_Bcd2ToByte>
 80038aa:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80038ac:	4628      	mov	r0, r5
 80038ae:	f7ff ffae 	bl	800380e <RTC_Bcd2ToByte>
 80038b2:	70a0      	strb	r0, [r4, #2]
}
 80038b4:	2000      	movs	r0, #0
 80038b6:	bd70      	pop	{r4, r5, r6, pc}

080038b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	4605      	mov	r5, r0
 80038bc:	460f      	mov	r7, r1
 80038be:	4616      	mov	r6, r2
 80038c0:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	ea37 0303 	bics.w	r3, r7, r3
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	42b3      	cmp	r3, r6
 80038d2:	d037      	beq.n	8003944 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80038d8:	d0f3      	beq.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80038da:	f7fd fc7d 	bl	80011d8 <HAL_GetTick>
 80038de:	9b06      	ldr	r3, [sp, #24]
 80038e0:	1ac0      	subs	r0, r0, r3
 80038e2:	42a0      	cmp	r0, r4
 80038e4:	d201      	bcs.n	80038ea <SPI_WaitFlagStateUntilTimeout+0x32>
 80038e6:	2c00      	cmp	r4, #0
 80038e8:	d1eb      	bne.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ea:	682a      	ldr	r2, [r5, #0]
 80038ec:	6853      	ldr	r3, [r2, #4]
 80038ee:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80038f2:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f4:	686b      	ldr	r3, [r5, #4]
 80038f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038fa:	d00b      	beq.n	8003914 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d014      	beq.n	800392e <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003904:	2301      	movs	r3, #1
 8003906:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800390a:	2300      	movs	r3, #0
 800390c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003910:	2003      	movs	r0, #3
 8003912:	e018      	b.n	8003946 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003914:	68ab      	ldr	r3, [r5, #8]
 8003916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391a:	d002      	beq.n	8003922 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800391c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003920:	d1ec      	bne.n	80038fc <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8003922:	682a      	ldr	r2, [r5, #0]
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e7e6      	b.n	80038fc <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 800392e:	682a      	ldr	r2, [r5, #0]
 8003930:	6813      	ldr	r3, [r2, #0]
 8003932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	682a      	ldr	r2, [r5, #0]
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e7df      	b.n	8003904 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8003944:	2000      	movs	r0, #0
}
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003948 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	4607      	mov	r7, r0
 800394c:	460c      	mov	r4, r1
 800394e:	4615      	mov	r5, r2
 8003950:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8003952:	e002      	b.n	800395a <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8003954:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003958:	d10b      	bne.n	8003972 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	6893      	ldr	r3, [r2, #8]
 800395e:	4023      	ands	r3, r4
 8003960:	42ab      	cmp	r3, r5
 8003962:	d03b      	beq.n	80039dc <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003964:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8003968:	d1f4      	bne.n	8003954 <SPI_WaitFifoStateUntilTimeout+0xc>
 800396a:	2d00      	cmp	r5, #0
 800396c:	d1f2      	bne.n	8003954 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800396e:	7b13      	ldrb	r3, [r2, #12]
 8003970:	e7f0      	b.n	8003954 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003972:	f7fd fc31 	bl	80011d8 <HAL_GetTick>
 8003976:	9b06      	ldr	r3, [sp, #24]
 8003978:	1ac0      	subs	r0, r0, r3
 800397a:	42b0      	cmp	r0, r6
 800397c:	d201      	bcs.n	8003982 <SPI_WaitFifoStateUntilTimeout+0x3a>
 800397e:	2e00      	cmp	r6, #0
 8003980:	d1eb      	bne.n	800395a <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	6853      	ldr	r3, [r2, #4]
 8003986:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800398a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003992:	d00b      	beq.n	80039ac <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399a:	d014      	beq.n	80039c6 <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039a8:	2003      	movs	r0, #3
 80039aa:	e018      	b.n	80039de <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b2:	d002      	beq.n	80039ba <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b8:	d1ec      	bne.n	8003994 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	6813      	ldr	r3, [r2, #0]
 80039be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e7e6      	b.n	8003994 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	6813      	ldr	r3, [r2, #0]
 80039ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e7df      	b.n	800399c <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 80039dc:	2000      	movs	r0, #0
}
 80039de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	4604      	mov	r4, r0
 80039e6:	460d      	mov	r5, r1
 80039e8:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ea:	9200      	str	r2, [sp, #0]
 80039ec:	460b      	mov	r3, r1
 80039ee:	2200      	movs	r2, #0
 80039f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80039f4:	f7ff ffa8 	bl	8003948 <SPI_WaitFifoStateUntilTimeout>
 80039f8:	b9b8      	cbnz	r0, 8003a2a <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039fa:	9600      	str	r6, [sp, #0]
 80039fc:	462b      	mov	r3, r5
 80039fe:	2200      	movs	r2, #0
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff ff58 	bl	80038b8 <SPI_WaitFlagStateUntilTimeout>
 8003a08:	b9b8      	cbnz	r0, 8003a3a <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a0a:	9600      	str	r6, [sp, #0]
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7ff ff97 	bl	8003948 <SPI_WaitFifoStateUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	b150      	cbz	r0, 8003a34 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a20:	f043 0320 	orr.w	r3, r3, #32
 8003a24:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e004      	b.n	8003a34 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a2c:	f043 0320 	orr.w	r3, r3, #32
 8003a30:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	b002      	add	sp, #8
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a3c:	f043 0320 	orr.w	r3, r3, #32
 8003a40:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e7f6      	b.n	8003a34 <SPI_EndRxTxTransaction+0x54>

08003a46 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d058      	beq.n	8003afc <HAL_SPI_Init+0xb6>
{
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a52:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d045      	beq.n	8003ae6 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003a60:	6822      	ldr	r2, [r4, #0]
 8003a62:	6813      	ldr	r3, [r2, #0]
 8003a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a68:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a6a:	68e3      	ldr	r3, [r4, #12]
 8003a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a70:	d93e      	bls.n	8003af0 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a72:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a74:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a78:	d004      	beq.n	8003a84 <HAL_SPI_Init+0x3e>
 8003a7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a7e:	d001      	beq.n	8003a84 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a80:	2100      	movs	r1, #0
 8003a82:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003a84:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a86:	b921      	cbnz	r1, 8003a92 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a8c:	d933      	bls.n	8003af6 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a92:	6863      	ldr	r3, [r4, #4]
 8003a94:	68a1      	ldr	r1, [r4, #8]
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6921      	ldr	r1, [r4, #16]
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6961      	ldr	r1, [r4, #20]
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	69a1      	ldr	r1, [r4, #24]
 8003aa2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	69e1      	ldr	r1, [r4, #28]
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	6a21      	ldr	r1, [r4, #32]
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003ab2:	6821      	ldr	r1, [r4, #0]
 8003ab4:	4303      	orrs	r3, r0
 8003ab6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ab8:	8b63      	ldrh	r3, [r4, #26]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	68e1      	ldr	r1, [r4, #12]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6821      	ldr	r1, [r4, #0]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ad0:	6822      	ldr	r2, [r4, #0]
 8003ad2:	69d3      	ldr	r3, [r2, #28]
 8003ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ada:	2000      	movs	r0, #0
 8003adc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003ae4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003ae6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003aea:	f7fd f851 	bl	8000b90 <HAL_SPI_MspInit>
 8003aee:	e7b4      	b.n	8003a5a <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003af0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003af4:	e7be      	b.n	8003a74 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003af6:	2301      	movs	r3, #1
 8003af8:	6323      	str	r3, [r4, #48]	; 0x30
 8003afa:	e7ca      	b.n	8003a92 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003afc:	2001      	movs	r0, #1
}
 8003afe:	4770      	bx	lr

08003b00 <HAL_SPI_Transmit>:
{
 8003b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b04:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8003b06:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8003b0a:	2c01      	cmp	r4, #1
 8003b0c:	f000 80e4 	beq.w	8003cd8 <HAL_SPI_Transmit+0x1d8>
 8003b10:	461e      	mov	r6, r3
 8003b12:	4615      	mov	r5, r2
 8003b14:	4688      	mov	r8, r1
 8003b16:	4604      	mov	r4, r0
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003b1e:	f7fd fb5b 	bl	80011d8 <HAL_GetTick>
 8003b22:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b24:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	2a01      	cmp	r2, #1
 8003b2c:	d009      	beq.n	8003b42 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8003b2e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b36:	2300      	movs	r3, #0
 8003b38:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003b3c:	b002      	add	sp, #8
 8003b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003b42:	f1b8 0f00 	cmp.w	r8, #0
 8003b46:	f000 80b9 	beq.w	8003cbc <HAL_SPI_Transmit+0x1bc>
 8003b4a:	2d00      	cmp	r5, #0
 8003b4c:	f000 80b8 	beq.w	8003cc0 <HAL_SPI_Transmit+0x1c0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b50:	2303      	movs	r3, #3
 8003b52:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b5a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b5e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b60:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b62:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b64:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b68:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b6c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b6e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d01c      	beq.n	8003bb2 <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b80:	d103      	bne.n	8003b8a <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b88:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b8a:	68e3      	ldr	r3, [r4, #12]
 8003b8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b90:	d933      	bls.n	8003bfa <HAL_SPI_Transmit+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b92:	6863      	ldr	r3, [r4, #4]
 8003b94:	b10b      	cbz	r3, 8003b9a <HAL_SPI_Transmit+0x9a>
 8003b96:	2d01      	cmp	r5, #1
 8003b98:	d11b      	bne.n	8003bd2 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	8812      	ldrh	r2, [r2, #0]
 8003ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003ba8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bb0:	e00f      	b.n	8003bd2 <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e7dc      	b.n	8003b78 <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bbe:	f7fd fb0b 	bl	80011d8 <HAL_GetTick>
 8003bc2:	1bc0      	subs	r0, r0, r7
 8003bc4:	42b0      	cmp	r0, r6
 8003bc6:	d302      	bcc.n	8003bce <HAL_SPI_Transmit+0xce>
 8003bc8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003bcc:	d17a      	bne.n	8003cc4 <HAL_SPI_Transmit+0x1c4>
 8003bce:	2e00      	cmp	r6, #0
 8003bd0:	d07a      	beq.n	8003cc8 <HAL_SPI_Transmit+0x1c8>
    while (hspi->TxXferCount > 0U)
 8003bd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d05b      	beq.n	8003c92 <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	f012 0f02 	tst.w	r2, #2
 8003be2:	d0ec      	beq.n	8003bbe <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bec:	3302      	adds	r3, #2
 8003bee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003bf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bf8:	e7eb      	b.n	8003bd2 <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bfa:	6863      	ldr	r3, [r4, #4]
 8003bfc:	b10b      	cbz	r3, 8003c02 <HAL_SPI_Transmit+0x102>
 8003bfe:	2d01      	cmp	r5, #1
 8003c00:	d130      	bne.n	8003c64 <HAL_SPI_Transmit+0x164>
      if (hspi->TxXferCount > 1U)
 8003c02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d90b      	bls.n	8003c22 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	8812      	ldrh	r2, [r2, #0]
 8003c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c14:	3302      	adds	r3, #2
 8003c16:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c1a:	3b02      	subs	r3, #2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c20:	e020      	b.n	8003c64 <HAL_SPI_Transmit+0x164>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003c30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c38:	e014      	b.n	8003c64 <HAL_SPI_Transmit+0x164>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003c40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c42:	3301      	adds	r3, #1
 8003c44:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003c46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c4e:	e009      	b.n	8003c64 <HAL_SPI_Transmit+0x164>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c50:	f7fd fac2 	bl	80011d8 <HAL_GetTick>
 8003c54:	1bc0      	subs	r0, r0, r7
 8003c56:	42b0      	cmp	r0, r6
 8003c58:	d302      	bcc.n	8003c60 <HAL_SPI_Transmit+0x160>
 8003c5a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003c5e:	d135      	bne.n	8003ccc <HAL_SPI_Transmit+0x1cc>
 8003c60:	2e00      	cmp	r6, #0
 8003c62:	d035      	beq.n	8003cd0 <HAL_SPI_Transmit+0x1d0>
    while (hspi->TxXferCount > 0U)
 8003c64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	b19b      	cbz	r3, 8003c92 <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	6893      	ldr	r3, [r2, #8]
 8003c6e:	f013 0f02 	tst.w	r3, #2
 8003c72:	d0ed      	beq.n	8003c50 <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 8003c74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d9de      	bls.n	8003c3a <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c84:	3302      	adds	r3, #2
 8003c86:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c8a:	3b02      	subs	r3, #2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c90:	e7e8      	b.n	8003c64 <HAL_SPI_Transmit+0x164>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c92:	463a      	mov	r2, r7
 8003c94:	4631      	mov	r1, r6
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7ff fea2 	bl	80039e0 <SPI_EndRxTxTransaction>
 8003c9c:	b108      	cbz	r0, 8003ca2 <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca2:	68a3      	ldr	r3, [r4, #8]
 8003ca4:	b933      	cbnz	r3, 8003cb4 <HAL_SPI_Transmit+0x1b4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	9201      	str	r2, [sp, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003cb6:	b96b      	cbnz	r3, 8003cd4 <HAL_SPI_Transmit+0x1d4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e739      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	e737      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	e735      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003cc4:	2003      	movs	r0, #3
 8003cc6:	e733      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
 8003cc8:	2003      	movs	r0, #3
 8003cca:	e731      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003ccc:	2003      	movs	r0, #3
 8003cce:	e72f      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
 8003cd0:	2003      	movs	r0, #3
 8003cd2:	e72d      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	e72b      	b.n	8003b30 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	e72f      	b.n	8003b3c <HAL_SPI_Transmit+0x3c>

08003cdc <HAL_SPI_ErrorCallback>:
}
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_SPI_IRQHandler>:
{
 8003ce0:	b530      	push	{r4, r5, lr}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003ce6:	6802      	ldr	r2, [r0, #0]
 8003ce8:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003cea:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cec:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8003cf0:	b949      	cbnz	r1, 8003d06 <HAL_SPI_IRQHandler+0x26>
 8003cf2:	f013 0f01 	tst.w	r3, #1
 8003cf6:	d006      	beq.n	8003d06 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cf8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cfc:	d003      	beq.n	8003d06 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8003cfe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d00:	4620      	mov	r0, r4
 8003d02:	4798      	blx	r3
    return;
 8003d04:	e008      	b.n	8003d18 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d06:	f013 0f02 	tst.w	r3, #2
 8003d0a:	d007      	beq.n	8003d1c <HAL_SPI_IRQHandler+0x3c>
 8003d0c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d10:	d004      	beq.n	8003d1c <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003d12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d14:	4620      	mov	r0, r4
 8003d16:	4798      	blx	r3
}
 8003d18:	b005      	add	sp, #20
 8003d1a:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d1c:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8003d20:	b91d      	cbnz	r5, 8003d2a <HAL_SPI_IRQHandler+0x4a>
 8003d22:	b911      	cbnz	r1, 8003d2a <HAL_SPI_IRQHandler+0x4a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d28:	d0f6      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x38>
 8003d2a:	f010 0f20 	tst.w	r0, #32
 8003d2e:	d0f3      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d30:	b179      	cbz	r1, 8003d52 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d32:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 8003d36:	b2c9      	uxtb	r1, r1
 8003d38:	2903      	cmp	r1, #3
 8003d3a:	d053      	beq.n	8003de4 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d3c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003d3e:	f041 0104 	orr.w	r1, r1, #4
 8003d42:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d44:	2100      	movs	r1, #0
 8003d46:	9100      	str	r1, [sp, #0]
 8003d48:	68d1      	ldr	r1, [r2, #12]
 8003d4a:	9100      	str	r1, [sp, #0]
 8003d4c:	6891      	ldr	r1, [r2, #8]
 8003d4e:	9100      	str	r1, [sp, #0]
 8003d50:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d52:	b165      	cbz	r5, 8003d6e <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d54:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003d56:	f041 0101 	orr.w	r1, r1, #1
 8003d5a:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	9102      	str	r1, [sp, #8]
 8003d60:	6891      	ldr	r1, [r2, #8]
 8003d62:	9102      	str	r1, [sp, #8]
 8003d64:	6811      	ldr	r1, [r2, #0]
 8003d66:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003d6a:	6011      	str	r1, [r2, #0]
 8003d6c:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d72:	d009      	beq.n	8003d88 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d76:	f043 0308 	orr.w	r3, r3, #8
 8003d7a:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9303      	str	r3, [sp, #12]
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d88:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0c4      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	6853      	ldr	r3, [r2, #4]
 8003d92:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003d96:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d9e:	f010 0f03 	tst.w	r0, #3
 8003da2:	d027      	beq.n	8003df4 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003da4:	6822      	ldr	r2, [r4, #0]
 8003da6:	6853      	ldr	r3, [r2, #4]
 8003da8:	f023 0303 	bic.w	r3, r3, #3
 8003dac:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003dae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003db0:	b14b      	cbz	r3, 8003dc6 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <HAL_SPI_IRQHandler+0x11c>)
 8003db4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003db6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003db8:	f7fd ffa6 	bl	8001d08 <HAL_DMA_Abort_IT>
 8003dbc:	b118      	cbz	r0, 8003dc6 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc4:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003dc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0a5      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_SPI_IRQHandler+0x11c>)
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003dd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dd2:	f7fd ff99 	bl	8001d08 <HAL_DMA_Abort_IT>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d09e      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de0:	6623      	str	r3, [r4, #96]	; 0x60
 8003de2:	e799      	b.n	8003d18 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de4:	2300      	movs	r3, #0
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	68d3      	ldr	r3, [r2, #12]
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	6893      	ldr	r3, [r2, #8]
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	9b01      	ldr	r3, [sp, #4]
        return;
 8003df2:	e791      	b.n	8003d18 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff ff71 	bl	8003cdc <HAL_SPI_ErrorCallback>
 8003dfa:	e78d      	b.n	8003d18 <HAL_SPI_IRQHandler+0x38>
 8003dfc:	08003e01 	.word	0x08003e01

08003e00 <SPI_DMAAbortOnError>:
{
 8003e00:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e02:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003e0a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003e0c:	f7ff ff66 	bl	8003cdc <HAL_SPI_ErrorCallback>
}
 8003e10:	bd08      	pop	{r3, pc}
	...

08003e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e16:	6a03      	ldr	r3, [r0, #32]
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e28:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	680d      	ldr	r5, [r1, #0]
 8003e2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e30:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e34:	688d      	ldr	r5, [r1, #8]
 8003e36:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e38:	4d18      	ldr	r5, [pc, #96]	; (8003e9c <TIM_OC1_SetConfig+0x88>)
 8003e3a:	42a8      	cmp	r0, r5
 8003e3c:	d00b      	beq.n	8003e56 <TIM_OC1_SetConfig+0x42>
 8003e3e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e42:	42a8      	cmp	r0, r5
 8003e44:	d007      	beq.n	8003e56 <TIM_OC1_SetConfig+0x42>
 8003e46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e4a:	42a8      	cmp	r0, r5
 8003e4c:	d003      	beq.n	8003e56 <TIM_OC1_SetConfig+0x42>
 8003e4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e52:	42a8      	cmp	r0, r5
 8003e54:	d105      	bne.n	8003e62 <TIM_OC1_SetConfig+0x4e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e56:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e5a:	68cd      	ldr	r5, [r1, #12]
 8003e5c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e5e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e62:	4d0e      	ldr	r5, [pc, #56]	; (8003e9c <TIM_OC1_SetConfig+0x88>)
 8003e64:	42a8      	cmp	r0, r5
 8003e66:	d00b      	beq.n	8003e80 <TIM_OC1_SetConfig+0x6c>
 8003e68:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e6c:	42a8      	cmp	r0, r5
 8003e6e:	d007      	beq.n	8003e80 <TIM_OC1_SetConfig+0x6c>
 8003e70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e74:	42a8      	cmp	r0, r5
 8003e76:	d003      	beq.n	8003e80 <TIM_OC1_SetConfig+0x6c>
 8003e78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e7c:	42a8      	cmp	r0, r5
 8003e7e:	d105      	bne.n	8003e8c <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e80:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e84:	694c      	ldr	r4, [r1, #20]
 8003e86:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e88:	698d      	ldr	r5, [r1, #24]
 8003e8a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e90:	684a      	ldr	r2, [r1, #4]
 8003e92:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e94:	6203      	str	r3, [r0, #32]
}
 8003e96:	bc30      	pop	{r4, r5}
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40012c00 	.word	0x40012c00

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea2:	6a03      	ldr	r3, [r0, #32]
 8003ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003eb4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb8:	680d      	ldr	r5, [r1, #0]
 8003eba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ec0:	688d      	ldr	r5, [r1, #8]
 8003ec2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ec6:	4d14      	ldr	r5, [pc, #80]	; (8003f18 <TIM_OC3_SetConfig+0x78>)
 8003ec8:	42a8      	cmp	r0, r5
 8003eca:	d01d      	beq.n	8003f08 <TIM_OC3_SetConfig+0x68>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	4d12      	ldr	r5, [pc, #72]	; (8003f18 <TIM_OC3_SetConfig+0x78>)
 8003ece:	42a8      	cmp	r0, r5
 8003ed0:	d00b      	beq.n	8003eea <TIM_OC3_SetConfig+0x4a>
 8003ed2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003ed6:	42a8      	cmp	r0, r5
 8003ed8:	d007      	beq.n	8003eea <TIM_OC3_SetConfig+0x4a>
 8003eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ede:	42a8      	cmp	r0, r5
 8003ee0:	d003      	beq.n	8003eea <TIM_OC3_SetConfig+0x4a>
 8003ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ee6:	42a8      	cmp	r0, r5
 8003ee8:	d107      	bne.n	8003efa <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eea:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eee:	694d      	ldr	r5, [r1, #20]
 8003ef0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ef4:	698d      	ldr	r5, [r1, #24]
 8003ef6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efe:	684a      	ldr	r2, [r1, #4]
 8003f00:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	6203      	str	r3, [r0, #32]
}
 8003f04:	bc30      	pop	{r4, r5}
 8003f06:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f0c:	68cd      	ldr	r5, [r1, #12]
 8003f0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f16:	e7d9      	b.n	8003ecc <TIM_OC3_SetConfig+0x2c>
 8003f18:	40012c00 	.word	0x40012c00

08003f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f1e:	6a03      	ldr	r3, [r0, #32]
 8003f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f30:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f34:	680d      	ldr	r5, [r1, #0]
 8003f36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f3e:	688d      	ldr	r5, [r1, #8]
 8003f40:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	4d0d      	ldr	r5, [pc, #52]	; (8003f7c <TIM_OC4_SetConfig+0x60>)
 8003f46:	42a8      	cmp	r0, r5
 8003f48:	d00b      	beq.n	8003f62 <TIM_OC4_SetConfig+0x46>
 8003f4a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003f4e:	42a8      	cmp	r0, r5
 8003f50:	d007      	beq.n	8003f62 <TIM_OC4_SetConfig+0x46>
 8003f52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f56:	42a8      	cmp	r0, r5
 8003f58:	d003      	beq.n	8003f62 <TIM_OC4_SetConfig+0x46>
 8003f5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f5e:	42a8      	cmp	r0, r5
 8003f60:	d104      	bne.n	8003f6c <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f62:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f66:	694d      	ldr	r5, [r1, #20]
 8003f68:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f70:	684b      	ldr	r3, [r1, #4]
 8003f72:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	6202      	str	r2, [r0, #32]
}
 8003f76:	bc30      	pop	{r4, r5}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00

08003f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f82:	6a03      	ldr	r3, [r0, #32]
 8003f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f88:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f8e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	680d      	ldr	r5, [r1, #0]
 8003f9a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fa0:	688d      	ldr	r5, [r1, #8]
 8003fa2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <TIM_OC5_SetConfig+0x5c>)
 8003fa8:	42a8      	cmp	r0, r5
 8003faa:	d00b      	beq.n	8003fc4 <TIM_OC5_SetConfig+0x44>
 8003fac:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003fb0:	42a8      	cmp	r0, r5
 8003fb2:	d007      	beq.n	8003fc4 <TIM_OC5_SetConfig+0x44>
 8003fb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fb8:	42a8      	cmp	r0, r5
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC5_SetConfig+0x44>
 8003fbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fc0:	42a8      	cmp	r0, r5
 8003fc2:	d104      	bne.n	8003fce <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fc4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fc8:	694d      	ldr	r5, [r1, #20]
 8003fca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fd0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fd2:	684a      	ldr	r2, [r1, #4]
 8003fd4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	6203      	str	r3, [r0, #32]
}
 8003fd8:	bc30      	pop	{r4, r5}
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00

08003fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fe2:	6a03      	ldr	r3, [r0, #32]
 8003fe4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fe8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fee:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff8:	680d      	ldr	r5, [r1, #0]
 8003ffa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ffe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004002:	688d      	ldr	r5, [r1, #8]
 8004004:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	4d0d      	ldr	r5, [pc, #52]	; (8004040 <TIM_OC6_SetConfig+0x60>)
 800400a:	42a8      	cmp	r0, r5
 800400c:	d00b      	beq.n	8004026 <TIM_OC6_SetConfig+0x46>
 800400e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004012:	42a8      	cmp	r0, r5
 8004014:	d007      	beq.n	8004026 <TIM_OC6_SetConfig+0x46>
 8004016:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800401a:	42a8      	cmp	r0, r5
 800401c:	d003      	beq.n	8004026 <TIM_OC6_SetConfig+0x46>
 800401e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004022:	42a8      	cmp	r0, r5
 8004024:	d104      	bne.n	8004030 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004026:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800402a:	694d      	ldr	r5, [r1, #20]
 800402c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004030:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004032:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004034:	684b      	ldr	r3, [r1, #4]
 8004036:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004038:	6202      	str	r2, [r0, #32]
}
 800403a:	bc30      	pop	{r4, r5}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40012c00 	.word	0x40012c00

08004044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004044:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004046:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004048:	6a04      	ldr	r4, [r0, #32]
 800404a:	f024 0401 	bic.w	r4, r4, #1
 800404e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004050:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004052:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004056:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800405e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004060:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004062:	6203      	str	r3, [r0, #32]
}
 8004064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406c:	6a03      	ldr	r3, [r0, #32]
 800406e:	f023 0310 	bic.w	r3, r3, #16
 8004072:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004074:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004076:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004078:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800407c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004084:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004088:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800408a:	6203      	str	r3, [r0, #32]
}
 800408c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004090:	4770      	bx	lr

08004092 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004092:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004098:	4319      	orrs	r1, r3
 800409a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409e:	6081      	str	r1, [r0, #8]
}
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040aa:	6802      	ldr	r2, [r0, #0]
 80040ac:	6891      	ldr	r1, [r2, #8]
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_TIM_Base_Start+0x2c>)
 80040b0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d006      	beq.n	80040c4 <HAL_TIM_Base_Start+0x20>
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d003      	beq.n	80040c4 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 80040bc:	6813      	ldr	r3, [r2, #0]
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80040ca:	2000      	movs	r0, #0
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	00010007 	.word	0x00010007

080040d4 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	2302      	movs	r3, #2
 80040d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80040da:	6803      	ldr	r3, [r0, #0]
 80040dc:	6a19      	ldr	r1, [r3, #32]
 80040de:	f241 1211 	movw	r2, #4369	; 0x1111
 80040e2:	4211      	tst	r1, r2
 80040e4:	d108      	bne.n	80040f8 <HAL_TIM_Base_Stop+0x24>
 80040e6:	6a19      	ldr	r1, [r3, #32]
 80040e8:	f240 4244 	movw	r2, #1092	; 0x444
 80040ec:	4211      	tst	r1, r2
 80040ee:	d103      	bne.n	80040f8 <HAL_TIM_Base_Stop+0x24>
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80040fe:	2000      	movs	r0, #0
 8004100:	4770      	bx	lr
	...

08004104 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004104:	6802      	ldr	r2, [r0, #0]
 8004106:	68d3      	ldr	r3, [r2, #12]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800410e:	6802      	ldr	r2, [r0, #0]
 8004110:	6891      	ldr	r1, [r2, #8]
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_TIM_Base_Start_IT+0x28>)
 8004114:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004116:	2b06      	cmp	r3, #6
 8004118:	d006      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x24>
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411e:	d003      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6013      	str	r3, [r2, #0]
}
 8004128:	2000      	movs	r0, #0
 800412a:	4770      	bx	lr
 800412c:	00010007 	.word	0x00010007

08004130 <HAL_TIM_OC_MspInit>:
}
 8004130:	4770      	bx	lr

08004132 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004132:	4770      	bx	lr

08004134 <HAL_TIM_IC_CaptureCallback>:
}
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_TriggerCallback>:
}
 8004138:	4770      	bx	lr

0800413a <HAL_TIM_IRQHandler>:
{
 800413a:	b510      	push	{r4, lr}
 800413c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	f012 0f02 	tst.w	r2, #2
 8004146:	d011      	beq.n	800416c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	f012 0f02 	tst.w	r2, #2
 800414e:	d00d      	beq.n	800416c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004150:	f06f 0202 	mvn.w	r2, #2
 8004154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004156:	2301      	movs	r3, #1
 8004158:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800415a:	6803      	ldr	r3, [r0, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f013 0f03 	tst.w	r3, #3
 8004162:	d079      	beq.n	8004258 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004164:	f7ff ffe6 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004168:	2300      	movs	r3, #0
 800416a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	f012 0f04 	tst.w	r2, #4
 8004174:	d012      	beq.n	800419c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	f012 0f04 	tst.w	r2, #4
 800417c:	d00e      	beq.n	800419c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800417e:	f06f 0204 	mvn.w	r2, #4
 8004182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004184:	2302      	movs	r3, #2
 8004186:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004190:	d068      	beq.n	8004264 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	4620      	mov	r0, r4
 8004194:	f7ff ffce 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004198:	2300      	movs	r3, #0
 800419a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	f012 0f08 	tst.w	r2, #8
 80041a4:	d012      	beq.n	80041cc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	f012 0f08 	tst.w	r2, #8
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041ae:	f06f 0208 	mvn.w	r2, #8
 80041b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b4:	2304      	movs	r3, #4
 80041b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f013 0f03 	tst.w	r3, #3
 80041c0:	d057      	beq.n	8004272 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7ff ffb6 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c8:	2300      	movs	r3, #0
 80041ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	f012 0f10 	tst.w	r2, #16
 80041d4:	d012      	beq.n	80041fc <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	f012 0f10 	tst.w	r2, #16
 80041dc:	d00e      	beq.n	80041fc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041de:	f06f 0210 	mvn.w	r2, #16
 80041e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e4:	2308      	movs	r3, #8
 80041e6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f413 7f40 	tst.w	r3, #768	; 0x300
 80041f0:	d046      	beq.n	8004280 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7ff ff9e 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f8:	2300      	movs	r3, #0
 80041fa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	f012 0f01 	tst.w	r2, #1
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	f012 0f01 	tst.w	r2, #1
 800420c:	d13f      	bne.n	800428e <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004216:	d003      	beq.n	8004220 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800421e:	d13d      	bne.n	800429c <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004230:	d13b      	bne.n	80042aa <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	f012 0f40 	tst.w	r2, #64	; 0x40
 800423a:	d003      	beq.n	8004244 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004242:	d139      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	f012 0f20 	tst.w	r2, #32
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	f012 0f20 	tst.w	r2, #32
 8004254:	d137      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x18c>
}
 8004256:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004258:	f7ff ff6b 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	4620      	mov	r0, r4
 800425e:	f7ff ff6a 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
 8004262:	e781      	b.n	8004168 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff ff64 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff ff63 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
 8004270:	e792      	b.n	8004198 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	4620      	mov	r0, r4
 8004274:	f7ff ff5d 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	4620      	mov	r0, r4
 800427a:	f7ff ff5c 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
 800427e:	e7a3      	b.n	80041c8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff ff56 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff ff55 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
 800428c:	e7b4      	b.n	80041f8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428e:	f06f 0201 	mvn.w	r2, #1
 8004292:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004294:	4620      	mov	r0, r4
 8004296:	f7fc fb15 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
 800429a:	e7b8      	b.n	800420e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800429c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80042a2:	4620      	mov	r0, r4
 80042a4:	f000 f9b7 	bl	8004616 <HAL_TIMEx_BreakCallback>
 80042a8:	e7ba      	b.n	8004220 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 f9b1 	bl	8004618 <HAL_TIMEx_Break2Callback>
 80042b6:	e7bc      	b.n	8004232 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff ff3a 	bl	8004138 <HAL_TIM_TriggerCallback>
 80042c4:	e7be      	b.n	8004244 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042c6:	f06f 0220 	mvn.w	r2, #32
 80042ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80042cc:	4620      	mov	r0, r4
 80042ce:	f000 f9a1 	bl	8004614 <HAL_TIMEx_CommutCallback>
}
 80042d2:	e7c0      	b.n	8004256 <HAL_TIM_IRQHandler+0x11c>

080042d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80042d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_Base_SetConfig+0x7c>)
 80042d8:	4290      	cmp	r0, r2
 80042da:	d002      	beq.n	80042e2 <TIM_Base_SetConfig+0xe>
 80042dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042e0:	d103      	bne.n	80042ea <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042e6:	684a      	ldr	r2, [r1, #4]
 80042e8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ea:	4a19      	ldr	r2, [pc, #100]	; (8004350 <TIM_Base_SetConfig+0x7c>)
 80042ec:	4290      	cmp	r0, r2
 80042ee:	d00e      	beq.n	800430e <TIM_Base_SetConfig+0x3a>
 80042f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042f4:	d00b      	beq.n	800430e <TIM_Base_SetConfig+0x3a>
 80042f6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80042fa:	4290      	cmp	r0, r2
 80042fc:	d007      	beq.n	800430e <TIM_Base_SetConfig+0x3a>
 80042fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004302:	4290      	cmp	r0, r2
 8004304:	d003      	beq.n	800430e <TIM_Base_SetConfig+0x3a>
 8004306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800430a:	4290      	cmp	r0, r2
 800430c:	d103      	bne.n	8004316 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004312:	68ca      	ldr	r2, [r1, #12]
 8004314:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431a:	694a      	ldr	r2, [r1, #20]
 800431c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800431e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004320:	688b      	ldr	r3, [r1, #8]
 8004322:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <TIM_Base_SetConfig+0x7c>)
 800432a:	4298      	cmp	r0, r3
 800432c:	d00b      	beq.n	8004346 <TIM_Base_SetConfig+0x72>
 800432e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004332:	4298      	cmp	r0, r3
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0x72>
 8004336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433a:	4298      	cmp	r0, r3
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0x72>
 800433e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004342:	4298      	cmp	r0, r3
 8004344:	d101      	bne.n	800434a <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8004346:	690b      	ldr	r3, [r1, #16]
 8004348:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800434a:	2301      	movs	r3, #1
 800434c:	6143      	str	r3, [r0, #20]
}
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00

08004354 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004354:	b1a8      	cbz	r0, 8004382 <HAL_TIM_Base_Init+0x2e>
{
 8004356:	b510      	push	{r4, lr}
 8004358:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800435e:	b15b      	cbz	r3, 8004378 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	2302      	movs	r3, #2
 8004362:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004366:	1d21      	adds	r1, r4, #4
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	f7ff ffb3 	bl	80042d4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800436e:	2301      	movs	r3, #1
 8004370:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004374:	2000      	movs	r0, #0
}
 8004376:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004378:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800437c:	f7fc feb4 	bl	80010e8 <HAL_TIM_Base_MspInit>
 8004380:	e7ee      	b.n	8004360 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004382:	2001      	movs	r0, #1
}
 8004384:	4770      	bx	lr

08004386 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004386:	b1a8      	cbz	r0, 80043b4 <HAL_TIM_OC_Init+0x2e>
{
 8004388:	b510      	push	{r4, lr}
 800438a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800438c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004390:	b15b      	cbz	r3, 80043aa <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004392:	2302      	movs	r3, #2
 8004394:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004398:	1d21      	adds	r1, r4, #4
 800439a:	6820      	ldr	r0, [r4, #0]
 800439c:	f7ff ff9a 	bl	80042d4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80043a6:	2000      	movs	r0, #0
}
 80043a8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80043aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80043ae:	f7ff febf 	bl	8004130 <HAL_TIM_OC_MspInit>
 80043b2:	e7ee      	b.n	8004392 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80043b4:	2001      	movs	r0, #1
}
 80043b6:	4770      	bx	lr

080043b8 <TIM_OC2_SetConfig>:
{
 80043b8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ba:	6a03      	ldr	r3, [r0, #32]
 80043bc:	f023 0310 	bic.w	r3, r3, #16
 80043c0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80043c2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80043c4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043c6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80043cc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d0:	680d      	ldr	r5, [r1, #0]
 80043d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80043d6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043da:	688d      	ldr	r5, [r1, #8]
 80043dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e0:	4d14      	ldr	r5, [pc, #80]	; (8004434 <TIM_OC2_SetConfig+0x7c>)
 80043e2:	42a8      	cmp	r0, r5
 80043e4:	d01d      	beq.n	8004422 <TIM_OC2_SetConfig+0x6a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e6:	4d13      	ldr	r5, [pc, #76]	; (8004434 <TIM_OC2_SetConfig+0x7c>)
 80043e8:	42a8      	cmp	r0, r5
 80043ea:	d00b      	beq.n	8004404 <TIM_OC2_SetConfig+0x4c>
 80043ec:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80043f0:	42a8      	cmp	r0, r5
 80043f2:	d007      	beq.n	8004404 <TIM_OC2_SetConfig+0x4c>
 80043f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043f8:	42a8      	cmp	r0, r5
 80043fa:	d003      	beq.n	8004404 <TIM_OC2_SetConfig+0x4c>
 80043fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004400:	42a8      	cmp	r0, r5
 8004402:	d107      	bne.n	8004414 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004404:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004408:	694d      	ldr	r5, [r1, #20]
 800440a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800440e:	698d      	ldr	r5, [r1, #24]
 8004410:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004414:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004416:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004418:	684a      	ldr	r2, [r1, #4]
 800441a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800441c:	6203      	str	r3, [r0, #32]
}
 800441e:	bc30      	pop	{r4, r5}
 8004420:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004426:	68cd      	ldr	r5, [r1, #12]
 8004428:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800442c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004430:	e7d9      	b.n	80043e6 <TIM_OC2_SetConfig+0x2e>
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00

08004438 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004438:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d034      	beq.n	80044aa <HAL_TIM_OC_ConfigChannel+0x72>
{
 8004440:	b510      	push	{r4, lr}
 8004442:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004444:	2301      	movs	r3, #1
 8004446:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800444a:	2302      	movs	r3, #2
 800444c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004450:	2a14      	cmp	r2, #20
 8004452:	d80f      	bhi.n	8004474 <HAL_TIM_OC_ConfigChannel+0x3c>
 8004454:	e8df f002 	tbb	[pc, r2]
 8004458:	0e0e0e0b 	.word	0x0e0e0e0b
 800445c:	0e0e0e15 	.word	0x0e0e0e15
 8004460:	0e0e0e19 	.word	0x0e0e0e19
 8004464:	0e0e0e1d 	.word	0x0e0e0e1d
 8004468:	0e0e0e21 	.word	0x0e0e0e21
 800446c:	25          	.byte	0x25
 800446d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800446e:	6800      	ldr	r0, [r0, #0]
 8004470:	f7ff fcd0 	bl	8003e14 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004474:	2301      	movs	r3, #1
 8004476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800447a:	2000      	movs	r0, #0
 800447c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004480:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	f7ff ff98 	bl	80043b8 <TIM_OC2_SetConfig>
      break;
 8004488:	e7f4      	b.n	8004474 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	f7ff fd08 	bl	8003ea0 <TIM_OC3_SetConfig>
      break;
 8004490:	e7f0      	b.n	8004474 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004492:	6800      	ldr	r0, [r0, #0]
 8004494:	f7ff fd42 	bl	8003f1c <TIM_OC4_SetConfig>
      break;
 8004498:	e7ec      	b.n	8004474 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	f7ff fd70 	bl	8003f80 <TIM_OC5_SetConfig>
      break;
 80044a0:	e7e8      	b.n	8004474 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044a2:	6800      	ldr	r0, [r0, #0]
 80044a4:	f7ff fd9c 	bl	8003fe0 <TIM_OC6_SetConfig>
      break;
 80044a8:	e7e4      	b.n	8004474 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 80044aa:	2002      	movs	r0, #2
}
 80044ac:	4770      	bx	lr

080044ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ae:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044b0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80044ba:	430b      	orrs	r3, r1
 80044bc:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044be:	6083      	str	r3, [r0, #8]
}
 80044c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80044c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d064      	beq.n	800459a <HAL_TIM_ConfigClockSource+0xd2>
{
 80044d0:	b510      	push	{r4, lr}
 80044d2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80044d4:	2301      	movs	r3, #1
 80044d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	6802      	ldr	r2, [r0, #0]
 80044e2:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <HAL_TIM_ConfigClockSource+0xd8>)
 80044e6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80044e8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80044ea:	680b      	ldr	r3, [r1, #0]
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d04a      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0xbe>
 80044f0:	d913      	bls.n	800451a <HAL_TIM_ConfigClockSource+0x52>
 80044f2:	2b60      	cmp	r3, #96	; 0x60
 80044f4:	d03d      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xaa>
 80044f6:	d91e      	bls.n	8004536 <HAL_TIM_ConfigClockSource+0x6e>
 80044f8:	2b70      	cmp	r3, #112	; 0x70
 80044fa:	d028      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x86>
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004500:	d130      	bne.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004502:	68cb      	ldr	r3, [r1, #12]
 8004504:	684a      	ldr	r2, [r1, #4]
 8004506:	6889      	ldr	r1, [r1, #8]
 8004508:	6820      	ldr	r0, [r4, #0]
 800450a:	f7ff ffd0 	bl	80044ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	6893      	ldr	r3, [r2, #8]
 8004512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004516:	6093      	str	r3, [r2, #8]
      break;
 8004518:	e024      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800451a:	2b10      	cmp	r3, #16
 800451c:	d006      	beq.n	800452c <HAL_TIM_ConfigClockSource+0x64>
 800451e:	d904      	bls.n	800452a <HAL_TIM_ConfigClockSource+0x62>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d003      	beq.n	800452c <HAL_TIM_ConfigClockSource+0x64>
 8004524:	2b30      	cmp	r3, #48	; 0x30
 8004526:	d001      	beq.n	800452c <HAL_TIM_ConfigClockSource+0x64>
 8004528:	e01c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
 800452a:	b9db      	cbnz	r3, 8004564 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800452c:	4619      	mov	r1, r3
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	f7ff fdaf 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8004534:	e016      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8004536:	2b50      	cmp	r3, #80	; 0x50
 8004538:	d114      	bne.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453a:	68ca      	ldr	r2, [r1, #12]
 800453c:	6849      	ldr	r1, [r1, #4]
 800453e:	6820      	ldr	r0, [r4, #0]
 8004540:	f7ff fd80 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004544:	2150      	movs	r1, #80	; 0x50
 8004546:	6820      	ldr	r0, [r4, #0]
 8004548:	f7ff fda3 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 800454c:	e00a      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	68cb      	ldr	r3, [r1, #12]
 8004550:	684a      	ldr	r2, [r1, #4]
 8004552:	6889      	ldr	r1, [r1, #8]
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	f7ff ffaa 	bl	80044ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800455e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004562:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004564:	2301      	movs	r3, #1
 8004566:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800456a:	2000      	movs	r0, #0
 800456c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004570:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004572:	68ca      	ldr	r2, [r1, #12]
 8004574:	6849      	ldr	r1, [r1, #4]
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	f7ff fd77 	bl	800406a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800457c:	2160      	movs	r1, #96	; 0x60
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	f7ff fd87 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8004584:	e7ee      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004586:	68ca      	ldr	r2, [r1, #12]
 8004588:	6849      	ldr	r1, [r1, #4]
 800458a:	6820      	ldr	r0, [r4, #0]
 800458c:	f7ff fd5a 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004590:	2140      	movs	r1, #64	; 0x40
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	f7ff fd7d 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8004598:	e7e4      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 800459a:	2002      	movs	r0, #2
}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	fffe0088 	.word	0xfffe0088

080045a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d02f      	beq.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 80045ac:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80045ae:	2301      	movs	r3, #1
 80045b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	2302      	movs	r3, #2
 80045b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ba:	6802      	ldr	r2, [r0, #0]
 80045bc:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045be:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c0:	4c13      	ldr	r4, [pc, #76]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80045c2:	42a2      	cmp	r2, r4
 80045c4:	d01d      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ca:	680c      	ldr	r4, [r1, #0]
 80045cc:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ce:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d0:	6803      	ldr	r3, [r0, #0]
 80045d2:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d006      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045dc:	d003      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80045de:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d104      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ea:	688a      	ldr	r2, [r1, #8]
 80045ec:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ee:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f6:	2300      	movs	r3, #0
 80045f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80045fc:	4618      	mov	r0, r3
}
 80045fe:	bc30      	pop	{r4, r5}
 8004600:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004602:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004606:	684c      	ldr	r4, [r1, #4]
 8004608:	4323      	orrs	r3, r4
 800460a:	e7dc      	b.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800460c:	2002      	movs	r0, #2
}
 800460e:	4770      	bx	lr
 8004610:	40012c00 	.word	0x40012c00

08004614 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004614:	4770      	bx	lr

08004616 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004616:	4770      	bx	lr

08004618 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004618:	4770      	bx	lr
	...

0800461c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004620:	b99b      	cbnz	r3, 800464a <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004622:	f3ef 8310 	mrs	r3, PRIMASK
 8004626:	b99b      	cbnz	r3, 8004650 <osKernelInitialize+0x34>
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <osKernelInitialize+0x40>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d005      	beq.n	800463c <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004630:	b98b      	cbnz	r3, 8004656 <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <osKernelInitialize+0x40>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004638:	2000      	movs	r0, #0
 800463a:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800463c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8004640:	2a00      	cmp	r2, #0
 8004642:	d0f5      	beq.n	8004630 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8004644:	f06f 0005 	mvn.w	r0, #5
 8004648:	4770      	bx	lr
 800464a:	f06f 0005 	mvn.w	r0, #5
 800464e:	4770      	bx	lr
 8004650:	f06f 0005 	mvn.w	r0, #5
 8004654:	4770      	bx	lr
    } else {
      stat = osError;
 8004656:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800465a:	4770      	bx	lr
 800465c:	200002b0 	.word	0x200002b0

08004660 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004660:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004662:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004666:	b9b3      	cbnz	r3, 8004696 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004668:	f3ef 8310 	mrs	r3, PRIMASK
 800466c:	b9b3      	cbnz	r3, 800469c <osKernelStart+0x3c>
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <osKernelStart+0x48>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d008      	beq.n	8004688 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004676:	2b01      	cmp	r3, #1
 8004678:	d113      	bne.n	80046a2 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <osKernelStart+0x48>)
 800467c:	2202      	movs	r2, #2
 800467e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004680:	f001 f904 	bl	800588c <vTaskStartScheduler>
      stat = osOK;
 8004684:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8004686:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004688:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 800468c:	2a00      	cmp	r2, #0
 800468e:	d0f2      	beq.n	8004676 <osKernelStart+0x16>
    stat = osErrorISR;
 8004690:	f06f 0005 	mvn.w	r0, #5
 8004694:	e7f7      	b.n	8004686 <osKernelStart+0x26>
 8004696:	f06f 0005 	mvn.w	r0, #5
 800469a:	e7f4      	b.n	8004686 <osKernelStart+0x26>
 800469c:	f06f 0005 	mvn.w	r0, #5
 80046a0:	e7f1      	b.n	8004686 <osKernelStart+0x26>
      stat = osError;
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80046a6:	e7ee      	b.n	8004686 <osKernelStart+0x26>
 80046a8:	200002b0 	.word	0x200002b0

080046ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046b0:	2400      	movs	r4, #0
 80046b2:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80046b8:	bb4c      	cbnz	r4, 800470e <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ba:	f3ef 8310 	mrs	r3, PRIMASK
 80046be:	bb33      	cbnz	r3, 800470e <osThreadNew+0x62>
 80046c0:	4b33      	ldr	r3, [pc, #204]	; (8004790 <osThreadNew+0xe4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d025      	beq.n	8004714 <osThreadNew+0x68>
 80046c8:	b308      	cbz	r0, 800470e <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80046ca:	2300      	movs	r3, #0
 80046cc:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80046d0:	b392      	cbz	r2, 8004738 <osThreadNew+0x8c>
      if (attr->name != NULL) {
 80046d2:	6816      	ldr	r6, [r2, #0]
 80046d4:	b31e      	cbz	r6, 800471e <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80046d6:	6994      	ldr	r4, [r2, #24]
 80046d8:	b904      	cbnz	r4, 80046dc <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80046da:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046dc:	1e63      	subs	r3, r4, #1
 80046de:	2b37      	cmp	r3, #55	; 0x37
 80046e0:	d852      	bhi.n	8004788 <osThreadNew+0xdc>
 80046e2:	6853      	ldr	r3, [r2, #4]
 80046e4:	f013 0f01 	tst.w	r3, #1
 80046e8:	d150      	bne.n	800478c <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80046ea:	6955      	ldr	r5, [r2, #20]
 80046ec:	b1d5      	cbz	r5, 8004724 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046ee:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046f2:	6893      	ldr	r3, [r2, #8]
 80046f4:	b12b      	cbz	r3, 8004702 <osThreadNew+0x56>
 80046f6:	68d7      	ldr	r7, [r2, #12]
 80046f8:	2f5b      	cmp	r7, #91	; 0x5b
 80046fa:	d902      	bls.n	8004702 <osThreadNew+0x56>
 80046fc:	6917      	ldr	r7, [r2, #16]
 80046fe:	b107      	cbz	r7, 8004702 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004700:	bb0d      	cbnz	r5, 8004746 <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004702:	b193      	cbz	r3, 800472a <osThreadNew+0x7e>
    mem   = -1;
 8004704:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8004708:	2d01      	cmp	r5, #1
 800470a:	d023      	beq.n	8004754 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800470c:	b375      	cbz	r5, 800476c <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800470e:	9804      	ldr	r0, [sp, #16]
}
 8004710:	b007      	add	sp, #28
 8004712:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004714:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f8      	bne.n	800470e <osThreadNew+0x62>
 800471c:	e7d4      	b.n	80046c8 <osThreadNew+0x1c>
    name  = &empty;
 800471e:	f10d 0617 	add.w	r6, sp, #23
 8004722:	e7d8      	b.n	80046d6 <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 8004724:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8004728:	e7e3      	b.n	80046f2 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800472a:	68d3      	ldr	r3, [r2, #12]
 800472c:	b96b      	cbnz	r3, 800474a <osThreadNew+0x9e>
 800472e:	6913      	ldr	r3, [r2, #16]
 8004730:	b173      	cbz	r3, 8004750 <osThreadNew+0xa4>
    mem   = -1;
 8004732:	f04f 35ff 	mov.w	r5, #4294967295
 8004736:	e7e7      	b.n	8004708 <osThreadNew+0x5c>
      mem = 0;
 8004738:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800473a:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 800473c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8004740:	f10d 0617 	add.w	r6, sp, #23
 8004744:	e7e0      	b.n	8004708 <osThreadNew+0x5c>
        mem = 1;
 8004746:	2501      	movs	r5, #1
 8004748:	e7de      	b.n	8004708 <osThreadNew+0x5c>
    mem   = -1;
 800474a:	f04f 35ff 	mov.w	r5, #4294967295
 800474e:	e7db      	b.n	8004708 <osThreadNew+0x5c>
          mem = 0;
 8004750:	2500      	movs	r5, #0
 8004752:	e7d9      	b.n	8004708 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004754:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004756:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004758:	9202      	str	r2, [sp, #8]
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	9400      	str	r4, [sp, #0]
 800475e:	460b      	mov	r3, r1
 8004760:	4662      	mov	r2, ip
 8004762:	4631      	mov	r1, r6
 8004764:	f001 f826 	bl	80057b4 <xTaskCreateStatic>
 8004768:	9004      	str	r0, [sp, #16]
 800476a:	e7d0      	b.n	800470e <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800476c:	aa04      	add	r2, sp, #16
 800476e:	9201      	str	r2, [sp, #4]
 8004770:	9400      	str	r4, [sp, #0]
 8004772:	460b      	mov	r3, r1
 8004774:	fa1f f28c 	uxth.w	r2, ip
 8004778:	4631      	mov	r1, r6
 800477a:	f001 f854 	bl	8005826 <xTaskCreate>
 800477e:	2801      	cmp	r0, #1
 8004780:	d0c5      	beq.n	800470e <osThreadNew+0x62>
          hTask = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	9304      	str	r3, [sp, #16]
 8004786:	e7c2      	b.n	800470e <osThreadNew+0x62>
        return (NULL);
 8004788:	2000      	movs	r0, #0
 800478a:	e7c1      	b.n	8004710 <osThreadNew+0x64>
 800478c:	2000      	movs	r0, #0
 800478e:	e7bf      	b.n	8004710 <osThreadNew+0x64>
 8004790:	200002b0 	.word	0x200002b0

08004794 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8004798:	b370      	cbz	r0, 80047f8 <osThreadFlagsSet+0x64>
 800479a:	4605      	mov	r5, r0
 800479c:	2900      	cmp	r1, #0
 800479e:	db2b      	blt.n	80047f8 <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a6:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 80047aa:	b94b      	cbnz	r3, 80047c0 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ac:	f3ef 8310 	mrs	r3, PRIMASK
 80047b0:	b933      	cbnz	r3, 80047c0 <osThreadFlagsSet+0x2c>
 80047b2:	4b1a      	ldr	r3, [pc, #104]	; (800481c <osThreadFlagsSet+0x88>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d124      	bne.n	8004804 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ba:	f3ef 8311 	mrs	r3, BASEPRI
 80047be:	b30b      	cbz	r3, 8004804 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 80047c0:	2400      	movs	r4, #0
 80047c2:	ab04      	add	r3, sp, #16
 80047c4:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	4623      	mov	r3, r4
 80047cc:	2201      	movs	r2, #1
 80047ce:	4628      	mov	r0, r5
 80047d0:	f001 fc12 	bl	8005ff8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80047d4:	9400      	str	r4, [sp, #0]
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	4622      	mov	r2, r4
 80047da:	4621      	mov	r1, r4
 80047dc:	4628      	mov	r0, r5
 80047de:	f001 fc0b 	bl	8005ff8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80047e2:	9b02      	ldr	r3, [sp, #8]
 80047e4:	b15b      	cbz	r3, 80047fe <osThreadFlagsSet+0x6a>
 80047e6:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <osThreadFlagsSet+0x8c>)
 80047e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	e002      	b.n	80047fe <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 80047f8:	f06f 0303 	mvn.w	r3, #3
 80047fc:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 80047fe:	9803      	ldr	r0, [sp, #12]
 8004800:	b005      	add	sp, #20
 8004802:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004804:	2300      	movs	r3, #0
 8004806:	2201      	movs	r2, #1
 8004808:	4628      	mov	r0, r5
 800480a:	f001 fb85 	bl	8005f18 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800480e:	ab03      	add	r3, sp, #12
 8004810:	2200      	movs	r2, #0
 8004812:	4611      	mov	r1, r2
 8004814:	4628      	mov	r0, r5
 8004816:	f001 fb7f 	bl	8005f18 <xTaskGenericNotify>
 800481a:	e7f0      	b.n	80047fe <osThreadFlagsSet+0x6a>
 800481c:	200002b0 	.word	0x200002b0
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004828:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800482c:	bb5b      	cbnz	r3, 8004886 <osThreadFlagsClear+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482e:	f3ef 8310 	mrs	r3, PRIMASK
 8004832:	bb6b      	cbnz	r3, 8004890 <osThreadFlagsClear+0x6c>
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <osThreadFlagsClear+0x78>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d00f      	beq.n	800485c <osThreadFlagsClear+0x38>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800483c:	2800      	cmp	r0, #0
 800483e:	db2a      	blt.n	8004896 <osThreadFlagsClear+0x72>
 8004840:	4604      	mov	r4, r0
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8004842:	f001 fabf 	bl	8005dc4 <xTaskGetCurrentTaskHandle>
 8004846:	4606      	mov	r6, r0

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8004848:	ab01      	add	r3, sp, #4
 800484a:	2200      	movs	r2, #0
 800484c:	4611      	mov	r1, r2
 800484e:	f001 fb63 	bl	8005f18 <xTaskGenericNotify>
 8004852:	2801      	cmp	r0, #1
 8004854:	d009      	beq.n	800486a <osThreadFlagsClear+0x46>
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
        rflags = (uint32_t)osError;
      }
    }
    else {
      rflags = (uint32_t)osError;
 8004856:	f04f 35ff 	mov.w	r5, #4294967295
 800485a:	e016      	b.n	800488a <osThreadFlagsClear+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800485c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0eb      	beq.n	800483c <osThreadFlagsClear+0x18>
    rflags = (uint32_t)osErrorISR;
 8004864:	f06f 0505 	mvn.w	r5, #5
 8004868:	e00f      	b.n	800488a <osThreadFlagsClear+0x66>
      rflags = cflags;
 800486a:	9d01      	ldr	r5, [sp, #4]
      cflags &= ~flags;
 800486c:	ea25 0104 	bic.w	r1, r5, r4
 8004870:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8004872:	2300      	movs	r3, #0
 8004874:	2203      	movs	r2, #3
 8004876:	4630      	mov	r0, r6
 8004878:	f001 fb4e 	bl	8005f18 <xTaskGenericNotify>
 800487c:	2801      	cmp	r0, #1
 800487e:	d004      	beq.n	800488a <osThreadFlagsClear+0x66>
        rflags = (uint32_t)osError;
 8004880:	f04f 35ff 	mov.w	r5, #4294967295
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8004884:	e001      	b.n	800488a <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorISR;
 8004886:	f06f 0505 	mvn.w	r5, #5
}
 800488a:	4628      	mov	r0, r5
 800488c:	b002      	add	sp, #8
 800488e:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8004890:	f06f 0505 	mvn.w	r5, #5
 8004894:	e7f9      	b.n	800488a <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorParameter;
 8004896:	f06f 0503 	mvn.w	r5, #3
 800489a:	e7f6      	b.n	800488a <osThreadFlagsClear+0x66>
 800489c:	200002b0 	.word	0x200002b0

080048a0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a6:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d14d      	bne.n	800494a <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ae:	f3ef 8710 	mrs	r7, PRIMASK
 80048b2:	463d      	mov	r5, r7
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d14e      	bne.n	8004956 <osThreadFlagsWait+0xb6>
 80048b8:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <osThreadFlagsWait+0xc8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d00d      	beq.n	80048dc <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80048c0:	2800      	cmp	r0, #0
 80048c2:	db4b      	blt.n	800495c <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80048c4:	f011 0f02 	tst.w	r1, #2
 80048c8:	d00f      	beq.n	80048ea <osThreadFlagsWait+0x4a>
      clear = 0U;
 80048ca:	46b8      	mov	r8, r7
 80048cc:	4617      	mov	r7, r2
 80048ce:	468a      	mov	sl, r1
 80048d0:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 80048d2:	f001 f82d 	bl	8005930 <xTaskGetTickCount>
 80048d6:	4683      	mov	fp, r0
    tout   = timeout;
 80048d8:	463e      	mov	r6, r7
 80048da:	e028      	b.n	800492e <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048dc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0ed      	beq.n	80048c0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80048e4:	f06f 0505 	mvn.w	r5, #5
 80048e8:	e031      	b.n	800494e <osThreadFlagsWait+0xae>
      clear = flags;
 80048ea:	4680      	mov	r8, r0
 80048ec:	e7ee      	b.n	80048cc <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 80048ee:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 80048f2:	9b01      	ldr	r3, [sp, #4]
 80048f4:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80048f6:	f01a 0f01 	tst.w	sl, #1
 80048fa:	d00b      	beq.n	8004914 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 80048fc:	ea39 0305 	bics.w	r3, r9, r5
 8004900:	d025      	beq.n	800494e <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8004902:	b377      	cbz	r7, 8004962 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8004904:	f001 f814 	bl	8005930 <xTaskGetTickCount>
 8004908:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 800490c:	4286      	cmp	r6, r0
 800490e:	d309      	bcc.n	8004924 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8004910:	1a36      	subs	r6, r6, r0
 8004912:	e00b      	b.n	800492c <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8004914:	ea19 0f05 	tst.w	r9, r5
 8004918:	d119      	bne.n	800494e <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 800491a:	2f00      	cmp	r7, #0
 800491c:	d1f2      	bne.n	8004904 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 800491e:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8004922:	e014      	b.n	800494e <osThreadFlagsWait+0xae>
          tout  = 0;
 8004924:	2600      	movs	r6, #0
 8004926:	e001      	b.n	800492c <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8004928:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 800492c:	b17c      	cbz	r4, 800494e <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800492e:	4633      	mov	r3, r6
 8004930:	aa01      	add	r2, sp, #4
 8004932:	4641      	mov	r1, r8
 8004934:	2000      	movs	r0, #0
 8004936:	f001 faa3 	bl	8005e80 <xTaskNotifyWait>
 800493a:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 800493c:	2801      	cmp	r0, #1
 800493e:	d0d6      	beq.n	80048ee <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 8004940:	2f00      	cmp	r7, #0
 8004942:	d1f1      	bne.n	8004928 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8004944:	f06f 0502 	mvn.w	r5, #2
 8004948:	e7f0      	b.n	800492c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 800494a:	f06f 0505 	mvn.w	r5, #5
}
 800494e:	4628      	mov	r0, r5
 8004950:	b003      	add	sp, #12
 8004952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8004956:	f06f 0505 	mvn.w	r5, #5
 800495a:	e7f8      	b.n	800494e <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 800495c:	f06f 0503 	mvn.w	r5, #3
 8004960:	e7f5      	b.n	800494e <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 8004962:	f06f 0502 	mvn.w	r5, #2
 8004966:	e7f2      	b.n	800494e <osThreadFlagsWait+0xae>
 8004968:	200002b0 	.word	0x200002b0

0800496c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800496c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800496e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004972:	b9a3      	cbnz	r3, 800499e <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004974:	f3ef 8310 	mrs	r3, PRIMASK
 8004978:	b9a3      	cbnz	r3, 80049a4 <osDelay+0x38>
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <osDelay+0x40>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d002      	beq.n	8004988 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004982:	b940      	cbnz	r0, 8004996 <osDelay+0x2a>
    stat = osOK;
 8004984:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004986:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004988:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f8      	beq.n	8004982 <osDelay+0x16>
    stat = osErrorISR;
 8004990:	f06f 0005 	mvn.w	r0, #5
 8004994:	e7f7      	b.n	8004986 <osDelay+0x1a>
      vTaskDelay(ticks);
 8004996:	f001 f8d7 	bl	8005b48 <vTaskDelay>
    stat = osOK;
 800499a:	2000      	movs	r0, #0
 800499c:	e7f3      	b.n	8004986 <osDelay+0x1a>
    stat = osErrorISR;
 800499e:	f06f 0005 	mvn.w	r0, #5
 80049a2:	e7f0      	b.n	8004986 <osDelay+0x1a>
 80049a4:	f06f 0005 	mvn.w	r0, #5
 80049a8:	e7ed      	b.n	8004986 <osDelay+0x1a>
 80049aa:	bf00      	nop
 80049ac:	200002b0 	.word	0x200002b0

080049b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d14c      	bne.n	8004a56 <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049bc:	f3ef 8310 	mrs	r3, PRIMASK
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d14a      	bne.n	8004a5a <osMessageQueueNew+0xaa>
 80049c4:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <osMessageQueueNew+0xbc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d023      	beq.n	8004a14 <osMessageQueueNew+0x64>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d046      	beq.n	8004a5e <osMessageQueueNew+0xae>
 80049d0:	2900      	cmp	r1, #0
 80049d2:	d046      	beq.n	8004a62 <osMessageQueueNew+0xb2>
 80049d4:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	d034      	beq.n	8004a44 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049da:	6893      	ldr	r3, [r2, #8]
 80049dc:	b14b      	cbz	r3, 80049f2 <osMessageQueueNew+0x42>
 80049de:	68d2      	ldr	r2, [r2, #12]
 80049e0:	2a4f      	cmp	r2, #79	; 0x4f
 80049e2:	d906      	bls.n	80049f2 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049e4:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049e6:	b122      	cbz	r2, 80049f2 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049e8:	6966      	ldr	r6, [r4, #20]
 80049ea:	fb01 f500 	mul.w	r5, r1, r0
 80049ee:	42ae      	cmp	r6, r5
 80049f0:	d222      	bcs.n	8004a38 <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049f2:	b1ab      	cbz	r3, 8004a20 <osMessageQueueNew+0x70>
    mem = -1;
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80049f8:	bbab      	cbnz	r3, 8004a66 <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 80049fa:	2200      	movs	r2, #0
 80049fc:	f000 fab5 	bl	8004f6a <xQueueGenericCreate>
 8004a00:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004a02:	b125      	cbz	r5, 8004a0e <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8004a04:	b32c      	cbz	r4, 8004a52 <osMessageQueueNew+0xa2>
        name = attr->name;
 8004a06:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f000 fd19 	bl	8005440 <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004a0e:	4628      	mov	r0, r5
 8004a10:	b002      	add	sp, #8
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a14:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0d7      	beq.n	80049cc <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8004a1c:	2500      	movs	r5, #0
 8004a1e:	e7f6      	b.n	8004a0e <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a20:	68e3      	ldr	r3, [r4, #12]
 8004a22:	b98b      	cbnz	r3, 8004a48 <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a24:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a26:	b113      	cbz	r3, 8004a2e <osMessageQueueNew+0x7e>
    mem = -1;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	e7e4      	b.n	80049f8 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a2e:	6963      	ldr	r3, [r4, #20]
 8004a30:	b16b      	cbz	r3, 8004a4e <osMessageQueueNew+0x9e>
    mem = -1;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	e7df      	b.n	80049f8 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a38:	2500      	movs	r5, #0
 8004a3a:	9500      	str	r5, [sp, #0]
 8004a3c:	f000 fa4d 	bl	8004eda <xQueueGenericCreateStatic>
 8004a40:	4605      	mov	r5, r0
 8004a42:	e7de      	b.n	8004a02 <osMessageQueueNew+0x52>
      mem = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e7d7      	b.n	80049f8 <osMessageQueueNew+0x48>
    mem = -1;
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4c:	e7d4      	b.n	80049f8 <osMessageQueueNew+0x48>
          mem = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e7d2      	b.n	80049f8 <osMessageQueueNew+0x48>
        name = NULL;
 8004a52:	2100      	movs	r1, #0
 8004a54:	e7d8      	b.n	8004a08 <osMessageQueueNew+0x58>
  hQueue = NULL;
 8004a56:	2500      	movs	r5, #0
 8004a58:	e7d9      	b.n	8004a0e <osMessageQueueNew+0x5e>
 8004a5a:	2500      	movs	r5, #0
 8004a5c:	e7d7      	b.n	8004a0e <osMessageQueueNew+0x5e>
 8004a5e:	2500      	movs	r5, #0
 8004a60:	e7d5      	b.n	8004a0e <osMessageQueueNew+0x5e>
 8004a62:	2500      	movs	r5, #0
 8004a64:	e7d3      	b.n	8004a0e <osMessageQueueNew+0x5e>
 8004a66:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8004a68:	e7d1      	b.n	8004a0e <osMessageQueueNew+0x5e>
 8004a6a:	bf00      	nop
 8004a6c:	200002b0 	.word	0x200002b0

08004a70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004a70:	b510      	push	{r4, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a76:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8004a7a:	b9b3      	cbnz	r3, 8004aaa <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a80:	b99b      	cbnz	r3, 8004aaa <osMessageQueuePut+0x3a>
 8004a82:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <osMessageQueuePut+0x9c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d00b      	beq.n	8004aa2 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a8a:	b3a0      	cbz	r0, 8004af6 <osMessageQueuePut+0x86>
 8004a8c:	b3b1      	cbz	r1, 8004afc <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	4622      	mov	r2, r4
 8004a92:	f000 fa91 	bl	8004fb8 <xQueueGenericSend>
 8004a96:	2801      	cmp	r0, #1
 8004a98:	d033      	beq.n	8004b02 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 8004a9a:	b3a4      	cbz	r4, 8004b06 <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8004a9c:	f06f 0001 	mvn.w	r0, #1
 8004aa0:	e027      	b.n	8004af2 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ef      	beq.n	8004a8a <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aaa:	b1a8      	cbz	r0, 8004ad8 <osMessageQueuePut+0x68>
 8004aac:	b1b9      	cbz	r1, 8004ade <osMessageQueuePut+0x6e>
 8004aae:	b9cc      	cbnz	r4, 8004ae4 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	aa02      	add	r2, sp, #8
 8004ab4:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004ab8:	f000 fb3c 	bl	8005134 <xQueueGenericSendFromISR>
 8004abc:	2801      	cmp	r0, #1
 8004abe:	d114      	bne.n	8004aea <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8004ac0:	9b01      	ldr	r3, [sp, #4]
 8004ac2:	b1ab      	cbz	r3, 8004af0 <osMessageQueuePut+0x80>
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <osMessageQueuePut+0xa0>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	e00c      	b.n	8004af2 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 8004ad8:	f06f 0003 	mvn.w	r0, #3
 8004adc:	e009      	b.n	8004af2 <osMessageQueuePut+0x82>
 8004ade:	f06f 0003 	mvn.w	r0, #3
 8004ae2:	e006      	b.n	8004af2 <osMessageQueuePut+0x82>
 8004ae4:	f06f 0003 	mvn.w	r0, #3
 8004ae8:	e003      	b.n	8004af2 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 8004aea:	f06f 0002 	mvn.w	r0, #2
 8004aee:	e000      	b.n	8004af2 <osMessageQueuePut+0x82>
  stat = osOK;
 8004af0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004af2:	b002      	add	sp, #8
 8004af4:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8004af6:	f06f 0003 	mvn.w	r0, #3
 8004afa:	e7fa      	b.n	8004af2 <osMessageQueuePut+0x82>
 8004afc:	f06f 0003 	mvn.w	r0, #3
 8004b00:	e7f7      	b.n	8004af2 <osMessageQueuePut+0x82>
  stat = osOK;
 8004b02:	2000      	movs	r0, #0
 8004b04:	e7f5      	b.n	8004af2 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 8004b06:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8004b0a:	e7f2      	b.n	8004af2 <osMessageQueuePut+0x82>
 8004b0c:	200002b0 	.word	0x200002b0
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004b14:	b510      	push	{r4, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8004b1e:	b9ab      	cbnz	r3, 8004b4c <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b20:	f3ef 8310 	mrs	r3, PRIMASK
 8004b24:	b993      	cbnz	r3, 8004b4c <osMessageQueueGet+0x38>
 8004b26:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <osMessageQueueGet+0x9c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d00a      	beq.n	8004b44 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b2e:	b398      	cbz	r0, 8004b98 <osMessageQueueGet+0x84>
 8004b30:	b3a9      	cbz	r1, 8004b9e <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b32:	4622      	mov	r2, r4
 8004b34:	f000 fb64 	bl	8005200 <xQueueReceive>
 8004b38:	2801      	cmp	r0, #1
 8004b3a:	d033      	beq.n	8004ba4 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 8004b3c:	b3a4      	cbz	r4, 8004ba8 <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 8004b3e:	f06f 0001 	mvn.w	r0, #1
 8004b42:	e027      	b.n	8004b94 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b44:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b4c:	b1a8      	cbz	r0, 8004b7a <osMessageQueueGet+0x66>
 8004b4e:	b1b9      	cbz	r1, 8004b80 <osMessageQueueGet+0x6c>
 8004b50:	b9cc      	cbnz	r4, 8004b86 <osMessageQueueGet+0x72>
      yield = pdFALSE;
 8004b52:	aa02      	add	r2, sp, #8
 8004b54:	2300      	movs	r3, #0
 8004b56:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004b5a:	f000 fbfd 	bl	8005358 <xQueueReceiveFromISR>
 8004b5e:	2801      	cmp	r0, #1
 8004b60:	d114      	bne.n	8004b8c <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 8004b62:	9b01      	ldr	r3, [sp, #4]
 8004b64:	b1ab      	cbz	r3, 8004b92 <osMessageQueueGet+0x7e>
 8004b66:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <osMessageQueueGet+0xa0>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004b76:	2000      	movs	r0, #0
 8004b78:	e00c      	b.n	8004b94 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8004b7a:	f06f 0003 	mvn.w	r0, #3
 8004b7e:	e009      	b.n	8004b94 <osMessageQueueGet+0x80>
 8004b80:	f06f 0003 	mvn.w	r0, #3
 8004b84:	e006      	b.n	8004b94 <osMessageQueueGet+0x80>
 8004b86:	f06f 0003 	mvn.w	r0, #3
 8004b8a:	e003      	b.n	8004b94 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 8004b8c:	f06f 0002 	mvn.w	r0, #2
 8004b90:	e000      	b.n	8004b94 <osMessageQueueGet+0x80>
  stat = osOK;
 8004b92:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004b94:	b002      	add	sp, #8
 8004b96:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8004b98:	f06f 0003 	mvn.w	r0, #3
 8004b9c:	e7fa      	b.n	8004b94 <osMessageQueueGet+0x80>
 8004b9e:	f06f 0003 	mvn.w	r0, #3
 8004ba2:	e7f7      	b.n	8004b94 <osMessageQueueGet+0x80>
  stat = osOK;
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e7f5      	b.n	8004b94 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 8004ba8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8004bac:	e7f2      	b.n	8004b94 <osMessageQueueGet+0x80>
 8004bae:	bf00      	nop
 8004bb0:	200002b0 	.word	0x200002b0
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8004bb8:	b198      	cbz	r0, 8004be2 <osMessageQueueGetCount+0x2a>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004bba:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bbc:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8004bc0:	b963      	cbnz	r3, 8004bdc <osMessageQueueGetCount+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc6:	b94b      	cbnz	r3, 8004bdc <osMessageQueueGetCount+0x24>
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <osMessageQueueGetCount+0x30>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d102      	bne.n	8004bd6 <osMessageQueueGetCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd4:	b913      	cbnz	r3, 8004bdc <osMessageQueueGetCount+0x24>
    count = uxQueueMessagesWaitingFromISR (hQueue);
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004bd6:	f000 fc14 	bl	8005402 <uxQueueMessagesWaiting>
 8004bda:	e001      	b.n	8004be0 <osMessageQueueGetCount+0x28>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004bdc:	f000 fc24 	bl	8005428 <uxQueueMessagesWaitingFromISR>
  }

  return ((uint32_t)count);
}
 8004be0:	bd08      	pop	{r3, pc}
    count = 0U;
 8004be2:	2000      	movs	r0, #0
}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	200002b0 	.word	0x200002b0

08004bec <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8004bec:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bee:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bf2:	b99b      	cbnz	r3, 8004c1c <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf8:	b99b      	cbnz	r3, 8004c22 <osMessageQueueReset+0x36>
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <osMessageQueueReset+0x44>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d005      	beq.n	8004c0e <osMessageQueueReset+0x22>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8004c02:	b188      	cbz	r0, 8004c28 <osMessageQueueReset+0x3c>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8004c04:	2100      	movs	r1, #0
 8004c06:	f000 f915 	bl	8004e34 <xQueueGenericReset>
    stat = osOK;
 8004c0a:	2000      	movs	r0, #0
  }

  return (stat);
}
 8004c0c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c0e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f5      	beq.n	8004c02 <osMessageQueueReset+0x16>
    stat = osErrorISR;
 8004c16:	f06f 0005 	mvn.w	r0, #5
 8004c1a:	e7f7      	b.n	8004c0c <osMessageQueueReset+0x20>
 8004c1c:	f06f 0005 	mvn.w	r0, #5
 8004c20:	e7f4      	b.n	8004c0c <osMessageQueueReset+0x20>
 8004c22:	f06f 0005 	mvn.w	r0, #5
 8004c26:	e7f1      	b.n	8004c0c <osMessageQueueReset+0x20>
    stat = osErrorParameter;
 8004c28:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8004c2c:	e7ee      	b.n	8004c0c <osMessageQueueReset+0x20>
 8004c2e:	bf00      	nop
 8004c30:	200002b0 	.word	0x200002b0

08004c34 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <vApplicationGetIdleTaskMemory+0x10>)
 8004c36:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <vApplicationGetIdleTaskMemory+0x14>)
 8004c3a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	6013      	str	r3, [r2, #0]
}
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000254 	.word	0x20000254
 8004c48:	20000054 	.word	0x20000054

08004c4c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <vApplicationGetTimerTaskMemory+0x10>)
 8004c4e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <vApplicationGetTimerTaskMemory+0x14>)
 8004c52:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c58:	6013      	str	r3, [r2, #0]
}
 8004c5a:	4770      	bx	lr
 8004c5c:	200006b4 	.word	0x200006b4
 8004c60:	200002b4 	.word	0x200002b4

08004c64 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c64:	f100 0308 	add.w	r3, r0, #8
 8004c68:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c70:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c72:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c78:	4770      	bx	lr

08004c7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c7e:	4770      	bx	lr

08004c80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c80:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c82:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c8c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c8e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004c90:	6803      	ldr	r3, [r0, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	6003      	str	r3, [r0, #0]
}
 8004c96:	4770      	bx	lr

08004c98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c98:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c9a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ca0:	d002      	beq.n	8004ca8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca2:	f100 0208 	add.w	r2, r0, #8
 8004ca6:	e002      	b.n	8004cae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ca8:	6902      	ldr	r2, [r0, #16]
 8004caa:	e004      	b.n	8004cb6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cac:	461a      	mov	r2, r3
 8004cae:	6853      	ldr	r3, [r2, #4]
 8004cb0:	681c      	ldr	r4, [r3, #0]
 8004cb2:	42ac      	cmp	r4, r5
 8004cb4:	d9fa      	bls.n	8004cac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cb6:	6853      	ldr	r3, [r2, #4]
 8004cb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cbc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cbe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cc0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004cc2:	6803      	ldr	r3, [r0, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	6003      	str	r3, [r0, #0]
}
 8004cc8:	bc30      	pop	{r4, r5}
 8004cca:	4770      	bx	lr

08004ccc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ccc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cce:	6842      	ldr	r2, [r0, #4]
 8004cd0:	6881      	ldr	r1, [r0, #8]
 8004cd2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cd4:	6882      	ldr	r2, [r0, #8]
 8004cd6:	6841      	ldr	r1, [r0, #4]
 8004cd8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4282      	cmp	r2, r0
 8004cde:	d006      	beq.n	8004cee <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cea:	6818      	ldr	r0, [r3, #0]
}
 8004cec:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cee:	6882      	ldr	r2, [r0, #8]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	e7f5      	b.n	8004ce0 <uxListRemove+0x14>

08004cf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf8:	f001 fc94 	bl	8006624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cfc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004cfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d004      	beq.n	8004d0e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004d04:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004d06:	f001 fcaf 	bl	8006668 <vPortExitCritical>

	return xReturn;
}
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004d0e:	2401      	movs	r4, #1
 8004d10:	e7f9      	b.n	8004d06 <prvIsQueueFull+0x12>

08004d12 <prvIsQueueEmpty>:
{
 8004d12:	b510      	push	{r4, lr}
 8004d14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004d16:	f001 fc85 	bl	8006624 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d1c:	b123      	cbz	r3, 8004d28 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8004d1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004d20:	f001 fca2 	bl	8006668 <vPortExitCritical>
}
 8004d24:	4620      	mov	r0, r4
 8004d26:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004d28:	2401      	movs	r4, #1
 8004d2a:	e7f9      	b.n	8004d20 <prvIsQueueEmpty+0xe>

08004d2c <prvCopyDataToQueue>:
{
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d32:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004d36:	b95a      	cbnz	r2, 8004d50 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d38:	6803      	ldr	r3, [r0, #0]
 8004d3a:	b11b      	cbz	r3, 8004d44 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004d3c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d3e:	3501      	adds	r5, #1
 8004d40:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d44:	6840      	ldr	r0, [r0, #4]
 8004d46:	f001 f853 	bl	8005df0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6063      	str	r3, [r4, #4]
 8004d4e:	e7f6      	b.n	8004d3e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004d50:	b96e      	cbnz	r6, 8004d6e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d52:	6880      	ldr	r0, [r0, #8]
 8004d54:	f001 fefe 	bl	8006b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d60:	6862      	ldr	r2, [r4, #4]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d319      	bcc.n	8004d9a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e7e7      	b.n	8004d3e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6e:	68c0      	ldr	r0, [r0, #12]
 8004d70:	f001 fef0 	bl	8006b54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d76:	4252      	negs	r2, r2
 8004d78:	68e3      	ldr	r3, [r4, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d7e:	6821      	ldr	r1, [r4, #0]
 8004d80:	428b      	cmp	r3, r1
 8004d82:	d202      	bcs.n	8004d8a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	441a      	add	r2, r3
 8004d88:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004d8a:	2e02      	cmp	r6, #2
 8004d8c:	d001      	beq.n	8004d92 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e7d5      	b.n	8004d3e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d92:	b125      	cbz	r5, 8004d9e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004d94:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8004d96:	2000      	movs	r0, #0
 8004d98:	e7d1      	b.n	8004d3e <prvCopyDataToQueue+0x12>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e7cf      	b.n	8004d3e <prvCopyDataToQueue+0x12>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e7cd      	b.n	8004d3e <prvCopyDataToQueue+0x12>

08004da2 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004da2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004da4:	b172      	cbz	r2, 8004dc4 <prvCopyDataFromQueue+0x22>
{
 8004da6:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004da8:	68c3      	ldr	r3, [r0, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dae:	6844      	ldr	r4, [r0, #4]
 8004db0:	42a3      	cmp	r3, r4
 8004db2:	d301      	bcc.n	8004db8 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004db4:	6803      	ldr	r3, [r0, #0]
 8004db6:	60c3      	str	r3, [r0, #12]
 8004db8:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004dba:	68c1      	ldr	r1, [r0, #12]
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f001 fec9 	bl	8006b54 <memcpy>
}
 8004dc2:	bd10      	pop	{r4, pc}
 8004dc4:	4770      	bx	lr

08004dc6 <prvUnlockQueue>:
{
 8004dc6:	b538      	push	{r3, r4, r5, lr}
 8004dc8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004dca:	f001 fc2b 	bl	8006624 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004dce:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004dd2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dd4:	e003      	b.n	8004dde <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8004dd6:	f000 ffef 	bl	8005db8 <vTaskMissedYield>
			--cTxLock;
 8004dda:	3c01      	subs	r4, #1
 8004ddc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dde:	2c00      	cmp	r4, #0
 8004de0:	dd08      	ble.n	8004df4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004de2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004de4:	b133      	cbz	r3, 8004df4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004de6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004dea:	f000 ff53 	bl	8005c94 <xTaskRemoveFromEventList>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d0f3      	beq.n	8004dda <prvUnlockQueue+0x14>
 8004df2:	e7f0      	b.n	8004dd6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004df4:	23ff      	movs	r3, #255	; 0xff
 8004df6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004dfa:	f001 fc35 	bl	8006668 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004dfe:	f001 fc11 	bl	8006624 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004e02:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004e06:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e08:	e003      	b.n	8004e12 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8004e0a:	f000 ffd5 	bl	8005db8 <vTaskMissedYield>
				--cRxLock;
 8004e0e:	3c01      	subs	r4, #1
 8004e10:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e12:	2c00      	cmp	r4, #0
 8004e14:	dd08      	ble.n	8004e28 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e16:	692b      	ldr	r3, [r5, #16]
 8004e18:	b133      	cbz	r3, 8004e28 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1a:	f105 0010 	add.w	r0, r5, #16
 8004e1e:	f000 ff39 	bl	8005c94 <xTaskRemoveFromEventList>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d0f3      	beq.n	8004e0e <prvUnlockQueue+0x48>
 8004e26:	e7f0      	b.n	8004e0a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004e28:	23ff      	movs	r3, #255	; 0xff
 8004e2a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004e2e:	f001 fc1b 	bl	8006668 <vPortExitCritical>
}
 8004e32:	bd38      	pop	{r3, r4, r5, pc}

08004e34 <xQueueGenericReset>:
{
 8004e34:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004e36:	b940      	cbnz	r0, 8004e4a <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericReset+0x14>
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004e4e:	f001 fbe9 	bl	8006624 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e52:	6821      	ldr	r1, [r4, #0]
 8004e54:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e58:	fb03 1002 	mla	r0, r3, r2, r1
 8004e5c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e5e:	2000      	movs	r0, #0
 8004e60:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e62:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004e64:	3a01      	subs	r2, #1
 8004e66:	fb02 1303 	mla	r3, r2, r3, r1
 8004e6a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e6c:	23ff      	movs	r3, #255	; 0xff
 8004e6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004e76:	b9a5      	cbnz	r5, 8004ea2 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e78:	6923      	ldr	r3, [r4, #16]
 8004e7a:	b91b      	cbnz	r3, 8004e84 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004e7c:	f001 fbf4 	bl	8006668 <vPortExitCritical>
}
 8004e80:	2001      	movs	r0, #1
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e84:	f104 0010 	add.w	r0, r4, #16
 8004e88:	f000 ff04 	bl	8005c94 <xTaskRemoveFromEventList>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d0f5      	beq.n	8004e7c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <xQueueGenericReset+0x80>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	e7ec      	b.n	8004e7c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ea2:	f104 0010 	add.w	r0, r4, #16
 8004ea6:	f7ff fedd 	bl	8004c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004eaa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004eae:	f7ff fed9 	bl	8004c64 <vListInitialise>
 8004eb2:	e7e3      	b.n	8004e7c <xQueueGenericReset+0x48>
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <prvInitialiseNewQueue>:
{
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	461d      	mov	r5, r3
 8004ebc:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	b149      	cbz	r1, 8004ed6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ec2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004ec4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ec6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7ff ffb2 	bl	8004e34 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004ed0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ed6:	6024      	str	r4, [r4, #0]
 8004ed8:	e7f4      	b.n	8004ec4 <prvInitialiseNewQueue+0xc>

08004eda <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eda:	b940      	cbnz	r0, 8004eee <xQueueGenericCreateStatic+0x14>
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	e7fe      	b.n	8004eec <xQueueGenericCreateStatic+0x12>
	{
 8004eee:	b510      	push	{r4, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8004ef4:	b153      	cbz	r3, 8004f0c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ef6:	b192      	cbz	r2, 8004f1e <xQueueGenericCreateStatic+0x44>
 8004ef8:	b989      	cbnz	r1, 8004f1e <xQueueGenericCreateStatic+0x44>
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	e7fe      	b.n	8004f0a <xQueueGenericCreateStatic+0x30>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f1e:	b94a      	cbnz	r2, 8004f34 <xQueueGenericCreateStatic+0x5a>
 8004f20:	b141      	cbz	r1, 8004f34 <xQueueGenericCreateStatic+0x5a>
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	e7fe      	b.n	8004f32 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f34:	2050      	movs	r0, #80	; 0x50
 8004f36:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f38:	9803      	ldr	r0, [sp, #12]
 8004f3a:	2850      	cmp	r0, #80	; 0x50
 8004f3c:	d008      	beq.n	8004f50 <xQueueGenericCreateStatic+0x76>
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	e7fe      	b.n	8004f4e <xQueueGenericCreateStatic+0x74>
 8004f50:	4620      	mov	r0, r4
 8004f52:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f5a:	9400      	str	r4, [sp, #0]
 8004f5c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004f60:	f7ff ffaa 	bl	8004eb8 <prvInitialiseNewQueue>
	}
 8004f64:	4620      	mov	r0, r4
 8004f66:	b004      	add	sp, #16
 8004f68:	bd10      	pop	{r4, pc}

08004f6a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f6a:	b940      	cbnz	r0, 8004f7e <xQueueGenericCreate+0x14>
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGenericCreate+0x12>
	{
 8004f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f80:	b083      	sub	sp, #12
 8004f82:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8004f84:	b111      	cbz	r1, 8004f8c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f86:	fb01 f000 	mul.w	r0, r1, r0
 8004f8a:	e000      	b.n	8004f8e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	4617      	mov	r7, r2
 8004f90:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004f92:	3050      	adds	r0, #80	; 0x50
 8004f94:	f001 fcfe 	bl	8006994 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004f98:	4605      	mov	r5, r0
 8004f9a:	b150      	cbz	r0, 8004fb2 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fa2:	9000      	str	r0, [sp, #0]
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8004faa:	4621      	mov	r1, r4
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff ff83 	bl	8004eb8 <prvInitialiseNewQueue>
	}
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	b003      	add	sp, #12
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb8 <xQueueGenericSend>:
{
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004fbe:	b160      	cbz	r0, 8004fda <xQueueGenericSend+0x22>
 8004fc0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc2:	b999      	cbnz	r1, 8004fec <xQueueGenericSend+0x34>
 8004fc4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004fc6:	b18a      	cbz	r2, 8004fec <xQueueGenericSend+0x34>
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	e7fe      	b.n	8004fd8 <xQueueGenericSend+0x20>
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	e7fe      	b.n	8004fea <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d10b      	bne.n	8005008 <xQueueGenericSend+0x50>
 8004ff0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ff2:	2a01      	cmp	r2, #1
 8004ff4:	d008      	beq.n	8005008 <xQueueGenericSend+0x50>
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	e7fe      	b.n	8005006 <xQueueGenericSend+0x4e>
 8005008:	461e      	mov	r6, r3
 800500a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800500c:	f000 fee0 	bl	8005dd0 <xTaskGetSchedulerState>
 8005010:	b950      	cbnz	r0, 8005028 <xQueueGenericSend+0x70>
 8005012:	9b01      	ldr	r3, [sp, #4]
 8005014:	b153      	cbz	r3, 800502c <xQueueGenericSend+0x74>
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	e7fe      	b.n	8005026 <xQueueGenericSend+0x6e>
 8005028:	2500      	movs	r5, #0
 800502a:	e03a      	b.n	80050a2 <xQueueGenericSend+0xea>
 800502c:	2500      	movs	r5, #0
 800502e:	e038      	b.n	80050a2 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005030:	4632      	mov	r2, r6
 8005032:	4639      	mov	r1, r7
 8005034:	4620      	mov	r0, r4
 8005036:	f7ff fe79 	bl	8004d2c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800503a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800503c:	b94b      	cbnz	r3, 8005052 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 800503e:	b1a8      	cbz	r0, 800506c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8005040:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <xQueueGenericSend+0x178>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	e00c      	b.n	800506c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005052:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005056:	f000 fe1d 	bl	8005c94 <xTaskRemoveFromEventList>
 800505a:	b138      	cbz	r0, 800506c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800505c:	4b34      	ldr	r3, [pc, #208]	; (8005130 <xQueueGenericSend+0x178>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800506c:	f001 fafc 	bl	8006668 <vPortExitCritical>
				return pdPASS;
 8005070:	2001      	movs	r0, #1
}
 8005072:	b005      	add	sp, #20
 8005074:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8005076:	f001 faf7 	bl	8006668 <vPortExitCritical>
					return errQUEUE_FULL;
 800507a:	2000      	movs	r0, #0
 800507c:	e7f9      	b.n	8005072 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800507e:	a802      	add	r0, sp, #8
 8005080:	f000 fe4e 	bl	8005d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005084:	2501      	movs	r5, #1
 8005086:	e019      	b.n	80050bc <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8005088:	2300      	movs	r3, #0
 800508a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800508e:	e021      	b.n	80050d4 <xQueueGenericSend+0x11c>
 8005090:	2300      	movs	r3, #0
 8005092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005096:	e023      	b.n	80050e0 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff fe94 	bl	8004dc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800509e:	f000 fcd9 	bl	8005a54 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80050a2:	f001 fabf 	bl	8006624 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3c0      	bcc.n	8005030 <xQueueGenericSend+0x78>
 80050ae:	2e02      	cmp	r6, #2
 80050b0:	d0be      	beq.n	8005030 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b2:	9b01      	ldr	r3, [sp, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0de      	beq.n	8005076 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	d0e0      	beq.n	800507e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 80050bc:	f001 fad4 	bl	8006668 <vPortExitCritical>
		vTaskSuspendAll();
 80050c0:	f000 fc2e 	bl	8005920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050c4:	f001 faae 	bl	8006624 <vPortEnterCritical>
 80050c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80050cc:	b25b      	sxtb	r3, r3
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d0d9      	beq.n	8005088 <xQueueGenericSend+0xd0>
 80050d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80050d8:	b25b      	sxtb	r3, r3
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d0d7      	beq.n	8005090 <xQueueGenericSend+0xd8>
 80050e0:	f001 fac2 	bl	8006668 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050e4:	a901      	add	r1, sp, #4
 80050e6:	a802      	add	r0, sp, #8
 80050e8:	f000 fe26 	bl	8005d38 <xTaskCheckForTimeOut>
 80050ec:	b9c8      	cbnz	r0, 8005122 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050ee:	4620      	mov	r0, r4
 80050f0:	f7ff fe00 	bl	8004cf4 <prvIsQueueFull>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d0cf      	beq.n	8005098 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050f8:	9901      	ldr	r1, [sp, #4]
 80050fa:	f104 0010 	add.w	r0, r4, #16
 80050fe:	f000 fd95 	bl	8005c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005102:	4620      	mov	r0, r4
 8005104:	f7ff fe5f 	bl	8004dc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005108:	f000 fca4 	bl	8005a54 <xTaskResumeAll>
 800510c:	2800      	cmp	r0, #0
 800510e:	d1c8      	bne.n	80050a2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <xQueueGenericSend+0x178>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	e7bf      	b.n	80050a2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8005122:	4620      	mov	r0, r4
 8005124:	f7ff fe4f 	bl	8004dc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005128:	f000 fc94 	bl	8005a54 <xTaskResumeAll>
			return errQUEUE_FULL;
 800512c:	2000      	movs	r0, #0
 800512e:	e7a0      	b.n	8005072 <xQueueGenericSend+0xba>
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <xQueueGenericSendFromISR>:
{
 8005134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005138:	b160      	cbz	r0, 8005154 <xQueueGenericSendFromISR+0x20>
 800513a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800513c:	b999      	cbnz	r1, 8005166 <xQueueGenericSendFromISR+0x32>
 800513e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005140:	b188      	cbz	r0, 8005166 <xQueueGenericSendFromISR+0x32>
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	e7fe      	b.n	8005152 <xQueueGenericSendFromISR+0x1e>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	e7fe      	b.n	8005164 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005166:	2b02      	cmp	r3, #2
 8005168:	d10b      	bne.n	8005182 <xQueueGenericSendFromISR+0x4e>
 800516a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800516c:	2801      	cmp	r0, #1
 800516e:	d008      	beq.n	8005182 <xQueueGenericSendFromISR+0x4e>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	e7fe      	b.n	8005180 <xQueueGenericSendFromISR+0x4c>
 8005182:	461f      	mov	r7, r3
 8005184:	4690      	mov	r8, r2
 8005186:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005188:	f001 fb76 	bl	8006878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800518c:	f3ef 8611 	mrs	r6, BASEPRI
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d303      	bcc.n	80051b0 <xQueueGenericSendFromISR+0x7c>
 80051a8:	2f02      	cmp	r7, #2
 80051aa:	d001      	beq.n	80051b0 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80051ac:	2000      	movs	r0, #0
 80051ae:	e00f      	b.n	80051d0 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 80051b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80051b4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051b6:	463a      	mov	r2, r7
 80051b8:	4649      	mov	r1, r9
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7ff fdb6 	bl	8004d2c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80051c0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80051c4:	d008      	beq.n	80051d8 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051c6:	1c6b      	adds	r3, r5, #1
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80051ce:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051d0:	f386 8811 	msr	BASEPRI, r6
}
 80051d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051da:	b15b      	cbz	r3, 80051f4 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051e0:	f000 fd58 	bl	8005c94 <xTaskRemoveFromEventList>
 80051e4:	b140      	cbz	r0, 80051f8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80051e6:	f1b8 0f00 	cmp.w	r8, #0
 80051ea:	d007      	beq.n	80051fc <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051ec:	2001      	movs	r0, #1
 80051ee:	f8c8 0000 	str.w	r0, [r8]
 80051f2:	e7ed      	b.n	80051d0 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 80051f4:	2001      	movs	r0, #1
 80051f6:	e7eb      	b.n	80051d0 <xQueueGenericSendFromISR+0x9c>
 80051f8:	2001      	movs	r0, #1
 80051fa:	e7e9      	b.n	80051d0 <xQueueGenericSendFromISR+0x9c>
 80051fc:	2001      	movs	r0, #1
 80051fe:	e7e7      	b.n	80051d0 <xQueueGenericSendFromISR+0x9c>

08005200 <xQueueReceive>:
{
 8005200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005202:	b085      	sub	sp, #20
 8005204:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005206:	b160      	cbz	r0, 8005222 <xQueueReceive+0x22>
 8005208:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800520a:	b999      	cbnz	r1, 8005234 <xQueueReceive+0x34>
 800520c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800520e:	b18b      	cbz	r3, 8005234 <xQueueReceive+0x34>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	e7fe      	b.n	8005220 <xQueueReceive+0x20>
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	e7fe      	b.n	8005232 <xQueueReceive+0x32>
 8005234:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005236:	f000 fdcb 	bl	8005dd0 <xTaskGetSchedulerState>
 800523a:	b950      	cbnz	r0, 8005252 <xQueueReceive+0x52>
 800523c:	9b01      	ldr	r3, [sp, #4]
 800523e:	b153      	cbz	r3, 8005256 <xQueueReceive+0x56>
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	e7fe      	b.n	8005250 <xQueueReceive+0x50>
 8005252:	2600      	movs	r6, #0
 8005254:	e03e      	b.n	80052d4 <xQueueReceive+0xd4>
 8005256:	2600      	movs	r6, #0
 8005258:	e03c      	b.n	80052d4 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800525a:	4639      	mov	r1, r7
 800525c:	4620      	mov	r0, r4
 800525e:	f7ff fda0 	bl	8004da2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005262:	3d01      	subs	r5, #1
 8005264:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	b923      	cbnz	r3, 8005274 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800526a:	f001 f9fd 	bl	8006668 <vPortExitCritical>
				return pdPASS;
 800526e:	2001      	movs	r0, #1
}
 8005270:	b005      	add	sp, #20
 8005272:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005274:	f104 0010 	add.w	r0, r4, #16
 8005278:	f000 fd0c 	bl	8005c94 <xTaskRemoveFromEventList>
 800527c:	2800      	cmp	r0, #0
 800527e:	d0f4      	beq.n	800526a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8005280:	4b34      	ldr	r3, [pc, #208]	; (8005354 <xQueueReceive+0x154>)
 8005282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	e7eb      	b.n	800526a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8005292:	f001 f9e9 	bl	8006668 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005296:	2000      	movs	r0, #0
 8005298:	e7ea      	b.n	8005270 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800529a:	a802      	add	r0, sp, #8
 800529c:	f000 fd40 	bl	8005d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052a0:	2601      	movs	r6, #1
 80052a2:	e021      	b.n	80052e8 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 80052a4:	2300      	movs	r3, #0
 80052a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80052aa:	e029      	b.n	8005300 <xQueueReceive+0x100>
 80052ac:	2300      	movs	r3, #0
 80052ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052b2:	e02b      	b.n	800530c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7ff fd86 	bl	8004dc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052ba:	f000 fbcb 	bl	8005a54 <xTaskResumeAll>
 80052be:	e009      	b.n	80052d4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff fd80 	bl	8004dc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052c6:	f000 fbc5 	bl	8005a54 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff fd21 	bl	8004d12 <prvIsQueueEmpty>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d13d      	bne.n	8005350 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 80052d4:	f001 f9a6 	bl	8006624 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052da:	2d00      	cmp	r5, #0
 80052dc:	d1bd      	bne.n	800525a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80052de:	9b01      	ldr	r3, [sp, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0d6      	beq.n	8005292 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	d0d8      	beq.n	800529a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 80052e8:	f001 f9be 	bl	8006668 <vPortExitCritical>
		vTaskSuspendAll();
 80052ec:	f000 fb18 	bl	8005920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052f0:	f001 f998 	bl	8006624 <vPortEnterCritical>
 80052f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80052f8:	b25b      	sxtb	r3, r3
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d0d1      	beq.n	80052a4 <xQueueReceive+0xa4>
 8005300:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005304:	b25b      	sxtb	r3, r3
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d0cf      	beq.n	80052ac <xQueueReceive+0xac>
 800530c:	f001 f9ac 	bl	8006668 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005310:	a901      	add	r1, sp, #4
 8005312:	a802      	add	r0, sp, #8
 8005314:	f000 fd10 	bl	8005d38 <xTaskCheckForTimeOut>
 8005318:	2800      	cmp	r0, #0
 800531a:	d1d1      	bne.n	80052c0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800531c:	4620      	mov	r0, r4
 800531e:	f7ff fcf8 	bl	8004d12 <prvIsQueueEmpty>
 8005322:	2800      	cmp	r0, #0
 8005324:	d0c6      	beq.n	80052b4 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005326:	9901      	ldr	r1, [sp, #4]
 8005328:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800532c:	f000 fc7e 	bl	8005c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005330:	4620      	mov	r0, r4
 8005332:	f7ff fd48 	bl	8004dc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005336:	f000 fb8d 	bl	8005a54 <xTaskResumeAll>
 800533a:	2800      	cmp	r0, #0
 800533c:	d1ca      	bne.n	80052d4 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <xQueueReceive+0x154>)
 8005340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	e7c1      	b.n	80052d4 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8005350:	2000      	movs	r0, #0
 8005352:	e78d      	b.n	8005270 <xQueueReceive+0x70>
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <xQueueReceiveFromISR>:
{
 8005358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800535c:	b160      	cbz	r0, 8005378 <xQueueReceiveFromISR+0x20>
 800535e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005360:	b999      	cbnz	r1, 800538a <xQueueReceiveFromISR+0x32>
 8005362:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005364:	b18b      	cbz	r3, 800538a <xQueueReceiveFromISR+0x32>
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	e7fe      	b.n	8005376 <xQueueReceiveFromISR+0x1e>
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	e7fe      	b.n	8005388 <xQueueReceiveFromISR+0x30>
 800538a:	4617      	mov	r7, r2
 800538c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800538e:	f001 fa73 	bl	8006878 <vPortValidateInterruptPriority>
	__asm volatile
 8005392:	f3ef 8611 	mrs	r6, BASEPRI
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053aa:	f1b8 0f00 	cmp.w	r8, #0
 80053ae:	d01d      	beq.n	80053ec <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 80053b0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80053b4:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053b6:	4649      	mov	r1, r9
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7ff fcf2 	bl	8004da2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053be:	f108 33ff 	add.w	r3, r8, #4294967295
 80053c2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80053c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053c8:	d005      	beq.n	80053d6 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053ca:	1c6b      	adds	r3, r5, #1
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80053d2:	2001      	movs	r0, #1
 80053d4:	e00b      	b.n	80053ee <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	b16b      	cbz	r3, 80053f6 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053da:	f104 0010 	add.w	r0, r4, #16
 80053de:	f000 fc59 	bl	8005c94 <xTaskRemoveFromEventList>
 80053e2:	b150      	cbz	r0, 80053fa <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 80053e4:	b15f      	cbz	r7, 80053fe <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053e6:	2001      	movs	r0, #1
 80053e8:	6038      	str	r0, [r7, #0]
 80053ea:	e000      	b.n	80053ee <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 80053ec:	2000      	movs	r0, #0
	__asm volatile
 80053ee:	f386 8811 	msr	BASEPRI, r6
}
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 80053f6:	2001      	movs	r0, #1
 80053f8:	e7f9      	b.n	80053ee <xQueueReceiveFromISR+0x96>
 80053fa:	2001      	movs	r0, #1
 80053fc:	e7f7      	b.n	80053ee <xQueueReceiveFromISR+0x96>
 80053fe:	2001      	movs	r0, #1
 8005400:	e7f5      	b.n	80053ee <xQueueReceiveFromISR+0x96>

08005402 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8005402:	b940      	cbnz	r0, 8005416 <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	e7fe      	b.n	8005414 <uxQueueMessagesWaiting+0x12>
{
 8005416:	b510      	push	{r4, lr}
 8005418:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800541a:	f001 f903 	bl	8006624 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800541e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8005420:	f001 f922 	bl	8006668 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005424:	4620      	mov	r0, r4
 8005426:	bd10      	pop	{r4, pc}

08005428 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8005428:	b108      	cbz	r0, 800542e <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800542a:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800542c:	4770      	bx	lr
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	e7fe      	b.n	800543e <uxQueueMessagesWaitingFromISR+0x16>

08005440 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005440:	2300      	movs	r3, #0
 8005442:	2b07      	cmp	r3, #7
 8005444:	d80c      	bhi.n	8005460 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <vQueueAddToRegistry+0x24>)
 8005448:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800544c:	b10a      	cbz	r2, 8005452 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800544e:	3301      	adds	r3, #1
 8005450:	e7f7      	b.n	8005442 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005452:	4a04      	ldr	r2, [pc, #16]	; (8005464 <vQueueAddToRegistry+0x24>)
 8005454:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800545c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800545e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200024b4 	.word	0x200024b4

08005468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4604      	mov	r4, r0
 800546c:	460d      	mov	r5, r1
 800546e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005470:	f001 f8d8 	bl	8006624 <vPortEnterCritical>
 8005474:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005478:	b25b      	sxtb	r3, r3
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d00d      	beq.n	800549c <vQueueWaitForMessageRestricted+0x34>
 8005480:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d00b      	beq.n	80054a4 <vQueueWaitForMessageRestricted+0x3c>
 800548c:	f001 f8ec 	bl	8006668 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005492:	b15b      	cbz	r3, 80054ac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005494:	4620      	mov	r0, r4
 8005496:	f7ff fc96 	bl	8004dc6 <prvUnlockQueue>
	}
 800549a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800549c:	2300      	movs	r3, #0
 800549e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80054a2:	e7ed      	b.n	8005480 <vQueueWaitForMessageRestricted+0x18>
 80054a4:	2300      	movs	r3, #0
 80054a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054aa:	e7ef      	b.n	800548c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054ac:	4632      	mov	r2, r6
 80054ae:	4629      	mov	r1, r5
 80054b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054b4:	f000 fbd2 	bl	8005c5c <vTaskPlaceOnEventListRestricted>
 80054b8:	e7ec      	b.n	8005494 <vQueueWaitForMessageRestricted+0x2c>
	...

080054bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054bc:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <prvResetNextTaskUnblockTime+0x24>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	b13b      	cbz	r3, 80054d4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <prvResetNextTaskUnblockTime+0x24>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <prvResetNextTaskUnblockTime+0x28>)
 80054d0:	601a      	str	r2, [r3, #0]
	}
}
 80054d2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <prvResetNextTaskUnblockTime+0x28>)
 80054d6:	f04f 32ff 	mov.w	r2, #4294967295
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000714 	.word	0x20000714
 80054e4:	20000bbc 	.word	0x20000bbc

080054e8 <prvInitialiseNewTask>:
{
 80054e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ec:	4681      	mov	r9, r0
 80054ee:	460d      	mov	r5, r1
 80054f0:	4617      	mov	r7, r2
 80054f2:	469a      	mov	sl, r3
 80054f4:	9e08      	ldr	r6, [sp, #32]
 80054f6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80054fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054fc:	0092      	lsls	r2, r2, #2
 80054fe:	21a5      	movs	r1, #165	; 0xa5
 8005500:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005502:	f001 fb32 	bl	8006b6a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005508:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800550c:	3a01      	subs	r2, #1
 800550e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005512:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005516:	2300      	movs	r3, #0
 8005518:	2b0f      	cmp	r3, #15
 800551a:	d807      	bhi.n	800552c <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800551c:	5ce9      	ldrb	r1, [r5, r3]
 800551e:	18e2      	adds	r2, r4, r3
 8005520:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8005524:	5cea      	ldrb	r2, [r5, r3]
 8005526:	b10a      	cbz	r2, 800552c <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005528:	3301      	adds	r3, #1
 800552a:	e7f5      	b.n	8005518 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800552c:	2300      	movs	r3, #0
 800552e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005532:	2e37      	cmp	r6, #55	; 0x37
 8005534:	d900      	bls.n	8005538 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005536:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8005538:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800553a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800553c:	2500      	movs	r5, #0
 800553e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005540:	1d20      	adds	r0, r4, #4
 8005542:	f7ff fb9a 	bl	8004c7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005546:	f104 0018 	add.w	r0, r4, #24
 800554a:	f7ff fb96 	bl	8004c7a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800554e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005550:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8005554:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005556:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005558:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800555a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800555e:	4652      	mov	r2, sl
 8005560:	4649      	mov	r1, r9
 8005562:	4638      	mov	r0, r7
 8005564:	f001 f830 	bl	80065c8 <pxPortInitialiseStack>
 8005568:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800556a:	f1b8 0f00 	cmp.w	r8, #0
 800556e:	d001      	beq.n	8005574 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005570:	f8c8 4000 	str.w	r4, [r8]
}
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005578 <prvInitialiseTaskLists>:
{
 8005578:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800557a:	2400      	movs	r4, #0
 800557c:	e007      	b.n	800558e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800557e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005582:	0093      	lsls	r3, r2, #2
 8005584:	480e      	ldr	r0, [pc, #56]	; (80055c0 <prvInitialiseTaskLists+0x48>)
 8005586:	4418      	add	r0, r3
 8005588:	f7ff fb6c 	bl	8004c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800558c:	3401      	adds	r4, #1
 800558e:	2c37      	cmp	r4, #55	; 0x37
 8005590:	d9f5      	bls.n	800557e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005592:	4d0c      	ldr	r5, [pc, #48]	; (80055c4 <prvInitialiseTaskLists+0x4c>)
 8005594:	4628      	mov	r0, r5
 8005596:	f7ff fb65 	bl	8004c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800559a:	4c0b      	ldr	r4, [pc, #44]	; (80055c8 <prvInitialiseTaskLists+0x50>)
 800559c:	4620      	mov	r0, r4
 800559e:	f7ff fb61 	bl	8004c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055a2:	480a      	ldr	r0, [pc, #40]	; (80055cc <prvInitialiseTaskLists+0x54>)
 80055a4:	f7ff fb5e 	bl	8004c64 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80055a8:	4809      	ldr	r0, [pc, #36]	; (80055d0 <prvInitialiseTaskLists+0x58>)
 80055aa:	f7ff fb5b 	bl	8004c64 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80055ae:	4809      	ldr	r0, [pc, #36]	; (80055d4 <prvInitialiseTaskLists+0x5c>)
 80055b0:	f7ff fb58 	bl	8004c64 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <prvInitialiseTaskLists+0x60>)
 80055b6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <prvInitialiseTaskLists+0x64>)
 80055ba:	601c      	str	r4, [r3, #0]
}
 80055bc:	bd38      	pop	{r3, r4, r5, pc}
 80055be:	bf00      	nop
 80055c0:	2000071c 	.word	0x2000071c
 80055c4:	20000b94 	.word	0x20000b94
 80055c8:	20000ba8 	.word	0x20000ba8
 80055cc:	20000bc4 	.word	0x20000bc4
 80055d0:	20000bf0 	.word	0x20000bf0
 80055d4:	20000bdc 	.word	0x20000bdc
 80055d8:	20000714 	.word	0x20000714
 80055dc:	20000718 	.word	0x20000718

080055e0 <prvAddNewTaskToReadyList>:
{
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80055e4:	f001 f81e 	bl	8006624 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80055e8:	4a21      	ldr	r2, [pc, #132]	; (8005670 <prvAddNewTaskToReadyList+0x90>)
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055f0:	4b20      	ldr	r3, [pc, #128]	; (8005674 <prvAddNewTaskToReadyList+0x94>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	b15b      	cbz	r3, 800560e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <prvAddNewTaskToReadyList+0x98>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	b96b      	cbnz	r3, 8005618 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <prvAddNewTaskToReadyList+0x94>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005604:	429a      	cmp	r2, r3
 8005606:	d807      	bhi.n	8005618 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005608:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <prvAddNewTaskToReadyList+0x94>)
 800560a:	601c      	str	r4, [r3, #0]
 800560c:	e004      	b.n	8005618 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800560e:	4b19      	ldr	r3, [pc, #100]	; (8005674 <prvAddNewTaskToReadyList+0x94>)
 8005610:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d027      	beq.n	8005668 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8005618:	4a18      	ldr	r2, [pc, #96]	; (800567c <prvAddNewTaskToReadyList+0x9c>)
 800561a:	6813      	ldr	r3, [r2, #0]
 800561c:	3301      	adds	r3, #1
 800561e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005620:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005624:	4a16      	ldr	r2, [pc, #88]	; (8005680 <prvAddNewTaskToReadyList+0xa0>)
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <prvAddNewTaskToReadyList+0x50>
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <prvAddNewTaskToReadyList+0xa0>)
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005634:	009a      	lsls	r2, r3, #2
 8005636:	1d21      	adds	r1, r4, #4
 8005638:	4812      	ldr	r0, [pc, #72]	; (8005684 <prvAddNewTaskToReadyList+0xa4>)
 800563a:	4410      	add	r0, r2
 800563c:	f7ff fb20 	bl	8004c80 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005640:	f001 f812 	bl	8006668 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvAddNewTaskToReadyList+0x98>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b16b      	cbz	r3, 8005666 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <prvAddNewTaskToReadyList+0x94>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005652:	429a      	cmp	r2, r3
 8005654:	d207      	bcs.n	8005666 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <prvAddNewTaskToReadyList+0xa8>)
 8005658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
}
 8005666:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005668:	f7ff ff86 	bl	8005578 <prvInitialiseTaskLists>
 800566c:	e7d4      	b.n	8005618 <prvAddNewTaskToReadyList+0x38>
 800566e:	bf00      	nop
 8005670:	20000b7c 	.word	0x20000b7c
 8005674:	20000710 	.word	0x20000710
 8005678:	20000bd8 	.word	0x20000bd8
 800567c:	20000b8c 	.word	0x20000b8c
 8005680:	20000b90 	.word	0x20000b90
 8005684:	2000071c 	.word	0x2000071c
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <prvDeleteTCB>:
	{
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005690:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8005694:	b933      	cbnz	r3, 80056a4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8005696:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005698:	f001 fa00 	bl	8006a9c <vPortFree>
				vPortFree( pxTCB );
 800569c:	4620      	mov	r0, r4
 800569e:	f001 f9fd 	bl	8006a9c <vPortFree>
	}
 80056a2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d00a      	beq.n	80056be <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d0fa      	beq.n	80056a2 <prvDeleteTCB+0x16>
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	e7fe      	b.n	80056bc <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80056be:	f001 f9ed 	bl	8006a9c <vPortFree>
 80056c2:	e7ee      	b.n	80056a2 <prvDeleteTCB+0x16>

080056c4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056c4:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <prvCheckTasksWaitingTermination+0x40>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b1d3      	cbz	r3, 8005700 <prvCheckTasksWaitingTermination+0x3c>
{
 80056ca:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80056cc:	f000 ffaa 	bl	8006624 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80056d0:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <prvCheckTasksWaitingTermination+0x44>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d6:	1d20      	adds	r0, r4, #4
 80056d8:	f7ff faf8 	bl	8004ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <prvCheckTasksWaitingTermination+0x48>)
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056e4:	4a07      	ldr	r2, [pc, #28]	; (8005704 <prvCheckTasksWaitingTermination+0x40>)
 80056e6:	6813      	ldr	r3, [r2, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80056ec:	f000 ffbc 	bl	8006668 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7ff ffcb 	bl	800568c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f6:	4b03      	ldr	r3, [pc, #12]	; (8005704 <prvCheckTasksWaitingTermination+0x40>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e6      	bne.n	80056cc <prvCheckTasksWaitingTermination+0x8>
}
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000b80 	.word	0x20000b80
 8005708:	20000bf0 	.word	0x20000bf0
 800570c:	20000b7c 	.word	0x20000b7c

08005710 <prvIdleTask>:
{
 8005710:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005712:	f7ff ffd7 	bl	80056c4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvIdleTask+0x20>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d9f9      	bls.n	8005712 <prvIdleTask+0x2>
				taskYIELD();
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <prvIdleTask+0x24>)
 8005720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	e7f0      	b.n	8005712 <prvIdleTask+0x2>
 8005730:	2000071c 	.word	0x2000071c
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4604      	mov	r4, r0
 800573c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800573e:	4b17      	ldr	r3, [pc, #92]	; (800579c <prvAddCurrentTaskToDelayedList+0x64>)
 8005740:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005742:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	3004      	adds	r0, #4
 8005748:	f7ff fac0 	bl	8004ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800574c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005750:	d013      	beq.n	800577a <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005752:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800575a:	42a5      	cmp	r5, r4
 800575c:	d816      	bhi.n	800578c <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	3104      	adds	r1, #4
 8005768:	f7ff fa96 	bl	8004c98 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <prvAddCurrentTaskToDelayedList+0x70>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	42a3      	cmp	r3, r4
 8005772:	d912      	bls.n	800579a <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvAddCurrentTaskToDelayedList+0x70>)
 8005776:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005778:	e00f      	b.n	800579a <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800577a:	2e00      	cmp	r6, #0
 800577c:	d0e9      	beq.n	8005752 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800577e:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	3104      	adds	r1, #4
 8005784:	4809      	ldr	r0, [pc, #36]	; (80057ac <prvAddCurrentTaskToDelayedList+0x74>)
 8005786:	f7ff fa7b 	bl	8004c80 <vListInsertEnd>
 800578a:	e006      	b.n	800579a <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800578c:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <prvAddCurrentTaskToDelayedList+0x78>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <prvAddCurrentTaskToDelayedList+0x68>)
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	3104      	adds	r1, #4
 8005796:	f7ff fa7f 	bl	8004c98 <vListInsert>
}
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	20000c04 	.word	0x20000c04
 80057a0:	20000710 	.word	0x20000710
 80057a4:	20000714 	.word	0x20000714
 80057a8:	20000bbc 	.word	0x20000bbc
 80057ac:	20000bdc 	.word	0x20000bdc
 80057b0:	20000718 	.word	0x20000718

080057b4 <xTaskCreateStatic>:
	{
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80057ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80057bc:	b945      	cbnz	r5, 80057d0 <xTaskCreateStatic+0x1c>
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	e7fe      	b.n	80057ce <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80057d0:	b944      	cbnz	r4, 80057e4 <xTaskCreateStatic+0x30>
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	e7fe      	b.n	80057e2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80057e4:	265c      	movs	r6, #92	; 0x5c
 80057e6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057e8:	9e04      	ldr	r6, [sp, #16]
 80057ea:	2e5c      	cmp	r6, #92	; 0x5c
 80057ec:	d008      	beq.n	8005800 <xTaskCreateStatic+0x4c>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	e7fe      	b.n	80057fe <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005800:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005802:	2502      	movs	r5, #2
 8005804:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005808:	2500      	movs	r5, #0
 800580a:	9503      	str	r5, [sp, #12]
 800580c:	9402      	str	r4, [sp, #8]
 800580e:	ad05      	add	r5, sp, #20
 8005810:	9501      	str	r5, [sp, #4]
 8005812:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005814:	9500      	str	r5, [sp, #0]
 8005816:	f7ff fe67 	bl	80054e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800581a:	4620      	mov	r0, r4
 800581c:	f7ff fee0 	bl	80055e0 <prvAddNewTaskToReadyList>
	}
 8005820:	9805      	ldr	r0, [sp, #20]
 8005822:	b006      	add	sp, #24
 8005824:	bd70      	pop	{r4, r5, r6, pc}

08005826 <xTaskCreate>:
	{
 8005826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800582a:	b085      	sub	sp, #20
 800582c:	4607      	mov	r7, r0
 800582e:	4688      	mov	r8, r1
 8005830:	4615      	mov	r5, r2
 8005832:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005834:	0090      	lsls	r0, r2, #2
 8005836:	f001 f8ad 	bl	8006994 <pvPortMalloc>
			if( pxStack != NULL )
 800583a:	b308      	cbz	r0, 8005880 <xTaskCreate+0x5a>
 800583c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800583e:	205c      	movs	r0, #92	; 0x5c
 8005840:	f001 f8a8 	bl	8006994 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005844:	4604      	mov	r4, r0
 8005846:	b1b8      	cbz	r0, 8005878 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8005848:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800584a:	b1e4      	cbz	r4, 8005886 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800584c:	2300      	movs	r3, #0
 800584e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	9402      	str	r4, [sp, #8]
 8005856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	464b      	mov	r3, r9
 8005860:	462a      	mov	r2, r5
 8005862:	4641      	mov	r1, r8
 8005864:	4638      	mov	r0, r7
 8005866:	f7ff fe3f 	bl	80054e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800586a:	4620      	mov	r0, r4
 800586c:	f7ff feb8 	bl	80055e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005870:	2001      	movs	r0, #1
	}
 8005872:	b005      	add	sp, #20
 8005874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005878:	4630      	mov	r0, r6
 800587a:	f001 f90f 	bl	8006a9c <vPortFree>
 800587e:	e7e4      	b.n	800584a <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005880:	f04f 30ff 	mov.w	r0, #4294967295
 8005884:	e7f5      	b.n	8005872 <xTaskCreate+0x4c>
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800588a:	e7f2      	b.n	8005872 <xTaskCreate+0x4c>

0800588c <vTaskStartScheduler>:
{
 800588c:	b510      	push	{r4, lr}
 800588e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005890:	2400      	movs	r4, #0
 8005892:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005894:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005896:	aa07      	add	r2, sp, #28
 8005898:	a906      	add	r1, sp, #24
 800589a:	a805      	add	r0, sp, #20
 800589c:	f7ff f9ca 	bl	8004c34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058a0:	9b05      	ldr	r3, [sp, #20]
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	9b06      	ldr	r3, [sp, #24]
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	9400      	str	r4, [sp, #0]
 80058aa:	4623      	mov	r3, r4
 80058ac:	9a07      	ldr	r2, [sp, #28]
 80058ae:	4917      	ldr	r1, [pc, #92]	; (800590c <vTaskStartScheduler+0x80>)
 80058b0:	4817      	ldr	r0, [pc, #92]	; (8005910 <vTaskStartScheduler+0x84>)
 80058b2:	f7ff ff7f 	bl	80057b4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80058b6:	b140      	cbz	r0, 80058ca <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 80058b8:	f000 fc9a 	bl	80061f0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80058bc:	2801      	cmp	r0, #1
 80058be:	d006      	beq.n	80058ce <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80058c4:	d018      	beq.n	80058f8 <vTaskStartScheduler+0x6c>
}
 80058c6:	b008      	add	sp, #32
 80058c8:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80058ca:	2000      	movs	r0, #0
 80058cc:	e7f6      	b.n	80058bc <vTaskStartScheduler+0x30>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <vTaskStartScheduler+0x88>)
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <vTaskStartScheduler+0x8c>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <vTaskStartScheduler+0x90>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80058f2:	f000 ff39 	bl	8006768 <xPortStartScheduler>
 80058f6:	e7e6      	b.n	80058c6 <vTaskStartScheduler+0x3a>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	e7fe      	b.n	8005908 <vTaskStartScheduler+0x7c>
 800590a:	bf00      	nop
 800590c:	08006c34 	.word	0x08006c34
 8005910:	08005711 	.word	0x08005711
 8005914:	20000bbc 	.word	0x20000bbc
 8005918:	20000bd8 	.word	0x20000bd8
 800591c:	20000c04 	.word	0x20000c04

08005920 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005920:	4a02      	ldr	r2, [pc, #8]	; (800592c <vTaskSuspendAll+0xc>)
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	3301      	adds	r3, #1
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000b88 	.word	0x20000b88

08005930 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005930:	4b01      	ldr	r3, [pc, #4]	; (8005938 <xTaskGetTickCount+0x8>)
 8005932:	6818      	ldr	r0, [r3, #0]
}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000c04 	.word	0x20000c04

0800593c <xTaskIncrementTick>:
{
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800593e:	4b3a      	ldr	r3, [pc, #232]	; (8005a28 <xTaskIncrementTick+0xec>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d164      	bne.n	8005a10 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005946:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <xTaskIncrementTick+0xf0>)
 8005948:	681d      	ldr	r5, [r3, #0]
 800594a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800594c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800594e:	b9c5      	cbnz	r5, 8005982 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005950:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <xTaskIncrementTick+0xf4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	b143      	cbz	r3, 800596a <xTaskIncrementTick+0x2e>
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	e7fe      	b.n	8005968 <xTaskIncrementTick+0x2c>
 800596a:	4a31      	ldr	r2, [pc, #196]	; (8005a30 <xTaskIncrementTick+0xf4>)
 800596c:	6811      	ldr	r1, [r2, #0]
 800596e:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <xTaskIncrementTick+0xf8>)
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	6010      	str	r0, [r2, #0]
 8005974:	6019      	str	r1, [r3, #0]
 8005976:	4a30      	ldr	r2, [pc, #192]	; (8005a38 <xTaskIncrementTick+0xfc>)
 8005978:	6813      	ldr	r3, [r2, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	f7ff fd9d 	bl	80054bc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005982:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <xTaskIncrementTick+0x100>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	42ab      	cmp	r3, r5
 8005988:	d938      	bls.n	80059fc <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800598a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800598c:	4b2c      	ldr	r3, [pc, #176]	; (8005a40 <xTaskIncrementTick+0x104>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005996:	009a      	lsls	r2, r3, #2
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <xTaskIncrementTick+0x108>)
 800599a:	589b      	ldr	r3, [r3, r2]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d93c      	bls.n	8005a1a <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80059a0:	2401      	movs	r4, #1
 80059a2:	e03a      	b.n	8005a1a <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80059a4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a6:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <xTaskIncrementTick+0xf4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	b343      	cbz	r3, 8005a00 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <xTaskIncrementTick+0xf4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059b6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80059b8:	429d      	cmp	r5, r3
 80059ba:	d326      	bcc.n	8005a0a <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059bc:	1d37      	adds	r7, r6, #4
 80059be:	4638      	mov	r0, r7
 80059c0:	f7ff f984 	bl	8004ccc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059c4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80059c6:	b11b      	cbz	r3, 80059d0 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059c8:	f106 0018 	add.w	r0, r6, #24
 80059cc:	f7ff f97e 	bl	8004ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80059d2:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <xTaskIncrementTick+0x10c>)
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <xTaskIncrementTick+0xa2>
 80059da:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <xTaskIncrementTick+0x10c>)
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	4639      	mov	r1, r7
 80059e6:	4817      	ldr	r0, [pc, #92]	; (8005a44 <xTaskIncrementTick+0x108>)
 80059e8:	4410      	add	r0, r2
 80059ea:	f7ff f949 	bl	8004c80 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ee:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <xTaskIncrementTick+0x104>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d2d4      	bcs.n	80059a4 <xTaskIncrementTick+0x68>
 80059fa:	e7d4      	b.n	80059a6 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 80059fc:	2400      	movs	r4, #0
 80059fe:	e7d2      	b.n	80059a6 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <xTaskIncrementTick+0x100>)
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	601a      	str	r2, [r3, #0]
					break;
 8005a08:	e7c0      	b.n	800598c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005a0a:	4a0c      	ldr	r2, [pc, #48]	; (8005a3c <xTaskIncrementTick+0x100>)
 8005a0c:	6013      	str	r3, [r2, #0]
						break;
 8005a0e:	e7bd      	b.n	800598c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8005a10:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <xTaskIncrementTick+0x110>)
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	3301      	adds	r3, #1
 8005a16:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005a18:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <xTaskIncrementTick+0x114>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	b103      	cbz	r3, 8005a22 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8005a20:	2401      	movs	r4, #1
}
 8005a22:	4620      	mov	r0, r4
 8005a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000b88 	.word	0x20000b88
 8005a2c:	20000c04 	.word	0x20000c04
 8005a30:	20000714 	.word	0x20000714
 8005a34:	20000718 	.word	0x20000718
 8005a38:	20000bc0 	.word	0x20000bc0
 8005a3c:	20000bbc 	.word	0x20000bbc
 8005a40:	20000710 	.word	0x20000710
 8005a44:	2000071c 	.word	0x2000071c
 8005a48:	20000b90 	.word	0x20000b90
 8005a4c:	20000b84 	.word	0x20000b84
 8005a50:	20000c08 	.word	0x20000c08

08005a54 <xTaskResumeAll>:
{
 8005a54:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005a56:	4b33      	ldr	r3, [pc, #204]	; (8005b24 <xTaskResumeAll+0xd0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	b943      	cbnz	r3, 8005a6e <xTaskResumeAll+0x1a>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	e7fe      	b.n	8005a6c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005a6e:	f000 fdd9 	bl	8006624 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005a72:	4b2c      	ldr	r3, [pc, #176]	; (8005b24 <xTaskResumeAll+0xd0>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	3a01      	subs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d14d      	bne.n	8005b1c <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <xTaskResumeAll+0xd4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	b923      	cbnz	r3, 8005a90 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8005a86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005a88:	f000 fdee 	bl	8006668 <vPortExitCritical>
}
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8005a90:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a92:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <xTaskResumeAll+0xd8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	b31b      	cbz	r3, 8005ae0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a98:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <xTaskResumeAll+0xd8>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a9e:	f104 0018 	add.w	r0, r4, #24
 8005aa2:	f7ff f913 	bl	8004ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa6:	1d25      	adds	r5, r4, #4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f7ff f90f 	bl	8004ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <xTaskResumeAll+0xdc>)
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d901      	bls.n	8005abc <xTaskResumeAll+0x68>
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <xTaskResumeAll+0xdc>)
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ac0:	009a      	lsls	r2, r3, #2
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	481b      	ldr	r0, [pc, #108]	; (8005b34 <xTaskResumeAll+0xe0>)
 8005ac6:	4410      	add	r0, r2
 8005ac8:	f7ff f8da 	bl	8004c80 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005acc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ace:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <xTaskResumeAll+0xe4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d3dc      	bcc.n	8005a92 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8005ad8:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <xTaskResumeAll+0xe8>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e7d8      	b.n	8005a92 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8005ae0:	b10c      	cbz	r4, 8005ae6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8005ae2:	f7ff fceb 	bl	80054bc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ae6:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <xTaskResumeAll+0xec>)
 8005ae8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005aea:	b154      	cbz	r4, 8005b02 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8005aec:	f7ff ff26 	bl	800593c <xTaskIncrementTick>
 8005af0:	b110      	cbz	r0, 8005af8 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <xTaskResumeAll+0xe8>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005af8:	3c01      	subs	r4, #1
 8005afa:	d1f7      	bne.n	8005aec <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8005afc:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <xTaskResumeAll+0xec>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <xTaskResumeAll+0xe8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	b15b      	cbz	r3, 8005b20 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <xTaskResumeAll+0xf0>)
 8005b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005b18:	2401      	movs	r4, #1
 8005b1a:	e7b5      	b.n	8005a88 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8005b1c:	2400      	movs	r4, #0
 8005b1e:	e7b3      	b.n	8005a88 <xTaskResumeAll+0x34>
 8005b20:	2400      	movs	r4, #0
 8005b22:	e7b1      	b.n	8005a88 <xTaskResumeAll+0x34>
 8005b24:	20000b88 	.word	0x20000b88
 8005b28:	20000b7c 	.word	0x20000b7c
 8005b2c:	20000bc4 	.word	0x20000bc4
 8005b30:	20000b90 	.word	0x20000b90
 8005b34:	2000071c 	.word	0x2000071c
 8005b38:	20000710 	.word	0x20000710
 8005b3c:	20000c08 	.word	0x20000c08
 8005b40:	20000b84 	.word	0x20000b84
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <vTaskDelay>:
	{
 8005b48:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b4a:	b1a8      	cbz	r0, 8005b78 <vTaskDelay+0x30>
 8005b4c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <vTaskDelay+0x44>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	b143      	cbz	r3, 8005b66 <vTaskDelay+0x1e>
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	e7fe      	b.n	8005b64 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005b66:	f7ff fedb 	bl	8005920 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff fde3 	bl	8005738 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005b72:	f7ff ff6f 	bl	8005a54 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005b76:	b938      	cbnz	r0, 8005b88 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <vTaskDelay+0x48>)
 8005b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	f3bf 8f6f 	isb	sy
	}
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000b88 	.word	0x20000b88
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b94:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <vTaskSwitchContext+0x84>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	b11b      	cbz	r3, 8005ba2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005b9a:	4b20      	ldr	r3, [pc, #128]	; (8005c1c <vTaskSwitchContext+0x88>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	; (8005c1c <vTaskSwitchContext+0x88>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <vTaskSwitchContext+0x8c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005bb0:	008a      	lsls	r2, r1, #2
 8005bb2:	491c      	ldr	r1, [pc, #112]	; (8005c24 <vTaskSwitchContext+0x90>)
 8005bb4:	588a      	ldr	r2, [r1, r2]
 8005bb6:	b95a      	cbnz	r2, 8005bd0 <vTaskSwitchContext+0x3c>
 8005bb8:	b10b      	cbz	r3, 8005bbe <vTaskSwitchContext+0x2a>
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	e7f6      	b.n	8005bac <vTaskSwitchContext+0x18>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	e7fe      	b.n	8005bce <vTaskSwitchContext+0x3a>
{
 8005bd0:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005bd2:	4608      	mov	r0, r1
 8005bd4:	009a      	lsls	r2, r3, #2
 8005bd6:	18d4      	adds	r4, r2, r3
 8005bd8:	00a1      	lsls	r1, r4, #2
 8005bda:	4401      	add	r1, r0
 8005bdc:	684c      	ldr	r4, [r1, #4]
 8005bde:	6864      	ldr	r4, [r4, #4]
 8005be0:	604c      	str	r4, [r1, #4]
 8005be2:	441a      	add	r2, r3
 8005be4:	0091      	lsls	r1, r2, #2
 8005be6:	3108      	adds	r1, #8
 8005be8:	4408      	add	r0, r1
 8005bea:	4284      	cmp	r4, r0
 8005bec:	d00d      	beq.n	8005c0a <vTaskSwitchContext+0x76>
 8005bee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005bf2:	0091      	lsls	r1, r2, #2
 8005bf4:	4a0b      	ldr	r2, [pc, #44]	; (8005c24 <vTaskSwitchContext+0x90>)
 8005bf6:	440a      	add	r2, r1
 8005bf8:	6852      	ldr	r2, [r2, #4]
 8005bfa:	68d1      	ldr	r1, [r2, #12]
 8005bfc:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <vTaskSwitchContext+0x94>)
 8005bfe:	6011      	str	r1, [r2, #0]
 8005c00:	4a07      	ldr	r2, [pc, #28]	; (8005c20 <vTaskSwitchContext+0x8c>)
 8005c02:	6013      	str	r3, [r2, #0]
}
 8005c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c08:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005c0a:	6861      	ldr	r1, [r4, #4]
 8005c0c:	4805      	ldr	r0, [pc, #20]	; (8005c24 <vTaskSwitchContext+0x90>)
 8005c0e:	2214      	movs	r2, #20
 8005c10:	fb02 0203 	mla	r2, r2, r3, r0
 8005c14:	6051      	str	r1, [r2, #4]
 8005c16:	e7ea      	b.n	8005bee <vTaskSwitchContext+0x5a>
 8005c18:	20000b88 	.word	0x20000b88
 8005c1c:	20000c08 	.word	0x20000c08
 8005c20:	20000b90 	.word	0x20000b90
 8005c24:	2000071c 	.word	0x2000071c
 8005c28:	20000710 	.word	0x20000710

08005c2c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005c2c:	b940      	cbnz	r0, 8005c40 <vTaskPlaceOnEventList+0x14>
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	e7fe      	b.n	8005c3e <vTaskPlaceOnEventList+0x12>
{
 8005c40:	b510      	push	{r4, lr}
 8005c42:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <vTaskPlaceOnEventList+0x2c>)
 8005c46:	6819      	ldr	r1, [r3, #0]
 8005c48:	3118      	adds	r1, #24
 8005c4a:	f7ff f825 	bl	8004c98 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7ff fd71 	bl	8005738 <prvAddCurrentTaskToDelayedList>
}
 8005c56:	bd10      	pop	{r4, pc}
 8005c58:	20000710 	.word	0x20000710

08005c5c <vTaskPlaceOnEventListRestricted>:
	{
 8005c5c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8005c5e:	b940      	cbnz	r0, 8005c72 <vTaskPlaceOnEventListRestricted+0x16>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	e7fe      	b.n	8005c70 <vTaskPlaceOnEventListRestricted+0x14>
 8005c72:	460c      	mov	r4, r1
 8005c74:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c76:	4a06      	ldr	r2, [pc, #24]	; (8005c90 <vTaskPlaceOnEventListRestricted+0x34>)
 8005c78:	6811      	ldr	r1, [r2, #0]
 8005c7a:	3118      	adds	r1, #24
 8005c7c:	f7ff f800 	bl	8004c80 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8005c80:	b10d      	cbz	r5, 8005c86 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8005c82:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c86:	4629      	mov	r1, r5
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7ff fd55 	bl	8005738 <prvAddCurrentTaskToDelayedList>
	}
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	20000710 	.word	0x20000710

08005c94 <xTaskRemoveFromEventList>:
{
 8005c94:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c96:	68c3      	ldr	r3, [r0, #12]
 8005c98:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005c9a:	b944      	cbnz	r4, 8005cae <xTaskRemoveFromEventList+0x1a>
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	e7fe      	b.n	8005cac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cae:	f104 0518 	add.w	r5, r4, #24
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f7ff f80a 	bl	8004ccc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb8:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <xTaskRemoveFromEventList+0x74>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	b9e3      	cbnz	r3, 8005cf8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cbe:	1d25      	adds	r5, r4, #4
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f7ff f803 	bl	8004ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005cc8:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <xTaskRemoveFromEventList+0x78>)
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <xTaskRemoveFromEventList+0x40>
 8005cd0:	4a0e      	ldr	r2, [pc, #56]	; (8005d0c <xTaskRemoveFromEventList+0x78>)
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005cd8:	009a      	lsls	r2, r3, #2
 8005cda:	4629      	mov	r1, r5
 8005cdc:	480c      	ldr	r0, [pc, #48]	; (8005d10 <xTaskRemoveFromEventList+0x7c>)
 8005cde:	4410      	add	r0, r2
 8005ce0:	f7fe ffce 	bl	8004c80 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ce4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <xTaskRemoveFromEventList+0x80>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d908      	bls.n	8005d02 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <xTaskRemoveFromEventList+0x84>)
 8005cf4:	6018      	str	r0, [r3, #0]
}
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4808      	ldr	r0, [pc, #32]	; (8005d1c <xTaskRemoveFromEventList+0x88>)
 8005cfc:	f7fe ffc0 	bl	8004c80 <vListInsertEnd>
 8005d00:	e7f0      	b.n	8005ce4 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8005d02:	2000      	movs	r0, #0
	return xReturn;
 8005d04:	e7f7      	b.n	8005cf6 <xTaskRemoveFromEventList+0x62>
 8005d06:	bf00      	nop
 8005d08:	20000b88 	.word	0x20000b88
 8005d0c:	20000b90 	.word	0x20000b90
 8005d10:	2000071c 	.word	0x2000071c
 8005d14:	20000710 	.word	0x20000710
 8005d18:	20000c08 	.word	0x20000c08
 8005d1c:	20000bc4 	.word	0x20000bc4

08005d20 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d20:	4b03      	ldr	r3, [pc, #12]	; (8005d30 <vTaskInternalSetTimeOutState+0x10>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d26:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <vTaskInternalSetTimeOutState+0x14>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6043      	str	r3, [r0, #4]
}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000bc0 	.word	0x20000bc0
 8005d34:	20000c04 	.word	0x20000c04

08005d38 <xTaskCheckForTimeOut>:
{
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005d3a:	b150      	cbz	r0, 8005d52 <xTaskCheckForTimeOut+0x1a>
 8005d3c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005d3e:	b989      	cbnz	r1, 8005d64 <xTaskCheckForTimeOut+0x2c>
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	e7fe      	b.n	8005d50 <xTaskCheckForTimeOut+0x18>
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	e7fe      	b.n	8005d62 <xTaskCheckForTimeOut+0x2a>
 8005d64:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8005d66:	f000 fc5d 	bl	8006624 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <xTaskCheckForTimeOut+0x78>)
 8005d6c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d6e:	6868      	ldr	r0, [r5, #4]
 8005d70:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d016      	beq.n	8005da8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d7a:	682f      	ldr	r7, [r5, #0]
 8005d7c:	4e0d      	ldr	r6, [pc, #52]	; (8005db4 <xTaskCheckForTimeOut+0x7c>)
 8005d7e:	6836      	ldr	r6, [r6, #0]
 8005d80:	42b7      	cmp	r7, r6
 8005d82:	d001      	beq.n	8005d88 <xTaskCheckForTimeOut+0x50>
 8005d84:	4288      	cmp	r0, r1
 8005d86:	d911      	bls.n	8005dac <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d803      	bhi.n	8005d94 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005d90:	2401      	movs	r4, #1
 8005d92:	e005      	b.n	8005da0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f7ff ffc1 	bl	8005d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005da0:	f000 fc62 	bl	8006668 <vPortExitCritical>
}
 8005da4:	4620      	mov	r0, r4
 8005da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8005da8:	2400      	movs	r4, #0
 8005daa:	e7f9      	b.n	8005da0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8005dac:	2401      	movs	r4, #1
 8005dae:	e7f7      	b.n	8005da0 <xTaskCheckForTimeOut+0x68>
 8005db0:	20000c04 	.word	0x20000c04
 8005db4:	20000bc0 	.word	0x20000bc0

08005db8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005db8:	4b01      	ldr	r3, [pc, #4]	; (8005dc0 <vTaskMissedYield+0x8>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	4770      	bx	lr
 8005dc0:	20000c08 	.word	0x20000c08

08005dc4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005dc4:	4b01      	ldr	r3, [pc, #4]	; (8005dcc <xTaskGetCurrentTaskHandle+0x8>)
 8005dc6:	6818      	ldr	r0, [r3, #0]
	}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000710 	.word	0x20000710

08005dd0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <xTaskGetSchedulerState+0x18>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	b133      	cbz	r3, 8005de4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <xTaskGetSchedulerState+0x1c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b10b      	cbz	r3, 8005de0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ddc:	2000      	movs	r0, #0
	}
 8005dde:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005de0:	2002      	movs	r0, #2
 8005de2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005de4:	2001      	movs	r0, #1
 8005de6:	4770      	bx	lr
 8005de8:	20000bd8 	.word	0x20000bd8
 8005dec:	20000b88 	.word	0x20000b88

08005df0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d038      	beq.n	8005e66 <xTaskPriorityDisinherit+0x76>
	{
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005df8:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <xTaskPriorityDisinherit+0x84>)
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	4282      	cmp	r2, r0
 8005dfe:	d008      	beq.n	8005e12 <xTaskPriorityDisinherit+0x22>
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	e7fe      	b.n	8005e10 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e12:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005e14:	b942      	cbnz	r2, 8005e28 <xTaskPriorityDisinherit+0x38>
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	e7fe      	b.n	8005e26 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005e28:	3a01      	subs	r2, #1
 8005e2a:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005e2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005e30:	4288      	cmp	r0, r1
 8005e32:	d01a      	beq.n	8005e6a <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e34:	b9da      	cbnz	r2, 8005e6e <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e36:	1d25      	adds	r5, r4, #4
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f7fe ff47 	bl	8004ccc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005e40:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e46:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e48:	4a0b      	ldr	r2, [pc, #44]	; (8005e78 <xTaskPriorityDisinherit+0x88>)
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <xTaskPriorityDisinherit+0x64>
 8005e50:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <xTaskPriorityDisinherit+0x88>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	4629      	mov	r1, r5
 8005e56:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <xTaskPriorityDisinherit+0x8c>)
 8005e58:	2014      	movs	r0, #20
 8005e5a:	fb00 2003 	mla	r0, r0, r3, r2
 8005e5e:	f7fe ff0f 	bl	8004c80 <vListInsertEnd>
					xReturn = pdTRUE;
 8005e62:	2001      	movs	r0, #1
	}
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8005e66:	2000      	movs	r0, #0
	}
 8005e68:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e7fa      	b.n	8005e64 <xTaskPriorityDisinherit+0x74>
 8005e6e:	2000      	movs	r0, #0
		return xReturn;
 8005e70:	e7f8      	b.n	8005e64 <xTaskPriorityDisinherit+0x74>
 8005e72:	bf00      	nop
 8005e74:	20000710 	.word	0x20000710
 8005e78:	20000b90 	.word	0x20000b90
 8005e7c:	2000071c 	.word	0x2000071c

08005e80 <xTaskNotifyWait>:
	{
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	4607      	mov	r7, r0
 8005e84:	460d      	mov	r5, r1
 8005e86:	4614      	mov	r4, r2
 8005e88:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8005e8a:	f000 fbcb 	bl	8006624 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <xTaskNotifyWait+0x90>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d00a      	beq.n	8005eb2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005e9c:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <xTaskNotifyWait+0x90>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005ea2:	ea20 0007 	bic.w	r0, r0, r7
 8005ea6:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8005eb0:	b9ce      	cbnz	r6, 8005ee6 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8005eb2:	f000 fbd9 	bl	8006668 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005eb6:	f000 fbb5 	bl	8006624 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8005eba:	b11c      	cbz	r4, 8005ec4 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005ebc:	4b14      	ldr	r3, [pc, #80]	; (8005f10 <xTaskNotifyWait+0x90>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <xTaskNotifyWait+0x90>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d016      	beq.n	8005f00 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 8005ed2:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <xTaskNotifyWait+0x90>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8005ede:	f000 fbc3 	bl	8006668 <vPortExitCritical>
	}
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7ff fc25 	bl	8005738 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <xTaskNotifyWait+0x94>)
 8005ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	e7d8      	b.n	8005eb2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005f00:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <xTaskNotifyWait+0x90>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005f06:	ea23 0505 	bic.w	r5, r3, r5
 8005f0a:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8005f0c:	2401      	movs	r4, #1
 8005f0e:	e7e1      	b.n	8005ed4 <xTaskNotifyWait+0x54>
 8005f10:	20000710 	.word	0x20000710
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <xTaskGenericNotify>:
	{
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8005f1a:	b940      	cbnz	r0, 8005f2e <xTaskGenericNotify+0x16>
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	e7fe      	b.n	8005f2c <xTaskGenericNotify+0x14>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	461f      	mov	r7, r3
 8005f32:	4615      	mov	r5, r2
 8005f34:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 8005f36:	f000 fb75 	bl	8006624 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8005f3a:	b10f      	cbz	r7, 8005f40 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005f3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f3e:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f40:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005f44:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f46:	2202      	movs	r2, #2
 8005f48:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8005f4c:	1e6a      	subs	r2, r5, #1
 8005f4e:	2a03      	cmp	r2, #3
 8005f50:	d81a      	bhi.n	8005f88 <xTaskGenericNotify+0x70>
 8005f52:	e8df f002 	tbb	[pc, r2]
 8005f56:	0c02      	.short	0x0c02
 8005f58:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 8005f5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f5c:	4316      	orrs	r6, r2
 8005f5e:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005f60:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d014      	beq.n	8005f90 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 8005f66:	f000 fb7f 	bl	8006668 <vPortExitCritical>
	}
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8005f6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f70:	3201      	adds	r2, #1
 8005f72:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005f74:	2501      	movs	r5, #1
					break;
 8005f76:	e7f4      	b.n	8005f62 <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 8005f78:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005f7a:	2501      	movs	r5, #1
					break;
 8005f7c:	e7f1      	b.n	8005f62 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d004      	beq.n	8005f8c <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 8005f82:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005f84:	2501      	movs	r5, #1
 8005f86:	e7ec      	b.n	8005f62 <xTaskGenericNotify+0x4a>
 8005f88:	2501      	movs	r5, #1
 8005f8a:	e7ea      	b.n	8005f62 <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8005f8c:	2500      	movs	r5, #0
 8005f8e:	e7e8      	b.n	8005f62 <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f90:	1d26      	adds	r6, r4, #4
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7fe fe9a 	bl	8004ccc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <xTaskGenericNotify+0xd0>)
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <xTaskGenericNotify+0x8e>
 8005fa2:	4a11      	ldr	r2, [pc, #68]	; (8005fe8 <xTaskGenericNotify+0xd0>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4a10      	ldr	r2, [pc, #64]	; (8005fec <xTaskGenericNotify+0xd4>)
 8005faa:	2014      	movs	r0, #20
 8005fac:	fb00 2003 	mla	r0, r0, r3, r2
 8005fb0:	f7fe fe66 	bl	8004c80 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fb6:	b143      	cbz	r3, 8005fca <xTaskGenericNotify+0xb2>
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	e7fe      	b.n	8005fc8 <xTaskGenericNotify+0xb0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <xTaskGenericNotify+0xd8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d9c7      	bls.n	8005f66 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <xTaskGenericNotify+0xdc>)
 8005fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	e7be      	b.n	8005f66 <xTaskGenericNotify+0x4e>
 8005fe8:	20000b90 	.word	0x20000b90
 8005fec:	2000071c 	.word	0x2000071c
 8005ff0:	20000710 	.word	0x20000710
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <xTaskGenericNotifyFromISR>:
	{
 8005ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 8005ffe:	b940      	cbnz	r0, 8006012 <xTaskGenericNotifyFromISR+0x1a>
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	e7fe      	b.n	8006010 <xTaskGenericNotifyFromISR+0x18>
 8006012:	4604      	mov	r4, r0
 8006014:	4699      	mov	r9, r3
 8006016:	4615      	mov	r5, r2
 8006018:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800601a:	f000 fc2d 	bl	8006878 <vPortValidateInterruptPriority>
	__asm volatile
 800601e:	f3ef 8711 	mrs	r7, BASEPRI
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8006032:	f1b9 0f00 	cmp.w	r9, #0
 8006036:	d002      	beq.n	800603e <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006038:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800603a:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800603e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8006042:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006044:	2202      	movs	r2, #2
 8006046:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 800604a:	1e6a      	subs	r2, r5, #1
 800604c:	2a03      	cmp	r2, #3
 800604e:	d81e      	bhi.n	800608e <xTaskGenericNotifyFromISR+0x96>
 8006050:	e8df f002 	tbb	[pc, r2]
 8006054:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 8006058:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800605a:	ea42 0208 	orr.w	r2, r2, r8
 800605e:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8006060:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006062:	2b01      	cmp	r3, #1
 8006064:	d017      	beq.n	8006096 <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 8006066:	f387 8811 	msr	BASEPRI, r7
	}
 800606a:	4628      	mov	r0, r5
 800606c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8006070:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006072:	3201      	adds	r2, #1
 8006074:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8006076:	2501      	movs	r5, #1
					break;
 8006078:	e7f3      	b.n	8006062 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800607a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800607e:	2501      	movs	r5, #1
					break;
 8006080:	e7ef      	b.n	8006062 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006082:	2b02      	cmp	r3, #2
 8006084:	d005      	beq.n	8006092 <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 8006086:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800608a:	2501      	movs	r5, #1
 800608c:	e7e9      	b.n	8006062 <xTaskGenericNotifyFromISR+0x6a>
 800608e:	2501      	movs	r5, #1
 8006090:	e7e7      	b.n	8006062 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8006092:	2500      	movs	r5, #0
 8006094:	e7e5      	b.n	8006062 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006098:	b143      	cbz	r3, 80060ac <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	e7fe      	b.n	80060aa <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <xTaskGenericNotifyFromISR+0x108>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	b9e3      	cbnz	r3, 80060ec <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b2:	f104 0804 	add.w	r8, r4, #4
 80060b6:	4640      	mov	r0, r8
 80060b8:	f7fe fe08 	bl	8004ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060be:	4a11      	ldr	r2, [pc, #68]	; (8006104 <xTaskGenericNotifyFromISR+0x10c>)
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <xTaskGenericNotifyFromISR+0xd2>
 80060c6:	4a0f      	ldr	r2, [pc, #60]	; (8006104 <xTaskGenericNotifyFromISR+0x10c>)
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4641      	mov	r1, r8
 80060cc:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <xTaskGenericNotifyFromISR+0x110>)
 80060ce:	2014      	movs	r0, #20
 80060d0:	fb00 2003 	mla	r0, r0, r3, r2
 80060d4:	f7fe fdd4 	bl	8004c80 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <xTaskGenericNotifyFromISR+0x114>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d9c0      	bls.n	8006066 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 80060e4:	b146      	cbz	r6, 80060f8 <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	e7bc      	b.n	8006066 <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80060ec:	f104 0118 	add.w	r1, r4, #24
 80060f0:	4807      	ldr	r0, [pc, #28]	; (8006110 <xTaskGenericNotifyFromISR+0x118>)
 80060f2:	f7fe fdc5 	bl	8004c80 <vListInsertEnd>
 80060f6:	e7ef      	b.n	80060d8 <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <xTaskGenericNotifyFromISR+0x11c>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e7b2      	b.n	8006066 <xTaskGenericNotifyFromISR+0x6e>
 8006100:	20000b88 	.word	0x20000b88
 8006104:	20000b90 	.word	0x20000b90
 8006108:	2000071c 	.word	0x2000071c
 800610c:	20000710 	.word	0x20000710
 8006110:	20000bc4 	.word	0x20000bc4
 8006114:	20000c08 	.word	0x20000c08

08006118 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <prvGetNextExpireTime+0x1c>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	6813      	ldr	r3, [r2, #0]
 800611e:	fab3 f383 	clz	r3, r3
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006126:	b913      	cbnz	r3, 800612e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006128:	68d3      	ldr	r3, [r2, #12]
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800612e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000c0c 	.word	0x20000c0c

08006138 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006138:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800613a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800613c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800613e:	4291      	cmp	r1, r2
 8006140:	d80c      	bhi.n	800615c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	6983      	ldr	r3, [r0, #24]
 8006146:	429a      	cmp	r2, r3
 8006148:	d301      	bcc.n	800614e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800614a:	2001      	movs	r0, #1
 800614c:	e010      	b.n	8006170 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800614e:	1d01      	adds	r1, r0, #4
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <prvInsertTimerInActiveList+0x40>)
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	f7fe fda0 	bl	8004c98 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006158:	2000      	movs	r0, #0
 800615a:	e009      	b.n	8006170 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800615c:	429a      	cmp	r2, r3
 800615e:	d201      	bcs.n	8006164 <prvInsertTimerInActiveList+0x2c>
 8006160:	4299      	cmp	r1, r3
 8006162:	d206      	bcs.n	8006172 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006164:	1d01      	adds	r1, r0, #4
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <prvInsertTimerInActiveList+0x44>)
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f7fe fd95 	bl	8004c98 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800616e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8006170:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8006172:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006174:	e7fc      	b.n	8006170 <prvInsertTimerInActiveList+0x38>
 8006176:	bf00      	nop
 8006178:	20000c10 	.word	0x20000c10
 800617c:	20000c0c 	.word	0x20000c0c

08006180 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006180:	b530      	push	{r4, r5, lr}
 8006182:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006184:	f000 fa4e 	bl	8006624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <prvCheckForValidListAndQueue+0x50>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	b11b      	cbz	r3, 8006196 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f000 fa6b 	bl	8006668 <vPortExitCritical>
}
 8006192:	b003      	add	sp, #12
 8006194:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006196:	4d0f      	ldr	r5, [pc, #60]	; (80061d4 <prvCheckForValidListAndQueue+0x54>)
 8006198:	4628      	mov	r0, r5
 800619a:	f7fe fd63 	bl	8004c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800619e:	4c0e      	ldr	r4, [pc, #56]	; (80061d8 <prvCheckForValidListAndQueue+0x58>)
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7fe fd5f 	bl	8004c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <prvCheckForValidListAndQueue+0x5c>)
 80061a8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061aa:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <prvCheckForValidListAndQueue+0x60>)
 80061ac:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <prvCheckForValidListAndQueue+0x64>)
 80061b4:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <prvCheckForValidListAndQueue+0x68>)
 80061b6:	2110      	movs	r1, #16
 80061b8:	200a      	movs	r0, #10
 80061ba:	f7fe fe8e 	bl	8004eda <xQueueGenericCreateStatic>
 80061be:	4b04      	ldr	r3, [pc, #16]	; (80061d0 <prvCheckForValidListAndQueue+0x50>)
 80061c0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0e3      	beq.n	800618e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061c6:	4909      	ldr	r1, [pc, #36]	; (80061ec <prvCheckForValidListAndQueue+0x6c>)
 80061c8:	f7ff f93a 	bl	8005440 <vQueueAddToRegistry>
 80061cc:	e7df      	b.n	800618e <prvCheckForValidListAndQueue+0xe>
 80061ce:	bf00      	nop
 80061d0:	20000d30 	.word	0x20000d30
 80061d4:	20000cb4 	.word	0x20000cb4
 80061d8:	20000cc8 	.word	0x20000cc8
 80061dc:	20000c0c 	.word	0x20000c0c
 80061e0:	20000c10 	.word	0x20000c10
 80061e4:	20000ce0 	.word	0x20000ce0
 80061e8:	20000c14 	.word	0x20000c14
 80061ec:	08006c3c 	.word	0x08006c3c

080061f0 <xTimerCreateTimerTask>:
{
 80061f0:	b510      	push	{r4, lr}
 80061f2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80061f4:	f7ff ffc4 	bl	8006180 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <xTimerCreateTimerTask+0x54>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	b1cb      	cbz	r3, 8006232 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061fe:	2400      	movs	r4, #0
 8006200:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006202:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006204:	aa07      	add	r2, sp, #28
 8006206:	a906      	add	r1, sp, #24
 8006208:	a805      	add	r0, sp, #20
 800620a:	f7fe fd1f 	bl	8004c4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800620e:	9b05      	ldr	r3, [sp, #20]
 8006210:	9302      	str	r3, [sp, #8]
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	2302      	movs	r3, #2
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4623      	mov	r3, r4
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	490a      	ldr	r1, [pc, #40]	; (8006248 <xTimerCreateTimerTask+0x58>)
 8006220:	480a      	ldr	r0, [pc, #40]	; (800624c <xTimerCreateTimerTask+0x5c>)
 8006222:	f7ff fac7 	bl	80057b4 <xTaskCreateStatic>
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <xTimerCreateTimerTask+0x60>)
 8006228:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800622a:	b110      	cbz	r0, 8006232 <xTimerCreateTimerTask+0x42>
}
 800622c:	2001      	movs	r0, #1
 800622e:	b008      	add	sp, #32
 8006230:	bd10      	pop	{r4, pc}
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	e7fe      	b.n	8006242 <xTimerCreateTimerTask+0x52>
 8006244:	20000d30 	.word	0x20000d30
 8006248:	08006c44 	.word	0x08006c44
 800624c:	08006535 	.word	0x08006535
 8006250:	20000d34 	.word	0x20000d34

08006254 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006254:	b1c8      	cbz	r0, 800628a <xTimerGenericCommand+0x36>
{
 8006256:	b530      	push	{r4, r5, lr}
 8006258:	b085      	sub	sp, #20
 800625a:	4615      	mov	r5, r2
 800625c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800625e:	4a17      	ldr	r2, [pc, #92]	; (80062bc <xTimerGenericCommand+0x68>)
 8006260:	6810      	ldr	r0, [r2, #0]
 8006262:	b340      	cbz	r0, 80062b6 <xTimerGenericCommand+0x62>
 8006264:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8006266:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006268:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800626a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800626c:	2905      	cmp	r1, #5
 800626e:	dc1d      	bgt.n	80062ac <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006270:	f7ff fdae 	bl	8005dd0 <xTaskGetSchedulerState>
 8006274:	2802      	cmp	r0, #2
 8006276:	d011      	beq.n	800629c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006278:	2300      	movs	r3, #0
 800627a:	461a      	mov	r2, r3
 800627c:	4669      	mov	r1, sp
 800627e:	480f      	ldr	r0, [pc, #60]	; (80062bc <xTimerGenericCommand+0x68>)
 8006280:	6800      	ldr	r0, [r0, #0]
 8006282:	f7fe fe99 	bl	8004fb8 <xQueueGenericSend>
}
 8006286:	b005      	add	sp, #20
 8006288:	bd30      	pop	{r4, r5, pc}
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	e7fe      	b.n	800629a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800629c:	2300      	movs	r3, #0
 800629e:	9a08      	ldr	r2, [sp, #32]
 80062a0:	4669      	mov	r1, sp
 80062a2:	4806      	ldr	r0, [pc, #24]	; (80062bc <xTimerGenericCommand+0x68>)
 80062a4:	6800      	ldr	r0, [r0, #0]
 80062a6:	f7fe fe87 	bl	8004fb8 <xQueueGenericSend>
 80062aa:	e7ec      	b.n	8006286 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062ac:	2300      	movs	r3, #0
 80062ae:	4669      	mov	r1, sp
 80062b0:	f7fe ff40 	bl	8005134 <xQueueGenericSendFromISR>
 80062b4:	e7e7      	b.n	8006286 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 80062b6:	2000      	movs	r0, #0
	return xReturn;
 80062b8:	e7e5      	b.n	8006286 <xTimerGenericCommand+0x32>
 80062ba:	bf00      	nop
 80062bc:	20000d30 	.word	0x20000d30

080062c0 <prvSwitchTimerLists>:
{
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062c4:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <prvSwitchTimerLists+0x70>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	b352      	cbz	r2, 8006322 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062d0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062d2:	1d25      	adds	r5, r4, #4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7fe fcf9 	bl	8004ccc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062dc:	4620      	mov	r0, r4
 80062de:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062e0:	69e3      	ldr	r3, [r4, #28]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d1ee      	bne.n	80062c4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062e6:	69a3      	ldr	r3, [r4, #24]
 80062e8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80062ea:	429e      	cmp	r6, r3
 80062ec:	d207      	bcs.n	80062fe <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062ee:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062f0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062f2:	4629      	mov	r1, r5
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <prvSwitchTimerLists+0x70>)
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	f7fe fcce 	bl	8004c98 <vListInsert>
 80062fc:	e7e2      	b.n	80062c4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062fe:	2100      	movs	r1, #0
 8006300:	9100      	str	r1, [sp, #0]
 8006302:	460b      	mov	r3, r1
 8006304:	4632      	mov	r2, r6
 8006306:	4620      	mov	r0, r4
 8006308:	f7ff ffa4 	bl	8006254 <xTimerGenericCommand>
				configASSERT( xResult );
 800630c:	2800      	cmp	r0, #0
 800630e:	d1d9      	bne.n	80062c4 <prvSwitchTimerLists+0x4>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	e7fe      	b.n	8006320 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8006322:	4a04      	ldr	r2, [pc, #16]	; (8006334 <prvSwitchTimerLists+0x74>)
 8006324:	6810      	ldr	r0, [r2, #0]
 8006326:	4902      	ldr	r1, [pc, #8]	; (8006330 <prvSwitchTimerLists+0x70>)
 8006328:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	b002      	add	sp, #8
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	20000c0c 	.word	0x20000c0c
 8006334:	20000c10 	.word	0x20000c10

08006338 <prvSampleTimeNow>:
{
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800633c:	f7ff faf8 	bl	8005930 <xTaskGetTickCount>
 8006340:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8006342:	4b07      	ldr	r3, [pc, #28]	; (8006360 <prvSampleTimeNow+0x28>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4283      	cmp	r3, r0
 8006348:	d805      	bhi.n	8006356 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <prvSampleTimeNow+0x28>)
 8006350:	601c      	str	r4, [r3, #0]
}
 8006352:	4620      	mov	r0, r4
 8006354:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8006356:	f7ff ffb3 	bl	80062c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800635a:	2301      	movs	r3, #1
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	e7f6      	b.n	800634e <prvSampleTimeNow+0x16>
 8006360:	20000cdc 	.word	0x20000cdc

08006364 <prvProcessExpiredTimer>:
{
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	4605      	mov	r5, r0
 800636a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <prvProcessExpiredTimer+0x5c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006374:	1d20      	adds	r0, r4, #4
 8006376:	f7fe fca9 	bl	8004ccc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800637a:	69e3      	ldr	r3, [r4, #28]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d004      	beq.n	800638a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006382:	4620      	mov	r0, r4
 8006384:	4798      	blx	r3
}
 8006386:	b002      	add	sp, #8
 8006388:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800638a:	69a1      	ldr	r1, [r4, #24]
 800638c:	462b      	mov	r3, r5
 800638e:	4632      	mov	r2, r6
 8006390:	4429      	add	r1, r5
 8006392:	4620      	mov	r0, r4
 8006394:	f7ff fed0 	bl	8006138 <prvInsertTimerInActiveList>
 8006398:	2800      	cmp	r0, #0
 800639a:	d0f1      	beq.n	8006380 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800639c:	2100      	movs	r1, #0
 800639e:	9100      	str	r1, [sp, #0]
 80063a0:	460b      	mov	r3, r1
 80063a2:	462a      	mov	r2, r5
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7ff ff55 	bl	8006254 <xTimerGenericCommand>
			configASSERT( xResult );
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d1e8      	bne.n	8006380 <prvProcessExpiredTimer+0x1c>
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	e7fe      	b.n	80063be <prvProcessExpiredTimer+0x5a>
 80063c0:	20000c0c 	.word	0x20000c0c

080063c4 <prvProcessTimerOrBlockTask>:
{
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	4606      	mov	r6, r0
 80063ca:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80063cc:	f7ff faa8 	bl	8005920 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063d0:	a801      	add	r0, sp, #4
 80063d2:	f7ff ffb1 	bl	8006338 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80063d6:	9b01      	ldr	r3, [sp, #4]
 80063d8:	bb1b      	cbnz	r3, 8006422 <prvProcessTimerOrBlockTask+0x5e>
 80063da:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063dc:	b90c      	cbnz	r4, 80063e2 <prvProcessTimerOrBlockTask+0x1e>
 80063de:	42b0      	cmp	r0, r6
 80063e0:	d218      	bcs.n	8006414 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 80063e2:	b12c      	cbz	r4, 80063f0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063e4:	4b11      	ldr	r3, [pc, #68]	; (800642c <prvProcessTimerOrBlockTask+0x68>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681c      	ldr	r4, [r3, #0]
 80063ea:	fab4 f484 	clz	r4, r4
 80063ee:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063f0:	4622      	mov	r2, r4
 80063f2:	1b71      	subs	r1, r6, r5
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <prvProcessTimerOrBlockTask+0x6c>)
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	f7ff f836 	bl	8005468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063fc:	f7ff fb2a 	bl	8005a54 <xTaskResumeAll>
 8006400:	b988      	cbnz	r0, 8006426 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <prvProcessTimerOrBlockTask+0x70>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	e008      	b.n	8006426 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 8006414:	f7ff fb1e 	bl	8005a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f7ff ffa2 	bl	8006364 <prvProcessExpiredTimer>
 8006420:	e001      	b.n	8006426 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 8006422:	f7ff fb17 	bl	8005a54 <xTaskResumeAll>
}
 8006426:	b002      	add	sp, #8
 8006428:	bd70      	pop	{r4, r5, r6, pc}
 800642a:	bf00      	nop
 800642c:	20000c10 	.word	0x20000c10
 8006430:	20000d30 	.word	0x20000d30
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <prvProcessReceivedCommands>:
{
 8006438:	b530      	push	{r4, r5, lr}
 800643a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643c:	e002      	b.n	8006444 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800643e:	9b04      	ldr	r3, [sp, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	da0f      	bge.n	8006464 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006444:	2200      	movs	r2, #0
 8006446:	a904      	add	r1, sp, #16
 8006448:	4b39      	ldr	r3, [pc, #228]	; (8006530 <prvProcessReceivedCommands+0xf8>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	f7fe fed8 	bl	8005200 <xQueueReceive>
 8006450:	2800      	cmp	r0, #0
 8006452:	d06a      	beq.n	800652a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	daf1      	bge.n	800643e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800645a:	9907      	ldr	r1, [sp, #28]
 800645c:	9806      	ldr	r0, [sp, #24]
 800645e:	9b05      	ldr	r3, [sp, #20]
 8006460:	4798      	blx	r3
 8006462:	e7ec      	b.n	800643e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006464:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006466:	6963      	ldr	r3, [r4, #20]
 8006468:	b113      	cbz	r3, 8006470 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800646a:	1d20      	adds	r0, r4, #4
 800646c:	f7fe fc2e 	bl	8004ccc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006470:	a803      	add	r0, sp, #12
 8006472:	f7ff ff61 	bl	8006338 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006476:	9b04      	ldr	r3, [sp, #16]
 8006478:	2b09      	cmp	r3, #9
 800647a:	d8e3      	bhi.n	8006444 <prvProcessReceivedCommands+0xc>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <prvProcessReceivedCommands+0x4c>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064ad 	.word	0x080064ad
 8006488:	080064ad 	.word	0x080064ad
 800648c:	080064ad 	.word	0x080064ad
 8006490:	08006445 	.word	0x08006445
 8006494:	080064f5 	.word	0x080064f5
 8006498:	0800651b 	.word	0x0800651b
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064ad 	.word	0x080064ad
 80064a4:	08006445 	.word	0x08006445
 80064a8:	080064f5 	.word	0x080064f5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ac:	9905      	ldr	r1, [sp, #20]
 80064ae:	69a5      	ldr	r5, [r4, #24]
 80064b0:	460b      	mov	r3, r1
 80064b2:	4602      	mov	r2, r0
 80064b4:	4429      	add	r1, r5
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7ff fe3e 	bl	8006138 <prvInsertTimerInActiveList>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d0c1      	beq.n	8006444 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c2:	4620      	mov	r0, r4
 80064c4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064c6:	69e3      	ldr	r3, [r4, #28]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d1bb      	bne.n	8006444 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064cc:	69a2      	ldr	r2, [r4, #24]
 80064ce:	2100      	movs	r1, #0
 80064d0:	9100      	str	r1, [sp, #0]
 80064d2:	460b      	mov	r3, r1
 80064d4:	9805      	ldr	r0, [sp, #20]
 80064d6:	4402      	add	r2, r0
 80064d8:	4620      	mov	r0, r4
 80064da:	f7ff febb 	bl	8006254 <xTimerGenericCommand>
							configASSERT( xResult );
 80064de:	2800      	cmp	r0, #0
 80064e0:	d1b0      	bne.n	8006444 <prvProcessReceivedCommands+0xc>
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	e7fe      	b.n	80064f2 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064f4:	9905      	ldr	r1, [sp, #20]
 80064f6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064f8:	b131      	cbz	r1, 8006508 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064fa:	4603      	mov	r3, r0
 80064fc:	4602      	mov	r2, r0
 80064fe:	4401      	add	r1, r0
 8006500:	4620      	mov	r0, r4
 8006502:	f7ff fe19 	bl	8006138 <prvInsertTimerInActiveList>
					break;
 8006506:	e79d      	b.n	8006444 <prvProcessReceivedCommands+0xc>
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	e7fe      	b.n	8006518 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800651a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d190      	bne.n	8006444 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8006522:	4620      	mov	r0, r4
 8006524:	f000 faba 	bl	8006a9c <vPortFree>
 8006528:	e78c      	b.n	8006444 <prvProcessReceivedCommands+0xc>
}
 800652a:	b009      	add	sp, #36	; 0x24
 800652c:	bd30      	pop	{r4, r5, pc}
 800652e:	bf00      	nop
 8006530:	20000d30 	.word	0x20000d30

08006534 <prvTimerTask>:
{
 8006534:	b500      	push	{lr}
 8006536:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006538:	a801      	add	r0, sp, #4
 800653a:	f7ff fded 	bl	8006118 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800653e:	9901      	ldr	r1, [sp, #4]
 8006540:	f7ff ff40 	bl	80063c4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8006544:	f7ff ff78 	bl	8006438 <prvProcessReceivedCommands>
 8006548:	e7f6      	b.n	8006538 <prvTimerTask+0x4>
	...

0800654c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800654c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006552:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <prvTaskExitError+0x3c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d008      	beq.n	800656e <prvTaskExitError+0x22>
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	e7fe      	b.n	800656c <prvTaskExitError+0x20>
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0fc      	beq.n	800657e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006584:	b002      	add	sp, #8
 8006586:	4770      	bx	lr
 8006588:	2000000c 	.word	0x2000000c

0800658c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800658c:	4808      	ldr	r0, [pc, #32]	; (80065b0 <prvPortStartFirstTask+0x24>)
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	6800      	ldr	r0, [r0, #0]
 8006592:	f380 8808 	msr	MSP, r0
 8006596:	f04f 0000 	mov.w	r0, #0
 800659a:	f380 8814 	msr	CONTROL, r0
 800659e:	b662      	cpsie	i
 80065a0:	b661      	cpsie	f
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	df00      	svc	0
 80065ac:	bf00      	nop
 80065ae:	0000      	.short	0x0000
 80065b0:	e000ed08 	.word	0xe000ed08

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
 80065c2:	0000      	.short	0x0000
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065d0:	f021 0101 	bic.w	r1, r1, #1
 80065d4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <pxPortInitialiseStack+0x28>)
 80065da:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065de:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065e2:	f06f 0302 	mvn.w	r3, #2
 80065e6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80065ea:	3844      	subs	r0, #68	; 0x44
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	0800654d 	.word	0x0800654d
	...

08006600 <SVC_Handler>:
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	4770      	bx	lr
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst2>:
 8006620:	20000710 	.word	0x20000710

08006624 <vPortEnterCritical>:
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006634:	4a0a      	ldr	r2, [pc, #40]	; (8006660 <vPortEnterCritical+0x3c>)
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800663c:	2b01      	cmp	r3, #1
 800663e:	d000      	beq.n	8006642 <vPortEnterCritical+0x1e>
}
 8006640:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortEnterCritical+0x40>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f013 0fff 	tst.w	r3, #255	; 0xff
 800664a:	d0f9      	beq.n	8006640 <vPortEnterCritical+0x1c>
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	e7fe      	b.n	800665c <vPortEnterCritical+0x38>
 800665e:	bf00      	nop
 8006660:	2000000c 	.word	0x2000000c
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <vPortExitCritical+0x28>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	b943      	cbnz	r3, 8006680 <vPortExitCritical+0x18>
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	e7fe      	b.n	800667e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006680:	3b01      	subs	r3, #1
 8006682:	4a03      	ldr	r2, [pc, #12]	; (8006690 <vPortExitCritical+0x28>)
 8006684:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006686:	b90b      	cbnz	r3, 800668c <vPortExitCritical+0x24>
	__asm volatile
 8006688:	f383 8811 	msr	BASEPRI, r3
}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	2000000c 	.word	0x2000000c
	...

080066a0 <PendSV_Handler>:
	__asm volatile
 80066a0:	f3ef 8009 	mrs	r0, PSP
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <pxCurrentTCBConst>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f01e 0f10 	tst.w	lr, #16
 80066b0:	bf08      	it	eq
 80066b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066c4:	f380 8811 	msr	BASEPRI, r0
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f7ff fa60 	bl	8005b94 <vTaskSwitchContext>
 80066d4:	f04f 0000 	mov.w	r0, #0
 80066d8:	f380 8811 	msr	BASEPRI, r0
 80066dc:	bc09      	pop	{r0, r3}
 80066de:	6819      	ldr	r1, [r3, #0]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e6:	f01e 0f10 	tst.w	lr, #16
 80066ea:	bf08      	it	eq
 80066ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066f0:	f380 8809 	msr	PSP, r0
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w

08006700 <pxCurrentTCBConst>:
 8006700:	20000710 	.word	0x20000710

08006704 <SysTick_Handler>:
{
 8006704:	b508      	push	{r3, lr}
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006716:	f7ff f911 	bl	800593c <xTaskIncrementTick>
 800671a:	b118      	cbz	r0, 8006724 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <SysTick_Handler+0x28>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006724:	2300      	movs	r3, #0
 8006726:	f383 8811 	msr	BASEPRI, r3
}
 800672a:	bd08      	pop	{r3, pc}
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <vPortSetupTimerInterrupt+0x24>)
 8006732:	2300      	movs	r3, #0
 8006734:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006736:	4908      	ldr	r1, [pc, #32]	; (8006758 <vPortSetupTimerInterrupt+0x28>)
 8006738:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <vPortSetupTimerInterrupt+0x2c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4908      	ldr	r1, [pc, #32]	; (8006760 <vPortSetupTimerInterrupt+0x30>)
 8006740:	fba1 1303 	umull	r1, r3, r1, r3
 8006744:	099b      	lsrs	r3, r3, #6
 8006746:	3b01      	subs	r3, #1
 8006748:	4906      	ldr	r1, [pc, #24]	; (8006764 <vPortSetupTimerInterrupt+0x34>)
 800674a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800674c:	2307      	movs	r3, #7
 800674e:	6013      	str	r3, [r2, #0]
}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	e000e010 	.word	0xe000e010
 8006758:	e000e018 	.word	0xe000e018
 800675c:	20000000 	.word	0x20000000
 8006760:	10624dd3 	.word	0x10624dd3
 8006764:	e000e014 	.word	0xe000e014

08006768 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006768:	4b3a      	ldr	r3, [pc, #232]	; (8006854 <xPortStartScheduler+0xec>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	4b3a      	ldr	r3, [pc, #232]	; (8006858 <xPortStartScheduler+0xf0>)
 800676e:	429a      	cmp	r2, r3
 8006770:	d00d      	beq.n	800678e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <xPortStartScheduler+0xec>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b39      	ldr	r3, [pc, #228]	; (800685c <xPortStartScheduler+0xf4>)
 8006778:	429a      	cmp	r2, r3
 800677a:	d111      	bne.n	80067a0 <xPortStartScheduler+0x38>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	e7fe      	b.n	800678c <xPortStartScheduler+0x24>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	e7fe      	b.n	800679e <xPortStartScheduler+0x36>
{
 80067a0:	b510      	push	{r4, lr}
 80067a2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067a4:	4b2e      	ldr	r3, [pc, #184]	; (8006860 <xPortStartScheduler+0xf8>)
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067c0:	4a28      	ldr	r2, [pc, #160]	; (8006864 <xPortStartScheduler+0xfc>)
 80067c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067c4:	4b28      	ldr	r3, [pc, #160]	; (8006868 <xPortStartScheduler+0x100>)
 80067c6:	2207      	movs	r2, #7
 80067c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ca:	e009      	b.n	80067e0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80067cc:	4a26      	ldr	r2, [pc, #152]	; (8006868 <xPortStartScheduler+0x100>)
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067e8:	d1f0      	bne.n	80067cc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067ea:	4b1f      	ldr	r3, [pc, #124]	; (8006868 <xPortStartScheduler+0x100>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d008      	beq.n	8006804 <xPortStartScheduler+0x9c>
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	e7fe      	b.n	8006802 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006804:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <xPortStartScheduler+0x100>)
 800680c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800680e:	9b01      	ldr	r3, [sp, #4]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	4a13      	ldr	r2, [pc, #76]	; (8006860 <xPortStartScheduler+0xf8>)
 8006814:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <xPortStartScheduler+0x104>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800681e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006826:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006828:	f7ff ff82 	bl	8006730 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800682c:	2400      	movs	r4, #0
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <xPortStartScheduler+0x108>)
 8006830:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006832:	f7ff febf 	bl	80065b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006836:	4a0f      	ldr	r2, [pc, #60]	; (8006874 <xPortStartScheduler+0x10c>)
 8006838:	6813      	ldr	r3, [r2, #0]
 800683a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800683e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006840:	f7ff fea4 	bl	800658c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006844:	f7ff f9a6 	bl	8005b94 <vTaskSwitchContext>
	prvTaskExitError();
 8006848:	f7ff fe80 	bl	800654c <prvTaskExitError>
}
 800684c:	4620      	mov	r0, r4
 800684e:	b002      	add	sp, #8
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	e000ed00 	.word	0xe000ed00
 8006858:	410fc271 	.word	0x410fc271
 800685c:	410fc270 	.word	0x410fc270
 8006860:	e000e400 	.word	0xe000e400
 8006864:	20000d38 	.word	0x20000d38
 8006868:	20000d3c 	.word	0x20000d3c
 800686c:	e000ed20 	.word	0xe000ed20
 8006870:	2000000c 	.word	0x2000000c
 8006874:	e000ef34 	.word	0xe000ef34

08006878 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006878:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800687c:	2b0f      	cmp	r3, #15
 800687e:	d90f      	bls.n	80068a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006880:	4a10      	ldr	r2, [pc, #64]	; (80068c4 <vPortValidateInterruptPriority+0x4c>)
 8006882:	5c9b      	ldrb	r3, [r3, r2]
 8006884:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006886:	4a10      	ldr	r2, [pc, #64]	; (80068c8 <vPortValidateInterruptPriority+0x50>)
 8006888:	7812      	ldrb	r2, [r2, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d908      	bls.n	80068a0 <vPortValidateInterruptPriority+0x28>
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	e7fe      	b.n	800689e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <vPortValidateInterruptPriority+0x54>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068a8:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <vPortValidateInterruptPriority+0x58>)
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d908      	bls.n	80068c2 <vPortValidateInterruptPriority+0x4a>
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	e7fe      	b.n	80068c0 <vPortValidateInterruptPriority+0x48>
	}
 80068c2:	4770      	bx	lr
 80068c4:	e000e3f0 	.word	0xe000e3f0
 80068c8:	20000d38 	.word	0x20000d38
 80068cc:	e000ed0c 	.word	0xe000ed0c
 80068d0:	20000d3c 	.word	0x20000d3c

080068d4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068d4:	4a13      	ldr	r2, [pc, #76]	; (8006924 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068d6:	f012 0f07 	tst.w	r2, #7
 80068da:	d01f      	beq.n	800691c <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068dc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068de:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068e2:	f5c1 539c 	rsb	r3, r1, #4992	; 0x1380
 80068e6:	3308      	adds	r3, #8
 80068e8:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068ea:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068ec:	480e      	ldr	r0, [pc, #56]	; (8006928 <prvHeapInit+0x54>)
 80068ee:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068f0:	2100      	movs	r1, #0
 80068f2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068f4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80068f6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80068fc:	480b      	ldr	r0, [pc, #44]	; (800692c <prvHeapInit+0x58>)
 80068fe:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006900:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006902:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006904:	1a99      	subs	r1, r3, r2
 8006906:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006908:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <prvHeapInit+0x5c>)
 800690c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <prvHeapInit+0x60>)
 8006910:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <prvHeapInit+0x64>)
 8006914:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006918:	601a      	str	r2, [r3, #0]
}
 800691a:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800691c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006920:	e7e4      	b.n	80068ec <prvHeapInit+0x18>
 8006922:	bf00      	nop
 8006924:	20000d44 	.word	0x20000d44
 8006928:	200020d8 	.word	0x200020d8
 800692c:	20000d40 	.word	0x20000d40
 8006930:	200020d4 	.word	0x200020d4
 8006934:	200020d0 	.word	0x200020d0
 8006938:	200020cc 	.word	0x200020cc

0800693c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800693c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <prvInsertBlockIntoFreeList+0x50>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4282      	cmp	r2, r0
 8006944:	d31b      	bcc.n	800697e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	185c      	adds	r4, r3, r1
 800694a:	4284      	cmp	r4, r0
 800694c:	d103      	bne.n	8006956 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800694e:	6840      	ldr	r0, [r0, #4]
 8006950:	4401      	add	r1, r0
 8006952:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006954:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006956:	6841      	ldr	r1, [r0, #4]
 8006958:	1844      	adds	r4, r0, r1
 800695a:	42a2      	cmp	r2, r4
 800695c:	d113      	bne.n	8006986 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800695e:	4c0c      	ldr	r4, [pc, #48]	; (8006990 <prvInsertBlockIntoFreeList+0x54>)
 8006960:	6824      	ldr	r4, [r4, #0]
 8006962:	42a2      	cmp	r2, r4
 8006964:	d00d      	beq.n	8006982 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006966:	6852      	ldr	r2, [r2, #4]
 8006968:	4411      	add	r1, r2
 800696a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006972:	4298      	cmp	r0, r3
 8006974:	d000      	beq.n	8006978 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006976:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800697c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800697e:	4613      	mov	r3, r2
 8006980:	e7de      	b.n	8006940 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006982:	6004      	str	r4, [r0, #0]
 8006984:	e7f5      	b.n	8006972 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006986:	6002      	str	r2, [r0, #0]
 8006988:	e7f3      	b.n	8006972 <prvInsertBlockIntoFreeList+0x36>
 800698a:	bf00      	nop
 800698c:	200020d8 	.word	0x200020d8
 8006990:	20000d40 	.word	0x20000d40

08006994 <pvPortMalloc>:
{
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006998:	f7fe ffc2 	bl	8005920 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800699c:	4b3a      	ldr	r3, [pc, #232]	; (8006a88 <pvPortMalloc+0xf4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	b1bb      	cbz	r3, 80069d2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069a2:	4b3a      	ldr	r3, [pc, #232]	; (8006a8c <pvPortMalloc+0xf8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	421c      	tst	r4, r3
 80069a8:	d163      	bne.n	8006a72 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80069aa:	b1ac      	cbz	r4, 80069d8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80069ac:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069ae:	f014 0f07 	tst.w	r4, #7
 80069b2:	d011      	beq.n	80069d8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069b4:	f024 0407 	bic.w	r4, r4, #7
 80069b8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ba:	f004 0307 	and.w	r3, r4, #7
 80069be:	b15b      	cbz	r3, 80069d8 <pvPortMalloc+0x44>
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	e7fe      	b.n	80069d0 <pvPortMalloc+0x3c>
			prvHeapInit();
 80069d2:	f7ff ff7f 	bl	80068d4 <prvHeapInit>
 80069d6:	e7e4      	b.n	80069a2 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069d8:	2c00      	cmp	r4, #0
 80069da:	d04c      	beq.n	8006a76 <pvPortMalloc+0xe2>
 80069dc:	4b2c      	ldr	r3, [pc, #176]	; (8006a90 <pvPortMalloc+0xfc>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d34a      	bcc.n	8006a7a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 80069e4:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <pvPortMalloc+0x100>)
 80069e6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e8:	e001      	b.n	80069ee <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 80069ea:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80069ec:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ee:	686a      	ldr	r2, [r5, #4]
 80069f0:	42a2      	cmp	r2, r4
 80069f2:	d202      	bcs.n	80069fa <pvPortMalloc+0x66>
 80069f4:	682a      	ldr	r2, [r5, #0]
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	d1f7      	bne.n	80069ea <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80069fa:	4a23      	ldr	r2, [pc, #140]	; (8006a88 <pvPortMalloc+0xf4>)
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	42aa      	cmp	r2, r5
 8006a00:	d03d      	beq.n	8006a7e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a02:	681e      	ldr	r6, [r3, #0]
 8006a04:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a06:	682a      	ldr	r2, [r5, #0]
 8006a08:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a0a:	686b      	ldr	r3, [r5, #4]
 8006a0c:	1b1b      	subs	r3, r3, r4
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d910      	bls.n	8006a34 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a12:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a14:	f010 0f07 	tst.w	r0, #7
 8006a18:	d008      	beq.n	8006a2c <pvPortMalloc+0x98>
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	e7fe      	b.n	8006a2a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a2c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a2e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a30:	f7ff ff84 	bl	800693c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a34:	686a      	ldr	r2, [r5, #4]
 8006a36:	4916      	ldr	r1, [pc, #88]	; (8006a90 <pvPortMalloc+0xfc>)
 8006a38:	680b      	ldr	r3, [r1, #0]
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a3e:	4916      	ldr	r1, [pc, #88]	; (8006a98 <pvPortMalloc+0x104>)
 8006a40:	6809      	ldr	r1, [r1, #0]
 8006a42:	428b      	cmp	r3, r1
 8006a44:	d201      	bcs.n	8006a4a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a46:	4914      	ldr	r1, [pc, #80]	; (8006a98 <pvPortMalloc+0x104>)
 8006a48:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a4a:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <pvPortMalloc+0xf8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006a56:	f7fe fffd 	bl	8005a54 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a5a:	f016 0f07 	tst.w	r6, #7
 8006a5e:	d010      	beq.n	8006a82 <pvPortMalloc+0xee>
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	e7fe      	b.n	8006a70 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8006a72:	2600      	movs	r6, #0
 8006a74:	e7ef      	b.n	8006a56 <pvPortMalloc+0xc2>
 8006a76:	2600      	movs	r6, #0
 8006a78:	e7ed      	b.n	8006a56 <pvPortMalloc+0xc2>
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	e7eb      	b.n	8006a56 <pvPortMalloc+0xc2>
 8006a7e:	2600      	movs	r6, #0
 8006a80:	e7e9      	b.n	8006a56 <pvPortMalloc+0xc2>
}
 8006a82:	4630      	mov	r0, r6
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	bf00      	nop
 8006a88:	20000d40 	.word	0x20000d40
 8006a8c:	200020cc 	.word	0x200020cc
 8006a90:	200020d0 	.word	0x200020d0
 8006a94:	200020d8 	.word	0x200020d8
 8006a98:	200020d4 	.word	0x200020d4

08006a9c <vPortFree>:
	if( pv != NULL )
 8006a9c:	b380      	cbz	r0, 8006b00 <vPortFree+0x64>
{
 8006a9e:	b538      	push	{r3, r4, r5, lr}
 8006aa0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006aa2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006aa6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006aaa:	4916      	ldr	r1, [pc, #88]	; (8006b04 <vPortFree+0x68>)
 8006aac:	6809      	ldr	r1, [r1, #0]
 8006aae:	420a      	tst	r2, r1
 8006ab0:	d108      	bne.n	8006ac4 <vPortFree+0x28>
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	e7fe      	b.n	8006ac2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ac4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8006ac8:	b140      	cbz	r0, 8006adc <vPortFree+0x40>
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	e7fe      	b.n	8006ada <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006adc:	ea22 0201 	bic.w	r2, r2, r1
 8006ae0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8006ae4:	f7fe ff1c 	bl	8005920 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ae8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006aec:	4a06      	ldr	r2, [pc, #24]	; (8006b08 <vPortFree+0x6c>)
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	440b      	add	r3, r1
 8006af2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7ff ff21 	bl	800693c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006afa:	f7fe ffab 	bl	8005a54 <xTaskResumeAll>
}
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	200020cc 	.word	0x200020cc
 8006b08:	200020d0 	.word	0x200020d0

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4e0d      	ldr	r6, [pc, #52]	; (8006b44 <__libc_init_array+0x38>)
 8006b10:	4c0d      	ldr	r4, [pc, #52]	; (8006b48 <__libc_init_array+0x3c>)
 8006b12:	1ba4      	subs	r4, r4, r6
 8006b14:	10a4      	asrs	r4, r4, #2
 8006b16:	2500      	movs	r5, #0
 8006b18:	42a5      	cmp	r5, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	4e0b      	ldr	r6, [pc, #44]	; (8006b4c <__libc_init_array+0x40>)
 8006b1e:	4c0c      	ldr	r4, [pc, #48]	; (8006b50 <__libc_init_array+0x44>)
 8006b20:	f000 f82c 	bl	8006b7c <_init>
 8006b24:	1ba4      	subs	r4, r4, r6
 8006b26:	10a4      	asrs	r4, r4, #2
 8006b28:	2500      	movs	r5, #0
 8006b2a:	42a5      	cmp	r5, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b34:	4798      	blx	r3
 8006b36:	3501      	adds	r5, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b3e:	4798      	blx	r3
 8006b40:	3501      	adds	r5, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	08006c4c 	.word	0x08006c4c
 8006b48:	08006c4c 	.word	0x08006c4c
 8006b4c:	08006c4c 	.word	0x08006c4c
 8006b50:	08006c50 	.word	0x08006c50

08006b54 <memcpy>:
 8006b54:	b510      	push	{r4, lr}
 8006b56:	1e43      	subs	r3, r0, #1
 8006b58:	440a      	add	r2, r1
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	d100      	bne.n	8006b60 <memcpy+0xc>
 8006b5e:	bd10      	pop	{r4, pc}
 8006b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b68:	e7f7      	b.n	8006b5a <memcpy+0x6>

08006b6a <memset>:
 8006b6a:	4402      	add	r2, r0
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d100      	bne.n	8006b74 <memset+0xa>
 8006b72:	4770      	bx	lr
 8006b74:	f803 1b01 	strb.w	r1, [r3], #1
 8006b78:	e7f9      	b.n	8006b6e <memset+0x4>
	...

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
