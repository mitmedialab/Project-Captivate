
stm32_altMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004754  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080048e0  080048e0  000148e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004ae8  08004ae8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ae8  08004ae8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000018  08004b08  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004b08  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011460  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000276c  00000000  00000000  000314a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008688  00000000  00000000  00033c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a20  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000988  00000000  00000000  0003ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000071ef  00000000  00000000  0003d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000037f9  00000000  00000000  00044837  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00048030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea8  00000000  00000000  000480ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048c4 	.word	0x080048c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080048c4 	.word	0x080048c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b04:	b500      	push	{lr}
 8000b06:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	9303      	str	r3, [sp, #12]
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b16:	4825      	ldr	r0, [pc, #148]	; (8000bac <MX_ADC1_Init+0xa8>)
 8000b18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b1c:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b22:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b26:	2201      	movs	r2, #1
 8000b28:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b2a:	7643      	strb	r3, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b30:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b32:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b34:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b36:	2103      	movs	r1, #3
 8000b38:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b3a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b3e:	2104      	movs	r1, #4
 8000b40:	6141      	str	r1, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b42:	7603      	strb	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b46:	f000 fd61 	bl	800160c <HAL_ADC_Init>
 8000b4a:	bb18      	cbnz	r0, 8000b94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b54:	2300      	movs	r3, #0
 8000b56:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000b58:	2206      	movs	r2, #6
 8000b5a:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5c:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000b5e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b60:	4669      	mov	r1, sp
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <MX_ADC1_Init+0xa8>)
 8000b64:	f001 f850 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000b68:	b9b8      	cbnz	r0, 8000b9a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b72:	4669      	mov	r1, sp
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_ADC1_Init+0xa8>)
 8000b76:	f001 f847 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000b7a:	b988      	cbnz	r0, 8000ba0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b80:	2303      	movs	r3, #3
 8000b82:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b84:	4669      	mov	r1, sp
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <MX_ADC1_Init+0xa8>)
 8000b88:	f001 f83e 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000b8c:	b958      	cbnz	r0, 8000ba6 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
  }

}
 8000b8e:	b007      	add	sp, #28
 8000b90:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b94:	f000 fb70 	bl	8001278 <Error_Handler>
 8000b98:	e7d8      	b.n	8000b4c <MX_ADC1_Init+0x48>
    Error_Handler();
 8000b9a:	f000 fb6d 	bl	8001278 <Error_Handler>
 8000b9e:	e7e4      	b.n	8000b6a <MX_ADC1_Init+0x66>
    Error_Handler();
 8000ba0:	f000 fb6a 	bl	8001278 <Error_Handler>
 8000ba4:	e7ea      	b.n	8000b7c <MX_ADC1_Init+0x78>
    Error_Handler();
 8000ba6:	f000 fb67 	bl	8001278 <Error_Handler>
}
 8000baa:	e7f0      	b.n	8000b8e <MX_ADC1_Init+0x8a>
 8000bac:	20000074 	.word	0x20000074

08000bb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	9304      	str	r3, [sp, #16]
 8000bba:	9305      	str	r3, [sp, #20]
 8000bbc:	9306      	str	r3, [sp, #24]
 8000bbe:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000bc0:	6803      	ldr	r3, [r0, #0]
 8000bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc6:	d001      	beq.n	8000bcc <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bc8:	b008      	add	sp, #32
 8000bca:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bcc:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8000bd0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000be2:	9200      	str	r2, [sp, #0]
 8000be4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bfe:	615a      	str	r2, [r3, #20]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DIODE_RIGHT_Pin|DIODE_LEFT_Pin;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2403      	movs	r4, #3
 8000c10:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	eb0d 0103 	add.w	r1, sp, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f001 f9ff 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIODE_CENTER_Pin;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2400      	movs	r4, #0
 8000c26:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(DIODE_CENTER_GPIO_Port, &GPIO_InitStruct);
 8000c28:	a903      	add	r1, sp, #12
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <HAL_ADC_MspInit+0x94>)
 8000c2c:	f001 f9f6 	bl	800201c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000c30:	4622      	mov	r2, r4
 8000c32:	4621      	mov	r1, r4
 8000c34:	2012      	movs	r0, #18
 8000c36:	f001 f999 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000c3a:	2012      	movs	r0, #18
 8000c3c:	f001 f9ca 	bl	8001fd4 <HAL_NVIC_EnableIRQ>
}
 8000c40:	e7c2      	b.n	8000bc8 <HAL_ADC_MspInit+0x18>
 8000c42:	bf00      	nop
 8000c44:	48000400 	.word	0x48000400

08000c48 <cameraDetectionTask>:
uint8_t left_brightness;
uint8_t right_brightness;


/* Functions Definition ------------------------------------------------------*/
void cameraDetectionTask(void *argument){
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	b084      	sub	sp, #16

	HAL_Delay(100);
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f000 fbe0 	bl	8001414 <HAL_Delay>
	uint32_t evt = 0;
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8000c54:	2034      	movs	r0, #52	; 0x34
 8000c56:	f000 fa55 	bl	8001104 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8000c5a:	2035      	movs	r0, #53	; 0x35
 8000c5c:	f000 fa52 	bl	8001104 <setup_LP5523>
 8000c60:	e12f      	b.n	8000ec2 <cameraDetectionTask+0x27a>

					if(ADCValue[2] >= THRESHOLD){
						diode_center += ADCValue[2];
					}

					HAL_ADC_Stop(&hadc1);
 8000c62:	48a3      	ldr	r0, [pc, #652]	; (8000ef0 <cameraDetectionTask+0x2a8>)
 8000c64:	f000 fe0b 	bl	800187e <HAL_ADC_Stop>
					HAL_Delay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f000 fbd3 	bl	8001414 <HAL_Delay>
				for(int i=0; i<SAMPLE_CNT; i++){
 8000c6e:	3601      	adds	r6, #1
 8000c70:	2e13      	cmp	r6, #19
 8000c72:	dc57      	bgt.n	8000d24 <cameraDetectionTask+0xdc>
					HAL_ADC_Start(&hadc1);
 8000c74:	4c9e      	ldr	r4, [pc, #632]	; (8000ef0 <cameraDetectionTask+0x2a8>)
 8000c76:	4620      	mov	r0, r4
 8000c78:	f000 fdb8 	bl	80017ec <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	4620      	mov	r0, r4
 8000c82:	f000 fe21 	bl	80018c8 <HAL_ADC_PollForConversion>
					ADCValue[0] = HAL_ADC_GetValue(&hadc1);
 8000c86:	4620      	mov	r0, r4
 8000c88:	f000 fe9a 	bl	80019c0 <HAL_ADC_GetValue>
 8000c8c:	b280      	uxth	r0, r0
 8000c8e:	4d99      	ldr	r5, [pc, #612]	; (8000ef4 <cameraDetectionTask+0x2ac>)
 8000c90:	8028      	strh	r0, [r5, #0]
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c92:	f04f 31ff 	mov.w	r1, #4294967295
 8000c96:	4620      	mov	r0, r4
 8000c98:	f000 fe16 	bl	80018c8 <HAL_ADC_PollForConversion>
					ADCValue[1] = HAL_ADC_GetValue(&hadc1);
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f000 fe8f 	bl	80019c0 <HAL_ADC_GetValue>
 8000ca2:	b280      	uxth	r0, r0
 8000ca4:	8068      	strh	r0, [r5, #2]
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8000caa:	4620      	mov	r0, r4
 8000cac:	f000 fe0c 	bl	80018c8 <HAL_ADC_PollForConversion>
					ADCValue[2] = HAL_ADC_GetValue(&hadc1);
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f000 fe85 	bl	80019c0 <HAL_ADC_GetValue>
 8000cb6:	b280      	uxth	r0, r0
 8000cb8:	80a8      	strh	r0, [r5, #4]
					if(ADCValue[0] >= THRESHOLD){
 8000cba:	882b      	ldrh	r3, [r5, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	d90b      	bls.n	8000cda <cameraDetectionTask+0x92>
						diode_right += ADCValue[0];
 8000cc2:	8828      	ldrh	r0, [r5, #0]
 8000cc4:	4c8c      	ldr	r4, [pc, #560]	; (8000ef8 <cameraDetectionTask+0x2b0>)
 8000cc6:	f7ff fbd1 	bl	800046c <__aeabi_i2d>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000cd2:	f7ff fa7f 	bl	80001d4 <__adddf3>
 8000cd6:	e9c4 0100 	strd	r0, r1, [r4]
					if(ADCValue[1] >= THRESHOLD){
 8000cda:	4b86      	ldr	r3, [pc, #536]	; (8000ef4 <cameraDetectionTask+0x2ac>)
 8000cdc:	885b      	ldrh	r3, [r3, #2]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2b63      	cmp	r3, #99	; 0x63
 8000ce2:	d90c      	bls.n	8000cfe <cameraDetectionTask+0xb6>
						diode_left += ADCValue[1];
 8000ce4:	4b83      	ldr	r3, [pc, #524]	; (8000ef4 <cameraDetectionTask+0x2ac>)
 8000ce6:	8858      	ldrh	r0, [r3, #2]
 8000ce8:	4c84      	ldr	r4, [pc, #528]	; (8000efc <cameraDetectionTask+0x2b4>)
 8000cea:	f7ff fbbf 	bl	800046c <__aeabi_i2d>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000cf6:	f7ff fa6d 	bl	80001d4 <__adddf3>
 8000cfa:	e9c4 0100 	strd	r0, r1, [r4]
					if(ADCValue[2] >= THRESHOLD){
 8000cfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <cameraDetectionTask+0x2ac>)
 8000d00:	889b      	ldrh	r3, [r3, #4]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b63      	cmp	r3, #99	; 0x63
 8000d06:	d9ac      	bls.n	8000c62 <cameraDetectionTask+0x1a>
						diode_center += ADCValue[2];
 8000d08:	4b7a      	ldr	r3, [pc, #488]	; (8000ef4 <cameraDetectionTask+0x2ac>)
 8000d0a:	8898      	ldrh	r0, [r3, #4]
 8000d0c:	4c7c      	ldr	r4, [pc, #496]	; (8000f00 <cameraDetectionTask+0x2b8>)
 8000d0e:	f7ff fbad 	bl	800046c <__aeabi_i2d>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000d1a:	f7ff fa5b 	bl	80001d4 <__adddf3>
 8000d1e:	e9c4 0100 	strd	r0, r1, [r4]
 8000d22:	e79e      	b.n	8000c62 <cameraDetectionTask+0x1a>
				}

				// get average
				diode_right = diode_right / SAMPLE_CNT;
 8000d24:	4c74      	ldr	r4, [pc, #464]	; (8000ef8 <cameraDetectionTask+0x2b0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <cameraDetectionTask+0x2bc>)
 8000d2a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000d2e:	f7ff fd31 	bl	8000794 <__aeabi_ddiv>
 8000d32:	4606      	mov	r6, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	e9c4 6700 	strd	r6, r7, [r4]
				diode_left = diode_left / SAMPLE_CNT;
 8000d3a:	4c70      	ldr	r4, [pc, #448]	; (8000efc <cameraDetectionTask+0x2b4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4b71      	ldr	r3, [pc, #452]	; (8000f04 <cameraDetectionTask+0x2bc>)
 8000d40:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000d44:	f7ff fd26 	bl	8000794 <__aeabi_ddiv>
 8000d48:	4680      	mov	r8, r0
 8000d4a:	4689      	mov	r9, r1
 8000d4c:	e9c4 8900 	strd	r8, r9, [r4]
				diode_center = diode_center / SAMPLE_CNT;
 8000d50:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8000f00 <cameraDetectionTask+0x2b8>
 8000d54:	2200      	movs	r2, #0
 8000d56:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <cameraDetectionTask+0x2bc>)
 8000d58:	e9da 0100 	ldrd	r0, r1, [sl]
 8000d5c:	f7ff fd1a 	bl	8000794 <__aeabi_ddiv>
 8000d60:	4604      	mov	r4, r0
 8000d62:	460d      	mov	r5, r1
 8000d64:	e9ca 4500 	strd	r4, r5, [sl]

				// treat values as vector
				vec_x = diode_right - diode_left;
 8000d68:	4642      	mov	r2, r8
 8000d6a:	464b      	mov	r3, r9
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff fa2e 	bl	80001d0 <__aeabi_dsub>
 8000d74:	4606      	mov	r6, r0
 8000d76:	460f      	mov	r7, r1
 8000d78:	4b63      	ldr	r3, [pc, #396]	; (8000f08 <cameraDetectionTask+0x2c0>)
 8000d7a:	e9c3 6700 	strd	r6, r7, [r3]
				vec_y = diode_center;
 8000d7e:	4b63      	ldr	r3, [pc, #396]	; (8000f0c <cameraDetectionTask+0x2c4>)
 8000d80:	e9c3 4500 	strd	r4, r5, [r3]

				// get theta of vector if vector exists
				if (vec_y > THRESHOLD || abs(vec_x) > THRESHOLD){
 8000d84:	2200      	movs	r2, #0
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <cameraDetectionTask+0x2c8>)
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	f7ff fe68 	bl	8000a60 <__aeabi_dcmpgt>
 8000d90:	b940      	cbnz	r0, 8000da4 <cameraDetectionTask+0x15c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	4639      	mov	r1, r7
 8000d96:	f7ff fe6d 	bl	8000a74 <__aeabi_d2iz>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	bfb8      	it	lt
 8000d9e:	4240      	neglt	r0, r0
 8000da0:	2864      	cmp	r0, #100	; 0x64
 8000da2:	dd35      	ble.n	8000e10 <cameraDetectionTask+0x1c8>
					theta = tanh(vec_y/vec_x);
 8000da4:	4632      	mov	r2, r6
 8000da6:	463b      	mov	r3, r7
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	f7ff fcf2 	bl	8000794 <__aeabi_ddiv>
 8000db0:	ec41 0b10 	vmov	d0, r0, r1
 8000db4:	f002 fb04 	bl	80033c0 <tanh>
 8000db8:	ec55 4b10 	vmov	r4, r5, d0
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <cameraDetectionTask+0x2cc>)
 8000dbe:	ed83 0b00 	vstr	d0, [r3]

					continue;
				}

				// calculate brightness
				if(theta > M_PI_2){
 8000dc2:	a347      	add	r3, pc, #284	; (adr r3, 8000ee0 <cameraDetectionTask+0x298>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	ee10 0a10 	vmov	r0, s0
 8000dcc:	4629      	mov	r1, r5
 8000dce:	f7ff fe47 	bl	8000a60 <__aeabi_dcmpgt>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d13d      	bne.n	8000e52 <cameraDetectionTask+0x20a>
					right_brightness = ((float) MAX_BRIGHTNESS) * sin(theta);
				}

				// calculate right brightness
				else{
					theta = (theta * -1) + M_PI_2; // compensate for arctan negative region
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	462b      	mov	r3, r5
 8000dda:	a141      	add	r1, pc, #260	; (adr r1, 8000ee0 <cameraDetectionTask+0x298>)
 8000ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000de0:	f7ff f9f6 	bl	80001d0 <__aeabi_dsub>
 8000de4:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <cameraDetectionTask+0x2cc>)
 8000de6:	e9c3 0100 	strd	r0, r1, [r3]
					right_brightness = MAX_BRIGHTNESS;
 8000dea:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <cameraDetectionTask+0x2d0>)
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	701a      	strb	r2, [r3, #0]
					left_brightness = ((float) MAX_BRIGHTNESS ) * sin(theta);
 8000df0:	ec41 0b10 	vmov	d0, r0, r1
 8000df4:	f002 fa9c 	bl	8003330 <sin>
 8000df8:	a33b      	add	r3, pc, #236	; (adr r3, 8000ee8 <cameraDetectionTask+0x2a0>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	ec51 0b10 	vmov	r0, r1, d0
 8000e02:	f7ff fb9d 	bl	8000540 <__aeabi_dmul>
 8000e06:	f7ff fe5d 	bl	8000ac4 <__aeabi_d2uiz>
 8000e0a:	4b44      	ldr	r3, [pc, #272]	; (8000f1c <cameraDetectionTask+0x2d4>)
 8000e0c:	7018      	strb	r0, [r3, #0]
 8000e0e:	e032      	b.n	8000e76 <cameraDetectionTask+0x22e>
					colorSet.loc.left_side_b = 0;
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <cameraDetectionTask+0x2d8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	711a      	strb	r2, [r3, #4]
					colorSet.loc.right_side_b = 0;
 8000e16:	735a      	strb	r2, [r3, #13]
					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000e18:	2364      	movs	r3, #100	; 0x64
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <cameraDetectionTask+0x2dc>)
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	2216      	movs	r2, #22
 8000e28:	2168      	movs	r1, #104	; 0x68
 8000e2a:	483f      	ldr	r0, [pc, #252]	; (8000f28 <cameraDetectionTask+0x2e0>)
 8000e2c:	f001 fb46 	bl	80024bc <HAL_I2C_Mem_Write>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d1f1      	bne.n	8000e18 <cameraDetectionTask+0x1d0>
					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000e34:	2364      	movs	r3, #100	; 0x64
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	2309      	movs	r3, #9
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <cameraDetectionTask+0x2e4>)
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2216      	movs	r2, #22
 8000e44:	216a      	movs	r1, #106	; 0x6a
 8000e46:	4838      	ldr	r0, [pc, #224]	; (8000f28 <cameraDetectionTask+0x2e0>)
 8000e48:	f001 fb38 	bl	80024bc <HAL_I2C_Mem_Write>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d1f1      	bne.n	8000e34 <cameraDetectionTask+0x1ec>
 8000e50:	e037      	b.n	8000ec2 <cameraDetectionTask+0x27a>
					left_brightness = MAX_BRIGHTNESS;
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <cameraDetectionTask+0x2d4>)
 8000e54:	22ff      	movs	r2, #255	; 0xff
 8000e56:	701a      	strb	r2, [r3, #0]
					right_brightness = ((float) MAX_BRIGHTNESS) * sin(theta);
 8000e58:	ec45 4b10 	vmov	d0, r4, r5
 8000e5c:	f002 fa68 	bl	8003330 <sin>
 8000e60:	a321      	add	r3, pc, #132	; (adr r3, 8000ee8 <cameraDetectionTask+0x2a0>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	ec51 0b10 	vmov	r0, r1, d0
 8000e6a:	f7ff fb69 	bl	8000540 <__aeabi_dmul>
 8000e6e:	f7ff fe29 	bl	8000ac4 <__aeabi_d2uiz>
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <cameraDetectionTask+0x2d0>)
 8000e74:	7018      	strb	r0, [r3, #0]
				}

				colorSet.loc.left_side_b = left_brightness;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <cameraDetectionTask+0x2d8>)
 8000e78:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <cameraDetectionTask+0x2d4>)
 8000e7a:	7812      	ldrb	r2, [r2, #0]
 8000e7c:	711a      	strb	r2, [r3, #4]
				colorSet.loc.right_side_b = right_brightness;
 8000e7e:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <cameraDetectionTask+0x2d0>)
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	735a      	strb	r2, [r3, #13]
//				FrontLightsSet(&colorSet);
//
//				memcpy(led_left_PWM, colorSet.color, 9);
//				memcpy(led_right_PWM, &(colorSet.color[9]), 9);

				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000e84:	2364      	movs	r3, #100	; 0x64
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	2309      	movs	r3, #9
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <cameraDetectionTask+0x2dc>)
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	2216      	movs	r2, #22
 8000e94:	2168      	movs	r1, #104	; 0x68
 8000e96:	4824      	ldr	r0, [pc, #144]	; (8000f28 <cameraDetectionTask+0x2e0>)
 8000e98:	f001 fb10 	bl	80024bc <HAL_I2C_Mem_Write>
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d1f1      	bne.n	8000e84 <cameraDetectionTask+0x23c>
				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <cameraDetectionTask+0x2e4>)
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2216      	movs	r2, #22
 8000eb0:	216a      	movs	r1, #106	; 0x6a
 8000eb2:	481d      	ldr	r0, [pc, #116]	; (8000f28 <cameraDetectionTask+0x2e0>)
 8000eb4:	f001 fb02 	bl	80024bc <HAL_I2C_Mem_Write>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d1f1      	bne.n	8000ea0 <cameraDetectionTask+0x258>

				HAL_Delay(200);
 8000ebc:	20c8      	movs	r0, #200	; 0xc8
 8000ebe:	f000 faa9 	bl	8001414 <HAL_Delay>
				diode_left = 0;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <cameraDetectionTask+0x2b4>)
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
				diode_right = 0;
 8000ecc:	490a      	ldr	r1, [pc, #40]	; (8000ef8 <cameraDetectionTask+0x2b0>)
 8000ece:	e9c1 2300 	strd	r2, r3, [r1]
				diode_center = 0;
 8000ed2:	490b      	ldr	r1, [pc, #44]	; (8000f00 <cameraDetectionTask+0x2b8>)
 8000ed4:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i=0; i<SAMPLE_CNT; i++){
 8000ed8:	2600      	movs	r6, #0
 8000eda:	e6c9      	b.n	8000c70 <cameraDetectionTask+0x28>
 8000edc:	f3af 8000 	nop.w
 8000ee0:	54442d18 	.word	0x54442d18
 8000ee4:	3ff921fb 	.word	0x3ff921fb
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	406fe000 	.word	0x406fe000
 8000ef0:	20000074 	.word	0x20000074
 8000ef4:	20000034 	.word	0x20000034
 8000ef8:	20000050 	.word	0x20000050
 8000efc:	20000048 	.word	0x20000048
 8000f00:	20000040 	.word	0x20000040
 8000f04:	40340000 	.word	0x40340000
 8000f08:	200000c8 	.word	0x200000c8
 8000f0c:	200000f8 	.word	0x200000f8
 8000f10:	40590000 	.word	0x40590000
 8000f14:	200000d0 	.word	0x200000d0
 8000f18:	200000f0 	.word	0x200000f0
 8000f1c:	200000f1 	.word	0x200000f1
 8000f20:	200000d8 	.word	0x200000d8
 8000f24:	2000005c 	.word	0x2000005c
 8000f28:	20000104 	.word	0x20000104
 8000f2c:	20000068 	.word	0x20000068

08000f30 <HAL_ADC_ConvCpltCallback>:

volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
//	HAL_ADC_Stop_DMA(&hadc1);
	complete++;
 8000f30:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_ADC_ConvCpltCallback+0xc>)
 8000f32:	7813      	ldrb	r3, [r2, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	7013      	strb	r3, [r2, #0]
//
//	// notify ThermopileTask that conversion is complete
//	diodeSamplesPtr = &(diodeSamples[HALF_DIODE_SAMPLES]);
//	osThreadFlagsSet(cameraDetectionTaskHandle, 0x00000004U);

}
 8000f3a:	4770      	bx	lr
 8000f3c:	2000003a 	.word	0x2000003a

08000f40 <HAL_ADC_ErrorCallback>:
}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 8000f40:	4a02      	ldr	r2, [pc, #8]	; (8000f4c <HAL_ADC_ErrorCallback+0xc>)
 8000f42:	7813      	ldrb	r3, [r2, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	7013      	strb	r3, [r2, #0]
}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000058 	.word	0x20000058

08000f50 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f50:	b530      	push	{r4, r5, lr}
 8000f52:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	2400      	movs	r4, #0
 8000f56:	9403      	str	r4, [sp, #12]
 8000f58:	9404      	str	r4, [sp, #16]
 8000f5a:	9405      	str	r4, [sp, #20]
 8000f5c:	9406      	str	r4, [sp, #24]
 8000f5e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_GPIO_Init+0xb8>)
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000f70:	9200      	str	r2, [sp, #0]
 8000f72:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f82:	9201      	str	r2, [sp, #4]
 8000f84:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_INT_Pin|TP25_Pin|TP24_Pin|TP22_Pin 
 8000f98:	4622      	mov	r2, r4
 8000f9a:	f241 7110 	movw	r1, #5904	; 0x1710
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f001 f8ff 	bl	80021a4 <HAL_GPIO_WritePin>
                          |TP20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f001 f8f9 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 8000fb2:	f640 0383 	movw	r3, #2179	; 0x883
 8000fb6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb8:	2503      	movs	r5, #3
 8000fba:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	a903      	add	r1, sp, #12
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f001 f82a 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin|TP_SS_Pin|TP25_Pin|TP24_Pin 
 8000fc8:	f241 7350 	movw	r3, #5968	; 0x1750
 8000fcc:	9303      	str	r3, [sp, #12]
                          |TP22_Pin|TP20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	a903      	add	r1, sp, #12
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f001 f81e 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_GPIO_Init+0xbc>)
 8000fe6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000fea:	a903      	add	r1, sp, #12
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f001 f814 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ff4:	2378      	movs	r3, #120	; 0x78
 8000ff6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	a903      	add	r1, sp, #12
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_GPIO_Init+0xc0>)
 8001000:	f001 f80c 	bl	800201c <HAL_GPIO_Init>

}
 8001004:	b009      	add	sp, #36	; 0x24
 8001006:	bd30      	pop	{r4, r5, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	10110000 	.word	0x10110000
 8001010:	48000400 	.word	0x48000400

08001014 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001014:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <MX_I2C1_Init+0x50>)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_I2C1_Init+0x54>)
 800101a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00301D29;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_I2C1_Init+0x58>)
 800101e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 240;
 8001020:	23f0      	movs	r3, #240	; 0xf0
 8001022:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001024:	2301      	movs	r3, #1
 8001026:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800102c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800102e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001030:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001032:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001034:	f001 f9e4 	bl	8002400 <HAL_I2C_Init>
 8001038:	b950      	cbnz	r0, 8001050 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_I2C1_Init+0x50>)
 800103e:	f001 fb0f 	bl	8002660 <HAL_I2CEx_ConfigAnalogFilter>
 8001042:	b940      	cbnz	r0, 8001056 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <MX_I2C1_Init+0x50>)
 8001048:	f001 fb38 	bl	80026bc <HAL_I2CEx_ConfigDigitalFilter>
 800104c:	b930      	cbnz	r0, 800105c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 800104e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001050:	f000 f912 	bl	8001278 <Error_Handler>
 8001054:	e7f1      	b.n	800103a <MX_I2C1_Init+0x26>
    Error_Handler();
 8001056:	f000 f90f 	bl	8001278 <Error_Handler>
 800105a:	e7f3      	b.n	8001044 <MX_I2C1_Init+0x30>
    Error_Handler();
 800105c:	f000 f90c 	bl	8001278 <Error_Handler>
}
 8001060:	e7f5      	b.n	800104e <MX_I2C1_Init+0x3a>
 8001062:	bf00      	nop
 8001064:	20000104 	.word	0x20000104
 8001068:	40005400 	.word	0x40005400
 800106c:	00301d29 	.word	0x00301d29

08001070 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	2300      	movs	r3, #0
 8001076:	9303      	str	r3, [sp, #12]
 8001078:	9304      	str	r3, [sp, #16]
 800107a:	9305      	str	r3, [sp, #20]
 800107c:	9306      	str	r3, [sp, #24]
 800107e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8001080:	6802      	ldr	r2, [r0, #0]
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001088:	b009      	add	sp, #36	; 0x24
 800108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4c1b      	ldr	r4, [pc, #108]	; (80010fc <HAL_I2C_MspInit+0x8c>)
 800108e:	6963      	ldr	r3, [r4, #20]
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6163      	str	r3, [r4, #20]
 8001096:	6963      	ldr	r3, [r4, #20]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	6963      	ldr	r3, [r4, #20]
 80010a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a6:	6163      	str	r3, [r4, #20]
 80010a8:	6963      	ldr	r3, [r4, #20]
 80010aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b8:	2712      	movs	r7, #18
 80010ba:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	2603      	movs	r6, #3
 80010be:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c0:	2504      	movs	r5, #4
 80010c2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	a903      	add	r1, sp, #12
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f000 ffa7 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010da:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	a903      	add	r1, sp, #12
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x90>)
 80010e0:	f000 ff9c 	bl	800201c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e4:	69e3      	ldr	r3, [r4, #28]
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	61e3      	str	r3, [r4, #28]
 80010ec:	69e3      	ldr	r3, [r4, #28]
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	9b02      	ldr	r3, [sp, #8]
}
 80010f6:	e7c7      	b.n	8001088 <HAL_I2C_MspInit+0x18>
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 8001104:	b530      	push	{r4, r5, lr}
 8001106:	b08b      	sub	sp, #44	; 0x2c
	uint8_t deviceAddress = ADDR << 1;
 8001108:	0040      	lsls	r0, r0, #1
 800110a:	b2c5      	uxtb	r5, r0
	uint8_t led_PWM[9] = {0};
 800110c:	2300      	movs	r3, #0
 800110e:	9307      	str	r3, [sp, #28]
 8001110:	9308      	str	r3, [sp, #32]
 8001112:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	uint8_t packet;

	// enable chip
	packet = LP5525_CHIP_EN;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 800111c:	b2ac      	uxth	r4, r5
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f10d 021b 	add.w	r2, sp, #27
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	4621      	mov	r1, r4
 8001132:	482d      	ldr	r0, [pc, #180]	; (80011e8 <setup_LP5523+0xe4>)
 8001134:	f001 f9c2 	bl	80024bc <HAL_I2C_Mem_Write>
 8001138:	2800      	cmp	r0, #0
 800113a:	d1ef      	bne.n	800111c <setup_LP5523+0x18>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 800113c:	234f      	movs	r3, #79	; 0x4f
 800113e:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	2301      	movs	r3, #1
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	f10d 021b 	add.w	r2, sp, #27
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	2236      	movs	r2, #54	; 0x36
 8001154:	4621      	mov	r1, r4
 8001156:	4824      	ldr	r0, [pc, #144]	; (80011e8 <setup_LP5523+0xe4>)
 8001158:	f001 f9b0 	bl	80024bc <HAL_I2C_Mem_Write>
 800115c:	2800      	cmp	r0, #0
 800115e:	d1f0      	bne.n	8001142 <setup_LP5523+0x3e>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2309      	movs	r3, #9
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	ab07      	add	r3, sp, #28
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	2216      	movs	r2, #22
 8001172:	4621      	mov	r1, r4
 8001174:	481c      	ldr	r0, [pc, #112]	; (80011e8 <setup_LP5523+0xe4>)
 8001176:	f001 f9a1 	bl	80024bc <HAL_I2C_Mem_Write>
 800117a:	2800      	cmp	r0, #0
 800117c:	d1f0      	bne.n	8001160 <setup_LP5523+0x5c>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2309      	movs	r3, #9
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <setup_LP5523+0xe8>)
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	2226      	movs	r2, #38	; 0x26
 8001190:	4621      	mov	r1, r4
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <setup_LP5523+0xe4>)
 8001194:	f001 f992 	bl	80024bc <HAL_I2C_Mem_Write>
 8001198:	2800      	cmp	r0, #0
 800119a:	d1f0      	bne.n	800117e <setup_LP5523+0x7a>

	// enable logarithmic dimming
	packet = LOG_EN;
 800119c:	2320      	movs	r3, #32
 800119e:	f88d 301b 	strb.w	r3, [sp, #27]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 80011a2:	f88d 3010 	strb.w	r3, [sp, #16]
 80011a6:	f88d 3011 	strb.w	r3, [sp, #17]
 80011aa:	f88d 3012 	strb.w	r3, [sp, #18]
 80011ae:	f88d 3013 	strb.w	r3, [sp, #19]
 80011b2:	f88d 3014 	strb.w	r3, [sp, #20]
 80011b6:	f88d 3015 	strb.w	r3, [sp, #21]
 80011ba:	f88d 3016 	strb.w	r3, [sp, #22]
 80011be:	f88d 3017 	strb.w	r3, [sp, #23]
 80011c2:	f88d 3018 	strb.w	r3, [sp, #24]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2309      	movs	r3, #9
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	ab04      	add	r3, sp, #16
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	2206      	movs	r2, #6
 80011d8:	4621      	mov	r1, r4
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <setup_LP5523+0xe4>)
 80011dc:	f001 f96e 	bl	80024bc <HAL_I2C_Mem_Write>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1f0      	bne.n	80011c6 <setup_LP5523+0xc2>

}
 80011e4:	b00b      	add	sp, #44	; 0x2c
 80011e6:	bd30      	pop	{r4, r5, pc}
 80011e8:	20000104 	.word	0x20000104
 80011ec:	20000000 	.word	0x20000000

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b530      	push	{r4, r5, lr}
 80011f2:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f4:	2224      	movs	r2, #36	; 0x24
 80011f6:	2100      	movs	r1, #0
 80011f8:	a813      	add	r0, sp, #76	; 0x4c
 80011fa:	f002 f88f 	bl	800331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fe:	2400      	movs	r4, #0
 8001200:	940d      	str	r4, [sp, #52]	; 0x34
 8001202:	940e      	str	r4, [sp, #56]	; 0x38
 8001204:	940f      	str	r4, [sp, #60]	; 0x3c
 8001206:	9410      	str	r4, [sp, #64]	; 0x40
 8001208:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	4621      	mov	r1, r4
 800120e:	a801      	add	r0, sp, #4
 8001210:	f002 f884 	bl	800331c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001214:	230a      	movs	r3, #10
 8001216:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121c:	2510      	movs	r5, #16
 800121e:	9517      	str	r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001220:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001222:	a812      	add	r0, sp, #72	; 0x48
 8001224:	f001 fa76 	bl	8002714 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	930d      	str	r3, [sp, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800122c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001230:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	9411      	str	r4, [sp, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001234:	4621      	mov	r1, r4
 8001236:	a80d      	add	r0, sp, #52	; 0x34
 8001238:	f001 fdcc 	bl	8002dd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SystemClock_Config+0x64>)
 800123e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001240:	9504      	str	r5, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001246:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	a801      	add	r0, sp, #4
 800124a:	f001 fe95 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800124e:	b01d      	add	sp, #116	; 0x74
 8001250:	bd30      	pop	{r4, r5, pc}
 8001252:	bf00      	nop
 8001254:	00010020 	.word	0x00010020

08001258 <main>:
{
 8001258:	b508      	push	{r3, lr}
  HAL_Init();
 800125a:	f000 f8c3 	bl	80013e4 <HAL_Init>
  SystemClock_Config();
 800125e:	f7ff ffc7 	bl	80011f0 <SystemClock_Config>
  MX_GPIO_Init();
 8001262:	f7ff fe75 	bl	8000f50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001266:	f7ff fed5 	bl	8001014 <MX_I2C1_Init>
  MX_ADC1_Init();
 800126a:	f7ff fc4b 	bl	8000b04 <MX_ADC1_Init>
  MX_RTC_Init();
 800126e:	f000 f805 	bl	800127c <MX_RTC_Init>
  cameraDetectionTask();
 8001272:	f7ff fce9 	bl	8000c48 <cameraDetectionTask>
 8001276:	e7fe      	b.n	8001276 <main+0x1e>

08001278 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001278:	4770      	bx	lr
	...

0800127c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800127c:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800127e:	4809      	ldr	r0, [pc, #36]	; (80012a4 <MX_RTC_Init+0x28>)
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_RTC_Init+0x2c>)
 8001282:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001284:	2300      	movs	r3, #0
 8001286:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001288:	227f      	movs	r2, #127	; 0x7f
 800128a:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800128c:	22ff      	movs	r2, #255	; 0xff
 800128e:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001290:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001292:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001294:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001296:	f001 ffba 	bl	800320e <HAL_RTC_Init>
 800129a:	b900      	cbnz	r0, 800129e <MX_RTC_Init+0x22>
  {
    Error_Handler();
  }

}
 800129c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800129e:	f7ff ffeb 	bl	8001278 <Error_Handler>
}
 80012a2:	e7fb      	b.n	800129c <MX_RTC_Init+0x20>
 80012a4:	20000150 	.word	0x20000150
 80012a8:	40002800 	.word	0x40002800

080012ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80012ac:	6802      	ldr	r2, [r0, #0]
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_RTC_MspInit+0x24>)
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d000      	beq.n	80012b6 <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012b4:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012ba:	fa92 f2a2 	rbit	r2, r2
    __HAL_RCC_RTC_ENABLE();
 80012be:	fab2 f282 	clz	r2, r2
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_RTC_MspInit+0x28>)
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	e7f2      	b.n	80012b4 <HAL_RTC_MspInit+0x8>
 80012ce:	bf00      	nop
 80012d0:	40002800 	.word	0x40002800
 80012d4:	10908100 	.word	0x10908100

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_MspInit+0x2c>)
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	619a      	str	r2, [r3, #24]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	f002 0201 	and.w	r2, r2, #1
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	69da      	ldr	r2, [r3, #28]
 80012f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f4:	61da      	str	r2, [r3, #28]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001300:	b002      	add	sp, #8
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001308:	4770      	bx	lr

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	e7fe      	b.n	800130a <HardFault_Handler>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	e7fe      	b.n	800130c <MemManage_Handler>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	e7fe      	b.n	800130e <BusFault_Handler>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler>

08001312 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	4770      	bx	lr

08001318 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001318:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800131a:	4802      	ldr	r0, [pc, #8]	; (8001324 <ADC1_IRQHandler+0xc>)
 800131c:	f000 fb58 	bl	80019d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001320:	bd08      	pop	{r3, pc}
 8001322:	bf00      	nop
 8001324:	20000074 	.word	0x20000074

08001328 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SystemInit+0x18>)
 800132a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800132e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133a:	609a      	str	r2, [r3, #8]
#endif
}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001348:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800135a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
	ldr	r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001362:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <LoopForever+0x16>)
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136e:	f7ff ffdb 	bl	8001328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f001 ffaf 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001376:	f7ff ff6f 	bl	8001258 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800137c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001380:	08004af0 	.word	0x08004af0
	ldr	r0, =_sdata
 8001384:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001388:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 800138c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001390:	20000174 	.word	0x20000174

08001394 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <COMP2_IRQHandler>
	...

08001398 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b510      	push	{r4, lr}
 800139a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_InitTick+0x40>)
 800139e:	7818      	ldrb	r0, [r3, #0]
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80013a8:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <HAL_InitTick+0x44>)
 80013aa:	6810      	ldr	r0, [r2, #0]
 80013ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80013b0:	f000 fe1e 	bl	8001ff0 <HAL_SYSTICK_Config>
 80013b4:	b968      	cbnz	r0, 80013d2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	2c0f      	cmp	r4, #15
 80013b8:	d901      	bls.n	80013be <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e00a      	b.n	80013d4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013be:	2200      	movs	r2, #0
 80013c0:	4621      	mov	r1, r4
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	f000 fdd1 	bl	8001f6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_InitTick+0x48>)
 80013cc:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 80013ce:	2000      	movs	r0, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
}
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	20000010 	.word	0x20000010
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	20000014 	.word	0x20000014

080013e4 <HAL_Init>:
{
 80013e4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x20>)
 80013e8:	6813      	ldr	r3, [r2, #0]
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 fda9 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff ffce 	bl	8001398 <HAL_InitTick>
  HAL_MspInit();
 80013fc:	f7ff ff6c 	bl	80012d8 <HAL_MspInit>
}
 8001400:	2000      	movs	r0, #0
 8001402:	bd08      	pop	{r3, pc}
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <HAL_GetTick+0x8>)
 800140a:	6818      	ldr	r0, [r3, #0]
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000170 	.word	0x20000170

08001414 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fff6 	bl	8001408 <HAL_GetTick>
 800141c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001422:	d002      	beq.n	800142a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_Delay+0x24>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800142a:	f7ff ffed 	bl	8001408 <HAL_GetTick>
 800142e:	1b40      	subs	r0, r0, r5
 8001430:	42a0      	cmp	r0, r4
 8001432:	d3fa      	bcc.n	800142a <HAL_Delay+0x16>
  {
  }
}
 8001434:	bd38      	pop	{r3, r4, r5, pc}
 8001436:	bf00      	nop
 8001438:	20000010 	.word	0x20000010

0800143c <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800143c:	4770      	bx	lr

0800143e <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800143e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001440:	6802      	ldr	r2, [r0, #0]
 8001442:	6893      	ldr	r3, [r2, #8]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d001      	beq.n	8001450 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800144c:	2000      	movs	r0, #0
}
 800144e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001450:	6813      	ldr	r3, [r2, #0]
 8001452:	f013 0f01 	tst.w	r3, #1
 8001456:	d02f      	beq.n	80014b8 <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001458:	6893      	ldr	r3, [r2, #8]
 800145a:	f003 030d 	and.w	r3, r3, #13
 800145e:	2b01      	cmp	r3, #1
 8001460:	d009      	beq.n	8001476 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
 8001474:	e7eb      	b.n	800144e <ADC_Disable+0x10>
 8001476:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8001478:	6893      	ldr	r3, [r2, #8]
 800147a:	f043 0302 	orr.w	r3, r3, #2
 800147e:	6093      	str	r3, [r2, #8]
 8001480:	6803      	ldr	r3, [r0, #0]
 8001482:	2203      	movs	r2, #3
 8001484:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001486:	f7ff ffbf 	bl	8001408 <HAL_GetTick>
 800148a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f013 0f01 	tst.w	r3, #1
 8001494:	d00e      	beq.n	80014b4 <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001496:	f7ff ffb7 	bl	8001408 <HAL_GetTick>
 800149a:	1b40      	subs	r0, r0, r5
 800149c:	2802      	cmp	r0, #2
 800149e:	d9f5      	bls.n	800148c <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
 80014b2:	e7cc      	b.n	800144e <ADC_Disable+0x10>
  return HAL_OK;
 80014b4:	2000      	movs	r0, #0
 80014b6:	e7ca      	b.n	800144e <ADC_Disable+0x10>
 80014b8:	2000      	movs	r0, #0
 80014ba:	e7c8      	b.n	800144e <ADC_Disable+0x10>

080014bc <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80014bc:	6803      	ldr	r3, [r0, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	f012 0f0c 	tst.w	r2, #12
 80014c4:	d061      	beq.n	800158a <ADC_ConversionStop+0xce>
{
 80014c6:	b570      	push	{r4, r5, r6, lr}
 80014c8:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80014d0:	d004      	beq.n	80014dc <ADC_ConversionStop+0x20>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80014d2:	8b00      	ldrh	r0, [r0, #24]
 80014d4:	f240 1201 	movw	r2, #257	; 0x101
 80014d8:	4290      	cmp	r0, r2
 80014da:	d042      	beq.n	8001562 <ADC_ConversionStop+0xa6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80014dc:	2960      	cmp	r1, #96	; 0x60
 80014de:	d00c      	beq.n	80014fa <ADC_ConversionStop+0x3e>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	f012 0f04 	tst.w	r2, #4
 80014e8:	d007      	beq.n	80014fa <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80014ea:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014ec:	f012 0f02 	tst.w	r2, #2
 80014f0:	d103      	bne.n	80014fa <ADC_ConversionStop+0x3e>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	f042 0210 	orr.w	r2, r2, #16
 80014f8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80014fa:	290c      	cmp	r1, #12
 80014fc:	d00c      	beq.n	8001518 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	f012 0f08 	tst.w	r2, #8
 8001506:	d007      	beq.n	8001518 <ADC_ConversionStop+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001508:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800150a:	f012 0f02 	tst.w	r2, #2
 800150e:	d103      	bne.n	8001518 <ADC_ConversionStop+0x5c>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	f042 0220 	orr.w	r2, r2, #32
 8001516:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001518:	2960      	cmp	r1, #96	; 0x60
 800151a:	d032      	beq.n	8001582 <ADC_ConversionStop+0xc6>
 800151c:	296c      	cmp	r1, #108	; 0x6c
 800151e:	d12e      	bne.n	800157e <ADC_ConversionStop+0xc2>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001520:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001522:	f7ff ff71 	bl	8001408 <HAL_GetTick>
 8001526:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	422b      	tst	r3, r5
 800152e:	d02a      	beq.n	8001586 <ADC_ConversionStop+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001530:	f7ff ff6a 	bl	8001408 <HAL_GetTick>
 8001534:	1b80      	subs	r0, r0, r6
 8001536:	280b      	cmp	r0, #11
 8001538:	d9f6      	bls.n	8001528 <ADC_ConversionStop+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6463      	str	r3, [r4, #68]	; 0x44
        
        return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
 800154c:	e01c      	b.n	8001588 <ADC_ConversionStop+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800155e:	2001      	movs	r0, #1
 8001560:	e012      	b.n	8001588 <ADC_ConversionStop+0xcc>
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001562:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	f011 0f40 	tst.w	r1, #64	; 0x40
 800156a:	d104      	bne.n	8001576 <ADC_ConversionStop+0xba>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800156c:	4908      	ldr	r1, [pc, #32]	; (8001590 <ADC_ConversionStop+0xd4>)
 800156e:	428a      	cmp	r2, r1
 8001570:	d8ed      	bhi.n	800154e <ADC_ConversionStop+0x92>
        Conversion_Timeout_CPU_cycles ++;
 8001572:	3201      	adds	r2, #1
 8001574:	e7f6      	b.n	8001564 <ADC_ConversionStop+0xa8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 800157a:	210c      	movs	r1, #12
 800157c:	e7b0      	b.n	80014e0 <ADC_ConversionStop+0x24>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800157e:	2504      	movs	r5, #4
        break;
 8001580:	e7cf      	b.n	8001522 <ADC_ConversionStop+0x66>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001582:	2508      	movs	r5, #8
 8001584:	e7cd      	b.n	8001522 <ADC_ConversionStop+0x66>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001586:	2000      	movs	r0, #0
}
 8001588:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800158a:	2000      	movs	r0, #0
}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	000993ff 	.word	0x000993ff

08001594 <ADC_Enable>:
{
 8001594:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001596:	6802      	ldr	r2, [r0, #0]
 8001598:	6893      	ldr	r3, [r2, #8]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d00d      	beq.n	80015be <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015a2:	6891      	ldr	r1, [r2, #8]
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <ADC_Enable+0x74>)
 80015a6:	4219      	tst	r1, r3
 80015a8:	d00f      	beq.n	80015ca <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
}
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f013 0f01 	tst.w	r3, #1
 80015c4:	d0ed      	beq.n	80015a2 <ADC_Enable+0xe>
  return HAL_OK;
 80015c6:	2000      	movs	r0, #0
 80015c8:	e7f8      	b.n	80015bc <ADC_Enable+0x28>
 80015ca:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80015cc:	6893      	ldr	r3, [r2, #8]
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80015d4:	f7ff ff18 	bl	8001408 <HAL_GetTick>
 80015d8:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f013 0f01 	tst.w	r3, #1
 80015e2:	d10e      	bne.n	8001602 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015e4:	f7ff ff10 	bl	8001408 <HAL_GetTick>
 80015e8:	1b40      	subs	r0, r0, r5
 80015ea:	2802      	cmp	r0, #2
 80015ec:	d9f5      	bls.n	80015da <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
 8001600:	e7dc      	b.n	80015bc <ADC_Enable+0x28>
  return HAL_OK;
 8001602:	2000      	movs	r0, #0
 8001604:	e7da      	b.n	80015bc <ADC_Enable+0x28>
 8001606:	bf00      	nop
 8001608:	8000003f 	.word	0x8000003f

0800160c <HAL_ADC_Init>:
{
 800160c:	b530      	push	{r4, r5, lr}
 800160e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001614:	2800      	cmp	r0, #0
 8001616:	f000 80df 	beq.w	80017d8 <HAL_ADC_Init+0x1cc>
 800161a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800161c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800161e:	f013 0f10 	tst.w	r3, #16
 8001622:	d152      	bne.n	80016ca <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001624:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001626:	b1ab      	cbz	r3, 8001654 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001632:	d003      	beq.n	800163c <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001634:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001636:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800163a:	d047      	beq.n	80016cc <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 800163c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800163e:	f023 0312 	bic.w	r3, r3, #18
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001648:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8001650:	2001      	movs	r0, #1
 8001652:	e03b      	b.n	80016cc <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001654:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 8001656:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001658:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 800165a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800165e:	f7ff faa7 	bl	8000bb0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800166a:	d001      	beq.n	8001670 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2000      	movs	r0, #0
 800166e:	e7dc      	b.n	800162a <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001670:	4620      	mov	r0, r4
 8001672:	f7ff fee4 	bl	800143e <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001678:	f013 0f10 	tst.w	r3, #16
 800167c:	d1d5      	bne.n	800162a <HAL_ADC_Init+0x1e>
 800167e:	2800      	cmp	r0, #0
 8001680:	d1d3      	bne.n	800162a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001684:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001688:	f023 0302 	bic.w	r3, r3, #2
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001692:	6822      	ldr	r2, [r4, #0]
 8001694:	6893      	ldr	r3, [r2, #8]
 8001696:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800169a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	6893      	ldr	r3, [r2, #8]
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_ADC_Init+0x1d0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <HAL_ADC_Init+0x1d4>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016b6:	005a      	lsls	r2, r3, #1
 80016b8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80016ba:	e002      	b.n	80016c2 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 80016bc:	9b01      	ldr	r3, [sp, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f9      	bne.n	80016bc <HAL_ADC_Init+0xb0>
 80016c8:	e7af      	b.n	800162a <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ca:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ce:	f013 0f10 	tst.w	r3, #16
 80016d2:	d178      	bne.n	80017c6 <HAL_ADC_Init+0x1ba>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d176      	bne.n	80017c6 <HAL_ADC_Init+0x1ba>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016d8:	6821      	ldr	r1, [r4, #0]
 80016da:	688a      	ldr	r2, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80016dc:	f012 0204 	ands.w	r2, r2, #4
 80016e0:	d171      	bne.n	80017c6 <HAL_ADC_Init+0x1ba>
    ADC_STATE_CLR_SET(hadc->State,
 80016e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6423      	str	r3, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016ee:	688b      	ldr	r3, [r1, #8]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d045      	beq.n	8001784 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80016f8:	493a      	ldr	r1, [pc, #232]	; (80017e4 <HAL_ADC_Init+0x1d8>)
 80016fa:	688b      	ldr	r3, [r1, #8]
 80016fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001700:	6865      	ldr	r5, [r4, #4]
 8001702:	432b      	orrs	r3, r5
 8001704:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001706:	7e61      	ldrb	r1, [r4, #25]
 8001708:	034b      	lsls	r3, r1, #13
 800170a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800170c:	2d01      	cmp	r5, #1
 800170e:	d001      	beq.n	8001714 <HAL_ADC_Init+0x108>
 8001710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001714:	4313      	orrs	r3, r2
 8001716:	68e2      	ldr	r2, [r4, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	68a2      	ldr	r2, [r4, #8]
 800171c:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800171e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001722:	2a01      	cmp	r2, #1
 8001724:	d033      	beq.n	800178e <HAL_ADC_Init+0x182>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001726:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001728:	2a01      	cmp	r2, #1
 800172a:	d002      	beq.n	8001732 <HAL_ADC_Init+0x126>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800172c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800172e:	430a      	orrs	r2, r1
 8001730:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	6891      	ldr	r1, [r2, #8]
 8001736:	f011 0f0c 	tst.w	r1, #12
 800173a:	d10c      	bne.n	8001756 <HAL_ADC_Init+0x14a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800173c:	68d1      	ldr	r1, [r2, #12]
 800173e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001742:	f021 0102 	bic.w	r1, r1, #2
 8001746:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001748:	7e21      	ldrb	r1, [r4, #24]
 800174a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800174e:	0052      	lsls	r2, r2, #1
 8001750:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001754:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001756:	6821      	ldr	r1, [r4, #0]
 8001758:	68cd      	ldr	r5, [r1, #12]
 800175a:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_ADC_Init+0x1dc>)
 800175c:	402a      	ands	r2, r5
 800175e:	4313      	orrs	r3, r2
 8001760:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001762:	6923      	ldr	r3, [r4, #16]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d025      	beq.n	80017b4 <HAL_ADC_Init+0x1a8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001768:	6822      	ldr	r2, [r4, #0]
 800176a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800176c:	f023 030f 	bic.w	r3, r3, #15
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001772:	2300      	movs	r3, #0
 8001774:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001778:	f023 0303 	bic.w	r3, r3, #3
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6423      	str	r3, [r4, #64]	; 0x40
 8001782:	e027      	b.n	80017d4 <HAL_ADC_Init+0x1c8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001784:	680b      	ldr	r3, [r1, #0]
 8001786:	f013 0f01 	tst.w	r3, #1
 800178a:	d1bc      	bne.n	8001706 <HAL_ADC_Init+0xfa>
 800178c:	e7b4      	b.n	80016f8 <HAL_ADC_Init+0xec>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800178e:	b931      	cbnz	r1, 800179e <HAL_ADC_Init+0x192>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001790:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001792:	3a01      	subs	r2, #1
 8001794:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	e7c3      	b.n	8001726 <HAL_ADC_Init+0x11a>
        ADC_STATE_CLR_SET(hadc->State,
 800179e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017a0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80017a4:	f042 0220 	orr.w	r2, r2, #32
 80017a8:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	6462      	str	r2, [r4, #68]	; 0x44
 80017b2:	e7b8      	b.n	8001726 <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80017b4:	6821      	ldr	r1, [r4, #0]
 80017b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017b8:	f023 030f 	bic.w	r3, r3, #15
 80017bc:	69e2      	ldr	r2, [r4, #28]
 80017be:	3a01      	subs	r2, #1
 80017c0:	4313      	orrs	r3, r2
 80017c2:	630b      	str	r3, [r1, #48]	; 0x30
 80017c4:	e7d5      	b.n	8001772 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 80017c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017c8:	f023 0312 	bic.w	r3, r3, #18
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 80017d2:	2001      	movs	r0, #1
}
 80017d4:	b003      	add	sp, #12
 80017d6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
 80017da:	e7fb      	b.n	80017d4 <HAL_ADC_Init+0x1c8>
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	50000300 	.word	0x50000300
 80017e8:	fff0c007 	.word	0xfff0c007

080017ec <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ec:	6803      	ldr	r3, [r0, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f013 0f04 	tst.w	r3, #4
 80017f4:	d13e      	bne.n	8001874 <HAL_ADC_Start+0x88>
    __HAL_LOCK(hadc);
 80017f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d03d      	beq.n	800187a <HAL_ADC_Start+0x8e>
{
 80017fe:	b510      	push	{r4, lr}
 8001800:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8001802:	2301      	movs	r3, #1
 8001804:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8001808:	f7ff fec4 	bl	8001594 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800180c:	4603      	mov	r3, r0
 800180e:	bb68      	cbnz	r0, 800186c <HAL_ADC_Start+0x80>
      ADC_STATE_CLR_SET(hadc->State,
 8001810:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001812:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181e:	6422      	str	r2, [r4, #64]	; 0x40
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001820:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001822:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001826:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	68d1      	ldr	r1, [r2, #12]
 800182c:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001830:	d005      	beq.n	800183e <HAL_ADC_Start+0x52>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001832:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001834:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001838:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800183c:	6421      	str	r1, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001840:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8001844:	d00f      	beq.n	8001866 <HAL_ADC_Start+0x7a>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001846:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001848:	f021 0106 	bic.w	r1, r1, #6
 800184c:	6461      	str	r1, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800184e:	2100      	movs	r1, #0
 8001850:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001854:	211c      	movs	r1, #28
 8001856:	6011      	str	r1, [r2, #0]
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001858:	6821      	ldr	r1, [r4, #0]
 800185a:	688a      	ldr	r2, [r1, #8]
 800185c:	f042 0204 	orr.w	r2, r2, #4
 8001860:	608a      	str	r2, [r1, #8]
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd10      	pop	{r4, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 8001866:	2100      	movs	r1, #0
 8001868:	6461      	str	r1, [r4, #68]	; 0x44
 800186a:	e7f0      	b.n	800184e <HAL_ADC_Start+0x62>
      __HAL_UNLOCK(hadc);
 800186c:	2200      	movs	r2, #0
 800186e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8001872:	e7f6      	b.n	8001862 <HAL_ADC_Start+0x76>
    tmp_hal_status = HAL_BUSY;
 8001874:	2302      	movs	r3, #2
}
 8001876:	4618      	mov	r0, r3
 8001878:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800187a:	2302      	movs	r3, #2
 800187c:	e7fb      	b.n	8001876 <HAL_ADC_Start+0x8a>

0800187e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800187e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001882:	2b01      	cmp	r3, #1
 8001884:	d01d      	beq.n	80018c2 <HAL_ADC_Stop+0x44>
{
 8001886:	b510      	push	{r4, lr}
 8001888:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800188a:	2301      	movs	r3, #1
 800188c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001890:	216c      	movs	r1, #108	; 0x6c
 8001892:	f7ff fe13 	bl	80014bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001896:	4603      	mov	r3, r0
 8001898:	b120      	cbz	r0, 80018a4 <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 800189a:	2200      	movs	r2, #0
 800189c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7ff fdca 	bl	800143e <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80018aa:	4603      	mov	r3, r0
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d1f4      	bne.n	800189a <HAL_ADC_Stop+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 80018b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018b2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	6422      	str	r2, [r4, #64]	; 0x40
 80018c0:	e7eb      	b.n	800189a <HAL_ADC_Stop+0x1c>
  __HAL_LOCK(hadc);
 80018c2:	2302      	movs	r3, #2
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	4770      	bx	lr

080018c8 <HAL_ADC_PollForConversion>:
{
 80018c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018cc:	6943      	ldr	r3, [r0, #20]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d041      	beq.n	8001956 <HAL_ADC_PollForConversion+0x8e>
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_ADC_PollForConversion+0xf4>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f013 0f1f 	tst.w	r3, #31
 80018da:	d12c      	bne.n	8001936 <HAL_ADC_PollForConversion+0x6e>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80018dc:	6803      	ldr	r3, [r0, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f013 0f01 	tst.w	r3, #1
 80018e4:	d11e      	bne.n	8001924 <HAL_ADC_PollForConversion+0x5c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80018e6:	260c      	movs	r6, #12
 80018e8:	460d      	mov	r5, r1
 80018ea:	4604      	mov	r4, r0
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80018ec:	6803      	ldr	r3, [r0, #0]
 80018ee:	68df      	ldr	r7, [r3, #12]
  tickstart = HAL_GetTick();  
 80018f0:	f7ff fd8a 	bl	8001408 <HAL_GetTick>
 80018f4:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4216      	tst	r6, r2
 80018fc:	d12d      	bne.n	800195a <HAL_ADC_PollForConversion+0x92>
    if(Timeout != HAL_MAX_DELAY)
 80018fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001902:	d0f8      	beq.n	80018f6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001904:	b12d      	cbz	r5, 8001912 <HAL_ADC_PollForConversion+0x4a>
 8001906:	f7ff fd7f 	bl	8001408 <HAL_GetTick>
 800190a:	eba0 0008 	sub.w	r0, r0, r8
 800190e:	42a8      	cmp	r0, r5
 8001910:	d9f1      	bls.n	80018f6 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800191a:	2300      	movs	r3, #0
 800191c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001920:	2003      	movs	r0, #3
 8001922:	e047      	b.n	80019b4 <HAL_ADC_PollForConversion+0xec>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001924:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800192c:	2300      	movs	r3, #0
 800192e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
 8001934:	e03e      	b.n	80019b4 <HAL_ADC_PollForConversion+0xec>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_ADC_PollForConversion+0xf4>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800193e:	d101      	bne.n	8001944 <HAL_ADC_PollForConversion+0x7c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001940:	260c      	movs	r6, #12
 8001942:	e7d1      	b.n	80018e8 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001944:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001946:	f043 0320 	orr.w	r3, r3, #32
 800194a:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800194c:	2300      	movs	r3, #0
 800194e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8001952:	2001      	movs	r0, #1
 8001954:	e02e      	b.n	80019b4 <HAL_ADC_PollForConversion+0xec>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001956:	2608      	movs	r6, #8
 8001958:	e7c6      	b.n	80018e8 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800195a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800195c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001960:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001968:	d11f      	bne.n	80019aa <HAL_ADC_PollForConversion+0xe2>
 800196a:	f417 5f00 	tst.w	r7, #8192	; 0x2000
 800196e:	d11c      	bne.n	80019aa <HAL_ADC_PollForConversion+0xe2>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f012 0f08 	tst.w	r2, #8
 8001976:	d018      	beq.n	80019aa <HAL_ADC_PollForConversion+0xe2>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	f012 0f04 	tst.w	r2, #4
 800197e:	d10c      	bne.n	800199a <HAL_ADC_PollForConversion+0xd2>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001980:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001986:	6422      	str	r2, [r4, #64]	; 0x40
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001988:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800198a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800198e:	d10c      	bne.n	80019aa <HAL_ADC_PollForConversion+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	6422      	str	r2, [r4, #64]	; 0x40
 8001998:	e007      	b.n	80019aa <HAL_ADC_PollForConversion+0xe2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80019aa:	f417 4f80 	tst.w	r7, #16384	; 0x4000
 80019ae:	d103      	bne.n	80019b8 <HAL_ADC_PollForConversion+0xf0>
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80019b0:	601e      	str	r6, [r3, #0]
  return HAL_OK;
 80019b2:	2000      	movs	r0, #0
}
 80019b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80019b8:	2000      	movs	r0, #0
 80019ba:	e7fb      	b.n	80019b4 <HAL_ADC_PollForConversion+0xec>
 80019bc:	50000300 	.word	0x50000300

080019c0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80019c0:	6803      	ldr	r3, [r0, #0]
 80019c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80019c4:	4770      	bx	lr

080019c6 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 80019c6:	4770      	bx	lr

080019c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 80019c8:	4770      	bx	lr

080019ca <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 80019ca:	4770      	bx	lr

080019cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_ADC_IRQHandler>:
{
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	f012 0f04 	tst.w	r2, #4
 80019dc:	d003      	beq.n	80019e6 <HAL_ADC_IRQHandler+0x16>
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	f012 0f04 	tst.w	r2, #4
 80019e4:	d107      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80019e6:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80019e8:	f012 0f08 	tst.w	r2, #8
 80019ec:	d03a      	beq.n	8001a64 <HAL_ADC_IRQHandler+0x94>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	f012 0f08 	tst.w	r2, #8
 80019f4:	d036      	beq.n	8001a64 <HAL_ADC_IRQHandler+0x94>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019f8:	f012 0f10 	tst.w	r2, #16
 80019fc:	d103      	bne.n	8001a06 <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a04:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a06:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001a0e:	d123      	bne.n	8001a58 <HAL_ADC_IRQHandler+0x88>
 8001a10:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8001a14:	d120      	bne.n	8001a58 <HAL_ADC_IRQHandler+0x88>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	f012 0f08 	tst.w	r2, #8
 8001a1c:	d01c      	beq.n	8001a58 <HAL_ADC_IRQHandler+0x88>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	f012 0f04 	tst.w	r2, #4
 8001a24:	d110      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x78>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	f022 020c 	bic.w	r2, r2, #12
 8001a2c:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a38:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_ADC_IRQHandler+0x88>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6423      	str	r3, [r4, #64]	; 0x40
 8001a46:	e007      	b.n	8001a58 <HAL_ADC_IRQHandler+0x88>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff fa69 	bl	8000f30 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	220c      	movs	r2, #12
 8001a62:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	f012 0f20 	tst.w	r2, #32
 8001a6c:	d003      	beq.n	8001a76 <HAL_ADC_IRQHandler+0xa6>
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	f012 0f20 	tst.w	r2, #32
 8001a74:	d107      	bne.n	8001a86 <HAL_ADC_IRQHandler+0xb6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001a76:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001a78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a7c:	d041      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x132>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a84:	d03d      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x132>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a8e:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a92:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8001a96:	d009      	beq.n	8001aac <HAL_ADC_IRQHandler+0xdc>
 8001a98:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001a9c:	d12b      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x126>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a9e:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001aa0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001aa4:	d127      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x126>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001aa6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8001aaa:	d124      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x126>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ab2:	d020      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x126>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001ab4:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001ab6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001aba:	d11c      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x126>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	f012 0f08 	tst.w	r2, #8
 8001ac2:	d110      	bne.n	8001ae6 <HAL_ADC_IRQHandler+0x116>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001aca:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ad2:	6423      	str	r3, [r4, #64]	; 0x40
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ad6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ada:	d10c      	bne.n	8001af6 <HAL_ADC_IRQHandler+0x126>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6423      	str	r3, [r4, #64]	; 0x40
 8001ae4:	e007      	b.n	8001af6 <HAL_ADC_IRQHandler+0x126>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ae8:	f043 0310 	orr.w	r3, r3, #16
 8001aec:	6423      	str	r3, [r4, #64]	; 0x40
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7ff ff65 	bl	80019c6 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	2260      	movs	r2, #96	; 0x60
 8001b00:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001b0a:	d003      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x144>
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b12:	d13e      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1c2>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001b1c:	d003      	beq.n	8001b26 <HAL_ADC_IRQHandler+0x156>
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b24:	d140      	bne.n	8001ba8 <HAL_ADC_IRQHandler+0x1d8>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001b2e:	d003      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x168>
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b36:	d143      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x1f0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f012 0f10 	tst.w	r2, #16
 8001b40:	d01d      	beq.n	8001b7e <HAL_ADC_IRQHandler+0x1ae>
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	f012 0f10 	tst.w	r2, #16
 8001b48:	d019      	beq.n	8001b7e <HAL_ADC_IRQHandler+0x1ae>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b4c:	2a01      	cmp	r2, #1
 8001b4e:	d008      	beq.n	8001b62 <HAL_ADC_IRQHandler+0x192>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001b50:	4a2c      	ldr	r2, [pc, #176]	; (8001c04 <HAL_ADC_IRQHandler+0x234>)
 8001b52:	6892      	ldr	r2, [r2, #8]
 8001b54:	f012 0f1f 	tst.w	r2, #31
 8001b58:	d13e      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0x208>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f013 0f01 	tst.w	r3, #1
 8001b60:	d00a      	beq.n	8001b78 <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b68:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff f9e4 	bl	8000f40 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001b86:	d003      	beq.n	8001b90 <HAL_ADC_IRQHandler+0x1c0>
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001b8e:	d129      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x214>
}
 8001b90:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff fc4e 	bl	800143c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e7b5      	b.n	8001b14 <HAL_ADC_IRQHandler+0x144>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bae:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff ff0a 	bl	80019ca <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e7b2      	b.n	8001b26 <HAL_ADC_IRQHandler+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc6:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff feff 	bl	80019cc <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e7af      	b.n	8001b38 <HAL_ADC_IRQHandler+0x168>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_ADC_IRQHandler+0x234>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001be0:	d0ca      	beq.n	8001b78 <HAL_ADC_IRQHandler+0x1a8>
 8001be2:	e7be      	b.n	8001b62 <HAL_ADC_IRQHandler+0x192>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001be4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bea:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001bec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001bee:	f042 0208 	orr.w	r2, r2, #8
 8001bf2:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf8:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff fee4 	bl	80019c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8001c00:	e7c6      	b.n	8001b90 <HAL_ADC_IRQHandler+0x1c0>
 8001c02:	bf00      	nop
 8001c04:	50000300 	.word	0x50000300

08001c08 <HAL_ADC_ConfigChannel>:
{
 8001c08:	b430      	push	{r4, r5}
 8001c0a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001c10:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001c14:	2a01      	cmp	r2, #1
 8001c16:	f000 818e 	beq.w	8001f36 <HAL_ADC_ConfigChannel+0x32e>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c22:	6800      	ldr	r0, [r0, #0]
 8001c24:	6882      	ldr	r2, [r0, #8]
 8001c26:	f012 0f04 	tst.w	r2, #4
 8001c2a:	f040 8179 	bne.w	8001f20 <HAL_ADC_ConfigChannel+0x318>
    if (sConfig->Rank < 5U)
 8001c2e:	684a      	ldr	r2, [r1, #4]
 8001c30:	2a04      	cmp	r2, #4
 8001c32:	d831      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8001c34:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c3a:	0055      	lsls	r5, r2, #1
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	40aa      	lsls	r2, r5
 8001c40:	ea24 0202 	bic.w	r2, r4, r2
 8001c44:	680c      	ldr	r4, [r1, #0]
 8001c46:	40ac      	lsls	r4, r5
 8001c48:	4322      	orrs	r2, r4
 8001c4a:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	6882      	ldr	r2, [r0, #8]
 8001c50:	f012 0f0c 	tst.w	r2, #12
 8001c54:	d168      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c56:	680a      	ldr	r2, [r1, #0]
 8001c58:	2a09      	cmp	r2, #9
 8001c5a:	d94e      	bls.n	8001cfa <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c5c:	6984      	ldr	r4, [r0, #24]
 8001c5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001c62:	3a1e      	subs	r2, #30
 8001c64:	2507      	movs	r5, #7
 8001c66:	4095      	lsls	r5, r2
 8001c68:	ea24 0405 	bic.w	r4, r4, r5
 8001c6c:	688d      	ldr	r5, [r1, #8]
 8001c6e:	fa05 f202 	lsl.w	r2, r5, r2
 8001c72:	4322      	orrs	r2, r4
 8001c74:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c76:	6948      	ldr	r0, [r1, #20]
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	68e2      	ldr	r2, [r4, #12]
 8001c7c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001c80:	0052      	lsls	r2, r2, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001c86:	6908      	ldr	r0, [r1, #16]
 8001c88:	3801      	subs	r0, #1
 8001c8a:	2803      	cmp	r0, #3
 8001c8c:	f200 808b 	bhi.w	8001da6 <HAL_ADC_ConfigChannel+0x19e>
 8001c90:	e8df f000 	tbb	[pc, r0]
 8001c94:	7e736840 	.word	0x7e736840
    else if (sConfig->Rank < 10U)
 8001c98:	2a09      	cmp	r2, #9
 8001c9a:	d80e      	bhi.n	8001cba <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001c9c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ca2:	0055      	lsls	r5, r2, #1
 8001ca4:	3d1e      	subs	r5, #30
 8001ca6:	221f      	movs	r2, #31
 8001ca8:	40aa      	lsls	r2, r5
 8001caa:	ea24 0202 	bic.w	r2, r4, r2
 8001cae:	680c      	ldr	r4, [r1, #0]
 8001cb0:	fa04 f505 	lsl.w	r5, r4, r5
 8001cb4:	432a      	orrs	r2, r5
 8001cb6:	6342      	str	r2, [r0, #52]	; 0x34
 8001cb8:	e7c8      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001cba:	2a0e      	cmp	r2, #14
 8001cbc:	d80e      	bhi.n	8001cdc <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cbe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001cc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001cc4:	0055      	lsls	r5, r2, #1
 8001cc6:	3d3c      	subs	r5, #60	; 0x3c
 8001cc8:	221f      	movs	r2, #31
 8001cca:	40aa      	lsls	r2, r5
 8001ccc:	ea24 0202 	bic.w	r2, r4, r2
 8001cd0:	680c      	ldr	r4, [r1, #0]
 8001cd2:	fa04 f505 	lsl.w	r5, r4, r5
 8001cd6:	432a      	orrs	r2, r5
 8001cd8:	6382      	str	r2, [r0, #56]	; 0x38
 8001cda:	e7b7      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001cdc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001cde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ce2:	0055      	lsls	r5, r2, #1
 8001ce4:	3d5a      	subs	r5, #90	; 0x5a
 8001ce6:	221f      	movs	r2, #31
 8001ce8:	40aa      	lsls	r2, r5
 8001cea:	ea24 0202 	bic.w	r2, r4, r2
 8001cee:	680c      	ldr	r4, [r1, #0]
 8001cf0:	fa04 f505 	lsl.w	r5, r4, r5
 8001cf4:	432a      	orrs	r2, r5
 8001cf6:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001cf8:	e7a8      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cfa:	6944      	ldr	r4, [r0, #20]
 8001cfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d00:	2507      	movs	r5, #7
 8001d02:	4095      	lsls	r5, r2
 8001d04:	ea24 0405 	bic.w	r4, r4, r5
 8001d08:	688d      	ldr	r5, [r1, #8]
 8001d0a:	fa05 f202 	lsl.w	r2, r5, r2
 8001d0e:	4322      	orrs	r2, r4
 8001d10:	6142      	str	r2, [r0, #20]
 8001d12:	e7b0      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d14:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001d16:	4d89      	ldr	r5, [pc, #548]	; (8001f3c <HAL_ADC_ConfigChannel+0x334>)
 8001d18:	4005      	ands	r5, r0
 8001d1a:	6808      	ldr	r0, [r1, #0]
 8001d1c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001d20:	4315      	orrs	r5, r2
 8001d22:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001d26:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	6882      	ldr	r2, [r0, #8]
 8001d2c:	f002 0203 	and.w	r2, r2, #3
 8001d30:	2a01      	cmp	r2, #1
 8001d32:	d06b      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x204>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d34:	68ca      	ldr	r2, [r1, #12]
 8001d36:	2a01      	cmp	r2, #1
 8001d38:	d06e      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x210>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d3a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001d3e:	680d      	ldr	r5, [r1, #0]
 8001d40:	2401      	movs	r4, #1
 8001d42:	40ac      	lsls	r4, r5
 8001d44:	ea22 0204 	bic.w	r2, r2, r4
 8001d48:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d4c:	680a      	ldr	r2, [r1, #0]
 8001d4e:	2a10      	cmp	r2, #16
 8001d50:	f000 808b 	beq.w	8001e6a <HAL_ADC_ConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d54:	2a11      	cmp	r2, #17
 8001d56:	f000 809c 	beq.w	8001e92 <HAL_ADC_ConfigChannel+0x28a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d5a:	2a12      	cmp	r2, #18
 8001d5c:	f000 809f 	beq.w	8001e9e <HAL_ADC_ConfigChannel+0x296>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d60:	2000      	movs	r0, #0
 8001d62:	e0e2      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d64:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001d66:	4d75      	ldr	r5, [pc, #468]	; (8001f3c <HAL_ADC_ConfigChannel+0x334>)
 8001d68:	4005      	ands	r5, r0
 8001d6a:	6808      	ldr	r0, [r1, #0]
 8001d6c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001d70:	4315      	orrs	r5, r2
 8001d72:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001d76:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001d78:	e7d6      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d7a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001d7c:	4d6f      	ldr	r5, [pc, #444]	; (8001f3c <HAL_ADC_ConfigChannel+0x334>)
 8001d7e:	4005      	ands	r5, r0
 8001d80:	6808      	ldr	r0, [r1, #0]
 8001d82:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001d86:	4315      	orrs	r5, r2
 8001d88:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001d8c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001d8e:	e7cb      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d90:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001d92:	486a      	ldr	r0, [pc, #424]	; (8001f3c <HAL_ADC_ConfigChannel+0x334>)
 8001d94:	4028      	ands	r0, r5
 8001d96:	680d      	ldr	r5, [r1, #0]
 8001d98:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001da2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001da4:	e7c0      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001da6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001da8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001dac:	6808      	ldr	r0, [r1, #0]
 8001dae:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001db2:	d01c      	beq.n	8001dee <HAL_ADC_ConfigChannel+0x1e6>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001db8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001dbc:	680c      	ldr	r4, [r1, #0]
 8001dbe:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001dc2:	d019      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x1f0>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001dc8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001dcc:	680c      	ldr	r4, [r1, #0]
 8001dce:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001dd2:	d016      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001dd8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ddc:	680c      	ldr	r4, [r1, #0]
 8001dde:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001de2:	d1a1      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001de4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001de6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dea:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001dec:	e79c      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001dee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001df0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001df4:	6622      	str	r2, [r4, #96]	; 0x60
 8001df6:	e7dd      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1ac>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001df8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001dfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dfe:	6642      	str	r2, [r0, #100]	; 0x64
 8001e00:	e7e0      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1bc>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e02:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001e04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e08:	6682      	str	r2, [r0, #104]	; 0x68
 8001e0a:	e7e3      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x1cc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e0c:	6802      	ldr	r2, [r0, #0]
 8001e0e:	f012 0f01 	tst.w	r2, #1
 8001e12:	d08f      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e14:	2000      	movs	r0, #0
 8001e16:	e088      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e18:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001e1c:	680d      	ldr	r5, [r1, #0]
 8001e1e:	2401      	movs	r4, #1
 8001e20:	40ac      	lsls	r4, r5
 8001e22:	4322      	orrs	r2, r4
 8001e24:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e28:	680a      	ldr	r2, [r1, #0]
 8001e2a:	2a09      	cmp	r2, #9
 8001e2c:	d90e      	bls.n	8001e4c <HAL_ADC_ConfigChannel+0x244>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e2e:	681d      	ldr	r5, [r3, #0]
 8001e30:	69a8      	ldr	r0, [r5, #24]
 8001e32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e36:	3a1b      	subs	r2, #27
 8001e38:	2407      	movs	r4, #7
 8001e3a:	4094      	lsls	r4, r2
 8001e3c:	ea20 0004 	bic.w	r0, r0, r4
 8001e40:	688c      	ldr	r4, [r1, #8]
 8001e42:	fa04 f202 	lsl.w	r2, r4, r2
 8001e46:	4302      	orrs	r2, r0
 8001e48:	61aa      	str	r2, [r5, #24]
 8001e4a:	e77f      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e4c:	681d      	ldr	r5, [r3, #0]
 8001e4e:	6968      	ldr	r0, [r5, #20]
 8001e50:	3201      	adds	r2, #1
 8001e52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e56:	2407      	movs	r4, #7
 8001e58:	4094      	lsls	r4, r2
 8001e5a:	ea20 0004 	bic.w	r0, r0, r4
 8001e5e:	688c      	ldr	r4, [r1, #8]
 8001e60:	fa04 f202 	lsl.w	r2, r4, r2
 8001e64:	4302      	orrs	r2, r0
 8001e66:	616a      	str	r2, [r5, #20]
 8001e68:	e770      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x144>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e6a:	4935      	ldr	r1, [pc, #212]	; (8001f40 <HAL_ADC_ConfigChannel+0x338>)
 8001e6c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e6e:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8001e72:	f47f af6f 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x14c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	6881      	ldr	r1, [r0, #8]
 8001e7a:	f001 0103 	and.w	r1, r1, #3
 8001e7e:	2901      	cmp	r1, #1
 8001e80:	d014      	beq.n	8001eac <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e82:	2a10      	cmp	r2, #16
 8001e84:	d01c      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e86:	2a11      	cmp	r2, #17
 8001e88:	d039      	beq.n	8001efe <HAL_ADC_ConfigChannel+0x2f6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e8a:	2a12      	cmp	r2, #18
 8001e8c:	d041      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0x30a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8e:	2000      	movs	r0, #0
 8001e90:	e04b      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e92:	492b      	ldr	r1, [pc, #172]	; (8001f40 <HAL_ADC_ConfigChannel+0x338>)
 8001e94:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e96:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8001e9a:	d0ec      	beq.n	8001e76 <HAL_ADC_ConfigChannel+0x26e>
 8001e9c:	e75d      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x152>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e9e:	4928      	ldr	r1, [pc, #160]	; (8001f40 <HAL_ADC_ConfigChannel+0x338>)
 8001ea0:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ea2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8001ea6:	d0e6      	beq.n	8001e76 <HAL_ADC_ConfigChannel+0x26e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	e03e      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001eac:	6801      	ldr	r1, [r0, #0]
 8001eae:	f011 0f01 	tst.w	r1, #1
 8001eb2:	d0e6      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x27a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	f042 0220 	orr.w	r2, r2, #32
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	e034      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ec0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001ec4:	d1df      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x27e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ec6:	491e      	ldr	r1, [pc, #120]	; (8001f40 <HAL_ADC_ConfigChannel+0x338>)
 8001ec8:	688a      	ldr	r2, [r1, #8]
 8001eca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ece:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_ADC_ConfigChannel+0x33c>)
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 8001ed8:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8001edc:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8001ee0:	fba1 1202 	umull	r1, r2, r1, r2
 8001ee4:	0c92      	lsrs	r2, r2, #18
 8001ee6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001eea:	0051      	lsls	r1, r2, #1
 8001eec:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001eee:	9a01      	ldr	r2, [sp, #4]
 8001ef0:	b11a      	cbz	r2, 8001efa <HAL_ADC_ConfigChannel+0x2f2>
            wait_loop_index--;
 8001ef2:	9a01      	ldr	r2, [sp, #4]
 8001ef4:	3a01      	subs	r2, #1
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	e7f9      	b.n	8001eee <HAL_ADC_ConfigChannel+0x2e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001efa:	2000      	movs	r0, #0
 8001efc:	e015      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001efe:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001f02:	d1c2      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x282>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_ADC_ConfigChannel+0x338>)
 8001f06:	688a      	ldr	r2, [r1, #8]
 8001f08:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001f0c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f10:	e00b      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f12:	490b      	ldr	r1, [pc, #44]	; (8001f40 <HAL_ADC_ConfigChannel+0x338>)
 8001f14:	688a      	ldr	r2, [r1, #8]
 8001f16:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f1a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	e004      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001f30:	b002      	add	sp, #8
 8001f32:	bc30      	pop	{r4, r5}
 8001f34:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001f36:	2002      	movs	r0, #2
 8001f38:	e7fa      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x328>
 8001f3a:	bf00      	nop
 8001f3c:	83fff000 	.word	0x83fff000
 8001f40:	50000300 	.word	0x50000300
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	0200      	lsls	r0, r0, #8
 8001f56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001f5c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001f60:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f64:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_NVIC_SetPriority+0x60>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f76:	f1c3 0407 	rsb	r4, r3, #7
 8001f7a:	2c04      	cmp	r4, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f80:	1d1d      	adds	r5, r3, #4
 8001f82:	2d06      	cmp	r5, #6
 8001f84:	d918      	bls.n	8001fb8 <HAL_NVIC_SetPriority+0x4c>
 8001f86:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 35ff 	mov.w	r5, #4294967295
 8001f8c:	fa05 f404 	lsl.w	r4, r5, r4
 8001f90:	ea21 0104 	bic.w	r1, r1, r4
 8001f94:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f96:	fa05 f303 	lsl.w	r3, r5, r3
 8001f9a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	db0b      	blt.n	8001fbc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	0109      	lsls	r1, r1, #4
 8001fa6:	b2c9      	uxtb	r1, r1
 8001fa8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001fac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001fb0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001fb4:	bc30      	pop	{r4, r5}
 8001fb6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e7e5      	b.n	8001f88 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	f000 000f 	and.w	r0, r0, #15
 8001fc0:	0109      	lsls	r1, r1, #4
 8001fc2:	b2c9      	uxtb	r1, r1
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_NVIC_SetPriority+0x64>)
 8001fc6:	5419      	strb	r1, [r3, r0]
 8001fc8:	e7f4      	b.n	8001fb4 <HAL_NVIC_SetPriority+0x48>
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00
 8001fd0:	e000ed14 	.word	0xe000ed14

08001fd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	db07      	blt.n	8001fe8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd8:	f000 021f 	and.w	r2, r0, #31
 8001fdc:	0940      	lsrs	r0, r0, #5
 8001fde:	2301      	movs	r3, #1
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	4a02      	ldr	r2, [pc, #8]	; (8001fec <HAL_NVIC_EnableIRQ+0x18>)
 8001fe4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	3801      	subs	r0, #1
 8001ff2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001ff6:	d20a      	bcs.n	800200e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_SYSTICK_Config+0x24>)
 8001ffa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_SYSTICK_Config+0x28>)
 8001ffe:	21f0      	movs	r1, #240	; 0xf0
 8002000:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	2000      	movs	r0, #0
 8002006:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b4f0      	push	{r4, r5, r6, r7}
 800201e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8002020:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e036      	b.n	8002092 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002024:	2403      	movs	r4, #3
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0xe>
 8002028:	2400      	movs	r4, #0
 800202a:	40b4      	lsls	r4, r6
 800202c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800202e:	3502      	adds	r5, #2
 8002030:	4e58      	ldr	r6, [pc, #352]	; (8002194 <HAL_GPIO_Init+0x178>)
 8002032:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002036:	4c58      	ldr	r4, [pc, #352]	; (8002198 <HAL_GPIO_Init+0x17c>)
 8002038:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800203a:	43d4      	mvns	r4, r2
 800203c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002040:	684f      	ldr	r7, [r1, #4]
 8002042:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002046:	d001      	beq.n	800204c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002048:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800204c:	4d52      	ldr	r5, [pc, #328]	; (8002198 <HAL_GPIO_Init+0x17c>)
 800204e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002050:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002052:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002056:	684f      	ldr	r7, [r1, #4]
 8002058:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800205c:	d001      	beq.n	8002062 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800205e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002062:	4d4d      	ldr	r5, [pc, #308]	; (8002198 <HAL_GPIO_Init+0x17c>)
 8002064:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002068:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206c:	684f      	ldr	r7, [r1, #4]
 800206e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002072:	d001      	beq.n	8002078 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8002074:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002078:	4d47      	ldr	r5, [pc, #284]	; (8002198 <HAL_GPIO_Init+0x17c>)
 800207a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800207c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800207e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002080:	684e      	ldr	r6, [r1, #4]
 8002082:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002086:	d001      	beq.n	800208c <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8002088:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 800208c:	4a42      	ldr	r2, [pc, #264]	; (8002198 <HAL_GPIO_Init+0x17c>)
 800208e:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8002090:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	680a      	ldr	r2, [r1, #0]
 8002094:	fa32 f403 	lsrs.w	r4, r2, r3
 8002098:	d078      	beq.n	800218c <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800209a:	2401      	movs	r4, #1
 800209c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 800209e:	4022      	ands	r2, r4
 80020a0:	d0f6      	beq.n	8002090 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a2:	684d      	ldr	r5, [r1, #4]
 80020a4:	2d02      	cmp	r5, #2
 80020a6:	d001      	beq.n	80020ac <HAL_GPIO_Init+0x90>
 80020a8:	2d12      	cmp	r5, #18
 80020aa:	d110      	bne.n	80020ce <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80020ac:	08de      	lsrs	r6, r3, #3
 80020ae:	3608      	adds	r6, #8
 80020b0:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020b4:	f003 0507 	and.w	r5, r3, #7
 80020b8:	00af      	lsls	r7, r5, #2
 80020ba:	250f      	movs	r5, #15
 80020bc:	40bd      	lsls	r5, r7
 80020be:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020c2:	690d      	ldr	r5, [r1, #16]
 80020c4:	40bd      	lsls	r5, r7
 80020c6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80020ca:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80020ce:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020d0:	005f      	lsls	r7, r3, #1
 80020d2:	2503      	movs	r5, #3
 80020d4:	40bd      	lsls	r5, r7
 80020d6:	43ed      	mvns	r5, r5
 80020d8:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020dc:	684e      	ldr	r6, [r1, #4]
 80020de:	f006 0603 	and.w	r6, r6, #3
 80020e2:	40be      	lsls	r6, r7
 80020e4:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 80020e8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ea:	684e      	ldr	r6, [r1, #4]
 80020ec:	f106 3cff 	add.w	ip, r6, #4294967295
 80020f0:	f1bc 0f01 	cmp.w	ip, #1
 80020f4:	d903      	bls.n	80020fe <HAL_GPIO_Init+0xe2>
 80020f6:	2e11      	cmp	r6, #17
 80020f8:	d001      	beq.n	80020fe <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fa:	2e12      	cmp	r6, #18
 80020fc:	d110      	bne.n	8002120 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 80020fe:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002100:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002104:	68ce      	ldr	r6, [r1, #12]
 8002106:	40be      	lsls	r6, r7
 8002108:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 800210c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800210e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002114:	684e      	ldr	r6, [r1, #4]
 8002116:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800211a:	409e      	lsls	r6, r3
 800211c:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 800211e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002120:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002122:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002124:	688c      	ldr	r4, [r1, #8]
 8002126:	40bc      	lsls	r4, r7
 8002128:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800212a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212c:	684c      	ldr	r4, [r1, #4]
 800212e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002132:	d0ad      	beq.n	8002090 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002134:	4c19      	ldr	r4, [pc, #100]	; (800219c <HAL_GPIO_Init+0x180>)
 8002136:	69a5      	ldr	r5, [r4, #24]
 8002138:	f045 0501 	orr.w	r5, r5, #1
 800213c:	61a5      	str	r5, [r4, #24]
 800213e:	69a4      	ldr	r4, [r4, #24]
 8002140:	f004 0401 	and.w	r4, r4, #1
 8002144:	9401      	str	r4, [sp, #4]
 8002146:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002148:	089d      	lsrs	r5, r3, #2
 800214a:	1cae      	adds	r6, r5, #2
 800214c:	4c11      	ldr	r4, [pc, #68]	; (8002194 <HAL_GPIO_Init+0x178>)
 800214e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002152:	f003 0403 	and.w	r4, r3, #3
 8002156:	00a6      	lsls	r6, r4, #2
 8002158:	240f      	movs	r4, #15
 800215a:	40b4      	lsls	r4, r6
 800215c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002164:	f43f af60 	beq.w	8002028 <HAL_GPIO_Init+0xc>
 8002168:	4c0d      	ldr	r4, [pc, #52]	; (80021a0 <HAL_GPIO_Init+0x184>)
 800216a:	42a0      	cmp	r0, r4
 800216c:	d00a      	beq.n	8002184 <HAL_GPIO_Init+0x168>
 800216e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002172:	42a0      	cmp	r0, r4
 8002174:	d008      	beq.n	8002188 <HAL_GPIO_Init+0x16c>
 8002176:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800217a:	42a0      	cmp	r0, r4
 800217c:	f43f af52 	beq.w	8002024 <HAL_GPIO_Init+0x8>
 8002180:	2405      	movs	r4, #5
 8002182:	e752      	b.n	800202a <HAL_GPIO_Init+0xe>
 8002184:	2401      	movs	r4, #1
 8002186:	e750      	b.n	800202a <HAL_GPIO_Init+0xe>
 8002188:	2402      	movs	r4, #2
 800218a:	e74e      	b.n	800202a <HAL_GPIO_Init+0xe>
  }
}
 800218c:	b002      	add	sp, #8
 800218e:	bcf0      	pop	{r4, r5, r6, r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40010000 	.word	0x40010000
 8002198:	40010400 	.word	0x40010400
 800219c:	40021000 	.word	0x40021000
 80021a0:	48000400 	.word	0x48000400

080021a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	b90a      	cbnz	r2, 80021aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80021a8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021aa:	6181      	str	r1, [r0, #24]
 80021ac:	4770      	bx	lr

080021ae <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ae:	6803      	ldr	r3, [r0, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	f012 0f02 	tst.w	r2, #2
 80021b6:	d001      	beq.n	80021bc <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021bc:	6803      	ldr	r3, [r0, #0]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	f012 0f01 	tst.w	r2, #1
 80021c4:	d103      	bne.n	80021ce <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	619a      	str	r2, [r3, #24]
  }
}
 80021ce:	4770      	bx	lr

080021d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80021d0:	b470      	push	{r4, r5, r6}
 80021d2:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80021d4:	6805      	ldr	r5, [r0, #0]
 80021d6:	6868      	ldr	r0, [r5, #4]
 80021d8:	0d74      	lsrs	r4, r6, #21
 80021da:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80021de:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80021e2:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80021e6:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80021ea:	f044 0403 	orr.w	r4, r4, #3
 80021ee:	ea20 0004 	bic.w	r0, r0, r4
 80021f2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80021f6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80021fa:	4319      	orrs	r1, r3
 80021fc:	4331      	orrs	r1, r6
 80021fe:	4301      	orrs	r1, r0
 8002200:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002202:	bc70      	pop	{r4, r5, r6}
 8002204:	4770      	bx	lr

08002206 <I2C_IsAcknowledgeFailed>:
{
 8002206:	b570      	push	{r4, r5, r6, lr}
 8002208:	4604      	mov	r4, r0
 800220a:	460d      	mov	r5, r1
 800220c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800220e:	6803      	ldr	r3, [r0, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f013 0f10 	tst.w	r3, #16
 8002216:	d01c      	beq.n	8002252 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	f012 0f20 	tst.w	r2, #32
 8002220:	d119      	bne.n	8002256 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002222:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002226:	d0f7      	beq.n	8002218 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002228:	f7ff f8ee 	bl	8001408 <HAL_GetTick>
 800222c:	1b80      	subs	r0, r0, r6
 800222e:	42a8      	cmp	r0, r5
 8002230:	d801      	bhi.n	8002236 <I2C_IsAcknowledgeFailed+0x30>
 8002232:	2d00      	cmp	r5, #0
 8002234:	d1f0      	bne.n	8002218 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002238:	f043 0320 	orr.w	r3, r3, #32
 800223c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800223e:	2320      	movs	r3, #32
 8002240:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002244:	2300      	movs	r3, #0
 8002246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800224a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
 8002250:	e020      	b.n	8002294 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002252:	2000      	movs	r0, #0
 8002254:	e01e      	b.n	8002294 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002256:	2210      	movs	r2, #16
 8002258:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	2520      	movs	r5, #32
 800225e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff ffa4 	bl	80021ae <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002266:	6822      	ldr	r2, [r4, #0]
 8002268:	6853      	ldr	r3, [r2, #4]
 800226a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800226e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002272:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800227c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002284:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	2300      	movs	r3, #0
 800228a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800228e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002292:	2001      	movs	r0, #1
}
 8002294:	bd70      	pop	{r4, r5, r6, pc}

08002296 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002296:	b570      	push	{r4, r5, r6, lr}
 8002298:	4604      	mov	r4, r0
 800229a:	460d      	mov	r5, r1
 800229c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f013 0f02 	tst.w	r3, #2
 80022a6:	d11d      	bne.n	80022e4 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a8:	4632      	mov	r2, r6
 80022aa:	4629      	mov	r1, r5
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7ff ffaa 	bl	8002206 <I2C_IsAcknowledgeFailed>
 80022b2:	b9c8      	cbnz	r0, 80022e8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80022b4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022b8:	d0f1      	beq.n	800229e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7ff f8a5 	bl	8001408 <HAL_GetTick>
 80022be:	1b80      	subs	r0, r0, r6
 80022c0:	42a8      	cmp	r0, r5
 80022c2:	d801      	bhi.n	80022c8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80022c4:	2d00      	cmp	r5, #0
 80022c6:	d1ea      	bne.n	800229e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022ca:	f043 0320 	orr.w	r3, r3, #32
 80022ce:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	2320      	movs	r3, #32
 80022d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80022dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
 80022e2:	e000      	b.n	80022e6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80022e4:	2000      	movs	r0, #0
}
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
 80022ea:	e7fc      	b.n	80022e6 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080022ec <I2C_WaitOnFlagUntilTimeout>:
{
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	4605      	mov	r5, r0
 80022f0:	460f      	mov	r7, r1
 80022f2:	4616      	mov	r6, r2
 80022f4:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f6:	682b      	ldr	r3, [r5, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	ea37 0303 	bics.w	r3, r7, r3
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	42b3      	cmp	r3, r6
 8002306:	d118      	bne.n	800233a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002308:	f1b4 3fff 	cmp.w	r4, #4294967295
 800230c:	d0f3      	beq.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7ff f87b 	bl	8001408 <HAL_GetTick>
 8002312:	9b06      	ldr	r3, [sp, #24]
 8002314:	1ac0      	subs	r0, r0, r3
 8002316:	42a0      	cmp	r0, r4
 8002318:	d801      	bhi.n	800231e <I2C_WaitOnFlagUntilTimeout+0x32>
 800231a:	2c00      	cmp	r4, #0
 800231c:	d1eb      	bne.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002320:	f043 0320 	orr.w	r3, r3, #32
 8002324:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002326:	2320      	movs	r3, #32
 8002328:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	2300      	movs	r3, #0
 800232e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002332:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
 8002338:	e000      	b.n	800233c <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 800233a:	2000      	movs	r0, #0
}
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002340 <I2C_RequestMemoryWrite>:
{
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	4604      	mov	r4, r0
 8002346:	4616      	mov	r6, r2
 8002348:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <I2C_RequestMemoryWrite+0x6c>)
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002352:	b2ea      	uxtb	r2, r5
 8002354:	f7ff ff3c 	bl	80021d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002358:	9a07      	ldr	r2, [sp, #28]
 800235a:	9906      	ldr	r1, [sp, #24]
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff ff9a 	bl	8002296 <I2C_WaitOnTXISFlagUntilTimeout>
 8002362:	b9e8      	cbnz	r0, 80023a0 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002364:	2d01      	cmp	r5, #1
 8002366:	d10e      	bne.n	8002386 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	b2f6      	uxtb	r6, r6
 800236c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800236e:	9b07      	ldr	r3, [sp, #28]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	9b06      	ldr	r3, [sp, #24]
 8002374:	2200      	movs	r2, #0
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff ffb7 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	b178      	cbz	r0, 80023a2 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00d      	b.n	80023a2 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	0a32      	lsrs	r2, r6, #8
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800238c:	9a07      	ldr	r2, [sp, #28]
 800238e:	9906      	ldr	r1, [sp, #24]
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff ff80 	bl	8002296 <I2C_WaitOnTXISFlagUntilTimeout>
 8002396:	b938      	cbnz	r0, 80023a8 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	b2f6      	uxtb	r6, r6
 800239c:	629e      	str	r6, [r3, #40]	; 0x28
 800239e:	e7e6      	b.n	800236e <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	b002      	add	sp, #8
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e7fa      	b.n	80023a2 <I2C_RequestMemoryWrite+0x62>
 80023ac:	80002000 	.word	0x80002000

080023b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4605      	mov	r5, r0
 80023b4:	460c      	mov	r4, r1
 80023b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b8:	682b      	ldr	r3, [r5, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f013 0f20 	tst.w	r3, #32
 80023c0:	d11a      	bne.n	80023f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c2:	4632      	mov	r2, r6
 80023c4:	4621      	mov	r1, r4
 80023c6:	4628      	mov	r0, r5
 80023c8:	f7ff ff1d 	bl	8002206 <I2C_IsAcknowledgeFailed>
 80023cc:	b9b0      	cbnz	r0, 80023fc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7ff f81b 	bl	8001408 <HAL_GetTick>
 80023d2:	1b80      	subs	r0, r0, r6
 80023d4:	42a0      	cmp	r0, r4
 80023d6:	d801      	bhi.n	80023dc <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80023d8:	2c00      	cmp	r4, #0
 80023da:	d1ed      	bne.n	80023b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	2320      	movs	r3, #32
 80023e6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80023f0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80023f4:	2001      	movs	r0, #1
}
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80023f8:	2000      	movs	r0, #0
 80023fa:	e7fc      	b.n	80023f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80023fc:	2001      	movs	r0, #1
 80023fe:	e7fa      	b.n	80023f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002400 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002400:	2800      	cmp	r0, #0
 8002402:	d059      	beq.n	80024b8 <HAL_I2C_Init+0xb8>
{
 8002404:	b510      	push	{r4, lr}
 8002406:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002408:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800240c:	2b00      	cmp	r3, #0
 800240e:	d043      	beq.n	8002498 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002410:	2324      	movs	r3, #36	; 0x24
 8002412:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002428:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	6893      	ldr	r3, [r2, #8]
 800242e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002432:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002434:	68e3      	ldr	r3, [r4, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d033      	beq.n	80024a2 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800243a:	68a3      	ldr	r3, [r4, #8]
 800243c:	6822      	ldr	r2, [r4, #0]
 800243e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002442:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002444:	68e3      	ldr	r3, [r4, #12]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d031      	beq.n	80024ae <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6853      	ldr	r3, [r2, #4]
 800244e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002456:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002458:	6822      	ldr	r2, [r4, #0]
 800245a:	68d3      	ldr	r3, [r2, #12]
 800245c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002460:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002462:	6923      	ldr	r3, [r4, #16]
 8002464:	6962      	ldr	r2, [r4, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	69a1      	ldr	r1, [r4, #24]
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002470:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002472:	69e3      	ldr	r3, [r4, #28]
 8002474:	6a21      	ldr	r1, [r4, #32]
 8002476:	6822      	ldr	r2, [r4, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800247c:	6822      	ldr	r2, [r4, #0]
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002486:	2000      	movs	r0, #0
 8002488:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248a:	2320      	movs	r3, #32
 800248c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002490:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002496:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002498:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800249c:	f7fe fde8 	bl	8001070 <HAL_I2C_MspInit>
 80024a0:	e7b6      	b.n	8002410 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024a2:	68a3      	ldr	r3, [r4, #8]
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	e7ca      	b.n	8002444 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e7c8      	b.n	800244a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
}
 80024ba:	4770      	bx	lr

080024bc <HAL_I2C_Mem_Write>:
{
 80024bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80024ca:	b2ed      	uxtb	r5, r5
 80024cc:	2d20      	cmp	r5, #32
 80024ce:	f040 80ba 	bne.w	8002646 <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 80024d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80024d4:	b1dc      	cbz	r4, 800250e <HAL_I2C_Mem_Write+0x52>
 80024d6:	b1d7      	cbz	r7, 800250e <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80024d8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80024dc:	2c01      	cmp	r4, #1
 80024de:	f000 80b7 	beq.w	8002650 <HAL_I2C_Mem_Write+0x194>
 80024e2:	4698      	mov	r8, r3
 80024e4:	4691      	mov	r9, r2
 80024e6:	460d      	mov	r5, r1
 80024e8:	4604      	mov	r4, r0
 80024ea:	f04f 0a01 	mov.w	sl, #1
 80024ee:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80024f2:	f7fe ff89 	bl	8001408 <HAL_GetTick>
 80024f6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f8:	9000      	str	r0, [sp, #0]
 80024fa:	2319      	movs	r3, #25
 80024fc:	4652      	mov	r2, sl
 80024fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff fef2 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 8002508:	b130      	cbz	r0, 8002518 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e09c      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800250e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002512:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e097      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002518:	2321      	movs	r3, #33	; 0x21
 800251a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800251e:	2340      	movs	r3, #64	; 0x40
 8002520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	2300      	movs	r3, #0
 8002526:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800252a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800252c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800252e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002530:	9601      	str	r6, [sp, #4]
 8002532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	4643      	mov	r3, r8
 8002538:	464a      	mov	r2, r9
 800253a:	4629      	mov	r1, r5
 800253c:	4620      	mov	r0, r4
 800253e:	f7ff feff 	bl	8002340 <I2C_RequestMemoryWrite>
 8002542:	b970      	cbnz	r0, 8002562 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002544:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	2bff      	cmp	r3, #255	; 0xff
 800254a:	d90f      	bls.n	800256c <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002550:	2300      	movs	r3, #0
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002558:	4629      	mov	r1, r5
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff fe38 	bl	80021d0 <I2C_TransferConfig>
 8002560:	e021      	b.n	80025a6 <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8002562:	2300      	movs	r3, #0
 8002564:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002568:	4653      	mov	r3, sl
 800256a:	e06d      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 800256c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800256e:	b292      	uxth	r2, r2
 8002570:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	4629      	mov	r1, r5
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff fe26 	bl	80021d0 <I2C_TransferConfig>
 8002584:	e00f      	b.n	80025a6 <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 8002586:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002588:	b292      	uxth	r2, r2
 800258a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800258c:	2300      	movs	r3, #0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	4629      	mov	r1, r5
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff fe19 	bl	80021d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800259e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d032      	beq.n	800260c <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	4632      	mov	r2, r6
 80025a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff fe73 	bl	8002296 <I2C_WaitOnTXISFlagUntilTimeout>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d14f      	bne.n	8002654 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80025bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025be:	3301      	adds	r3, #1
 80025c0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025d4:	b292      	uxth	r2, r2
 80025d6:	2a00      	cmp	r2, #0
 80025d8:	d0e1      	beq.n	800259e <HAL_I2C_Mem_Write+0xe2>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1df      	bne.n	800259e <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025de:	9600      	str	r6, [sp, #0]
 80025e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025e2:	2200      	movs	r2, #0
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff fe80 	bl	80022ec <I2C_WaitOnFlagUntilTimeout>
 80025ec:	bba0      	cbnz	r0, 8002658 <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d9c7      	bls.n	8002586 <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f6:	22ff      	movs	r2, #255	; 0xff
 80025f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025fa:	2300      	movs	r3, #0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002602:	4629      	mov	r1, r5
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff fde3 	bl	80021d0 <I2C_TransferConfig>
 800260a:	e7c8      	b.n	800259e <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	4632      	mov	r2, r6
 800260e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff fecd 	bl	80023b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	bb00      	cbnz	r0, 800265c <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	2120      	movs	r1, #32
 800261e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002620:	6820      	ldr	r0, [r4, #0]
 8002622:	6842      	ldr	r2, [r0, #4]
 8002624:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002628:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800262c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800263a:	2200      	movs	r2, #0
 800263c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002640:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002644:	e000      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
}
 8002648:	4618      	mov	r0, r3
 800264a:	b002      	add	sp, #8
 800264c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002650:	2302      	movs	r3, #2
 8002652:	e7f9      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e7f7      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e7f5      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e7f3      	b.n	8002648 <HAL_I2C_Mem_Write+0x18c>

08002660 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002660:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b20      	cmp	r3, #32
 8002668:	d124      	bne.n	80026b4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800266e:	2b01      	cmp	r3, #1
 8002670:	d022      	beq.n	80026b8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002672:	2301      	movs	r3, #1
 8002674:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	2324      	movs	r3, #36	; 0x24
 800267a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267e:	6802      	ldr	r2, [r0, #0]
 8002680:	6813      	ldr	r3, [r2, #0]
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002688:	6802      	ldr	r2, [r0, #0]
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002690:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002692:	6802      	ldr	r2, [r0, #0]
 8002694:	6813      	ldr	r3, [r2, #0]
 8002696:	4319      	orrs	r1, r3
 8002698:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800269a:	6802      	ldr	r2, [r0, #0]
 800269c:	6813      	ldr	r3, [r2, #0]
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	2320      	movs	r3, #32
 80026a6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80026b0:	4618      	mov	r0, r3
 80026b2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2002      	movs	r0, #2
 80026b6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80026b8:	2002      	movs	r0, #2
  }
}
 80026ba:	4770      	bx	lr

080026bc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d122      	bne.n	800270c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d020      	beq.n	8002710 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80026ce:	2301      	movs	r3, #1
 80026d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	2324      	movs	r3, #36	; 0x24
 80026d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026da:	6802      	ldr	r2, [r0, #0]
 80026dc:	6813      	ldr	r3, [r2, #0]
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026e4:	6802      	ldr	r2, [r0, #0]
 80026e6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026ec:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026f0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026f2:	6802      	ldr	r2, [r0, #0]
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	2320      	movs	r3, #32
 80026fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002702:	2300      	movs	r3, #0
 8002704:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002708:	4618      	mov	r0, r3
 800270a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800270c:	2002      	movs	r0, #2
 800270e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002710:	2002      	movs	r0, #2
  }
}
 8002712:	4770      	bx	lr

08002714 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002714:	2800      	cmp	r0, #0
 8002716:	f000 830d 	beq.w	8002d34 <HAL_RCC_OscConfig+0x620>
{
 800271a:	b570      	push	{r4, r5, r6, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002720:	6803      	ldr	r3, [r0, #0]
 8002722:	f013 0f01 	tst.w	r3, #1
 8002726:	d03b      	beq.n	80027a0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002728:	4bb5      	ldr	r3, [pc, #724]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b04      	cmp	r3, #4
 8002732:	d01e      	beq.n	8002772 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002734:	4bb2      	ldr	r3, [pc, #712]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	6863      	ldr	r3, [r4, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d068      	beq.n	800281a <HAL_RCC_OscConfig+0x106>
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 8092 	bne.w	8002872 <HAL_RCC_OscConfig+0x15e>
 800274e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002752:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e05d      	b.n	8002824 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002768:	4ba5      	ldr	r3, [pc, #660]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002770:	d0e6      	beq.n	8002740 <HAL_RCC_OscConfig+0x2c>
 8002772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002776:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	4ba1      	ldr	r3, [pc, #644]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2201      	movs	r2, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	420b      	tst	r3, r1
 8002796:	d003      	beq.n	80027a0 <HAL_RCC_OscConfig+0x8c>
 8002798:	6863      	ldr	r3, [r4, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 82cc 	beq.w	8002d38 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f013 0f02 	tst.w	r3, #2
 80027a6:	f000 80c6 	beq.w	8002936 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027aa:	4b95      	ldr	r3, [pc, #596]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f013 0f0c 	tst.w	r3, #12
 80027b2:	f000 809c 	beq.w	80028ee <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027b6:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	f000 808f 	beq.w	80028e2 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c4:	6923      	ldr	r3, [r4, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80f3 	beq.w	80029b2 <HAL_RCC_OscConfig+0x29e>
 80027cc:	2201      	movs	r2, #1
 80027ce:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe fe11 	bl	8001408 <HAL_GetTick>
 80027e6:	4605      	mov	r5, r0
 80027e8:	2302      	movs	r3, #2
 80027ea:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 80027f0:	6819      	ldr	r1, [r3, #0]
 80027f2:	2302      	movs	r3, #2
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2201      	movs	r2, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	420b      	tst	r3, r1
 8002808:	f040 80c4 	bne.w	8002994 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280c:	f7fe fdfc 	bl	8001408 <HAL_GetTick>
 8002810:	1b40      	subs	r0, r0, r5
 8002812:	2802      	cmp	r0, #2
 8002814:	d9e8      	bls.n	80027e8 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002816:	2003      	movs	r0, #3
 8002818:	e295      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281a:	4a79      	ldr	r2, [pc, #484]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 800281c:	6813      	ldr	r3, [r2, #0]
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002824:	4a76      	ldr	r2, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 8002826:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002828:	f023 030f 	bic.w	r3, r3, #15
 800282c:	68a1      	ldr	r1, [r4, #8]
 800282e:	430b      	orrs	r3, r1
 8002830:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002832:	6863      	ldr	r3, [r4, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d036      	beq.n	80028a6 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002838:	f7fe fde6 	bl	8001408 <HAL_GetTick>
 800283c:	4605      	mov	r5, r0
 800283e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002842:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b6e      	ldr	r3, [pc, #440]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2201      	movs	r2, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	420b      	tst	r3, r1
 8002862:	d19d      	bne.n	80027a0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe fdd0 	bl	8001408 <HAL_GetTick>
 8002868:	1b40      	subs	r0, r0, r5
 800286a:	2864      	cmp	r0, #100	; 0x64
 800286c:	d9e7      	bls.n	800283e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800286e:	2003      	movs	r0, #3
 8002870:	e269      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002876:	d009      	beq.n	800288c <HAL_RCC_OscConfig+0x178>
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e7cb      	b.n	8002824 <HAL_RCC_OscConfig+0x110>
 800288c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002890:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e7be      	b.n	8002824 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80028a6:	f7fe fdaf 	bl	8001408 <HAL_GetTick>
 80028aa:	4605      	mov	r5, r0
 80028ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b4:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2201      	movs	r2, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	420b      	tst	r3, r1
 80028d0:	f43f af66 	beq.w	80027a0 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fd98 	bl	8001408 <HAL_GetTick>
 80028d8:	1b40      	subs	r0, r0, r5
 80028da:	2864      	cmp	r0, #100	; 0x64
 80028dc:	d9e6      	bls.n	80028ac <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80028de:	2003      	movs	r0, #3
 80028e0:	e231      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028ea:	f47f af6b 	bne.w	80027c4 <HAL_RCC_OscConfig+0xb0>
 80028ee:	2302      	movs	r3, #2
 80028f0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f4:	4b42      	ldr	r3, [pc, #264]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	2302      	movs	r3, #2
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2201      	movs	r2, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	420b      	tst	r3, r1
 800290e:	d004      	beq.n	800291a <HAL_RCC_OscConfig+0x206>
 8002910:	6923      	ldr	r3, [r4, #16]
 8002912:	4293      	cmp	r3, r2
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002916:	2001      	movs	r0, #1
 8002918:	e215      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4839      	ldr	r0, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 800291c:	6803      	ldr	r3, [r0, #0]
 800291e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002922:	6961      	ldr	r1, [r4, #20]
 8002924:	22f8      	movs	r2, #248	; 0xf8
 8002926:	fa92 f2a2 	rbit	r2, r2
 800292a:	fab2 f282 	clz	r2, r2
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4313      	orrs	r3, r2
 8002934:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	f013 0f08 	tst.w	r3, #8
 800293c:	f000 808c 	beq.w	8002a58 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002940:	69a3      	ldr	r3, [r4, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d060      	beq.n	8002a08 <HAL_RCC_OscConfig+0x2f4>
 8002946:	2101      	movs	r1, #1
 8002948:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_RCC_OscConfig+0x2f0>)
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fe fd56 	bl	8001408 <HAL_GetTick>
 800295c:	4605      	mov	r5, r0
 800295e:	2302      	movs	r3, #2
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 800296e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2201      	movs	r2, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	420b      	tst	r3, r1
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002986:	f7fe fd3f 	bl	8001408 <HAL_GetTick>
 800298a:	1b40      	subs	r0, r0, r5
 800298c:	2802      	cmp	r0, #2
 800298e:	d9e6      	bls.n	800295e <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8002990:	2003      	movs	r0, #3
 8002992:	e1d8      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	481a      	ldr	r0, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 8002996:	6803      	ldr	r3, [r0, #0]
 8002998:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800299c:	6961      	ldr	r1, [r4, #20]
 800299e:	22f8      	movs	r2, #248	; 0xf8
 80029a0:	fa92 f2a2 	rbit	r2, r2
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	4313      	orrs	r3, r2
 80029ae:	6003      	str	r3, [r0, #0]
 80029b0:	e7c1      	b.n	8002936 <HAL_RCC_OscConfig+0x222>
 80029b2:	2301      	movs	r3, #1
 80029b4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029ca:	f7fe fd1d 	bl	8001408 <HAL_GetTick>
 80029ce:	4605      	mov	r5, r0
 80029d0:	2302      	movs	r3, #2
 80029d2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_OscConfig+0x2ec>)
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	2302      	movs	r3, #2
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2201      	movs	r2, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	420b      	tst	r3, r1
 80029f0:	d0a1      	beq.n	8002936 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fd09 	bl	8001408 <HAL_GetTick>
 80029f6:	1b40      	subs	r0, r0, r5
 80029f8:	2802      	cmp	r0, #2
 80029fa:	d9e9      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 80029fc:	2003      	movs	r0, #3
 80029fe:	e1a2      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	10908120 	.word	0x10908120
 8002a08:	2201      	movs	r2, #1
 8002a0a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0e:	fab2 f282 	clz	r2, r2
 8002a12:	4bbc      	ldr	r3, [pc, #752]	; (8002d04 <HAL_RCC_OscConfig+0x5f0>)
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fcf4 	bl	8001408 <HAL_GetTick>
 8002a20:	4605      	mov	r5, r0
 8002a22:	2302      	movs	r3, #2
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4ab5      	ldr	r2, [pc, #724]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002a32:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2201      	movs	r2, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	420b      	tst	r3, r1
 8002a48:	d006      	beq.n	8002a58 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4a:	f7fe fcdd 	bl	8001408 <HAL_GetTick>
 8002a4e:	1b40      	subs	r0, r0, r5
 8002a50:	2802      	cmp	r0, #2
 8002a52:	d9e6      	bls.n	8002a22 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002a54:	2003      	movs	r0, #3
 8002a56:	e176      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	f013 0f04 	tst.w	r3, #4
 8002a5e:	f000 80b3 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4ba9      	ldr	r3, [pc, #676]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a6a:	d120      	bne.n	8002aae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6c:	4ba6      	ldr	r3, [pc, #664]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a74:	61da      	str	r2, [r3, #28]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a80:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4ba2      	ldr	r3, [pc, #648]	; (8002d0c <HAL_RCC_OscConfig+0x5f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a8a:	d012      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	68e3      	ldr	r3, [r4, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d023      	beq.n	8002ada <HAL_RCC_OscConfig+0x3c6>
 8002a92:	bb73      	cbnz	r3, 8002af2 <HAL_RCC_OscConfig+0x3de>
 8002a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a98:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a9c:	6a1a      	ldr	r2, [r3, #32]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	621a      	str	r2, [r3, #32]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	f022 0204 	bic.w	r2, r2, #4
 8002aaa:	621a      	str	r2, [r3, #32]
 8002aac:	e01a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2500      	movs	r5, #0
 8002ab0:	e7e7      	b.n	8002a82 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab2:	4a96      	ldr	r2, [pc, #600]	; (8002d0c <HAL_RCC_OscConfig+0x5f8>)
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002abc:	f7fe fca4 	bl	8001408 <HAL_GetTick>
 8002ac0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b92      	ldr	r3, [pc, #584]	; (8002d0c <HAL_RCC_OscConfig+0x5f8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002aca:	d1df      	bne.n	8002a8c <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe fc9c 	bl	8001408 <HAL_GetTick>
 8002ad0:	1b80      	subs	r0, r0, r6
 8002ad2:	2864      	cmp	r0, #100	; 0x64
 8002ad4:	d9f5      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	e135      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ada:	4a8b      	ldr	r2, [pc, #556]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002adc:	6a13      	ldr	r3, [r2, #32]
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae4:	68e3      	ldr	r3, [r4, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d041      	beq.n	8002b6e <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fc8d 	bl	8001408 <HAL_GetTick>
 8002aee:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	e02b      	b.n	8002b4a <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_OscConfig+0x3f6>
 8002af6:	4b84      	ldr	r3, [pc, #528]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	621a      	str	r2, [r3, #32]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	621a      	str	r2, [r3, #32]
 8002b08:	e7ec      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3d0>
 8002b0a:	4b7f      	ldr	r3, [pc, #508]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002b0c:	6a1a      	ldr	r2, [r3, #32]
 8002b0e:	f042 0204 	orr.w	r2, r2, #4
 8002b12:	621a      	str	r2, [r3, #32]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	621a      	str	r2, [r3, #32]
 8002b1c:	e7e2      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002b20:	6a19      	ldr	r1, [r3, #32]
 8002b22:	2302      	movs	r3, #2
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2201      	movs	r2, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	4219      	tst	r1, r3
 8002b38:	d145      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fc65 	bl	8001408 <HAL_GetTick>
 8002b3e:	1b80      	subs	r0, r0, r6
 8002b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b44:	4298      	cmp	r0, r3
 8002b46:	f200 80f9 	bhi.w	8002d3c <HAL_RCC_OscConfig+0x628>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	fa93 f2a3 	rbit	r2, r3
 8002b50:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d0dd      	beq.n	8002b1e <HAL_RCC_OscConfig+0x40a>
 8002b62:	2302      	movs	r3, #2
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002b6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b6c:	e7d9      	b.n	8002b22 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fc4b 	bl	8001408 <HAL_GetTick>
 8002b72:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x48e>
 8002b76:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002b78:	6a19      	ldr	r1, [r3, #32]
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2201      	movs	r2, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	4219      	tst	r1, r3
 8002b90:	d019      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fe fc39 	bl	8001408 <HAL_GetTick>
 8002b96:	1b80      	subs	r0, r0, r6
 8002b98:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b9c:	4298      	cmp	r0, r3
 8002b9e:	f200 80cf 	bhi.w	8002d40 <HAL_RCC_OscConfig+0x62c>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d0dd      	beq.n	8002b76 <HAL_RCC_OscConfig+0x462>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	4b51      	ldr	r3, [pc, #324]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002bc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bc4:	e7d9      	b.n	8002b7a <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc6:	bbb5      	cbnz	r5, 8002c36 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc8:	69e3      	ldr	r3, [r4, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80ba 	beq.w	8002d44 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd0:	4a4d      	ldr	r2, [pc, #308]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002bd2:	6852      	ldr	r2, [r2, #4]
 8002bd4:	f002 020c 	and.w	r2, r2, #12
 8002bd8:	2a08      	cmp	r2, #8
 8002bda:	f000 8099 	beq.w	8002d10 <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d02f      	beq.n	8002c42 <HAL_RCC_OscConfig+0x52e>
 8002be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fc04 	bl	8001408 <HAL_GetTick>
 8002c00:	4604      	mov	r4, r0
 8002c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c06:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2201      	movs	r2, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	4219      	tst	r1, r3
 8002c26:	d06b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fbee 	bl	8001408 <HAL_GetTick>
 8002c2c:	1b00      	subs	r0, r0, r4
 8002c2e:	2802      	cmp	r0, #2
 8002c30:	d9e7      	bls.n	8002c02 <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 8002c32:	2003      	movs	r0, #3
 8002c34:	e087      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002c38:	69d3      	ldr	r3, [r2, #28]
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	61d3      	str	r3, [r2, #28]
 8002c40:	e7c2      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4b4>
 8002c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c46:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fbd4 	bl	8001408 <HAL_GetTick>
 8002c60:	4605      	mov	r5, r0
 8002c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c66:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2201      	movs	r2, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	4219      	tst	r1, r3
 8002c86:	d006      	beq.n	8002c96 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fbbe 	bl	8001408 <HAL_GetTick>
 8002c8c:	1b40      	subs	r0, r0, r5
 8002c8e:	2802      	cmp	r0, #2
 8002c90:	d9e7      	bls.n	8002c62 <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8002c92:	2003      	movs	r0, #3
 8002c94:	e057      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c96:	491c      	ldr	r1, [pc, #112]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002c98:	684b      	ldr	r3, [r1, #4]
 8002c9a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002c9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ca0:	6a20      	ldr	r0, [r4, #32]
 8002ca2:	4302      	orrs	r2, r0
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
 8002ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cac:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fba1 	bl	8001408 <HAL_GetTick>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ccc:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCC_OscConfig+0x5f4>)
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	4219      	tst	r1, r3
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fb8b 	bl	8001408 <HAL_GetTick>
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	2802      	cmp	r0, #2
 8002cf6:	d9e7      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	e024      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e022      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
 8002d00:	2000      	movs	r0, #0
 8002d02:	e020      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
 8002d04:	10908120 	.word	0x10908120
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d01a      	beq.n	8002d4a <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_RCC_OscConfig+0x640>)
 8002d16:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d18:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002d1c:	6a22      	ldr	r2, [r4, #32]
 8002d1e:	4291      	cmp	r1, r2
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
 8002d24:	e00f      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d26:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 8002d30:	2001      	movs	r0, #1
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8002d34:	2001      	movs	r0, #1
}
 8002d36:	4770      	bx	lr
        return HAL_ERROR;
 8002d38:	2001      	movs	r0, #1
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002d40:	2003      	movs	r0, #3
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002d44:	2000      	movs	r0, #0
}
 8002d46:	b002      	add	sp, #8
 8002d48:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	e7fb      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e7f9      	b.n	8002d46 <HAL_RCC_OscConfig+0x632>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x64>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d5c:	f003 020c 	and.w	r2, r3, #12
 8002d60:	2a04      	cmp	r2, #4
 8002d62:	d003      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x14>
 8002d64:	2a08      	cmp	r2, #8
 8002d66:	d003      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x18>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4815      	ldr	r0, [pc, #84]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x68>)
      break;
    }
  }
  return sysclockfreq;
}
 8002d6a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002d6c:	4815      	ldr	r0, [pc, #84]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002d6e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d70:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002d74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d78:	fa92 f2a2 	rbit	r2, r2
 8002d7c:	fab2 f282 	clz	r2, r2
 8002d80:	fa21 f202 	lsr.w	r2, r1, r2
 8002d84:	4910      	ldr	r1, [pc, #64]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x70>)
 8002d86:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d88:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x64>)
 8002d8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d8c:	f002 020f 	and.w	r2, r2, #15
 8002d90:	210f      	movs	r1, #15
 8002d92:	fa91 f1a1 	rbit	r1, r1
 8002d96:	fab1 f181 	clz	r1, r1
 8002d9a:	40ca      	lsrs	r2, r1
 8002d9c:	490b      	ldr	r1, [pc, #44]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x74>)
 8002d9e:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002da0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002da4:	d005      	beq.n	8002db2 <HAL_RCC_GetSysClockFreq+0x5a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dac:	fb00 f003 	mul.w	r0, r0, r3
 8002db0:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002db4:	fb03 f000 	mul.w	r0, r3, r0
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	007a1200 	.word	0x007a1200
 8002dc4:	01e84800 	.word	0x01e84800
 8002dc8:	080048f0 	.word	0x080048f0
 8002dcc:	08004900 	.word	0x08004900
 8002dd0:	003d0900 	.word	0x003d0900

08002dd4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	f000 80c1 	beq.w	8002f5c <HAL_RCC_ClockConfig+0x188>
{
 8002dda:	b570      	push	{r4, r5, r6, lr}
 8002ddc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_ClockConfig+0x190>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	428b      	cmp	r3, r1
 8002de8:	d20c      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <HAL_RCC_ClockConfig+0x190>)
 8002dec:	6813      	ldr	r3, [r2, #0]
 8002dee:	f023 0307 	bic.w	r3, r3, #7
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	428b      	cmp	r3, r1
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002e00:	2001      	movs	r0, #1
}
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	f013 0f02 	tst.w	r3, #2
 8002e0a:	d006      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e0c:	4a56      	ldr	r2, [pc, #344]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002e0e:	6853      	ldr	r3, [r2, #4]
 8002e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e14:	68a0      	ldr	r0, [r4, #8]
 8002e16:	4303      	orrs	r3, r0
 8002e18:	6053      	str	r3, [r2, #4]
 8002e1a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	f013 0f01 	tst.w	r3, #1
 8002e22:	d05a      	beq.n	8002eda <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d02d      	beq.n	8002e86 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0xdc>
 8002e2e:	2202      	movs	r2, #2
 8002e30:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002e36:	6810      	ldr	r0, [r2, #0]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	fa92 f2a2 	rbit	r2, r2
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4210      	tst	r0, r2
 8002e4e:	f000 8087 	beq.w	8002f60 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4945      	ldr	r1, [pc, #276]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002e54:	684a      	ldr	r2, [r1, #4]
 8002e56:	f022 0203 	bic.w	r2, r2, #3
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002e5e:	f7fe fad3 	bl	8001408 <HAL_GetTick>
 8002e62:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	6862      	ldr	r2, [r4, #4]
 8002e6e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e72:	d032      	beq.n	8002eda <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fac8 	bl	8001408 <HAL_GetTick>
 8002e78:	1b80      	subs	r0, r0, r6
 8002e7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e7e:	4298      	cmp	r0, r3
 8002e80:	d9f0      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8002e82:	2003      	movs	r0, #3
 8002e84:	e7bd      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2e>
 8002e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4a36      	ldr	r2, [pc, #216]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002e90:	6810      	ldr	r0, [r2, #0]
 8002e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e96:	fa92 f2a2 	rbit	r2, r2
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4202      	tst	r2, r0
 8002eaa:	d1d2      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002eac:	2001      	movs	r0, #1
 8002eae:	e7a8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2e>
 8002eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002eba:	6810      	ldr	r0, [r2, #0]
 8002ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	fab2 f282 	clz	r2, r2
 8002ec8:	f002 021f 	and.w	r2, r2, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed2:	4210      	tst	r0, r2
 8002ed4:	d1bd      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	e793      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_RCC_ClockConfig+0x190>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	42ab      	cmp	r3, r5
 8002ee4:	d90c      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_RCC_ClockConfig+0x190>)
 8002ee8:	6813      	ldr	r3, [r2, #0]
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	432b      	orrs	r3, r5
 8002ef0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	6813      	ldr	r3, [r2, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8002efc:	2001      	movs	r0, #1
 8002efe:	e780      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	f013 0f04 	tst.w	r3, #4
 8002f06:	d006      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002f0a:	6853      	ldr	r3, [r2, #4]
 8002f0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f10:	68e1      	ldr	r1, [r4, #12]
 8002f12:	430b      	orrs	r3, r1
 8002f14:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	f013 0f08 	tst.w	r3, #8
 8002f1c:	d007      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002f20:	6853      	ldr	r3, [r2, #4]
 8002f22:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002f26:	6921      	ldr	r1, [r4, #16]
 8002f28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f2c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f2e:	f7ff ff13 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_ClockConfig+0x194>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f3a:	22f0      	movs	r2, #240	; 0xf0
 8002f3c:	fa92 f2a2 	rbit	r2, r2
 8002f40:	fab2 f282 	clz	r2, r2
 8002f44:	40d3      	lsrs	r3, r2
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x198>)
 8002f48:	5cd3      	ldrb	r3, [r2, r3]
 8002f4a:	40d8      	lsrs	r0, r3
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_RCC_ClockConfig+0x19c>)
 8002f4e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_RCC_ClockConfig+0x1a0>)
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	f7fe fa20 	bl	8001398 <HAL_InitTick>
  return HAL_OK;
 8002f58:	2000      	movs	r0, #0
 8002f5a:	e752      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
}
 8002f5e:	4770      	bx	lr
        return HAL_ERROR;
 8002f60:	2001      	movs	r0, #1
 8002f62:	e74e      	b.n	8002e02 <HAL_RCC_ClockConfig+0x2e>
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	080048e0 	.word	0x080048e0
 8002f70:	2000000c 	.word	0x2000000c
 8002f74:	20000014 	.word	0x20000014

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f7e:	6803      	ldr	r3, [r0, #0]
 8002f80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002f84:	d048      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b83      	ldr	r3, [pc, #524]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f8e:	f040 80b4 	bne.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b80      	ldr	r3, [pc, #512]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f9a:	61da      	str	r2, [r3, #28]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fa6:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fb0:	f000 80a5 	beq.w	80030fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb4:	4b77      	ldr	r3, [pc, #476]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002fbc:	d022      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8002fbe:	6862      	ldr	r2, [r4, #4]
 8002fc0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d01d      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc8:	4872      	ldr	r0, [pc, #456]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002fca:	6a01      	ldr	r1, [r0, #32]
 8002fcc:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	4f6f      	ldr	r7, [pc, #444]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002fde:	443a      	add	r2, r7
 8002fe0:	0092      	lsls	r2, r2, #2
 8002fe2:	f04f 0c01 	mov.w	ip, #1
 8002fe6:	f8c2 c000 	str.w	ip, [r2]
 8002fea:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	443b      	add	r3, r7
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ffa:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ffc:	f011 0f01 	tst.w	r1, #1
 8003000:	f040 8092 	bne.w	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003004:	4a63      	ldr	r2, [pc, #396]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003006:	6a13      	ldr	r3, [r2, #32]
 8003008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300c:	6861      	ldr	r1, [r4, #4]
 800300e:	430b      	orrs	r3, r1
 8003010:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003012:	2d00      	cmp	r5, #0
 8003014:	f040 80b4 	bne.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f013 0f01 	tst.w	r3, #1
 800301e:	d006      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003020:	4a5c      	ldr	r2, [pc, #368]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003022:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003024:	f023 0303 	bic.w	r3, r3, #3
 8003028:	68a1      	ldr	r1, [r4, #8]
 800302a:	430b      	orrs	r3, r1
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	f013 0f20 	tst.w	r3, #32
 8003034:	d006      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003036:	4a57      	ldr	r2, [pc, #348]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003038:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800303a:	f023 0310 	bic.w	r3, r3, #16
 800303e:	68e1      	ldr	r1, [r4, #12]
 8003040:	430b      	orrs	r3, r1
 8003042:	6313      	str	r3, [r2, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f013 0f40 	tst.w	r3, #64	; 0x40
 800304a:	d006      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800304c:	4a51      	ldr	r2, [pc, #324]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800304e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003050:	f023 0320 	bic.w	r3, r3, #32
 8003054:	6921      	ldr	r1, [r4, #16]
 8003056:	430b      	orrs	r3, r1
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003060:	d006      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003062:	4a4c      	ldr	r2, [pc, #304]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003064:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306a:	6961      	ldr	r1, [r4, #20]
 800306c:	430b      	orrs	r3, r1
 800306e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003076:	d006      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003078:	4a46      	ldr	r2, [pc, #280]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800307a:	6853      	ldr	r3, [r2, #4]
 800307c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003080:	69e1      	ldr	r1, [r4, #28]
 8003082:	430b      	orrs	r3, r1
 8003084:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	f013 0f80 	tst.w	r3, #128	; 0x80
 800308c:	d006      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800308e:	4a41      	ldr	r2, [pc, #260]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003090:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003092:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003096:	69a1      	ldr	r1, [r4, #24]
 8003098:	430b      	orrs	r3, r1
 800309a:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80030a2:	d006      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030a4:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80030a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80030a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ac:	6a21      	ldr	r1, [r4, #32]
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80030b8:	d006      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030ba:	4a36      	ldr	r2, [pc, #216]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80030bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80030be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80030ce:	d006      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030d0:	4a30      	ldr	r2, [pc, #192]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80030d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80030d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80030da:	430b      	orrs	r3, r1
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80030e4:	d053      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030e6:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80030e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80030ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030f4:	2000      	movs	r0, #0
}
 80030f6:	b003      	add	sp, #12
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80030fa:	2500      	movs	r5, #0
 80030fc:	e754      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4a26      	ldr	r2, [pc, #152]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8003100:	6813      	ldr	r3, [r2, #0]
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003108:	f7fe f97e 	bl	8001408 <HAL_GetTick>
 800310c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003116:	f47f af4d 	bne.w	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fe f975 	bl	8001408 <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	2864      	cmp	r0, #100	; 0x64
 8003122:	d9f4      	bls.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 8003124:	2003      	movs	r0, #3
 8003126:	e7e6      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        tickstart = HAL_GetTick();
 8003128:	f7fe f96e 	bl	8001408 <HAL_GetTick>
 800312c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	e015      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003132:	6a19      	ldr	r1, [r3, #32]
 8003134:	2302      	movs	r3, #2
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2201      	movs	r2, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	420b      	tst	r3, r1
 800314a:	f47f af5b 	bne.w	8003004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fe f95b 	bl	8001408 <HAL_GetTick>
 8003152:	1b80      	subs	r0, r0, r6
 8003154:	f241 3388 	movw	r3, #5000	; 0x1388
 8003158:	4298      	cmp	r0, r3
 800315a:	d816      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800315c:	2302      	movs	r3, #2
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	d0dd      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003174:	2302      	movs	r3, #2
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800317c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800317e:	e7d9      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	69d3      	ldr	r3, [r2, #28]
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	61d3      	str	r3, [r2, #28]
 8003188:	e746      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 800318a:	2003      	movs	r0, #3
 800318c:	e7b3      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  return HAL_OK;
 800318e:	2000      	movs	r0, #0
 8003190:	e7b1      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
 800319c:	10908100 	.word	0x10908100

080031a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031a4:	6802      	ldr	r2, [r0, #0]
 80031a6:	68d3      	ldr	r3, [r2, #12]
 80031a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ac:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80031ae:	f7fe f92b 	bl	8001408 <HAL_GetTick>
 80031b2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f013 0f20 	tst.w	r3, #32
 80031bc:	d107      	bne.n	80031ce <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031be:	f7fe f923 	bl	8001408 <HAL_GetTick>
 80031c2:	1b40      	subs	r0, r0, r5
 80031c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031c8:	d9f4      	bls.n	80031b4 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80031ca:	2003      	movs	r0, #3
 80031cc:	e000      	b.n	80031d0 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80031ce:	2000      	movs	r0, #0
}
 80031d0:	bd38      	pop	{r3, r4, r5, pc}

080031d2 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031d2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031d4:	6803      	ldr	r3, [r0, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80031dc:	d001      	beq.n	80031e2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80031de:	2000      	movs	r0, #0
}
 80031e0:	bd38      	pop	{r3, r4, r5, pc}
 80031e2:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80031ea:	f7fe f90d 	bl	8001408 <HAL_GetTick>
 80031ee:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031f8:	d107      	bne.n	800320a <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031fa:	f7fe f905 	bl	8001408 <HAL_GetTick>
 80031fe:	1b40      	subs	r0, r0, r5
 8003200:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003204:	d9f4      	bls.n	80031f0 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8003206:	2003      	movs	r0, #3
 8003208:	e7ea      	b.n	80031e0 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800320a:	2000      	movs	r0, #0
 800320c:	e7e8      	b.n	80031e0 <RTC_EnterInitMode+0xe>

0800320e <HAL_RTC_Init>:
{
 800320e:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8003210:	2800      	cmp	r0, #0
 8003212:	d05c      	beq.n	80032ce <HAL_RTC_Init+0xc0>
 8003214:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003216:	7f43      	ldrb	r3, [r0, #29]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d040      	beq.n	800329e <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800321c:	2302      	movs	r3, #2
 800321e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	22ca      	movs	r2, #202	; 0xca
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	2253      	movs	r2, #83	; 0x53
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800322c:	4620      	mov	r0, r4
 800322e:	f7ff ffd0 	bl	80031d2 <RTC_EnterInitMode>
 8003232:	4605      	mov	r5, r0
 8003234:	2800      	cmp	r0, #0
 8003236:	d136      	bne.n	80032a6 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003238:	6822      	ldr	r2, [r4, #0]
 800323a:	6893      	ldr	r3, [r2, #8]
 800323c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003244:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003246:	6821      	ldr	r1, [r4, #0]
 8003248:	688a      	ldr	r2, [r1, #8]
 800324a:	6863      	ldr	r3, [r4, #4]
 800324c:	6920      	ldr	r0, [r4, #16]
 800324e:	4303      	orrs	r3, r0
 8003250:	6960      	ldr	r0, [r4, #20]
 8003252:	4303      	orrs	r3, r0
 8003254:	4313      	orrs	r3, r2
 8003256:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	68e2      	ldr	r2, [r4, #12]
 800325c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	6913      	ldr	r3, [r2, #16]
 8003262:	68a1      	ldr	r1, [r4, #8]
 8003264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003268:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	68d3      	ldr	r3, [r2, #12]
 800326e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003272:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f013 0f20 	tst.w	r3, #32
 800327c:	d01b      	beq.n	80032b6 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800328c:	69a1      	ldr	r1, [r4, #24]
 800328e:	430b      	orrs	r3, r1
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003298:	2301      	movs	r3, #1
 800329a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800329c:	e009      	b.n	80032b2 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 800329e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80032a0:	f7fe f804 	bl	80012ac <HAL_RTC_MspInit>
 80032a4:	e7ba      	b.n	800321c <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032ac:	2304      	movs	r3, #4
 80032ae:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80032b0:	2501      	movs	r5, #1
}
 80032b2:	4628      	mov	r0, r5
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff ff72 	bl	80031a0 <HAL_RTC_WaitForSynchro>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d0de      	beq.n	800327e <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032c6:	2304      	movs	r3, #4
 80032c8:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80032ca:	2501      	movs	r5, #1
 80032cc:	e7f1      	b.n	80032b2 <HAL_RTC_Init+0xa4>
    return HAL_ERROR;
 80032ce:	2501      	movs	r5, #1
 80032d0:	e7ef      	b.n	80032b2 <HAL_RTC_Init+0xa4>
	...

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4e0d      	ldr	r6, [pc, #52]	; (800330c <__libc_init_array+0x38>)
 80032d8:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032da:	1ba4      	subs	r4, r4, r6
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	2500      	movs	r5, #0
 80032e0:	42a5      	cmp	r5, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	4e0b      	ldr	r6, [pc, #44]	; (8003314 <__libc_init_array+0x40>)
 80032e6:	4c0c      	ldr	r4, [pc, #48]	; (8003318 <__libc_init_array+0x44>)
 80032e8:	f001 faec 	bl	80048c4 <_init>
 80032ec:	1ba4      	subs	r4, r4, r6
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	2500      	movs	r5, #0
 80032f2:	42a5      	cmp	r5, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032fc:	4798      	blx	r3
 80032fe:	3501      	adds	r5, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003306:	4798      	blx	r3
 8003308:	3501      	adds	r5, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08004ae8 	.word	0x08004ae8
 8003310:	08004ae8 	.word	0x08004ae8
 8003314:	08004ae8 	.word	0x08004ae8
 8003318:	08004aec 	.word	0x08004aec

0800331c <memset>:
 800331c:	4402      	add	r2, r0
 800331e:	4603      	mov	r3, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>
 800332c:	0000      	movs	r0, r0
	...

08003330 <sin>:
 8003330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003332:	ec51 0b10 	vmov	r0, r1, d0
 8003336:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <sin+0x88>)
 8003338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800333c:	4293      	cmp	r3, r2
 800333e:	dc07      	bgt.n	8003350 <sin+0x20>
 8003340:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80033b0 <sin+0x80>
 8003344:	2000      	movs	r0, #0
 8003346:	f000 febf 	bl	80040c8 <__kernel_sin>
 800334a:	ec51 0b10 	vmov	r0, r1, d0
 800334e:	e007      	b.n	8003360 <sin+0x30>
 8003350:	4a1a      	ldr	r2, [pc, #104]	; (80033bc <sin+0x8c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	dd09      	ble.n	800336a <sin+0x3a>
 8003356:	ee10 2a10 	vmov	r2, s0
 800335a:	460b      	mov	r3, r1
 800335c:	f7fc ff38 	bl	80001d0 <__aeabi_dsub>
 8003360:	ec41 0b10 	vmov	d0, r0, r1
 8003364:	b005      	add	sp, #20
 8003366:	f85d fb04 	ldr.w	pc, [sp], #4
 800336a:	4668      	mov	r0, sp
 800336c:	f000 f8b0 	bl	80034d0 <__ieee754_rem_pio2>
 8003370:	f000 0003 	and.w	r0, r0, #3
 8003374:	2801      	cmp	r0, #1
 8003376:	ed9d 1b02 	vldr	d1, [sp, #8]
 800337a:	ed9d 0b00 	vldr	d0, [sp]
 800337e:	d004      	beq.n	800338a <sin+0x5a>
 8003380:	2802      	cmp	r0, #2
 8003382:	d005      	beq.n	8003390 <sin+0x60>
 8003384:	b970      	cbnz	r0, 80033a4 <sin+0x74>
 8003386:	2001      	movs	r0, #1
 8003388:	e7dd      	b.n	8003346 <sin+0x16>
 800338a:	f000 fa95 	bl	80038b8 <__kernel_cos>
 800338e:	e7dc      	b.n	800334a <sin+0x1a>
 8003390:	2001      	movs	r0, #1
 8003392:	f000 fe99 	bl	80040c8 <__kernel_sin>
 8003396:	ec53 2b10 	vmov	r2, r3, d0
 800339a:	ee10 0a10 	vmov	r0, s0
 800339e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80033a2:	e7dd      	b.n	8003360 <sin+0x30>
 80033a4:	f000 fa88 	bl	80038b8 <__kernel_cos>
 80033a8:	e7f5      	b.n	8003396 <sin+0x66>
 80033aa:	bf00      	nop
 80033ac:	f3af 8000 	nop.w
	...
 80033b8:	3fe921fb 	.word	0x3fe921fb
 80033bc:	7fefffff 	.word	0x7fefffff

080033c0 <tanh>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	ec55 4b10 	vmov	r4, r5, d0
 80033c6:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <tanh+0xfc>)
 80033c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80033cc:	4293      	cmp	r3, r2
 80033ce:	462e      	mov	r6, r5
 80033d0:	dd13      	ble.n	80033fa <tanh+0x3a>
 80033d2:	ee10 2a10 	vmov	r2, s0
 80033d6:	462b      	mov	r3, r5
 80033d8:	2000      	movs	r0, #0
 80033da:	4939      	ldr	r1, [pc, #228]	; (80034c0 <tanh+0x100>)
 80033dc:	f7fd f9da 	bl	8000794 <__aeabi_ddiv>
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <tanh+0x100>)
 80033e8:	db04      	blt.n	80033f4 <tanh+0x34>
 80033ea:	f7fc fef3 	bl	80001d4 <__adddf3>
 80033ee:	ec41 0b10 	vmov	d0, r0, r1
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f7fc feec 	bl	80001d0 <__aeabi_dsub>
 80033f8:	e7f9      	b.n	80033ee <tanh+0x2e>
 80033fa:	4a32      	ldr	r2, [pc, #200]	; (80034c4 <tanh+0x104>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	dc59      	bgt.n	80034b4 <tanh+0xf4>
 8003400:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8003404:	da0b      	bge.n	800341e <tanh+0x5e>
 8003406:	2200      	movs	r2, #0
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <tanh+0x100>)
 800340a:	ee10 0a10 	vmov	r0, s0
 800340e:	4629      	mov	r1, r5
 8003410:	f7fc fee0 	bl	80001d4 <__adddf3>
 8003414:	4622      	mov	r2, r4
 8003416:	462b      	mov	r3, r5
 8003418:	f7fd f892 	bl	8000540 <__aeabi_dmul>
 800341c:	e7e7      	b.n	80033ee <tanh+0x2e>
 800341e:	4a2a      	ldr	r2, [pc, #168]	; (80034c8 <tanh+0x108>)
 8003420:	4293      	cmp	r3, r2
 8003422:	dd28      	ble.n	8003476 <tanh+0xb6>
 8003424:	f001 f93a 	bl	800469c <fabs>
 8003428:	ec53 2b10 	vmov	r2, r3, d0
 800342c:	ee10 0a10 	vmov	r0, s0
 8003430:	4619      	mov	r1, r3
 8003432:	f7fc fecf 	bl	80001d4 <__adddf3>
 8003436:	ec41 0b10 	vmov	d0, r0, r1
 800343a:	f000 ff01 	bl	8004240 <expm1>
 800343e:	2200      	movs	r2, #0
 8003440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003444:	ec51 0b10 	vmov	r0, r1, d0
 8003448:	f7fc fec4 	bl	80001d4 <__adddf3>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	2000      	movs	r0, #0
 8003452:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003456:	f7fd f99d 	bl	8000794 <__aeabi_ddiv>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	2000      	movs	r0, #0
 8003460:	4917      	ldr	r1, [pc, #92]	; (80034c0 <tanh+0x100>)
 8003462:	f7fc feb5 	bl	80001d0 <__aeabi_dsub>
 8003466:	2e00      	cmp	r6, #0
 8003468:	bfbf      	itttt	lt
 800346a:	4602      	movlt	r2, r0
 800346c:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
 8003470:	4610      	movlt	r0, r2
 8003472:	4619      	movlt	r1, r3
 8003474:	e7bb      	b.n	80033ee <tanh+0x2e>
 8003476:	f001 f911 	bl	800469c <fabs>
 800347a:	2200      	movs	r2, #0
 800347c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003480:	ec51 0b10 	vmov	r0, r1, d0
 8003484:	f7fd f85c 	bl	8000540 <__aeabi_dmul>
 8003488:	ec41 0b10 	vmov	d0, r0, r1
 800348c:	f000 fed8 	bl	8004240 <expm1>
 8003490:	ec51 0b10 	vmov	r0, r1, d0
 8003494:	2200      	movs	r2, #0
 8003496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800349a:	ee10 4a10 	vmov	r4, s0
 800349e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80034a2:	f7fc fe97 	bl	80001d4 <__adddf3>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7fd f971 	bl	8000794 <__aeabi_ddiv>
 80034b2:	e7d8      	b.n	8003466 <tanh+0xa6>
 80034b4:	2000      	movs	r0, #0
 80034b6:	4902      	ldr	r1, [pc, #8]	; (80034c0 <tanh+0x100>)
 80034b8:	e7d5      	b.n	8003466 <tanh+0xa6>
 80034ba:	bf00      	nop
 80034bc:	7fefffff 	.word	0x7fefffff
 80034c0:	3ff00000 	.word	0x3ff00000
 80034c4:	4035ffff 	.word	0x4035ffff
 80034c8:	3fefffff 	.word	0x3fefffff
 80034cc:	00000000 	.word	0x00000000

080034d0 <__ieee754_rem_pio2>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	ec57 6b10 	vmov	r6, r7, d0
 80034d8:	4bc3      	ldr	r3, [pc, #780]	; (80037e8 <__ieee754_rem_pio2+0x318>)
 80034da:	b08d      	sub	sp, #52	; 0x34
 80034dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80034e0:	4598      	cmp	r8, r3
 80034e2:	4604      	mov	r4, r0
 80034e4:	9704      	str	r7, [sp, #16]
 80034e6:	dc07      	bgt.n	80034f8 <__ieee754_rem_pio2+0x28>
 80034e8:	2200      	movs	r2, #0
 80034ea:	2300      	movs	r3, #0
 80034ec:	ed84 0b00 	vstr	d0, [r4]
 80034f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80034f4:	2500      	movs	r5, #0
 80034f6:	e027      	b.n	8003548 <__ieee754_rem_pio2+0x78>
 80034f8:	4bbc      	ldr	r3, [pc, #752]	; (80037ec <__ieee754_rem_pio2+0x31c>)
 80034fa:	4598      	cmp	r8, r3
 80034fc:	dc75      	bgt.n	80035ea <__ieee754_rem_pio2+0x11a>
 80034fe:	9b04      	ldr	r3, [sp, #16]
 8003500:	4dbb      	ldr	r5, [pc, #748]	; (80037f0 <__ieee754_rem_pio2+0x320>)
 8003502:	2b00      	cmp	r3, #0
 8003504:	ee10 0a10 	vmov	r0, s0
 8003508:	a3a9      	add	r3, pc, #676	; (adr r3, 80037b0 <__ieee754_rem_pio2+0x2e0>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	4639      	mov	r1, r7
 8003510:	dd36      	ble.n	8003580 <__ieee754_rem_pio2+0xb0>
 8003512:	f7fc fe5d 	bl	80001d0 <__aeabi_dsub>
 8003516:	45a8      	cmp	r8, r5
 8003518:	4606      	mov	r6, r0
 800351a:	460f      	mov	r7, r1
 800351c:	d018      	beq.n	8003550 <__ieee754_rem_pio2+0x80>
 800351e:	a3a6      	add	r3, pc, #664	; (adr r3, 80037b8 <__ieee754_rem_pio2+0x2e8>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fc fe54 	bl	80001d0 <__aeabi_dsub>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	e9c4 2300 	strd	r2, r3, [r4]
 8003530:	4630      	mov	r0, r6
 8003532:	4639      	mov	r1, r7
 8003534:	f7fc fe4c 	bl	80001d0 <__aeabi_dsub>
 8003538:	a39f      	add	r3, pc, #636	; (adr r3, 80037b8 <__ieee754_rem_pio2+0x2e8>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f7fc fe47 	bl	80001d0 <__aeabi_dsub>
 8003542:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003546:	2501      	movs	r5, #1
 8003548:	4628      	mov	r0, r5
 800354a:	b00d      	add	sp, #52	; 0x34
 800354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003550:	a39b      	add	r3, pc, #620	; (adr r3, 80037c0 <__ieee754_rem_pio2+0x2f0>)
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f7fc fe3b 	bl	80001d0 <__aeabi_dsub>
 800355a:	a39b      	add	r3, pc, #620	; (adr r3, 80037c8 <__ieee754_rem_pio2+0x2f8>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	4606      	mov	r6, r0
 8003562:	460f      	mov	r7, r1
 8003564:	f7fc fe34 	bl	80001d0 <__aeabi_dsub>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	e9c4 2300 	strd	r2, r3, [r4]
 8003570:	4630      	mov	r0, r6
 8003572:	4639      	mov	r1, r7
 8003574:	f7fc fe2c 	bl	80001d0 <__aeabi_dsub>
 8003578:	a393      	add	r3, pc, #588	; (adr r3, 80037c8 <__ieee754_rem_pio2+0x2f8>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	e7de      	b.n	800353e <__ieee754_rem_pio2+0x6e>
 8003580:	f7fc fe28 	bl	80001d4 <__adddf3>
 8003584:	45a8      	cmp	r8, r5
 8003586:	4606      	mov	r6, r0
 8003588:	460f      	mov	r7, r1
 800358a:	d016      	beq.n	80035ba <__ieee754_rem_pio2+0xea>
 800358c:	a38a      	add	r3, pc, #552	; (adr r3, 80037b8 <__ieee754_rem_pio2+0x2e8>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fc fe1f 	bl	80001d4 <__adddf3>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	e9c4 2300 	strd	r2, r3, [r4]
 800359e:	4630      	mov	r0, r6
 80035a0:	4639      	mov	r1, r7
 80035a2:	f7fc fe15 	bl	80001d0 <__aeabi_dsub>
 80035a6:	a384      	add	r3, pc, #528	; (adr r3, 80037b8 <__ieee754_rem_pio2+0x2e8>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fc fe12 	bl	80001d4 <__adddf3>
 80035b0:	f04f 35ff 	mov.w	r5, #4294967295
 80035b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035b8:	e7c6      	b.n	8003548 <__ieee754_rem_pio2+0x78>
 80035ba:	a381      	add	r3, pc, #516	; (adr r3, 80037c0 <__ieee754_rem_pio2+0x2f0>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f7fc fe08 	bl	80001d4 <__adddf3>
 80035c4:	a380      	add	r3, pc, #512	; (adr r3, 80037c8 <__ieee754_rem_pio2+0x2f8>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	4606      	mov	r6, r0
 80035cc:	460f      	mov	r7, r1
 80035ce:	f7fc fe01 	bl	80001d4 <__adddf3>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	e9c4 2300 	strd	r2, r3, [r4]
 80035da:	4630      	mov	r0, r6
 80035dc:	4639      	mov	r1, r7
 80035de:	f7fc fdf7 	bl	80001d0 <__aeabi_dsub>
 80035e2:	a379      	add	r3, pc, #484	; (adr r3, 80037c8 <__ieee754_rem_pio2+0x2f8>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	e7e0      	b.n	80035ac <__ieee754_rem_pio2+0xdc>
 80035ea:	4b82      	ldr	r3, [pc, #520]	; (80037f4 <__ieee754_rem_pio2+0x324>)
 80035ec:	4598      	cmp	r8, r3
 80035ee:	f300 80d0 	bgt.w	8003792 <__ieee754_rem_pio2+0x2c2>
 80035f2:	f001 f853 	bl	800469c <fabs>
 80035f6:	ec57 6b10 	vmov	r6, r7, d0
 80035fa:	ee10 0a10 	vmov	r0, s0
 80035fe:	a374      	add	r3, pc, #464	; (adr r3, 80037d0 <__ieee754_rem_pio2+0x300>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	4639      	mov	r1, r7
 8003606:	f7fc ff9b 	bl	8000540 <__aeabi_dmul>
 800360a:	2200      	movs	r2, #0
 800360c:	4b7a      	ldr	r3, [pc, #488]	; (80037f8 <__ieee754_rem_pio2+0x328>)
 800360e:	f7fc fde1 	bl	80001d4 <__adddf3>
 8003612:	f7fd fa2f 	bl	8000a74 <__aeabi_d2iz>
 8003616:	4605      	mov	r5, r0
 8003618:	f7fc ff28 	bl	800046c <__aeabi_i2d>
 800361c:	a364      	add	r3, pc, #400	; (adr r3, 80037b0 <__ieee754_rem_pio2+0x2e0>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003626:	f7fc ff8b 	bl	8000540 <__aeabi_dmul>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4630      	mov	r0, r6
 8003630:	4639      	mov	r1, r7
 8003632:	f7fc fdcd 	bl	80001d0 <__aeabi_dsub>
 8003636:	a360      	add	r3, pc, #384	; (adr r3, 80037b8 <__ieee754_rem_pio2+0x2e8>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	4682      	mov	sl, r0
 800363e:	468b      	mov	fp, r1
 8003640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003644:	f7fc ff7c 	bl	8000540 <__aeabi_dmul>
 8003648:	2d1f      	cmp	r5, #31
 800364a:	4606      	mov	r6, r0
 800364c:	460f      	mov	r7, r1
 800364e:	dc0c      	bgt.n	800366a <__ieee754_rem_pio2+0x19a>
 8003650:	1e6a      	subs	r2, r5, #1
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <__ieee754_rem_pio2+0x32c>)
 8003654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003658:	4543      	cmp	r3, r8
 800365a:	d006      	beq.n	800366a <__ieee754_rem_pio2+0x19a>
 800365c:	4632      	mov	r2, r6
 800365e:	463b      	mov	r3, r7
 8003660:	4650      	mov	r0, sl
 8003662:	4659      	mov	r1, fp
 8003664:	f7fc fdb4 	bl	80001d0 <__aeabi_dsub>
 8003668:	e00e      	b.n	8003688 <__ieee754_rem_pio2+0x1b8>
 800366a:	4632      	mov	r2, r6
 800366c:	463b      	mov	r3, r7
 800366e:	4650      	mov	r0, sl
 8003670:	4659      	mov	r1, fp
 8003672:	f7fc fdad 	bl	80001d0 <__aeabi_dsub>
 8003676:	ea4f 5328 	mov.w	r3, r8, asr #20
 800367a:	9305      	str	r3, [sp, #20]
 800367c:	9a05      	ldr	r2, [sp, #20]
 800367e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b10      	cmp	r3, #16
 8003686:	dc02      	bgt.n	800368e <__ieee754_rem_pio2+0x1be>
 8003688:	e9c4 0100 	strd	r0, r1, [r4]
 800368c:	e039      	b.n	8003702 <__ieee754_rem_pio2+0x232>
 800368e:	a34c      	add	r3, pc, #304	; (adr r3, 80037c0 <__ieee754_rem_pio2+0x2f0>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003698:	f7fc ff52 	bl	8000540 <__aeabi_dmul>
 800369c:	4606      	mov	r6, r0
 800369e:	460f      	mov	r7, r1
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4650      	mov	r0, sl
 80036a6:	4659      	mov	r1, fp
 80036a8:	f7fc fd92 	bl	80001d0 <__aeabi_dsub>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4680      	mov	r8, r0
 80036b2:	4689      	mov	r9, r1
 80036b4:	4650      	mov	r0, sl
 80036b6:	4659      	mov	r1, fp
 80036b8:	f7fc fd8a 	bl	80001d0 <__aeabi_dsub>
 80036bc:	4632      	mov	r2, r6
 80036be:	463b      	mov	r3, r7
 80036c0:	f7fc fd86 	bl	80001d0 <__aeabi_dsub>
 80036c4:	a340      	add	r3, pc, #256	; (adr r3, 80037c8 <__ieee754_rem_pio2+0x2f8>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	4606      	mov	r6, r0
 80036cc:	460f      	mov	r7, r1
 80036ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036d2:	f7fc ff35 	bl	8000540 <__aeabi_dmul>
 80036d6:	4632      	mov	r2, r6
 80036d8:	463b      	mov	r3, r7
 80036da:	f7fc fd79 	bl	80001d0 <__aeabi_dsub>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4606      	mov	r6, r0
 80036e4:	460f      	mov	r7, r1
 80036e6:	4640      	mov	r0, r8
 80036e8:	4649      	mov	r1, r9
 80036ea:	f7fc fd71 	bl	80001d0 <__aeabi_dsub>
 80036ee:	9a05      	ldr	r2, [sp, #20]
 80036f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b31      	cmp	r3, #49	; 0x31
 80036f8:	dc20      	bgt.n	800373c <__ieee754_rem_pio2+0x26c>
 80036fa:	e9c4 0100 	strd	r0, r1, [r4]
 80036fe:	46c2      	mov	sl, r8
 8003700:	46cb      	mov	fp, r9
 8003702:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003706:	4650      	mov	r0, sl
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	4659      	mov	r1, fp
 800370e:	f7fc fd5f 	bl	80001d0 <__aeabi_dsub>
 8003712:	463b      	mov	r3, r7
 8003714:	4632      	mov	r2, r6
 8003716:	f7fc fd5b 	bl	80001d0 <__aeabi_dsub>
 800371a:	9b04      	ldr	r3, [sp, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003722:	f6bf af11 	bge.w	8003548 <__ieee754_rem_pio2+0x78>
 8003726:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800372a:	6063      	str	r3, [r4, #4]
 800372c:	f8c4 8000 	str.w	r8, [r4]
 8003730:	60a0      	str	r0, [r4, #8]
 8003732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003736:	60e3      	str	r3, [r4, #12]
 8003738:	426d      	negs	r5, r5
 800373a:	e705      	b.n	8003548 <__ieee754_rem_pio2+0x78>
 800373c:	a326      	add	r3, pc, #152	; (adr r3, 80037d8 <__ieee754_rem_pio2+0x308>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003746:	f7fc fefb 	bl	8000540 <__aeabi_dmul>
 800374a:	4606      	mov	r6, r0
 800374c:	460f      	mov	r7, r1
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4640      	mov	r0, r8
 8003754:	4649      	mov	r1, r9
 8003756:	f7fc fd3b 	bl	80001d0 <__aeabi_dsub>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4682      	mov	sl, r0
 8003760:	468b      	mov	fp, r1
 8003762:	4640      	mov	r0, r8
 8003764:	4649      	mov	r1, r9
 8003766:	f7fc fd33 	bl	80001d0 <__aeabi_dsub>
 800376a:	4632      	mov	r2, r6
 800376c:	463b      	mov	r3, r7
 800376e:	f7fc fd2f 	bl	80001d0 <__aeabi_dsub>
 8003772:	a31b      	add	r3, pc, #108	; (adr r3, 80037e0 <__ieee754_rem_pio2+0x310>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	4606      	mov	r6, r0
 800377a:	460f      	mov	r7, r1
 800377c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003780:	f7fc fede 	bl	8000540 <__aeabi_dmul>
 8003784:	4632      	mov	r2, r6
 8003786:	463b      	mov	r3, r7
 8003788:	f7fc fd22 	bl	80001d0 <__aeabi_dsub>
 800378c:	4606      	mov	r6, r0
 800378e:	460f      	mov	r7, r1
 8003790:	e764      	b.n	800365c <__ieee754_rem_pio2+0x18c>
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <__ieee754_rem_pio2+0x330>)
 8003794:	4598      	cmp	r8, r3
 8003796:	dd35      	ble.n	8003804 <__ieee754_rem_pio2+0x334>
 8003798:	ee10 2a10 	vmov	r2, s0
 800379c:	463b      	mov	r3, r7
 800379e:	4630      	mov	r0, r6
 80037a0:	4639      	mov	r1, r7
 80037a2:	f7fc fd15 	bl	80001d0 <__aeabi_dsub>
 80037a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80037aa:	e9c4 0100 	strd	r0, r1, [r4]
 80037ae:	e6a1      	b.n	80034f4 <__ieee754_rem_pio2+0x24>
 80037b0:	54400000 	.word	0x54400000
 80037b4:	3ff921fb 	.word	0x3ff921fb
 80037b8:	1a626331 	.word	0x1a626331
 80037bc:	3dd0b461 	.word	0x3dd0b461
 80037c0:	1a600000 	.word	0x1a600000
 80037c4:	3dd0b461 	.word	0x3dd0b461
 80037c8:	2e037073 	.word	0x2e037073
 80037cc:	3ba3198a 	.word	0x3ba3198a
 80037d0:	6dc9c883 	.word	0x6dc9c883
 80037d4:	3fe45f30 	.word	0x3fe45f30
 80037d8:	2e000000 	.word	0x2e000000
 80037dc:	3ba3198a 	.word	0x3ba3198a
 80037e0:	252049c1 	.word	0x252049c1
 80037e4:	397b839a 	.word	0x397b839a
 80037e8:	3fe921fb 	.word	0x3fe921fb
 80037ec:	4002d97b 	.word	0x4002d97b
 80037f0:	3ff921fb 	.word	0x3ff921fb
 80037f4:	413921fb 	.word	0x413921fb
 80037f8:	3fe00000 	.word	0x3fe00000
 80037fc:	08004910 	.word	0x08004910
 8003800:	7fefffff 	.word	0x7fefffff
 8003804:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003808:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800380c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003810:	4630      	mov	r0, r6
 8003812:	460f      	mov	r7, r1
 8003814:	f7fd f92e 	bl	8000a74 <__aeabi_d2iz>
 8003818:	f7fc fe28 	bl	800046c <__aeabi_i2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4630      	mov	r0, r6
 8003822:	4639      	mov	r1, r7
 8003824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003828:	f7fc fcd2 	bl	80001d0 <__aeabi_dsub>
 800382c:	2200      	movs	r2, #0
 800382e:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <__ieee754_rem_pio2+0x3dc>)
 8003830:	f7fc fe86 	bl	8000540 <__aeabi_dmul>
 8003834:	460f      	mov	r7, r1
 8003836:	4606      	mov	r6, r0
 8003838:	f7fd f91c 	bl	8000a74 <__aeabi_d2iz>
 800383c:	f7fc fe16 	bl	800046c <__aeabi_i2d>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4630      	mov	r0, r6
 8003846:	4639      	mov	r1, r7
 8003848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800384c:	f7fc fcc0 	bl	80001d0 <__aeabi_dsub>
 8003850:	2200      	movs	r2, #0
 8003852:	4b16      	ldr	r3, [pc, #88]	; (80038ac <__ieee754_rem_pio2+0x3dc>)
 8003854:	f7fc fe74 	bl	8000540 <__aeabi_dmul>
 8003858:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800385c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003860:	f04f 0803 	mov.w	r8, #3
 8003864:	2600      	movs	r6, #0
 8003866:	2700      	movs	r7, #0
 8003868:	4632      	mov	r2, r6
 800386a:	463b      	mov	r3, r7
 800386c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003870:	f108 3aff 	add.w	sl, r8, #4294967295
 8003874:	f7fd f8cc 	bl	8000a10 <__aeabi_dcmpeq>
 8003878:	b9b0      	cbnz	r0, 80038a8 <__ieee754_rem_pio2+0x3d8>
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <__ieee754_rem_pio2+0x3e0>)
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	2302      	movs	r3, #2
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	462a      	mov	r2, r5
 8003884:	4643      	mov	r3, r8
 8003886:	4621      	mov	r1, r4
 8003888:	a806      	add	r0, sp, #24
 800388a:	f000 f8dd 	bl	8003a48 <__kernel_rem_pio2>
 800388e:	9b04      	ldr	r3, [sp, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	4605      	mov	r5, r0
 8003894:	f6bf ae58 	bge.w	8003548 <__ieee754_rem_pio2+0x78>
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800389e:	6063      	str	r3, [r4, #4]
 80038a0:	68e3      	ldr	r3, [r4, #12]
 80038a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80038a6:	e746      	b.n	8003736 <__ieee754_rem_pio2+0x266>
 80038a8:	46d0      	mov	r8, sl
 80038aa:	e7dd      	b.n	8003868 <__ieee754_rem_pio2+0x398>
 80038ac:	41700000 	.word	0x41700000
 80038b0:	08004990 	.word	0x08004990
 80038b4:	00000000 	.word	0x00000000

080038b8 <__kernel_cos>:
 80038b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	ec59 8b10 	vmov	r8, r9, d0
 80038c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80038c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80038c8:	ed2d 8b02 	vpush	{d8}
 80038cc:	eeb0 8a41 	vmov.f32	s16, s2
 80038d0:	eef0 8a61 	vmov.f32	s17, s3
 80038d4:	da07      	bge.n	80038e6 <__kernel_cos+0x2e>
 80038d6:	ee10 0a10 	vmov	r0, s0
 80038da:	4649      	mov	r1, r9
 80038dc:	f7fd f8ca 	bl	8000a74 <__aeabi_d2iz>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	f000 8089 	beq.w	80039f8 <__kernel_cos+0x140>
 80038e6:	4642      	mov	r2, r8
 80038e8:	464b      	mov	r3, r9
 80038ea:	4640      	mov	r0, r8
 80038ec:	4649      	mov	r1, r9
 80038ee:	f7fc fe27 	bl	8000540 <__aeabi_dmul>
 80038f2:	2200      	movs	r2, #0
 80038f4:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <__kernel_cos+0x178>)
 80038f6:	4604      	mov	r4, r0
 80038f8:	460d      	mov	r5, r1
 80038fa:	f7fc fe21 	bl	8000540 <__aeabi_dmul>
 80038fe:	a340      	add	r3, pc, #256	; (adr r3, 8003a00 <__kernel_cos+0x148>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	4682      	mov	sl, r0
 8003906:	468b      	mov	fp, r1
 8003908:	4620      	mov	r0, r4
 800390a:	4629      	mov	r1, r5
 800390c:	f7fc fe18 	bl	8000540 <__aeabi_dmul>
 8003910:	a33d      	add	r3, pc, #244	; (adr r3, 8003a08 <__kernel_cos+0x150>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fc5d 	bl	80001d4 <__adddf3>
 800391a:	4622      	mov	r2, r4
 800391c:	462b      	mov	r3, r5
 800391e:	f7fc fe0f 	bl	8000540 <__aeabi_dmul>
 8003922:	a33b      	add	r3, pc, #236	; (adr r3, 8003a10 <__kernel_cos+0x158>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f7fc fc52 	bl	80001d0 <__aeabi_dsub>
 800392c:	4622      	mov	r2, r4
 800392e:	462b      	mov	r3, r5
 8003930:	f7fc fe06 	bl	8000540 <__aeabi_dmul>
 8003934:	a338      	add	r3, pc, #224	; (adr r3, 8003a18 <__kernel_cos+0x160>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f7fc fc4b 	bl	80001d4 <__adddf3>
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	f7fc fdfd 	bl	8000540 <__aeabi_dmul>
 8003946:	a336      	add	r3, pc, #216	; (adr r3, 8003a20 <__kernel_cos+0x168>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc fc40 	bl	80001d0 <__aeabi_dsub>
 8003950:	4622      	mov	r2, r4
 8003952:	462b      	mov	r3, r5
 8003954:	f7fc fdf4 	bl	8000540 <__aeabi_dmul>
 8003958:	a333      	add	r3, pc, #204	; (adr r3, 8003a28 <__kernel_cos+0x170>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f7fc fc39 	bl	80001d4 <__adddf3>
 8003962:	4622      	mov	r2, r4
 8003964:	462b      	mov	r3, r5
 8003966:	f7fc fdeb 	bl	8000540 <__aeabi_dmul>
 800396a:	4622      	mov	r2, r4
 800396c:	462b      	mov	r3, r5
 800396e:	f7fc fde7 	bl	8000540 <__aeabi_dmul>
 8003972:	ec53 2b18 	vmov	r2, r3, d8
 8003976:	4604      	mov	r4, r0
 8003978:	460d      	mov	r5, r1
 800397a:	4640      	mov	r0, r8
 800397c:	4649      	mov	r1, r9
 800397e:	f7fc fddf 	bl	8000540 <__aeabi_dmul>
 8003982:	460b      	mov	r3, r1
 8003984:	4602      	mov	r2, r0
 8003986:	4629      	mov	r1, r5
 8003988:	4620      	mov	r0, r4
 800398a:	f7fc fc21 	bl	80001d0 <__aeabi_dsub>
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <__kernel_cos+0x17c>)
 8003990:	429e      	cmp	r6, r3
 8003992:	4680      	mov	r8, r0
 8003994:	4689      	mov	r9, r1
 8003996:	dc11      	bgt.n	80039bc <__kernel_cos+0x104>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4650      	mov	r0, sl
 800399e:	4659      	mov	r1, fp
 80039a0:	f7fc fc16 	bl	80001d0 <__aeabi_dsub>
 80039a4:	460b      	mov	r3, r1
 80039a6:	4924      	ldr	r1, [pc, #144]	; (8003a38 <__kernel_cos+0x180>)
 80039a8:	4602      	mov	r2, r0
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7fc fc10 	bl	80001d0 <__aeabi_dsub>
 80039b0:	ecbd 8b02 	vpop	{d8}
 80039b4:	ec41 0b10 	vmov	d0, r0, r1
 80039b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039bc:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <__kernel_cos+0x184>)
 80039be:	491e      	ldr	r1, [pc, #120]	; (8003a38 <__kernel_cos+0x180>)
 80039c0:	429e      	cmp	r6, r3
 80039c2:	bfcc      	ite	gt
 80039c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8003a40 <__kernel_cos+0x188>)
 80039c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80039ca:	2400      	movs	r4, #0
 80039cc:	4622      	mov	r2, r4
 80039ce:	462b      	mov	r3, r5
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7fc fbfd 	bl	80001d0 <__aeabi_dsub>
 80039d6:	4622      	mov	r2, r4
 80039d8:	4606      	mov	r6, r0
 80039da:	460f      	mov	r7, r1
 80039dc:	462b      	mov	r3, r5
 80039de:	4650      	mov	r0, sl
 80039e0:	4659      	mov	r1, fp
 80039e2:	f7fc fbf5 	bl	80001d0 <__aeabi_dsub>
 80039e6:	4642      	mov	r2, r8
 80039e8:	464b      	mov	r3, r9
 80039ea:	f7fc fbf1 	bl	80001d0 <__aeabi_dsub>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4630      	mov	r0, r6
 80039f4:	4639      	mov	r1, r7
 80039f6:	e7d9      	b.n	80039ac <__kernel_cos+0xf4>
 80039f8:	2000      	movs	r0, #0
 80039fa:	490f      	ldr	r1, [pc, #60]	; (8003a38 <__kernel_cos+0x180>)
 80039fc:	e7d8      	b.n	80039b0 <__kernel_cos+0xf8>
 80039fe:	bf00      	nop
 8003a00:	be8838d4 	.word	0xbe8838d4
 8003a04:	bda8fae9 	.word	0xbda8fae9
 8003a08:	bdb4b1c4 	.word	0xbdb4b1c4
 8003a0c:	3e21ee9e 	.word	0x3e21ee9e
 8003a10:	809c52ad 	.word	0x809c52ad
 8003a14:	3e927e4f 	.word	0x3e927e4f
 8003a18:	19cb1590 	.word	0x19cb1590
 8003a1c:	3efa01a0 	.word	0x3efa01a0
 8003a20:	16c15177 	.word	0x16c15177
 8003a24:	3f56c16c 	.word	0x3f56c16c
 8003a28:	5555554c 	.word	0x5555554c
 8003a2c:	3fa55555 	.word	0x3fa55555
 8003a30:	3fe00000 	.word	0x3fe00000
 8003a34:	3fd33332 	.word	0x3fd33332
 8003a38:	3ff00000 	.word	0x3ff00000
 8003a3c:	3fe90000 	.word	0x3fe90000
 8003a40:	3fd20000 	.word	0x3fd20000
 8003a44:	00000000 	.word	0x00000000

08003a48 <__kernel_rem_pio2>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	ed2d 8b02 	vpush	{d8}
 8003a50:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003a54:	1ed4      	subs	r4, r2, #3
 8003a56:	9308      	str	r3, [sp, #32]
 8003a58:	9101      	str	r1, [sp, #4]
 8003a5a:	4bc5      	ldr	r3, [pc, #788]	; (8003d70 <__kernel_rem_pio2+0x328>)
 8003a5c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003a5e:	9009      	str	r0, [sp, #36]	; 0x24
 8003a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	9b08      	ldr	r3, [sp, #32]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	9307      	str	r3, [sp, #28]
 8003a6c:	2318      	movs	r3, #24
 8003a6e:	fb94 f4f3 	sdiv	r4, r4, r3
 8003a72:	f06f 0317 	mvn.w	r3, #23
 8003a76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003a7a:	fb04 3303 	mla	r3, r4, r3, r3
 8003a7e:	eb03 0a02 	add.w	sl, r3, r2
 8003a82:	9b04      	ldr	r3, [sp, #16]
 8003a84:	9a07      	ldr	r2, [sp, #28]
 8003a86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003d60 <__kernel_rem_pio2+0x318>
 8003a8a:	eb03 0802 	add.w	r8, r3, r2
 8003a8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003a90:	1aa7      	subs	r7, r4, r2
 8003a92:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003a96:	ae22      	add	r6, sp, #136	; 0x88
 8003a98:	2500      	movs	r5, #0
 8003a9a:	4545      	cmp	r5, r8
 8003a9c:	dd13      	ble.n	8003ac6 <__kernel_rem_pio2+0x7e>
 8003a9e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8003d60 <__kernel_rem_pio2+0x318>
 8003aa2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	9b04      	ldr	r3, [sp, #16]
 8003aaa:	429e      	cmp	r6, r3
 8003aac:	dc32      	bgt.n	8003b14 <__kernel_rem_pio2+0xcc>
 8003aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab0:	9302      	str	r3, [sp, #8]
 8003ab2:	9b08      	ldr	r3, [sp, #32]
 8003ab4:	199d      	adds	r5, r3, r6
 8003ab6:	ab22      	add	r3, sp, #136	; 0x88
 8003ab8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003abc:	9306      	str	r3, [sp, #24]
 8003abe:	ec59 8b18 	vmov	r8, r9, d8
 8003ac2:	2700      	movs	r7, #0
 8003ac4:	e01f      	b.n	8003b06 <__kernel_rem_pio2+0xbe>
 8003ac6:	42ef      	cmn	r7, r5
 8003ac8:	d407      	bmi.n	8003ada <__kernel_rem_pio2+0x92>
 8003aca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003ace:	f7fc fccd 	bl	800046c <__aeabi_i2d>
 8003ad2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003ad6:	3501      	adds	r5, #1
 8003ad8:	e7df      	b.n	8003a9a <__kernel_rem_pio2+0x52>
 8003ada:	ec51 0b18 	vmov	r0, r1, d8
 8003ade:	e7f8      	b.n	8003ad2 <__kernel_rem_pio2+0x8a>
 8003ae0:	9906      	ldr	r1, [sp, #24]
 8003ae2:	9d02      	ldr	r5, [sp, #8]
 8003ae4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003ae8:	9106      	str	r1, [sp, #24]
 8003aea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003aee:	9502      	str	r5, [sp, #8]
 8003af0:	f7fc fd26 	bl	8000540 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4640      	mov	r0, r8
 8003afa:	4649      	mov	r1, r9
 8003afc:	f7fc fb6a 	bl	80001d4 <__adddf3>
 8003b00:	3701      	adds	r7, #1
 8003b02:	4680      	mov	r8, r0
 8003b04:	4689      	mov	r9, r1
 8003b06:	9b07      	ldr	r3, [sp, #28]
 8003b08:	429f      	cmp	r7, r3
 8003b0a:	dde9      	ble.n	8003ae0 <__kernel_rem_pio2+0x98>
 8003b0c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7c9      	b.n	8003aa8 <__kernel_rem_pio2+0x60>
 8003b14:	9b04      	ldr	r3, [sp, #16]
 8003b16:	aa0e      	add	r2, sp, #56	; 0x38
 8003b18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8003b1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003b20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003b24:	9c04      	ldr	r4, [sp, #16]
 8003b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b28:	ab9a      	add	r3, sp, #616	; 0x268
 8003b2a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8003b2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003b32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b36:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003b3a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8003b3e:	ab9a      	add	r3, sp, #616	; 0x268
 8003b40:	445b      	add	r3, fp
 8003b42:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8003b46:	2500      	movs	r5, #0
 8003b48:	1b63      	subs	r3, r4, r5
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	dc78      	bgt.n	8003c40 <__kernel_rem_pio2+0x1f8>
 8003b4e:	4650      	mov	r0, sl
 8003b50:	ec49 8b10 	vmov	d0, r8, r9
 8003b54:	f000 fe30 	bl	80047b8 <scalbn>
 8003b58:	ec57 6b10 	vmov	r6, r7, d0
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003b62:	ee10 0a10 	vmov	r0, s0
 8003b66:	4639      	mov	r1, r7
 8003b68:	f7fc fcea 	bl	8000540 <__aeabi_dmul>
 8003b6c:	ec41 0b10 	vmov	d0, r0, r1
 8003b70:	f000 fd9e 	bl	80046b0 <floor>
 8003b74:	2200      	movs	r2, #0
 8003b76:	ec51 0b10 	vmov	r0, r1, d0
 8003b7a:	4b7e      	ldr	r3, [pc, #504]	; (8003d74 <__kernel_rem_pio2+0x32c>)
 8003b7c:	f7fc fce0 	bl	8000540 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4630      	mov	r0, r6
 8003b86:	4639      	mov	r1, r7
 8003b88:	f7fc fb22 	bl	80001d0 <__aeabi_dsub>
 8003b8c:	460f      	mov	r7, r1
 8003b8e:	4606      	mov	r6, r0
 8003b90:	f7fc ff70 	bl	8000a74 <__aeabi_d2iz>
 8003b94:	9006      	str	r0, [sp, #24]
 8003b96:	f7fc fc69 	bl	800046c <__aeabi_i2d>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	4639      	mov	r1, r7
 8003ba2:	f7fc fb15 	bl	80001d0 <__aeabi_dsub>
 8003ba6:	f1ba 0f00 	cmp.w	sl, #0
 8003baa:	4606      	mov	r6, r0
 8003bac:	460f      	mov	r7, r1
 8003bae:	dd6c      	ble.n	8003c8a <__kernel_rem_pio2+0x242>
 8003bb0:	1e62      	subs	r2, r4, #1
 8003bb2:	ab0e      	add	r3, sp, #56	; 0x38
 8003bb4:	f1ca 0118 	rsb	r1, sl, #24
 8003bb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003bbc:	9d06      	ldr	r5, [sp, #24]
 8003bbe:	fa40 f301 	asr.w	r3, r0, r1
 8003bc2:	441d      	add	r5, r3
 8003bc4:	408b      	lsls	r3, r1
 8003bc6:	1ac0      	subs	r0, r0, r3
 8003bc8:	ab0e      	add	r3, sp, #56	; 0x38
 8003bca:	9506      	str	r5, [sp, #24]
 8003bcc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003bd0:	f1ca 0317 	rsb	r3, sl, #23
 8003bd4:	fa40 f303 	asr.w	r3, r0, r3
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	9b02      	ldr	r3, [sp, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dd62      	ble.n	8003ca6 <__kernel_rem_pio2+0x25e>
 8003be0:	9b06      	ldr	r3, [sp, #24]
 8003be2:	2200      	movs	r2, #0
 8003be4:	3301      	adds	r3, #1
 8003be6:	9306      	str	r3, [sp, #24]
 8003be8:	4615      	mov	r5, r2
 8003bea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003bee:	4294      	cmp	r4, r2
 8003bf0:	f300 8095 	bgt.w	8003d1e <__kernel_rem_pio2+0x2d6>
 8003bf4:	f1ba 0f00 	cmp.w	sl, #0
 8003bf8:	dd07      	ble.n	8003c0a <__kernel_rem_pio2+0x1c2>
 8003bfa:	f1ba 0f01 	cmp.w	sl, #1
 8003bfe:	f000 80a2 	beq.w	8003d46 <__kernel_rem_pio2+0x2fe>
 8003c02:	f1ba 0f02 	cmp.w	sl, #2
 8003c06:	f000 80c1 	beq.w	8003d8c <__kernel_rem_pio2+0x344>
 8003c0a:	9b02      	ldr	r3, [sp, #8]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d14a      	bne.n	8003ca6 <__kernel_rem_pio2+0x25e>
 8003c10:	4632      	mov	r2, r6
 8003c12:	463b      	mov	r3, r7
 8003c14:	2000      	movs	r0, #0
 8003c16:	4958      	ldr	r1, [pc, #352]	; (8003d78 <__kernel_rem_pio2+0x330>)
 8003c18:	f7fc fada 	bl	80001d0 <__aeabi_dsub>
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	460f      	mov	r7, r1
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	d040      	beq.n	8003ca6 <__kernel_rem_pio2+0x25e>
 8003c24:	4650      	mov	r0, sl
 8003c26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003d68 <__kernel_rem_pio2+0x320>
 8003c2a:	f000 fdc5 	bl	80047b8 <scalbn>
 8003c2e:	4630      	mov	r0, r6
 8003c30:	4639      	mov	r1, r7
 8003c32:	ec53 2b10 	vmov	r2, r3, d0
 8003c36:	f7fc facb 	bl	80001d0 <__aeabi_dsub>
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	460f      	mov	r7, r1
 8003c3e:	e032      	b.n	8003ca6 <__kernel_rem_pio2+0x25e>
 8003c40:	2200      	movs	r2, #0
 8003c42:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <__kernel_rem_pio2+0x334>)
 8003c44:	4640      	mov	r0, r8
 8003c46:	4649      	mov	r1, r9
 8003c48:	f7fc fc7a 	bl	8000540 <__aeabi_dmul>
 8003c4c:	f7fc ff12 	bl	8000a74 <__aeabi_d2iz>
 8003c50:	f7fc fc0c 	bl	800046c <__aeabi_i2d>
 8003c54:	2200      	movs	r2, #0
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <__kernel_rem_pio2+0x338>)
 8003c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c5c:	f7fc fc70 	bl	8000540 <__aeabi_dmul>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4640      	mov	r0, r8
 8003c66:	4649      	mov	r1, r9
 8003c68:	f7fc fab2 	bl	80001d0 <__aeabi_dsub>
 8003c6c:	f7fc ff02 	bl	8000a74 <__aeabi_d2iz>
 8003c70:	ab0e      	add	r3, sp, #56	; 0x38
 8003c72:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003c76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7e:	f7fc faa9 	bl	80001d4 <__adddf3>
 8003c82:	3501      	adds	r5, #1
 8003c84:	4680      	mov	r8, r0
 8003c86:	4689      	mov	r9, r1
 8003c88:	e75e      	b.n	8003b48 <__kernel_rem_pio2+0x100>
 8003c8a:	d105      	bne.n	8003c98 <__kernel_rem_pio2+0x250>
 8003c8c:	1e63      	subs	r3, r4, #1
 8003c8e:	aa0e      	add	r2, sp, #56	; 0x38
 8003c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c94:	15c3      	asrs	r3, r0, #23
 8003c96:	e79f      	b.n	8003bd8 <__kernel_rem_pio2+0x190>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <__kernel_rem_pio2+0x33c>)
 8003c9c:	f7fc fed6 	bl	8000a4c <__aeabi_dcmpge>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d139      	bne.n	8003d18 <__kernel_rem_pio2+0x2d0>
 8003ca4:	9002      	str	r0, [sp, #8]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4630      	mov	r0, r6
 8003cac:	4639      	mov	r1, r7
 8003cae:	f7fc feaf 	bl	8000a10 <__aeabi_dcmpeq>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	f000 80c7 	beq.w	8003e46 <__kernel_rem_pio2+0x3fe>
 8003cb8:	1e65      	subs	r5, r4, #1
 8003cba:	462b      	mov	r3, r5
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	9904      	ldr	r1, [sp, #16]
 8003cc0:	428b      	cmp	r3, r1
 8003cc2:	da6a      	bge.n	8003d9a <__kernel_rem_pio2+0x352>
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	f000 8088 	beq.w	8003dda <__kernel_rem_pio2+0x392>
 8003cca:	ab0e      	add	r3, sp, #56	; 0x38
 8003ccc:	f1aa 0a18 	sub.w	sl, sl, #24
 8003cd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80b4 	beq.w	8003e42 <__kernel_rem_pio2+0x3fa>
 8003cda:	4650      	mov	r0, sl
 8003cdc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003d68 <__kernel_rem_pio2+0x320>
 8003ce0:	f000 fd6a 	bl	80047b8 <scalbn>
 8003ce4:	00ec      	lsls	r4, r5, #3
 8003ce6:	ab72      	add	r3, sp, #456	; 0x1c8
 8003ce8:	191e      	adds	r6, r3, r4
 8003cea:	ec59 8b10 	vmov	r8, r9, d0
 8003cee:	f106 0a08 	add.w	sl, r6, #8
 8003cf2:	462f      	mov	r7, r5
 8003cf4:	2f00      	cmp	r7, #0
 8003cf6:	f280 80df 	bge.w	8003eb8 <__kernel_rem_pio2+0x470>
 8003cfa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8003d60 <__kernel_rem_pio2+0x318>
 8003cfe:	f04f 0a00 	mov.w	sl, #0
 8003d02:	eba5 030a 	sub.w	r3, r5, sl
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f2c0 810a 	blt.w	8003f20 <__kernel_rem_pio2+0x4d8>
 8003d0c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003d88 <__kernel_rem_pio2+0x340>
 8003d10:	ec59 8b18 	vmov	r8, r9, d8
 8003d14:	2700      	movs	r7, #0
 8003d16:	e0f5      	b.n	8003f04 <__kernel_rem_pio2+0x4bc>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	e760      	b.n	8003be0 <__kernel_rem_pio2+0x198>
 8003d1e:	ab0e      	add	r3, sp, #56	; 0x38
 8003d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d24:	b94d      	cbnz	r5, 8003d3a <__kernel_rem_pio2+0x2f2>
 8003d26:	b12b      	cbz	r3, 8003d34 <__kernel_rem_pio2+0x2ec>
 8003d28:	a80e      	add	r0, sp, #56	; 0x38
 8003d2a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003d2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003d32:	2301      	movs	r3, #1
 8003d34:	3201      	adds	r2, #1
 8003d36:	461d      	mov	r5, r3
 8003d38:	e759      	b.n	8003bee <__kernel_rem_pio2+0x1a6>
 8003d3a:	a80e      	add	r0, sp, #56	; 0x38
 8003d3c:	1acb      	subs	r3, r1, r3
 8003d3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003d42:	462b      	mov	r3, r5
 8003d44:	e7f6      	b.n	8003d34 <__kernel_rem_pio2+0x2ec>
 8003d46:	1e62      	subs	r2, r4, #1
 8003d48:	ab0e      	add	r3, sp, #56	; 0x38
 8003d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003d52:	a90e      	add	r1, sp, #56	; 0x38
 8003d54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003d58:	e757      	b.n	8003c0a <__kernel_rem_pio2+0x1c2>
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w
	...
 8003d6c:	3ff00000 	.word	0x3ff00000
 8003d70:	08004ad8 	.word	0x08004ad8
 8003d74:	40200000 	.word	0x40200000
 8003d78:	3ff00000 	.word	0x3ff00000
 8003d7c:	3e700000 	.word	0x3e700000
 8003d80:	41700000 	.word	0x41700000
 8003d84:	3fe00000 	.word	0x3fe00000
 8003d88:	08004a98 	.word	0x08004a98
 8003d8c:	1e62      	subs	r2, r4, #1
 8003d8e:	ab0e      	add	r3, sp, #56	; 0x38
 8003d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d98:	e7db      	b.n	8003d52 <__kernel_rem_pio2+0x30a>
 8003d9a:	a90e      	add	r1, sp, #56	; 0x38
 8003d9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	430a      	orrs	r2, r1
 8003da4:	e78b      	b.n	8003cbe <__kernel_rem_pio2+0x276>
 8003da6:	3301      	adds	r3, #1
 8003da8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003dac:	2900      	cmp	r1, #0
 8003dae:	d0fa      	beq.n	8003da6 <__kernel_rem_pio2+0x35e>
 8003db0:	9a08      	ldr	r2, [sp, #32]
 8003db2:	4422      	add	r2, r4
 8003db4:	00d2      	lsls	r2, r2, #3
 8003db6:	a922      	add	r1, sp, #136	; 0x88
 8003db8:	18e3      	adds	r3, r4, r3
 8003dba:	9206      	str	r2, [sp, #24]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	f10b 0108 	add.w	r1, fp, #8
 8003dc4:	f102 0308 	add.w	r3, r2, #8
 8003dc8:	1c66      	adds	r6, r4, #1
 8003dca:	910a      	str	r1, [sp, #40]	; 0x28
 8003dcc:	2500      	movs	r5, #0
 8003dce:	930d      	str	r3, [sp, #52]	; 0x34
 8003dd0:	9b02      	ldr	r3, [sp, #8]
 8003dd2:	42b3      	cmp	r3, r6
 8003dd4:	da04      	bge.n	8003de0 <__kernel_rem_pio2+0x398>
 8003dd6:	461c      	mov	r4, r3
 8003dd8:	e6a6      	b.n	8003b28 <__kernel_rem_pio2+0xe0>
 8003dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e7e3      	b.n	8003da8 <__kernel_rem_pio2+0x360>
 8003de0:	9b06      	ldr	r3, [sp, #24]
 8003de2:	18ef      	adds	r7, r5, r3
 8003de4:	ab22      	add	r3, sp, #136	; 0x88
 8003de6:	441f      	add	r7, r3
 8003de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003dee:	f7fc fb3d 	bl	800046c <__aeabi_i2d>
 8003df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df4:	461c      	mov	r4, r3
 8003df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003df8:	e9c7 0100 	strd	r0, r1, [r7]
 8003dfc:	eb03 0b05 	add.w	fp, r3, r5
 8003e00:	2700      	movs	r7, #0
 8003e02:	f04f 0800 	mov.w	r8, #0
 8003e06:	f04f 0900 	mov.w	r9, #0
 8003e0a:	9b07      	ldr	r3, [sp, #28]
 8003e0c:	429f      	cmp	r7, r3
 8003e0e:	dd08      	ble.n	8003e22 <__kernel_rem_pio2+0x3da>
 8003e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e12:	aa72      	add	r2, sp, #456	; 0x1c8
 8003e14:	18eb      	adds	r3, r5, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8003e1c:	3601      	adds	r6, #1
 8003e1e:	3508      	adds	r5, #8
 8003e20:	e7d6      	b.n	8003dd0 <__kernel_rem_pio2+0x388>
 8003e22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003e26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003e2a:	f7fc fb89 	bl	8000540 <__aeabi_dmul>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4640      	mov	r0, r8
 8003e34:	4649      	mov	r1, r9
 8003e36:	f7fc f9cd 	bl	80001d4 <__adddf3>
 8003e3a:	3701      	adds	r7, #1
 8003e3c:	4680      	mov	r8, r0
 8003e3e:	4689      	mov	r9, r1
 8003e40:	e7e3      	b.n	8003e0a <__kernel_rem_pio2+0x3c2>
 8003e42:	3d01      	subs	r5, #1
 8003e44:	e741      	b.n	8003cca <__kernel_rem_pio2+0x282>
 8003e46:	f1ca 0000 	rsb	r0, sl, #0
 8003e4a:	ec47 6b10 	vmov	d0, r6, r7
 8003e4e:	f000 fcb3 	bl	80047b8 <scalbn>
 8003e52:	ec57 6b10 	vmov	r6, r7, d0
 8003e56:	2200      	movs	r2, #0
 8003e58:	4b99      	ldr	r3, [pc, #612]	; (80040c0 <__kernel_rem_pio2+0x678>)
 8003e5a:	ee10 0a10 	vmov	r0, s0
 8003e5e:	4639      	mov	r1, r7
 8003e60:	f7fc fdf4 	bl	8000a4c <__aeabi_dcmpge>
 8003e64:	b1f8      	cbz	r0, 8003ea6 <__kernel_rem_pio2+0x45e>
 8003e66:	2200      	movs	r2, #0
 8003e68:	4b96      	ldr	r3, [pc, #600]	; (80040c4 <__kernel_rem_pio2+0x67c>)
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	f7fc fb67 	bl	8000540 <__aeabi_dmul>
 8003e72:	f7fc fdff 	bl	8000a74 <__aeabi_d2iz>
 8003e76:	4680      	mov	r8, r0
 8003e78:	f7fc faf8 	bl	800046c <__aeabi_i2d>
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4b90      	ldr	r3, [pc, #576]	; (80040c0 <__kernel_rem_pio2+0x678>)
 8003e80:	f7fc fb5e 	bl	8000540 <__aeabi_dmul>
 8003e84:	460b      	mov	r3, r1
 8003e86:	4602      	mov	r2, r0
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f7fc f9a0 	bl	80001d0 <__aeabi_dsub>
 8003e90:	f7fc fdf0 	bl	8000a74 <__aeabi_d2iz>
 8003e94:	1c65      	adds	r5, r4, #1
 8003e96:	ab0e      	add	r3, sp, #56	; 0x38
 8003e98:	f10a 0a18 	add.w	sl, sl, #24
 8003e9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003ea0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003ea4:	e719      	b.n	8003cda <__kernel_rem_pio2+0x292>
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	4639      	mov	r1, r7
 8003eaa:	f7fc fde3 	bl	8000a74 <__aeabi_d2iz>
 8003eae:	ab0e      	add	r3, sp, #56	; 0x38
 8003eb0:	4625      	mov	r5, r4
 8003eb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003eb6:	e710      	b.n	8003cda <__kernel_rem_pio2+0x292>
 8003eb8:	ab0e      	add	r3, sp, #56	; 0x38
 8003eba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003ebe:	f7fc fad5 	bl	800046c <__aeabi_i2d>
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	f7fc fb3b 	bl	8000540 <__aeabi_dmul>
 8003eca:	2200      	movs	r2, #0
 8003ecc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003ed0:	4b7c      	ldr	r3, [pc, #496]	; (80040c4 <__kernel_rem_pio2+0x67c>)
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	f7fc fb33 	bl	8000540 <__aeabi_dmul>
 8003eda:	3f01      	subs	r7, #1
 8003edc:	4680      	mov	r8, r0
 8003ede:	4689      	mov	r9, r1
 8003ee0:	e708      	b.n	8003cf4 <__kernel_rem_pio2+0x2ac>
 8003ee2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8003eee:	f7fc fb27 	bl	8000540 <__aeabi_dmul>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc f96b 	bl	80001d4 <__adddf3>
 8003efe:	3701      	adds	r7, #1
 8003f00:	4680      	mov	r8, r0
 8003f02:	4689      	mov	r9, r1
 8003f04:	9b04      	ldr	r3, [sp, #16]
 8003f06:	429f      	cmp	r7, r3
 8003f08:	dc01      	bgt.n	8003f0e <__kernel_rem_pio2+0x4c6>
 8003f0a:	45ba      	cmp	sl, r7
 8003f0c:	dae9      	bge.n	8003ee2 <__kernel_rem_pio2+0x49a>
 8003f0e:	ab4a      	add	r3, sp, #296	; 0x128
 8003f10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003f14:	e9c3 8900 	strd	r8, r9, [r3]
 8003f18:	f10a 0a01 	add.w	sl, sl, #1
 8003f1c:	3e08      	subs	r6, #8
 8003f1e:	e6f0      	b.n	8003d02 <__kernel_rem_pio2+0x2ba>
 8003f20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d85b      	bhi.n	8003fde <__kernel_rem_pio2+0x596>
 8003f26:	e8df f003 	tbb	[pc, r3]
 8003f2a:	264a      	.short	0x264a
 8003f2c:	0226      	.short	0x0226
 8003f2e:	ab9a      	add	r3, sp, #616	; 0x268
 8003f30:	441c      	add	r4, r3
 8003f32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003f36:	46a2      	mov	sl, r4
 8003f38:	46ab      	mov	fp, r5
 8003f3a:	f1bb 0f00 	cmp.w	fp, #0
 8003f3e:	dc6c      	bgt.n	800401a <__kernel_rem_pio2+0x5d2>
 8003f40:	46a2      	mov	sl, r4
 8003f42:	46ab      	mov	fp, r5
 8003f44:	f1bb 0f01 	cmp.w	fp, #1
 8003f48:	f300 8086 	bgt.w	8004058 <__kernel_rem_pio2+0x610>
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	2100      	movs	r1, #0
 8003f50:	2d01      	cmp	r5, #1
 8003f52:	f300 80a0 	bgt.w	8004096 <__kernel_rem_pio2+0x64e>
 8003f56:	9b02      	ldr	r3, [sp, #8]
 8003f58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003f5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 809e 	bne.w	80040a2 <__kernel_rem_pio2+0x65a>
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	e9c3 7800 	strd	r7, r8, [r3]
 8003f6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003f70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003f74:	e033      	b.n	8003fde <__kernel_rem_pio2+0x596>
 8003f76:	3408      	adds	r4, #8
 8003f78:	ab4a      	add	r3, sp, #296	; 0x128
 8003f7a:	441c      	add	r4, r3
 8003f7c:	462e      	mov	r6, r5
 8003f7e:	2000      	movs	r0, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	2e00      	cmp	r6, #0
 8003f84:	da3a      	bge.n	8003ffc <__kernel_rem_pio2+0x5b4>
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d03d      	beq.n	8004008 <__kernel_rem_pio2+0x5c0>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f92:	9c01      	ldr	r4, [sp, #4]
 8003f94:	e9c4 2300 	strd	r2, r3, [r4]
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003fa0:	f7fc f916 	bl	80001d0 <__aeabi_dsub>
 8003fa4:	ae4c      	add	r6, sp, #304	; 0x130
 8003fa6:	2401      	movs	r4, #1
 8003fa8:	42a5      	cmp	r5, r4
 8003faa:	da30      	bge.n	800400e <__kernel_rem_pio2+0x5c6>
 8003fac:	9b02      	ldr	r3, [sp, #8]
 8003fae:	b113      	cbz	r3, 8003fb6 <__kernel_rem_pio2+0x56e>
 8003fb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	9b01      	ldr	r3, [sp, #4]
 8003fb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003fbc:	e00f      	b.n	8003fde <__kernel_rem_pio2+0x596>
 8003fbe:	ab9a      	add	r3, sp, #616	; 0x268
 8003fc0:	441c      	add	r4, r3
 8003fc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2d00      	cmp	r5, #0
 8003fcc:	da10      	bge.n	8003ff0 <__kernel_rem_pio2+0x5a8>
 8003fce:	9b02      	ldr	r3, [sp, #8]
 8003fd0:	b113      	cbz	r3, 8003fd8 <__kernel_rem_pio2+0x590>
 8003fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	9b01      	ldr	r3, [sp, #4]
 8003fda:	e9c3 0100 	strd	r0, r1, [r3]
 8003fde:	9b06      	ldr	r3, [sp, #24]
 8003fe0:	f003 0007 	and.w	r0, r3, #7
 8003fe4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003fe8:	ecbd 8b02 	vpop	{d8}
 8003fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ff4:	f7fc f8ee 	bl	80001d4 <__adddf3>
 8003ff8:	3d01      	subs	r5, #1
 8003ffa:	e7e6      	b.n	8003fca <__kernel_rem_pio2+0x582>
 8003ffc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004000:	f7fc f8e8 	bl	80001d4 <__adddf3>
 8004004:	3e01      	subs	r6, #1
 8004006:	e7bc      	b.n	8003f82 <__kernel_rem_pio2+0x53a>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	e7c1      	b.n	8003f92 <__kernel_rem_pio2+0x54a>
 800400e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004012:	f7fc f8df 	bl	80001d4 <__adddf3>
 8004016:	3401      	adds	r4, #1
 8004018:	e7c6      	b.n	8003fa8 <__kernel_rem_pio2+0x560>
 800401a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800401e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004022:	4640      	mov	r0, r8
 8004024:	ec53 2b17 	vmov	r2, r3, d7
 8004028:	4649      	mov	r1, r9
 800402a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800402e:	f7fc f8d1 	bl	80001d4 <__adddf3>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4606      	mov	r6, r0
 8004038:	460f      	mov	r7, r1
 800403a:	4640      	mov	r0, r8
 800403c:	4649      	mov	r1, r9
 800403e:	f7fc f8c7 	bl	80001d0 <__aeabi_dsub>
 8004042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004046:	f7fc f8c5 	bl	80001d4 <__adddf3>
 800404a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800404e:	e9ca 0100 	strd	r0, r1, [sl]
 8004052:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8004056:	e770      	b.n	8003f3a <__kernel_rem_pio2+0x4f2>
 8004058:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800405c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004060:	4630      	mov	r0, r6
 8004062:	ec53 2b17 	vmov	r2, r3, d7
 8004066:	4639      	mov	r1, r7
 8004068:	ed8d 7b04 	vstr	d7, [sp, #16]
 800406c:	f7fc f8b2 	bl	80001d4 <__adddf3>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4680      	mov	r8, r0
 8004076:	4689      	mov	r9, r1
 8004078:	4630      	mov	r0, r6
 800407a:	4639      	mov	r1, r7
 800407c:	f7fc f8a8 	bl	80001d0 <__aeabi_dsub>
 8004080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004084:	f7fc f8a6 	bl	80001d4 <__adddf3>
 8004088:	f10b 3bff 	add.w	fp, fp, #4294967295
 800408c:	e9ca 0100 	strd	r0, r1, [sl]
 8004090:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8004094:	e756      	b.n	8003f44 <__kernel_rem_pio2+0x4fc>
 8004096:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800409a:	f7fc f89b 	bl	80001d4 <__adddf3>
 800409e:	3d01      	subs	r5, #1
 80040a0:	e756      	b.n	8003f50 <__kernel_rem_pio2+0x508>
 80040a2:	9b01      	ldr	r3, [sp, #4]
 80040a4:	9a01      	ldr	r2, [sp, #4]
 80040a6:	601f      	str	r7, [r3, #0]
 80040a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80040ac:	605c      	str	r4, [r3, #4]
 80040ae:	609d      	str	r5, [r3, #8]
 80040b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80040b4:	60d3      	str	r3, [r2, #12]
 80040b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040ba:	6110      	str	r0, [r2, #16]
 80040bc:	6153      	str	r3, [r2, #20]
 80040be:	e78e      	b.n	8003fde <__kernel_rem_pio2+0x596>
 80040c0:	41700000 	.word	0x41700000
 80040c4:	3e700000 	.word	0x3e700000

080040c8 <__kernel_sin>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	ec55 4b10 	vmov	r4, r5, d0
 80040d0:	b085      	sub	sp, #20
 80040d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80040d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80040da:	ed8d 1b00 	vstr	d1, [sp]
 80040de:	9002      	str	r0, [sp, #8]
 80040e0:	da06      	bge.n	80040f0 <__kernel_sin+0x28>
 80040e2:	ee10 0a10 	vmov	r0, s0
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7fc fcc4 	bl	8000a74 <__aeabi_d2iz>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d051      	beq.n	8004194 <__kernel_sin+0xcc>
 80040f0:	4622      	mov	r2, r4
 80040f2:	462b      	mov	r3, r5
 80040f4:	4620      	mov	r0, r4
 80040f6:	4629      	mov	r1, r5
 80040f8:	f7fc fa22 	bl	8000540 <__aeabi_dmul>
 80040fc:	4682      	mov	sl, r0
 80040fe:	468b      	mov	fp, r1
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4620      	mov	r0, r4
 8004106:	4629      	mov	r1, r5
 8004108:	f7fc fa1a 	bl	8000540 <__aeabi_dmul>
 800410c:	a341      	add	r3, pc, #260	; (adr r3, 8004214 <__kernel_sin+0x14c>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	4680      	mov	r8, r0
 8004114:	4689      	mov	r9, r1
 8004116:	4650      	mov	r0, sl
 8004118:	4659      	mov	r1, fp
 800411a:	f7fc fa11 	bl	8000540 <__aeabi_dmul>
 800411e:	a33f      	add	r3, pc, #252	; (adr r3, 800421c <__kernel_sin+0x154>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc f854 	bl	80001d0 <__aeabi_dsub>
 8004128:	4652      	mov	r2, sl
 800412a:	465b      	mov	r3, fp
 800412c:	f7fc fa08 	bl	8000540 <__aeabi_dmul>
 8004130:	a33c      	add	r3, pc, #240	; (adr r3, 8004224 <__kernel_sin+0x15c>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc f84d 	bl	80001d4 <__adddf3>
 800413a:	4652      	mov	r2, sl
 800413c:	465b      	mov	r3, fp
 800413e:	f7fc f9ff 	bl	8000540 <__aeabi_dmul>
 8004142:	a33a      	add	r3, pc, #232	; (adr r3, 800422c <__kernel_sin+0x164>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f7fc f842 	bl	80001d0 <__aeabi_dsub>
 800414c:	4652      	mov	r2, sl
 800414e:	465b      	mov	r3, fp
 8004150:	f7fc f9f6 	bl	8000540 <__aeabi_dmul>
 8004154:	a337      	add	r3, pc, #220	; (adr r3, 8004234 <__kernel_sin+0x16c>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc f83b 	bl	80001d4 <__adddf3>
 800415e:	9b02      	ldr	r3, [sp, #8]
 8004160:	4606      	mov	r6, r0
 8004162:	460f      	mov	r7, r1
 8004164:	b9db      	cbnz	r3, 800419e <__kernel_sin+0xd6>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4650      	mov	r0, sl
 800416c:	4659      	mov	r1, fp
 800416e:	f7fc f9e7 	bl	8000540 <__aeabi_dmul>
 8004172:	a325      	add	r3, pc, #148	; (adr r3, 8004208 <__kernel_sin+0x140>)
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f7fc f82a 	bl	80001d0 <__aeabi_dsub>
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	f7fc f9de 	bl	8000540 <__aeabi_dmul>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4620      	mov	r0, r4
 800418a:	4629      	mov	r1, r5
 800418c:	f7fc f822 	bl	80001d4 <__adddf3>
 8004190:	4604      	mov	r4, r0
 8004192:	460d      	mov	r5, r1
 8004194:	ec45 4b10 	vmov	d0, r4, r5
 8004198:	b005      	add	sp, #20
 800419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419e:	2200      	movs	r2, #0
 80041a0:	4b1b      	ldr	r3, [pc, #108]	; (8004210 <__kernel_sin+0x148>)
 80041a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041a6:	f7fc f9cb 	bl	8000540 <__aeabi_dmul>
 80041aa:	4632      	mov	r2, r6
 80041ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041b0:	463b      	mov	r3, r7
 80041b2:	4640      	mov	r0, r8
 80041b4:	4649      	mov	r1, r9
 80041b6:	f7fc f9c3 	bl	8000540 <__aeabi_dmul>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041c2:	f7fc f805 	bl	80001d0 <__aeabi_dsub>
 80041c6:	4652      	mov	r2, sl
 80041c8:	465b      	mov	r3, fp
 80041ca:	f7fc f9b9 	bl	8000540 <__aeabi_dmul>
 80041ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041d2:	f7fb fffd 	bl	80001d0 <__aeabi_dsub>
 80041d6:	a30c      	add	r3, pc, #48	; (adr r3, 8004208 <__kernel_sin+0x140>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	4606      	mov	r6, r0
 80041de:	460f      	mov	r7, r1
 80041e0:	4640      	mov	r0, r8
 80041e2:	4649      	mov	r1, r9
 80041e4:	f7fc f9ac 	bl	8000540 <__aeabi_dmul>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4630      	mov	r0, r6
 80041ee:	4639      	mov	r1, r7
 80041f0:	f7fb fff0 	bl	80001d4 <__adddf3>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4620      	mov	r0, r4
 80041fa:	4629      	mov	r1, r5
 80041fc:	f7fb ffe8 	bl	80001d0 <__aeabi_dsub>
 8004200:	e7c6      	b.n	8004190 <__kernel_sin+0xc8>
 8004202:	bf00      	nop
 8004204:	f3af 8000 	nop.w
 8004208:	55555549 	.word	0x55555549
 800420c:	3fc55555 	.word	0x3fc55555
 8004210:	3fe00000 	.word	0x3fe00000
 8004214:	5acfd57c 	.word	0x5acfd57c
 8004218:	3de5d93a 	.word	0x3de5d93a
 800421c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004220:	3e5ae5e6 	.word	0x3e5ae5e6
 8004224:	57b1fe7d 	.word	0x57b1fe7d
 8004228:	3ec71de3 	.word	0x3ec71de3
 800422c:	19c161d5 	.word	0x19c161d5
 8004230:	3f2a01a0 	.word	0x3f2a01a0
 8004234:	1110f8a6 	.word	0x1110f8a6
 8004238:	3f811111 	.word	0x3f811111
 800423c:	00000000 	.word	0x00000000

08004240 <expm1>:
 8004240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	ec55 4b10 	vmov	r4, r5, d0
 8004248:	4ad5      	ldr	r2, [pc, #852]	; (80045a0 <expm1+0x360>)
 800424a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800424e:	4293      	cmp	r3, r2
 8004250:	462e      	mov	r6, r5
 8004252:	d94b      	bls.n	80042ec <expm1+0xac>
 8004254:	4ad3      	ldr	r2, [pc, #844]	; (80045a4 <expm1+0x364>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f240 820c 	bls.w	8004674 <expm1+0x434>
 800425c:	4ad2      	ldr	r2, [pc, #840]	; (80045a8 <expm1+0x368>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d910      	bls.n	8004284 <expm1+0x44>
 8004262:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004266:	4323      	orrs	r3, r4
 8004268:	ee10 2a10 	vmov	r2, s0
 800426c:	d005      	beq.n	800427a <expm1+0x3a>
 800426e:	462b      	mov	r3, r5
 8004270:	4620      	mov	r0, r4
 8004272:	4629      	mov	r1, r5
 8004274:	f7fb ffae 	bl	80001d4 <__adddf3>
 8004278:	e016      	b.n	80042a8 <expm1+0x68>
 800427a:	2d00      	cmp	r5, #0
 800427c:	da16      	bge.n	80042ac <expm1+0x6c>
 800427e:	2400      	movs	r4, #0
 8004280:	4dca      	ldr	r5, [pc, #808]	; (80045ac <expm1+0x36c>)
 8004282:	e013      	b.n	80042ac <expm1+0x6c>
 8004284:	a3ae      	add	r3, pc, #696	; (adr r3, 8004540 <expm1+0x300>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	ee10 0a10 	vmov	r0, s0
 800428e:	4629      	mov	r1, r5
 8004290:	f7fc fbe6 	bl	8000a60 <__aeabi_dcmpgt>
 8004294:	2800      	cmp	r0, #0
 8004296:	f000 81ed 	beq.w	8004674 <expm1+0x434>
 800429a:	a3ab      	add	r3, pc, #684	; (adr r3, 8004548 <expm1+0x308>)
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7fc f94c 	bl	8000540 <__aeabi_dmul>
 80042a8:	4604      	mov	r4, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	ec45 4b10 	vmov	d0, r4, r5
 80042b0:	b004      	add	sp, #16
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004550 <expm1+0x310>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	4620      	mov	r0, r4
 80042be:	4629      	mov	r1, r5
 80042c0:	f7fb ff88 	bl	80001d4 <__adddf3>
 80042c4:	2200      	movs	r2, #0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f7fc fbac 	bl	8000a24 <__aeabi_dcmplt>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d1d6      	bne.n	800427e <expm1+0x3e>
 80042d0:	a3a1      	add	r3, pc, #644	; (adr r3, 8004558 <expm1+0x318>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	4620      	mov	r0, r4
 80042d8:	4629      	mov	r1, r5
 80042da:	f7fc f931 	bl	8000540 <__aeabi_dmul>
 80042de:	2e00      	cmp	r6, #0
 80042e0:	f04f 0600 	mov.w	r6, #0
 80042e4:	f2c0 80b0 	blt.w	8004448 <expm1+0x208>
 80042e8:	4fb1      	ldr	r7, [pc, #708]	; (80045b0 <expm1+0x370>)
 80042ea:	e0ae      	b.n	800444a <expm1+0x20a>
 80042ec:	4ab1      	ldr	r2, [pc, #708]	; (80045b4 <expm1+0x374>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f240 80cf 	bls.w	8004492 <expm1+0x252>
 80042f4:	4ab0      	ldr	r2, [pc, #704]	; (80045b8 <expm1+0x378>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d8ea      	bhi.n	80042d0 <expm1+0x90>
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	a398      	add	r3, pc, #608	; (adr r3, 8004560 <expm1+0x320>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	ee10 0a10 	vmov	r0, s0
 8004306:	4629      	mov	r1, r5
 8004308:	f2c0 8094 	blt.w	8004434 <expm1+0x1f4>
 800430c:	f7fb ff60 	bl	80001d0 <__aeabi_dsub>
 8004310:	a795      	add	r7, pc, #596	; (adr r7, 8004568 <expm1+0x328>)
 8004312:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004316:	4680      	mov	r8, r0
 8004318:	4689      	mov	r9, r1
 800431a:	f04f 0a01 	mov.w	sl, #1
 800431e:	4632      	mov	r2, r6
 8004320:	463b      	mov	r3, r7
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fb ff53 	bl	80001d0 <__aeabi_dsub>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4604      	mov	r4, r0
 8004330:	460d      	mov	r5, r1
 8004332:	4640      	mov	r0, r8
 8004334:	4649      	mov	r1, r9
 8004336:	f7fb ff4b 	bl	80001d0 <__aeabi_dsub>
 800433a:	4632      	mov	r2, r6
 800433c:	463b      	mov	r3, r7
 800433e:	f7fb ff47 	bl	80001d0 <__aeabi_dsub>
 8004342:	e9cd 0100 	strd	r0, r1, [sp]
 8004346:	2200      	movs	r2, #0
 8004348:	4b99      	ldr	r3, [pc, #612]	; (80045b0 <expm1+0x370>)
 800434a:	4620      	mov	r0, r4
 800434c:	4629      	mov	r1, r5
 800434e:	f7fc f8f7 	bl	8000540 <__aeabi_dmul>
 8004352:	4606      	mov	r6, r0
 8004354:	460f      	mov	r7, r1
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fc f8ef 	bl	8000540 <__aeabi_dmul>
 8004362:	a383      	add	r3, pc, #524	; (adr r3, 8004570 <expm1+0x330>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	4680      	mov	r8, r0
 800436a:	4689      	mov	r9, r1
 800436c:	f7fc f8e8 	bl	8000540 <__aeabi_dmul>
 8004370:	a381      	add	r3, pc, #516	; (adr r3, 8004578 <expm1+0x338>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f7fb ff2d 	bl	80001d4 <__adddf3>
 800437a:	4642      	mov	r2, r8
 800437c:	464b      	mov	r3, r9
 800437e:	f7fc f8df 	bl	8000540 <__aeabi_dmul>
 8004382:	a37f      	add	r3, pc, #508	; (adr r3, 8004580 <expm1+0x340>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fb ff22 	bl	80001d0 <__aeabi_dsub>
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	f7fc f8d6 	bl	8000540 <__aeabi_dmul>
 8004394:	a37c      	add	r3, pc, #496	; (adr r3, 8004588 <expm1+0x348>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fb ff1b 	bl	80001d4 <__adddf3>
 800439e:	4642      	mov	r2, r8
 80043a0:	464b      	mov	r3, r9
 80043a2:	f7fc f8cd 	bl	8000540 <__aeabi_dmul>
 80043a6:	a37a      	add	r3, pc, #488	; (adr r3, 8004590 <expm1+0x350>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fb ff10 	bl	80001d0 <__aeabi_dsub>
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	f7fc f8c4 	bl	8000540 <__aeabi_dmul>
 80043b8:	2200      	movs	r2, #0
 80043ba:	4b80      	ldr	r3, [pc, #512]	; (80045bc <expm1+0x37c>)
 80043bc:	f7fb ff0a 	bl	80001d4 <__adddf3>
 80043c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4630      	mov	r0, r6
 80043ca:	4639      	mov	r1, r7
 80043cc:	f7fc f8b8 	bl	8000540 <__aeabi_dmul>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	2000      	movs	r0, #0
 80043d6:	497a      	ldr	r1, [pc, #488]	; (80045c0 <expm1+0x380>)
 80043d8:	f7fb fefa 	bl	80001d0 <__aeabi_dsub>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4606      	mov	r6, r0
 80043e2:	460f      	mov	r7, r1
 80043e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043e8:	f7fb fef2 	bl	80001d0 <__aeabi_dsub>
 80043ec:	4632      	mov	r2, r6
 80043ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043f2:	463b      	mov	r3, r7
 80043f4:	4620      	mov	r0, r4
 80043f6:	4629      	mov	r1, r5
 80043f8:	f7fc f8a2 	bl	8000540 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	2000      	movs	r0, #0
 8004402:	4970      	ldr	r1, [pc, #448]	; (80045c4 <expm1+0x384>)
 8004404:	f7fb fee4 	bl	80001d0 <__aeabi_dsub>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004410:	f7fc f9c0 	bl	8000794 <__aeabi_ddiv>
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	f7fc f892 	bl	8000540 <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	f1ba 0f00 	cmp.w	sl, #0
 8004424:	d14e      	bne.n	80044c4 <expm1+0x284>
 8004426:	4620      	mov	r0, r4
 8004428:	4629      	mov	r1, r5
 800442a:	f7fc f889 	bl	8000540 <__aeabi_dmul>
 800442e:	4642      	mov	r2, r8
 8004430:	464b      	mov	r3, r9
 8004432:	e03b      	b.n	80044ac <expm1+0x26c>
 8004434:	f7fb fece 	bl	80001d4 <__adddf3>
 8004438:	f04f 3aff 	mov.w	sl, #4294967295
 800443c:	4680      	mov	r8, r0
 800443e:	4689      	mov	r9, r1
 8004440:	a755      	add	r7, pc, #340	; (adr r7, 8004598 <expm1+0x358>)
 8004442:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004446:	e76a      	b.n	800431e <expm1+0xde>
 8004448:	4f5f      	ldr	r7, [pc, #380]	; (80045c8 <expm1+0x388>)
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4630      	mov	r0, r6
 8004450:	4639      	mov	r1, r7
 8004452:	f7fb febf 	bl	80001d4 <__adddf3>
 8004456:	f7fc fb0d 	bl	8000a74 <__aeabi_d2iz>
 800445a:	4682      	mov	sl, r0
 800445c:	f7fc f806 	bl	800046c <__aeabi_i2d>
 8004460:	a33f      	add	r3, pc, #252	; (adr r3, 8004560 <expm1+0x320>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	4606      	mov	r6, r0
 8004468:	460f      	mov	r7, r1
 800446a:	f7fc f869 	bl	8000540 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fb feab 	bl	80001d0 <__aeabi_dsub>
 800447a:	a33b      	add	r3, pc, #236	; (adr r3, 8004568 <expm1+0x328>)
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	4680      	mov	r8, r0
 8004482:	4689      	mov	r9, r1
 8004484:	4630      	mov	r0, r6
 8004486:	4639      	mov	r1, r7
 8004488:	f7fc f85a 	bl	8000540 <__aeabi_dmul>
 800448c:	4606      	mov	r6, r0
 800448e:	460f      	mov	r7, r1
 8004490:	e745      	b.n	800431e <expm1+0xde>
 8004492:	4a4e      	ldr	r2, [pc, #312]	; (80045cc <expm1+0x38c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d812      	bhi.n	80044be <expm1+0x27e>
 8004498:	a32b      	add	r3, pc, #172	; (adr r3, 8004548 <expm1+0x308>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	ee10 0a10 	vmov	r0, s0
 80044a2:	4629      	mov	r1, r5
 80044a4:	f7fb fe96 	bl	80001d4 <__adddf3>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	f7fb fe90 	bl	80001d0 <__aeabi_dsub>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fb fe8a 	bl	80001d0 <__aeabi_dsub>
 80044bc:	e6f4      	b.n	80042a8 <expm1+0x68>
 80044be:	f04f 0a00 	mov.w	sl, #0
 80044c2:	e740      	b.n	8004346 <expm1+0x106>
 80044c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044c8:	f7fb fe82 	bl	80001d0 <__aeabi_dsub>
 80044cc:	4622      	mov	r2, r4
 80044ce:	462b      	mov	r3, r5
 80044d0:	f7fc f836 	bl	8000540 <__aeabi_dmul>
 80044d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044d8:	f7fb fe7a 	bl	80001d0 <__aeabi_dsub>
 80044dc:	4642      	mov	r2, r8
 80044de:	464b      	mov	r3, r9
 80044e0:	f7fb fe76 	bl	80001d0 <__aeabi_dsub>
 80044e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80044e8:	4606      	mov	r6, r0
 80044ea:	460f      	mov	r7, r1
 80044ec:	d10c      	bne.n	8004508 <expm1+0x2c8>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4620      	mov	r0, r4
 80044f4:	4629      	mov	r1, r5
 80044f6:	f7fb fe6b 	bl	80001d0 <__aeabi_dsub>
 80044fa:	2200      	movs	r2, #0
 80044fc:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <expm1+0x370>)
 80044fe:	f7fc f81f 	bl	8000540 <__aeabi_dmul>
 8004502:	2200      	movs	r2, #0
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <expm1+0x370>)
 8004506:	e7d7      	b.n	80044b8 <expm1+0x278>
 8004508:	f1ba 0f01 	cmp.w	sl, #1
 800450c:	d16f      	bne.n	80045ee <expm1+0x3ae>
 800450e:	2200      	movs	r2, #0
 8004510:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <expm1+0x390>)
 8004512:	4620      	mov	r0, r4
 8004514:	4629      	mov	r1, r5
 8004516:	f7fc fa85 	bl	8000a24 <__aeabi_dcmplt>
 800451a:	2800      	cmp	r0, #0
 800451c:	d05a      	beq.n	80045d4 <expm1+0x394>
 800451e:	2200      	movs	r2, #0
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <expm1+0x370>)
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fb fe55 	bl	80001d4 <__adddf3>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4630      	mov	r0, r6
 8004530:	4639      	mov	r1, r7
 8004532:	f7fb fe4d 	bl	80001d0 <__aeabi_dsub>
 8004536:	2200      	movs	r2, #0
 8004538:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800453c:	e6b2      	b.n	80042a4 <expm1+0x64>
 800453e:	bf00      	nop
 8004540:	fefa39ef 	.word	0xfefa39ef
 8004544:	40862e42 	.word	0x40862e42
 8004548:	8800759c 	.word	0x8800759c
 800454c:	7e37e43c 	.word	0x7e37e43c
 8004550:	c2f8f359 	.word	0xc2f8f359
 8004554:	01a56e1f 	.word	0x01a56e1f
 8004558:	652b82fe 	.word	0x652b82fe
 800455c:	3ff71547 	.word	0x3ff71547
 8004560:	fee00000 	.word	0xfee00000
 8004564:	3fe62e42 	.word	0x3fe62e42
 8004568:	35793c76 	.word	0x35793c76
 800456c:	3dea39ef 	.word	0x3dea39ef
 8004570:	6e09c32d 	.word	0x6e09c32d
 8004574:	be8afdb7 	.word	0xbe8afdb7
 8004578:	86e65239 	.word	0x86e65239
 800457c:	3ed0cfca 	.word	0x3ed0cfca
 8004580:	9eaadbb7 	.word	0x9eaadbb7
 8004584:	3f14ce19 	.word	0x3f14ce19
 8004588:	19fe5585 	.word	0x19fe5585
 800458c:	3f5a01a0 	.word	0x3f5a01a0
 8004590:	111110f4 	.word	0x111110f4
 8004594:	3fa11111 	.word	0x3fa11111
 8004598:	35793c76 	.word	0x35793c76
 800459c:	bdea39ef 	.word	0xbdea39ef
 80045a0:	40436879 	.word	0x40436879
 80045a4:	40862e41 	.word	0x40862e41
 80045a8:	7fefffff 	.word	0x7fefffff
 80045ac:	bff00000 	.word	0xbff00000
 80045b0:	3fe00000 	.word	0x3fe00000
 80045b4:	3fd62e42 	.word	0x3fd62e42
 80045b8:	3ff0a2b1 	.word	0x3ff0a2b1
 80045bc:	3ff00000 	.word	0x3ff00000
 80045c0:	40080000 	.word	0x40080000
 80045c4:	40180000 	.word	0x40180000
 80045c8:	bfe00000 	.word	0xbfe00000
 80045cc:	3c8fffff 	.word	0x3c8fffff
 80045d0:	bfd00000 	.word	0xbfd00000
 80045d4:	4632      	mov	r2, r6
 80045d6:	463b      	mov	r3, r7
 80045d8:	4620      	mov	r0, r4
 80045da:	4629      	mov	r1, r5
 80045dc:	f7fb fdf8 	bl	80001d0 <__aeabi_dsub>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	f7fb fdf6 	bl	80001d4 <__adddf3>
 80045e8:	2200      	movs	r2, #0
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <expm1+0x458>)
 80045ec:	e642      	b.n	8004274 <expm1+0x34>
 80045ee:	f10a 0301 	add.w	r3, sl, #1
 80045f2:	2b39      	cmp	r3, #57	; 0x39
 80045f4:	ea4f 560a 	mov.w	r6, sl, lsl #20
 80045f8:	d90e      	bls.n	8004618 <expm1+0x3d8>
 80045fa:	4622      	mov	r2, r4
 80045fc:	462b      	mov	r3, r5
 80045fe:	f7fb fde7 	bl	80001d0 <__aeabi_dsub>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	2000      	movs	r0, #0
 8004608:	4923      	ldr	r1, [pc, #140]	; (8004698 <expm1+0x458>)
 800460a:	f7fb fde1 	bl	80001d0 <__aeabi_dsub>
 800460e:	1873      	adds	r3, r6, r1
 8004610:	4619      	mov	r1, r3
 8004612:	2200      	movs	r2, #0
 8004614:	4b20      	ldr	r3, [pc, #128]	; (8004698 <expm1+0x458>)
 8004616:	e74f      	b.n	80044b8 <expm1+0x278>
 8004618:	f1ba 0f13 	cmp.w	sl, #19
 800461c:	dc16      	bgt.n	800464c <expm1+0x40c>
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8004626:	f7fb fdd3 	bl	80001d0 <__aeabi_dsub>
 800462a:	fa47 fa0a 	asr.w	sl, r7, sl
 800462e:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 8004632:	f04f 0800 	mov.w	r8, #0
 8004636:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4640      	mov	r0, r8
 8004640:	4649      	mov	r1, r9
 8004642:	f7fb fdc5 	bl	80001d0 <__aeabi_dsub>
 8004646:	4604      	mov	r4, r0
 8004648:	1875      	adds	r5, r6, r1
 800464a:	e62f      	b.n	80042ac <expm1+0x6c>
 800464c:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 8004650:	f10a 0a03 	add.w	sl, sl, #3
 8004654:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8004658:	2200      	movs	r2, #0
 800465a:	f7fb fdbb 	bl	80001d4 <__adddf3>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4620      	mov	r0, r4
 8004664:	4629      	mov	r1, r5
 8004666:	f7fb fdb3 	bl	80001d0 <__aeabi_dsub>
 800466a:	2200      	movs	r2, #0
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <expm1+0x458>)
 800466e:	f7fb fdb1 	bl	80001d4 <__adddf3>
 8004672:	e7e8      	b.n	8004646 <expm1+0x406>
 8004674:	2e00      	cmp	r6, #0
 8004676:	f6ff ae1e 	blt.w	80042b6 <expm1+0x76>
 800467a:	a305      	add	r3, pc, #20	; (adr r3, 8004690 <expm1+0x450>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	4620      	mov	r0, r4
 8004682:	4629      	mov	r1, r5
 8004684:	f7fb ff5c 	bl	8000540 <__aeabi_dmul>
 8004688:	2600      	movs	r6, #0
 800468a:	e62d      	b.n	80042e8 <expm1+0xa8>
 800468c:	f3af 8000 	nop.w
 8004690:	652b82fe 	.word	0x652b82fe
 8004694:	3ff71547 	.word	0x3ff71547
 8004698:	3ff00000 	.word	0x3ff00000

0800469c <fabs>:
 800469c:	ec51 0b10 	vmov	r0, r1, d0
 80046a0:	ee10 2a10 	vmov	r2, s0
 80046a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80046a8:	ec43 2b10 	vmov	d0, r2, r3
 80046ac:	4770      	bx	lr
	...

080046b0 <floor>:
 80046b0:	ec51 0b10 	vmov	r0, r1, d0
 80046b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80046bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80046c0:	2e13      	cmp	r6, #19
 80046c2:	460c      	mov	r4, r1
 80046c4:	ee10 5a10 	vmov	r5, s0
 80046c8:	4680      	mov	r8, r0
 80046ca:	dc34      	bgt.n	8004736 <floor+0x86>
 80046cc:	2e00      	cmp	r6, #0
 80046ce:	da16      	bge.n	80046fe <floor+0x4e>
 80046d0:	a335      	add	r3, pc, #212	; (adr r3, 80047a8 <floor+0xf8>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fb fd7d 	bl	80001d4 <__adddf3>
 80046da:	2200      	movs	r2, #0
 80046dc:	2300      	movs	r3, #0
 80046de:	f7fc f9bf 	bl	8000a60 <__aeabi_dcmpgt>
 80046e2:	b148      	cbz	r0, 80046f8 <floor+0x48>
 80046e4:	2c00      	cmp	r4, #0
 80046e6:	da59      	bge.n	800479c <floor+0xec>
 80046e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80046ec:	4a30      	ldr	r2, [pc, #192]	; (80047b0 <floor+0x100>)
 80046ee:	432b      	orrs	r3, r5
 80046f0:	2500      	movs	r5, #0
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	bf18      	it	ne
 80046f6:	4614      	movne	r4, r2
 80046f8:	4621      	mov	r1, r4
 80046fa:	4628      	mov	r0, r5
 80046fc:	e025      	b.n	800474a <floor+0x9a>
 80046fe:	4f2d      	ldr	r7, [pc, #180]	; (80047b4 <floor+0x104>)
 8004700:	4137      	asrs	r7, r6
 8004702:	ea01 0307 	and.w	r3, r1, r7
 8004706:	4303      	orrs	r3, r0
 8004708:	d01f      	beq.n	800474a <floor+0x9a>
 800470a:	a327      	add	r3, pc, #156	; (adr r3, 80047a8 <floor+0xf8>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f7fb fd60 	bl	80001d4 <__adddf3>
 8004714:	2200      	movs	r2, #0
 8004716:	2300      	movs	r3, #0
 8004718:	f7fc f9a2 	bl	8000a60 <__aeabi_dcmpgt>
 800471c:	2800      	cmp	r0, #0
 800471e:	d0eb      	beq.n	80046f8 <floor+0x48>
 8004720:	2c00      	cmp	r4, #0
 8004722:	bfbe      	ittt	lt
 8004724:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004728:	fa43 f606 	asrlt.w	r6, r3, r6
 800472c:	19a4      	addlt	r4, r4, r6
 800472e:	ea24 0407 	bic.w	r4, r4, r7
 8004732:	2500      	movs	r5, #0
 8004734:	e7e0      	b.n	80046f8 <floor+0x48>
 8004736:	2e33      	cmp	r6, #51	; 0x33
 8004738:	dd0b      	ble.n	8004752 <floor+0xa2>
 800473a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800473e:	d104      	bne.n	800474a <floor+0x9a>
 8004740:	ee10 2a10 	vmov	r2, s0
 8004744:	460b      	mov	r3, r1
 8004746:	f7fb fd45 	bl	80001d4 <__adddf3>
 800474a:	ec41 0b10 	vmov	d0, r0, r1
 800474e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004752:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	fa23 f707 	lsr.w	r7, r3, r7
 800475e:	4207      	tst	r7, r0
 8004760:	d0f3      	beq.n	800474a <floor+0x9a>
 8004762:	a311      	add	r3, pc, #68	; (adr r3, 80047a8 <floor+0xf8>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f7fb fd34 	bl	80001d4 <__adddf3>
 800476c:	2200      	movs	r2, #0
 800476e:	2300      	movs	r3, #0
 8004770:	f7fc f976 	bl	8000a60 <__aeabi_dcmpgt>
 8004774:	2800      	cmp	r0, #0
 8004776:	d0bf      	beq.n	80046f8 <floor+0x48>
 8004778:	2c00      	cmp	r4, #0
 800477a:	da02      	bge.n	8004782 <floor+0xd2>
 800477c:	2e14      	cmp	r6, #20
 800477e:	d103      	bne.n	8004788 <floor+0xd8>
 8004780:	3401      	adds	r4, #1
 8004782:	ea25 0507 	bic.w	r5, r5, r7
 8004786:	e7b7      	b.n	80046f8 <floor+0x48>
 8004788:	2301      	movs	r3, #1
 800478a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800478e:	fa03 f606 	lsl.w	r6, r3, r6
 8004792:	4435      	add	r5, r6
 8004794:	4545      	cmp	r5, r8
 8004796:	bf38      	it	cc
 8004798:	18e4      	addcc	r4, r4, r3
 800479a:	e7f2      	b.n	8004782 <floor+0xd2>
 800479c:	2500      	movs	r5, #0
 800479e:	462c      	mov	r4, r5
 80047a0:	e7aa      	b.n	80046f8 <floor+0x48>
 80047a2:	bf00      	nop
 80047a4:	f3af 8000 	nop.w
 80047a8:	8800759c 	.word	0x8800759c
 80047ac:	7e37e43c 	.word	0x7e37e43c
 80047b0:	bff00000 	.word	0xbff00000
 80047b4:	000fffff 	.word	0x000fffff

080047b8 <scalbn>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	ec55 4b10 	vmov	r4, r5, d0
 80047be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80047c2:	4606      	mov	r6, r0
 80047c4:	462b      	mov	r3, r5
 80047c6:	b9aa      	cbnz	r2, 80047f4 <scalbn+0x3c>
 80047c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80047cc:	4323      	orrs	r3, r4
 80047ce:	d03b      	beq.n	8004848 <scalbn+0x90>
 80047d0:	4b31      	ldr	r3, [pc, #196]	; (8004898 <scalbn+0xe0>)
 80047d2:	4629      	mov	r1, r5
 80047d4:	2200      	movs	r2, #0
 80047d6:	ee10 0a10 	vmov	r0, s0
 80047da:	f7fb feb1 	bl	8000540 <__aeabi_dmul>
 80047de:	4b2f      	ldr	r3, [pc, #188]	; (800489c <scalbn+0xe4>)
 80047e0:	429e      	cmp	r6, r3
 80047e2:	4604      	mov	r4, r0
 80047e4:	460d      	mov	r5, r1
 80047e6:	da12      	bge.n	800480e <scalbn+0x56>
 80047e8:	a327      	add	r3, pc, #156	; (adr r3, 8004888 <scalbn+0xd0>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb fea7 	bl	8000540 <__aeabi_dmul>
 80047f2:	e009      	b.n	8004808 <scalbn+0x50>
 80047f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80047f8:	428a      	cmp	r2, r1
 80047fa:	d10c      	bne.n	8004816 <scalbn+0x5e>
 80047fc:	ee10 2a10 	vmov	r2, s0
 8004800:	4620      	mov	r0, r4
 8004802:	4629      	mov	r1, r5
 8004804:	f7fb fce6 	bl	80001d4 <__adddf3>
 8004808:	4604      	mov	r4, r0
 800480a:	460d      	mov	r5, r1
 800480c:	e01c      	b.n	8004848 <scalbn+0x90>
 800480e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004812:	460b      	mov	r3, r1
 8004814:	3a36      	subs	r2, #54	; 0x36
 8004816:	4432      	add	r2, r6
 8004818:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800481c:	428a      	cmp	r2, r1
 800481e:	dd0b      	ble.n	8004838 <scalbn+0x80>
 8004820:	ec45 4b11 	vmov	d1, r4, r5
 8004824:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004890 <scalbn+0xd8>
 8004828:	f000 f83c 	bl	80048a4 <copysign>
 800482c:	a318      	add	r3, pc, #96	; (adr r3, 8004890 <scalbn+0xd8>)
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	ec51 0b10 	vmov	r0, r1, d0
 8004836:	e7da      	b.n	80047ee <scalbn+0x36>
 8004838:	2a00      	cmp	r2, #0
 800483a:	dd08      	ble.n	800484e <scalbn+0x96>
 800483c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004840:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004844:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004848:	ec45 4b10 	vmov	d0, r4, r5
 800484c:	bd70      	pop	{r4, r5, r6, pc}
 800484e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004852:	da0d      	bge.n	8004870 <scalbn+0xb8>
 8004854:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004858:	429e      	cmp	r6, r3
 800485a:	ec45 4b11 	vmov	d1, r4, r5
 800485e:	dce1      	bgt.n	8004824 <scalbn+0x6c>
 8004860:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004888 <scalbn+0xd0>
 8004864:	f000 f81e 	bl	80048a4 <copysign>
 8004868:	a307      	add	r3, pc, #28	; (adr r3, 8004888 <scalbn+0xd0>)
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	e7e0      	b.n	8004832 <scalbn+0x7a>
 8004870:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004874:	3236      	adds	r2, #54	; 0x36
 8004876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800487a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800487e:	4620      	mov	r0, r4
 8004880:	4629      	mov	r1, r5
 8004882:	2200      	movs	r2, #0
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <scalbn+0xe8>)
 8004886:	e7b2      	b.n	80047ee <scalbn+0x36>
 8004888:	c2f8f359 	.word	0xc2f8f359
 800488c:	01a56e1f 	.word	0x01a56e1f
 8004890:	8800759c 	.word	0x8800759c
 8004894:	7e37e43c 	.word	0x7e37e43c
 8004898:	43500000 	.word	0x43500000
 800489c:	ffff3cb0 	.word	0xffff3cb0
 80048a0:	3c900000 	.word	0x3c900000

080048a4 <copysign>:
 80048a4:	ec51 0b10 	vmov	r0, r1, d0
 80048a8:	ee11 0a90 	vmov	r0, s3
 80048ac:	ee10 2a10 	vmov	r2, s0
 80048b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80048b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80048b8:	ea41 0300 	orr.w	r3, r1, r0
 80048bc:	ec43 2b10 	vmov	d0, r2, r3
 80048c0:	4770      	bx	lr
	...

080048c4 <_init>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr

080048d0 <_fini>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr
