
stm32_altMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006db8  08006db8  00016db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ff8  08006ff8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ff8  08006ff8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  20000020  0800701c  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001b90  0800701c  00021b90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294bf  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b4d  00000000  00000000  0004950b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b25  00000000  00000000  0004e058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000019a8  00000000  00000000  00065b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a10  00000000  00000000  00067528  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001697e  00000000  00000000  00068f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017b42  00000000  00000000  0007f8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000834c9  00000000  00000000  000973f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011a8c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ce0  00000000  00000000  0011a93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d9c 	.word	0x08006d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08006d9c 	.word	0x08006d9c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b0c:	b500      	push	{lr}
 8000b0e:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b10:	2300      	movs	r3, #0
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	9303      	str	r3, [sp, #12]
 8000b1a:	9304      	str	r3, [sp, #16]
 8000b1c:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b1e:	4825      	ldr	r0, [pc, #148]	; (8000bb4 <MX_ADC1_Init+0xa8>)
 8000b20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b24:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b2a:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b32:	7643      	strb	r3, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b34:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b38:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b3a:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b3e:	2103      	movs	r1, #3
 8000b40:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b42:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b46:	2104      	movs	r1, #4
 8000b48:	6141      	str	r1, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b4a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b4c:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b4e:	f000 fe5d 	bl	800180c <HAL_ADC_Init>
 8000b52:	bb18      	cbnz	r0, 8000b9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b54:	2303      	movs	r3, #3
 8000b56:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000b60:	2206      	movs	r2, #6
 8000b62:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b64:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000b66:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b68:	4669      	mov	r1, sp
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_ADC1_Init+0xa8>)
 8000b6c:	f001 f94c 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8000b70:	b9b8      	cbnz	r0, 8000ba2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	4669      	mov	r1, sp
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_ADC1_Init+0xa8>)
 8000b7e:	f001 f943 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8000b82:	b988      	cbnz	r0, 8000ba8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b84:	230b      	movs	r3, #11
 8000b86:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	4669      	mov	r1, sp
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <MX_ADC1_Init+0xa8>)
 8000b90:	f001 f93a 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8000b94:	b958      	cbnz	r0, 8000bae <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
  }

}
 8000b96:	b007      	add	sp, #28
 8000b98:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b9c:	f000 fbd2 	bl	8001344 <Error_Handler>
 8000ba0:	e7d8      	b.n	8000b54 <MX_ADC1_Init+0x48>
    Error_Handler();
 8000ba2:	f000 fbcf 	bl	8001344 <Error_Handler>
 8000ba6:	e7e4      	b.n	8000b72 <MX_ADC1_Init+0x66>
    Error_Handler();
 8000ba8:	f000 fbcc 	bl	8001344 <Error_Handler>
 8000bac:	e7ea      	b.n	8000b84 <MX_ADC1_Init+0x78>
    Error_Handler();
 8000bae:	f000 fbc9 	bl	8001344 <Error_Handler>
}
 8000bb2:	e7f0      	b.n	8000b96 <MX_ADC1_Init+0x8a>
 8000bb4:	20001980 	.word	0x20001980

08000bb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9304      	str	r3, [sp, #16]
 8000bc2:	9305      	str	r3, [sp, #20]
 8000bc4:	9306      	str	r3, [sp, #24]
 8000bc6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000bc8:	6803      	ldr	r3, [r0, #0]
 8000bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bce:	d001      	beq.n	8000bd4 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bd0:	b008      	add	sp, #32
 8000bd2:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd4:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8000bd8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	695a      	ldr	r2, [r3, #20]
 8000be6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000bea:	9200      	str	r2, [sp, #0]
 8000bec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000bfc:	9201      	str	r2, [sp, #4]
 8000bfe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DIODE_RIGHT_Pin|DIODE_LEFT_Pin;
 8000c12:	230c      	movs	r3, #12
 8000c14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2403      	movs	r4, #3
 8000c18:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	eb0d 0103 	add.w	r1, sp, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f001 fb0b 	bl	800223c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DIODE_CENTER_Pin;
 8000c26:	2301      	movs	r3, #1
 8000c28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(DIODE_CENTER_GPIO_Port, &GPIO_InitStruct);
 8000c30:	a903      	add	r1, sp, #12
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <HAL_ADC_MspInit+0x94>)
 8000c34:	f001 fb02 	bl	800223c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000c38:	4622      	mov	r2, r4
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	2012      	movs	r0, #18
 8000c3e:	f001 fa95 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000c42:	2012      	movs	r0, #18
 8000c44:	f001 fac6 	bl	80021d4 <HAL_NVIC_EnableIRQ>
}
 8000c48:	e7c2      	b.n	8000bd0 <HAL_ADC_MspInit+0x18>
 8000c4a:	bf00      	nop
 8000c4c:	48000400 	.word	0x48000400

08000c50 <cameraDetectionTask>:
uint8_t left_brightness;
uint8_t right_brightness;


/* Functions Definition ------------------------------------------------------*/
void cameraDetectionTask(void *argument){
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	b084      	sub	sp, #16

	uint32_t evt = 0;
	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8000c56:	2034      	movs	r0, #52	; 0x34
 8000c58:	f000 faac 	bl	80011b4 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8000c5c:	2035      	movs	r0, #53	; 0x35
 8000c5e:	f000 faa9 	bl	80011b4 <setup_LP5523>
 8000c62:	e12f      	b.n	8000ec4 <cameraDetectionTask+0x274>

					if(ADCValue[2] >= THRESHOLD){
						diode_center += ADCValue[2];
					}

					HAL_ADC_Stop(&hadc1);
 8000c64:	48a2      	ldr	r0, [pc, #648]	; (8000ef0 <cameraDetectionTask+0x2a0>)
 8000c66:	f000 ff0a 	bl	8001a7e <HAL_ADC_Stop>
					HAL_Delay(1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 fcd2 	bl	8001614 <HAL_Delay>
				for(int i=0; i<SAMPLE_CNT; i++){
 8000c70:	3601      	adds	r6, #1
 8000c72:	2e13      	cmp	r6, #19
 8000c74:	dc57      	bgt.n	8000d26 <cameraDetectionTask+0xd6>
					HAL_ADC_Start(&hadc1);
 8000c76:	4c9e      	ldr	r4, [pc, #632]	; (8000ef0 <cameraDetectionTask+0x2a0>)
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f000 feb7 	bl	80019ec <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c82:	4620      	mov	r0, r4
 8000c84:	f000 ff20 	bl	8001ac8 <HAL_ADC_PollForConversion>
					ADCValue[0] = HAL_ADC_GetValue(&hadc1);
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f000 ff99 	bl	8001bc0 <HAL_ADC_GetValue>
 8000c8e:	b280      	uxth	r0, r0
 8000c90:	4d98      	ldr	r5, [pc, #608]	; (8000ef4 <cameraDetectionTask+0x2a4>)
 8000c92:	8028      	strh	r0, [r5, #0]
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f000 ff15 	bl	8001ac8 <HAL_ADC_PollForConversion>
					ADCValue[1] = HAL_ADC_GetValue(&hadc1);
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f000 ff8e 	bl	8001bc0 <HAL_ADC_GetValue>
 8000ca4:	b280      	uxth	r0, r0
 8000ca6:	8068      	strh	r0, [r5, #2]
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	4620      	mov	r0, r4
 8000cae:	f000 ff0b 	bl	8001ac8 <HAL_ADC_PollForConversion>
					ADCValue[2] = HAL_ADC_GetValue(&hadc1);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f000 ff84 	bl	8001bc0 <HAL_ADC_GetValue>
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	80a8      	strh	r0, [r5, #4]
					if(ADCValue[0] >= THRESHOLD){
 8000cbc:	882b      	ldrh	r3, [r5, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	2b63      	cmp	r3, #99	; 0x63
 8000cc2:	d90b      	bls.n	8000cdc <cameraDetectionTask+0x8c>
						diode_right += ADCValue[0];
 8000cc4:	8828      	ldrh	r0, [r5, #0]
 8000cc6:	4c8c      	ldr	r4, [pc, #560]	; (8000ef8 <cameraDetectionTask+0x2a8>)
 8000cc8:	f7ff fbd4 	bl	8000474 <__aeabi_i2d>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000cd4:	f7ff fa82 	bl	80001dc <__adddf3>
 8000cd8:	e9c4 0100 	strd	r0, r1, [r4]
					if(ADCValue[1] >= THRESHOLD){
 8000cdc:	4b85      	ldr	r3, [pc, #532]	; (8000ef4 <cameraDetectionTask+0x2a4>)
 8000cde:	885b      	ldrh	r3, [r3, #2]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2b63      	cmp	r3, #99	; 0x63
 8000ce4:	d90c      	bls.n	8000d00 <cameraDetectionTask+0xb0>
						diode_left += ADCValue[1];
 8000ce6:	4b83      	ldr	r3, [pc, #524]	; (8000ef4 <cameraDetectionTask+0x2a4>)
 8000ce8:	8858      	ldrh	r0, [r3, #2]
 8000cea:	4c84      	ldr	r4, [pc, #528]	; (8000efc <cameraDetectionTask+0x2ac>)
 8000cec:	f7ff fbc2 	bl	8000474 <__aeabi_i2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000cf8:	f7ff fa70 	bl	80001dc <__adddf3>
 8000cfc:	e9c4 0100 	strd	r0, r1, [r4]
					if(ADCValue[2] >= THRESHOLD){
 8000d00:	4b7c      	ldr	r3, [pc, #496]	; (8000ef4 <cameraDetectionTask+0x2a4>)
 8000d02:	889b      	ldrh	r3, [r3, #4]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	2b63      	cmp	r3, #99	; 0x63
 8000d08:	d9ac      	bls.n	8000c64 <cameraDetectionTask+0x14>
						diode_center += ADCValue[2];
 8000d0a:	4b7a      	ldr	r3, [pc, #488]	; (8000ef4 <cameraDetectionTask+0x2a4>)
 8000d0c:	8898      	ldrh	r0, [r3, #4]
 8000d0e:	4c7c      	ldr	r4, [pc, #496]	; (8000f00 <cameraDetectionTask+0x2b0>)
 8000d10:	f7ff fbb0 	bl	8000474 <__aeabi_i2d>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000d1c:	f7ff fa5e 	bl	80001dc <__adddf3>
 8000d20:	e9c4 0100 	strd	r0, r1, [r4]
 8000d24:	e79e      	b.n	8000c64 <cameraDetectionTask+0x14>
				}

				// get average
				diode_right = diode_right / SAMPLE_CNT;
 8000d26:	4c74      	ldr	r4, [pc, #464]	; (8000ef8 <cameraDetectionTask+0x2a8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <cameraDetectionTask+0x2b4>)
 8000d2c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000d30:	f7ff fd34 	bl	800079c <__aeabi_ddiv>
 8000d34:	4606      	mov	r6, r0
 8000d36:	460f      	mov	r7, r1
 8000d38:	e9c4 6700 	strd	r6, r7, [r4]
				diode_left = diode_left / SAMPLE_CNT;
 8000d3c:	4c6f      	ldr	r4, [pc, #444]	; (8000efc <cameraDetectionTask+0x2ac>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4b70      	ldr	r3, [pc, #448]	; (8000f04 <cameraDetectionTask+0x2b4>)
 8000d42:	e9d4 0100 	ldrd	r0, r1, [r4]
 8000d46:	f7ff fd29 	bl	800079c <__aeabi_ddiv>
 8000d4a:	4680      	mov	r8, r0
 8000d4c:	4689      	mov	r9, r1
 8000d4e:	e9c4 8900 	strd	r8, r9, [r4]
				diode_center = diode_center / SAMPLE_CNT;
 8000d52:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8000f00 <cameraDetectionTask+0x2b0>
 8000d56:	2200      	movs	r2, #0
 8000d58:	4b6a      	ldr	r3, [pc, #424]	; (8000f04 <cameraDetectionTask+0x2b4>)
 8000d5a:	e9da 0100 	ldrd	r0, r1, [sl]
 8000d5e:	f7ff fd1d 	bl	800079c <__aeabi_ddiv>
 8000d62:	4604      	mov	r4, r0
 8000d64:	460d      	mov	r5, r1
 8000d66:	e9ca 4500 	strd	r4, r5, [sl]

				// treat values as vector
				vec_x = diode_right - diode_left;
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4639      	mov	r1, r7
 8000d72:	f7ff fa31 	bl	80001d8 <__aeabi_dsub>
 8000d76:	4606      	mov	r6, r0
 8000d78:	460f      	mov	r7, r1
 8000d7a:	4b63      	ldr	r3, [pc, #396]	; (8000f08 <cameraDetectionTask+0x2b8>)
 8000d7c:	e9c3 6700 	strd	r6, r7, [r3]
				vec_y = diode_center;
 8000d80:	4b62      	ldr	r3, [pc, #392]	; (8000f0c <cameraDetectionTask+0x2bc>)
 8000d82:	e9c3 4500 	strd	r4, r5, [r3]

				// get theta of vector if vector exists
				if (vec_y > THRESHOLD || abs(vec_x) > THRESHOLD){
 8000d86:	2200      	movs	r2, #0
 8000d88:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <cameraDetectionTask+0x2c0>)
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fe6b 	bl	8000a68 <__aeabi_dcmpgt>
 8000d92:	b940      	cbnz	r0, 8000da6 <cameraDetectionTask+0x156>
 8000d94:	4630      	mov	r0, r6
 8000d96:	4639      	mov	r1, r7
 8000d98:	f7ff fe70 	bl	8000a7c <__aeabi_d2iz>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	bfb8      	it	lt
 8000da0:	4240      	neglt	r0, r0
 8000da2:	2864      	cmp	r0, #100	; 0x64
 8000da4:	dd35      	ble.n	8000e12 <cameraDetectionTask+0x1c2>
					theta = tanh(vec_y/vec_x);
 8000da6:	4632      	mov	r2, r6
 8000da8:	463b      	mov	r3, r7
 8000daa:	4620      	mov	r0, r4
 8000dac:	4629      	mov	r1, r5
 8000dae:	f7ff fcf5 	bl	800079c <__aeabi_ddiv>
 8000db2:	ec41 0b10 	vmov	d0, r0, r1
 8000db6:	f004 fd6f 	bl	8005898 <tanh>
 8000dba:	ec55 4b10 	vmov	r4, r5, d0
 8000dbe:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <cameraDetectionTask+0x2c4>)
 8000dc0:	ed83 0b00 	vstr	d0, [r3]

					continue;
				}

				// calculate brightness
				if(theta > M_PI_2){
 8000dc4:	a346      	add	r3, pc, #280	; (adr r3, 8000ee0 <cameraDetectionTask+0x290>)
 8000dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dca:	ee10 0a10 	vmov	r0, s0
 8000dce:	4629      	mov	r1, r5
 8000dd0:	f7ff fe4a 	bl	8000a68 <__aeabi_dcmpgt>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d13d      	bne.n	8000e54 <cameraDetectionTask+0x204>
					right_brightness = ((float) MAX_BRIGHTNESS) * sin(theta);
				}

				// calculate right brightness
				else{
					theta = (theta * -1) + M_PI_2; // compensate for arctan negative region
 8000dd8:	4622      	mov	r2, r4
 8000dda:	462b      	mov	r3, r5
 8000ddc:	a140      	add	r1, pc, #256	; (adr r1, 8000ee0 <cameraDetectionTask+0x290>)
 8000dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000de2:	f7ff f9f9 	bl	80001d8 <__aeabi_dsub>
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <cameraDetectionTask+0x2c4>)
 8000de8:	e9c3 0100 	strd	r0, r1, [r3]
					right_brightness = MAX_BRIGHTNESS;
 8000dec:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <cameraDetectionTask+0x2c8>)
 8000dee:	22ff      	movs	r2, #255	; 0xff
 8000df0:	701a      	strb	r2, [r3, #0]
					left_brightness = ((float) MAX_BRIGHTNESS ) * sin(theta);
 8000df2:	ec41 0b10 	vmov	d0, r0, r1
 8000df6:	f004 fd07 	bl	8005808 <sin>
 8000dfa:	a33b      	add	r3, pc, #236	; (adr r3, 8000ee8 <cameraDetectionTask+0x298>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	ec51 0b10 	vmov	r0, r1, d0
 8000e04:	f7ff fba0 	bl	8000548 <__aeabi_dmul>
 8000e08:	f7ff fe60 	bl	8000acc <__aeabi_d2uiz>
 8000e0c:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <cameraDetectionTask+0x2cc>)
 8000e0e:	7018      	strb	r0, [r3, #0]
 8000e10:	e032      	b.n	8000e78 <cameraDetectionTask+0x228>
					colorSet.loc.left_side_b = 0;
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <cameraDetectionTask+0x2d0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	711a      	strb	r2, [r3, #4]
					colorSet.loc.right_side_b = 0;
 8000e18:	735a      	strb	r2, [r3, #13]
					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000e1a:	2364      	movs	r3, #100	; 0x64
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	2309      	movs	r3, #9
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <cameraDetectionTask+0x2d4>)
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	2216      	movs	r2, #22
 8000e2a:	2168      	movs	r1, #104	; 0x68
 8000e2c:	483e      	ldr	r0, [pc, #248]	; (8000f28 <cameraDetectionTask+0x2d8>)
 8000e2e:	f001 fc55 	bl	80026dc <HAL_I2C_Mem_Write>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d1f1      	bne.n	8000e1a <cameraDetectionTask+0x1ca>
					while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2309      	movs	r3, #9
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <cameraDetectionTask+0x2dc>)
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	2216      	movs	r2, #22
 8000e46:	216a      	movs	r1, #106	; 0x6a
 8000e48:	4837      	ldr	r0, [pc, #220]	; (8000f28 <cameraDetectionTask+0x2d8>)
 8000e4a:	f001 fc47 	bl	80026dc <HAL_I2C_Mem_Write>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d1f1      	bne.n	8000e36 <cameraDetectionTask+0x1e6>
 8000e52:	e037      	b.n	8000ec4 <cameraDetectionTask+0x274>
					left_brightness = MAX_BRIGHTNESS;
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <cameraDetectionTask+0x2cc>)
 8000e56:	22ff      	movs	r2, #255	; 0xff
 8000e58:	701a      	strb	r2, [r3, #0]
					right_brightness = ((float) MAX_BRIGHTNESS) * sin(theta);
 8000e5a:	ec45 4b10 	vmov	d0, r4, r5
 8000e5e:	f004 fcd3 	bl	8005808 <sin>
 8000e62:	a321      	add	r3, pc, #132	; (adr r3, 8000ee8 <cameraDetectionTask+0x298>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	ec51 0b10 	vmov	r0, r1, d0
 8000e6c:	f7ff fb6c 	bl	8000548 <__aeabi_dmul>
 8000e70:	f7ff fe2c 	bl	8000acc <__aeabi_d2uiz>
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <cameraDetectionTask+0x2c8>)
 8000e76:	7018      	strb	r0, [r3, #0]
				}

				colorSet.loc.left_side_b = left_brightness;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <cameraDetectionTask+0x2d0>)
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <cameraDetectionTask+0x2cc>)
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	711a      	strb	r2, [r3, #4]
				colorSet.loc.right_side_b = right_brightness;
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <cameraDetectionTask+0x2c8>)
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	735a      	strb	r2, [r3, #13]
//				FrontLightsSet(&colorSet);
//
//				memcpy(led_left_PWM, colorSet.color, 9);
//				memcpy(led_right_PWM, &(colorSet.color[9]), 9);

				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_LEFT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2309      	movs	r3, #9
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <cameraDetectionTask+0x2d4>)
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	2216      	movs	r2, #22
 8000e96:	2168      	movs	r1, #104	; 0x68
 8000e98:	4823      	ldr	r0, [pc, #140]	; (8000f28 <cameraDetectionTask+0x2d8>)
 8000e9a:	f001 fc1f 	bl	80026dc <HAL_I2C_Mem_Write>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d1f1      	bne.n	8000e86 <cameraDetectionTask+0x236>
				while(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_RIGHT_ADDRESS << 1, LIS3DH_D1_PWM_REG, 1, led_right_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <cameraDetectionTask+0x2dc>)
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	2216      	movs	r2, #22
 8000eb2:	216a      	movs	r1, #106	; 0x6a
 8000eb4:	481c      	ldr	r0, [pc, #112]	; (8000f28 <cameraDetectionTask+0x2d8>)
 8000eb6:	f001 fc11 	bl	80026dc <HAL_I2C_Mem_Write>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d1f1      	bne.n	8000ea2 <cameraDetectionTask+0x252>

				osDelay(200);
 8000ebe:	20c8      	movs	r0, #200	; 0xc8
 8000ec0:	f002 fe4a 	bl	8003b58 <osDelay>
				diode_left = 0;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <cameraDetectionTask+0x2ac>)
 8000eca:	e9c1 2300 	strd	r2, r3, [r1]
				diode_right = 0;
 8000ece:	490a      	ldr	r1, [pc, #40]	; (8000ef8 <cameraDetectionTask+0x2a8>)
 8000ed0:	e9c1 2300 	strd	r2, r3, [r1]
				diode_center = 0;
 8000ed4:	490a      	ldr	r1, [pc, #40]	; (8000f00 <cameraDetectionTask+0x2b0>)
 8000ed6:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i=0; i<SAMPLE_CNT; i++){
 8000eda:	2600      	movs	r6, #0
 8000edc:	e6c9      	b.n	8000c72 <cameraDetectionTask+0x22>
 8000ede:	bf00      	nop
 8000ee0:	54442d18 	.word	0x54442d18
 8000ee4:	3ff921fb 	.word	0x3ff921fb
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	406fe000 	.word	0x406fe000
 8000ef0:	20001980 	.word	0x20001980
 8000ef4:	2000003c 	.word	0x2000003c
 8000ef8:	20000058 	.word	0x20000058
 8000efc:	20000050 	.word	0x20000050
 8000f00:	20000048 	.word	0x20000048
 8000f04:	40340000 	.word	0x40340000
 8000f08:	200019d0 	.word	0x200019d0
 8000f0c:	20001a18 	.word	0x20001a18
 8000f10:	40590000 	.word	0x40590000
 8000f14:	200019e0 	.word	0x200019e0
 8000f18:	20001a04 	.word	0x20001a04
 8000f1c:	20001a0c 	.word	0x20001a0c
 8000f20:	200019e8 	.word	0x200019e8
 8000f24:	20000064 	.word	0x20000064
 8000f28:	20001a3c 	.word	0x20001a3c
 8000f2c:	20000070 	.word	0x20000070

08000f30 <HAL_ADC_ConvCpltCallback>:

volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
//	HAL_ADC_Stop_DMA(&hadc1);
	complete++;
 8000f30:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_ADC_ConvCpltCallback+0xc>)
 8000f32:	7813      	ldrb	r3, [r2, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	7013      	strb	r3, [r2, #0]
//
//	// notify ThermopileTask that conversion is complete
//	diodeSamplesPtr = &(diodeSamples[HALF_DIODE_SAMPLES]);
//	osThreadFlagsSet(cameraDetectionTaskHandle, 0x00000004U);

}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000042 	.word	0x20000042

08000f40 <HAL_ADC_ErrorCallback>:
}

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 8000f40:	4a02      	ldr	r2, [pc, #8]	; (8000f4c <HAL_ADC_ErrorCallback+0xc>)
 8000f42:	7813      	ldrb	r3, [r2, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	7013      	strb	r3, [r2, #0]
}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000060 	.word	0x20000060

08000f50 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f002 fe00 	bl	8003b58 <osDelay>
 8000f58:	e7fb      	b.n	8000f52 <StartDefaultTask+0x2>
	...

08000f5c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	b093      	sub	sp, #76	; 0x4c
osKernelInitialize();
 8000f60:	f002 fd3e 	bl	80039e0 <osKernelInitialize>
  const osThreadAttr_t defaultTask_attributes = {
 8000f64:	2520      	movs	r5, #32
 8000f66:	462a      	mov	r2, r5
 8000f68:	2100      	movs	r1, #0
 8000f6a:	a80a      	add	r0, sp, #40	; 0x28
 8000f6c:	f004 fc43 	bl	80057f6 <memset>
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_FREERTOS_Init+0x80>)
 8000f72:	9309      	str	r3, [sp, #36]	; 0x24
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	930e      	str	r3, [sp, #56]	; 0x38
 8000f78:	2418      	movs	r4, #24
 8000f7a:	940f      	str	r4, [sp, #60]	; 0x3c
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f7c:	aa09      	add	r2, sp, #36	; 0x24
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <MX_FREERTOS_Init+0x84>)
 8000f82:	f002 fd75 	bl	8003a70 <osThreadNew>
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_FREERTOS_Init+0x88>)
 8000f88:	6018      	str	r0, [r3, #0]
      const osThreadAttr_t cameraTask_attributes = {
 8000f8a:	462a      	mov	r2, r5
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	a801      	add	r0, sp, #4
 8000f90:	f004 fc31 	bl	80057f6 <memset>
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_FREERTOS_Init+0x8c>)
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	9305      	str	r3, [sp, #20]
 8000f9e:	9406      	str	r4, [sp, #24]
      cameraDetectionTaskHandle = osThreadNew(cameraDetectionTask, NULL, &cameraTask_attributes);
 8000fa0:	466a      	mov	r2, sp
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_FREERTOS_Init+0x90>)
 8000fa6:	f002 fd63 	bl	8003a70 <osThreadNew>
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_FREERTOS_Init+0x94>)
 8000fac:	6018      	str	r0, [r3, #0]
  togLoggingQueueHandle = osMessageQueueNew (2, sizeof(struct LogMessage), NULL);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2106      	movs	r1, #6
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f002 fdf2 	bl	8003b9c <osMessageQueueNew>
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_FREERTOS_Init+0x98>)
 8000fba:	6018      	str	r0, [r3, #0]
  thermMsgQueueHandle = osMessageQueueNew (10, sizeof(struct thermopileData), NULL);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2158      	movs	r1, #88	; 0x58
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f002 fdeb 	bl	8003b9c <osMessageQueueNew>
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_FREERTOS_Init+0x9c>)
 8000fc8:	6018      	str	r0, [r3, #0]
  sendMsgToMainQueueHandle = osMessageQueueNew (10, sizeof(struct LogPacket), NULL);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2170      	movs	r1, #112	; 0x70
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f002 fde4 	bl	8003b9c <osMessageQueueNew>
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_FREERTOS_Init+0xa0>)
 8000fd6:	6018      	str	r0, [r3, #0]
}
 8000fd8:	b013      	add	sp, #76	; 0x4c
 8000fda:	bd30      	pop	{r4, r5, pc}
 8000fdc:	08006db8 	.word	0x08006db8
 8000fe0:	08000f51 	.word	0x08000f51
 8000fe4:	20001a28 	.word	0x20001a28
 8000fe8:	08006dc4 	.word	0x08006dc4
 8000fec:	08000c51 	.word	0x08000c51
 8000ff0:	200019d8 	.word	0x200019d8
 8000ff4:	20001a34 	.word	0x20001a34
 8000ff8:	20001a00 	.word	0x20001a00
 8000ffc:	20001a30 	.word	0x20001a30

08001000 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001000:	b530      	push	{r4, r5, lr}
 8001002:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	2400      	movs	r4, #0
 8001006:	9403      	str	r4, [sp, #12]
 8001008:	9404      	str	r4, [sp, #16]
 800100a:	9405      	str	r4, [sp, #20]
 800100c:	9406      	str	r4, [sp, #24]
 800100e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001020:	9200      	str	r2, [sp, #0]
 8001022:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001032:	9201      	str	r2, [sp, #4]
 8001034:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_INT_Pin|TP25_Pin|TP24_Pin|TP22_Pin 
 8001048:	4622      	mov	r2, r4
 800104a:	f241 7110 	movw	r1, #5904	; 0x1710
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f001 f9b7 	bl	80023c4 <HAL_GPIO_WritePin>
                          |TP20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2140      	movs	r1, #64	; 0x40
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f001 f9b1 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 8001062:	f640 0383 	movw	r3, #2179	; 0x883
 8001066:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001068:	2503      	movs	r5, #3
 800106a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	a903      	add	r1, sp, #12
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f001 f8e2 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin|TP_SS_Pin|TP25_Pin|TP24_Pin 
 8001078:	f241 7350 	movw	r3, #5968	; 0x1750
 800107c:	9303      	str	r3, [sp, #12]
                          |TP22_Pin|TP20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	a903      	add	r1, sp, #12
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f001 f8d6 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001090:	2320      	movs	r3, #32
 8001092:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_GPIO_Init+0xbc>)
 8001096:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800109a:	a903      	add	r1, sp, #12
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f001 f8cc 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a4:	2340      	movs	r3, #64	; 0x40
 80010a6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	a903      	add	r1, sp, #12
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_GPIO_Init+0xc0>)
 80010b0:	f001 f8c4 	bl	800223c <HAL_GPIO_Init>

}
 80010b4:	b009      	add	sp, #36	; 0x24
 80010b6:	bd30      	pop	{r4, r5, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	10110000 	.word	0x10110000
 80010c0:	48000400 	.word	0x48000400

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <MX_I2C1_Init+0x50>)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_I2C1_Init+0x54>)
 80010ca:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00E27CAE;
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_I2C1_Init+0x58>)
 80010ce:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 230;
 80010d0:	23e6      	movs	r3, #230	; 0xe6
 80010d2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010dc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010de:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e4:	f001 fa9c 	bl	8002620 <HAL_I2C_Init>
 80010e8:	b950      	cbnz	r0, 8001100 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ee:	f001 fbc7 	bl	8002880 <HAL_I2CEx_ConfigAnalogFilter>
 80010f2:	b940      	cbnz	r0, 8001106 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f8:	f001 fbf0 	bl	80028dc <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	b930      	cbnz	r0, 800110c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 80010fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001100:	f000 f920 	bl	8001344 <Error_Handler>
 8001104:	e7f1      	b.n	80010ea <MX_I2C1_Init+0x26>
    Error_Handler();
 8001106:	f000 f91d 	bl	8001344 <Error_Handler>
 800110a:	e7f3      	b.n	80010f4 <MX_I2C1_Init+0x30>
    Error_Handler();
 800110c:	f000 f91a 	bl	8001344 <Error_Handler>
}
 8001110:	e7f5      	b.n	80010fe <MX_I2C1_Init+0x3a>
 8001112:	bf00      	nop
 8001114:	20001a3c 	.word	0x20001a3c
 8001118:	40005400 	.word	0x40005400
 800111c:	00e27cae 	.word	0x00e27cae

08001120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	2300      	movs	r3, #0
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	9304      	str	r3, [sp, #16]
 800112a:	9305      	str	r3, [sp, #20]
 800112c:	9306      	str	r3, [sp, #24]
 800112e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8001130:	6802      	ldr	r2, [r0, #0]
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001138:	b009      	add	sp, #36	; 0x24
 800113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4c1b      	ldr	r4, [pc, #108]	; (80011ac <HAL_I2C_MspInit+0x8c>)
 800113e:	6963      	ldr	r3, [r4, #20]
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	6163      	str	r3, [r4, #20]
 8001146:	6963      	ldr	r3, [r4, #20]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	6963      	ldr	r3, [r4, #20]
 8001152:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001156:	6163      	str	r3, [r4, #20]
 8001158:	6963      	ldr	r3, [r4, #20]
 800115a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001166:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001168:	2712      	movs	r7, #18
 800116a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2603      	movs	r6, #3
 800116e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001170:	2504      	movs	r5, #4
 8001172:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	a903      	add	r1, sp, #12
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f001 f85f 	bl	800223c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001182:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	a903      	add	r1, sp, #12
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <HAL_I2C_MspInit+0x90>)
 8001190:	f001 f854 	bl	800223c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001194:	69e3      	ldr	r3, [r4, #28]
 8001196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119a:	61e3      	str	r3, [r4, #28]
 800119c:	69e3      	ldr	r3, [r4, #28]
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	9b02      	ldr	r3, [sp, #8]
}
 80011a6:	e7c7      	b.n	8001138 <HAL_I2C_MspInit+0x18>
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000400 	.word	0x48000400

080011b4 <setup_LP5523>:
{
   uint8_t current[9];
   uint8_t intensity[9];
};

void setup_LP5523(uint8_t ADDR){
 80011b4:	b530      	push	{r4, r5, lr}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t deviceAddress = ADDR << 1;
 80011b8:	0040      	lsls	r0, r0, #1
 80011ba:	b2c5      	uxtb	r5, r0
	uint8_t led_PWM[9] = {0};
 80011bc:	2300      	movs	r3, #0
 80011be:	9307      	str	r3, [sp, #28]
 80011c0:	9308      	str	r3, [sp, #32]
 80011c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	uint8_t packet;

	// enable chip
	packet = LP5525_CHIP_EN;
 80011c6:	2340      	movs	r3, #64	; 0x40
 80011c8:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80011cc:	b2ac      	uxth	r4, r5
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f10d 021b 	add.w	r2, sp, #27
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	4621      	mov	r1, r4
 80011e0:	482b      	ldr	r0, [pc, #172]	; (8001290 <setup_LP5523+0xdc>)
 80011e2:	f001 fa7b 	bl	80026dc <HAL_I2C_Mem_Write>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d1f0      	bne.n	80011cc <setup_LP5523+0x18>

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 80011ea:	234f      	movs	r3, #79	; 0x4f
 80011ec:	f88d 301b 	strb.w	r3, [sp, #27]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f10d 021b 	add.w	r2, sp, #27
 80011fc:	9200      	str	r2, [sp, #0]
 80011fe:	2236      	movs	r2, #54	; 0x36
 8001200:	4621      	mov	r1, r4
 8001202:	4823      	ldr	r0, [pc, #140]	; (8001290 <setup_LP5523+0xdc>)
 8001204:	f001 fa6a 	bl	80026dc <HAL_I2C_Mem_Write>
 8001208:	2800      	cmp	r0, #0
 800120a:	d1f1      	bne.n	80011f0 <setup_LP5523+0x3c>

	// set PWM level (0 to 255)
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2309      	movs	r3, #9
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	ab07      	add	r3, sp, #28
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	2216      	movs	r2, #22
 800121c:	4621      	mov	r1, r4
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <setup_LP5523+0xdc>)
 8001220:	f001 fa5c 	bl	80026dc <HAL_I2C_Mem_Write>
 8001224:	2800      	cmp	r0, #0
 8001226:	d1f1      	bne.n	800120c <setup_LP5523+0x58>

	// set current control (0 to 25.5 mA) - step size is 100uA
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2309      	movs	r3, #9
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <setup_LP5523+0xe0>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	2226      	movs	r2, #38	; 0x26
 8001238:	4621      	mov	r1, r4
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <setup_LP5523+0xdc>)
 800123c:	f001 fa4e 	bl	80026dc <HAL_I2C_Mem_Write>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1f1      	bne.n	8001228 <setup_LP5523+0x74>

	// enable logarithmic dimming
	packet = LOG_EN;
 8001244:	2320      	movs	r3, #32
 8001246:	f88d 301b 	strb.w	r3, [sp, #27]
	uint8_t packet_array[9] = {packet,packet,packet,packet,packet,packet,packet,packet,packet};
 800124a:	f88d 3010 	strb.w	r3, [sp, #16]
 800124e:	f88d 3011 	strb.w	r3, [sp, #17]
 8001252:	f88d 3012 	strb.w	r3, [sp, #18]
 8001256:	f88d 3013 	strb.w	r3, [sp, #19]
 800125a:	f88d 3014 	strb.w	r3, [sp, #20]
 800125e:	f88d 3015 	strb.w	r3, [sp, #21]
 8001262:	f88d 3016 	strb.w	r3, [sp, #22]
 8001266:	f88d 3017 	strb.w	r3, [sp, #23]
 800126a:	f88d 3018 	strb.w	r3, [sp, #24]
	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2309      	movs	r3, #9
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	ab04      	add	r3, sp, #16
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	2206      	movs	r2, #6
 800127e:	4621      	mov	r1, r4
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <setup_LP5523+0xdc>)
 8001282:	f001 fa2b 	bl	80026dc <HAL_I2C_Mem_Write>
 8001286:	2800      	cmp	r0, #0
 8001288:	d1f1      	bne.n	800126e <setup_LP5523+0xba>

}
 800128a:	b00b      	add	sp, #44	; 0x2c
 800128c:	bd30      	pop	{r4, r5, pc}
 800128e:	bf00      	nop
 8001290:	20001a3c 	.word	0x20001a3c
 8001294:	20000000 	.word	0x20000000

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b530      	push	{r4, r5, lr}
 800129a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129c:	2220      	movs	r2, #32
 800129e:	2100      	movs	r1, #0
 80012a0:	a814      	add	r0, sp, #80	; 0x50
 80012a2:	f004 faa8 	bl	80057f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a6:	2400      	movs	r4, #0
 80012a8:	940d      	str	r4, [sp, #52]	; 0x34
 80012aa:	940e      	str	r4, [sp, #56]	; 0x38
 80012ac:	940f      	str	r4, [sp, #60]	; 0x3c
 80012ae:	9410      	str	r4, [sp, #64]	; 0x40
 80012b0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b2:	2230      	movs	r2, #48	; 0x30
 80012b4:	4621      	mov	r1, r4
 80012b6:	a801      	add	r0, sp, #4
 80012b8:	f004 fa9d 	bl	80057f6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012bc:	2309      	movs	r3, #9
 80012be:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c6:	2501      	movs	r5, #1
 80012c8:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012ca:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	a812      	add	r0, sp, #72	; 0x48
 80012ce:	f001 fb31 	bl	8002934 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	930d      	str	r3, [sp, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012d6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012da:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	9411      	str	r4, [sp, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012de:	4629      	mov	r1, r5
 80012e0:	a80d      	add	r0, sp, #52	; 0x34
 80012e2:	f001 fe87 	bl	8002ff4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SystemClock_Config+0x68>)
 80012e8:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80012ea:	2310      	movs	r3, #16
 80012ec:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f2:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	a801      	add	r0, sp, #4
 80012f6:	f001 ff89 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80012fa:	b01d      	add	sp, #116	; 0x74
 80012fc:	bd30      	pop	{r4, r5, pc}
 80012fe:	bf00      	nop
 8001300:	00010020 	.word	0x00010020

08001304 <main>:
{
 8001304:	b508      	push	{r3, lr}
  HAL_Init();
 8001306:	f000 f961 	bl	80015cc <HAL_Init>
  SystemClock_Config();
 800130a:	f7ff ffc5 	bl	8001298 <SystemClock_Config>
  MX_GPIO_Init();
 800130e:	f7ff fe77 	bl	8001000 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001312:	f7ff fed7 	bl	80010c4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001316:	f000 f845 	bl	80013a4 <MX_SPI3_Init>
  MX_ADC1_Init();
 800131a:	f7ff fbf7 	bl	8000b0c <MX_ADC1_Init>
  MX_RTC_Init();
 800131e:	f000 f813 	bl	8001348 <MX_RTC_Init>
  MX_FREERTOS_Init(); 
 8001322:	f7ff fe1b 	bl	8000f5c <MX_FREERTOS_Init>
  osKernelStart();
 8001326:	f002 fb7d 	bl	8003a24 <osKernelStart>
 800132a:	e7fe      	b.n	800132a <main+0x26>

0800132c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800132e:	6802      	ldr	r2, [r0, #0]
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001332:	429a      	cmp	r2, r3
 8001334:	d000      	beq.n	8001338 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001336:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001338:	f000 f95a 	bl	80015f0 <HAL_IncTick>
}
 800133c:	e7fb      	b.n	8001336 <HAL_TIM_PeriodElapsedCallback+0xa>
 800133e:	bf00      	nop
 8001340:	40012c00 	.word	0x40012c00

08001344 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001344:	4770      	bx	lr
	...

08001348 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001348:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <MX_RTC_Init+0x28>)
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_RTC_Init+0x2c>)
 800134e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001350:	2300      	movs	r3, #0
 8001352:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001354:	227f      	movs	r2, #127	; 0x7f
 8001356:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001358:	22ff      	movs	r2, #255	; 0xff
 800135a:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800135c:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800135e:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001360:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001362:	f002 f89e 	bl	80034a2 <HAL_RTC_Init>
 8001366:	b900      	cbnz	r0, 800136a <MX_RTC_Init+0x22>
  {
    Error_Handler();
  }

}
 8001368:	bd08      	pop	{r3, pc}
    Error_Handler();
 800136a:	f7ff ffeb 	bl	8001344 <Error_Handler>
}
 800136e:	e7fb      	b.n	8001368 <MX_RTC_Init+0x20>
 8001370:	20001a88 	.word	0x20001a88
 8001374:	40002800 	.word	0x40002800

08001378 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001378:	6802      	ldr	r2, [r0, #0]
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_RTC_MspInit+0x24>)
 800137c:	429a      	cmp	r2, r3
 800137e:	d000      	beq.n	8001382 <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001380:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001386:	fa92 f2a2 	rbit	r2, r2
    __HAL_RCC_RTC_ENABLE();
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_RTC_MspInit+0x28>)
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	e7f2      	b.n	8001380 <HAL_RTC_MspInit+0x8>
 800139a:	bf00      	nop
 800139c:	40002800 	.word	0x40002800
 80013a0:	10908100 	.word	0x10908100

080013a4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80013a4:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 80013a6:	4810      	ldr	r0, [pc, #64]	; (80013e8 <MX_SPI3_Init+0x44>)
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_SPI3_Init+0x48>)
 80013aa:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013b0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	2300      	movs	r3, #0
 80013b4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ba:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013bc:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013be:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c4:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013c6:	2228      	movs	r2, #40	; 0x28
 80013c8:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ca:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013cc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ce:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013d0:	2207      	movs	r2, #7
 80013d2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013d4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d6:	2308      	movs	r3, #8
 80013d8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013da:	f002 f8c4 	bl	8003566 <HAL_SPI_Init>
 80013de:	b900      	cbnz	r0, 80013e2 <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 80013e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013e2:	f7ff ffaf 	bl	8001344 <Error_Handler>
}
 80013e6:	e7fb      	b.n	80013e0 <MX_SPI3_Init+0x3c>
 80013e8:	20001aa8 	.word	0x20001aa8
 80013ec:	40003c00 	.word	0x40003c00

080013f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f0:	b500      	push	{lr}
 80013f2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	2300      	movs	r3, #0
 80013f6:	9303      	str	r3, [sp, #12]
 80013f8:	9304      	str	r3, [sp, #16]
 80013fa:	9305      	str	r3, [sp, #20]
 80013fc:	9306      	str	r3, [sp, #24]
 80013fe:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_SPI_MspInit+0x70>)
 8001404:	429a      	cmp	r2, r3
 8001406:	d002      	beq.n	800140e <HAL_SPI_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001408:	b009      	add	sp, #36	; 0x24
 800140a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 800140e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001418:	61da      	str	r2, [r3, #28]
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001420:	9201      	str	r2, [sp, #4]
 8001422:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001436:	2338      	movs	r3, #56	; 0x38
 8001438:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001442:	2306      	movs	r3, #6
 8001444:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	a903      	add	r1, sp, #12
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <HAL_SPI_MspInit+0x74>)
 800144a:	f000 fef7 	bl	800223c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2105      	movs	r1, #5
 8001452:	2033      	movs	r0, #51	; 0x33
 8001454:	f000 fe8a 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001458:	2033      	movs	r0, #51	; 0x33
 800145a:	f000 febb 	bl	80021d4 <HAL_NVIC_EnableIRQ>
}
 800145e:	e7d3      	b.n	8001408 <HAL_SPI_MspInit+0x18>
 8001460:	40003c00 	.word	0x40003c00
 8001464:	48000400 	.word	0x48000400

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b500      	push	{lr}
 800146a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_MspInit+0x3c>)
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	619a      	str	r2, [r3, #24]
 8001476:	699a      	ldr	r2, [r3, #24]
 8001478:	f002 0201 	and.w	r2, r2, #1
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001486:	61da      	str	r2, [r3, #28]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	210f      	movs	r1, #15
 8001496:	f06f 0001 	mvn.w	r0, #1
 800149a:	f000 fe67 	bl	800216c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	b003      	add	sp, #12
 80014a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b500      	push	{lr}
 80014aa:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80014ac:	2200      	movs	r2, #0
 80014ae:	4601      	mov	r1, r0
 80014b0:	2019      	movs	r0, #25
 80014b2:	f000 fe5b 	bl	800216c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80014b6:	2019      	movs	r0, #25
 80014b8:	f000 fe8c 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_InitTick+0x68>)
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d0:	a902      	add	r1, sp, #8
 80014d2:	a803      	add	r0, sp, #12
 80014d4:	f001 fe7c 	bl	80031d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014d8:	f001 fe64 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_InitTick+0x6c>)
 80014de:	fba3 2300 	umull	r2, r3, r3, r0
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <HAL_InitTick+0x70>)
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_InitTick+0x74>)
 80014ea:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80014ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f0:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014f2:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014fa:	f002 fa55 	bl	80039a8 <HAL_TIM_Base_Init>
 80014fe:	b118      	cbz	r0, 8001508 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001500:	2001      	movs	r0, #1
}
 8001502:	b009      	add	sp, #36	; 0x24
 8001504:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <HAL_InitTick+0x70>)
 800150a:	f002 f925 	bl	8003758 <HAL_TIM_Base_Start_IT>
 800150e:	e7f8      	b.n	8001502 <HAL_InitTick+0x5a>
 8001510:	40021000 	.word	0x40021000
 8001514:	431bde83 	.word	0x431bde83
 8001518:	20001b0c 	.word	0x20001b0c
 800151c:	40012c00 	.word	0x40012c00

08001520 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	4770      	bx	lr

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler>

0800152a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	4770      	bx	lr

0800152c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 800152c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800152e:	4802      	ldr	r0, [pc, #8]	; (8001538 <ADC1_IRQHandler+0xc>)
 8001530:	f000 fb4e 	bl	8001bd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001534:	bd08      	pop	{r3, pc}
 8001536:	bf00      	nop
 8001538:	20001980 	.word	0x20001980

0800153c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800153c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800153e:	4802      	ldr	r0, [pc, #8]	; (8001548 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8001540:	f002 f924 	bl	800378c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001544:	bd08      	pop	{r3, pc}
 8001546:	bf00      	nop
 8001548:	20001b0c 	.word	0x20001b0c

0800154c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800154c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800154e:	4802      	ldr	r0, [pc, #8]	; (8001558 <SPI3_IRQHandler+0xc>)
 8001550:	f002 f868 	bl	8003624 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001554:	bd08      	pop	{r3, pc}
 8001556:	bf00      	nop
 8001558:	20001aa8 	.word	0x20001aa8

0800155c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SystemInit+0x18>)
 800155e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001562:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800156a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156e:	609a      	str	r2, [r3, #8]
#endif
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800157c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800157e:	e003      	b.n	8001588 <LoopCopyDataInit>

08001580 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001582:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001584:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001586:	3104      	adds	r1, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800158c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800158e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001590:	d3f6      	bcc.n	8001580 <CopyDataInit>
	ldr	r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001594:	e002      	b.n	800159c <LoopFillZerobss>

08001596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001596:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001598:	f842 3b04 	str.w	r3, [r2], #4

0800159c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <LoopForever+0x16>)
	cmp	r2, r3
 800159e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015a0:	d3f9      	bcc.n	8001596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015a2:	f7ff ffdb 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f004 f8f7 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015aa:	f7ff feab 	bl	8001304 <main>

080015ae <LoopForever>:

LoopForever:
    b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b0:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80015b4:	08007000 	.word	0x08007000
	ldr	r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015bc:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 80015c0:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 80015c4:	20001b90 	.word	0x20001b90

080015c8 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <COMP2_IRQHandler>
	...

080015cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_Init+0x20>)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 fdb5 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff ff62 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff ff40 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80015e8:	2000      	movs	r0, #0
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_IncTick+0x10>)
 80015f2:	6811      	ldr	r1, [r2, #0]
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_IncTick+0x14>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	440b      	add	r3, r1
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20001b4c 	.word	0x20001b4c
 8001604:	20000010 	.word	0x20000010

08001608 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001608:	4b01      	ldr	r3, [pc, #4]	; (8001610 <HAL_GetTick+0x8>)
 800160a:	6818      	ldr	r0, [r3, #0]
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20001b4c 	.word	0x20001b4c

08001614 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fff6 	bl	8001608 <HAL_GetTick>
 800161c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001622:	d002      	beq.n	800162a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <HAL_Delay+0x24>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800162a:	f7ff ffed 	bl	8001608 <HAL_GetTick>
 800162e:	1b40      	subs	r0, r0, r5
 8001630:	42a0      	cmp	r0, r4
 8001632:	d3fa      	bcc.n	800162a <HAL_Delay+0x16>
  {
  }
}
 8001634:	bd38      	pop	{r3, r4, r5, pc}
 8001636:	bf00      	nop
 8001638:	20000010 	.word	0x20000010

0800163c <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800163c:	4770      	bx	lr

0800163e <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800163e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001640:	6802      	ldr	r2, [r0, #0]
 8001642:	6893      	ldr	r3, [r2, #8]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d001      	beq.n	8001650 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800164c:	2000      	movs	r0, #0
}
 800164e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	f013 0f01 	tst.w	r3, #1
 8001656:	d02f      	beq.n	80016b8 <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001658:	6893      	ldr	r3, [r2, #8]
 800165a:	f003 030d 	and.w	r3, r3, #13
 800165e:	2b01      	cmp	r3, #1
 8001660:	d009      	beq.n	8001676 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001662:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
 8001674:	e7eb      	b.n	800164e <ADC_Disable+0x10>
 8001676:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8001678:	6893      	ldr	r3, [r2, #8]
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	6093      	str	r3, [r2, #8]
 8001680:	6803      	ldr	r3, [r0, #0]
 8001682:	2203      	movs	r2, #3
 8001684:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001686:	f7ff ffbf 	bl	8001608 <HAL_GetTick>
 800168a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f013 0f01 	tst.w	r3, #1
 8001694:	d00e      	beq.n	80016b4 <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001696:	f7ff ffb7 	bl	8001608 <HAL_GetTick>
 800169a:	1b40      	subs	r0, r0, r5
 800169c:	2802      	cmp	r0, #2
 800169e:	d9f5      	bls.n	800168c <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80016b0:	2001      	movs	r0, #1
 80016b2:	e7cc      	b.n	800164e <ADC_Disable+0x10>
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	e7ca      	b.n	800164e <ADC_Disable+0x10>
 80016b8:	2000      	movs	r0, #0
 80016ba:	e7c8      	b.n	800164e <ADC_Disable+0x10>

080016bc <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016bc:	6803      	ldr	r3, [r0, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	f012 0f0c 	tst.w	r2, #12
 80016c4:	d061      	beq.n	800178a <ADC_ConversionStop+0xce>
{
 80016c6:	b570      	push	{r4, r5, r6, lr}
 80016c8:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80016d0:	d004      	beq.n	80016dc <ADC_ConversionStop+0x20>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80016d2:	8b00      	ldrh	r0, [r0, #24]
 80016d4:	f240 1201 	movw	r2, #257	; 0x101
 80016d8:	4290      	cmp	r0, r2
 80016da:	d042      	beq.n	8001762 <ADC_ConversionStop+0xa6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80016dc:	2960      	cmp	r1, #96	; 0x60
 80016de:	d00c      	beq.n	80016fa <ADC_ConversionStop+0x3e>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	f012 0f04 	tst.w	r2, #4
 80016e8:	d007      	beq.n	80016fa <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80016ea:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80016ec:	f012 0f02 	tst.w	r2, #2
 80016f0:	d103      	bne.n	80016fa <ADC_ConversionStop+0x3e>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	f042 0210 	orr.w	r2, r2, #16
 80016f8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80016fa:	290c      	cmp	r1, #12
 80016fc:	d00c      	beq.n	8001718 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	f012 0f08 	tst.w	r2, #8
 8001706:	d007      	beq.n	8001718 <ADC_ConversionStop+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001708:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800170a:	f012 0f02 	tst.w	r2, #2
 800170e:	d103      	bne.n	8001718 <ADC_ConversionStop+0x5c>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	f042 0220 	orr.w	r2, r2, #32
 8001716:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001718:	2960      	cmp	r1, #96	; 0x60
 800171a:	d032      	beq.n	8001782 <ADC_ConversionStop+0xc6>
 800171c:	296c      	cmp	r1, #108	; 0x6c
 800171e:	d12e      	bne.n	800177e <ADC_ConversionStop+0xc2>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001720:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001722:	f7ff ff71 	bl	8001608 <HAL_GetTick>
 8001726:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	422b      	tst	r3, r5
 800172e:	d02a      	beq.n	8001786 <ADC_ConversionStop+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001730:	f7ff ff6a 	bl	8001608 <HAL_GetTick>
 8001734:	1b80      	subs	r0, r0, r6
 8001736:	280b      	cmp	r0, #11
 8001738:	d9f6      	bls.n	8001728 <ADC_ConversionStop+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6463      	str	r3, [r4, #68]	; 0x44
        
        return HAL_ERROR;
 800174a:	2001      	movs	r0, #1
 800174c:	e01c      	b.n	8001788 <ADC_ConversionStop+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001750:	f043 0310 	orr.w	r3, r3, #16
 8001754:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001756:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
 8001760:	e012      	b.n	8001788 <ADC_ConversionStop+0xcc>
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001762:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	f011 0f40 	tst.w	r1, #64	; 0x40
 800176a:	d104      	bne.n	8001776 <ADC_ConversionStop+0xba>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800176c:	4908      	ldr	r1, [pc, #32]	; (8001790 <ADC_ConversionStop+0xd4>)
 800176e:	428a      	cmp	r2, r1
 8001770:	d8ed      	bhi.n	800174e <ADC_ConversionStop+0x92>
        Conversion_Timeout_CPU_cycles ++;
 8001772:	3201      	adds	r2, #1
 8001774:	e7f6      	b.n	8001764 <ADC_ConversionStop+0xa8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001776:	2240      	movs	r2, #64	; 0x40
 8001778:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 800177a:	210c      	movs	r1, #12
 800177c:	e7b0      	b.n	80016e0 <ADC_ConversionStop+0x24>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800177e:	2504      	movs	r5, #4
        break;
 8001780:	e7cf      	b.n	8001722 <ADC_ConversionStop+0x66>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001782:	2508      	movs	r5, #8
 8001784:	e7cd      	b.n	8001722 <ADC_ConversionStop+0x66>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001786:	2000      	movs	r0, #0
}
 8001788:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800178a:	2000      	movs	r0, #0
}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	000993ff 	.word	0x000993ff

08001794 <ADC_Enable>:
{
 8001794:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001796:	6802      	ldr	r2, [r0, #0]
 8001798:	6893      	ldr	r3, [r2, #8]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d00d      	beq.n	80017be <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017a2:	6891      	ldr	r1, [r2, #8]
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <ADC_Enable+0x74>)
 80017a6:	4219      	tst	r1, r3
 80017a8:	d00f      	beq.n	80017ca <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80017ba:	2001      	movs	r0, #1
}
 80017bc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017be:	6813      	ldr	r3, [r2, #0]
 80017c0:	f013 0f01 	tst.w	r3, #1
 80017c4:	d0ed      	beq.n	80017a2 <ADC_Enable+0xe>
  return HAL_OK;
 80017c6:	2000      	movs	r0, #0
 80017c8:	e7f8      	b.n	80017bc <ADC_Enable+0x28>
 80017ca:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80017cc:	6893      	ldr	r3, [r2, #8]
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80017d4:	f7ff ff18 	bl	8001608 <HAL_GetTick>
 80017d8:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f013 0f01 	tst.w	r3, #1
 80017e2:	d10e      	bne.n	8001802 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017e4:	f7ff ff10 	bl	8001608 <HAL_GetTick>
 80017e8:	1b40      	subs	r0, r0, r5
 80017ea:	2802      	cmp	r0, #2
 80017ec:	d9f5      	bls.n	80017da <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e7dc      	b.n	80017bc <ADC_Enable+0x28>
  return HAL_OK;
 8001802:	2000      	movs	r0, #0
 8001804:	e7da      	b.n	80017bc <ADC_Enable+0x28>
 8001806:	bf00      	nop
 8001808:	8000003f 	.word	0x8000003f

0800180c <HAL_ADC_Init>:
{
 800180c:	b530      	push	{r4, r5, lr}
 800180e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001814:	2800      	cmp	r0, #0
 8001816:	f000 80df 	beq.w	80019d8 <HAL_ADC_Init+0x1cc>
 800181a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800181e:	f013 0f10 	tst.w	r3, #16
 8001822:	d152      	bne.n	80018ca <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001824:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001826:	b1ab      	cbz	r3, 8001854 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001828:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001832:	d003      	beq.n	800183c <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001834:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001836:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800183a:	d047      	beq.n	80018cc <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 800183c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800183e:	f023 0312 	bic.w	r3, r3, #18
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8001850:	2001      	movs	r0, #1
 8001852:	e03b      	b.n	80018cc <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001854:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 8001856:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001858:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 800185a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800185e:	f7ff f9ab 	bl	8000bb8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800186a:	d001      	beq.n	8001870 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186c:	2000      	movs	r0, #0
 800186e:	e7dc      	b.n	800182a <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fee4 	bl	800163e <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001878:	f013 0f10 	tst.w	r3, #16
 800187c:	d1d5      	bne.n	800182a <HAL_ADC_Init+0x1e>
 800187e:	2800      	cmp	r0, #0
 8001880:	d1d3      	bne.n	800182a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001884:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001888:	f023 0302 	bic.w	r3, r3, #2
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001892:	6822      	ldr	r2, [r4, #0]
 8001894:	6893      	ldr	r3, [r2, #8]
 8001896:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800189a:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800189c:	6822      	ldr	r2, [r4, #0]
 800189e:	6893      	ldr	r3, [r2, #8]
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a6:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_ADC_Init+0x1d0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_ADC_Init+0x1d4>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	0c9b      	lsrs	r3, r3, #18
 80018b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018b6:	005a      	lsls	r2, r3, #1
 80018b8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80018ba:	e002      	b.n	80018c2 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 80018bc:	9b01      	ldr	r3, [sp, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80018c2:	9b01      	ldr	r3, [sp, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <HAL_ADC_Init+0xb0>
 80018c8:	e7af      	b.n	800182a <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ca:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ce:	f013 0f10 	tst.w	r3, #16
 80018d2:	d178      	bne.n	80019c6 <HAL_ADC_Init+0x1ba>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d176      	bne.n	80019c6 <HAL_ADC_Init+0x1ba>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018d8:	6821      	ldr	r1, [r4, #0]
 80018da:	688a      	ldr	r2, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80018dc:	f012 0204 	ands.w	r2, r2, #4
 80018e0:	d171      	bne.n	80019c6 <HAL_ADC_Init+0x1ba>
    ADC_STATE_CLR_SET(hadc->State,
 80018e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6423      	str	r3, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018ee:	688b      	ldr	r3, [r1, #8]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d045      	beq.n	8001984 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018f8:	493a      	ldr	r1, [pc, #232]	; (80019e4 <HAL_ADC_Init+0x1d8>)
 80018fa:	688b      	ldr	r3, [r1, #8]
 80018fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001900:	6865      	ldr	r5, [r4, #4]
 8001902:	432b      	orrs	r3, r5
 8001904:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001906:	7e61      	ldrb	r1, [r4, #25]
 8001908:	034b      	lsls	r3, r1, #13
 800190a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800190c:	2d01      	cmp	r5, #1
 800190e:	d001      	beq.n	8001914 <HAL_ADC_Init+0x108>
 8001910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001914:	4313      	orrs	r3, r2
 8001916:	68e2      	ldr	r2, [r4, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	68a2      	ldr	r2, [r4, #8]
 800191c:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800191e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001922:	2a01      	cmp	r2, #1
 8001924:	d033      	beq.n	800198e <HAL_ADC_Init+0x182>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001926:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001928:	2a01      	cmp	r2, #1
 800192a:	d002      	beq.n	8001932 <HAL_ADC_Init+0x126>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800192c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800192e:	430a      	orrs	r2, r1
 8001930:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	6891      	ldr	r1, [r2, #8]
 8001936:	f011 0f0c 	tst.w	r1, #12
 800193a:	d10c      	bne.n	8001956 <HAL_ADC_Init+0x14a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800193c:	68d1      	ldr	r1, [r2, #12]
 800193e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001942:	f021 0102 	bic.w	r1, r1, #2
 8001946:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001948:	7e21      	ldrb	r1, [r4, #24]
 800194a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800194e:	0052      	lsls	r2, r2, #1
 8001950:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001954:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8001956:	6821      	ldr	r1, [r4, #0]
 8001958:	68cd      	ldr	r5, [r1, #12]
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <HAL_ADC_Init+0x1dc>)
 800195c:	402a      	ands	r2, r5
 800195e:	4313      	orrs	r3, r2
 8001960:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001962:	6923      	ldr	r3, [r4, #16]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d025      	beq.n	80019b4 <HAL_ADC_Init+0x1a8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800196c:	f023 030f 	bic.w	r3, r3, #15
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001972:	2300      	movs	r3, #0
 8001974:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001978:	f023 0303 	bic.w	r3, r3, #3
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6423      	str	r3, [r4, #64]	; 0x40
 8001982:	e027      	b.n	80019d4 <HAL_ADC_Init+0x1c8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001984:	680b      	ldr	r3, [r1, #0]
 8001986:	f013 0f01 	tst.w	r3, #1
 800198a:	d1bc      	bne.n	8001906 <HAL_ADC_Init+0xfa>
 800198c:	e7b4      	b.n	80018f8 <HAL_ADC_Init+0xec>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800198e:	b931      	cbnz	r1, 800199e <HAL_ADC_Init+0x192>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001990:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001992:	3a01      	subs	r2, #1
 8001994:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	e7c3      	b.n	8001926 <HAL_ADC_Init+0x11a>
        ADC_STATE_CLR_SET(hadc->State,
 800199e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019a0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80019a4:	f042 0220 	orr.w	r2, r2, #32
 80019a8:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	6462      	str	r2, [r4, #68]	; 0x44
 80019b2:	e7b8      	b.n	8001926 <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019b4:	6821      	ldr	r1, [r4, #0]
 80019b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80019b8:	f023 030f 	bic.w	r3, r3, #15
 80019bc:	69e2      	ldr	r2, [r4, #28]
 80019be:	3a01      	subs	r2, #1
 80019c0:	4313      	orrs	r3, r2
 80019c2:	630b      	str	r3, [r1, #48]	; 0x30
 80019c4:	e7d5      	b.n	8001972 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019c8:	f023 0312 	bic.w	r3, r3, #18
 80019cc:	f043 0310 	orr.w	r3, r3, #16
 80019d0:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 80019d2:	2001      	movs	r0, #1
}
 80019d4:	b003      	add	sp, #12
 80019d6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
 80019da:	e7fb      	b.n	80019d4 <HAL_ADC_Init+0x1c8>
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	431bde83 	.word	0x431bde83
 80019e4:	50000300 	.word	0x50000300
 80019e8:	fff0c007 	.word	0xfff0c007

080019ec <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ec:	6803      	ldr	r3, [r0, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f013 0f04 	tst.w	r3, #4
 80019f4:	d13e      	bne.n	8001a74 <HAL_ADC_Start+0x88>
    __HAL_LOCK(hadc);
 80019f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d03d      	beq.n	8001a7a <HAL_ADC_Start+0x8e>
{
 80019fe:	b510      	push	{r4, lr}
 8001a00:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8001a02:	2301      	movs	r3, #1
 8001a04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8001a08:	f7ff fec4 	bl	8001794 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	bb68      	cbnz	r0, 8001a6c <HAL_ADC_Start+0x80>
      ADC_STATE_CLR_SET(hadc->State,
 8001a10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a12:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a1e:	6422      	str	r2, [r4, #64]	; 0x40
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a22:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001a26:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	68d1      	ldr	r1, [r2, #12]
 8001a2c:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001a30:	d005      	beq.n	8001a3e <HAL_ADC_Start+0x52>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001a34:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001a38:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001a3c:	6421      	str	r1, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001a40:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 8001a44:	d00f      	beq.n	8001a66 <HAL_ADC_Start+0x7a>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001a48:	f021 0106 	bic.w	r1, r1, #6
 8001a4c:	6461      	str	r1, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a54:	211c      	movs	r1, #28
 8001a56:	6011      	str	r1, [r2, #0]
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a58:	6821      	ldr	r1, [r4, #0]
 8001a5a:	688a      	ldr	r2, [r1, #8]
 8001a5c:	f042 0204 	orr.w	r2, r2, #4
 8001a60:	608a      	str	r2, [r1, #8]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd10      	pop	{r4, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	2100      	movs	r1, #0
 8001a68:	6461      	str	r1, [r4, #68]	; 0x44
 8001a6a:	e7f0      	b.n	8001a4e <HAL_ADC_Start+0x62>
      __HAL_UNLOCK(hadc);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 8001a72:	e7f6      	b.n	8001a62 <HAL_ADC_Start+0x76>
    tmp_hal_status = HAL_BUSY;
 8001a74:	2302      	movs	r3, #2
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e7fb      	b.n	8001a76 <HAL_ADC_Start+0x8a>

08001a7e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001a7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d01d      	beq.n	8001ac2 <HAL_ADC_Stop+0x44>
{
 8001a86:	b510      	push	{r4, lr}
 8001a88:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a90:	216c      	movs	r1, #108	; 0x6c
 8001a92:	f7ff fe13 	bl	80016bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001a96:	4603      	mov	r3, r0
 8001a98:	b120      	cbz	r0, 8001aa4 <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fdca 	bl	800163e <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d1f4      	bne.n	8001a9a <HAL_ADC_Stop+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ab2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	6422      	str	r2, [r4, #64]	; 0x40
 8001ac0:	e7eb      	b.n	8001a9a <HAL_ADC_Stop+0x1c>
  __HAL_LOCK(hadc);
 8001ac2:	2302      	movs	r3, #2
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_PollForConversion>:
{
 8001ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001acc:	6943      	ldr	r3, [r0, #20]
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d041      	beq.n	8001b56 <HAL_ADC_PollForConversion+0x8e>
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_ADC_PollForConversion+0xf4>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f013 0f1f 	tst.w	r3, #31
 8001ada:	d12c      	bne.n	8001b36 <HAL_ADC_PollForConversion+0x6e>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001adc:	6803      	ldr	r3, [r0, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f013 0f01 	tst.w	r3, #1
 8001ae4:	d11e      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x5c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ae6:	260c      	movs	r6, #12
 8001ae8:	460d      	mov	r5, r1
 8001aea:	4604      	mov	r4, r0
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001aec:	6803      	ldr	r3, [r0, #0]
 8001aee:	68df      	ldr	r7, [r3, #12]
  tickstart = HAL_GetTick();  
 8001af0:	f7ff fd8a 	bl	8001608 <HAL_GetTick>
 8001af4:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4216      	tst	r6, r2
 8001afc:	d12d      	bne.n	8001b5a <HAL_ADC_PollForConversion+0x92>
    if(Timeout != HAL_MAX_DELAY)
 8001afe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b02:	d0f8      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b04:	b12d      	cbz	r5, 8001b12 <HAL_ADC_PollForConversion+0x4a>
 8001b06:	f7ff fd7f 	bl	8001608 <HAL_GetTick>
 8001b0a:	eba0 0008 	sub.w	r0, r0, r8
 8001b0e:	42a8      	cmp	r0, r5
 8001b10:	d9f1      	bls.n	8001af6 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001b20:	2003      	movs	r0, #3
 8001b22:	e047      	b.n	8001bb4 <HAL_ADC_PollForConversion+0xec>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b24:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
 8001b34:	e03e      	b.n	8001bb4 <HAL_ADC_PollForConversion+0xec>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_ADC_PollForConversion+0xf4>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x7c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001b40:	260c      	movs	r6, #12
 8001b42:	e7d1      	b.n	8001ae8 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b46:	f043 0320 	orr.w	r3, r3, #32
 8001b4a:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
 8001b54:	e02e      	b.n	8001bb4 <HAL_ADC_PollForConversion+0xec>
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001b56:	2608      	movs	r6, #8
 8001b58:	e7c6      	b.n	8001ae8 <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b60:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001b68:	d11f      	bne.n	8001baa <HAL_ADC_PollForConversion+0xe2>
 8001b6a:	f417 5f00 	tst.w	r7, #8192	; 0x2000
 8001b6e:	d11c      	bne.n	8001baa <HAL_ADC_PollForConversion+0xe2>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f012 0f08 	tst.w	r2, #8
 8001b76:	d018      	beq.n	8001baa <HAL_ADC_PollForConversion+0xe2>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	f012 0f04 	tst.w	r2, #4
 8001b7e:	d10c      	bne.n	8001b9a <HAL_ADC_PollForConversion+0xd2>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b86:	6422      	str	r2, [r4, #64]	; 0x40
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b8a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001b8e:	d10c      	bne.n	8001baa <HAL_ADC_PollForConversion+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	6422      	str	r2, [r4, #64]	; 0x40
 8001b98:	e007      	b.n	8001baa <HAL_ADC_PollForConversion+0xe2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001baa:	f417 4f80 	tst.w	r7, #16384	; 0x4000
 8001bae:	d103      	bne.n	8001bb8 <HAL_ADC_PollForConversion+0xf0>
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001bb0:	601e      	str	r6, [r3, #0]
  return HAL_OK;
 8001bb2:	2000      	movs	r0, #0
}
 8001bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e7fb      	b.n	8001bb4 <HAL_ADC_PollForConversion+0xec>
 8001bbc:	50000300 	.word	0x50000300

08001bc0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001bc0:	6803      	ldr	r3, [r0, #0]
 8001bc2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
}
 8001bc8:	4770      	bx	lr

08001bca <HAL_ADCEx_LevelOutOfWindow2Callback>:
}
 8001bca:	4770      	bx	lr

08001bcc <HAL_ADCEx_LevelOutOfWindow3Callback>:
}
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_ADC_IRQHandler>:
{
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001bd4:	6803      	ldr	r3, [r0, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	f012 0f04 	tst.w	r2, #4
 8001bdc:	d003      	beq.n	8001be6 <HAL_ADC_IRQHandler+0x16>
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	f012 0f04 	tst.w	r2, #4
 8001be4:	d107      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x26>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001be6:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001be8:	f012 0f08 	tst.w	r2, #8
 8001bec:	d03a      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x94>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	f012 0f08 	tst.w	r2, #8
 8001bf4:	d036      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x94>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bf8:	f012 0f10 	tst.w	r2, #16
 8001bfc:	d103      	bne.n	8001c06 <HAL_ADC_IRQHandler+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c04:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c06:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001c0e:	d123      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x88>
 8001c10:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8001c14:	d120      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x88>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f012 0f08 	tst.w	r2, #8
 8001c1c:	d01c      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x88>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	f012 0f04 	tst.w	r2, #4
 8001c24:	d110      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x78>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	f022 020c 	bic.w	r2, r2, #12
 8001c2c:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c34:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c38:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x88>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6423      	str	r3, [r4, #64]	; 0x40
 8001c46:	e007      	b.n	8001c58 <HAL_ADC_IRQHandler+0x88>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f7ff f969 	bl	8000f30 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	220c      	movs	r2, #12
 8001c62:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	f012 0f20 	tst.w	r2, #32
 8001c6c:	d003      	beq.n	8001c76 <HAL_ADC_IRQHandler+0xa6>
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	f012 0f20 	tst.w	r2, #32
 8001c74:	d107      	bne.n	8001c86 <HAL_ADC_IRQHandler+0xb6>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001c76:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001c78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c7c:	d041      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x132>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c84:	d03d      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x132>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c8c:	6422      	str	r2, [r4, #64]	; 0x40
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c8e:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8001c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c92:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8001c96:	d009      	beq.n	8001cac <HAL_ADC_IRQHandler+0xdc>
 8001c98:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8001c9c:	d12b      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x126>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c9e:	68da      	ldr	r2, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8001ca0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001ca4:	d127      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x126>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ca6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8001caa:	d124      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x126>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001cb2:	d020      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x126>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001cb4:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001cb6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001cba:	d11c      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x126>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	f012 0f08 	tst.w	r2, #8
 8001cc2:	d110      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0x116>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cca:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cd2:	6423      	str	r3, [r4, #64]	; 0x40
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cd6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cda:	d10c      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x126>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6423      	str	r3, [r4, #64]	; 0x40
 8001ce4:	e007      	b.n	8001cf6 <HAL_ADC_IRQHandler+0x126>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce8:	f043 0310 	orr.w	r3, r3, #16
 8001cec:	6423      	str	r3, [r4, #64]	; 0x40
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff ff65 	bl	8001bc6 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	2260      	movs	r2, #96	; 0x60
 8001d00:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d0a:	d003      	beq.n	8001d14 <HAL_ADC_IRQHandler+0x144>
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d12:	d13e      	bne.n	8001d92 <HAL_ADC_IRQHandler+0x1c2>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d1c:	d003      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x156>
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d24:	d140      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x1d8>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001d2e:	d003      	beq.n	8001d38 <HAL_ADC_IRQHandler+0x168>
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001d36:	d143      	bne.n	8001dc0 <HAL_ADC_IRQHandler+0x1f0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f012 0f10 	tst.w	r2, #16
 8001d40:	d01d      	beq.n	8001d7e <HAL_ADC_IRQHandler+0x1ae>
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	f012 0f10 	tst.w	r2, #16
 8001d48:	d019      	beq.n	8001d7e <HAL_ADC_IRQHandler+0x1ae>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d4c:	2a01      	cmp	r2, #1
 8001d4e:	d008      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x192>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001d50:	4a2c      	ldr	r2, [pc, #176]	; (8001e04 <HAL_ADC_IRQHandler+0x234>)
 8001d52:	6892      	ldr	r2, [r2, #8]
 8001d54:	f012 0f1f 	tst.w	r2, #31
 8001d58:	d13e      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0x208>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f013 0f01 	tst.w	r3, #1
 8001d60:	d00a      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d68:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7ff f8e4 	bl	8000f40 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001d86:	d003      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x1c0>
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001d8e:	d129      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x214>
}
 8001d90:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff fc4e 	bl	800163c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e7b5      	b.n	8001d14 <HAL_ADC_IRQHandler+0x144>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dae:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff ff0a 	bl	8001bca <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e7b2      	b.n	8001d26 <HAL_ADC_IRQHandler+0x156>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc6:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff feff 	bl	8001bcc <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e7af      	b.n	8001d38 <HAL_ADC_IRQHandler+0x168>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_ADC_IRQHandler+0x234>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8001de0:	d0ca      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x1a8>
 8001de2:	e7be      	b.n	8001d62 <HAL_ADC_IRQHandler+0x192>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001de4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dea:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001dee:	f042 0208 	orr.w	r2, r2, #8
 8001df2:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df8:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff fee4 	bl	8001bc8 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8001e00:	e7c6      	b.n	8001d90 <HAL_ADC_IRQHandler+0x1c0>
 8001e02:	bf00      	nop
 8001e04:	50000300 	.word	0x50000300

08001e08 <HAL_ADC_ConfigChannel>:
{
 8001e08:	b430      	push	{r4, r5}
 8001e0a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001e10:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001e14:	2a01      	cmp	r2, #1
 8001e16:	f000 818e 	beq.w	8002136 <HAL_ADC_ConfigChannel+0x32e>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e22:	6800      	ldr	r0, [r0, #0]
 8001e24:	6882      	ldr	r2, [r0, #8]
 8001e26:	f012 0f04 	tst.w	r2, #4
 8001e2a:	f040 8179 	bne.w	8002120 <HAL_ADC_ConfigChannel+0x318>
    if (sConfig->Rank < 5U)
 8001e2e:	684a      	ldr	r2, [r1, #4]
 8001e30:	2a04      	cmp	r2, #4
 8001e32:	d831      	bhi.n	8001e98 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8001e34:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e3a:	0055      	lsls	r5, r2, #1
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	40aa      	lsls	r2, r5
 8001e40:	ea24 0202 	bic.w	r2, r4, r2
 8001e44:	680c      	ldr	r4, [r1, #0]
 8001e46:	40ac      	lsls	r4, r5
 8001e48:	4322      	orrs	r2, r4
 8001e4a:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	6882      	ldr	r2, [r0, #8]
 8001e50:	f012 0f0c 	tst.w	r2, #12
 8001e54:	d168      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e56:	680a      	ldr	r2, [r1, #0]
 8001e58:	2a09      	cmp	r2, #9
 8001e5a:	d94e      	bls.n	8001efa <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e5c:	6984      	ldr	r4, [r0, #24]
 8001e5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e62:	3a1e      	subs	r2, #30
 8001e64:	2507      	movs	r5, #7
 8001e66:	4095      	lsls	r5, r2
 8001e68:	ea24 0405 	bic.w	r4, r4, r5
 8001e6c:	688d      	ldr	r5, [r1, #8]
 8001e6e:	fa05 f202 	lsl.w	r2, r5, r2
 8001e72:	4322      	orrs	r2, r4
 8001e74:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e76:	6948      	ldr	r0, [r1, #20]
 8001e78:	681c      	ldr	r4, [r3, #0]
 8001e7a:	68e2      	ldr	r2, [r4, #12]
 8001e7c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001e80:	0052      	lsls	r2, r2, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001e86:	6908      	ldr	r0, [r1, #16]
 8001e88:	3801      	subs	r0, #1
 8001e8a:	2803      	cmp	r0, #3
 8001e8c:	f200 808b 	bhi.w	8001fa6 <HAL_ADC_ConfigChannel+0x19e>
 8001e90:	e8df f000 	tbb	[pc, r0]
 8001e94:	7e736840 	.word	0x7e736840
    else if (sConfig->Rank < 10U)
 8001e98:	2a09      	cmp	r2, #9
 8001e9a:	d80e      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001e9c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ea2:	0055      	lsls	r5, r2, #1
 8001ea4:	3d1e      	subs	r5, #30
 8001ea6:	221f      	movs	r2, #31
 8001ea8:	40aa      	lsls	r2, r5
 8001eaa:	ea24 0202 	bic.w	r2, r4, r2
 8001eae:	680c      	ldr	r4, [r1, #0]
 8001eb0:	fa04 f505 	lsl.w	r5, r4, r5
 8001eb4:	432a      	orrs	r2, r5
 8001eb6:	6342      	str	r2, [r0, #52]	; 0x34
 8001eb8:	e7c8      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001eba:	2a0e      	cmp	r2, #14
 8001ebc:	d80e      	bhi.n	8001edc <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ebe:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ec0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ec4:	0055      	lsls	r5, r2, #1
 8001ec6:	3d3c      	subs	r5, #60	; 0x3c
 8001ec8:	221f      	movs	r2, #31
 8001eca:	40aa      	lsls	r2, r5
 8001ecc:	ea24 0202 	bic.w	r2, r4, r2
 8001ed0:	680c      	ldr	r4, [r1, #0]
 8001ed2:	fa04 f505 	lsl.w	r5, r4, r5
 8001ed6:	432a      	orrs	r2, r5
 8001ed8:	6382      	str	r2, [r0, #56]	; 0x38
 8001eda:	e7b7      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001edc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ede:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ee2:	0055      	lsls	r5, r2, #1
 8001ee4:	3d5a      	subs	r5, #90	; 0x5a
 8001ee6:	221f      	movs	r2, #31
 8001ee8:	40aa      	lsls	r2, r5
 8001eea:	ea24 0202 	bic.w	r2, r4, r2
 8001eee:	680c      	ldr	r4, [r1, #0]
 8001ef0:	fa04 f505 	lsl.w	r5, r4, r5
 8001ef4:	432a      	orrs	r2, r5
 8001ef6:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001ef8:	e7a8      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001efa:	6944      	ldr	r4, [r0, #20]
 8001efc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f00:	2507      	movs	r5, #7
 8001f02:	4095      	lsls	r5, r2
 8001f04:	ea24 0405 	bic.w	r4, r4, r5
 8001f08:	688d      	ldr	r5, [r1, #8]
 8001f0a:	fa05 f202 	lsl.w	r2, r5, r2
 8001f0e:	4322      	orrs	r2, r4
 8001f10:	6142      	str	r2, [r0, #20]
 8001f12:	e7b0      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f14:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f16:	4d89      	ldr	r5, [pc, #548]	; (800213c <HAL_ADC_ConfigChannel+0x334>)
 8001f18:	4005      	ands	r5, r0
 8001f1a:	6808      	ldr	r0, [r1, #0]
 8001f1c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001f20:	4315      	orrs	r5, r2
 8001f22:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001f26:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	6882      	ldr	r2, [r0, #8]
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	2a01      	cmp	r2, #1
 8001f32:	d06b      	beq.n	800200c <HAL_ADC_ConfigChannel+0x204>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f34:	68ca      	ldr	r2, [r1, #12]
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d06e      	beq.n	8002018 <HAL_ADC_ConfigChannel+0x210>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f3a:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001f3e:	680d      	ldr	r5, [r1, #0]
 8001f40:	2401      	movs	r4, #1
 8001f42:	40ac      	lsls	r4, r5
 8001f44:	ea22 0204 	bic.w	r2, r2, r4
 8001f48:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f4c:	680a      	ldr	r2, [r1, #0]
 8001f4e:	2a10      	cmp	r2, #16
 8001f50:	f000 808b 	beq.w	800206a <HAL_ADC_ConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f54:	2a11      	cmp	r2, #17
 8001f56:	f000 809c 	beq.w	8002092 <HAL_ADC_ConfigChannel+0x28a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f5a:	2a12      	cmp	r2, #18
 8001f5c:	f000 809f 	beq.w	800209e <HAL_ADC_ConfigChannel+0x296>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	2000      	movs	r0, #0
 8001f62:	e0e2      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f64:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001f66:	4d75      	ldr	r5, [pc, #468]	; (800213c <HAL_ADC_ConfigChannel+0x334>)
 8001f68:	4005      	ands	r5, r0
 8001f6a:	6808      	ldr	r0, [r1, #0]
 8001f6c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001f70:	4315      	orrs	r5, r2
 8001f72:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001f76:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 8001f78:	e7d6      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f7a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001f7c:	4d6f      	ldr	r5, [pc, #444]	; (800213c <HAL_ADC_ConfigChannel+0x334>)
 8001f7e:	4005      	ands	r5, r0
 8001f80:	6808      	ldr	r0, [r1, #0]
 8001f82:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001f86:	4315      	orrs	r5, r2
 8001f88:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001f8c:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001f8e:	e7cb      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f90:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001f92:	486a      	ldr	r0, [pc, #424]	; (800213c <HAL_ADC_ConfigChannel+0x334>)
 8001f94:	4028      	ands	r0, r5
 8001f96:	680d      	ldr	r5, [r1, #0]
 8001f98:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001f9c:	4302      	orrs	r2, r0
 8001f9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fa2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001fa4:	e7c0      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fa8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001fac:	6808      	ldr	r0, [r1, #0]
 8001fae:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001fb2:	d01c      	beq.n	8001fee <HAL_ADC_ConfigChannel+0x1e6>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001fb8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001fbc:	680c      	ldr	r4, [r1, #0]
 8001fbe:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001fc2:	d019      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x1f0>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001fc8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001fcc:	680c      	ldr	r4, [r1, #0]
 8001fce:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001fd2:	d016      	beq.n	8002002 <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001fd8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001fdc:	680c      	ldr	r4, [r1, #0]
 8001fde:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001fe2:	d1a1      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001fe4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001fe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fea:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001fec:	e79c      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001fee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001ff0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ff4:	6622      	str	r2, [r4, #96]	; 0x60
 8001ff6:	e7dd      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1ac>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ff8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ffe:	6642      	str	r2, [r0, #100]	; 0x64
 8002000:	e7e0      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x1bc>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002002:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002004:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002008:	6682      	str	r2, [r0, #104]	; 0x68
 800200a:	e7e3      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x1cc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800200c:	6802      	ldr	r2, [r0, #0]
 800200e:	f012 0f01 	tst.w	r2, #1
 8002012:	d08f      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	2000      	movs	r0, #0
 8002016:	e088      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002018:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800201c:	680d      	ldr	r5, [r1, #0]
 800201e:	2401      	movs	r4, #1
 8002020:	40ac      	lsls	r4, r5
 8002022:	4322      	orrs	r2, r4
 8002024:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002028:	680a      	ldr	r2, [r1, #0]
 800202a:	2a09      	cmp	r2, #9
 800202c:	d90e      	bls.n	800204c <HAL_ADC_ConfigChannel+0x244>
        MODIFY_REG(hadc->Instance->SMPR2,
 800202e:	681d      	ldr	r5, [r3, #0]
 8002030:	69a8      	ldr	r0, [r5, #24]
 8002032:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002036:	3a1b      	subs	r2, #27
 8002038:	2407      	movs	r4, #7
 800203a:	4094      	lsls	r4, r2
 800203c:	ea20 0004 	bic.w	r0, r0, r4
 8002040:	688c      	ldr	r4, [r1, #8]
 8002042:	fa04 f202 	lsl.w	r2, r4, r2
 8002046:	4302      	orrs	r2, r0
 8002048:	61aa      	str	r2, [r5, #24]
 800204a:	e77f      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 800204c:	681d      	ldr	r5, [r3, #0]
 800204e:	6968      	ldr	r0, [r5, #20]
 8002050:	3201      	adds	r2, #1
 8002052:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002056:	2407      	movs	r4, #7
 8002058:	4094      	lsls	r4, r2
 800205a:	ea20 0004 	bic.w	r0, r0, r4
 800205e:	688c      	ldr	r4, [r1, #8]
 8002060:	fa04 f202 	lsl.w	r2, r4, r2
 8002064:	4302      	orrs	r2, r0
 8002066:	616a      	str	r2, [r5, #20]
 8002068:	e770      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x144>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800206a:	4935      	ldr	r1, [pc, #212]	; (8002140 <HAL_ADC_ConfigChannel+0x338>)
 800206c:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800206e:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002072:	f47f af6f 	bne.w	8001f54 <HAL_ADC_ConfigChannel+0x14c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	6881      	ldr	r1, [r0, #8]
 800207a:	f001 0103 	and.w	r1, r1, #3
 800207e:	2901      	cmp	r1, #1
 8002080:	d014      	beq.n	80020ac <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002082:	2a10      	cmp	r2, #16
 8002084:	d01c      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002086:	2a11      	cmp	r2, #17
 8002088:	d039      	beq.n	80020fe <HAL_ADC_ConfigChannel+0x2f6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800208a:	2a12      	cmp	r2, #18
 800208c:	d041      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x30a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208e:	2000      	movs	r0, #0
 8002090:	e04b      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002092:	492b      	ldr	r1, [pc, #172]	; (8002140 <HAL_ADC_ConfigChannel+0x338>)
 8002094:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002096:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800209a:	d0ec      	beq.n	8002076 <HAL_ADC_ConfigChannel+0x26e>
 800209c:	e75d      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x152>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800209e:	4928      	ldr	r1, [pc, #160]	; (8002140 <HAL_ADC_ConfigChannel+0x338>)
 80020a0:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020a2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80020a6:	d0e6      	beq.n	8002076 <HAL_ADC_ConfigChannel+0x26e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2000      	movs	r0, #0
 80020aa:	e03e      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020ac:	6801      	ldr	r1, [r0, #0]
 80020ae:	f011 0f01 	tst.w	r1, #1
 80020b2:	d0e6      	beq.n	8002082 <HAL_ADC_ConfigChannel+0x27a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b6:	f042 0220 	orr.w	r2, r2, #32
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
 80020be:	e034      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020c0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80020c4:	d1df      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x27e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80020c6:	491e      	ldr	r1, [pc, #120]	; (8002140 <HAL_ADC_ConfigChannel+0x338>)
 80020c8:	688a      	ldr	r2, [r1, #8]
 80020ca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020ce:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d0:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_ConfigChannel+0x33c>)
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 80020d8:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 80020dc:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 80020e0:	fba1 1202 	umull	r1, r2, r1, r2
 80020e4:	0c92      	lsrs	r2, r2, #18
 80020e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80020ea:	0051      	lsls	r1, r2, #1
 80020ec:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80020ee:	9a01      	ldr	r2, [sp, #4]
 80020f0:	b11a      	cbz	r2, 80020fa <HAL_ADC_ConfigChannel+0x2f2>
            wait_loop_index--;
 80020f2:	9a01      	ldr	r2, [sp, #4]
 80020f4:	3a01      	subs	r2, #1
 80020f6:	9201      	str	r2, [sp, #4]
 80020f8:	e7f9      	b.n	80020ee <HAL_ADC_ConfigChannel+0x2e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2000      	movs	r0, #0
 80020fc:	e015      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020fe:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002102:	d1c2      	bne.n	800208a <HAL_ADC_ConfigChannel+0x282>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_ADC_ConfigChannel+0x338>)
 8002106:	688a      	ldr	r2, [r1, #8]
 8002108:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800210c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002110:	e00b      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002112:	490b      	ldr	r1, [pc, #44]	; (8002140 <HAL_ADC_ConfigChannel+0x338>)
 8002114:	688a      	ldr	r2, [r1, #8]
 8002116:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800211a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2000      	movs	r0, #0
 800211e:	e004      	b.n	800212a <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8002128:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002130:	b002      	add	sp, #8
 8002132:	bc30      	pop	{r4, r5}
 8002134:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8002136:	2002      	movs	r0, #2
 8002138:	e7fa      	b.n	8002130 <HAL_ADC_ConfigChannel+0x328>
 800213a:	bf00      	nop
 800213c:	83fff000 	.word	0x83fff000
 8002140:	50000300 	.word	0x50000300
 8002144:	2000000c 	.word	0x2000000c

08002148 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800214a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	0200      	lsls	r0, r0, #8
 8002156:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800215a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800215c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002160:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002164:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_NVIC_SetPriority+0x60>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002176:	f1c3 0407 	rsb	r4, r3, #7
 800217a:	2c04      	cmp	r4, #4
 800217c:	bf28      	it	cs
 800217e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002180:	1d1d      	adds	r5, r3, #4
 8002182:	2d06      	cmp	r5, #6
 8002184:	d918      	bls.n	80021b8 <HAL_NVIC_SetPriority+0x4c>
 8002186:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 35ff 	mov.w	r5, #4294967295
 800218c:	fa05 f404 	lsl.w	r4, r5, r4
 8002190:	ea21 0104 	bic.w	r1, r1, r4
 8002194:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002196:	fa05 f303 	lsl.w	r3, r5, r3
 800219a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80021a0:	2800      	cmp	r0, #0
 80021a2:	db0b      	blt.n	80021bc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	0109      	lsls	r1, r1, #4
 80021a6:	b2c9      	uxtb	r1, r1
 80021a8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80021ac:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80021b0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021b4:	bc30      	pop	{r4, r5}
 80021b6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b8:	2300      	movs	r3, #0
 80021ba:	e7e5      	b.n	8002188 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	f000 000f 	and.w	r0, r0, #15
 80021c0:	0109      	lsls	r1, r1, #4
 80021c2:	b2c9      	uxtb	r1, r1
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <HAL_NVIC_SetPriority+0x64>)
 80021c6:	5419      	strb	r1, [r3, r0]
 80021c8:	e7f4      	b.n	80021b4 <HAL_NVIC_SetPriority+0x48>
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00
 80021d0:	e000ed14 	.word	0xe000ed14

080021d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021d4:	2800      	cmp	r0, #0
 80021d6:	db07      	blt.n	80021e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d8:	f000 021f 	and.w	r2, r0, #31
 80021dc:	0940      	lsrs	r0, r0, #5
 80021de:	2301      	movs	r3, #1
 80021e0:	4093      	lsls	r3, r2
 80021e2:	4a02      	ldr	r2, [pc, #8]	; (80021ec <HAL_NVIC_EnableIRQ+0x18>)
 80021e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fa:	2304      	movs	r3, #4
 80021fc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002200:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002202:	6802      	ldr	r2, [r0, #0]
 8002204:	6813      	ldr	r3, [r2, #0]
 8002206:	f023 030e 	bic.w	r3, r3, #14
 800220a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800220c:	6802      	ldr	r2, [r0, #0]
 800220e:	6813      	ldr	r3, [r2, #0]
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002216:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002218:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800221a:	2201      	movs	r2, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002222:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002226:	2300      	movs	r3, #0
 8002228:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800222c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800222e:	b113      	cbz	r3, 8002236 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8002230:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2000      	movs	r0, #0
 8002234:	e7e4      	b.n	8002200 <HAL_DMA_Abort_IT+0x10>
 8002236:	2000      	movs	r0, #0
 8002238:	e7e2      	b.n	8002200 <HAL_DMA_Abort_IT+0x10>
	...

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b4f0      	push	{r4, r5, r6, r7}
 800223e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8002240:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	e036      	b.n	80022b2 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002244:	2403      	movs	r4, #3
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0xe>
 8002248:	2400      	movs	r4, #0
 800224a:	40b4      	lsls	r4, r6
 800224c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800224e:	3502      	adds	r5, #2
 8002250:	4e58      	ldr	r6, [pc, #352]	; (80023b4 <HAL_GPIO_Init+0x178>)
 8002252:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002256:	4c58      	ldr	r4, [pc, #352]	; (80023b8 <HAL_GPIO_Init+0x17c>)
 8002258:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800225a:	43d4      	mvns	r4, r2
 800225c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002260:	684f      	ldr	r7, [r1, #4]
 8002262:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002266:	d001      	beq.n	800226c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002268:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800226c:	4d52      	ldr	r5, [pc, #328]	; (80023b8 <HAL_GPIO_Init+0x17c>)
 800226e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002270:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002272:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002276:	684f      	ldr	r7, [r1, #4]
 8002278:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800227c:	d001      	beq.n	8002282 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800227e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002282:	4d4d      	ldr	r5, [pc, #308]	; (80023b8 <HAL_GPIO_Init+0x17c>)
 8002284:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002288:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228c:	684f      	ldr	r7, [r1, #4]
 800228e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002292:	d001      	beq.n	8002298 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8002294:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002298:	4d47      	ldr	r5, [pc, #284]	; (80023b8 <HAL_GPIO_Init+0x17c>)
 800229a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800229c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800229e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a0:	684e      	ldr	r6, [r1, #4]
 80022a2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80022a6:	d001      	beq.n	80022ac <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80022a8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80022ac:	4a42      	ldr	r2, [pc, #264]	; (80023b8 <HAL_GPIO_Init+0x17c>)
 80022ae:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80022b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	680a      	ldr	r2, [r1, #0]
 80022b4:	fa32 f403 	lsrs.w	r4, r2, r3
 80022b8:	d078      	beq.n	80023ac <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ba:	2401      	movs	r4, #1
 80022bc:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80022be:	4022      	ands	r2, r4
 80022c0:	d0f6      	beq.n	80022b0 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c2:	684d      	ldr	r5, [r1, #4]
 80022c4:	2d02      	cmp	r5, #2
 80022c6:	d001      	beq.n	80022cc <HAL_GPIO_Init+0x90>
 80022c8:	2d12      	cmp	r5, #18
 80022ca:	d110      	bne.n	80022ee <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80022cc:	08de      	lsrs	r6, r3, #3
 80022ce:	3608      	adds	r6, #8
 80022d0:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d4:	f003 0507 	and.w	r5, r3, #7
 80022d8:	00af      	lsls	r7, r5, #2
 80022da:	250f      	movs	r5, #15
 80022dc:	40bd      	lsls	r5, r7
 80022de:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e2:	690d      	ldr	r5, [r1, #16]
 80022e4:	40bd      	lsls	r5, r7
 80022e6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80022ea:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80022ee:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022f0:	005f      	lsls	r7, r3, #1
 80022f2:	2503      	movs	r5, #3
 80022f4:	40bd      	lsls	r5, r7
 80022f6:	43ed      	mvns	r5, r5
 80022f8:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022fc:	684e      	ldr	r6, [r1, #4]
 80022fe:	f006 0603 	and.w	r6, r6, #3
 8002302:	40be      	lsls	r6, r7
 8002304:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8002308:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230a:	684e      	ldr	r6, [r1, #4]
 800230c:	f106 3cff 	add.w	ip, r6, #4294967295
 8002310:	f1bc 0f01 	cmp.w	ip, #1
 8002314:	d903      	bls.n	800231e <HAL_GPIO_Init+0xe2>
 8002316:	2e11      	cmp	r6, #17
 8002318:	d001      	beq.n	800231e <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231a:	2e12      	cmp	r6, #18
 800231c:	d110      	bne.n	8002340 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 800231e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002320:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002324:	68ce      	ldr	r6, [r1, #12]
 8002326:	40be      	lsls	r6, r7
 8002328:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 800232c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800232e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002330:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002334:	684e      	ldr	r6, [r1, #4]
 8002336:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800233a:	409e      	lsls	r6, r3
 800233c:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 800233e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002340:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002342:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002344:	688c      	ldr	r4, [r1, #8]
 8002346:	40bc      	lsls	r4, r7
 8002348:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800234a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234c:	684c      	ldr	r4, [r1, #4]
 800234e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002352:	d0ad      	beq.n	80022b0 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4c19      	ldr	r4, [pc, #100]	; (80023bc <HAL_GPIO_Init+0x180>)
 8002356:	69a5      	ldr	r5, [r4, #24]
 8002358:	f045 0501 	orr.w	r5, r5, #1
 800235c:	61a5      	str	r5, [r4, #24]
 800235e:	69a4      	ldr	r4, [r4, #24]
 8002360:	f004 0401 	and.w	r4, r4, #1
 8002364:	9401      	str	r4, [sp, #4]
 8002366:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002368:	089d      	lsrs	r5, r3, #2
 800236a:	1cae      	adds	r6, r5, #2
 800236c:	4c11      	ldr	r4, [pc, #68]	; (80023b4 <HAL_GPIO_Init+0x178>)
 800236e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002372:	f003 0403 	and.w	r4, r3, #3
 8002376:	00a6      	lsls	r6, r4, #2
 8002378:	240f      	movs	r4, #15
 800237a:	40b4      	lsls	r4, r6
 800237c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002380:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002384:	f43f af60 	beq.w	8002248 <HAL_GPIO_Init+0xc>
 8002388:	4c0d      	ldr	r4, [pc, #52]	; (80023c0 <HAL_GPIO_Init+0x184>)
 800238a:	42a0      	cmp	r0, r4
 800238c:	d00a      	beq.n	80023a4 <HAL_GPIO_Init+0x168>
 800238e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002392:	42a0      	cmp	r0, r4
 8002394:	d008      	beq.n	80023a8 <HAL_GPIO_Init+0x16c>
 8002396:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800239a:	42a0      	cmp	r0, r4
 800239c:	f43f af52 	beq.w	8002244 <HAL_GPIO_Init+0x8>
 80023a0:	2405      	movs	r4, #5
 80023a2:	e752      	b.n	800224a <HAL_GPIO_Init+0xe>
 80023a4:	2401      	movs	r4, #1
 80023a6:	e750      	b.n	800224a <HAL_GPIO_Init+0xe>
 80023a8:	2402      	movs	r4, #2
 80023aa:	e74e      	b.n	800224a <HAL_GPIO_Init+0xe>
  }
}
 80023ac:	b002      	add	sp, #8
 80023ae:	bcf0      	pop	{r4, r5, r6, r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40010400 	.word	0x40010400
 80023bc:	40021000 	.word	0x40021000
 80023c0:	48000400 	.word	0x48000400

080023c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	b90a      	cbnz	r2, 80023ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023c6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80023c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ca:	6181      	str	r1, [r0, #24]
 80023cc:	4770      	bx	lr

080023ce <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023ce:	6803      	ldr	r3, [r0, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	f012 0f02 	tst.w	r2, #2
 80023d6:	d001      	beq.n	80023dc <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023d8:	2200      	movs	r2, #0
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	6803      	ldr	r3, [r0, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	f012 0f01 	tst.w	r2, #1
 80023e4:	d103      	bne.n	80023ee <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	619a      	str	r2, [r3, #24]
  }
}
 80023ee:	4770      	bx	lr

080023f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80023f0:	b470      	push	{r4, r5, r6}
 80023f2:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023f4:	6805      	ldr	r5, [r0, #0]
 80023f6:	6868      	ldr	r0, [r5, #4]
 80023f8:	0d74      	lsrs	r4, r6, #21
 80023fa:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80023fe:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002402:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002406:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800240a:	f044 0403 	orr.w	r4, r4, #3
 800240e:	ea20 0004 	bic.w	r0, r0, r4
 8002412:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002416:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800241a:	4319      	orrs	r1, r3
 800241c:	4331      	orrs	r1, r6
 800241e:	4301      	orrs	r1, r0
 8002420:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002422:	bc70      	pop	{r4, r5, r6}
 8002424:	4770      	bx	lr

08002426 <I2C_IsAcknowledgeFailed>:
{
 8002426:	b570      	push	{r4, r5, r6, lr}
 8002428:	4604      	mov	r4, r0
 800242a:	460d      	mov	r5, r1
 800242c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242e:	6803      	ldr	r3, [r0, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f013 0f10 	tst.w	r3, #16
 8002436:	d01c      	beq.n	8002472 <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	f012 0f20 	tst.w	r2, #32
 8002440:	d119      	bne.n	8002476 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002442:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002446:	d0f7      	beq.n	8002438 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002448:	f7ff f8de 	bl	8001608 <HAL_GetTick>
 800244c:	1b80      	subs	r0, r0, r6
 800244e:	42a8      	cmp	r0, r5
 8002450:	d801      	bhi.n	8002456 <I2C_IsAcknowledgeFailed+0x30>
 8002452:	2d00      	cmp	r5, #0
 8002454:	d1f0      	bne.n	8002438 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002458:	f043 0320 	orr.w	r3, r3, #32
 800245c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800245e:	2320      	movs	r3, #32
 8002460:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	2300      	movs	r3, #0
 8002466:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800246a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 800246e:	2001      	movs	r0, #1
 8002470:	e020      	b.n	80024b4 <I2C_IsAcknowledgeFailed+0x8e>
  return HAL_OK;
 8002472:	2000      	movs	r0, #0
 8002474:	e01e      	b.n	80024b4 <I2C_IsAcknowledgeFailed+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002476:	2210      	movs	r2, #16
 8002478:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	2520      	movs	r5, #32
 800247e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff ffa4 	bl	80023ce <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002486:	6822      	ldr	r2, [r4, #0]
 8002488:	6853      	ldr	r3, [r2, #4]
 800248a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800248e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002492:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800249c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80024ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80024b2:	2001      	movs	r0, #1
}
 80024b4:	bd70      	pop	{r4, r5, r6, pc}

080024b6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80024b6:	b570      	push	{r4, r5, r6, lr}
 80024b8:	4604      	mov	r4, r0
 80024ba:	460d      	mov	r5, r1
 80024bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f013 0f02 	tst.w	r3, #2
 80024c6:	d11d      	bne.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c8:	4632      	mov	r2, r6
 80024ca:	4629      	mov	r1, r5
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff ffaa 	bl	8002426 <I2C_IsAcknowledgeFailed>
 80024d2:	b9c8      	cbnz	r0, 8002508 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80024d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80024d8:	d0f1      	beq.n	80024be <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7ff f895 	bl	8001608 <HAL_GetTick>
 80024de:	1b80      	subs	r0, r0, r6
 80024e0:	42a8      	cmp	r0, r5
 80024e2:	d801      	bhi.n	80024e8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80024e4:	2d00      	cmp	r5, #0
 80024e6:	d1ea      	bne.n	80024be <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024ea:	f043 0320 	orr.w	r3, r3, #32
 80024ee:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	2320      	movs	r3, #32
 80024f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80024fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002500:	2001      	movs	r0, #1
 8002502:	e000      	b.n	8002506 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002508:	2001      	movs	r0, #1
 800250a:	e7fc      	b.n	8002506 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800250c <I2C_WaitOnFlagUntilTimeout>:
{
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	4605      	mov	r5, r0
 8002510:	460f      	mov	r7, r1
 8002512:	4616      	mov	r6, r2
 8002514:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002516:	682b      	ldr	r3, [r5, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	ea37 0303 	bics.w	r3, r7, r3
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	42b3      	cmp	r3, r6
 8002526:	d118      	bne.n	800255a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002528:	f1b4 3fff 	cmp.w	r4, #4294967295
 800252c:	d0f3      	beq.n	8002516 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7ff f86b 	bl	8001608 <HAL_GetTick>
 8002532:	9b06      	ldr	r3, [sp, #24]
 8002534:	1ac0      	subs	r0, r0, r3
 8002536:	42a0      	cmp	r0, r4
 8002538:	d801      	bhi.n	800253e <I2C_WaitOnFlagUntilTimeout+0x32>
 800253a:	2c00      	cmp	r4, #0
 800253c:	d1eb      	bne.n	8002516 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002546:	2320      	movs	r3, #32
 8002548:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002552:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8002556:	2001      	movs	r0, #1
 8002558:	e000      	b.n	800255c <I2C_WaitOnFlagUntilTimeout+0x50>
  return HAL_OK;
 800255a:	2000      	movs	r0, #0
}
 800255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002560 <I2C_RequestMemoryWrite>:
{
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	4604      	mov	r4, r0
 8002566:	4616      	mov	r6, r2
 8002568:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <I2C_RequestMemoryWrite+0x6c>)
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002572:	b2ea      	uxtb	r2, r5
 8002574:	f7ff ff3c 	bl	80023f0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002578:	9a07      	ldr	r2, [sp, #28]
 800257a:	9906      	ldr	r1, [sp, #24]
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff ff9a 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002582:	b9e8      	cbnz	r0, 80025c0 <I2C_RequestMemoryWrite+0x60>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002584:	2d01      	cmp	r5, #1
 8002586:	d10e      	bne.n	80025a6 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	b2f6      	uxtb	r6, r6
 800258c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800258e:	9b07      	ldr	r3, [sp, #28]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	9b06      	ldr	r3, [sp, #24]
 8002594:	2200      	movs	r2, #0
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff ffb7 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	b178      	cbz	r0, 80025c2 <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00d      	b.n	80025c2 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	0a32      	lsrs	r2, r6, #8
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ac:	9a07      	ldr	r2, [sp, #28]
 80025ae:	9906      	ldr	r1, [sp, #24]
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7ff ff80 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025b6:	b938      	cbnz	r0, 80025c8 <I2C_RequestMemoryWrite+0x68>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	b2f6      	uxtb	r6, r6
 80025bc:	629e      	str	r6, [r3, #40]	; 0x28
 80025be:	e7e6      	b.n	800258e <I2C_RequestMemoryWrite+0x2e>
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	b002      	add	sp, #8
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e7fa      	b.n	80025c2 <I2C_RequestMemoryWrite+0x62>
 80025cc:	80002000 	.word	0x80002000

080025d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	4605      	mov	r5, r0
 80025d4:	460c      	mov	r4, r1
 80025d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f013 0f20 	tst.w	r3, #32
 80025e0:	d11a      	bne.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e2:	4632      	mov	r2, r6
 80025e4:	4621      	mov	r1, r4
 80025e6:	4628      	mov	r0, r5
 80025e8:	f7ff ff1d 	bl	8002426 <I2C_IsAcknowledgeFailed>
 80025ec:	b9b0      	cbnz	r0, 800261c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7ff f80b 	bl	8001608 <HAL_GetTick>
 80025f2:	1b80      	subs	r0, r0, r6
 80025f4:	42a0      	cmp	r0, r4
 80025f6:	d801      	bhi.n	80025fc <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80025f8:	2c00      	cmp	r4, #0
 80025fa:	d1ed      	bne.n	80025d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025fc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80025fe:	f043 0320 	orr.w	r3, r3, #32
 8002602:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002604:	2320      	movs	r3, #32
 8002606:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	2300      	movs	r3, #0
 800260c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002610:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8002614:	2001      	movs	r0, #1
}
 8002616:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002618:	2000      	movs	r0, #0
 800261a:	e7fc      	b.n	8002616 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800261c:	2001      	movs	r0, #1
 800261e:	e7fa      	b.n	8002616 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08002620 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002620:	2800      	cmp	r0, #0
 8002622:	d059      	beq.n	80026d8 <HAL_I2C_Init+0xb8>
{
 8002624:	b510      	push	{r4, lr}
 8002626:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002628:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800262c:	2b00      	cmp	r3, #0
 800262e:	d043      	beq.n	80026b8 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002630:	2324      	movs	r3, #36	; 0x24
 8002632:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002636:	6822      	ldr	r2, [r4, #0]
 8002638:	6813      	ldr	r3, [r2, #0]
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002640:	6863      	ldr	r3, [r4, #4]
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002648:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	6893      	ldr	r3, [r2, #8]
 800264e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002652:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002654:	68e3      	ldr	r3, [r4, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d033      	beq.n	80026c2 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800265a:	68a3      	ldr	r3, [r4, #8]
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002662:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002664:	68e3      	ldr	r3, [r4, #12]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d031      	beq.n	80026ce <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	6853      	ldr	r3, [r2, #4]
 800266e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002678:	6822      	ldr	r2, [r4, #0]
 800267a:	68d3      	ldr	r3, [r2, #12]
 800267c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002680:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002682:	6923      	ldr	r3, [r4, #16]
 8002684:	6962      	ldr	r2, [r4, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	69a1      	ldr	r1, [r4, #24]
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002690:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002692:	69e3      	ldr	r3, [r4, #28]
 8002694:	6a21      	ldr	r1, [r4, #32]
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	430b      	orrs	r3, r1
 800269a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	6813      	ldr	r3, [r2, #0]
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a6:	2000      	movs	r0, #0
 80026a8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	2320      	movs	r3, #32
 80026ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80026b6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80026b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80026bc:	f7fe fd30 	bl	8001120 <HAL_I2C_MspInit>
 80026c0:	e7b6      	b.n	8002630 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026c2:	68a3      	ldr	r3, [r4, #8]
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	e7ca      	b.n	8002664 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	e7c8      	b.n	800266a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80026d8:	2001      	movs	r0, #1
}
 80026da:	4770      	bx	lr

080026dc <HAL_I2C_Mem_Write>:
{
 80026dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80026ea:	b2ed      	uxtb	r5, r5
 80026ec:	2d20      	cmp	r5, #32
 80026ee:	f040 80ba 	bne.w	8002866 <HAL_I2C_Mem_Write+0x18a>
    if ((pData == NULL) || (Size == 0U))
 80026f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80026f4:	b1dc      	cbz	r4, 800272e <HAL_I2C_Mem_Write+0x52>
 80026f6:	b1d7      	cbz	r7, 800272e <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80026f8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80026fc:	2c01      	cmp	r4, #1
 80026fe:	f000 80b7 	beq.w	8002870 <HAL_I2C_Mem_Write+0x194>
 8002702:	4698      	mov	r8, r3
 8002704:	4691      	mov	r9, r2
 8002706:	460d      	mov	r5, r1
 8002708:	4604      	mov	r4, r0
 800270a:	f04f 0a01 	mov.w	sl, #1
 800270e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002712:	f7fe ff79 	bl	8001608 <HAL_GetTick>
 8002716:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002718:	9000      	str	r0, [sp, #0]
 800271a:	2319      	movs	r3, #25
 800271c:	4652      	mov	r2, sl
 800271e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff fef2 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8002728:	b130      	cbz	r0, 8002738 <HAL_I2C_Mem_Write+0x5c>
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e09c      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800272e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002732:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e097      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002738:	2321      	movs	r3, #33	; 0x21
 800273a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800273e:	2340      	movs	r3, #64	; 0x40
 8002740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	2300      	movs	r3, #0
 8002746:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800274a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800274c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800274e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002750:	9601      	str	r6, [sp, #4]
 8002752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4643      	mov	r3, r8
 8002758:	464a      	mov	r2, r9
 800275a:	4629      	mov	r1, r5
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff feff 	bl	8002560 <I2C_RequestMemoryWrite>
 8002762:	b970      	cbnz	r0, 8002782 <HAL_I2C_Mem_Write+0xa6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002764:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	2bff      	cmp	r3, #255	; 0xff
 800276a:	d90f      	bls.n	800278c <HAL_I2C_Mem_Write+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002770:	2300      	movs	r3, #0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	4629      	mov	r1, r5
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fe38 	bl	80023f0 <I2C_TransferConfig>
 8002780:	e021      	b.n	80027c6 <HAL_I2C_Mem_Write+0xea>
      __HAL_UNLOCK(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002788:	4653      	mov	r3, sl
 800278a:	e06d      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>
      hi2c->XferSize = hi2c->XferCount;
 800278c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800278e:	b292      	uxth	r2, r2
 8002790:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002792:	2300      	movs	r3, #0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4629      	mov	r1, r5
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff fe26 	bl	80023f0 <I2C_TransferConfig>
 80027a4:	e00f      	b.n	80027c6 <HAL_I2C_Mem_Write+0xea>
          hi2c->XferSize = hi2c->XferCount;
 80027a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027a8:	b292      	uxth	r2, r2
 80027aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ac:	2300      	movs	r3, #0
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	4629      	mov	r1, r5
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff fe19 	bl	80023f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80027be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d032      	beq.n	800282c <HAL_I2C_Mem_Write+0x150>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	4632      	mov	r2, r6
 80027c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fe73 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d14f      	bne.n	8002874 <HAL_I2C_Mem_Write+0x198>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	7812      	ldrb	r2, [r2, #0]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80027dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027de:	3301      	adds	r3, #1
 80027e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027f4:	b292      	uxth	r2, r2
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d0e1      	beq.n	80027be <HAL_I2C_Mem_Write+0xe2>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1df      	bne.n	80027be <HAL_I2C_Mem_Write+0xe2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027fe:	9600      	str	r6, [sp, #0]
 8002800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff fe80 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800280c:	bba0      	cbnz	r0, 8002878 <HAL_I2C_Mem_Write+0x19c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d9c7      	bls.n	80027a6 <HAL_I2C_Mem_Write+0xca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800281a:	2300      	movs	r3, #0
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002822:	4629      	mov	r1, r5
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff fde3 	bl	80023f0 <I2C_TransferConfig>
 800282a:	e7c8      	b.n	80027be <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282c:	4632      	mov	r2, r6
 800282e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff fecd 	bl	80025d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	bb00      	cbnz	r0, 800287c <HAL_I2C_Mem_Write+0x1a0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	2120      	movs	r1, #32
 800283e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	6842      	ldr	r2, [r0, #4]
 8002844:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002848:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800284c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800285a:	2200      	movs	r2, #0
 800285c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002860:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002864:	e000      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
}
 8002868:	4618      	mov	r0, r3
 800286a:	b002      	add	sp, #8
 800286c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002870:	2302      	movs	r3, #2
 8002872:	e7f9      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e7f7      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e7f5      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e7f3      	b.n	8002868 <HAL_I2C_Mem_Write+0x18c>

08002880 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002880:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b20      	cmp	r3, #32
 8002888:	d124      	bne.n	80028d4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800288e:	2b01      	cmp	r3, #1
 8002890:	d022      	beq.n	80028d8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002892:	2301      	movs	r3, #1
 8002894:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	2324      	movs	r3, #36	; 0x24
 800289a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289e:	6802      	ldr	r2, [r0, #0]
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028a8:	6802      	ldr	r2, [r0, #0]
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028b2:	6802      	ldr	r2, [r0, #0]
 80028b4:	6813      	ldr	r3, [r2, #0]
 80028b6:	4319      	orrs	r1, r3
 80028b8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ba:	6802      	ldr	r2, [r0, #0]
 80028bc:	6813      	ldr	r3, [r2, #0]
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	2320      	movs	r3, #32
 80028c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ca:	2300      	movs	r3, #0
 80028cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80028d0:	4618      	mov	r0, r3
 80028d2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2002      	movs	r0, #2
 80028d6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80028d8:	2002      	movs	r0, #2
  }
}
 80028da:	4770      	bx	lr

080028dc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d122      	bne.n	800292c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d020      	beq.n	8002930 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80028ee:	2301      	movs	r3, #1
 80028f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	2324      	movs	r3, #36	; 0x24
 80028f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028fa:	6802      	ldr	r2, [r0, #0]
 80028fc:	6813      	ldr	r3, [r2, #0]
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002908:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800290c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002910:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002912:	6802      	ldr	r2, [r0, #0]
 8002914:	6813      	ldr	r3, [r2, #0]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800291c:	2320      	movs	r3, #32
 800291e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002928:	4618      	mov	r0, r3
 800292a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800292c:	2002      	movs	r0, #2
 800292e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002930:	2002      	movs	r0, #2
  }
}
 8002932:	4770      	bx	lr

08002934 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002934:	2800      	cmp	r0, #0
 8002936:	f000 830d 	beq.w	8002f54 <HAL_RCC_OscConfig+0x620>
{
 800293a:	b570      	push	{r4, r5, r6, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002940:	6803      	ldr	r3, [r0, #0]
 8002942:	f013 0f01 	tst.w	r3, #1
 8002946:	d03b      	beq.n	80029c0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002948:	4bb5      	ldr	r3, [pc, #724]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b04      	cmp	r3, #4
 8002952:	d01e      	beq.n	8002992 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002954:	4bb2      	ldr	r3, [pc, #712]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002966:	d068      	beq.n	8002a3a <HAL_RCC_OscConfig+0x106>
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 8092 	bne.w	8002a92 <HAL_RCC_OscConfig+0x15e>
 800296e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002972:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e05d      	b.n	8002a44 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002988:	4ba5      	ldr	r3, [pc, #660]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002990:	d0e6      	beq.n	8002960 <HAL_RCC_OscConfig+0x2c>
 8002992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002996:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	4ba1      	ldr	r3, [pc, #644]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2201      	movs	r2, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	420b      	tst	r3, r1
 80029b6:	d003      	beq.n	80029c0 <HAL_RCC_OscConfig+0x8c>
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 82cc 	beq.w	8002f58 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	f013 0f02 	tst.w	r3, #2
 80029c6:	f000 80c6 	beq.w	8002b56 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029ca:	4b95      	ldr	r3, [pc, #596]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f013 0f0c 	tst.w	r3, #12
 80029d2:	f000 809c 	beq.w	8002b0e <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029d6:	4b92      	ldr	r3, [pc, #584]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b08      	cmp	r3, #8
 80029e0:	f000 808f 	beq.w	8002b02 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80f3 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x29e>
 80029ec:	2201      	movs	r2, #1
 80029ee:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fe01 	bl	8001608 <HAL_GetTick>
 8002a06:	4605      	mov	r5, r0
 8002a08:	2302      	movs	r3, #2
 8002a0a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b84      	ldr	r3, [pc, #528]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	2302      	movs	r3, #2
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2201      	movs	r2, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	420b      	tst	r3, r1
 8002a28:	f040 80c4 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fdec 	bl	8001608 <HAL_GetTick>
 8002a30:	1b40      	subs	r0, r0, r5
 8002a32:	2802      	cmp	r0, #2
 8002a34:	d9e8      	bls.n	8002a08 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002a36:	2003      	movs	r0, #3
 8002a38:	e295      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	4a79      	ldr	r2, [pc, #484]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002a3c:	6813      	ldr	r3, [r2, #0]
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a44:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002a46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002a48:	f023 030f 	bic.w	r3, r3, #15
 8002a4c:	68a1      	ldr	r1, [r4, #8]
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a52:	6863      	ldr	r3, [r4, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d036      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002a58:	f7fe fdd6 	bl	8001608 <HAL_GetTick>
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a62:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b6e      	ldr	r3, [pc, #440]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	420b      	tst	r3, r1
 8002a82:	d19d      	bne.n	80029c0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe fdc0 	bl	8001608 <HAL_GetTick>
 8002a88:	1b40      	subs	r0, r0, r5
 8002a8a:	2864      	cmp	r0, #100	; 0x64
 8002a8c:	d9e7      	bls.n	8002a5e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002a8e:	2003      	movs	r0, #3
 8002a90:	e269      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a96:	d009      	beq.n	8002aac <HAL_RCC_OscConfig+0x178>
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e7cb      	b.n	8002a44 <HAL_RCC_OscConfig+0x110>
 8002aac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ab0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e7be      	b.n	8002a44 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fd9f 	bl	8001608 <HAL_GetTick>
 8002aca:	4605      	mov	r5, r0
 8002acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad4:	4b52      	ldr	r3, [pc, #328]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2201      	movs	r2, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	420b      	tst	r3, r1
 8002af0:	f43f af66 	beq.w	80029c0 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fd88 	bl	8001608 <HAL_GetTick>
 8002af8:	1b40      	subs	r0, r0, r5
 8002afa:	2864      	cmp	r0, #100	; 0x64
 8002afc:	d9e6      	bls.n	8002acc <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8002afe:	2003      	movs	r0, #3
 8002b00:	e231      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002b0a:	f47f af6b 	bne.w	80029e4 <HAL_RCC_OscConfig+0xb0>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b14:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	2302      	movs	r3, #2
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2201      	movs	r2, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	420b      	tst	r3, r1
 8002b2e:	d004      	beq.n	8002b3a <HAL_RCC_OscConfig+0x206>
 8002b30:	6923      	ldr	r3, [r4, #16]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e215      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4839      	ldr	r0, [pc, #228]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b42:	6961      	ldr	r1, [r4, #20]
 8002b44:	22f8      	movs	r2, #248	; 0xf8
 8002b46:	fa92 f2a2 	rbit	r2, r2
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4313      	orrs	r3, r2
 8002b54:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	f013 0f08 	tst.w	r3, #8
 8002b5c:	f000 808c 	beq.w	8002c78 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b60:	69a3      	ldr	r3, [r4, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d060      	beq.n	8002c28 <HAL_RCC_OscConfig+0x2f4>
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6c:	fab2 f282 	clz	r2, r2
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <HAL_RCC_OscConfig+0x2f0>)
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fd46 	bl	8001608 <HAL_GetTick>
 8002b7c:	4605      	mov	r5, r0
 8002b7e:	2302      	movs	r3, #2
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8c:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002b8e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	420b      	tst	r3, r1
 8002ba4:	d168      	bne.n	8002c78 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fd2f 	bl	8001608 <HAL_GetTick>
 8002baa:	1b40      	subs	r0, r0, r5
 8002bac:	2802      	cmp	r0, #2
 8002bae:	d9e6      	bls.n	8002b7e <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	e1d8      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	481a      	ldr	r0, [pc, #104]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002bb6:	6803      	ldr	r3, [r0, #0]
 8002bb8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bbc:	6961      	ldr	r1, [r4, #20]
 8002bbe:	22f8      	movs	r2, #248	; 0xf8
 8002bc0:	fa92 f2a2 	rbit	r2, r2
 8002bc4:	fab2 f282 	clz	r2, r2
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	6003      	str	r3, [r0, #0]
 8002bd0:	e7c1      	b.n	8002b56 <HAL_RCC_OscConfig+0x222>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bea:	f7fe fd0d 	bl	8001608 <HAL_GetTick>
 8002bee:	4605      	mov	r5, r0
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_RCC_OscConfig+0x2ec>)
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2201      	movs	r2, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	420b      	tst	r3, r1
 8002c10:	d0a1      	beq.n	8002b56 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fcf9 	bl	8001608 <HAL_GetTick>
 8002c16:	1b40      	subs	r0, r0, r5
 8002c18:	2802      	cmp	r0, #2
 8002c1a:	d9e9      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	e1a2      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
 8002c20:	40021000 	.word	0x40021000
 8002c24:	10908120 	.word	0x10908120
 8002c28:	2201      	movs	r2, #1
 8002c2a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	4bbc      	ldr	r3, [pc, #752]	; (8002f24 <HAL_RCC_OscConfig+0x5f0>)
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fce4 	bl	8001608 <HAL_GetTick>
 8002c40:	4605      	mov	r5, r0
 8002c42:	2302      	movs	r3, #2
 8002c44:	fa93 f2a3 	rbit	r2, r3
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4ab5      	ldr	r2, [pc, #724]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002c52:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2201      	movs	r2, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	420b      	tst	r3, r1
 8002c68:	d006      	beq.n	8002c78 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fccd 	bl	8001608 <HAL_GetTick>
 8002c6e:	1b40      	subs	r0, r0, r5
 8002c70:	2802      	cmp	r0, #2
 8002c72:	d9e6      	bls.n	8002c42 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002c74:	2003      	movs	r0, #3
 8002c76:	e176      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	f013 0f04 	tst.w	r3, #4
 8002c7e:	f000 80b3 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4ba9      	ldr	r3, [pc, #676]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c8a:	d120      	bne.n	8002cce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	4ba6      	ldr	r3, [pc, #664]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c94:	61da      	str	r2, [r3, #28]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ca0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4ba2      	ldr	r3, [pc, #648]	; (8002f2c <HAL_RCC_OscConfig+0x5f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002caa:	d012      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	68e3      	ldr	r3, [r4, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d023      	beq.n	8002cfa <HAL_RCC_OscConfig+0x3c6>
 8002cb2:	bb73      	cbnz	r3, 8002d12 <HAL_RCC_OscConfig+0x3de>
 8002cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cb8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	621a      	str	r2, [r3, #32]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	f022 0204 	bic.w	r2, r2, #4
 8002cca:	621a      	str	r2, [r3, #32]
 8002ccc:	e01a      	b.n	8002d04 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2500      	movs	r5, #0
 8002cd0:	e7e7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4a96      	ldr	r2, [pc, #600]	; (8002f2c <HAL_RCC_OscConfig+0x5f8>)
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cda:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fc94 	bl	8001608 <HAL_GetTick>
 8002ce0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_RCC_OscConfig+0x5f8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cea:	d1df      	bne.n	8002cac <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fe fc8c 	bl	8001608 <HAL_GetTick>
 8002cf0:	1b80      	subs	r0, r0, r6
 8002cf2:	2864      	cmp	r0, #100	; 0x64
 8002cf4:	d9f5      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	e135      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfa:	4a8b      	ldr	r2, [pc, #556]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002cfc:	6a13      	ldr	r3, [r2, #32]
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d04:	68e3      	ldr	r3, [r4, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d041      	beq.n	8002d8e <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fc7d 	bl	8001608 <HAL_GetTick>
 8002d0e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e02b      	b.n	8002d6a <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3f6>
 8002d16:	4b84      	ldr	r3, [pc, #528]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	621a      	str	r2, [r3, #32]
 8002d20:	6a1a      	ldr	r2, [r3, #32]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	621a      	str	r2, [r3, #32]
 8002d28:	e7ec      	b.n	8002d04 <HAL_RCC_OscConfig+0x3d0>
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	f042 0204 	orr.w	r2, r2, #4
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	621a      	str	r2, [r3, #32]
 8002d3c:	e7e2      	b.n	8002d04 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	4b7a      	ldr	r3, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002d40:	6a19      	ldr	r1, [r3, #32]
 8002d42:	2302      	movs	r3, #2
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2201      	movs	r2, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	4219      	tst	r1, r3
 8002d58:	d145      	bne.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fc55 	bl	8001608 <HAL_GetTick>
 8002d5e:	1b80      	subs	r0, r0, r6
 8002d60:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d64:	4298      	cmp	r0, r3
 8002d66:	f200 80f9 	bhi.w	8002f5c <HAL_RCC_OscConfig+0x628>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d0dd      	beq.n	8002d3e <HAL_RCC_OscConfig+0x40a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002d8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d8c:	e7d9      	b.n	8002d42 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fc3b 	bl	8001608 <HAL_GetTick>
 8002d92:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	e015      	b.n	8002dc2 <HAL_RCC_OscConfig+0x48e>
 8002d96:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002d98:	6a19      	ldr	r1, [r3, #32]
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2201      	movs	r2, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	4219      	tst	r1, r3
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fc29 	bl	8001608 <HAL_GetTick>
 8002db6:	1b80      	subs	r0, r0, r6
 8002db8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dbc:	4298      	cmp	r0, r3
 8002dbe:	f200 80cf 	bhi.w	8002f60 <HAL_RCC_OscConfig+0x62c>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	fa93 f2a3 	rbit	r2, r3
 8002dc8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d0dd      	beq.n	8002d96 <HAL_RCC_OscConfig+0x462>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002de2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002de4:	e7d9      	b.n	8002d9a <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de6:	bbb5      	cbnz	r5, 8002e56 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de8:	69e3      	ldr	r3, [r4, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80ba 	beq.w	8002f64 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	4a4d      	ldr	r2, [pc, #308]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002df2:	6852      	ldr	r2, [r2, #4]
 8002df4:	f002 020c 	and.w	r2, r2, #12
 8002df8:	2a08      	cmp	r2, #8
 8002dfa:	f000 8099 	beq.w	8002f30 <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d02f      	beq.n	8002e62 <HAL_RCC_OscConfig+0x52e>
 8002e02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e06:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fbf4 	bl	8001608 <HAL_GetTick>
 8002e20:	4604      	mov	r4, r0
 8002e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e26:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	4219      	tst	r1, r3
 8002e46:	d06b      	beq.n	8002f20 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fbde 	bl	8001608 <HAL_GetTick>
 8002e4c:	1b00      	subs	r0, r0, r4
 8002e4e:	2802      	cmp	r0, #2
 8002e50:	d9e7      	bls.n	8002e22 <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 8002e52:	2003      	movs	r0, #3
 8002e54:	e087      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002e58:	69d3      	ldr	r3, [r2, #28]
 8002e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	61d3      	str	r3, [r2, #28]
 8002e60:	e7c2      	b.n	8002de8 <HAL_RCC_OscConfig+0x4b4>
 8002e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e66:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fbc4 	bl	8001608 <HAL_GetTick>
 8002e80:	4605      	mov	r5, r0
 8002e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e86:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	4219      	tst	r1, r3
 8002ea6:	d006      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fbae 	bl	8001608 <HAL_GetTick>
 8002eac:	1b40      	subs	r0, r0, r5
 8002eae:	2802      	cmp	r0, #2
 8002eb0:	d9e7      	bls.n	8002e82 <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	e057      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb6:	491c      	ldr	r1, [pc, #112]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002eb8:	684b      	ldr	r3, [r1, #4]
 8002eba:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ec0:	6a20      	ldr	r0, [r4, #32]
 8002ec2:	4302      	orrs	r2, r0
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ecc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ed8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fb91 	bl	8001608 <HAL_GetTick>
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eec:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_OscConfig+0x5f4>)
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2201      	movs	r2, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	4219      	tst	r1, r3
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe fb7b 	bl	8001608 <HAL_GetTick>
 8002f12:	1b00      	subs	r0, r0, r4
 8002f14:	2802      	cmp	r0, #2
 8002f16:	d9e7      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8002f18:	2003      	movs	r0, #3
 8002f1a:	e024      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e022      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
 8002f20:	2000      	movs	r0, #0
 8002f22:	e020      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
 8002f24:	10908120 	.word	0x10908120
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d01a      	beq.n	8002f6a <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_RCC_OscConfig+0x640>)
 8002f36:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f38:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002f3c:	6a22      	ldr	r2, [r4, #32]
 8002f3e:	4291      	cmp	r1, r2
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
 8002f44:	e00f      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f46:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 8002f50:	2001      	movs	r0, #1
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
}
 8002f56:	4770      	bx	lr
        return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e004      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002f5c:	2003      	movs	r0, #3
 8002f5e:	e002      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002f60:	2003      	movs	r0, #3
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002f64:	2000      	movs	r0, #0
}
 8002f66:	b002      	add	sp, #8
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e7fb      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002f6e:	2000      	movs	r0, #0
 8002f70:	e7f9      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002f78:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x64>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f7c:	f003 020c 	and.w	r2, r3, #12
 8002f80:	2a04      	cmp	r2, #4
 8002f82:	d003      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x14>
 8002f84:	2a08      	cmp	r2, #8
 8002f86:	d003      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x18>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4815      	ldr	r0, [pc, #84]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x68>)
      break;
    }
  }
  return sysclockfreq;
}
 8002f8a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002f8c:	4815      	ldr	r0, [pc, #84]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002f8e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f90:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002f94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f98:	fa92 f2a2 	rbit	r2, r2
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	fa21 f202 	lsr.w	r2, r1, r2
 8002fa4:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x70>)
 8002fa6:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fa8:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x64>)
 8002faa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fac:	f002 020f 	and.w	r2, r2, #15
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	fa91 f1a1 	rbit	r1, r1
 8002fb6:	fab1 f181 	clz	r1, r1
 8002fba:	40ca      	lsrs	r2, r1
 8002fbc:	490b      	ldr	r1, [pc, #44]	; (8002fec <HAL_RCC_GetSysClockFreq+0x74>)
 8002fbe:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x5a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fcc:	fb00 f003 	mul.w	r0, r0, r3
 8002fd0:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002fd4:	fb03 f000 	mul.w	r0, r3, r0
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	007a1200 	.word	0x007a1200
 8002fe4:	01e84800 	.word	0x01e84800
 8002fe8:	08006de8 	.word	0x08006de8
 8002fec:	08006df8 	.word	0x08006df8
 8002ff0:	003d0900 	.word	0x003d0900

08002ff4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	f000 80c1 	beq.w	800317c <HAL_RCC_ClockConfig+0x188>
{
 8002ffa:	b570      	push	{r4, r5, r6, lr}
 8002ffc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffe:	4b61      	ldr	r3, [pc, #388]	; (8003184 <HAL_RCC_ClockConfig+0x190>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	428b      	cmp	r3, r1
 8003008:	d20c      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4a5e      	ldr	r2, [pc, #376]	; (8003184 <HAL_RCC_ClockConfig+0x190>)
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	f023 0307 	bic.w	r3, r3, #7
 8003012:	430b      	orrs	r3, r1
 8003014:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	428b      	cmp	r3, r1
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
}
 8003022:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	f013 0f02 	tst.w	r3, #2
 800302a:	d006      	beq.n	800303a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 800302e:	6853      	ldr	r3, [r2, #4]
 8003030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003034:	68a0      	ldr	r0, [r4, #8]
 8003036:	4303      	orrs	r3, r0
 8003038:	6053      	str	r3, [r2, #4]
 800303a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	f013 0f01 	tst.w	r3, #1
 8003042:	d05a      	beq.n	80030fa <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003044:	6863      	ldr	r3, [r4, #4]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d02d      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304a:	2b02      	cmp	r3, #2
 800304c:	d040      	beq.n	80030d0 <HAL_RCC_ClockConfig+0xdc>
 800304e:	2202      	movs	r2, #2
 8003050:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	4a4c      	ldr	r2, [pc, #304]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 8003056:	6810      	ldr	r0, [r2, #0]
 8003058:	2202      	movs	r2, #2
 800305a:	fa92 f2a2 	rbit	r2, r2
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4210      	tst	r0, r2
 800306e:	f000 8087 	beq.w	8003180 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003072:	4945      	ldr	r1, [pc, #276]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 8003074:	684a      	ldr	r2, [r1, #4]
 8003076:	f022 0203 	bic.w	r2, r2, #3
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800307e:	f7fe fac3 	bl	8001608 <HAL_GetTick>
 8003082:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	4b40      	ldr	r3, [pc, #256]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	6862      	ldr	r2, [r4, #4]
 800308e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003092:	d032      	beq.n	80030fa <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe fab8 	bl	8001608 <HAL_GetTick>
 8003098:	1b80      	subs	r0, r0, r6
 800309a:	f241 3388 	movw	r3, #5000	; 0x1388
 800309e:	4298      	cmp	r0, r3
 80030a0:	d9f0      	bls.n	8003084 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80030a2:	2003      	movs	r0, #3
 80030a4:	e7bd      	b.n	8003022 <HAL_RCC_ClockConfig+0x2e>
 80030a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030aa:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4a36      	ldr	r2, [pc, #216]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 80030b0:	6810      	ldr	r0, [r2, #0]
 80030b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030b6:	fa92 f2a2 	rbit	r2, r2
 80030ba:	fab2 f282 	clz	r2, r2
 80030be:	f002 021f 	and.w	r2, r2, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	4202      	tst	r2, r0
 80030ca:	d1d2      	bne.n	8003072 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80030cc:	2001      	movs	r0, #1
 80030ce:	e7a8      	b.n	8003022 <HAL_RCC_ClockConfig+0x2e>
 80030d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 80030da:	6810      	ldr	r0, [r2, #0]
 80030dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	f002 021f 	and.w	r2, r2, #31
 80030ec:	2101      	movs	r1, #1
 80030ee:	fa01 f202 	lsl.w	r2, r1, r2
 80030f2:	4210      	tst	r0, r2
 80030f4:	d1bd      	bne.n	8003072 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80030f6:	2001      	movs	r0, #1
 80030f8:	e793      	b.n	8003022 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_RCC_ClockConfig+0x190>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	42ab      	cmp	r3, r5
 8003104:	d90c      	bls.n	8003120 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <HAL_RCC_ClockConfig+0x190>)
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	432b      	orrs	r3, r5
 8003110:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	42ab      	cmp	r3, r5
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
 800311e:	e780      	b.n	8003022 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	f013 0f04 	tst.w	r3, #4
 8003126:	d006      	beq.n	8003136 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 800312a:	6853      	ldr	r3, [r2, #4]
 800312c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003130:	68e1      	ldr	r1, [r4, #12]
 8003132:	430b      	orrs	r3, r1
 8003134:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	f013 0f08 	tst.w	r3, #8
 800313c:	d007      	beq.n	800314e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 8003140:	6853      	ldr	r3, [r2, #4]
 8003142:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003146:	6921      	ldr	r1, [r4, #16]
 8003148:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800314c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800314e:	f7ff ff13 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_RCC_ClockConfig+0x194>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800315a:	22f0      	movs	r2, #240	; 0xf0
 800315c:	fa92 f2a2 	rbit	r2, r2
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	40d3      	lsrs	r3, r2
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x198>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	40d8      	lsrs	r0, r3
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_RCC_ClockConfig+0x19c>)
 800316e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_RCC_ClockConfig+0x1a0>)
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	f7fe f998 	bl	80014a8 <HAL_InitTick>
  return HAL_OK;
 8003178:	2000      	movs	r0, #0
 800317a:	e752      	b.n	8003022 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
}
 800317e:	4770      	bx	lr
        return HAL_ERROR;
 8003180:	2001      	movs	r0, #1
 8003182:	e74e      	b.n	8003022 <HAL_RCC_ClockConfig+0x2e>
 8003184:	40022000 	.word	0x40022000
 8003188:	40021000 	.word	0x40021000
 800318c:	08006dd0 	.word	0x08006dd0
 8003190:	2000000c 	.word	0x2000000c
 8003194:	20000014 	.word	0x20000014

08003198 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031a6:	f7ff fff7 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031b6:	fa92 f2a2 	rbit	r2, r2
 80031ba:	fab2 f282 	clz	r2, r2
 80031be:	40d3      	lsrs	r3, r2
 80031c0:	4a02      	ldr	r2, [pc, #8]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
} 
 80031c4:	40d8      	lsrs	r0, r3
 80031c6:	bd08      	pop	{r3, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08006de0 	.word	0x08006de0

080031d0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031d0:	230f      	movs	r3, #15
 80031d2:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCC_GetClockConfig+0x34>)
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80031e4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80031ec:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	08db      	lsrs	r3, r3, #3
 80031f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031f6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_RCC_GetClockConfig+0x38>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	600b      	str	r3, [r1, #0]
}
 8003202:	4770      	bx	lr
 8003204:	40021000 	.word	0x40021000
 8003208:	40022000 	.word	0x40022000

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b083      	sub	sp, #12
 8003210:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003212:	6803      	ldr	r3, [r0, #0]
 8003214:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003218:	d048      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b83      	ldr	r3, [pc, #524]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003222:	f040 80b4 	bne.w	800338e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	4b80      	ldr	r3, [pc, #512]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800322e:	61da      	str	r2, [r3, #28]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800323a:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	4b7b      	ldr	r3, [pc, #492]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003244:	f000 80a5 	beq.w	8003392 <HAL_RCCEx_PeriphCLKConfig+0x186>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003248:	4b77      	ldr	r3, [pc, #476]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800324c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003250:	d022      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8003252:	6862      	ldr	r2, [r4, #4]
 8003254:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003258:	429a      	cmp	r2, r3
 800325a:	d01d      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325c:	4872      	ldr	r0, [pc, #456]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800325e:	6a01      	ldr	r1, [r0, #32]
 8003260:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8003264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003268:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800326c:	fab2 f282 	clz	r2, r2
 8003270:	4f6f      	ldr	r7, [pc, #444]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003272:	443a      	add	r2, r7
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	f04f 0c01 	mov.w	ip, #1
 800327a:	f8c2 c000 	str.w	ip, [r2]
 800327e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	443b      	add	r3, r7
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800328e:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003290:	f011 0f01 	tst.w	r1, #1
 8003294:	f040 8092 	bne.w	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003298:	4a63      	ldr	r2, [pc, #396]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800329a:	6a13      	ldr	r3, [r2, #32]
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	6861      	ldr	r1, [r4, #4]
 80032a2:	430b      	orrs	r3, r1
 80032a4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	f040 80b4 	bne.w	8003414 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	f013 0f01 	tst.w	r3, #1
 80032b2:	d006      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b4:	4a5c      	ldr	r2, [pc, #368]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80032b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032b8:	f023 0303 	bic.w	r3, r3, #3
 80032bc:	68a1      	ldr	r1, [r4, #8]
 80032be:	430b      	orrs	r3, r1
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	f013 0f20 	tst.w	r3, #32
 80032c8:	d006      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ca:	4a57      	ldr	r2, [pc, #348]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80032cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032ce:	f023 0310 	bic.w	r3, r3, #16
 80032d2:	68e1      	ldr	r1, [r4, #12]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6313      	str	r3, [r2, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032de:	d006      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032e0:	4a51      	ldr	r2, [pc, #324]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80032e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032e4:	f023 0320 	bic.w	r3, r3, #32
 80032e8:	6921      	ldr	r1, [r4, #16]
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80032f4:	d006      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032f6:	4a4c      	ldr	r2, [pc, #304]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80032f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fe:	6961      	ldr	r1, [r4, #20]
 8003300:	430b      	orrs	r3, r1
 8003302:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	f413 7f00 	tst.w	r3, #512	; 0x200
 800330a:	d006      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800330c:	4a46      	ldr	r2, [pc, #280]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800330e:	6853      	ldr	r3, [r2, #4]
 8003310:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003314:	69e1      	ldr	r1, [r4, #28]
 8003316:	430b      	orrs	r3, r1
 8003318:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003320:	d006      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003322:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003324:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003326:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800332a:	69a1      	ldr	r1, [r4, #24]
 800332c:	430b      	orrs	r3, r1
 800332e:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003336:	d006      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003338:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800333a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800333c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003340:	6a21      	ldr	r1, [r4, #32]
 8003342:	430b      	orrs	r3, r1
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800334c:	d006      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800334e:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003350:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003356:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003358:	430b      	orrs	r3, r1
 800335a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003362:	d006      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003366:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800336c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800336e:	430b      	orrs	r3, r1
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003378:	d053      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800337a:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800337c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800337e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003382:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003384:	430b      	orrs	r3, r1
 8003386:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003388:	2000      	movs	r0, #0
}
 800338a:	b003      	add	sp, #12
 800338c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2500      	movs	r5, #0
 8003390:	e754      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003392:	4a26      	ldr	r2, [pc, #152]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8003394:	6813      	ldr	r3, [r2, #0]
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800339c:	f7fe f934 	bl	8001608 <HAL_GetTick>
 80033a0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033aa:	f47f af4d 	bne.w	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fe f92b 	bl	8001608 <HAL_GetTick>
 80033b2:	1b80      	subs	r0, r0, r6
 80033b4:	2864      	cmp	r0, #100	; 0x64
 80033b6:	d9f4      	bls.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 80033b8:	2003      	movs	r0, #3
 80033ba:	e7e6      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x17e>
        tickstart = HAL_GetTick();
 80033bc:	f7fe f924 	bl	8001608 <HAL_GetTick>
 80033c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	e015      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80033c4:	4b18      	ldr	r3, [pc, #96]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80033c6:	6a19      	ldr	r1, [r3, #32]
 80033c8:	2302      	movs	r3, #2
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2201      	movs	r2, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	420b      	tst	r3, r1
 80033de:	f47f af5b 	bne.w	8003298 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fe f911 	bl	8001608 <HAL_GetTick>
 80033e6:	1b80      	subs	r0, r0, r6
 80033e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80033ec:	4298      	cmp	r0, r3
 80033ee:	d816      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80033f0:	2302      	movs	r3, #2
 80033f2:	fa93 f2a3 	rbit	r2, r3
 80033f6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d0dd      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003408:	2302      	movs	r3, #2
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003410:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003412:	e7d9      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	69d3      	ldr	r3, [r2, #28]
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
 800341c:	e746      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 800341e:	2003      	movs	r0, #3
 8003420:	e7b3      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x17e>
  return HAL_OK;
 8003422:	2000      	movs	r0, #0
 8003424:	e7b1      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
 8003430:	10908100 	.word	0x10908100

08003434 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003438:	6802      	ldr	r2, [r0, #0]
 800343a:	68d3      	ldr	r3, [r2, #12]
 800343c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003440:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003442:	f7fe f8e1 	bl	8001608 <HAL_GetTick>
 8003446:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f013 0f20 	tst.w	r3, #32
 8003450:	d107      	bne.n	8003462 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003452:	f7fe f8d9 	bl	8001608 <HAL_GetTick>
 8003456:	1b40      	subs	r0, r0, r5
 8003458:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800345c:	d9f4      	bls.n	8003448 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800345e:	2003      	movs	r0, #3
 8003460:	e000      	b.n	8003464 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8003462:	2000      	movs	r0, #0
}
 8003464:	bd38      	pop	{r3, r4, r5, pc}

08003466 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003466:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003468:	6803      	ldr	r3, [r0, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003470:	d001      	beq.n	8003476 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003472:	2000      	movs	r0, #0
}
 8003474:	bd38      	pop	{r3, r4, r5, pc}
 8003476:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800347e:	f7fe f8c3 	bl	8001608 <HAL_GetTick>
 8003482:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f013 0f40 	tst.w	r3, #64	; 0x40
 800348c:	d107      	bne.n	800349e <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800348e:	f7fe f8bb 	bl	8001608 <HAL_GetTick>
 8003492:	1b40      	subs	r0, r0, r5
 8003494:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003498:	d9f4      	bls.n	8003484 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800349a:	2003      	movs	r0, #3
 800349c:	e7ea      	b.n	8003474 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800349e:	2000      	movs	r0, #0
 80034a0:	e7e8      	b.n	8003474 <RTC_EnterInitMode+0xe>

080034a2 <HAL_RTC_Init>:
{
 80034a2:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d05c      	beq.n	8003562 <HAL_RTC_Init+0xc0>
 80034a8:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034aa:	7f43      	ldrb	r3, [r0, #29]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d040      	beq.n	8003532 <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034b0:	2302      	movs	r3, #2
 80034b2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	22ca      	movs	r2, #202	; 0xca
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	2253      	movs	r2, #83	; 0x53
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80034c0:	4620      	mov	r0, r4
 80034c2:	f7ff ffd0 	bl	8003466 <RTC_EnterInitMode>
 80034c6:	4605      	mov	r5, r0
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d136      	bne.n	800353a <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034cc:	6822      	ldr	r2, [r4, #0]
 80034ce:	6893      	ldr	r3, [r2, #8]
 80034d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034da:	6821      	ldr	r1, [r4, #0]
 80034dc:	688a      	ldr	r2, [r1, #8]
 80034de:	6863      	ldr	r3, [r4, #4]
 80034e0:	6920      	ldr	r0, [r4, #16]
 80034e2:	4303      	orrs	r3, r0
 80034e4:	6960      	ldr	r0, [r4, #20]
 80034e6:	4303      	orrs	r3, r0
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	68e2      	ldr	r2, [r4, #12]
 80034f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	6913      	ldr	r3, [r2, #16]
 80034f6:	68a1      	ldr	r1, [r4, #8]
 80034f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80034fc:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	68d3      	ldr	r3, [r2, #12]
 8003502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003506:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f013 0f20 	tst.w	r3, #32
 8003510:	d01b      	beq.n	800354a <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800351c:	6822      	ldr	r2, [r4, #0]
 800351e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003520:	69a1      	ldr	r1, [r4, #24]
 8003522:	430b      	orrs	r3, r1
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	22ff      	movs	r2, #255	; 0xff
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800352c:	2301      	movs	r3, #1
 800352e:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8003530:	e009      	b.n	8003546 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8003532:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003534:	f7fd ff20 	bl	8001378 <HAL_RTC_MspInit>
 8003538:	e7ba      	b.n	80034b0 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003540:	2304      	movs	r3, #4
 8003542:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003544:	2501      	movs	r5, #1
}
 8003546:	4628      	mov	r0, r5
 8003548:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800354a:	4620      	mov	r0, r4
 800354c:	f7ff ff72 	bl	8003434 <HAL_RTC_WaitForSynchro>
 8003550:	2800      	cmp	r0, #0
 8003552:	d0de      	beq.n	8003512 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	22ff      	movs	r2, #255	; 0xff
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800355a:	2304      	movs	r3, #4
 800355c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800355e:	2501      	movs	r5, #1
 8003560:	e7f1      	b.n	8003546 <HAL_RTC_Init+0xa4>
    return HAL_ERROR;
 8003562:	2501      	movs	r5, #1
 8003564:	e7ef      	b.n	8003546 <HAL_RTC_Init+0xa4>

08003566 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003566:	2800      	cmp	r0, #0
 8003568:	d058      	beq.n	800361c <HAL_SPI_Init+0xb6>
{
 800356a:	b510      	push	{r4, lr}
 800356c:	4604      	mov	r4, r0
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003572:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003576:	2b00      	cmp	r3, #0
 8003578:	d045      	beq.n	8003606 <HAL_SPI_Init+0xa0>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003588:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800358a:	68e3      	ldr	r3, [r4, #12]
 800358c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003590:	d93e      	bls.n	8003610 <HAL_SPI_Init+0xaa>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003592:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003594:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003598:	d004      	beq.n	80035a4 <HAL_SPI_Init+0x3e>
 800359a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800359e:	d001      	beq.n	80035a4 <HAL_SPI_Init+0x3e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a0:	2100      	movs	r1, #0
 80035a2:	62a1      	str	r1, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80035a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035a6:	b921      	cbnz	r1, 80035b2 <HAL_SPI_Init+0x4c>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ac:	d933      	bls.n	8003616 <HAL_SPI_Init+0xb0>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80035ae:	2302      	movs	r3, #2
 80035b0:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	68a1      	ldr	r1, [r4, #8]
 80035b6:	430b      	orrs	r3, r1
 80035b8:	6921      	ldr	r1, [r4, #16]
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6961      	ldr	r1, [r4, #20]
 80035be:	430b      	orrs	r3, r1
 80035c0:	69a1      	ldr	r1, [r4, #24]
 80035c2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80035c6:	430b      	orrs	r3, r1
 80035c8:	69e1      	ldr	r1, [r4, #28]
 80035ca:	430b      	orrs	r3, r1
 80035cc:	6a21      	ldr	r1, [r4, #32]
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80035d2:	6821      	ldr	r1, [r4, #0]
 80035d4:	4303      	orrs	r3, r0
 80035d6:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80035d8:	8b63      	ldrh	r3, [r4, #26]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035e0:	430b      	orrs	r3, r1
 80035e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e4:	430b      	orrs	r3, r1
 80035e6:	68e1      	ldr	r1, [r4, #12]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6821      	ldr	r1, [r4, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035f0:	6822      	ldr	r2, [r4, #0]
 80035f2:	69d3      	ldr	r3, [r2, #28]
 80035f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fa:	2000      	movs	r0, #0
 80035fc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035fe:	2301      	movs	r3, #1
 8003600:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8003604:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003606:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800360a:	f7fd fef1 	bl	80013f0 <HAL_SPI_MspInit>
 800360e:	e7b4      	b.n	800357a <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003614:	e7be      	b.n	8003594 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003616:	2301      	movs	r3, #1
 8003618:	6323      	str	r3, [r4, #48]	; 0x30
 800361a:	e7ca      	b.n	80035b2 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800361c:	2001      	movs	r0, #1
}
 800361e:	4770      	bx	lr

08003620 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003620:	4770      	bx	lr
	...

08003624 <HAL_SPI_IRQHandler>:
{
 8003624:	b530      	push	{r4, r5, lr}
 8003626:	b085      	sub	sp, #20
 8003628:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800362a:	6802      	ldr	r2, [r0, #0]
 800362c:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800362e:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003630:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8003634:	b949      	cbnz	r1, 800364a <HAL_SPI_IRQHandler+0x26>
 8003636:	f013 0f01 	tst.w	r3, #1
 800363a:	d006      	beq.n	800364a <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800363c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003640:	d003      	beq.n	800364a <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8003642:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003644:	4620      	mov	r0, r4
 8003646:	4798      	blx	r3
    return;
 8003648:	e008      	b.n	800365c <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800364a:	f013 0f02 	tst.w	r3, #2
 800364e:	d007      	beq.n	8003660 <HAL_SPI_IRQHandler+0x3c>
 8003650:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003654:	d004      	beq.n	8003660 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003656:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003658:	4620      	mov	r0, r4
 800365a:	4798      	blx	r3
}
 800365c:	b005      	add	sp, #20
 800365e:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003660:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8003664:	b91d      	cbnz	r5, 800366e <HAL_SPI_IRQHandler+0x4a>
 8003666:	b911      	cbnz	r1, 800366e <HAL_SPI_IRQHandler+0x4a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003668:	f413 7f80 	tst.w	r3, #256	; 0x100
 800366c:	d0f6      	beq.n	800365c <HAL_SPI_IRQHandler+0x38>
 800366e:	f010 0f20 	tst.w	r0, #32
 8003672:	d0f3      	beq.n	800365c <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003674:	b179      	cbz	r1, 8003696 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003676:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 800367a:	b2c9      	uxtb	r1, r1
 800367c:	2903      	cmp	r1, #3
 800367e:	d053      	beq.n	8003728 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003680:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003682:	f041 0104 	orr.w	r1, r1, #4
 8003686:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003688:	2100      	movs	r1, #0
 800368a:	9100      	str	r1, [sp, #0]
 800368c:	68d1      	ldr	r1, [r2, #12]
 800368e:	9100      	str	r1, [sp, #0]
 8003690:	6891      	ldr	r1, [r2, #8]
 8003692:	9100      	str	r1, [sp, #0]
 8003694:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003696:	b165      	cbz	r5, 80036b2 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003698:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800369a:	f041 0101 	orr.w	r1, r1, #1
 800369e:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036a0:	2100      	movs	r1, #0
 80036a2:	9102      	str	r1, [sp, #8]
 80036a4:	6891      	ldr	r1, [r2, #8]
 80036a6:	9102      	str	r1, [sp, #8]
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80036ae:	6011      	str	r1, [r2, #0]
 80036b0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80036b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036b6:	d009      	beq.n	80036cc <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80036b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80036c0:	2300      	movs	r3, #0
 80036c2:	9303      	str	r3, [sp, #12]
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	9303      	str	r3, [sp, #12]
 80036ca:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0c4      	beq.n	800365c <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	6853      	ldr	r3, [r2, #4]
 80036d6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80036da:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80036dc:	2301      	movs	r3, #1
 80036de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80036e2:	f010 0f03 	tst.w	r0, #3
 80036e6:	d027      	beq.n	8003738 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	6853      	ldr	r3, [r2, #4]
 80036ec:	f023 0303 	bic.w	r3, r3, #3
 80036f0:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80036f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036f4:	b14b      	cbz	r3, 800370a <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <HAL_SPI_IRQHandler+0x11c>)
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80036fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fc:	f7fe fd78 	bl	80021f0 <HAL_DMA_Abort_IT>
 8003700:	b118      	cbz	r0, 800370a <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003702:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003708:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800370a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0a5      	beq.n	800365c <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003710:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <HAL_SPI_IRQHandler+0x11c>)
 8003712:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003714:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003716:	f7fe fd6b 	bl	80021f0 <HAL_DMA_Abort_IT>
 800371a:	2800      	cmp	r0, #0
 800371c:	d09e      	beq.n	800365c <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800371e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003724:	6623      	str	r3, [r4, #96]	; 0x60
 8003726:	e799      	b.n	800365c <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003728:	2300      	movs	r3, #0
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	68d3      	ldr	r3, [r2, #12]
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	6893      	ldr	r3, [r2, #8]
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	9b01      	ldr	r3, [sp, #4]
        return;
 8003736:	e791      	b.n	800365c <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8003738:	4620      	mov	r0, r4
 800373a:	f7ff ff71 	bl	8003620 <HAL_SPI_ErrorCallback>
 800373e:	e78d      	b.n	800365c <HAL_SPI_IRQHandler+0x38>
 8003740:	08003745 	.word	0x08003745

08003744 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003744:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003746:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800374e:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003750:	f7ff ff66 	bl	8003620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003754:	bd08      	pop	{r3, pc}

08003756 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003756:	4770      	bx	lr

08003758 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003758:	6802      	ldr	r2, [r0, #0]
 800375a:	68d3      	ldr	r3, [r2, #12]
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003762:	6802      	ldr	r2, [r0, #0]
 8003764:	6891      	ldr	r1, [r2, #8]
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_TIM_Base_Start_IT+0x28>)
 8003768:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	2b06      	cmp	r3, #6
 800376c:	d006      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x24>
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d003      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x24>
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	6813      	ldr	r3, [r2, #0]
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800377c:	2000      	movs	r0, #0
 800377e:	4770      	bx	lr
 8003780:	00010007 	.word	0x00010007

08003784 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003784:	4770      	bx	lr

08003786 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_IRQHandler>:
{
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	f012 0f02 	tst.w	r2, #2
 8003798:	d011      	beq.n	80037be <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	f012 0f02 	tst.w	r2, #2
 80037a0:	d00d      	beq.n	80037be <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a2:	f06f 0202 	mvn.w	r2, #2
 80037a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a8:	2301      	movs	r3, #1
 80037aa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ac:	6803      	ldr	r3, [r0, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f013 0f03 	tst.w	r3, #3
 80037b4:	d079      	beq.n	80038aa <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	f7ff ffe6 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	2300      	movs	r3, #0
 80037bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	f012 0f04 	tst.w	r2, #4
 80037c6:	d012      	beq.n	80037ee <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	f012 0f04 	tst.w	r2, #4
 80037ce:	d00e      	beq.n	80037ee <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d0:	f06f 0204 	mvn.w	r2, #4
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d6:	2302      	movs	r3, #2
 80037d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80037e2:	d068      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	4620      	mov	r0, r4
 80037e6:	f7ff ffce 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	2300      	movs	r3, #0
 80037ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	f012 0f08 	tst.w	r2, #8
 80037f6:	d012      	beq.n	800381e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	f012 0f08 	tst.w	r2, #8
 80037fe:	d00e      	beq.n	800381e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003800:	f06f 0208 	mvn.w	r2, #8
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003806:	2304      	movs	r3, #4
 8003808:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f013 0f03 	tst.w	r3, #3
 8003812:	d057      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003814:	4620      	mov	r0, r4
 8003816:	f7ff ffb6 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	2300      	movs	r3, #0
 800381c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	f012 0f10 	tst.w	r2, #16
 8003826:	d012      	beq.n	800384e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	f012 0f10 	tst.w	r2, #16
 800382e:	d00e      	beq.n	800384e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003830:	f06f 0210 	mvn.w	r2, #16
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003836:	2308      	movs	r3, #8
 8003838:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003842:	d046      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003844:	4620      	mov	r0, r4
 8003846:	f7ff ff9e 	bl	8003786 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	2300      	movs	r3, #0
 800384c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	f012 0f01 	tst.w	r2, #1
 8003856:	d003      	beq.n	8003860 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	f012 0f01 	tst.w	r2, #1
 800385e:	d13f      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003870:	d13d      	bne.n	80038ee <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	f412 7f80 	tst.w	r2, #256	; 0x100
 800387a:	d003      	beq.n	8003884 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003882:	d13b      	bne.n	80038fc <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	f012 0f40 	tst.w	r2, #64	; 0x40
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003894:	d139      	bne.n	800390a <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	f012 0f20 	tst.w	r2, #32
 800389e:	d003      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	f012 0f20 	tst.w	r2, #32
 80038a6:	d137      	bne.n	8003918 <HAL_TIM_IRQHandler+0x18c>
}
 80038a8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	f7ff ff6b 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff ff6a 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
 80038b4:	e781      	b.n	80037ba <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7ff ff64 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff ff63 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
 80038c2:	e792      	b.n	80037ea <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7ff ff5d 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7ff ff5c 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
 80038d0:	e7a3      	b.n	800381a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	4620      	mov	r0, r4
 80038d4:	f7ff ff56 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff ff55 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
 80038de:	e7b4      	b.n	800384a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7fd fd20 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
 80038ec:	e7b8      	b.n	8003860 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 f871 	bl	80039dc <HAL_TIMEx_BreakCallback>
 80038fa:	e7ba      	b.n	8003872 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003900:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003902:	4620      	mov	r0, r4
 8003904:	f000 f86b 	bl	80039de <HAL_TIMEx_Break2Callback>
 8003908:	e7bc      	b.n	8003884 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800390a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800390e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff ff3a 	bl	800378a <HAL_TIM_TriggerCallback>
 8003916:	e7be      	b.n	8003896 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003918:	f06f 0220 	mvn.w	r2, #32
 800391c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f85b 	bl	80039da <HAL_TIMEx_CommutCallback>
}
 8003924:	e7c0      	b.n	80038a8 <HAL_TIM_IRQHandler+0x11c>
	...

08003928 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003928:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <TIM_Base_SetConfig+0x7c>)
 800392c:	4290      	cmp	r0, r2
 800392e:	d002      	beq.n	8003936 <TIM_Base_SetConfig+0xe>
 8003930:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003934:	d103      	bne.n	800393e <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800393a:	684a      	ldr	r2, [r1, #4]
 800393c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <TIM_Base_SetConfig+0x7c>)
 8003940:	4290      	cmp	r0, r2
 8003942:	d00e      	beq.n	8003962 <TIM_Base_SetConfig+0x3a>
 8003944:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003948:	d00b      	beq.n	8003962 <TIM_Base_SetConfig+0x3a>
 800394a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800394e:	4290      	cmp	r0, r2
 8003950:	d007      	beq.n	8003962 <TIM_Base_SetConfig+0x3a>
 8003952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003956:	4290      	cmp	r0, r2
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0x3a>
 800395a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800395e:	4290      	cmp	r0, r2
 8003960:	d103      	bne.n	800396a <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003966:	68ca      	ldr	r2, [r1, #12]
 8003968:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800396a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800396e:	694a      	ldr	r2, [r1, #20]
 8003970:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003972:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	688b      	ldr	r3, [r1, #8]
 8003976:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	680b      	ldr	r3, [r1, #0]
 800397a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <TIM_Base_SetConfig+0x7c>)
 800397e:	4298      	cmp	r0, r3
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0x72>
 8003982:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003986:	4298      	cmp	r0, r3
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0x72>
 800398a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398e:	4298      	cmp	r0, r3
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0x72>
 8003992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003996:	4298      	cmp	r0, r3
 8003998:	d101      	bne.n	800399e <TIM_Base_SetConfig+0x76>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399a:	690b      	ldr	r3, [r1, #16]
 800399c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800399e:	2301      	movs	r3, #1
 80039a0:	6143      	str	r3, [r0, #20]
}
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00

080039a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80039a8:	b1a8      	cbz	r0, 80039d6 <HAL_TIM_Base_Init+0x2e>
{
 80039aa:	b510      	push	{r4, lr}
 80039ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039b2:	b15b      	cbz	r3, 80039cc <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	2302      	movs	r3, #2
 80039b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ba:	1d21      	adds	r1, r4, #4
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	f7ff ffb3 	bl	8003928 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039c8:	2000      	movs	r0, #0
}
 80039ca:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80039cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039d0:	f7ff fec1 	bl	8003756 <HAL_TIM_Base_MspInit>
 80039d4:	e7ee      	b.n	80039b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80039d6:	2001      	movs	r0, #1
}
 80039d8:	4770      	bx	lr

080039da <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039da:	4770      	bx	lr

080039dc <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039dc:	4770      	bx	lr

080039de <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039de:	4770      	bx	lr

080039e0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80039e4:	b99b      	cbnz	r3, 8003a0e <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ea:	b99b      	cbnz	r3, 8003a14 <osKernelInitialize+0x34>
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <osKernelInitialize+0x40>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d005      	beq.n	8003a00 <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80039f4:	b98b      	cbnz	r3, 8003a1a <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <osKernelInitialize+0x40>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039fc:	2000      	movs	r0, #0
 80039fe:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a00:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8003a04:	2a00      	cmp	r2, #0
 8003a06:	d0f5      	beq.n	80039f4 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8003a08:	f06f 0005 	mvn.w	r0, #5
 8003a0c:	4770      	bx	lr
 8003a0e:	f06f 0005 	mvn.w	r0, #5
 8003a12:	4770      	bx	lr
 8003a14:	f06f 0005 	mvn.w	r0, #5
 8003a18:	4770      	bx	lr
    } else {
      stat = osError;
 8003a1a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003a1e:	4770      	bx	lr
 8003a20:	200002d8 	.word	0x200002d8

08003a24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a24:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a26:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a2a:	b9b3      	cbnz	r3, 8003a5a <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a30:	b9b3      	cbnz	r3, 8003a60 <osKernelStart+0x3c>
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <osKernelStart+0x48>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d008      	beq.n	8003a4c <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d113      	bne.n	8003a66 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <osKernelStart+0x48>)
 8003a40:	2202      	movs	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003a44:	f000 fec2 	bl	80047cc <vTaskStartScheduler>
      stat = osOK;
 8003a48:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8003a4a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a4c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	d0f2      	beq.n	8003a3a <osKernelStart+0x16>
    stat = osErrorISR;
 8003a54:	f06f 0005 	mvn.w	r0, #5
 8003a58:	e7f7      	b.n	8003a4a <osKernelStart+0x26>
 8003a5a:	f06f 0005 	mvn.w	r0, #5
 8003a5e:	e7f4      	b.n	8003a4a <osKernelStart+0x26>
 8003a60:	f06f 0005 	mvn.w	r0, #5
 8003a64:	e7f1      	b.n	8003a4a <osKernelStart+0x26>
      stat = osError;
 8003a66:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8003a6a:	e7ee      	b.n	8003a4a <osKernelStart+0x26>
 8003a6c:	200002d8 	.word	0x200002d8

08003a70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a74:	2400      	movs	r4, #0
 8003a76:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a78:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003a7c:	bb4c      	cbnz	r4, 8003ad2 <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	bb33      	cbnz	r3, 8003ad2 <osThreadNew+0x62>
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <osThreadNew+0xe4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d025      	beq.n	8003ad8 <osThreadNew+0x68>
 8003a8c:	b308      	cbz	r0, 8003ad2 <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8003a94:	b392      	cbz	r2, 8003afc <osThreadNew+0x8c>
      if (attr->name != NULL) {
 8003a96:	6816      	ldr	r6, [r2, #0]
 8003a98:	b31e      	cbz	r6, 8003ae2 <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003a9a:	6994      	ldr	r4, [r2, #24]
 8003a9c:	b904      	cbnz	r4, 8003aa0 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8003a9e:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003aa0:	1e63      	subs	r3, r4, #1
 8003aa2:	2b37      	cmp	r3, #55	; 0x37
 8003aa4:	d852      	bhi.n	8003b4c <osThreadNew+0xdc>
 8003aa6:	6853      	ldr	r3, [r2, #4]
 8003aa8:	f013 0f01 	tst.w	r3, #1
 8003aac:	d150      	bne.n	8003b50 <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003aae:	6955      	ldr	r5, [r2, #20]
 8003ab0:	b1d5      	cbz	r5, 8003ae8 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ab2:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ab6:	6893      	ldr	r3, [r2, #8]
 8003ab8:	b12b      	cbz	r3, 8003ac6 <osThreadNew+0x56>
 8003aba:	68d7      	ldr	r7, [r2, #12]
 8003abc:	2f5b      	cmp	r7, #91	; 0x5b
 8003abe:	d902      	bls.n	8003ac6 <osThreadNew+0x56>
 8003ac0:	6917      	ldr	r7, [r2, #16]
 8003ac2:	b107      	cbz	r7, 8003ac6 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ac4:	bb0d      	cbnz	r5, 8003b0a <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ac6:	b193      	cbz	r3, 8003aee <osThreadNew+0x7e>
    mem   = -1;
 8003ac8:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8003acc:	2d01      	cmp	r5, #1
 8003ace:	d023      	beq.n	8003b18 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8003ad0:	b375      	cbz	r5, 8003b30 <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ad2:	9804      	ldr	r0, [sp, #16]
}
 8003ad4:	b007      	add	sp, #28
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ad8:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f8      	bne.n	8003ad2 <osThreadNew+0x62>
 8003ae0:	e7d4      	b.n	8003a8c <osThreadNew+0x1c>
    name  = &empty;
 8003ae2:	f10d 0617 	add.w	r6, sp, #23
 8003ae6:	e7d8      	b.n	8003a9a <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 8003ae8:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8003aec:	e7e3      	b.n	8003ab6 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003aee:	68d3      	ldr	r3, [r2, #12]
 8003af0:	b96b      	cbnz	r3, 8003b0e <osThreadNew+0x9e>
 8003af2:	6913      	ldr	r3, [r2, #16]
 8003af4:	b173      	cbz	r3, 8003b14 <osThreadNew+0xa4>
    mem   = -1;
 8003af6:	f04f 35ff 	mov.w	r5, #4294967295
 8003afa:	e7e7      	b.n	8003acc <osThreadNew+0x5c>
      mem = 0;
 8003afc:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8003afe:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 8003b00:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8003b04:	f10d 0617 	add.w	r6, sp, #23
 8003b08:	e7e0      	b.n	8003acc <osThreadNew+0x5c>
        mem = 1;
 8003b0a:	2501      	movs	r5, #1
 8003b0c:	e7de      	b.n	8003acc <osThreadNew+0x5c>
    mem   = -1;
 8003b0e:	f04f 35ff 	mov.w	r5, #4294967295
 8003b12:	e7db      	b.n	8003acc <osThreadNew+0x5c>
          mem = 0;
 8003b14:	2500      	movs	r5, #0
 8003b16:	e7d9      	b.n	8003acc <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b18:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b1c:	9202      	str	r2, [sp, #8]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	9400      	str	r4, [sp, #0]
 8003b22:	460b      	mov	r3, r1
 8003b24:	4662      	mov	r2, ip
 8003b26:	4631      	mov	r1, r6
 8003b28:	f000 fde4 	bl	80046f4 <xTaskCreateStatic>
 8003b2c:	9004      	str	r0, [sp, #16]
 8003b2e:	e7d0      	b.n	8003ad2 <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b30:	aa04      	add	r2, sp, #16
 8003b32:	9201      	str	r2, [sp, #4]
 8003b34:	9400      	str	r4, [sp, #0]
 8003b36:	460b      	mov	r3, r1
 8003b38:	fa1f f28c 	uxth.w	r2, ip
 8003b3c:	4631      	mov	r1, r6
 8003b3e:	f000 fe12 	bl	8004766 <xTaskCreate>
 8003b42:	2801      	cmp	r0, #1
 8003b44:	d0c5      	beq.n	8003ad2 <osThreadNew+0x62>
          hTask = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	e7c2      	b.n	8003ad2 <osThreadNew+0x62>
        return (NULL);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e7c1      	b.n	8003ad4 <osThreadNew+0x64>
 8003b50:	2000      	movs	r0, #0
 8003b52:	e7bf      	b.n	8003ad4 <osThreadNew+0x64>
 8003b54:	200002d8 	.word	0x200002d8

08003b58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003b58:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b5a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b5e:	b9a3      	cbnz	r3, 8003b8a <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b60:	f3ef 8310 	mrs	r3, PRIMASK
 8003b64:	b9a3      	cbnz	r3, 8003b90 <osDelay+0x38>
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <osDelay+0x40>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d002      	beq.n	8003b74 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003b6e:	b940      	cbnz	r0, 8003b82 <osDelay+0x2a>
    stat = osOK;
 8003b70:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003b72:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b74:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f8      	beq.n	8003b6e <osDelay+0x16>
    stat = osErrorISR;
 8003b7c:	f06f 0005 	mvn.w	r0, #5
 8003b80:	e7f7      	b.n	8003b72 <osDelay+0x1a>
      vTaskDelay(ticks);
 8003b82:	f000 ff81 	bl	8004a88 <vTaskDelay>
    stat = osOK;
 8003b86:	2000      	movs	r0, #0
 8003b88:	e7f3      	b.n	8003b72 <osDelay+0x1a>
    stat = osErrorISR;
 8003b8a:	f06f 0005 	mvn.w	r0, #5
 8003b8e:	e7f0      	b.n	8003b72 <osDelay+0x1a>
 8003b90:	f06f 0005 	mvn.w	r0, #5
 8003b94:	e7ed      	b.n	8003b72 <osDelay+0x1a>
 8003b96:	bf00      	nop
 8003b98:	200002d8 	.word	0x200002d8

08003b9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d14c      	bne.n	8003c42 <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d14a      	bne.n	8003c46 <osMessageQueueNew+0xaa>
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <osMessageQueueNew+0xbc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d023      	beq.n	8003c00 <osMessageQueueNew+0x64>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d046      	beq.n	8003c4a <osMessageQueueNew+0xae>
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	d046      	beq.n	8003c4e <osMessageQueueNew+0xb2>
 8003bc0:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d034      	beq.n	8003c30 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003bc6:	6893      	ldr	r3, [r2, #8]
 8003bc8:	b14b      	cbz	r3, 8003bde <osMessageQueueNew+0x42>
 8003bca:	68d2      	ldr	r2, [r2, #12]
 8003bcc:	2a4f      	cmp	r2, #79	; 0x4f
 8003bce:	d906      	bls.n	8003bde <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003bd0:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003bd2:	b122      	cbz	r2, 8003bde <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003bd4:	6966      	ldr	r6, [r4, #20]
 8003bd6:	fb01 f500 	mul.w	r5, r1, r0
 8003bda:	42ae      	cmp	r6, r5
 8003bdc:	d222      	bcs.n	8003c24 <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003bde:	b1ab      	cbz	r3, 8003c0c <osMessageQueueNew+0x70>
    mem = -1;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8003be4:	bbab      	cbnz	r3, 8003c52 <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003be6:	2200      	movs	r2, #0
 8003be8:	f000 f9d3 	bl	8003f92 <xQueueGenericCreate>
 8003bec:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003bee:	b125      	cbz	r5, 8003bfa <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8003bf0:	b32c      	cbz	r4, 8003c3e <osMessageQueueNew+0xa2>
        name = attr->name;
 8003bf2:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f000 fbc3 	bl	8004380 <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c00:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0d7      	beq.n	8003bb8 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8003c08:	2500      	movs	r5, #0
 8003c0a:	e7f6      	b.n	8003bfa <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c0c:	68e3      	ldr	r3, [r4, #12]
 8003c0e:	b98b      	cbnz	r3, 8003c34 <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c10:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c12:	b113      	cbz	r3, 8003c1a <osMessageQueueNew+0x7e>
    mem = -1;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	e7e4      	b.n	8003be4 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c1a:	6963      	ldr	r3, [r4, #20]
 8003c1c:	b16b      	cbz	r3, 8003c3a <osMessageQueueNew+0x9e>
    mem = -1;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c22:	e7df      	b.n	8003be4 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003c24:	2500      	movs	r5, #0
 8003c26:	9500      	str	r5, [sp, #0]
 8003c28:	f000 f96b 	bl	8003f02 <xQueueGenericCreateStatic>
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	e7de      	b.n	8003bee <osMessageQueueNew+0x52>
      mem = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e7d7      	b.n	8003be4 <osMessageQueueNew+0x48>
    mem = -1;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	e7d4      	b.n	8003be4 <osMessageQueueNew+0x48>
          mem = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e7d2      	b.n	8003be4 <osMessageQueueNew+0x48>
        name = NULL;
 8003c3e:	2100      	movs	r1, #0
 8003c40:	e7d8      	b.n	8003bf4 <osMessageQueueNew+0x58>
  hQueue = NULL;
 8003c42:	2500      	movs	r5, #0
 8003c44:	e7d9      	b.n	8003bfa <osMessageQueueNew+0x5e>
 8003c46:	2500      	movs	r5, #0
 8003c48:	e7d7      	b.n	8003bfa <osMessageQueueNew+0x5e>
 8003c4a:	2500      	movs	r5, #0
 8003c4c:	e7d5      	b.n	8003bfa <osMessageQueueNew+0x5e>
 8003c4e:	2500      	movs	r5, #0
 8003c50:	e7d3      	b.n	8003bfa <osMessageQueueNew+0x5e>
 8003c52:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8003c54:	e7d1      	b.n	8003bfa <osMessageQueueNew+0x5e>
 8003c56:	bf00      	nop
 8003c58:	200002d8 	.word	0x200002d8

08003c5c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <vApplicationGetIdleTaskMemory+0x10>)
 8003c5e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <vApplicationGetIdleTaskMemory+0x14>)
 8003c62:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	2000027c 	.word	0x2000027c
 8003c70:	2000007c 	.word	0x2000007c

08003c74 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <vApplicationGetTimerTaskMemory+0x10>)
 8003c76:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <vApplicationGetTimerTaskMemory+0x14>)
 8003c7a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	4770      	bx	lr
 8003c84:	200006dc 	.word	0x200006dc
 8003c88:	200002dc 	.word	0x200002dc

08003c8c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c8c:	f100 0308 	add.w	r3, r0, #8
 8003c90:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c98:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c9a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ca0:	4770      	bx	lr

08003ca2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ca6:	4770      	bx	lr

08003ca8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ca8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003caa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cb4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cb6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003cb8:	6803      	ldr	r3, [r0, #0]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	6003      	str	r3, [r0, #0]
}
 8003cbe:	4770      	bx	lr

08003cc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cc0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cc2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cc4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003cc8:	d002      	beq.n	8003cd0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cca:	f100 0208 	add.w	r2, r0, #8
 8003cce:	e002      	b.n	8003cd6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cd0:	6902      	ldr	r2, [r0, #16]
 8003cd2:	e004      	b.n	8003cde <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6853      	ldr	r3, [r2, #4]
 8003cd8:	681c      	ldr	r4, [r3, #0]
 8003cda:	42ac      	cmp	r4, r5
 8003cdc:	d9fa      	bls.n	8003cd4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cde:	6853      	ldr	r3, [r2, #4]
 8003ce0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ce2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ce4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ce6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ce8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003cea:	6803      	ldr	r3, [r0, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	6003      	str	r3, [r0, #0]
}
 8003cf0:	bc30      	pop	{r4, r5}
 8003cf2:	4770      	bx	lr

08003cf4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003cf4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cf6:	6842      	ldr	r2, [r0, #4]
 8003cf8:	6881      	ldr	r1, [r0, #8]
 8003cfa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cfc:	6882      	ldr	r2, [r0, #8]
 8003cfe:	6841      	ldr	r1, [r0, #4]
 8003d00:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	4282      	cmp	r2, r0
 8003d06:	d006      	beq.n	8003d16 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d08:	2200      	movs	r2, #0
 8003d0a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	3a01      	subs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d12:	6818      	ldr	r0, [r3, #0]
}
 8003d14:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d16:	6882      	ldr	r2, [r0, #8]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e7f5      	b.n	8003d08 <uxListRemove+0x14>

08003d1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d20:	f001 fac8 	bl	80052b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d004      	beq.n	8003d36 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8003d2c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f001 fae3 	bl	80052f8 <vPortExitCritical>

	return xReturn;
}
 8003d32:	4620      	mov	r0, r4
 8003d34:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003d36:	2401      	movs	r4, #1
 8003d38:	e7f9      	b.n	8003d2e <prvIsQueueFull+0x12>

08003d3a <prvIsQueueEmpty>:
{
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003d3e:	f001 fab9 	bl	80052b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d44:	b123      	cbz	r3, 8003d50 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8003d46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003d48:	f001 fad6 	bl	80052f8 <vPortExitCritical>
}
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003d50:	2401      	movs	r4, #1
 8003d52:	e7f9      	b.n	8003d48 <prvIsQueueEmpty+0xe>

08003d54 <prvCopyDataToQueue>:
{
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4604      	mov	r4, r0
 8003d58:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d5a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d5e:	b95a      	cbnz	r2, 8003d78 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d60:	6803      	ldr	r3, [r0, #0]
 8003d62:	b11b      	cbz	r3, 8003d6c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003d64:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d66:	3501      	adds	r5, #1
 8003d68:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d6c:	6840      	ldr	r0, [r0, #4]
 8003d6e:	f000 ffd9 	bl	8004d24 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	e7f6      	b.n	8003d66 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003d78:	b96e      	cbnz	r6, 8003d96 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d7a:	6880      	ldr	r0, [r0, #8]
 8003d7c:	f001 fd30 	bl	80057e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d82:	68a3      	ldr	r3, [r4, #8]
 8003d84:	4413      	add	r3, r2
 8003d86:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d88:	6862      	ldr	r2, [r4, #4]
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d319      	bcc.n	8003dc2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003d92:	2000      	movs	r0, #0
 8003d94:	e7e7      	b.n	8003d66 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d96:	68c0      	ldr	r0, [r0, #12]
 8003d98:	f001 fd22 	bl	80057e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d9e:	4252      	negs	r2, r2
 8003da0:	68e3      	ldr	r3, [r4, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003da6:	6821      	ldr	r1, [r4, #0]
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d202      	bcs.n	8003db2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003dac:	6863      	ldr	r3, [r4, #4]
 8003dae:	441a      	add	r2, r3
 8003db0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003db2:	2e02      	cmp	r6, #2
 8003db4:	d001      	beq.n	8003dba <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003db6:	2000      	movs	r0, #0
 8003db8:	e7d5      	b.n	8003d66 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dba:	b125      	cbz	r5, 8003dc6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8003dbc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e7d1      	b.n	8003d66 <prvCopyDataToQueue+0x12>
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	e7cf      	b.n	8003d66 <prvCopyDataToQueue+0x12>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e7cd      	b.n	8003d66 <prvCopyDataToQueue+0x12>

08003dca <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003dcc:	b172      	cbz	r2, 8003dec <prvCopyDataFromQueue+0x22>
{
 8003dce:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003dd0:	68c3      	ldr	r3, [r0, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dd6:	6844      	ldr	r4, [r0, #4]
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d301      	bcc.n	8003de0 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ddc:	6803      	ldr	r3, [r0, #0]
 8003dde:	60c3      	str	r3, [r0, #12]
 8003de0:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003de2:	68c1      	ldr	r1, [r0, #12]
 8003de4:	4620      	mov	r0, r4
 8003de6:	f001 fcfb 	bl	80057e0 <memcpy>
}
 8003dea:	bd10      	pop	{r4, pc}
 8003dec:	4770      	bx	lr

08003dee <prvUnlockQueue>:
{
 8003dee:	b538      	push	{r3, r4, r5, lr}
 8003df0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003df2:	f001 fa5f 	bl	80052b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003df6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003dfa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dfc:	e003      	b.n	8003e06 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003dfe:	f000 ff7b 	bl	8004cf8 <vTaskMissedYield>
			--cTxLock;
 8003e02:	3c01      	subs	r4, #1
 8003e04:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e06:	2c00      	cmp	r4, #0
 8003e08:	dd08      	ble.n	8003e1c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e0c:	b133      	cbz	r3, 8003e1c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003e12:	f000 fedf 	bl	8004bd4 <xTaskRemoveFromEventList>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d0f3      	beq.n	8003e02 <prvUnlockQueue+0x14>
 8003e1a:	e7f0      	b.n	8003dfe <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8003e1c:	23ff      	movs	r3, #255	; 0xff
 8003e1e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003e22:	f001 fa69 	bl	80052f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003e26:	f001 fa45 	bl	80052b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003e2a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003e2e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e30:	e003      	b.n	8003e3a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8003e32:	f000 ff61 	bl	8004cf8 <vTaskMissedYield>
				--cRxLock;
 8003e36:	3c01      	subs	r4, #1
 8003e38:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	dd08      	ble.n	8003e50 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3e:	692b      	ldr	r3, [r5, #16]
 8003e40:	b133      	cbz	r3, 8003e50 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e42:	f105 0010 	add.w	r0, r5, #16
 8003e46:	f000 fec5 	bl	8004bd4 <xTaskRemoveFromEventList>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d0f3      	beq.n	8003e36 <prvUnlockQueue+0x48>
 8003e4e:	e7f0      	b.n	8003e32 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8003e50:	23ff      	movs	r3, #255	; 0xff
 8003e52:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003e56:	f001 fa4f 	bl	80052f8 <vPortExitCritical>
}
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}

08003e5c <xQueueGenericReset>:
{
 8003e5c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003e5e:	b940      	cbnz	r0, 8003e72 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	e7fe      	b.n	8003e70 <xQueueGenericReset+0x14>
 8003e72:	4604      	mov	r4, r0
 8003e74:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003e76:	f001 fa1d 	bl	80052b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e7a:	6821      	ldr	r1, [r4, #0]
 8003e7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e80:	fb03 1002 	mla	r0, r3, r2, r1
 8003e84:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e86:	2000      	movs	r0, #0
 8003e88:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e8a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	fb02 1303 	mla	r3, r2, r3, r1
 8003e92:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e94:	23ff      	movs	r3, #255	; 0xff
 8003e96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003e9e:	b9a5      	cbnz	r5, 8003eca <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ea0:	6923      	ldr	r3, [r4, #16]
 8003ea2:	b91b      	cbnz	r3, 8003eac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003ea4:	f001 fa28 	bl	80052f8 <vPortExitCritical>
}
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eac:	f104 0010 	add.w	r0, r4, #16
 8003eb0:	f000 fe90 	bl	8004bd4 <xTaskRemoveFromEventList>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d0f5      	beq.n	8003ea4 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <xQueueGenericReset+0x80>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	e7ec      	b.n	8003ea4 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003eca:	f104 0010 	add.w	r0, r4, #16
 8003ece:	f7ff fedd 	bl	8003c8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ed2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ed6:	f7ff fed9 	bl	8003c8c <vListInitialise>
 8003eda:	e7e3      	b.n	8003ea4 <xQueueGenericReset+0x48>
 8003edc:	e000ed04 	.word	0xe000ed04

08003ee0 <prvInitialiseNewQueue>:
{
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	461d      	mov	r5, r3
 8003ee4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	b149      	cbz	r1, 8003efe <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eea:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003eec:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003eee:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f7ff ffb2 	bl	8003e5c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003ef8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003efe:	6024      	str	r4, [r4, #0]
 8003f00:	e7f4      	b.n	8003eec <prvInitialiseNewQueue+0xc>

08003f02 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f02:	b940      	cbnz	r0, 8003f16 <xQueueGenericCreateStatic+0x14>
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericCreateStatic+0x12>
	{
 8003f16:	b510      	push	{r4, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8003f1c:	b153      	cbz	r3, 8003f34 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f1e:	b192      	cbz	r2, 8003f46 <xQueueGenericCreateStatic+0x44>
 8003f20:	b989      	cbnz	r1, 8003f46 <xQueueGenericCreateStatic+0x44>
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	e7fe      	b.n	8003f32 <xQueueGenericCreateStatic+0x30>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	e7fe      	b.n	8003f44 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f46:	b94a      	cbnz	r2, 8003f5c <xQueueGenericCreateStatic+0x5a>
 8003f48:	b141      	cbz	r1, 8003f5c <xQueueGenericCreateStatic+0x5a>
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	e7fe      	b.n	8003f5a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f5c:	2050      	movs	r0, #80	; 0x50
 8003f5e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f60:	9803      	ldr	r0, [sp, #12]
 8003f62:	2850      	cmp	r0, #80	; 0x50
 8003f64:	d008      	beq.n	8003f78 <xQueueGenericCreateStatic+0x76>
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	e7fe      	b.n	8003f76 <xQueueGenericCreateStatic+0x74>
 8003f78:	4620      	mov	r0, r4
 8003f7a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f82:	9400      	str	r4, [sp, #0]
 8003f84:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003f88:	f7ff ffaa 	bl	8003ee0 <prvInitialiseNewQueue>
	}
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f92:	b940      	cbnz	r0, 8003fa6 <xQueueGenericCreate+0x14>
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	e7fe      	b.n	8003fa4 <xQueueGenericCreate+0x12>
	{
 8003fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8003fac:	b111      	cbz	r1, 8003fb4 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	fb01 f000 	mul.w	r0, r1, r0
 8003fb2:	e000      	b.n	8003fb6 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	4617      	mov	r7, r2
 8003fb8:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003fba:	3050      	adds	r0, #80	; 0x50
 8003fbc:	f001 fb30 	bl	8005620 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	b150      	cbz	r0, 8003fda <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fca:	9000      	str	r0, [sp, #0]
 8003fcc:	463b      	mov	r3, r7
 8003fce:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f7ff ff83 	bl	8003ee0 <prvInitialiseNewQueue>
	}
 8003fda:	4628      	mov	r0, r5
 8003fdc:	b003      	add	sp, #12
 8003fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fe0 <xQueueGenericSend>:
{
 8003fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003fe6:	b160      	cbz	r0, 8004002 <xQueueGenericSend+0x22>
 8003fe8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fea:	b999      	cbnz	r1, 8004014 <xQueueGenericSend+0x34>
 8003fec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003fee:	b18a      	cbz	r2, 8004014 <xQueueGenericSend+0x34>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	e7fe      	b.n	8004000 <xQueueGenericSend+0x20>
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	e7fe      	b.n	8004012 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004014:	2b02      	cmp	r3, #2
 8004016:	d10b      	bne.n	8004030 <xQueueGenericSend+0x50>
 8004018:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800401a:	2a01      	cmp	r2, #1
 800401c:	d008      	beq.n	8004030 <xQueueGenericSend+0x50>
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	e7fe      	b.n	800402e <xQueueGenericSend+0x4e>
 8004030:	461e      	mov	r6, r3
 8004032:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004034:	f000 fe66 	bl	8004d04 <xTaskGetSchedulerState>
 8004038:	b950      	cbnz	r0, 8004050 <xQueueGenericSend+0x70>
 800403a:	9b01      	ldr	r3, [sp, #4]
 800403c:	b153      	cbz	r3, 8004054 <xQueueGenericSend+0x74>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	e7fe      	b.n	800404e <xQueueGenericSend+0x6e>
 8004050:	2500      	movs	r5, #0
 8004052:	e03a      	b.n	80040ca <xQueueGenericSend+0xea>
 8004054:	2500      	movs	r5, #0
 8004056:	e038      	b.n	80040ca <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004058:	4632      	mov	r2, r6
 800405a:	4639      	mov	r1, r7
 800405c:	4620      	mov	r0, r4
 800405e:	f7ff fe79 	bl	8003d54 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004064:	b94b      	cbnz	r3, 800407a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8004066:	b1a8      	cbz	r0, 8004094 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8004068:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <xQueueGenericSend+0x178>)
 800406a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	e00c      	b.n	8004094 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800407e:	f000 fda9 	bl	8004bd4 <xTaskRemoveFromEventList>
 8004082:	b138      	cbz	r0, 8004094 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8004084:	4b34      	ldr	r3, [pc, #208]	; (8004158 <xQueueGenericSend+0x178>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004094:	f001 f930 	bl	80052f8 <vPortExitCritical>
				return pdPASS;
 8004098:	2001      	movs	r0, #1
}
 800409a:	b005      	add	sp, #20
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800409e:	f001 f92b 	bl	80052f8 <vPortExitCritical>
					return errQUEUE_FULL;
 80040a2:	2000      	movs	r0, #0
 80040a4:	e7f9      	b.n	800409a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040a6:	a802      	add	r0, sp, #8
 80040a8:	f000 fdda 	bl	8004c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040ac:	2501      	movs	r5, #1
 80040ae:	e019      	b.n	80040e4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 80040b0:	2300      	movs	r3, #0
 80040b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040b6:	e021      	b.n	80040fc <xQueueGenericSend+0x11c>
 80040b8:	2300      	movs	r3, #0
 80040ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040be:	e023      	b.n	8004108 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff fe94 	bl	8003dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040c6:	f000 fc65 	bl	8004994 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80040ca:	f001 f8f3 	bl	80052b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3c0      	bcc.n	8004058 <xQueueGenericSend+0x78>
 80040d6:	2e02      	cmp	r6, #2
 80040d8:	d0be      	beq.n	8004058 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 80040da:	9b01      	ldr	r3, [sp, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0de      	beq.n	800409e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	d0e0      	beq.n	80040a6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 80040e4:	f001 f908 	bl	80052f8 <vPortExitCritical>
		vTaskSuspendAll();
 80040e8:	f000 fbba 	bl	8004860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040ec:	f001 f8e2 	bl	80052b4 <vPortEnterCritical>
 80040f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d0d9      	beq.n	80040b0 <xQueueGenericSend+0xd0>
 80040fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004100:	b25b      	sxtb	r3, r3
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d0d7      	beq.n	80040b8 <xQueueGenericSend+0xd8>
 8004108:	f001 f8f6 	bl	80052f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800410c:	a901      	add	r1, sp, #4
 800410e:	a802      	add	r0, sp, #8
 8004110:	f000 fdb2 	bl	8004c78 <xTaskCheckForTimeOut>
 8004114:	b9c8      	cbnz	r0, 800414a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff fe00 	bl	8003d1c <prvIsQueueFull>
 800411c:	2800      	cmp	r0, #0
 800411e:	d0cf      	beq.n	80040c0 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004120:	9901      	ldr	r1, [sp, #4]
 8004122:	f104 0010 	add.w	r0, r4, #16
 8004126:	f000 fd21 	bl	8004b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff fe5f 	bl	8003dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004130:	f000 fc30 	bl	8004994 <xTaskResumeAll>
 8004134:	2800      	cmp	r0, #0
 8004136:	d1c8      	bne.n	80040ca <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8004138:	4b07      	ldr	r3, [pc, #28]	; (8004158 <xQueueGenericSend+0x178>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	e7bf      	b.n	80040ca <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff fe4f 	bl	8003dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004150:	f000 fc20 	bl	8004994 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004154:	2000      	movs	r0, #0
 8004156:	e7a0      	b.n	800409a <xQueueGenericSend+0xba>
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <xQueueGenericSendFromISR>:
{
 800415c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004160:	b160      	cbz	r0, 800417c <xQueueGenericSendFromISR+0x20>
 8004162:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004164:	b999      	cbnz	r1, 800418e <xQueueGenericSendFromISR+0x32>
 8004166:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004168:	b188      	cbz	r0, 800418e <xQueueGenericSendFromISR+0x32>
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	e7fe      	b.n	800417a <xQueueGenericSendFromISR+0x1e>
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	e7fe      	b.n	800418c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800418e:	2b02      	cmp	r3, #2
 8004190:	d10b      	bne.n	80041aa <xQueueGenericSendFromISR+0x4e>
 8004192:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004194:	2801      	cmp	r0, #1
 8004196:	d008      	beq.n	80041aa <xQueueGenericSendFromISR+0x4e>
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	e7fe      	b.n	80041a8 <xQueueGenericSendFromISR+0x4c>
 80041aa:	461f      	mov	r7, r3
 80041ac:	4690      	mov	r8, r2
 80041ae:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041b0:	f001 f9aa 	bl	8005508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041b4:	f3ef 8611 	mrs	r6, BASEPRI
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d303      	bcc.n	80041d8 <xQueueGenericSendFromISR+0x7c>
 80041d0:	2f02      	cmp	r7, #2
 80041d2:	d001      	beq.n	80041d8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80041d4:	2000      	movs	r0, #0
 80041d6:	e00f      	b.n	80041f8 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 80041d8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80041dc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041de:	463a      	mov	r2, r7
 80041e0:	4649      	mov	r1, r9
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7ff fdb6 	bl	8003d54 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80041e8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041ec:	d008      	beq.n	8004200 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041ee:	1c6b      	adds	r3, r5, #1
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80041f6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041f8:	f386 8811 	msr	BASEPRI, r6
}
 80041fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004202:	b15b      	cbz	r3, 800421c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004204:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004208:	f000 fce4 	bl	8004bd4 <xTaskRemoveFromEventList>
 800420c:	b140      	cbz	r0, 8004220 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800420e:	f1b8 0f00 	cmp.w	r8, #0
 8004212:	d007      	beq.n	8004224 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004214:	2001      	movs	r0, #1
 8004216:	f8c8 0000 	str.w	r0, [r8]
 800421a:	e7ed      	b.n	80041f8 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 800421c:	2001      	movs	r0, #1
 800421e:	e7eb      	b.n	80041f8 <xQueueGenericSendFromISR+0x9c>
 8004220:	2001      	movs	r0, #1
 8004222:	e7e9      	b.n	80041f8 <xQueueGenericSendFromISR+0x9c>
 8004224:	2001      	movs	r0, #1
 8004226:	e7e7      	b.n	80041f8 <xQueueGenericSendFromISR+0x9c>

08004228 <xQueueReceive>:
{
 8004228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422a:	b085      	sub	sp, #20
 800422c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800422e:	b160      	cbz	r0, 800424a <xQueueReceive+0x22>
 8004230:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004232:	b999      	cbnz	r1, 800425c <xQueueReceive+0x34>
 8004234:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004236:	b18b      	cbz	r3, 800425c <xQueueReceive+0x34>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	e7fe      	b.n	8004248 <xQueueReceive+0x20>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	e7fe      	b.n	800425a <xQueueReceive+0x32>
 800425c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800425e:	f000 fd51 	bl	8004d04 <xTaskGetSchedulerState>
 8004262:	b950      	cbnz	r0, 800427a <xQueueReceive+0x52>
 8004264:	9b01      	ldr	r3, [sp, #4]
 8004266:	b153      	cbz	r3, 800427e <xQueueReceive+0x56>
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	e7fe      	b.n	8004278 <xQueueReceive+0x50>
 800427a:	2600      	movs	r6, #0
 800427c:	e03e      	b.n	80042fc <xQueueReceive+0xd4>
 800427e:	2600      	movs	r6, #0
 8004280:	e03c      	b.n	80042fc <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004282:	4639      	mov	r1, r7
 8004284:	4620      	mov	r0, r4
 8004286:	f7ff fda0 	bl	8003dca <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800428a:	3d01      	subs	r5, #1
 800428c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	b923      	cbnz	r3, 800429c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8004292:	f001 f831 	bl	80052f8 <vPortExitCritical>
				return pdPASS;
 8004296:	2001      	movs	r0, #1
}
 8004298:	b005      	add	sp, #20
 800429a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800429c:	f104 0010 	add.w	r0, r4, #16
 80042a0:	f000 fc98 	bl	8004bd4 <xTaskRemoveFromEventList>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d0f4      	beq.n	8004292 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 80042a8:	4b34      	ldr	r3, [pc, #208]	; (800437c <xQueueReceive+0x154>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	e7eb      	b.n	8004292 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 80042ba:	f001 f81d 	bl	80052f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80042be:	2000      	movs	r0, #0
 80042c0:	e7ea      	b.n	8004298 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042c2:	a802      	add	r0, sp, #8
 80042c4:	f000 fccc 	bl	8004c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c8:	2601      	movs	r6, #1
 80042ca:	e021      	b.n	8004310 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 80042cc:	2300      	movs	r3, #0
 80042ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80042d2:	e029      	b.n	8004328 <xQueueReceive+0x100>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042da:	e02b      	b.n	8004334 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff fd86 	bl	8003dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042e2:	f000 fb57 	bl	8004994 <xTaskResumeAll>
 80042e6:	e009      	b.n	80042fc <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff fd80 	bl	8003dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042ee:	f000 fb51 	bl	8004994 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff fd21 	bl	8003d3a <prvIsQueueEmpty>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d13d      	bne.n	8004378 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 80042fc:	f000 ffda 	bl	80052b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004300:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004302:	2d00      	cmp	r5, #0
 8004304:	d1bd      	bne.n	8004282 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004306:	9b01      	ldr	r3, [sp, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0d6      	beq.n	80042ba <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800430c:	2e00      	cmp	r6, #0
 800430e:	d0d8      	beq.n	80042c2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8004310:	f000 fff2 	bl	80052f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004314:	f000 faa4 	bl	8004860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004318:	f000 ffcc 	bl	80052b4 <vPortEnterCritical>
 800431c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004320:	b25b      	sxtb	r3, r3
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d0d1      	beq.n	80042cc <xQueueReceive+0xa4>
 8004328:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800432c:	b25b      	sxtb	r3, r3
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d0cf      	beq.n	80042d4 <xQueueReceive+0xac>
 8004334:	f000 ffe0 	bl	80052f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004338:	a901      	add	r1, sp, #4
 800433a:	a802      	add	r0, sp, #8
 800433c:	f000 fc9c 	bl	8004c78 <xTaskCheckForTimeOut>
 8004340:	2800      	cmp	r0, #0
 8004342:	d1d1      	bne.n	80042e8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff fcf8 	bl	8003d3a <prvIsQueueEmpty>
 800434a:	2800      	cmp	r0, #0
 800434c:	d0c6      	beq.n	80042dc <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800434e:	9901      	ldr	r1, [sp, #4]
 8004350:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004354:	f000 fc0a 	bl	8004b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff fd48 	bl	8003dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800435e:	f000 fb19 	bl	8004994 <xTaskResumeAll>
 8004362:	2800      	cmp	r0, #0
 8004364:	d1ca      	bne.n	80042fc <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <xQueueReceive+0x154>)
 8004368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	e7c1      	b.n	80042fc <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8004378:	2000      	movs	r0, #0
 800437a:	e78d      	b.n	8004298 <xQueueReceive+0x70>
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004380:	2300      	movs	r3, #0
 8004382:	2b07      	cmp	r3, #7
 8004384:	d80c      	bhi.n	80043a0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <vQueueAddToRegistry+0x24>)
 8004388:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800438c:	b10a      	cbz	r2, 8004392 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800438e:	3301      	adds	r3, #1
 8004390:	e7f7      	b.n	8004382 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004392:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <vQueueAddToRegistry+0x24>)
 8004394:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800439c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800439e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20001b50 	.word	0x20001b50

080043a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4604      	mov	r4, r0
 80043ac:	460d      	mov	r5, r1
 80043ae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043b0:	f000 ff80 	bl	80052b4 <vPortEnterCritical>
 80043b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d00d      	beq.n	80043dc <vQueueWaitForMessageRestricted+0x34>
 80043c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80043c4:	b25b      	sxtb	r3, r3
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d00b      	beq.n	80043e4 <vQueueWaitForMessageRestricted+0x3c>
 80043cc:	f000 ff94 	bl	80052f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043d2:	b15b      	cbz	r3, 80043ec <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff fd0a 	bl	8003dee <prvUnlockQueue>
	}
 80043da:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80043dc:	2300      	movs	r3, #0
 80043de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80043e2:	e7ed      	b.n	80043c0 <vQueueWaitForMessageRestricted+0x18>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ea:	e7ef      	b.n	80043cc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043ec:	4632      	mov	r2, r6
 80043ee:	4629      	mov	r1, r5
 80043f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043f4:	f000 fbd2 	bl	8004b9c <vTaskPlaceOnEventListRestricted>
 80043f8:	e7ec      	b.n	80043d4 <vQueueWaitForMessageRestricted+0x2c>
	...

080043fc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <prvResetNextTaskUnblockTime+0x24>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b13b      	cbz	r3, 8004414 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <prvResetNextTaskUnblockTime+0x24>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <prvResetNextTaskUnblockTime+0x28>)
 8004410:	601a      	str	r2, [r3, #0]
	}
}
 8004412:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <prvResetNextTaskUnblockTime+0x28>)
 8004416:	f04f 32ff 	mov.w	r2, #4294967295
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	2000073c 	.word	0x2000073c
 8004424:	20000be4 	.word	0x20000be4

08004428 <prvInitialiseNewTask>:
{
 8004428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	4681      	mov	r9, r0
 800442e:	460d      	mov	r5, r1
 8004430:	4617      	mov	r7, r2
 8004432:	469a      	mov	sl, r3
 8004434:	9e08      	ldr	r6, [sp, #32]
 8004436:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800443a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800443c:	0092      	lsls	r2, r2, #2
 800443e:	21a5      	movs	r1, #165	; 0xa5
 8004440:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004442:	f001 f9d8 	bl	80057f6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004446:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004448:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800444c:	3a01      	subs	r2, #1
 800444e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004452:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004456:	2300      	movs	r3, #0
 8004458:	2b0f      	cmp	r3, #15
 800445a:	d807      	bhi.n	800446c <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800445c:	5ce9      	ldrb	r1, [r5, r3]
 800445e:	18e2      	adds	r2, r4, r3
 8004460:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8004464:	5cea      	ldrb	r2, [r5, r3]
 8004466:	b10a      	cbz	r2, 800446c <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004468:	3301      	adds	r3, #1
 800446a:	e7f5      	b.n	8004458 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800446c:	2300      	movs	r3, #0
 800446e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004472:	2e37      	cmp	r6, #55	; 0x37
 8004474:	d900      	bls.n	8004478 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004476:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004478:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800447a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800447c:	2500      	movs	r5, #0
 800447e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004480:	1d20      	adds	r0, r4, #4
 8004482:	f7ff fc0e 	bl	8003ca2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004486:	f104 0018 	add.w	r0, r4, #24
 800448a:	f7ff fc0a 	bl	8003ca2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800448e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004490:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8004494:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004496:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004498:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800449a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800449e:	4652      	mov	r2, sl
 80044a0:	4649      	mov	r1, r9
 80044a2:	4638      	mov	r0, r7
 80044a4:	f000 fede 	bl	8005264 <pxPortInitialiseStack>
 80044a8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80044aa:	f1b8 0f00 	cmp.w	r8, #0
 80044ae:	d001      	beq.n	80044b4 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044b0:	f8c8 4000 	str.w	r4, [r8]
}
 80044b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080044b8 <prvInitialiseTaskLists>:
{
 80044b8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ba:	2400      	movs	r4, #0
 80044bc:	e007      	b.n	80044ce <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044be:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80044c2:	0093      	lsls	r3, r2, #2
 80044c4:	480e      	ldr	r0, [pc, #56]	; (8004500 <prvInitialiseTaskLists+0x48>)
 80044c6:	4418      	add	r0, r3
 80044c8:	f7ff fbe0 	bl	8003c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044cc:	3401      	adds	r4, #1
 80044ce:	2c37      	cmp	r4, #55	; 0x37
 80044d0:	d9f5      	bls.n	80044be <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80044d2:	4d0c      	ldr	r5, [pc, #48]	; (8004504 <prvInitialiseTaskLists+0x4c>)
 80044d4:	4628      	mov	r0, r5
 80044d6:	f7ff fbd9 	bl	8003c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044da:	4c0b      	ldr	r4, [pc, #44]	; (8004508 <prvInitialiseTaskLists+0x50>)
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff fbd5 	bl	8003c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044e2:	480a      	ldr	r0, [pc, #40]	; (800450c <prvInitialiseTaskLists+0x54>)
 80044e4:	f7ff fbd2 	bl	8003c8c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80044e8:	4809      	ldr	r0, [pc, #36]	; (8004510 <prvInitialiseTaskLists+0x58>)
 80044ea:	f7ff fbcf 	bl	8003c8c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80044ee:	4809      	ldr	r0, [pc, #36]	; (8004514 <prvInitialiseTaskLists+0x5c>)
 80044f0:	f7ff fbcc 	bl	8003c8c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <prvInitialiseTaskLists+0x60>)
 80044f6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044f8:	4b08      	ldr	r3, [pc, #32]	; (800451c <prvInitialiseTaskLists+0x64>)
 80044fa:	601c      	str	r4, [r3, #0]
}
 80044fc:	bd38      	pop	{r3, r4, r5, pc}
 80044fe:	bf00      	nop
 8004500:	20000744 	.word	0x20000744
 8004504:	20000bbc 	.word	0x20000bbc
 8004508:	20000bd0 	.word	0x20000bd0
 800450c:	20000bec 	.word	0x20000bec
 8004510:	20000c18 	.word	0x20000c18
 8004514:	20000c04 	.word	0x20000c04
 8004518:	2000073c 	.word	0x2000073c
 800451c:	20000740 	.word	0x20000740

08004520 <prvAddNewTaskToReadyList>:
{
 8004520:	b510      	push	{r4, lr}
 8004522:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004524:	f000 fec6 	bl	80052b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <prvAddNewTaskToReadyList+0x90>)
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004530:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <prvAddNewTaskToReadyList+0x94>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b15b      	cbz	r3, 800454e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004536:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <prvAddNewTaskToReadyList+0x98>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b96b      	cbnz	r3, 8004558 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <prvAddNewTaskToReadyList+0x94>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004544:	429a      	cmp	r2, r3
 8004546:	d807      	bhi.n	8004558 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <prvAddNewTaskToReadyList+0x94>)
 800454a:	601c      	str	r4, [r3, #0]
 800454c:	e004      	b.n	8004558 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <prvAddNewTaskToReadyList+0x94>)
 8004550:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d027      	beq.n	80045a8 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8004558:	4a18      	ldr	r2, [pc, #96]	; (80045bc <prvAddNewTaskToReadyList+0x9c>)
 800455a:	6813      	ldr	r3, [r2, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004560:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004564:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <prvAddNewTaskToReadyList+0xa0>)
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <prvAddNewTaskToReadyList+0x50>
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <prvAddNewTaskToReadyList+0xa0>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	1d21      	adds	r1, r4, #4
 8004578:	4812      	ldr	r0, [pc, #72]	; (80045c4 <prvAddNewTaskToReadyList+0xa4>)
 800457a:	4410      	add	r0, r2
 800457c:	f7ff fb94 	bl	8003ca8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004580:	f000 feba 	bl	80052f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <prvAddNewTaskToReadyList+0x98>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b16b      	cbz	r3, 80045a6 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <prvAddNewTaskToReadyList+0x94>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004592:	429a      	cmp	r2, r3
 8004594:	d207      	bcs.n	80045a6 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <prvAddNewTaskToReadyList+0xa8>)
 8004598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
}
 80045a6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80045a8:	f7ff ff86 	bl	80044b8 <prvInitialiseTaskLists>
 80045ac:	e7d4      	b.n	8004558 <prvAddNewTaskToReadyList+0x38>
 80045ae:	bf00      	nop
 80045b0:	20000ba4 	.word	0x20000ba4
 80045b4:	20000738 	.word	0x20000738
 80045b8:	20000c00 	.word	0x20000c00
 80045bc:	20000bb4 	.word	0x20000bb4
 80045c0:	20000bb8 	.word	0x20000bb8
 80045c4:	20000744 	.word	0x20000744
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <prvDeleteTCB>:
	{
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045d0:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80045d4:	b933      	cbnz	r3, 80045e4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 80045d6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80045d8:	f001 f8a6 	bl	8005728 <vPortFree>
				vPortFree( pxTCB );
 80045dc:	4620      	mov	r0, r4
 80045de:	f001 f8a3 	bl	8005728 <vPortFree>
	}
 80045e2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d00a      	beq.n	80045fe <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d0fa      	beq.n	80045e2 <prvDeleteTCB+0x16>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	e7fe      	b.n	80045fc <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80045fe:	f001 f893 	bl	8005728 <vPortFree>
 8004602:	e7ee      	b.n	80045e2 <prvDeleteTCB+0x16>

08004604 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <prvCheckTasksWaitingTermination+0x40>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	b1d3      	cbz	r3, 8004640 <prvCheckTasksWaitingTermination+0x3c>
{
 800460a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800460c:	f000 fe52 	bl	80052b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <prvCheckTasksWaitingTermination+0x44>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004616:	1d20      	adds	r0, r4, #4
 8004618:	f7ff fb6c 	bl	8003cf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800461c:	4a0b      	ldr	r2, [pc, #44]	; (800464c <prvCheckTasksWaitingTermination+0x48>)
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004624:	4a07      	ldr	r2, [pc, #28]	; (8004644 <prvCheckTasksWaitingTermination+0x40>)
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	3b01      	subs	r3, #1
 800462a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800462c:	f000 fe64 	bl	80052f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff ffcb 	bl	80045cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004636:	4b03      	ldr	r3, [pc, #12]	; (8004644 <prvCheckTasksWaitingTermination+0x40>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <prvCheckTasksWaitingTermination+0x8>
}
 800463e:	bd10      	pop	{r4, pc}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000ba8 	.word	0x20000ba8
 8004648:	20000c18 	.word	0x20000c18
 800464c:	20000ba4 	.word	0x20000ba4

08004650 <prvIdleTask>:
{
 8004650:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8004652:	f7ff ffd7 	bl	8004604 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <prvIdleTask+0x20>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d9f9      	bls.n	8004652 <prvIdleTask+0x2>
				taskYIELD();
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <prvIdleTask+0x24>)
 8004660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	e7f0      	b.n	8004652 <prvIdleTask+0x2>
 8004670:	20000744 	.word	0x20000744
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <prvAddCurrentTaskToDelayedList+0x64>)
 8004680:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	3004      	adds	r0, #4
 8004688:	f7ff fb34 	bl	8003cf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800468c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004690:	d013      	beq.n	80046ba <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004692:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800469a:	42a5      	cmp	r5, r4
 800469c:	d816      	bhi.n	80046cc <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <prvAddCurrentTaskToDelayedList+0x6c>)
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <prvAddCurrentTaskToDelayedList+0x68>)
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	3104      	adds	r1, #4
 80046a8:	f7ff fb0a 	bl	8003cc0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x70>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	d912      	bls.n	80046da <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <prvAddCurrentTaskToDelayedList+0x70>)
 80046b6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046b8:	e00f      	b.n	80046da <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	d0e9      	beq.n	8004692 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <prvAddCurrentTaskToDelayedList+0x68>)
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	3104      	adds	r1, #4
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <prvAddCurrentTaskToDelayedList+0x74>)
 80046c6:	f7ff faef 	bl	8003ca8 <vListInsertEnd>
 80046ca:	e006      	b.n	80046da <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046cc:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <prvAddCurrentTaskToDelayedList+0x78>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <prvAddCurrentTaskToDelayedList+0x68>)
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	3104      	adds	r1, #4
 80046d6:	f7ff faf3 	bl	8003cc0 <vListInsert>
}
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	20000c2c 	.word	0x20000c2c
 80046e0:	20000738 	.word	0x20000738
 80046e4:	2000073c 	.word	0x2000073c
 80046e8:	20000be4 	.word	0x20000be4
 80046ec:	20000c04 	.word	0x20000c04
 80046f0:	20000740 	.word	0x20000740

080046f4 <xTaskCreateStatic>:
	{
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80046fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80046fc:	b945      	cbnz	r5, 8004710 <xTaskCreateStatic+0x1c>
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	e7fe      	b.n	800470e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004710:	b944      	cbnz	r4, 8004724 <xTaskCreateStatic+0x30>
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	e7fe      	b.n	8004722 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004724:	265c      	movs	r6, #92	; 0x5c
 8004726:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004728:	9e04      	ldr	r6, [sp, #16]
 800472a:	2e5c      	cmp	r6, #92	; 0x5c
 800472c:	d008      	beq.n	8004740 <xTaskCreateStatic+0x4c>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	e7fe      	b.n	800473e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004740:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004742:	2502      	movs	r5, #2
 8004744:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004748:	2500      	movs	r5, #0
 800474a:	9503      	str	r5, [sp, #12]
 800474c:	9402      	str	r4, [sp, #8]
 800474e:	ad05      	add	r5, sp, #20
 8004750:	9501      	str	r5, [sp, #4]
 8004752:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004754:	9500      	str	r5, [sp, #0]
 8004756:	f7ff fe67 	bl	8004428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800475a:	4620      	mov	r0, r4
 800475c:	f7ff fee0 	bl	8004520 <prvAddNewTaskToReadyList>
	}
 8004760:	9805      	ldr	r0, [sp, #20]
 8004762:	b006      	add	sp, #24
 8004764:	bd70      	pop	{r4, r5, r6, pc}

08004766 <xTaskCreate>:
	{
 8004766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800476a:	b085      	sub	sp, #20
 800476c:	4607      	mov	r7, r0
 800476e:	4688      	mov	r8, r1
 8004770:	4615      	mov	r5, r2
 8004772:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004774:	0090      	lsls	r0, r2, #2
 8004776:	f000 ff53 	bl	8005620 <pvPortMalloc>
			if( pxStack != NULL )
 800477a:	b308      	cbz	r0, 80047c0 <xTaskCreate+0x5a>
 800477c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800477e:	205c      	movs	r0, #92	; 0x5c
 8004780:	f000 ff4e 	bl	8005620 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004784:	4604      	mov	r4, r0
 8004786:	b1b8      	cbz	r0, 80047b8 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8004788:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800478a:	b1e4      	cbz	r4, 80047c6 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800478c:	2300      	movs	r3, #0
 800478e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004792:	9303      	str	r3, [sp, #12]
 8004794:	9402      	str	r4, [sp, #8]
 8004796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	464b      	mov	r3, r9
 80047a0:	462a      	mov	r2, r5
 80047a2:	4641      	mov	r1, r8
 80047a4:	4638      	mov	r0, r7
 80047a6:	f7ff fe3f 	bl	8004428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047aa:	4620      	mov	r0, r4
 80047ac:	f7ff feb8 	bl	8004520 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047b0:	2001      	movs	r0, #1
	}
 80047b2:	b005      	add	sp, #20
 80047b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80047b8:	4630      	mov	r0, r6
 80047ba:	f000 ffb5 	bl	8005728 <vPortFree>
 80047be:	e7e4      	b.n	800478a <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	e7f5      	b.n	80047b2 <xTaskCreate+0x4c>
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80047ca:	e7f2      	b.n	80047b2 <xTaskCreate+0x4c>

080047cc <vTaskStartScheduler>:
{
 80047cc:	b510      	push	{r4, lr}
 80047ce:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047d0:	2400      	movs	r4, #0
 80047d2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047d4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047d6:	aa07      	add	r2, sp, #28
 80047d8:	a906      	add	r1, sp, #24
 80047da:	a805      	add	r0, sp, #20
 80047dc:	f7ff fa3e 	bl	8003c5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047e0:	9b05      	ldr	r3, [sp, #20]
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	9b06      	ldr	r3, [sp, #24]
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	9400      	str	r4, [sp, #0]
 80047ea:	4623      	mov	r3, r4
 80047ec:	9a07      	ldr	r2, [sp, #28]
 80047ee:	4917      	ldr	r1, [pc, #92]	; (800484c <vTaskStartScheduler+0x80>)
 80047f0:	4817      	ldr	r0, [pc, #92]	; (8004850 <vTaskStartScheduler+0x84>)
 80047f2:	f7ff ff7f 	bl	80046f4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80047f6:	b140      	cbz	r0, 800480a <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 80047f8:	f000 fb48 	bl	8004e8c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80047fc:	2801      	cmp	r0, #1
 80047fe:	d006      	beq.n	800480e <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004800:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004804:	d018      	beq.n	8004838 <vTaskStartScheduler+0x6c>
}
 8004806:	b008      	add	sp, #32
 8004808:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800480a:	2000      	movs	r0, #0
 800480c:	e7f6      	b.n	80047fc <vTaskStartScheduler+0x30>
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800481e:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <vTaskStartScheduler+0x88>)
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <vTaskStartScheduler+0x8c>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <vTaskStartScheduler+0x90>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004832:	f000 fde1 	bl	80053f8 <xPortStartScheduler>
 8004836:	e7e6      	b.n	8004806 <vTaskStartScheduler+0x3a>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	e7fe      	b.n	8004848 <vTaskStartScheduler+0x7c>
 800484a:	bf00      	nop
 800484c:	08006e08 	.word	0x08006e08
 8004850:	08004651 	.word	0x08004651
 8004854:	20000be4 	.word	0x20000be4
 8004858:	20000c00 	.word	0x20000c00
 800485c:	20000c2c 	.word	0x20000c2c

08004860 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004860:	4a02      	ldr	r2, [pc, #8]	; (800486c <vTaskSuspendAll+0xc>)
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000bb0 	.word	0x20000bb0

08004870 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004870:	4b01      	ldr	r3, [pc, #4]	; (8004878 <xTaskGetTickCount+0x8>)
 8004872:	6818      	ldr	r0, [r3, #0]
}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000c2c 	.word	0x20000c2c

0800487c <xTaskIncrementTick>:
{
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487e:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <xTaskIncrementTick+0xec>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d164      	bne.n	8004950 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004886:	4b39      	ldr	r3, [pc, #228]	; (800496c <xTaskIncrementTick+0xf0>)
 8004888:	681d      	ldr	r5, [r3, #0]
 800488a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800488c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800488e:	b9c5      	cbnz	r5, 80048c2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004890:	4b37      	ldr	r3, [pc, #220]	; (8004970 <xTaskIncrementTick+0xf4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b143      	cbz	r3, 80048aa <xTaskIncrementTick+0x2e>
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	e7fe      	b.n	80048a8 <xTaskIncrementTick+0x2c>
 80048aa:	4a31      	ldr	r2, [pc, #196]	; (8004970 <xTaskIncrementTick+0xf4>)
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	4b31      	ldr	r3, [pc, #196]	; (8004974 <xTaskIncrementTick+0xf8>)
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	6010      	str	r0, [r2, #0]
 80048b4:	6019      	str	r1, [r3, #0]
 80048b6:	4a30      	ldr	r2, [pc, #192]	; (8004978 <xTaskIncrementTick+0xfc>)
 80048b8:	6813      	ldr	r3, [r2, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	f7ff fd9d 	bl	80043fc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048c2:	4b2e      	ldr	r3, [pc, #184]	; (800497c <xTaskIncrementTick+0x100>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	42ab      	cmp	r3, r5
 80048c8:	d938      	bls.n	800493c <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80048ca:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <xTaskIncrementTick+0x104>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80048d6:	009a      	lsls	r2, r3, #2
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <xTaskIncrementTick+0x108>)
 80048da:	589b      	ldr	r3, [r3, r2]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d93c      	bls.n	800495a <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80048e0:	2401      	movs	r4, #1
 80048e2:	e03a      	b.n	800495a <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80048e4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e6:	4b22      	ldr	r3, [pc, #136]	; (8004970 <xTaskIncrementTick+0xf4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	b343      	cbz	r3, 8004940 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048ee:	4b20      	ldr	r3, [pc, #128]	; (8004970 <xTaskIncrementTick+0xf4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048f6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80048f8:	429d      	cmp	r5, r3
 80048fa:	d326      	bcc.n	800494a <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048fc:	1d37      	adds	r7, r6, #4
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff f9f8 	bl	8003cf4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004904:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004906:	b11b      	cbz	r3, 8004910 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004908:	f106 0018 	add.w	r0, r6, #24
 800490c:	f7ff f9f2 	bl	8003cf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004910:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <xTaskIncrementTick+0x10c>)
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <xTaskIncrementTick+0xa2>
 800491a:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <xTaskIncrementTick+0x10c>)
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004922:	009a      	lsls	r2, r3, #2
 8004924:	4639      	mov	r1, r7
 8004926:	4817      	ldr	r0, [pc, #92]	; (8004984 <xTaskIncrementTick+0x108>)
 8004928:	4410      	add	r0, r2
 800492a:	f7ff f9bd 	bl	8003ca8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800492e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <xTaskIncrementTick+0x104>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	429a      	cmp	r2, r3
 8004938:	d2d4      	bcs.n	80048e4 <xTaskIncrementTick+0x68>
 800493a:	e7d4      	b.n	80048e6 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800493c:	2400      	movs	r4, #0
 800493e:	e7d2      	b.n	80048e6 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <xTaskIncrementTick+0x100>)
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	601a      	str	r2, [r3, #0]
					break;
 8004948:	e7c0      	b.n	80048cc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800494a:	4a0c      	ldr	r2, [pc, #48]	; (800497c <xTaskIncrementTick+0x100>)
 800494c:	6013      	str	r3, [r2, #0]
						break;
 800494e:	e7bd      	b.n	80048cc <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <xTaskIncrementTick+0x110>)
 8004952:	6813      	ldr	r3, [r2, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004958:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <xTaskIncrementTick+0x114>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	b103      	cbz	r3, 8004962 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8004960:	2401      	movs	r4, #1
}
 8004962:	4620      	mov	r0, r4
 8004964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004966:	bf00      	nop
 8004968:	20000bb0 	.word	0x20000bb0
 800496c:	20000c2c 	.word	0x20000c2c
 8004970:	2000073c 	.word	0x2000073c
 8004974:	20000740 	.word	0x20000740
 8004978:	20000be8 	.word	0x20000be8
 800497c:	20000be4 	.word	0x20000be4
 8004980:	20000738 	.word	0x20000738
 8004984:	20000744 	.word	0x20000744
 8004988:	20000bb8 	.word	0x20000bb8
 800498c:	20000bac 	.word	0x20000bac
 8004990:	20000c30 	.word	0x20000c30

08004994 <xTaskResumeAll>:
{
 8004994:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8004996:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <xTaskResumeAll+0xd0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	b943      	cbnz	r3, 80049ae <xTaskResumeAll+0x1a>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	e7fe      	b.n	80049ac <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80049ae:	f000 fc81 	bl	80052b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80049b2:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <xTaskResumeAll+0xd0>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	3a01      	subs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d14d      	bne.n	8004a5c <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049c0:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <xTaskResumeAll+0xd4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	b923      	cbnz	r3, 80049d0 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80049c6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80049c8:	f000 fc96 	bl	80052f8 <vPortExitCritical>
}
 80049cc:	4620      	mov	r0, r4
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 80049d0:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <xTaskResumeAll+0xd8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	b31b      	cbz	r3, 8004a20 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <xTaskResumeAll+0xd8>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049de:	f104 0018 	add.w	r0, r4, #24
 80049e2:	f7ff f987 	bl	8003cf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e6:	1d25      	adds	r5, r4, #4
 80049e8:	4628      	mov	r0, r5
 80049ea:	f7ff f983 	bl	8003cf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049f0:	4a1f      	ldr	r2, [pc, #124]	; (8004a70 <xTaskResumeAll+0xdc>)
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <xTaskResumeAll+0x68>
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <xTaskResumeAll+0xdc>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004a00:	009a      	lsls	r2, r3, #2
 8004a02:	4629      	mov	r1, r5
 8004a04:	481b      	ldr	r0, [pc, #108]	; (8004a74 <xTaskResumeAll+0xe0>)
 8004a06:	4410      	add	r0, r2
 8004a08:	f7ff f94e 	bl	8003ca8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a0e:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <xTaskResumeAll+0xe4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d3dc      	bcc.n	80049d2 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <xTaskResumeAll+0xe8>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e7d8      	b.n	80049d2 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8004a20:	b10c      	cbz	r4, 8004a26 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8004a22:	f7ff fceb 	bl	80043fc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a26:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <xTaskResumeAll+0xec>)
 8004a28:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a2a:	b154      	cbz	r4, 8004a42 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8004a2c:	f7ff ff26 	bl	800487c <xTaskIncrementTick>
 8004a30:	b110      	cbz	r0, 8004a38 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <xTaskResumeAll+0xe8>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a38:	3c01      	subs	r4, #1
 8004a3a:	d1f7      	bne.n	8004a2c <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <xTaskResumeAll+0xec>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <xTaskResumeAll+0xe8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b15b      	cbz	r3, 8004a60 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <xTaskResumeAll+0xf0>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004a58:	2401      	movs	r4, #1
 8004a5a:	e7b5      	b.n	80049c8 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8004a5c:	2400      	movs	r4, #0
 8004a5e:	e7b3      	b.n	80049c8 <xTaskResumeAll+0x34>
 8004a60:	2400      	movs	r4, #0
 8004a62:	e7b1      	b.n	80049c8 <xTaskResumeAll+0x34>
 8004a64:	20000bb0 	.word	0x20000bb0
 8004a68:	20000ba4 	.word	0x20000ba4
 8004a6c:	20000bec 	.word	0x20000bec
 8004a70:	20000bb8 	.word	0x20000bb8
 8004a74:	20000744 	.word	0x20000744
 8004a78:	20000738 	.word	0x20000738
 8004a7c:	20000c30 	.word	0x20000c30
 8004a80:	20000bac 	.word	0x20000bac
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <vTaskDelay>:
	{
 8004a88:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a8a:	b1a8      	cbz	r0, 8004ab8 <vTaskDelay+0x30>
 8004a8c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <vTaskDelay+0x44>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	b143      	cbz	r3, 8004aa6 <vTaskDelay+0x1e>
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	e7fe      	b.n	8004aa4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004aa6:	f7ff fedb 	bl	8004860 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff fde3 	bl	8004678 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004ab2:	f7ff ff6f 	bl	8004994 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004ab6:	b938      	cbnz	r0, 8004ac8 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <vTaskDelay+0x48>)
 8004aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	f3bf 8f6f 	isb	sy
	}
 8004ac8:	bd10      	pop	{r4, pc}
 8004aca:	bf00      	nop
 8004acc:	20000bb0 	.word	0x20000bb0
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ad4:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <vTaskSwitchContext+0x84>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b11b      	cbz	r3, 8004ae2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <vTaskSwitchContext+0x88>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <vTaskSwitchContext+0x88>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <vTaskSwitchContext+0x8c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004af0:	008a      	lsls	r2, r1, #2
 8004af2:	491c      	ldr	r1, [pc, #112]	; (8004b64 <vTaskSwitchContext+0x90>)
 8004af4:	588a      	ldr	r2, [r1, r2]
 8004af6:	b95a      	cbnz	r2, 8004b10 <vTaskSwitchContext+0x3c>
 8004af8:	b10b      	cbz	r3, 8004afe <vTaskSwitchContext+0x2a>
 8004afa:	3b01      	subs	r3, #1
 8004afc:	e7f6      	b.n	8004aec <vTaskSwitchContext+0x18>
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	e7fe      	b.n	8004b0e <vTaskSwitchContext+0x3a>
{
 8004b10:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b12:	4608      	mov	r0, r1
 8004b14:	009a      	lsls	r2, r3, #2
 8004b16:	18d4      	adds	r4, r2, r3
 8004b18:	00a1      	lsls	r1, r4, #2
 8004b1a:	4401      	add	r1, r0
 8004b1c:	684c      	ldr	r4, [r1, #4]
 8004b1e:	6864      	ldr	r4, [r4, #4]
 8004b20:	604c      	str	r4, [r1, #4]
 8004b22:	441a      	add	r2, r3
 8004b24:	0091      	lsls	r1, r2, #2
 8004b26:	3108      	adds	r1, #8
 8004b28:	4408      	add	r0, r1
 8004b2a:	4284      	cmp	r4, r0
 8004b2c:	d00d      	beq.n	8004b4a <vTaskSwitchContext+0x76>
 8004b2e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004b32:	0091      	lsls	r1, r2, #2
 8004b34:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <vTaskSwitchContext+0x90>)
 8004b36:	440a      	add	r2, r1
 8004b38:	6852      	ldr	r2, [r2, #4]
 8004b3a:	68d1      	ldr	r1, [r2, #12]
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <vTaskSwitchContext+0x94>)
 8004b3e:	6011      	str	r1, [r2, #0]
 8004b40:	4a07      	ldr	r2, [pc, #28]	; (8004b60 <vTaskSwitchContext+0x8c>)
 8004b42:	6013      	str	r3, [r2, #0]
}
 8004b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b48:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b4a:	6861      	ldr	r1, [r4, #4]
 8004b4c:	4805      	ldr	r0, [pc, #20]	; (8004b64 <vTaskSwitchContext+0x90>)
 8004b4e:	2214      	movs	r2, #20
 8004b50:	fb02 0203 	mla	r2, r2, r3, r0
 8004b54:	6051      	str	r1, [r2, #4]
 8004b56:	e7ea      	b.n	8004b2e <vTaskSwitchContext+0x5a>
 8004b58:	20000bb0 	.word	0x20000bb0
 8004b5c:	20000c30 	.word	0x20000c30
 8004b60:	20000bb8 	.word	0x20000bb8
 8004b64:	20000744 	.word	0x20000744
 8004b68:	20000738 	.word	0x20000738

08004b6c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004b6c:	b940      	cbnz	r0, 8004b80 <vTaskPlaceOnEventList+0x14>
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	e7fe      	b.n	8004b7e <vTaskPlaceOnEventList+0x12>
{
 8004b80:	b510      	push	{r4, lr}
 8004b82:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <vTaskPlaceOnEventList+0x2c>)
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	3118      	adds	r1, #24
 8004b8a:	f7ff f899 	bl	8003cc0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7ff fd71 	bl	8004678 <prvAddCurrentTaskToDelayedList>
}
 8004b96:	bd10      	pop	{r4, pc}
 8004b98:	20000738 	.word	0x20000738

08004b9c <vTaskPlaceOnEventListRestricted>:
	{
 8004b9c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004b9e:	b940      	cbnz	r0, 8004bb2 <vTaskPlaceOnEventListRestricted+0x16>
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	e7fe      	b.n	8004bb0 <vTaskPlaceOnEventListRestricted+0x14>
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bb6:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <vTaskPlaceOnEventListRestricted+0x34>)
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	3118      	adds	r1, #24
 8004bbc:	f7ff f874 	bl	8003ca8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8004bc0:	b10d      	cbz	r5, 8004bc6 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8004bc2:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7ff fd55 	bl	8004678 <prvAddCurrentTaskToDelayedList>
	}
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000738 	.word	0x20000738

08004bd4 <xTaskRemoveFromEventList>:
{
 8004bd4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bd6:	68c3      	ldr	r3, [r0, #12]
 8004bd8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004bda:	b944      	cbnz	r4, 8004bee <xTaskRemoveFromEventList+0x1a>
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	e7fe      	b.n	8004bec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bee:	f104 0518 	add.w	r5, r4, #24
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f7ff f87e 	bl	8003cf4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf8:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <xTaskRemoveFromEventList+0x74>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	b9e3      	cbnz	r3, 8004c38 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bfe:	1d25      	adds	r5, r4, #4
 8004c00:	4628      	mov	r0, r5
 8004c02:	f7ff f877 	bl	8003cf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c08:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <xTaskRemoveFromEventList+0x78>)
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <xTaskRemoveFromEventList+0x40>
 8004c10:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <xTaskRemoveFromEventList+0x78>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <xTaskRemoveFromEventList+0x7c>)
 8004c1e:	4410      	add	r0, r2
 8004c20:	f7ff f842 	bl	8003ca8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <xTaskRemoveFromEventList+0x80>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d908      	bls.n	8004c42 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8004c30:	2001      	movs	r0, #1
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <xTaskRemoveFromEventList+0x84>)
 8004c34:	6018      	str	r0, [r3, #0]
}
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4808      	ldr	r0, [pc, #32]	; (8004c5c <xTaskRemoveFromEventList+0x88>)
 8004c3c:	f7ff f834 	bl	8003ca8 <vListInsertEnd>
 8004c40:	e7f0      	b.n	8004c24 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8004c42:	2000      	movs	r0, #0
	return xReturn;
 8004c44:	e7f7      	b.n	8004c36 <xTaskRemoveFromEventList+0x62>
 8004c46:	bf00      	nop
 8004c48:	20000bb0 	.word	0x20000bb0
 8004c4c:	20000bb8 	.word	0x20000bb8
 8004c50:	20000744 	.word	0x20000744
 8004c54:	20000738 	.word	0x20000738
 8004c58:	20000c30 	.word	0x20000c30
 8004c5c:	20000bec 	.word	0x20000bec

08004c60 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <vTaskInternalSetTimeOutState+0x10>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c66:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <vTaskInternalSetTimeOutState+0x14>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6043      	str	r3, [r0, #4]
}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000be8 	.word	0x20000be8
 8004c74:	20000c2c 	.word	0x20000c2c

08004c78 <xTaskCheckForTimeOut>:
{
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8004c7a:	b150      	cbz	r0, 8004c92 <xTaskCheckForTimeOut+0x1a>
 8004c7c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004c7e:	b989      	cbnz	r1, 8004ca4 <xTaskCheckForTimeOut+0x2c>
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	e7fe      	b.n	8004c90 <xTaskCheckForTimeOut+0x18>
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	e7fe      	b.n	8004ca2 <xTaskCheckForTimeOut+0x2a>
 8004ca4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8004ca6:	f000 fb05 	bl	80052b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <xTaskCheckForTimeOut+0x78>)
 8004cac:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cae:	6868      	ldr	r0, [r5, #4]
 8004cb0:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d016      	beq.n	8004ce8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cba:	682f      	ldr	r7, [r5, #0]
 8004cbc:	4e0d      	ldr	r6, [pc, #52]	; (8004cf4 <xTaskCheckForTimeOut+0x7c>)
 8004cbe:	6836      	ldr	r6, [r6, #0]
 8004cc0:	42b7      	cmp	r7, r6
 8004cc2:	d001      	beq.n	8004cc8 <xTaskCheckForTimeOut+0x50>
 8004cc4:	4288      	cmp	r0, r1
 8004cc6:	d911      	bls.n	8004cec <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d803      	bhi.n	8004cd4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004cd0:	2401      	movs	r4, #1
 8004cd2:	e005      	b.n	8004ce0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f7ff ffc1 	bl	8004c60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cde:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004ce0:	f000 fb0a 	bl	80052f8 <vPortExitCritical>
}
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8004ce8:	2400      	movs	r4, #0
 8004cea:	e7f9      	b.n	8004ce0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8004cec:	2401      	movs	r4, #1
 8004cee:	e7f7      	b.n	8004ce0 <xTaskCheckForTimeOut+0x68>
 8004cf0:	20000c2c 	.word	0x20000c2c
 8004cf4:	20000be8 	.word	0x20000be8

08004cf8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004cf8:	4b01      	ldr	r3, [pc, #4]	; (8004d00 <vTaskMissedYield+0x8>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
}
 8004cfe:	4770      	bx	lr
 8004d00:	20000c30 	.word	0x20000c30

08004d04 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <xTaskGetSchedulerState+0x18>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	b133      	cbz	r3, 8004d18 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <xTaskGetSchedulerState+0x1c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b10b      	cbz	r3, 8004d14 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d10:	2000      	movs	r0, #0
	}
 8004d12:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8004d14:	2002      	movs	r0, #2
 8004d16:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d18:	2001      	movs	r0, #1
 8004d1a:	4770      	bx	lr
 8004d1c:	20000c00 	.word	0x20000c00
 8004d20:	20000bb0 	.word	0x20000bb0

08004d24 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d038      	beq.n	8004d9a <xTaskPriorityDisinherit+0x76>
	{
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8004d2c:	4a1e      	ldr	r2, [pc, #120]	; (8004da8 <xTaskPriorityDisinherit+0x84>)
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	4282      	cmp	r2, r0
 8004d32:	d008      	beq.n	8004d46 <xTaskPriorityDisinherit+0x22>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	e7fe      	b.n	8004d44 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d46:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004d48:	b942      	cbnz	r2, 8004d5c <xTaskPriorityDisinherit+0x38>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	e7fe      	b.n	8004d5a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004d62:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004d64:	4288      	cmp	r0, r1
 8004d66:	d01a      	beq.n	8004d9e <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d68:	b9da      	cbnz	r2, 8004da2 <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d6a:	1d25      	adds	r5, r4, #4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f7fe ffc1 	bl	8003cf4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d74:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d7a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d7c:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <xTaskPriorityDisinherit+0x88>)
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <xTaskPriorityDisinherit+0x64>
 8004d84:	4a09      	ldr	r2, [pc, #36]	; (8004dac <xTaskPriorityDisinherit+0x88>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <xTaskPriorityDisinherit+0x8c>)
 8004d8c:	2014      	movs	r0, #20
 8004d8e:	fb00 2003 	mla	r0, r0, r3, r2
 8004d92:	f7fe ff89 	bl	8003ca8 <vListInsertEnd>
					xReturn = pdTRUE;
 8004d96:	2001      	movs	r0, #1
	}
 8004d98:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8004d9a:	2000      	movs	r0, #0
	}
 8004d9c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e7fa      	b.n	8004d98 <xTaskPriorityDisinherit+0x74>
 8004da2:	2000      	movs	r0, #0
		return xReturn;
 8004da4:	e7f8      	b.n	8004d98 <xTaskPriorityDisinherit+0x74>
 8004da6:	bf00      	nop
 8004da8:	20000738 	.word	0x20000738
 8004dac:	20000bb8 	.word	0x20000bb8
 8004db0:	20000744 	.word	0x20000744

08004db4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <prvGetNextExpireTime+0x1c>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	6813      	ldr	r3, [r2, #0]
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dc2:	b913      	cbnz	r3, 8004dca <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dc4:	68d3      	ldr	r3, [r2, #12]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dca:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000c34 	.word	0x20000c34

08004dd4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dd4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dd6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dd8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dda:	4291      	cmp	r1, r2
 8004ddc:	d80c      	bhi.n	8004df8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	6983      	ldr	r3, [r0, #24]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d301      	bcc.n	8004dea <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004de6:	2001      	movs	r0, #1
 8004de8:	e010      	b.n	8004e0c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004dea:	1d01      	adds	r1, r0, #4
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <prvInsertTimerInActiveList+0x40>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	f7fe ff66 	bl	8003cc0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004df4:	2000      	movs	r0, #0
 8004df6:	e009      	b.n	8004e0c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d201      	bcs.n	8004e00 <prvInsertTimerInActiveList+0x2c>
 8004dfc:	4299      	cmp	r1, r3
 8004dfe:	d206      	bcs.n	8004e0e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e00:	1d01      	adds	r1, r0, #4
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <prvInsertTimerInActiveList+0x44>)
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	f7fe ff5b 	bl	8003cc0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004e0a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8004e0c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8004e0e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8004e10:	e7fc      	b.n	8004e0c <prvInsertTimerInActiveList+0x38>
 8004e12:	bf00      	nop
 8004e14:	20000c38 	.word	0x20000c38
 8004e18:	20000c34 	.word	0x20000c34

08004e1c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e1c:	b530      	push	{r4, r5, lr}
 8004e1e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e20:	f000 fa48 	bl	80052b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <prvCheckForValidListAndQueue+0x50>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	b11b      	cbz	r3, 8004e32 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e2a:	f000 fa65 	bl	80052f8 <vPortExitCritical>
}
 8004e2e:	b003      	add	sp, #12
 8004e30:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8004e32:	4d0f      	ldr	r5, [pc, #60]	; (8004e70 <prvCheckForValidListAndQueue+0x54>)
 8004e34:	4628      	mov	r0, r5
 8004e36:	f7fe ff29 	bl	8003c8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e3a:	4c0e      	ldr	r4, [pc, #56]	; (8004e74 <prvCheckForValidListAndQueue+0x58>)
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f7fe ff25 	bl	8003c8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <prvCheckForValidListAndQueue+0x5c>)
 8004e44:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <prvCheckForValidListAndQueue+0x60>)
 8004e48:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <prvCheckForValidListAndQueue+0x64>)
 8004e50:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <prvCheckForValidListAndQueue+0x68>)
 8004e52:	2110      	movs	r1, #16
 8004e54:	200a      	movs	r0, #10
 8004e56:	f7ff f854 	bl	8003f02 <xQueueGenericCreateStatic>
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <prvCheckForValidListAndQueue+0x50>)
 8004e5c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d0e3      	beq.n	8004e2a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e62:	4909      	ldr	r1, [pc, #36]	; (8004e88 <prvCheckForValidListAndQueue+0x6c>)
 8004e64:	f7ff fa8c 	bl	8004380 <vQueueAddToRegistry>
 8004e68:	e7df      	b.n	8004e2a <prvCheckForValidListAndQueue+0xe>
 8004e6a:	bf00      	nop
 8004e6c:	20000d58 	.word	0x20000d58
 8004e70:	20000cdc 	.word	0x20000cdc
 8004e74:	20000cf0 	.word	0x20000cf0
 8004e78:	20000c34 	.word	0x20000c34
 8004e7c:	20000c38 	.word	0x20000c38
 8004e80:	20000d08 	.word	0x20000d08
 8004e84:	20000c3c 	.word	0x20000c3c
 8004e88:	08006e10 	.word	0x08006e10

08004e8c <xTimerCreateTimerTask>:
{
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004e90:	f7ff ffc4 	bl	8004e1c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <xTimerCreateTimerTask+0x54>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	b1cb      	cbz	r3, 8004ece <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e9a:	2400      	movs	r4, #0
 8004e9c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e9e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ea0:	aa07      	add	r2, sp, #28
 8004ea2:	a906      	add	r1, sp, #24
 8004ea4:	a805      	add	r0, sp, #20
 8004ea6:	f7fe fee5 	bl	8003c74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eaa:	9b05      	ldr	r3, [sp, #20]
 8004eac:	9302      	str	r3, [sp, #8]
 8004eae:	9b06      	ldr	r3, [sp, #24]
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	4623      	mov	r3, r4
 8004eb8:	9a07      	ldr	r2, [sp, #28]
 8004eba:	490a      	ldr	r1, [pc, #40]	; (8004ee4 <xTimerCreateTimerTask+0x58>)
 8004ebc:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <xTimerCreateTimerTask+0x5c>)
 8004ebe:	f7ff fc19 	bl	80046f4 <xTaskCreateStatic>
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <xTimerCreateTimerTask+0x60>)
 8004ec4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004ec6:	b110      	cbz	r0, 8004ece <xTimerCreateTimerTask+0x42>
}
 8004ec8:	2001      	movs	r0, #1
 8004eca:	b008      	add	sp, #32
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	e7fe      	b.n	8004ede <xTimerCreateTimerTask+0x52>
 8004ee0:	20000d58 	.word	0x20000d58
 8004ee4:	08006e18 	.word	0x08006e18
 8004ee8:	080051d1 	.word	0x080051d1
 8004eec:	20000d5c 	.word	0x20000d5c

08004ef0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8004ef0:	b1c8      	cbz	r0, 8004f26 <xTimerGenericCommand+0x36>
{
 8004ef2:	b530      	push	{r4, r5, lr}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	4615      	mov	r5, r2
 8004ef8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <xTimerGenericCommand+0x68>)
 8004efc:	6810      	ldr	r0, [r2, #0]
 8004efe:	b340      	cbz	r0, 8004f52 <xTimerGenericCommand+0x62>
 8004f00:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8004f02:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f04:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004f06:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f08:	2905      	cmp	r1, #5
 8004f0a:	dc1d      	bgt.n	8004f48 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f0c:	f7ff fefa 	bl	8004d04 <xTaskGetSchedulerState>
 8004f10:	2802      	cmp	r0, #2
 8004f12:	d011      	beq.n	8004f38 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f14:	2300      	movs	r3, #0
 8004f16:	461a      	mov	r2, r3
 8004f18:	4669      	mov	r1, sp
 8004f1a:	480f      	ldr	r0, [pc, #60]	; (8004f58 <xTimerGenericCommand+0x68>)
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f7ff f85f 	bl	8003fe0 <xQueueGenericSend>
}
 8004f22:	b005      	add	sp, #20
 8004f24:	bd30      	pop	{r4, r5, pc}
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	e7fe      	b.n	8004f36 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9a08      	ldr	r2, [sp, #32]
 8004f3c:	4669      	mov	r1, sp
 8004f3e:	4806      	ldr	r0, [pc, #24]	; (8004f58 <xTimerGenericCommand+0x68>)
 8004f40:	6800      	ldr	r0, [r0, #0]
 8004f42:	f7ff f84d 	bl	8003fe0 <xQueueGenericSend>
 8004f46:	e7ec      	b.n	8004f22 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4669      	mov	r1, sp
 8004f4c:	f7ff f906 	bl	800415c <xQueueGenericSendFromISR>
 8004f50:	e7e7      	b.n	8004f22 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 8004f52:	2000      	movs	r0, #0
	return xReturn;
 8004f54:	e7e5      	b.n	8004f22 <xTimerGenericCommand+0x32>
 8004f56:	bf00      	nop
 8004f58:	20000d58 	.word	0x20000d58

08004f5c <prvSwitchTimerLists>:
{
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <prvSwitchTimerLists+0x70>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	b352      	cbz	r2, 8004fbe <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f6c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f6e:	1d25      	adds	r5, r4, #4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f7fe febf 	bl	8003cf4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f78:	4620      	mov	r0, r4
 8004f7a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f7c:	69e3      	ldr	r3, [r4, #28]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d1ee      	bne.n	8004f60 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8004f86:	429e      	cmp	r6, r3
 8004f88:	d207      	bcs.n	8004f9a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f8a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f8c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <prvSwitchTimerLists+0x70>)
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	f7fe fe94 	bl	8003cc0 <vListInsert>
 8004f98:	e7e2      	b.n	8004f60 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	9100      	str	r1, [sp, #0]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4632      	mov	r2, r6
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f7ff ffa4 	bl	8004ef0 <xTimerGenericCommand>
				configASSERT( xResult );
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d1d9      	bne.n	8004f60 <prvSwitchTimerLists+0x4>
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	e7fe      	b.n	8004fbc <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8004fbe:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <prvSwitchTimerLists+0x74>)
 8004fc0:	6810      	ldr	r0, [r2, #0]
 8004fc2:	4902      	ldr	r1, [pc, #8]	; (8004fcc <prvSwitchTimerLists+0x70>)
 8004fc4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8004fc6:	6013      	str	r3, [r2, #0]
}
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	20000c34 	.word	0x20000c34
 8004fd0:	20000c38 	.word	0x20000c38

08004fd4 <prvSampleTimeNow>:
{
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8004fd8:	f7ff fc4a 	bl	8004870 <xTaskGetTickCount>
 8004fdc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <prvSampleTimeNow+0x28>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4283      	cmp	r3, r0
 8004fe4:	d805      	bhi.n	8004ff2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <prvSampleTimeNow+0x28>)
 8004fec:	601c      	str	r4, [r3, #0]
}
 8004fee:	4620      	mov	r0, r4
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8004ff2:	f7ff ffb3 	bl	8004f5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	e7f6      	b.n	8004fea <prvSampleTimeNow+0x16>
 8004ffc:	20000d04 	.word	0x20000d04

08005000 <prvProcessExpiredTimer>:
{
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	4605      	mov	r5, r0
 8005006:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005008:	4b14      	ldr	r3, [pc, #80]	; (800505c <prvProcessExpiredTimer+0x5c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005010:	1d20      	adds	r0, r4, #4
 8005012:	f7fe fe6f 	bl	8003cf4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005016:	69e3      	ldr	r3, [r4, #28]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d004      	beq.n	8005026 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800501c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800501e:	4620      	mov	r0, r4
 8005020:	4798      	blx	r3
}
 8005022:	b002      	add	sp, #8
 8005024:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005026:	69a1      	ldr	r1, [r4, #24]
 8005028:	462b      	mov	r3, r5
 800502a:	4632      	mov	r2, r6
 800502c:	4429      	add	r1, r5
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff fed0 	bl	8004dd4 <prvInsertTimerInActiveList>
 8005034:	2800      	cmp	r0, #0
 8005036:	d0f1      	beq.n	800501c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005038:	2100      	movs	r1, #0
 800503a:	9100      	str	r1, [sp, #0]
 800503c:	460b      	mov	r3, r1
 800503e:	462a      	mov	r2, r5
 8005040:	4620      	mov	r0, r4
 8005042:	f7ff ff55 	bl	8004ef0 <xTimerGenericCommand>
			configASSERT( xResult );
 8005046:	2800      	cmp	r0, #0
 8005048:	d1e8      	bne.n	800501c <prvProcessExpiredTimer+0x1c>
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	e7fe      	b.n	800505a <prvProcessExpiredTimer+0x5a>
 800505c:	20000c34 	.word	0x20000c34

08005060 <prvProcessTimerOrBlockTask>:
{
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	4606      	mov	r6, r0
 8005066:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8005068:	f7ff fbfa 	bl	8004860 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800506c:	a801      	add	r0, sp, #4
 800506e:	f7ff ffb1 	bl	8004fd4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005072:	9b01      	ldr	r3, [sp, #4]
 8005074:	bb1b      	cbnz	r3, 80050be <prvProcessTimerOrBlockTask+0x5e>
 8005076:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005078:	b90c      	cbnz	r4, 800507e <prvProcessTimerOrBlockTask+0x1e>
 800507a:	42b0      	cmp	r0, r6
 800507c:	d218      	bcs.n	80050b0 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 800507e:	b12c      	cbz	r4, 800508c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <prvProcessTimerOrBlockTask+0x68>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681c      	ldr	r4, [r3, #0]
 8005086:	fab4 f484 	clz	r4, r4
 800508a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800508c:	4622      	mov	r2, r4
 800508e:	1b71      	subs	r1, r6, r5
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <prvProcessTimerOrBlockTask+0x6c>)
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	f7ff f988 	bl	80043a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005098:	f7ff fc7c 	bl	8004994 <xTaskResumeAll>
 800509c:	b988      	cbnz	r0, 80050c2 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <prvProcessTimerOrBlockTask+0x70>)
 80050a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	e008      	b.n	80050c2 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 80050b0:	f7ff fc70 	bl	8004994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050b4:	4629      	mov	r1, r5
 80050b6:	4630      	mov	r0, r6
 80050b8:	f7ff ffa2 	bl	8005000 <prvProcessExpiredTimer>
 80050bc:	e001      	b.n	80050c2 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 80050be:	f7ff fc69 	bl	8004994 <xTaskResumeAll>
}
 80050c2:	b002      	add	sp, #8
 80050c4:	bd70      	pop	{r4, r5, r6, pc}
 80050c6:	bf00      	nop
 80050c8:	20000c38 	.word	0x20000c38
 80050cc:	20000d58 	.word	0x20000d58
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <prvProcessReceivedCommands>:
{
 80050d4:	b530      	push	{r4, r5, lr}
 80050d6:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050d8:	e002      	b.n	80050e0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050da:	9b04      	ldr	r3, [sp, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da0f      	bge.n	8005100 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050e0:	2200      	movs	r2, #0
 80050e2:	a904      	add	r1, sp, #16
 80050e4:	4b39      	ldr	r3, [pc, #228]	; (80051cc <prvProcessReceivedCommands+0xf8>)
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	f7ff f89e 	bl	8004228 <xQueueReceive>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d06a      	beq.n	80051c6 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050f0:	9b04      	ldr	r3, [sp, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	daf1      	bge.n	80050da <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050f6:	9907      	ldr	r1, [sp, #28]
 80050f8:	9806      	ldr	r0, [sp, #24]
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	4798      	blx	r3
 80050fe:	e7ec      	b.n	80050da <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005100:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005102:	6963      	ldr	r3, [r4, #20]
 8005104:	b113      	cbz	r3, 800510c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005106:	1d20      	adds	r0, r4, #4
 8005108:	f7fe fdf4 	bl	8003cf4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800510c:	a803      	add	r0, sp, #12
 800510e:	f7ff ff61 	bl	8004fd4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8005112:	9b04      	ldr	r3, [sp, #16]
 8005114:	2b09      	cmp	r3, #9
 8005116:	d8e3      	bhi.n	80050e0 <prvProcessReceivedCommands+0xc>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <prvProcessReceivedCommands+0x4c>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005149 	.word	0x08005149
 8005124:	08005149 	.word	0x08005149
 8005128:	08005149 	.word	0x08005149
 800512c:	080050e1 	.word	0x080050e1
 8005130:	08005191 	.word	0x08005191
 8005134:	080051b7 	.word	0x080051b7
 8005138:	08005149 	.word	0x08005149
 800513c:	08005149 	.word	0x08005149
 8005140:	080050e1 	.word	0x080050e1
 8005144:	08005191 	.word	0x08005191
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005148:	9905      	ldr	r1, [sp, #20]
 800514a:	69a5      	ldr	r5, [r4, #24]
 800514c:	460b      	mov	r3, r1
 800514e:	4602      	mov	r2, r0
 8005150:	4429      	add	r1, r5
 8005152:	4620      	mov	r0, r4
 8005154:	f7ff fe3e 	bl	8004dd4 <prvInsertTimerInActiveList>
 8005158:	2800      	cmp	r0, #0
 800515a:	d0c1      	beq.n	80050e0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800515c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800515e:	4620      	mov	r0, r4
 8005160:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005162:	69e3      	ldr	r3, [r4, #28]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d1bb      	bne.n	80050e0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005168:	69a2      	ldr	r2, [r4, #24]
 800516a:	2100      	movs	r1, #0
 800516c:	9100      	str	r1, [sp, #0]
 800516e:	460b      	mov	r3, r1
 8005170:	9805      	ldr	r0, [sp, #20]
 8005172:	4402      	add	r2, r0
 8005174:	4620      	mov	r0, r4
 8005176:	f7ff febb 	bl	8004ef0 <xTimerGenericCommand>
							configASSERT( xResult );
 800517a:	2800      	cmp	r0, #0
 800517c:	d1b0      	bne.n	80050e0 <prvProcessReceivedCommands+0xc>
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	e7fe      	b.n	800518e <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005190:	9905      	ldr	r1, [sp, #20]
 8005192:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005194:	b131      	cbz	r1, 80051a4 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005196:	4603      	mov	r3, r0
 8005198:	4602      	mov	r2, r0
 800519a:	4401      	add	r1, r0
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff fe19 	bl	8004dd4 <prvInsertTimerInActiveList>
					break;
 80051a2:	e79d      	b.n	80050e0 <prvProcessReceivedCommands+0xc>
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	e7fe      	b.n	80051b4 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80051b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d190      	bne.n	80050e0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 fab2 	bl	8005728 <vPortFree>
 80051c4:	e78c      	b.n	80050e0 <prvProcessReceivedCommands+0xc>
}
 80051c6:	b009      	add	sp, #36	; 0x24
 80051c8:	bd30      	pop	{r4, r5, pc}
 80051ca:	bf00      	nop
 80051cc:	20000d58 	.word	0x20000d58

080051d0 <prvTimerTask>:
{
 80051d0:	b500      	push	{lr}
 80051d2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051d4:	a801      	add	r0, sp, #4
 80051d6:	f7ff fded 	bl	8004db4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051da:	9901      	ldr	r1, [sp, #4]
 80051dc:	f7ff ff40 	bl	8005060 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80051e0:	f7ff ff78 	bl	80050d4 <prvProcessReceivedCommands>
 80051e4:	e7f6      	b.n	80051d4 <prvTimerTask+0x4>
	...

080051e8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051e8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <prvTaskExitError+0x3c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d008      	beq.n	800520a <prvTaskExitError+0x22>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	e7fe      	b.n	8005208 <prvTaskExitError+0x20>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800521a:	9b01      	ldr	r3, [sp, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0fc      	beq.n	800521a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005220:	b002      	add	sp, #8
 8005222:	4770      	bx	lr
 8005224:	20000018 	.word	0x20000018

08005228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005228:	4808      	ldr	r0, [pc, #32]	; (800524c <prvPortStartFirstTask+0x24>)
 800522a:	6800      	ldr	r0, [r0, #0]
 800522c:	6800      	ldr	r0, [r0, #0]
 800522e:	f380 8808 	msr	MSP, r0
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8814 	msr	CONTROL, r0
 800523a:	b662      	cpsie	i
 800523c:	b661      	cpsie	f
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	df00      	svc	0
 8005248:	bf00      	nop
 800524a:	0000      	.short	0x0000
 800524c:	e000ed08 	.word	0xe000ed08

08005250 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005250:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005260 <vPortEnableVFP+0x10>
 8005254:	6801      	ldr	r1, [r0, #0]
 8005256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800525a:	6001      	str	r1, [r0, #0]
 800525c:	4770      	bx	lr
 800525e:	0000      	.short	0x0000
 8005260:	e000ed88 	.word	0xe000ed88

08005264 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005268:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800526c:	f021 0101 	bic.w	r1, r1, #1
 8005270:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <pxPortInitialiseStack+0x28>)
 8005276:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800527a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800527e:	f06f 0302 	mvn.w	r3, #2
 8005282:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005286:	3844      	subs	r0, #68	; 0x44
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	080051e9 	.word	0x080051e9

08005290 <SVC_Handler>:
	__asm volatile (
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <pxCurrentTCBConst2>)
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6808      	ldr	r0, [r1, #0]
 8005296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	f380 8809 	msr	PSP, r0
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8811 	msr	BASEPRI, r0
 80052aa:	4770      	bx	lr
 80052ac:	f3af 8000 	nop.w

080052b0 <pxCurrentTCBConst2>:
 80052b0:	20000738 	.word	0x20000738

080052b4 <vPortEnterCritical>:
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80052c4:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <vPortEnterCritical+0x3c>)
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d000      	beq.n	80052d2 <vPortEnterCritical+0x1e>
}
 80052d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <vPortEnterCritical+0x40>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052da:	d0f9      	beq.n	80052d0 <vPortEnterCritical+0x1c>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	e7fe      	b.n	80052ec <vPortEnterCritical+0x38>
 80052ee:	bf00      	nop
 80052f0:	20000018 	.word	0x20000018
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80052f8:	4b09      	ldr	r3, [pc, #36]	; (8005320 <vPortExitCritical+0x28>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b943      	cbnz	r3, 8005310 <vPortExitCritical+0x18>
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	e7fe      	b.n	800530e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005310:	3b01      	subs	r3, #1
 8005312:	4a03      	ldr	r2, [pc, #12]	; (8005320 <vPortExitCritical+0x28>)
 8005314:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005316:	b90b      	cbnz	r3, 800531c <vPortExitCritical+0x24>
	__asm volatile
 8005318:	f383 8811 	msr	BASEPRI, r3
}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000018 	.word	0x20000018
	...

08005330 <PendSV_Handler>:
	__asm volatile
 8005330:	f3ef 8009 	mrs	r0, PSP
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <pxCurrentTCBConst>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f01e 0f10 	tst.w	lr, #16
 8005340:	bf08      	it	eq
 8005342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005354:	f380 8811 	msr	BASEPRI, r0
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f7ff fbb8 	bl	8004ad4 <vTaskSwitchContext>
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f380 8811 	msr	BASEPRI, r0
 800536c:	bc09      	pop	{r0, r3}
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	6808      	ldr	r0, [r1, #0]
 8005372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005376:	f01e 0f10 	tst.w	lr, #16
 800537a:	bf08      	it	eq
 800537c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005380:	f380 8809 	msr	PSP, r0
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst>:
 8005390:	20000738 	.word	0x20000738

08005394 <SysTick_Handler>:
{
 8005394:	b508      	push	{r3, lr}
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80053a6:	f7ff fa69 	bl	800487c <xTaskIncrementTick>
 80053aa:	b118      	cbz	r0, 80053b4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <SysTick_Handler+0x28>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80053b4:	2300      	movs	r3, #0
 80053b6:	f383 8811 	msr	BASEPRI, r3
}
 80053ba:	bd08      	pop	{r3, pc}
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053c0:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <vPortSetupTimerInterrupt+0x24>)
 80053c2:	2300      	movs	r3, #0
 80053c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c6:	4908      	ldr	r1, [pc, #32]	; (80053e8 <vPortSetupTimerInterrupt+0x28>)
 80053c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053ca:	4b08      	ldr	r3, [pc, #32]	; (80053ec <vPortSetupTimerInterrupt+0x2c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4908      	ldr	r1, [pc, #32]	; (80053f0 <vPortSetupTimerInterrupt+0x30>)
 80053d0:	fba1 1303 	umull	r1, r3, r1, r3
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	3b01      	subs	r3, #1
 80053d8:	4906      	ldr	r1, [pc, #24]	; (80053f4 <vPortSetupTimerInterrupt+0x34>)
 80053da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053dc:	2307      	movs	r3, #7
 80053de:	6013      	str	r3, [r2, #0]
}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	e000e010 	.word	0xe000e010
 80053e8:	e000e018 	.word	0xe000e018
 80053ec:	2000000c 	.word	0x2000000c
 80053f0:	10624dd3 	.word	0x10624dd3
 80053f4:	e000e014 	.word	0xe000e014

080053f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053f8:	4b3a      	ldr	r3, [pc, #232]	; (80054e4 <xPortStartScheduler+0xec>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4b3a      	ldr	r3, [pc, #232]	; (80054e8 <xPortStartScheduler+0xf0>)
 80053fe:	429a      	cmp	r2, r3
 8005400:	d00d      	beq.n	800541e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005402:	4b38      	ldr	r3, [pc, #224]	; (80054e4 <xPortStartScheduler+0xec>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b39      	ldr	r3, [pc, #228]	; (80054ec <xPortStartScheduler+0xf4>)
 8005408:	429a      	cmp	r2, r3
 800540a:	d111      	bne.n	8005430 <xPortStartScheduler+0x38>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	e7fe      	b.n	800541c <xPortStartScheduler+0x24>
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	e7fe      	b.n	800542e <xPortStartScheduler+0x36>
{
 8005430:	b510      	push	{r4, lr}
 8005432:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005434:	4b2e      	ldr	r3, [pc, #184]	; (80054f0 <xPortStartScheduler+0xf8>)
 8005436:	781a      	ldrb	r2, [r3, #0]
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800543c:	22ff      	movs	r2, #255	; 0xff
 800543e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005448:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800544c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005450:	4a28      	ldr	r2, [pc, #160]	; (80054f4 <xPortStartScheduler+0xfc>)
 8005452:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005454:	4b28      	ldr	r3, [pc, #160]	; (80054f8 <xPortStartScheduler+0x100>)
 8005456:	2207      	movs	r2, #7
 8005458:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800545a:	e009      	b.n	8005470 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800545c:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <xPortStartScheduler+0x100>)
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	3b01      	subs	r3, #1
 8005462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005464:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005470:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005474:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005478:	d1f0      	bne.n	800545c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800547a:	4b1f      	ldr	r3, [pc, #124]	; (80054f8 <xPortStartScheduler+0x100>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d008      	beq.n	8005494 <xPortStartScheduler+0x9c>
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	e7fe      	b.n	8005492 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005494:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <xPortStartScheduler+0x100>)
 800549c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <xPortStartScheduler+0xf8>)
 80054a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054a6:	4b15      	ldr	r3, [pc, #84]	; (80054fc <xPortStartScheduler+0x104>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80054ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80054b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80054b8:	f7ff ff82 	bl	80053c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80054bc:	2400      	movs	r4, #0
 80054be:	4b10      	ldr	r3, [pc, #64]	; (8005500 <xPortStartScheduler+0x108>)
 80054c0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80054c2:	f7ff fec5 	bl	8005250 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054c6:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <xPortStartScheduler+0x10c>)
 80054c8:	6813      	ldr	r3, [r2, #0]
 80054ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80054d0:	f7ff feaa 	bl	8005228 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80054d4:	f7ff fafe 	bl	8004ad4 <vTaskSwitchContext>
	prvTaskExitError();
 80054d8:	f7ff fe86 	bl	80051e8 <prvTaskExitError>
}
 80054dc:	4620      	mov	r0, r4
 80054de:	b002      	add	sp, #8
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	bf00      	nop
 80054e4:	e000ed00 	.word	0xe000ed00
 80054e8:	410fc271 	.word	0x410fc271
 80054ec:	410fc270 	.word	0x410fc270
 80054f0:	e000e400 	.word	0xe000e400
 80054f4:	20000d60 	.word	0x20000d60
 80054f8:	20000d64 	.word	0x20000d64
 80054fc:	e000ed20 	.word	0xe000ed20
 8005500:	20000018 	.word	0x20000018
 8005504:	e000ef34 	.word	0xe000ef34

08005508 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005508:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800550c:	2b0f      	cmp	r3, #15
 800550e:	d90f      	bls.n	8005530 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005510:	4a10      	ldr	r2, [pc, #64]	; (8005554 <vPortValidateInterruptPriority+0x4c>)
 8005512:	5c9b      	ldrb	r3, [r3, r2]
 8005514:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005516:	4a10      	ldr	r2, [pc, #64]	; (8005558 <vPortValidateInterruptPriority+0x50>)
 8005518:	7812      	ldrb	r2, [r2, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d908      	bls.n	8005530 <vPortValidateInterruptPriority+0x28>
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	e7fe      	b.n	800552e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <vPortValidateInterruptPriority+0x54>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <vPortValidateInterruptPriority+0x58>)
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	4293      	cmp	r3, r2
 800553e:	d908      	bls.n	8005552 <vPortValidateInterruptPriority+0x4a>
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	e7fe      	b.n	8005550 <vPortValidateInterruptPriority+0x48>
	}
 8005552:	4770      	bx	lr
 8005554:	e000e3f0 	.word	0xe000e3f0
 8005558:	20000d60 	.word	0x20000d60
 800555c:	e000ed0c 	.word	0xe000ed0c
 8005560:	20000d64 	.word	0x20000d64

08005564 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005564:	4a12      	ldr	r2, [pc, #72]	; (80055b0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005566:	f012 0f07 	tst.w	r2, #7
 800556a:	d01e      	beq.n	80055aa <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800556c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800556e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005572:	f5c1 6340 	rsb	r3, r1, #3072	; 0xc00
 8005576:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005578:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800557a:	480e      	ldr	r0, [pc, #56]	; (80055b4 <prvHeapInit+0x50>)
 800557c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800557e:	2100      	movs	r1, #0
 8005580:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005582:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005584:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005586:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800558a:	480b      	ldr	r0, [pc, #44]	; (80055b8 <prvHeapInit+0x54>)
 800558c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800558e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005590:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005592:	1a99      	subs	r1, r3, r2
 8005594:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005596:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <prvHeapInit+0x58>)
 800559a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <prvHeapInit+0x5c>)
 800559e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <prvHeapInit+0x60>)
 80055a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055a6:	601a      	str	r2, [r3, #0]
}
 80055a8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055ae:	e7e4      	b.n	800557a <prvHeapInit+0x16>
 80055b0:	20000d6c 	.word	0x20000d6c
 80055b4:	20001978 	.word	0x20001978
 80055b8:	20000d68 	.word	0x20000d68
 80055bc:	20001974 	.word	0x20001974
 80055c0:	20001970 	.word	0x20001970
 80055c4:	2000196c 	.word	0x2000196c

080055c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055c8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <prvInsertBlockIntoFreeList+0x50>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4282      	cmp	r2, r0
 80055d0:	d31b      	bcc.n	800560a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055d2:	6859      	ldr	r1, [r3, #4]
 80055d4:	185c      	adds	r4, r3, r1
 80055d6:	4284      	cmp	r4, r0
 80055d8:	d103      	bne.n	80055e2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055da:	6840      	ldr	r0, [r0, #4]
 80055dc:	4401      	add	r1, r0
 80055de:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055e0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055e2:	6841      	ldr	r1, [r0, #4]
 80055e4:	1844      	adds	r4, r0, r1
 80055e6:	42a2      	cmp	r2, r4
 80055e8:	d113      	bne.n	8005612 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ea:	4c0c      	ldr	r4, [pc, #48]	; (800561c <prvInsertBlockIntoFreeList+0x54>)
 80055ec:	6824      	ldr	r4, [r4, #0]
 80055ee:	42a2      	cmp	r2, r4
 80055f0:	d00d      	beq.n	800560e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	4411      	add	r1, r2
 80055f6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055fe:	4298      	cmp	r0, r3
 8005600:	d000      	beq.n	8005604 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005602:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005608:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800560a:	4613      	mov	r3, r2
 800560c:	e7de      	b.n	80055cc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800560e:	6004      	str	r4, [r0, #0]
 8005610:	e7f5      	b.n	80055fe <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005612:	6002      	str	r2, [r0, #0]
 8005614:	e7f3      	b.n	80055fe <prvInsertBlockIntoFreeList+0x36>
 8005616:	bf00      	nop
 8005618:	20001978 	.word	0x20001978
 800561c:	20000d68 	.word	0x20000d68

08005620 <pvPortMalloc>:
{
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005624:	f7ff f91c 	bl	8004860 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005628:	4b3a      	ldr	r3, [pc, #232]	; (8005714 <pvPortMalloc+0xf4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	b1bb      	cbz	r3, 800565e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800562e:	4b3a      	ldr	r3, [pc, #232]	; (8005718 <pvPortMalloc+0xf8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	421c      	tst	r4, r3
 8005634:	d163      	bne.n	80056fe <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8005636:	b1ac      	cbz	r4, 8005664 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8005638:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800563a:	f014 0f07 	tst.w	r4, #7
 800563e:	d011      	beq.n	8005664 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005640:	f024 0407 	bic.w	r4, r4, #7
 8005644:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005646:	f004 0307 	and.w	r3, r4, #7
 800564a:	b15b      	cbz	r3, 8005664 <pvPortMalloc+0x44>
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	e7fe      	b.n	800565c <pvPortMalloc+0x3c>
			prvHeapInit();
 800565e:	f7ff ff81 	bl	8005564 <prvHeapInit>
 8005662:	e7e4      	b.n	800562e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005664:	2c00      	cmp	r4, #0
 8005666:	d04c      	beq.n	8005702 <pvPortMalloc+0xe2>
 8005668:	4b2c      	ldr	r3, [pc, #176]	; (800571c <pvPortMalloc+0xfc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	42a3      	cmp	r3, r4
 800566e:	d34a      	bcc.n	8005706 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <pvPortMalloc+0x100>)
 8005672:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005674:	e001      	b.n	800567a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8005676:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8005678:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800567a:	686a      	ldr	r2, [r5, #4]
 800567c:	42a2      	cmp	r2, r4
 800567e:	d202      	bcs.n	8005686 <pvPortMalloc+0x66>
 8005680:	682a      	ldr	r2, [r5, #0]
 8005682:	2a00      	cmp	r2, #0
 8005684:	d1f7      	bne.n	8005676 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8005686:	4a23      	ldr	r2, [pc, #140]	; (8005714 <pvPortMalloc+0xf4>)
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	42aa      	cmp	r2, r5
 800568c:	d03d      	beq.n	800570a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800568e:	681e      	ldr	r6, [r3, #0]
 8005690:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005692:	682a      	ldr	r2, [r5, #0]
 8005694:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005696:	686b      	ldr	r3, [r5, #4]
 8005698:	1b1b      	subs	r3, r3, r4
 800569a:	2b10      	cmp	r3, #16
 800569c:	d910      	bls.n	80056c0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800569e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a0:	f010 0f07 	tst.w	r0, #7
 80056a4:	d008      	beq.n	80056b8 <pvPortMalloc+0x98>
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	e7fe      	b.n	80056b6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056ba:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056bc:	f7ff ff84 	bl	80055c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056c0:	686a      	ldr	r2, [r5, #4]
 80056c2:	4916      	ldr	r1, [pc, #88]	; (800571c <pvPortMalloc+0xfc>)
 80056c4:	680b      	ldr	r3, [r1, #0]
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ca:	4916      	ldr	r1, [pc, #88]	; (8005724 <pvPortMalloc+0x104>)
 80056cc:	6809      	ldr	r1, [r1, #0]
 80056ce:	428b      	cmp	r3, r1
 80056d0:	d201      	bcs.n	80056d6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056d2:	4914      	ldr	r1, [pc, #80]	; (8005724 <pvPortMalloc+0x104>)
 80056d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <pvPortMalloc+0xf8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4313      	orrs	r3, r2
 80056dc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80056e2:	f7ff f957 	bl	8004994 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e6:	f016 0f07 	tst.w	r6, #7
 80056ea:	d010      	beq.n	800570e <pvPortMalloc+0xee>
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	e7fe      	b.n	80056fc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 80056fe:	2600      	movs	r6, #0
 8005700:	e7ef      	b.n	80056e2 <pvPortMalloc+0xc2>
 8005702:	2600      	movs	r6, #0
 8005704:	e7ed      	b.n	80056e2 <pvPortMalloc+0xc2>
 8005706:	2600      	movs	r6, #0
 8005708:	e7eb      	b.n	80056e2 <pvPortMalloc+0xc2>
 800570a:	2600      	movs	r6, #0
 800570c:	e7e9      	b.n	80056e2 <pvPortMalloc+0xc2>
}
 800570e:	4630      	mov	r0, r6
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	bf00      	nop
 8005714:	20000d68 	.word	0x20000d68
 8005718:	2000196c 	.word	0x2000196c
 800571c:	20001970 	.word	0x20001970
 8005720:	20001978 	.word	0x20001978
 8005724:	20001974 	.word	0x20001974

08005728 <vPortFree>:
	if( pv != NULL )
 8005728:	b380      	cbz	r0, 800578c <vPortFree+0x64>
{
 800572a:	b538      	push	{r3, r4, r5, lr}
 800572c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800572e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005732:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005736:	4916      	ldr	r1, [pc, #88]	; (8005790 <vPortFree+0x68>)
 8005738:	6809      	ldr	r1, [r1, #0]
 800573a:	420a      	tst	r2, r1
 800573c:	d108      	bne.n	8005750 <vPortFree+0x28>
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	e7fe      	b.n	800574e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005750:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8005754:	b140      	cbz	r0, 8005768 <vPortFree+0x40>
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	e7fe      	b.n	8005766 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005768:	ea22 0201 	bic.w	r2, r2, r1
 800576c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8005770:	f7ff f876 	bl	8004860 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005774:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005778:	4a06      	ldr	r2, [pc, #24]	; (8005794 <vPortFree+0x6c>)
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	440b      	add	r3, r1
 800577e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff ff21 	bl	80055c8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8005786:	f7ff f905 	bl	8004994 <xTaskResumeAll>
}
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	2000196c 	.word	0x2000196c
 8005794:	20001970 	.word	0x20001970

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4e0d      	ldr	r6, [pc, #52]	; (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	; (80057d4 <__libc_init_array+0x3c>)
 800579e:	1ba4      	subs	r4, r4, r6
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2500      	movs	r5, #0
 80057a4:	42a5      	cmp	r5, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4e0b      	ldr	r6, [pc, #44]	; (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	; (80057dc <__libc_init_array+0x44>)
 80057ac:	f001 faf6 	bl	8006d9c <_init>
 80057b0:	1ba4      	subs	r4, r4, r6
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2500      	movs	r5, #0
 80057b6:	42a5      	cmp	r5, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057c0:	4798      	blx	r3
 80057c2:	3501      	adds	r5, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057ca:	4798      	blx	r3
 80057cc:	3501      	adds	r5, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08006ff8 	.word	0x08006ff8
 80057d4:	08006ff8 	.word	0x08006ff8
 80057d8:	08006ff8 	.word	0x08006ff8
 80057dc:	08006ffc 	.word	0x08006ffc

080057e0 <memcpy>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	1e43      	subs	r3, r0, #1
 80057e4:	440a      	add	r2, r1
 80057e6:	4291      	cmp	r1, r2
 80057e8:	d100      	bne.n	80057ec <memcpy+0xc>
 80057ea:	bd10      	pop	{r4, pc}
 80057ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f4:	e7f7      	b.n	80057e6 <memcpy+0x6>

080057f6 <memset>:
 80057f6:	4402      	add	r2, r0
 80057f8:	4603      	mov	r3, r0
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d100      	bne.n	8005800 <memset+0xa>
 80057fe:	4770      	bx	lr
 8005800:	f803 1b01 	strb.w	r1, [r3], #1
 8005804:	e7f9      	b.n	80057fa <memset+0x4>
	...

08005808 <sin>:
 8005808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800580a:	ec51 0b10 	vmov	r0, r1, d0
 800580e:	4a20      	ldr	r2, [pc, #128]	; (8005890 <sin+0x88>)
 8005810:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005814:	4293      	cmp	r3, r2
 8005816:	dc07      	bgt.n	8005828 <sin+0x20>
 8005818:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005888 <sin+0x80>
 800581c:	2000      	movs	r0, #0
 800581e:	f000 febf 	bl	80065a0 <__kernel_sin>
 8005822:	ec51 0b10 	vmov	r0, r1, d0
 8005826:	e007      	b.n	8005838 <sin+0x30>
 8005828:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <sin+0x8c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	dd09      	ble.n	8005842 <sin+0x3a>
 800582e:	ee10 2a10 	vmov	r2, s0
 8005832:	460b      	mov	r3, r1
 8005834:	f7fa fcd0 	bl	80001d8 <__aeabi_dsub>
 8005838:	ec41 0b10 	vmov	d0, r0, r1
 800583c:	b005      	add	sp, #20
 800583e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005842:	4668      	mov	r0, sp
 8005844:	f000 f8b0 	bl	80059a8 <__ieee754_rem_pio2>
 8005848:	f000 0003 	and.w	r0, r0, #3
 800584c:	2801      	cmp	r0, #1
 800584e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005852:	ed9d 0b00 	vldr	d0, [sp]
 8005856:	d004      	beq.n	8005862 <sin+0x5a>
 8005858:	2802      	cmp	r0, #2
 800585a:	d005      	beq.n	8005868 <sin+0x60>
 800585c:	b970      	cbnz	r0, 800587c <sin+0x74>
 800585e:	2001      	movs	r0, #1
 8005860:	e7dd      	b.n	800581e <sin+0x16>
 8005862:	f000 fa95 	bl	8005d90 <__kernel_cos>
 8005866:	e7dc      	b.n	8005822 <sin+0x1a>
 8005868:	2001      	movs	r0, #1
 800586a:	f000 fe99 	bl	80065a0 <__kernel_sin>
 800586e:	ec53 2b10 	vmov	r2, r3, d0
 8005872:	ee10 0a10 	vmov	r0, s0
 8005876:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800587a:	e7dd      	b.n	8005838 <sin+0x30>
 800587c:	f000 fa88 	bl	8005d90 <__kernel_cos>
 8005880:	e7f5      	b.n	800586e <sin+0x66>
 8005882:	bf00      	nop
 8005884:	f3af 8000 	nop.w
	...
 8005890:	3fe921fb 	.word	0x3fe921fb
 8005894:	7fefffff 	.word	0x7fefffff

08005898 <tanh>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	ec55 4b10 	vmov	r4, r5, d0
 800589e:	4a3d      	ldr	r2, [pc, #244]	; (8005994 <tanh+0xfc>)
 80058a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80058a4:	4293      	cmp	r3, r2
 80058a6:	462e      	mov	r6, r5
 80058a8:	dd13      	ble.n	80058d2 <tanh+0x3a>
 80058aa:	ee10 2a10 	vmov	r2, s0
 80058ae:	462b      	mov	r3, r5
 80058b0:	2000      	movs	r0, #0
 80058b2:	4939      	ldr	r1, [pc, #228]	; (8005998 <tanh+0x100>)
 80058b4:	f7fa ff72 	bl	800079c <__aeabi_ddiv>
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	4b36      	ldr	r3, [pc, #216]	; (8005998 <tanh+0x100>)
 80058c0:	db04      	blt.n	80058cc <tanh+0x34>
 80058c2:	f7fa fc8b 	bl	80001dc <__adddf3>
 80058c6:	ec41 0b10 	vmov	d0, r0, r1
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	f7fa fc84 	bl	80001d8 <__aeabi_dsub>
 80058d0:	e7f9      	b.n	80058c6 <tanh+0x2e>
 80058d2:	4a32      	ldr	r2, [pc, #200]	; (800599c <tanh+0x104>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	dc59      	bgt.n	800598c <tanh+0xf4>
 80058d8:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 80058dc:	da0b      	bge.n	80058f6 <tanh+0x5e>
 80058de:	2200      	movs	r2, #0
 80058e0:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <tanh+0x100>)
 80058e2:	ee10 0a10 	vmov	r0, s0
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fc78 	bl	80001dc <__adddf3>
 80058ec:	4622      	mov	r2, r4
 80058ee:	462b      	mov	r3, r5
 80058f0:	f7fa fe2a 	bl	8000548 <__aeabi_dmul>
 80058f4:	e7e7      	b.n	80058c6 <tanh+0x2e>
 80058f6:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <tanh+0x108>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	dd28      	ble.n	800594e <tanh+0xb6>
 80058fc:	f001 f93a 	bl	8006b74 <fabs>
 8005900:	ec53 2b10 	vmov	r2, r3, d0
 8005904:	ee10 0a10 	vmov	r0, s0
 8005908:	4619      	mov	r1, r3
 800590a:	f7fa fc67 	bl	80001dc <__adddf3>
 800590e:	ec41 0b10 	vmov	d0, r0, r1
 8005912:	f000 ff01 	bl	8006718 <expm1>
 8005916:	2200      	movs	r2, #0
 8005918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800591c:	ec51 0b10 	vmov	r0, r1, d0
 8005920:	f7fa fc5c 	bl	80001dc <__adddf3>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	2000      	movs	r0, #0
 800592a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800592e:	f7fa ff35 	bl	800079c <__aeabi_ddiv>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	2000      	movs	r0, #0
 8005938:	4917      	ldr	r1, [pc, #92]	; (8005998 <tanh+0x100>)
 800593a:	f7fa fc4d 	bl	80001d8 <__aeabi_dsub>
 800593e:	2e00      	cmp	r6, #0
 8005940:	bfbf      	itttt	lt
 8005942:	4602      	movlt	r2, r0
 8005944:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
 8005948:	4610      	movlt	r0, r2
 800594a:	4619      	movlt	r1, r3
 800594c:	e7bb      	b.n	80058c6 <tanh+0x2e>
 800594e:	f001 f911 	bl	8006b74 <fabs>
 8005952:	2200      	movs	r2, #0
 8005954:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8005958:	ec51 0b10 	vmov	r0, r1, d0
 800595c:	f7fa fdf4 	bl	8000548 <__aeabi_dmul>
 8005960:	ec41 0b10 	vmov	d0, r0, r1
 8005964:	f000 fed8 	bl	8006718 <expm1>
 8005968:	ec51 0b10 	vmov	r0, r1, d0
 800596c:	2200      	movs	r2, #0
 800596e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005972:	ee10 4a10 	vmov	r4, s0
 8005976:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800597a:	f7fa fc2f 	bl	80001dc <__adddf3>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4620      	mov	r0, r4
 8005984:	4629      	mov	r1, r5
 8005986:	f7fa ff09 	bl	800079c <__aeabi_ddiv>
 800598a:	e7d8      	b.n	800593e <tanh+0xa6>
 800598c:	2000      	movs	r0, #0
 800598e:	4902      	ldr	r1, [pc, #8]	; (8005998 <tanh+0x100>)
 8005990:	e7d5      	b.n	800593e <tanh+0xa6>
 8005992:	bf00      	nop
 8005994:	7fefffff 	.word	0x7fefffff
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	4035ffff 	.word	0x4035ffff
 80059a0:	3fefffff 	.word	0x3fefffff
 80059a4:	00000000 	.word	0x00000000

080059a8 <__ieee754_rem_pio2>:
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	ec57 6b10 	vmov	r6, r7, d0
 80059b0:	4bc3      	ldr	r3, [pc, #780]	; (8005cc0 <__ieee754_rem_pio2+0x318>)
 80059b2:	b08d      	sub	sp, #52	; 0x34
 80059b4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80059b8:	4598      	cmp	r8, r3
 80059ba:	4604      	mov	r4, r0
 80059bc:	9704      	str	r7, [sp, #16]
 80059be:	dc07      	bgt.n	80059d0 <__ieee754_rem_pio2+0x28>
 80059c0:	2200      	movs	r2, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	ed84 0b00 	vstr	d0, [r4]
 80059c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80059cc:	2500      	movs	r5, #0
 80059ce:	e027      	b.n	8005a20 <__ieee754_rem_pio2+0x78>
 80059d0:	4bbc      	ldr	r3, [pc, #752]	; (8005cc4 <__ieee754_rem_pio2+0x31c>)
 80059d2:	4598      	cmp	r8, r3
 80059d4:	dc75      	bgt.n	8005ac2 <__ieee754_rem_pio2+0x11a>
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	4dbb      	ldr	r5, [pc, #748]	; (8005cc8 <__ieee754_rem_pio2+0x320>)
 80059da:	2b00      	cmp	r3, #0
 80059dc:	ee10 0a10 	vmov	r0, s0
 80059e0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005c88 <__ieee754_rem_pio2+0x2e0>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	4639      	mov	r1, r7
 80059e8:	dd36      	ble.n	8005a58 <__ieee754_rem_pio2+0xb0>
 80059ea:	f7fa fbf5 	bl	80001d8 <__aeabi_dsub>
 80059ee:	45a8      	cmp	r8, r5
 80059f0:	4606      	mov	r6, r0
 80059f2:	460f      	mov	r7, r1
 80059f4:	d018      	beq.n	8005a28 <__ieee754_rem_pio2+0x80>
 80059f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005c90 <__ieee754_rem_pio2+0x2e8>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f7fa fbec 	bl	80001d8 <__aeabi_dsub>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	e9c4 2300 	strd	r2, r3, [r4]
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fbe4 	bl	80001d8 <__aeabi_dsub>
 8005a10:	a39f      	add	r3, pc, #636	; (adr r3, 8005c90 <__ieee754_rem_pio2+0x2e8>)
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f7fa fbdf 	bl	80001d8 <__aeabi_dsub>
 8005a1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a1e:	2501      	movs	r5, #1
 8005a20:	4628      	mov	r0, r5
 8005a22:	b00d      	add	sp, #52	; 0x34
 8005a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a28:	a39b      	add	r3, pc, #620	; (adr r3, 8005c98 <__ieee754_rem_pio2+0x2f0>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f7fa fbd3 	bl	80001d8 <__aeabi_dsub>
 8005a32:	a39b      	add	r3, pc, #620	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x2f8>)
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	4606      	mov	r6, r0
 8005a3a:	460f      	mov	r7, r1
 8005a3c:	f7fa fbcc 	bl	80001d8 <__aeabi_dsub>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	e9c4 2300 	strd	r2, r3, [r4]
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fa fbc4 	bl	80001d8 <__aeabi_dsub>
 8005a50:	a393      	add	r3, pc, #588	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x2f8>)
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	e7de      	b.n	8005a16 <__ieee754_rem_pio2+0x6e>
 8005a58:	f7fa fbc0 	bl	80001dc <__adddf3>
 8005a5c:	45a8      	cmp	r8, r5
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460f      	mov	r7, r1
 8005a62:	d016      	beq.n	8005a92 <__ieee754_rem_pio2+0xea>
 8005a64:	a38a      	add	r3, pc, #552	; (adr r3, 8005c90 <__ieee754_rem_pio2+0x2e8>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f7fa fbb7 	bl	80001dc <__adddf3>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9c4 2300 	strd	r2, r3, [r4]
 8005a76:	4630      	mov	r0, r6
 8005a78:	4639      	mov	r1, r7
 8005a7a:	f7fa fbad 	bl	80001d8 <__aeabi_dsub>
 8005a7e:	a384      	add	r3, pc, #528	; (adr r3, 8005c90 <__ieee754_rem_pio2+0x2e8>)
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fbaa 	bl	80001dc <__adddf3>
 8005a88:	f04f 35ff 	mov.w	r5, #4294967295
 8005a8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a90:	e7c6      	b.n	8005a20 <__ieee754_rem_pio2+0x78>
 8005a92:	a381      	add	r3, pc, #516	; (adr r3, 8005c98 <__ieee754_rem_pio2+0x2f0>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f7fa fba0 	bl	80001dc <__adddf3>
 8005a9c:	a380      	add	r3, pc, #512	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x2f8>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	f7fa fb99 	bl	80001dc <__adddf3>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	e9c4 2300 	strd	r2, r3, [r4]
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	f7fa fb8f 	bl	80001d8 <__aeabi_dsub>
 8005aba:	a379      	add	r3, pc, #484	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x2f8>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	e7e0      	b.n	8005a84 <__ieee754_rem_pio2+0xdc>
 8005ac2:	4b82      	ldr	r3, [pc, #520]	; (8005ccc <__ieee754_rem_pio2+0x324>)
 8005ac4:	4598      	cmp	r8, r3
 8005ac6:	f300 80d0 	bgt.w	8005c6a <__ieee754_rem_pio2+0x2c2>
 8005aca:	f001 f853 	bl	8006b74 <fabs>
 8005ace:	ec57 6b10 	vmov	r6, r7, d0
 8005ad2:	ee10 0a10 	vmov	r0, s0
 8005ad6:	a374      	add	r3, pc, #464	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x300>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa fd33 	bl	8000548 <__aeabi_dmul>
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b7a      	ldr	r3, [pc, #488]	; (8005cd0 <__ieee754_rem_pio2+0x328>)
 8005ae6:	f7fa fb79 	bl	80001dc <__adddf3>
 8005aea:	f7fa ffc7 	bl	8000a7c <__aeabi_d2iz>
 8005aee:	4605      	mov	r5, r0
 8005af0:	f7fa fcc0 	bl	8000474 <__aeabi_i2d>
 8005af4:	a364      	add	r3, pc, #400	; (adr r3, 8005c88 <__ieee754_rem_pio2+0x2e0>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005afe:	f7fa fd23 	bl	8000548 <__aeabi_dmul>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f7fa fb65 	bl	80001d8 <__aeabi_dsub>
 8005b0e:	a360      	add	r3, pc, #384	; (adr r3, 8005c90 <__ieee754_rem_pio2+0x2e8>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	4682      	mov	sl, r0
 8005b16:	468b      	mov	fp, r1
 8005b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b1c:	f7fa fd14 	bl	8000548 <__aeabi_dmul>
 8005b20:	2d1f      	cmp	r5, #31
 8005b22:	4606      	mov	r6, r0
 8005b24:	460f      	mov	r7, r1
 8005b26:	dc0c      	bgt.n	8005b42 <__ieee754_rem_pio2+0x19a>
 8005b28:	1e6a      	subs	r2, r5, #1
 8005b2a:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <__ieee754_rem_pio2+0x32c>)
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	4543      	cmp	r3, r8
 8005b32:	d006      	beq.n	8005b42 <__ieee754_rem_pio2+0x19a>
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4650      	mov	r0, sl
 8005b3a:	4659      	mov	r1, fp
 8005b3c:	f7fa fb4c 	bl	80001d8 <__aeabi_dsub>
 8005b40:	e00e      	b.n	8005b60 <__ieee754_rem_pio2+0x1b8>
 8005b42:	4632      	mov	r2, r6
 8005b44:	463b      	mov	r3, r7
 8005b46:	4650      	mov	r0, sl
 8005b48:	4659      	mov	r1, fp
 8005b4a:	f7fa fb45 	bl	80001d8 <__aeabi_dsub>
 8005b4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005b52:	9305      	str	r3, [sp, #20]
 8005b54:	9a05      	ldr	r2, [sp, #20]
 8005b56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	dc02      	bgt.n	8005b66 <__ieee754_rem_pio2+0x1be>
 8005b60:	e9c4 0100 	strd	r0, r1, [r4]
 8005b64:	e039      	b.n	8005bda <__ieee754_rem_pio2+0x232>
 8005b66:	a34c      	add	r3, pc, #304	; (adr r3, 8005c98 <__ieee754_rem_pio2+0x2f0>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b70:	f7fa fcea 	bl	8000548 <__aeabi_dmul>
 8005b74:	4606      	mov	r6, r0
 8005b76:	460f      	mov	r7, r1
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	4659      	mov	r1, fp
 8005b80:	f7fa fb2a 	bl	80001d8 <__aeabi_dsub>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4680      	mov	r8, r0
 8005b8a:	4689      	mov	r9, r1
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	4659      	mov	r1, fp
 8005b90:	f7fa fb22 	bl	80001d8 <__aeabi_dsub>
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	f7fa fb1e 	bl	80001d8 <__aeabi_dsub>
 8005b9c:	a340      	add	r3, pc, #256	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x2f8>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460f      	mov	r7, r1
 8005ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005baa:	f7fa fccd 	bl	8000548 <__aeabi_dmul>
 8005bae:	4632      	mov	r2, r6
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	f7fa fb11 	bl	80001d8 <__aeabi_dsub>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460f      	mov	r7, r1
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	f7fa fb09 	bl	80001d8 <__aeabi_dsub>
 8005bc6:	9a05      	ldr	r2, [sp, #20]
 8005bc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b31      	cmp	r3, #49	; 0x31
 8005bd0:	dc20      	bgt.n	8005c14 <__ieee754_rem_pio2+0x26c>
 8005bd2:	e9c4 0100 	strd	r0, r1, [r4]
 8005bd6:	46c2      	mov	sl, r8
 8005bd8:	46cb      	mov	fp, r9
 8005bda:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005bde:	4650      	mov	r0, sl
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	4659      	mov	r1, fp
 8005be6:	f7fa faf7 	bl	80001d8 <__aeabi_dsub>
 8005bea:	463b      	mov	r3, r7
 8005bec:	4632      	mov	r2, r6
 8005bee:	f7fa faf3 	bl	80001d8 <__aeabi_dsub>
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bfa:	f6bf af11 	bge.w	8005a20 <__ieee754_rem_pio2+0x78>
 8005bfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c02:	6063      	str	r3, [r4, #4]
 8005c04:	f8c4 8000 	str.w	r8, [r4]
 8005c08:	60a0      	str	r0, [r4, #8]
 8005c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c0e:	60e3      	str	r3, [r4, #12]
 8005c10:	426d      	negs	r5, r5
 8005c12:	e705      	b.n	8005a20 <__ieee754_rem_pio2+0x78>
 8005c14:	a326      	add	r3, pc, #152	; (adr r3, 8005cb0 <__ieee754_rem_pio2+0x308>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1e:	f7fa fc93 	bl	8000548 <__aeabi_dmul>
 8005c22:	4606      	mov	r6, r0
 8005c24:	460f      	mov	r7, r1
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	f7fa fad3 	bl	80001d8 <__aeabi_dsub>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4682      	mov	sl, r0
 8005c38:	468b      	mov	fp, r1
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa facb 	bl	80001d8 <__aeabi_dsub>
 8005c42:	4632      	mov	r2, r6
 8005c44:	463b      	mov	r3, r7
 8005c46:	f7fa fac7 	bl	80001d8 <__aeabi_dsub>
 8005c4a:	a31b      	add	r3, pc, #108	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x310>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c58:	f7fa fc76 	bl	8000548 <__aeabi_dmul>
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	463b      	mov	r3, r7
 8005c60:	f7fa faba 	bl	80001d8 <__aeabi_dsub>
 8005c64:	4606      	mov	r6, r0
 8005c66:	460f      	mov	r7, r1
 8005c68:	e764      	b.n	8005b34 <__ieee754_rem_pio2+0x18c>
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <__ieee754_rem_pio2+0x330>)
 8005c6c:	4598      	cmp	r8, r3
 8005c6e:	dd35      	ble.n	8005cdc <__ieee754_rem_pio2+0x334>
 8005c70:	ee10 2a10 	vmov	r2, s0
 8005c74:	463b      	mov	r3, r7
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f7fa faad 	bl	80001d8 <__aeabi_dsub>
 8005c7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c82:	e9c4 0100 	strd	r0, r1, [r4]
 8005c86:	e6a1      	b.n	80059cc <__ieee754_rem_pio2+0x24>
 8005c88:	54400000 	.word	0x54400000
 8005c8c:	3ff921fb 	.word	0x3ff921fb
 8005c90:	1a626331 	.word	0x1a626331
 8005c94:	3dd0b461 	.word	0x3dd0b461
 8005c98:	1a600000 	.word	0x1a600000
 8005c9c:	3dd0b461 	.word	0x3dd0b461
 8005ca0:	2e037073 	.word	0x2e037073
 8005ca4:	3ba3198a 	.word	0x3ba3198a
 8005ca8:	6dc9c883 	.word	0x6dc9c883
 8005cac:	3fe45f30 	.word	0x3fe45f30
 8005cb0:	2e000000 	.word	0x2e000000
 8005cb4:	3ba3198a 	.word	0x3ba3198a
 8005cb8:	252049c1 	.word	0x252049c1
 8005cbc:	397b839a 	.word	0x397b839a
 8005cc0:	3fe921fb 	.word	0x3fe921fb
 8005cc4:	4002d97b 	.word	0x4002d97b
 8005cc8:	3ff921fb 	.word	0x3ff921fb
 8005ccc:	413921fb 	.word	0x413921fb
 8005cd0:	3fe00000 	.word	0x3fe00000
 8005cd4:	08006e20 	.word	0x08006e20
 8005cd8:	7fefffff 	.word	0x7fefffff
 8005cdc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005ce0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005ce4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005ce8:	4630      	mov	r0, r6
 8005cea:	460f      	mov	r7, r1
 8005cec:	f7fa fec6 	bl	8000a7c <__aeabi_d2iz>
 8005cf0:	f7fa fbc0 	bl	8000474 <__aeabi_i2d>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d00:	f7fa fa6a 	bl	80001d8 <__aeabi_dsub>
 8005d04:	2200      	movs	r2, #0
 8005d06:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <__ieee754_rem_pio2+0x3dc>)
 8005d08:	f7fa fc1e 	bl	8000548 <__aeabi_dmul>
 8005d0c:	460f      	mov	r7, r1
 8005d0e:	4606      	mov	r6, r0
 8005d10:	f7fa feb4 	bl	8000a7c <__aeabi_d2iz>
 8005d14:	f7fa fbae 	bl	8000474 <__aeabi_i2d>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	4639      	mov	r1, r7
 8005d20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d24:	f7fa fa58 	bl	80001d8 <__aeabi_dsub>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <__ieee754_rem_pio2+0x3dc>)
 8005d2c:	f7fa fc0c 	bl	8000548 <__aeabi_dmul>
 8005d30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005d38:	f04f 0803 	mov.w	r8, #3
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	2700      	movs	r7, #0
 8005d40:	4632      	mov	r2, r6
 8005d42:	463b      	mov	r3, r7
 8005d44:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8005d4c:	f7fa fe64 	bl	8000a18 <__aeabi_dcmpeq>
 8005d50:	b9b0      	cbnz	r0, 8005d80 <__ieee754_rem_pio2+0x3d8>
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <__ieee754_rem_pio2+0x3e0>)
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	2302      	movs	r3, #2
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4643      	mov	r3, r8
 8005d5e:	4621      	mov	r1, r4
 8005d60:	a806      	add	r0, sp, #24
 8005d62:	f000 f8dd 	bl	8005f20 <__kernel_rem_pio2>
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	f6bf ae58 	bge.w	8005a20 <__ieee754_rem_pio2+0x78>
 8005d70:	6863      	ldr	r3, [r4, #4]
 8005d72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d76:	6063      	str	r3, [r4, #4]
 8005d78:	68e3      	ldr	r3, [r4, #12]
 8005d7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d7e:	e746      	b.n	8005c0e <__ieee754_rem_pio2+0x266>
 8005d80:	46d0      	mov	r8, sl
 8005d82:	e7dd      	b.n	8005d40 <__ieee754_rem_pio2+0x398>
 8005d84:	41700000 	.word	0x41700000
 8005d88:	08006ea0 	.word	0x08006ea0
 8005d8c:	00000000 	.word	0x00000000

08005d90 <__kernel_cos>:
 8005d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	ec59 8b10 	vmov	r8, r9, d0
 8005d98:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005d9c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005da0:	ed2d 8b02 	vpush	{d8}
 8005da4:	eeb0 8a41 	vmov.f32	s16, s2
 8005da8:	eef0 8a61 	vmov.f32	s17, s3
 8005dac:	da07      	bge.n	8005dbe <__kernel_cos+0x2e>
 8005dae:	ee10 0a10 	vmov	r0, s0
 8005db2:	4649      	mov	r1, r9
 8005db4:	f7fa fe62 	bl	8000a7c <__aeabi_d2iz>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f000 8089 	beq.w	8005ed0 <__kernel_cos+0x140>
 8005dbe:	4642      	mov	r2, r8
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fbbf 	bl	8000548 <__aeabi_dmul>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4b4e      	ldr	r3, [pc, #312]	; (8005f08 <__kernel_cos+0x178>)
 8005dce:	4604      	mov	r4, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	f7fa fbb9 	bl	8000548 <__aeabi_dmul>
 8005dd6:	a340      	add	r3, pc, #256	; (adr r3, 8005ed8 <__kernel_cos+0x148>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	4682      	mov	sl, r0
 8005dde:	468b      	mov	fp, r1
 8005de0:	4620      	mov	r0, r4
 8005de2:	4629      	mov	r1, r5
 8005de4:	f7fa fbb0 	bl	8000548 <__aeabi_dmul>
 8005de8:	a33d      	add	r3, pc, #244	; (adr r3, 8005ee0 <__kernel_cos+0x150>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa f9f5 	bl	80001dc <__adddf3>
 8005df2:	4622      	mov	r2, r4
 8005df4:	462b      	mov	r3, r5
 8005df6:	f7fa fba7 	bl	8000548 <__aeabi_dmul>
 8005dfa:	a33b      	add	r3, pc, #236	; (adr r3, 8005ee8 <__kernel_cos+0x158>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa f9ea 	bl	80001d8 <__aeabi_dsub>
 8005e04:	4622      	mov	r2, r4
 8005e06:	462b      	mov	r3, r5
 8005e08:	f7fa fb9e 	bl	8000548 <__aeabi_dmul>
 8005e0c:	a338      	add	r3, pc, #224	; (adr r3, 8005ef0 <__kernel_cos+0x160>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa f9e3 	bl	80001dc <__adddf3>
 8005e16:	4622      	mov	r2, r4
 8005e18:	462b      	mov	r3, r5
 8005e1a:	f7fa fb95 	bl	8000548 <__aeabi_dmul>
 8005e1e:	a336      	add	r3, pc, #216	; (adr r3, 8005ef8 <__kernel_cos+0x168>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f7fa f9d8 	bl	80001d8 <__aeabi_dsub>
 8005e28:	4622      	mov	r2, r4
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	f7fa fb8c 	bl	8000548 <__aeabi_dmul>
 8005e30:	a333      	add	r3, pc, #204	; (adr r3, 8005f00 <__kernel_cos+0x170>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa f9d1 	bl	80001dc <__adddf3>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	f7fa fb83 	bl	8000548 <__aeabi_dmul>
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	f7fa fb7f 	bl	8000548 <__aeabi_dmul>
 8005e4a:	ec53 2b18 	vmov	r2, r3, d8
 8005e4e:	4604      	mov	r4, r0
 8005e50:	460d      	mov	r5, r1
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa fb77 	bl	8000548 <__aeabi_dmul>
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4629      	mov	r1, r5
 8005e60:	4620      	mov	r0, r4
 8005e62:	f7fa f9b9 	bl	80001d8 <__aeabi_dsub>
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <__kernel_cos+0x17c>)
 8005e68:	429e      	cmp	r6, r3
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4689      	mov	r9, r1
 8005e6e:	dc11      	bgt.n	8005e94 <__kernel_cos+0x104>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4650      	mov	r0, sl
 8005e76:	4659      	mov	r1, fp
 8005e78:	f7fa f9ae 	bl	80001d8 <__aeabi_dsub>
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4924      	ldr	r1, [pc, #144]	; (8005f10 <__kernel_cos+0x180>)
 8005e80:	4602      	mov	r2, r0
 8005e82:	2000      	movs	r0, #0
 8005e84:	f7fa f9a8 	bl	80001d8 <__aeabi_dsub>
 8005e88:	ecbd 8b02 	vpop	{d8}
 8005e8c:	ec41 0b10 	vmov	d0, r0, r1
 8005e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <__kernel_cos+0x184>)
 8005e96:	491e      	ldr	r1, [pc, #120]	; (8005f10 <__kernel_cos+0x180>)
 8005e98:	429e      	cmp	r6, r3
 8005e9a:	bfcc      	ite	gt
 8005e9c:	4d1e      	ldrgt	r5, [pc, #120]	; (8005f18 <__kernel_cos+0x188>)
 8005e9e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005ea2:	2400      	movs	r4, #0
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f7fa f995 	bl	80001d8 <__aeabi_dsub>
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	4659      	mov	r1, fp
 8005eba:	f7fa f98d 	bl	80001d8 <__aeabi_dsub>
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	f7fa f989 	bl	80001d8 <__aeabi_dsub>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4639      	mov	r1, r7
 8005ece:	e7d9      	b.n	8005e84 <__kernel_cos+0xf4>
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	490f      	ldr	r1, [pc, #60]	; (8005f10 <__kernel_cos+0x180>)
 8005ed4:	e7d8      	b.n	8005e88 <__kernel_cos+0xf8>
 8005ed6:	bf00      	nop
 8005ed8:	be8838d4 	.word	0xbe8838d4
 8005edc:	bda8fae9 	.word	0xbda8fae9
 8005ee0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ee4:	3e21ee9e 	.word	0x3e21ee9e
 8005ee8:	809c52ad 	.word	0x809c52ad
 8005eec:	3e927e4f 	.word	0x3e927e4f
 8005ef0:	19cb1590 	.word	0x19cb1590
 8005ef4:	3efa01a0 	.word	0x3efa01a0
 8005ef8:	16c15177 	.word	0x16c15177
 8005efc:	3f56c16c 	.word	0x3f56c16c
 8005f00:	5555554c 	.word	0x5555554c
 8005f04:	3fa55555 	.word	0x3fa55555
 8005f08:	3fe00000 	.word	0x3fe00000
 8005f0c:	3fd33332 	.word	0x3fd33332
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	3fe90000 	.word	0x3fe90000
 8005f18:	3fd20000 	.word	0x3fd20000
 8005f1c:	00000000 	.word	0x00000000

08005f20 <__kernel_rem_pio2>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	ed2d 8b02 	vpush	{d8}
 8005f28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005f2c:	1ed4      	subs	r4, r2, #3
 8005f2e:	9308      	str	r3, [sp, #32]
 8005f30:	9101      	str	r1, [sp, #4]
 8005f32:	4bc5      	ldr	r3, [pc, #788]	; (8006248 <__kernel_rem_pio2+0x328>)
 8005f34:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005f36:	9009      	str	r0, [sp, #36]	; 0x24
 8005f38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	9b08      	ldr	r3, [sp, #32]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	9307      	str	r3, [sp, #28]
 8005f44:	2318      	movs	r3, #24
 8005f46:	fb94 f4f3 	sdiv	r4, r4, r3
 8005f4a:	f06f 0317 	mvn.w	r3, #23
 8005f4e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005f52:	fb04 3303 	mla	r3, r4, r3, r3
 8005f56:	eb03 0a02 	add.w	sl, r3, r2
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	9a07      	ldr	r2, [sp, #28]
 8005f5e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006238 <__kernel_rem_pio2+0x318>
 8005f62:	eb03 0802 	add.w	r8, r3, r2
 8005f66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005f68:	1aa7      	subs	r7, r4, r2
 8005f6a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f6e:	ae22      	add	r6, sp, #136	; 0x88
 8005f70:	2500      	movs	r5, #0
 8005f72:	4545      	cmp	r5, r8
 8005f74:	dd13      	ble.n	8005f9e <__kernel_rem_pio2+0x7e>
 8005f76:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006238 <__kernel_rem_pio2+0x318>
 8005f7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005f7e:	2600      	movs	r6, #0
 8005f80:	9b04      	ldr	r3, [sp, #16]
 8005f82:	429e      	cmp	r6, r3
 8005f84:	dc32      	bgt.n	8005fec <__kernel_rem_pio2+0xcc>
 8005f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f88:	9302      	str	r3, [sp, #8]
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	199d      	adds	r5, r3, r6
 8005f8e:	ab22      	add	r3, sp, #136	; 0x88
 8005f90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005f94:	9306      	str	r3, [sp, #24]
 8005f96:	ec59 8b18 	vmov	r8, r9, d8
 8005f9a:	2700      	movs	r7, #0
 8005f9c:	e01f      	b.n	8005fde <__kernel_rem_pio2+0xbe>
 8005f9e:	42ef      	cmn	r7, r5
 8005fa0:	d407      	bmi.n	8005fb2 <__kernel_rem_pio2+0x92>
 8005fa2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005fa6:	f7fa fa65 	bl	8000474 <__aeabi_i2d>
 8005faa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005fae:	3501      	adds	r5, #1
 8005fb0:	e7df      	b.n	8005f72 <__kernel_rem_pio2+0x52>
 8005fb2:	ec51 0b18 	vmov	r0, r1, d8
 8005fb6:	e7f8      	b.n	8005faa <__kernel_rem_pio2+0x8a>
 8005fb8:	9906      	ldr	r1, [sp, #24]
 8005fba:	9d02      	ldr	r5, [sp, #8]
 8005fbc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005fc0:	9106      	str	r1, [sp, #24]
 8005fc2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005fc6:	9502      	str	r5, [sp, #8]
 8005fc8:	f7fa fabe 	bl	8000548 <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa f902 	bl	80001dc <__adddf3>
 8005fd8:	3701      	adds	r7, #1
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	9b07      	ldr	r3, [sp, #28]
 8005fe0:	429f      	cmp	r7, r3
 8005fe2:	dde9      	ble.n	8005fb8 <__kernel_rem_pio2+0x98>
 8005fe4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7c9      	b.n	8005f80 <__kernel_rem_pio2+0x60>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	aa0e      	add	r2, sp, #56	; 0x38
 8005ff0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8005ff6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005ff8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005ffc:	9c04      	ldr	r4, [sp, #16]
 8005ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006000:	ab9a      	add	r3, sp, #616	; 0x268
 8006002:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006006:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800600a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800600e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006012:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006016:	ab9a      	add	r3, sp, #616	; 0x268
 8006018:	445b      	add	r3, fp
 800601a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800601e:	2500      	movs	r5, #0
 8006020:	1b63      	subs	r3, r4, r5
 8006022:	2b00      	cmp	r3, #0
 8006024:	dc78      	bgt.n	8006118 <__kernel_rem_pio2+0x1f8>
 8006026:	4650      	mov	r0, sl
 8006028:	ec49 8b10 	vmov	d0, r8, r9
 800602c:	f000 fe30 	bl	8006c90 <scalbn>
 8006030:	ec57 6b10 	vmov	r6, r7, d0
 8006034:	2200      	movs	r2, #0
 8006036:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800603a:	ee10 0a10 	vmov	r0, s0
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa fa82 	bl	8000548 <__aeabi_dmul>
 8006044:	ec41 0b10 	vmov	d0, r0, r1
 8006048:	f000 fd9e 	bl	8006b88 <floor>
 800604c:	2200      	movs	r2, #0
 800604e:	ec51 0b10 	vmov	r0, r1, d0
 8006052:	4b7e      	ldr	r3, [pc, #504]	; (800624c <__kernel_rem_pio2+0x32c>)
 8006054:	f7fa fa78 	bl	8000548 <__aeabi_dmul>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4630      	mov	r0, r6
 800605e:	4639      	mov	r1, r7
 8006060:	f7fa f8ba 	bl	80001d8 <__aeabi_dsub>
 8006064:	460f      	mov	r7, r1
 8006066:	4606      	mov	r6, r0
 8006068:	f7fa fd08 	bl	8000a7c <__aeabi_d2iz>
 800606c:	9006      	str	r0, [sp, #24]
 800606e:	f7fa fa01 	bl	8000474 <__aeabi_i2d>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4630      	mov	r0, r6
 8006078:	4639      	mov	r1, r7
 800607a:	f7fa f8ad 	bl	80001d8 <__aeabi_dsub>
 800607e:	f1ba 0f00 	cmp.w	sl, #0
 8006082:	4606      	mov	r6, r0
 8006084:	460f      	mov	r7, r1
 8006086:	dd6c      	ble.n	8006162 <__kernel_rem_pio2+0x242>
 8006088:	1e62      	subs	r2, r4, #1
 800608a:	ab0e      	add	r3, sp, #56	; 0x38
 800608c:	f1ca 0118 	rsb	r1, sl, #24
 8006090:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006094:	9d06      	ldr	r5, [sp, #24]
 8006096:	fa40 f301 	asr.w	r3, r0, r1
 800609a:	441d      	add	r5, r3
 800609c:	408b      	lsls	r3, r1
 800609e:	1ac0      	subs	r0, r0, r3
 80060a0:	ab0e      	add	r3, sp, #56	; 0x38
 80060a2:	9506      	str	r5, [sp, #24]
 80060a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80060a8:	f1ca 0317 	rsb	r3, sl, #23
 80060ac:	fa40 f303 	asr.w	r3, r0, r3
 80060b0:	9302      	str	r3, [sp, #8]
 80060b2:	9b02      	ldr	r3, [sp, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dd62      	ble.n	800617e <__kernel_rem_pio2+0x25e>
 80060b8:	9b06      	ldr	r3, [sp, #24]
 80060ba:	2200      	movs	r2, #0
 80060bc:	3301      	adds	r3, #1
 80060be:	9306      	str	r3, [sp, #24]
 80060c0:	4615      	mov	r5, r2
 80060c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80060c6:	4294      	cmp	r4, r2
 80060c8:	f300 8095 	bgt.w	80061f6 <__kernel_rem_pio2+0x2d6>
 80060cc:	f1ba 0f00 	cmp.w	sl, #0
 80060d0:	dd07      	ble.n	80060e2 <__kernel_rem_pio2+0x1c2>
 80060d2:	f1ba 0f01 	cmp.w	sl, #1
 80060d6:	f000 80a2 	beq.w	800621e <__kernel_rem_pio2+0x2fe>
 80060da:	f1ba 0f02 	cmp.w	sl, #2
 80060de:	f000 80c1 	beq.w	8006264 <__kernel_rem_pio2+0x344>
 80060e2:	9b02      	ldr	r3, [sp, #8]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d14a      	bne.n	800617e <__kernel_rem_pio2+0x25e>
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	2000      	movs	r0, #0
 80060ee:	4958      	ldr	r1, [pc, #352]	; (8006250 <__kernel_rem_pio2+0x330>)
 80060f0:	f7fa f872 	bl	80001d8 <__aeabi_dsub>
 80060f4:	4606      	mov	r6, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	d040      	beq.n	800617e <__kernel_rem_pio2+0x25e>
 80060fc:	4650      	mov	r0, sl
 80060fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006240 <__kernel_rem_pio2+0x320>
 8006102:	f000 fdc5 	bl	8006c90 <scalbn>
 8006106:	4630      	mov	r0, r6
 8006108:	4639      	mov	r1, r7
 800610a:	ec53 2b10 	vmov	r2, r3, d0
 800610e:	f7fa f863 	bl	80001d8 <__aeabi_dsub>
 8006112:	4606      	mov	r6, r0
 8006114:	460f      	mov	r7, r1
 8006116:	e032      	b.n	800617e <__kernel_rem_pio2+0x25e>
 8006118:	2200      	movs	r2, #0
 800611a:	4b4e      	ldr	r3, [pc, #312]	; (8006254 <__kernel_rem_pio2+0x334>)
 800611c:	4640      	mov	r0, r8
 800611e:	4649      	mov	r1, r9
 8006120:	f7fa fa12 	bl	8000548 <__aeabi_dmul>
 8006124:	f7fa fcaa 	bl	8000a7c <__aeabi_d2iz>
 8006128:	f7fa f9a4 	bl	8000474 <__aeabi_i2d>
 800612c:	2200      	movs	r2, #0
 800612e:	4b4a      	ldr	r3, [pc, #296]	; (8006258 <__kernel_rem_pio2+0x338>)
 8006130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006134:	f7fa fa08 	bl	8000548 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4640      	mov	r0, r8
 800613e:	4649      	mov	r1, r9
 8006140:	f7fa f84a 	bl	80001d8 <__aeabi_dsub>
 8006144:	f7fa fc9a 	bl	8000a7c <__aeabi_d2iz>
 8006148:	ab0e      	add	r3, sp, #56	; 0x38
 800614a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800614e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006156:	f7fa f841 	bl	80001dc <__adddf3>
 800615a:	3501      	adds	r5, #1
 800615c:	4680      	mov	r8, r0
 800615e:	4689      	mov	r9, r1
 8006160:	e75e      	b.n	8006020 <__kernel_rem_pio2+0x100>
 8006162:	d105      	bne.n	8006170 <__kernel_rem_pio2+0x250>
 8006164:	1e63      	subs	r3, r4, #1
 8006166:	aa0e      	add	r2, sp, #56	; 0x38
 8006168:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800616c:	15c3      	asrs	r3, r0, #23
 800616e:	e79f      	b.n	80060b0 <__kernel_rem_pio2+0x190>
 8006170:	2200      	movs	r2, #0
 8006172:	4b3a      	ldr	r3, [pc, #232]	; (800625c <__kernel_rem_pio2+0x33c>)
 8006174:	f7fa fc6e 	bl	8000a54 <__aeabi_dcmpge>
 8006178:	2800      	cmp	r0, #0
 800617a:	d139      	bne.n	80061f0 <__kernel_rem_pio2+0x2d0>
 800617c:	9002      	str	r0, [sp, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	2300      	movs	r3, #0
 8006182:	4630      	mov	r0, r6
 8006184:	4639      	mov	r1, r7
 8006186:	f7fa fc47 	bl	8000a18 <__aeabi_dcmpeq>
 800618a:	2800      	cmp	r0, #0
 800618c:	f000 80c7 	beq.w	800631e <__kernel_rem_pio2+0x3fe>
 8006190:	1e65      	subs	r5, r4, #1
 8006192:	462b      	mov	r3, r5
 8006194:	2200      	movs	r2, #0
 8006196:	9904      	ldr	r1, [sp, #16]
 8006198:	428b      	cmp	r3, r1
 800619a:	da6a      	bge.n	8006272 <__kernel_rem_pio2+0x352>
 800619c:	2a00      	cmp	r2, #0
 800619e:	f000 8088 	beq.w	80062b2 <__kernel_rem_pio2+0x392>
 80061a2:	ab0e      	add	r3, sp, #56	; 0x38
 80061a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80061a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80b4 	beq.w	800631a <__kernel_rem_pio2+0x3fa>
 80061b2:	4650      	mov	r0, sl
 80061b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006240 <__kernel_rem_pio2+0x320>
 80061b8:	f000 fd6a 	bl	8006c90 <scalbn>
 80061bc:	00ec      	lsls	r4, r5, #3
 80061be:	ab72      	add	r3, sp, #456	; 0x1c8
 80061c0:	191e      	adds	r6, r3, r4
 80061c2:	ec59 8b10 	vmov	r8, r9, d0
 80061c6:	f106 0a08 	add.w	sl, r6, #8
 80061ca:	462f      	mov	r7, r5
 80061cc:	2f00      	cmp	r7, #0
 80061ce:	f280 80df 	bge.w	8006390 <__kernel_rem_pio2+0x470>
 80061d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006238 <__kernel_rem_pio2+0x318>
 80061d6:	f04f 0a00 	mov.w	sl, #0
 80061da:	eba5 030a 	sub.w	r3, r5, sl
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f2c0 810a 	blt.w	80063f8 <__kernel_rem_pio2+0x4d8>
 80061e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006260 <__kernel_rem_pio2+0x340>
 80061e8:	ec59 8b18 	vmov	r8, r9, d8
 80061ec:	2700      	movs	r7, #0
 80061ee:	e0f5      	b.n	80063dc <__kernel_rem_pio2+0x4bc>
 80061f0:	2302      	movs	r3, #2
 80061f2:	9302      	str	r3, [sp, #8]
 80061f4:	e760      	b.n	80060b8 <__kernel_rem_pio2+0x198>
 80061f6:	ab0e      	add	r3, sp, #56	; 0x38
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	b94d      	cbnz	r5, 8006212 <__kernel_rem_pio2+0x2f2>
 80061fe:	b12b      	cbz	r3, 800620c <__kernel_rem_pio2+0x2ec>
 8006200:	a80e      	add	r0, sp, #56	; 0x38
 8006202:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006206:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800620a:	2301      	movs	r3, #1
 800620c:	3201      	adds	r2, #1
 800620e:	461d      	mov	r5, r3
 8006210:	e759      	b.n	80060c6 <__kernel_rem_pio2+0x1a6>
 8006212:	a80e      	add	r0, sp, #56	; 0x38
 8006214:	1acb      	subs	r3, r1, r3
 8006216:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800621a:	462b      	mov	r3, r5
 800621c:	e7f6      	b.n	800620c <__kernel_rem_pio2+0x2ec>
 800621e:	1e62      	subs	r2, r4, #1
 8006220:	ab0e      	add	r3, sp, #56	; 0x38
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800622a:	a90e      	add	r1, sp, #56	; 0x38
 800622c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006230:	e757      	b.n	80060e2 <__kernel_rem_pio2+0x1c2>
 8006232:	bf00      	nop
 8006234:	f3af 8000 	nop.w
	...
 8006244:	3ff00000 	.word	0x3ff00000
 8006248:	08006fe8 	.word	0x08006fe8
 800624c:	40200000 	.word	0x40200000
 8006250:	3ff00000 	.word	0x3ff00000
 8006254:	3e700000 	.word	0x3e700000
 8006258:	41700000 	.word	0x41700000
 800625c:	3fe00000 	.word	0x3fe00000
 8006260:	08006fa8 	.word	0x08006fa8
 8006264:	1e62      	subs	r2, r4, #1
 8006266:	ab0e      	add	r3, sp, #56	; 0x38
 8006268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006270:	e7db      	b.n	800622a <__kernel_rem_pio2+0x30a>
 8006272:	a90e      	add	r1, sp, #56	; 0x38
 8006274:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006278:	3b01      	subs	r3, #1
 800627a:	430a      	orrs	r2, r1
 800627c:	e78b      	b.n	8006196 <__kernel_rem_pio2+0x276>
 800627e:	3301      	adds	r3, #1
 8006280:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006284:	2900      	cmp	r1, #0
 8006286:	d0fa      	beq.n	800627e <__kernel_rem_pio2+0x35e>
 8006288:	9a08      	ldr	r2, [sp, #32]
 800628a:	4422      	add	r2, r4
 800628c:	00d2      	lsls	r2, r2, #3
 800628e:	a922      	add	r1, sp, #136	; 0x88
 8006290:	18e3      	adds	r3, r4, r3
 8006292:	9206      	str	r2, [sp, #24]
 8006294:	440a      	add	r2, r1
 8006296:	9302      	str	r3, [sp, #8]
 8006298:	f10b 0108 	add.w	r1, fp, #8
 800629c:	f102 0308 	add.w	r3, r2, #8
 80062a0:	1c66      	adds	r6, r4, #1
 80062a2:	910a      	str	r1, [sp, #40]	; 0x28
 80062a4:	2500      	movs	r5, #0
 80062a6:	930d      	str	r3, [sp, #52]	; 0x34
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	42b3      	cmp	r3, r6
 80062ac:	da04      	bge.n	80062b8 <__kernel_rem_pio2+0x398>
 80062ae:	461c      	mov	r4, r3
 80062b0:	e6a6      	b.n	8006000 <__kernel_rem_pio2+0xe0>
 80062b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b4:	2301      	movs	r3, #1
 80062b6:	e7e3      	b.n	8006280 <__kernel_rem_pio2+0x360>
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	18ef      	adds	r7, r5, r3
 80062bc:	ab22      	add	r3, sp, #136	; 0x88
 80062be:	441f      	add	r7, r3
 80062c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80062c6:	f7fa f8d5 	bl	8000474 <__aeabi_i2d>
 80062ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062cc:	461c      	mov	r4, r3
 80062ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062d0:	e9c7 0100 	strd	r0, r1, [r7]
 80062d4:	eb03 0b05 	add.w	fp, r3, r5
 80062d8:	2700      	movs	r7, #0
 80062da:	f04f 0800 	mov.w	r8, #0
 80062de:	f04f 0900 	mov.w	r9, #0
 80062e2:	9b07      	ldr	r3, [sp, #28]
 80062e4:	429f      	cmp	r7, r3
 80062e6:	dd08      	ble.n	80062fa <__kernel_rem_pio2+0x3da>
 80062e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ea:	aa72      	add	r2, sp, #456	; 0x1c8
 80062ec:	18eb      	adds	r3, r5, r3
 80062ee:	4413      	add	r3, r2
 80062f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80062f4:	3601      	adds	r6, #1
 80062f6:	3508      	adds	r5, #8
 80062f8:	e7d6      	b.n	80062a8 <__kernel_rem_pio2+0x388>
 80062fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80062fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006302:	f7fa f921 	bl	8000548 <__aeabi_dmul>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	f7f9 ff65 	bl	80001dc <__adddf3>
 8006312:	3701      	adds	r7, #1
 8006314:	4680      	mov	r8, r0
 8006316:	4689      	mov	r9, r1
 8006318:	e7e3      	b.n	80062e2 <__kernel_rem_pio2+0x3c2>
 800631a:	3d01      	subs	r5, #1
 800631c:	e741      	b.n	80061a2 <__kernel_rem_pio2+0x282>
 800631e:	f1ca 0000 	rsb	r0, sl, #0
 8006322:	ec47 6b10 	vmov	d0, r6, r7
 8006326:	f000 fcb3 	bl	8006c90 <scalbn>
 800632a:	ec57 6b10 	vmov	r6, r7, d0
 800632e:	2200      	movs	r2, #0
 8006330:	4b99      	ldr	r3, [pc, #612]	; (8006598 <__kernel_rem_pio2+0x678>)
 8006332:	ee10 0a10 	vmov	r0, s0
 8006336:	4639      	mov	r1, r7
 8006338:	f7fa fb8c 	bl	8000a54 <__aeabi_dcmpge>
 800633c:	b1f8      	cbz	r0, 800637e <__kernel_rem_pio2+0x45e>
 800633e:	2200      	movs	r2, #0
 8006340:	4b96      	ldr	r3, [pc, #600]	; (800659c <__kernel_rem_pio2+0x67c>)
 8006342:	4630      	mov	r0, r6
 8006344:	4639      	mov	r1, r7
 8006346:	f7fa f8ff 	bl	8000548 <__aeabi_dmul>
 800634a:	f7fa fb97 	bl	8000a7c <__aeabi_d2iz>
 800634e:	4680      	mov	r8, r0
 8006350:	f7fa f890 	bl	8000474 <__aeabi_i2d>
 8006354:	2200      	movs	r2, #0
 8006356:	4b90      	ldr	r3, [pc, #576]	; (8006598 <__kernel_rem_pio2+0x678>)
 8006358:	f7fa f8f6 	bl	8000548 <__aeabi_dmul>
 800635c:	460b      	mov	r3, r1
 800635e:	4602      	mov	r2, r0
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	f7f9 ff38 	bl	80001d8 <__aeabi_dsub>
 8006368:	f7fa fb88 	bl	8000a7c <__aeabi_d2iz>
 800636c:	1c65      	adds	r5, r4, #1
 800636e:	ab0e      	add	r3, sp, #56	; 0x38
 8006370:	f10a 0a18 	add.w	sl, sl, #24
 8006374:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006378:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800637c:	e719      	b.n	80061b2 <__kernel_rem_pio2+0x292>
 800637e:	4630      	mov	r0, r6
 8006380:	4639      	mov	r1, r7
 8006382:	f7fa fb7b 	bl	8000a7c <__aeabi_d2iz>
 8006386:	ab0e      	add	r3, sp, #56	; 0x38
 8006388:	4625      	mov	r5, r4
 800638a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800638e:	e710      	b.n	80061b2 <__kernel_rem_pio2+0x292>
 8006390:	ab0e      	add	r3, sp, #56	; 0x38
 8006392:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006396:	f7fa f86d 	bl	8000474 <__aeabi_i2d>
 800639a:	4642      	mov	r2, r8
 800639c:	464b      	mov	r3, r9
 800639e:	f7fa f8d3 	bl	8000548 <__aeabi_dmul>
 80063a2:	2200      	movs	r2, #0
 80063a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80063a8:	4b7c      	ldr	r3, [pc, #496]	; (800659c <__kernel_rem_pio2+0x67c>)
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7fa f8cb 	bl	8000548 <__aeabi_dmul>
 80063b2:	3f01      	subs	r7, #1
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	e708      	b.n	80061cc <__kernel_rem_pio2+0x2ac>
 80063ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80063c6:	f7fa f8bf 	bl	8000548 <__aeabi_dmul>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7f9 ff03 	bl	80001dc <__adddf3>
 80063d6:	3701      	adds	r7, #1
 80063d8:	4680      	mov	r8, r0
 80063da:	4689      	mov	r9, r1
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	429f      	cmp	r7, r3
 80063e0:	dc01      	bgt.n	80063e6 <__kernel_rem_pio2+0x4c6>
 80063e2:	45ba      	cmp	sl, r7
 80063e4:	dae9      	bge.n	80063ba <__kernel_rem_pio2+0x49a>
 80063e6:	ab4a      	add	r3, sp, #296	; 0x128
 80063e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063ec:	e9c3 8900 	strd	r8, r9, [r3]
 80063f0:	f10a 0a01 	add.w	sl, sl, #1
 80063f4:	3e08      	subs	r6, #8
 80063f6:	e6f0      	b.n	80061da <__kernel_rem_pio2+0x2ba>
 80063f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d85b      	bhi.n	80064b6 <__kernel_rem_pio2+0x596>
 80063fe:	e8df f003 	tbb	[pc, r3]
 8006402:	264a      	.short	0x264a
 8006404:	0226      	.short	0x0226
 8006406:	ab9a      	add	r3, sp, #616	; 0x268
 8006408:	441c      	add	r4, r3
 800640a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800640e:	46a2      	mov	sl, r4
 8006410:	46ab      	mov	fp, r5
 8006412:	f1bb 0f00 	cmp.w	fp, #0
 8006416:	dc6c      	bgt.n	80064f2 <__kernel_rem_pio2+0x5d2>
 8006418:	46a2      	mov	sl, r4
 800641a:	46ab      	mov	fp, r5
 800641c:	f1bb 0f01 	cmp.w	fp, #1
 8006420:	f300 8086 	bgt.w	8006530 <__kernel_rem_pio2+0x610>
 8006424:	2000      	movs	r0, #0
 8006426:	2100      	movs	r1, #0
 8006428:	2d01      	cmp	r5, #1
 800642a:	f300 80a0 	bgt.w	800656e <__kernel_rem_pio2+0x64e>
 800642e:	9b02      	ldr	r3, [sp, #8]
 8006430:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006434:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006438:	2b00      	cmp	r3, #0
 800643a:	f040 809e 	bne.w	800657a <__kernel_rem_pio2+0x65a>
 800643e:	9b01      	ldr	r3, [sp, #4]
 8006440:	e9c3 7800 	strd	r7, r8, [r3]
 8006444:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006448:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800644c:	e033      	b.n	80064b6 <__kernel_rem_pio2+0x596>
 800644e:	3408      	adds	r4, #8
 8006450:	ab4a      	add	r3, sp, #296	; 0x128
 8006452:	441c      	add	r4, r3
 8006454:	462e      	mov	r6, r5
 8006456:	2000      	movs	r0, #0
 8006458:	2100      	movs	r1, #0
 800645a:	2e00      	cmp	r6, #0
 800645c:	da3a      	bge.n	80064d4 <__kernel_rem_pio2+0x5b4>
 800645e:	9b02      	ldr	r3, [sp, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d03d      	beq.n	80064e0 <__kernel_rem_pio2+0x5c0>
 8006464:	4602      	mov	r2, r0
 8006466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800646a:	9c01      	ldr	r4, [sp, #4]
 800646c:	e9c4 2300 	strd	r2, r3, [r4]
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006478:	f7f9 feae 	bl	80001d8 <__aeabi_dsub>
 800647c:	ae4c      	add	r6, sp, #304	; 0x130
 800647e:	2401      	movs	r4, #1
 8006480:	42a5      	cmp	r5, r4
 8006482:	da30      	bge.n	80064e6 <__kernel_rem_pio2+0x5c6>
 8006484:	9b02      	ldr	r3, [sp, #8]
 8006486:	b113      	cbz	r3, 800648e <__kernel_rem_pio2+0x56e>
 8006488:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800648c:	4619      	mov	r1, r3
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006494:	e00f      	b.n	80064b6 <__kernel_rem_pio2+0x596>
 8006496:	ab9a      	add	r3, sp, #616	; 0x268
 8006498:	441c      	add	r4, r3
 800649a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800649e:	2000      	movs	r0, #0
 80064a0:	2100      	movs	r1, #0
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	da10      	bge.n	80064c8 <__kernel_rem_pio2+0x5a8>
 80064a6:	9b02      	ldr	r3, [sp, #8]
 80064a8:	b113      	cbz	r3, 80064b0 <__kernel_rem_pio2+0x590>
 80064aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ae:	4619      	mov	r1, r3
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	e9c3 0100 	strd	r0, r1, [r3]
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	f003 0007 	and.w	r0, r3, #7
 80064bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80064c0:	ecbd 8b02 	vpop	{d8}
 80064c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064cc:	f7f9 fe86 	bl	80001dc <__adddf3>
 80064d0:	3d01      	subs	r5, #1
 80064d2:	e7e6      	b.n	80064a2 <__kernel_rem_pio2+0x582>
 80064d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064d8:	f7f9 fe80 	bl	80001dc <__adddf3>
 80064dc:	3e01      	subs	r6, #1
 80064de:	e7bc      	b.n	800645a <__kernel_rem_pio2+0x53a>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	e7c1      	b.n	800646a <__kernel_rem_pio2+0x54a>
 80064e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80064ea:	f7f9 fe77 	bl	80001dc <__adddf3>
 80064ee:	3401      	adds	r4, #1
 80064f0:	e7c6      	b.n	8006480 <__kernel_rem_pio2+0x560>
 80064f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80064f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80064fa:	4640      	mov	r0, r8
 80064fc:	ec53 2b17 	vmov	r2, r3, d7
 8006500:	4649      	mov	r1, r9
 8006502:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006506:	f7f9 fe69 	bl	80001dc <__adddf3>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4606      	mov	r6, r0
 8006510:	460f      	mov	r7, r1
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	f7f9 fe5f 	bl	80001d8 <__aeabi_dsub>
 800651a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651e:	f7f9 fe5d 	bl	80001dc <__adddf3>
 8006522:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006526:	e9ca 0100 	strd	r0, r1, [sl]
 800652a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800652e:	e770      	b.n	8006412 <__kernel_rem_pio2+0x4f2>
 8006530:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006534:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006538:	4630      	mov	r0, r6
 800653a:	ec53 2b17 	vmov	r2, r3, d7
 800653e:	4639      	mov	r1, r7
 8006540:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006544:	f7f9 fe4a 	bl	80001dc <__adddf3>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4680      	mov	r8, r0
 800654e:	4689      	mov	r9, r1
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7f9 fe40 	bl	80001d8 <__aeabi_dsub>
 8006558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800655c:	f7f9 fe3e 	bl	80001dc <__adddf3>
 8006560:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006564:	e9ca 0100 	strd	r0, r1, [sl]
 8006568:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800656c:	e756      	b.n	800641c <__kernel_rem_pio2+0x4fc>
 800656e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006572:	f7f9 fe33 	bl	80001dc <__adddf3>
 8006576:	3d01      	subs	r5, #1
 8006578:	e756      	b.n	8006428 <__kernel_rem_pio2+0x508>
 800657a:	9b01      	ldr	r3, [sp, #4]
 800657c:	9a01      	ldr	r2, [sp, #4]
 800657e:	601f      	str	r7, [r3, #0]
 8006580:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006584:	605c      	str	r4, [r3, #4]
 8006586:	609d      	str	r5, [r3, #8]
 8006588:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800658c:	60d3      	str	r3, [r2, #12]
 800658e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006592:	6110      	str	r0, [r2, #16]
 8006594:	6153      	str	r3, [r2, #20]
 8006596:	e78e      	b.n	80064b6 <__kernel_rem_pio2+0x596>
 8006598:	41700000 	.word	0x41700000
 800659c:	3e700000 	.word	0x3e700000

080065a0 <__kernel_sin>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	ec55 4b10 	vmov	r4, r5, d0
 80065a8:	b085      	sub	sp, #20
 80065aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80065ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80065b2:	ed8d 1b00 	vstr	d1, [sp]
 80065b6:	9002      	str	r0, [sp, #8]
 80065b8:	da06      	bge.n	80065c8 <__kernel_sin+0x28>
 80065ba:	ee10 0a10 	vmov	r0, s0
 80065be:	4629      	mov	r1, r5
 80065c0:	f7fa fa5c 	bl	8000a7c <__aeabi_d2iz>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d051      	beq.n	800666c <__kernel_sin+0xcc>
 80065c8:	4622      	mov	r2, r4
 80065ca:	462b      	mov	r3, r5
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7f9 ffba 	bl	8000548 <__aeabi_dmul>
 80065d4:	4682      	mov	sl, r0
 80065d6:	468b      	mov	fp, r1
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7f9 ffb2 	bl	8000548 <__aeabi_dmul>
 80065e4:	a341      	add	r3, pc, #260	; (adr r3, 80066ec <__kernel_sin+0x14c>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	4680      	mov	r8, r0
 80065ec:	4689      	mov	r9, r1
 80065ee:	4650      	mov	r0, sl
 80065f0:	4659      	mov	r1, fp
 80065f2:	f7f9 ffa9 	bl	8000548 <__aeabi_dmul>
 80065f6:	a33f      	add	r3, pc, #252	; (adr r3, 80066f4 <__kernel_sin+0x154>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f7f9 fdec 	bl	80001d8 <__aeabi_dsub>
 8006600:	4652      	mov	r2, sl
 8006602:	465b      	mov	r3, fp
 8006604:	f7f9 ffa0 	bl	8000548 <__aeabi_dmul>
 8006608:	a33c      	add	r3, pc, #240	; (adr r3, 80066fc <__kernel_sin+0x15c>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 fde5 	bl	80001dc <__adddf3>
 8006612:	4652      	mov	r2, sl
 8006614:	465b      	mov	r3, fp
 8006616:	f7f9 ff97 	bl	8000548 <__aeabi_dmul>
 800661a:	a33a      	add	r3, pc, #232	; (adr r3, 8006704 <__kernel_sin+0x164>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fdda 	bl	80001d8 <__aeabi_dsub>
 8006624:	4652      	mov	r2, sl
 8006626:	465b      	mov	r3, fp
 8006628:	f7f9 ff8e 	bl	8000548 <__aeabi_dmul>
 800662c:	a337      	add	r3, pc, #220	; (adr r3, 800670c <__kernel_sin+0x16c>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fdd3 	bl	80001dc <__adddf3>
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	4606      	mov	r6, r0
 800663a:	460f      	mov	r7, r1
 800663c:	b9db      	cbnz	r3, 8006676 <__kernel_sin+0xd6>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4650      	mov	r0, sl
 8006644:	4659      	mov	r1, fp
 8006646:	f7f9 ff7f 	bl	8000548 <__aeabi_dmul>
 800664a:	a325      	add	r3, pc, #148	; (adr r3, 80066e0 <__kernel_sin+0x140>)
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f7f9 fdc2 	bl	80001d8 <__aeabi_dsub>
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	f7f9 ff76 	bl	8000548 <__aeabi_dmul>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4620      	mov	r0, r4
 8006662:	4629      	mov	r1, r5
 8006664:	f7f9 fdba 	bl	80001dc <__adddf3>
 8006668:	4604      	mov	r4, r0
 800666a:	460d      	mov	r5, r1
 800666c:	ec45 4b10 	vmov	d0, r4, r5
 8006670:	b005      	add	sp, #20
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	2200      	movs	r2, #0
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <__kernel_sin+0x148>)
 800667a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800667e:	f7f9 ff63 	bl	8000548 <__aeabi_dmul>
 8006682:	4632      	mov	r2, r6
 8006684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006688:	463b      	mov	r3, r7
 800668a:	4640      	mov	r0, r8
 800668c:	4649      	mov	r1, r9
 800668e:	f7f9 ff5b 	bl	8000548 <__aeabi_dmul>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800669a:	f7f9 fd9d 	bl	80001d8 <__aeabi_dsub>
 800669e:	4652      	mov	r2, sl
 80066a0:	465b      	mov	r3, fp
 80066a2:	f7f9 ff51 	bl	8000548 <__aeabi_dmul>
 80066a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066aa:	f7f9 fd95 	bl	80001d8 <__aeabi_dsub>
 80066ae:	a30c      	add	r3, pc, #48	; (adr r3, 80066e0 <__kernel_sin+0x140>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	4606      	mov	r6, r0
 80066b6:	460f      	mov	r7, r1
 80066b8:	4640      	mov	r0, r8
 80066ba:	4649      	mov	r1, r9
 80066bc:	f7f9 ff44 	bl	8000548 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7f9 fd88 	bl	80001dc <__adddf3>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4620      	mov	r0, r4
 80066d2:	4629      	mov	r1, r5
 80066d4:	f7f9 fd80 	bl	80001d8 <__aeabi_dsub>
 80066d8:	e7c6      	b.n	8006668 <__kernel_sin+0xc8>
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w
 80066e0:	55555549 	.word	0x55555549
 80066e4:	3fc55555 	.word	0x3fc55555
 80066e8:	3fe00000 	.word	0x3fe00000
 80066ec:	5acfd57c 	.word	0x5acfd57c
 80066f0:	3de5d93a 	.word	0x3de5d93a
 80066f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80066f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80066fc:	57b1fe7d 	.word	0x57b1fe7d
 8006700:	3ec71de3 	.word	0x3ec71de3
 8006704:	19c161d5 	.word	0x19c161d5
 8006708:	3f2a01a0 	.word	0x3f2a01a0
 800670c:	1110f8a6 	.word	0x1110f8a6
 8006710:	3f811111 	.word	0x3f811111
 8006714:	00000000 	.word	0x00000000

08006718 <expm1>:
 8006718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	ec55 4b10 	vmov	r4, r5, d0
 8006720:	4ad5      	ldr	r2, [pc, #852]	; (8006a78 <expm1+0x360>)
 8006722:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006726:	4293      	cmp	r3, r2
 8006728:	462e      	mov	r6, r5
 800672a:	d94b      	bls.n	80067c4 <expm1+0xac>
 800672c:	4ad3      	ldr	r2, [pc, #844]	; (8006a7c <expm1+0x364>)
 800672e:	4293      	cmp	r3, r2
 8006730:	f240 820c 	bls.w	8006b4c <expm1+0x434>
 8006734:	4ad2      	ldr	r2, [pc, #840]	; (8006a80 <expm1+0x368>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d910      	bls.n	800675c <expm1+0x44>
 800673a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800673e:	4323      	orrs	r3, r4
 8006740:	ee10 2a10 	vmov	r2, s0
 8006744:	d005      	beq.n	8006752 <expm1+0x3a>
 8006746:	462b      	mov	r3, r5
 8006748:	4620      	mov	r0, r4
 800674a:	4629      	mov	r1, r5
 800674c:	f7f9 fd46 	bl	80001dc <__adddf3>
 8006750:	e016      	b.n	8006780 <expm1+0x68>
 8006752:	2d00      	cmp	r5, #0
 8006754:	da16      	bge.n	8006784 <expm1+0x6c>
 8006756:	2400      	movs	r4, #0
 8006758:	4dca      	ldr	r5, [pc, #808]	; (8006a84 <expm1+0x36c>)
 800675a:	e013      	b.n	8006784 <expm1+0x6c>
 800675c:	a3ae      	add	r3, pc, #696	; (adr r3, 8006a18 <expm1+0x300>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	ee10 0a10 	vmov	r0, s0
 8006766:	4629      	mov	r1, r5
 8006768:	f7fa f97e 	bl	8000a68 <__aeabi_dcmpgt>
 800676c:	2800      	cmp	r0, #0
 800676e:	f000 81ed 	beq.w	8006b4c <expm1+0x434>
 8006772:	a3ab      	add	r3, pc, #684	; (adr r3, 8006a20 <expm1+0x308>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	4610      	mov	r0, r2
 800677a:	4619      	mov	r1, r3
 800677c:	f7f9 fee4 	bl	8000548 <__aeabi_dmul>
 8006780:	4604      	mov	r4, r0
 8006782:	460d      	mov	r5, r1
 8006784:	ec45 4b10 	vmov	d0, r4, r5
 8006788:	b004      	add	sp, #16
 800678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006a28 <expm1+0x310>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	f7f9 fd20 	bl	80001dc <__adddf3>
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	f7fa f944 	bl	8000a2c <__aeabi_dcmplt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d1d6      	bne.n	8006756 <expm1+0x3e>
 80067a8:	a3a1      	add	r3, pc, #644	; (adr r3, 8006a30 <expm1+0x318>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7f9 fec9 	bl	8000548 <__aeabi_dmul>
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	f04f 0600 	mov.w	r6, #0
 80067bc:	f2c0 80b0 	blt.w	8006920 <expm1+0x208>
 80067c0:	4fb1      	ldr	r7, [pc, #708]	; (8006a88 <expm1+0x370>)
 80067c2:	e0ae      	b.n	8006922 <expm1+0x20a>
 80067c4:	4ab1      	ldr	r2, [pc, #708]	; (8006a8c <expm1+0x374>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	f240 80cf 	bls.w	800696a <expm1+0x252>
 80067cc:	4ab0      	ldr	r2, [pc, #704]	; (8006a90 <expm1+0x378>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d8ea      	bhi.n	80067a8 <expm1+0x90>
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	a398      	add	r3, pc, #608	; (adr r3, 8006a38 <expm1+0x320>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	ee10 0a10 	vmov	r0, s0
 80067de:	4629      	mov	r1, r5
 80067e0:	f2c0 8094 	blt.w	800690c <expm1+0x1f4>
 80067e4:	f7f9 fcf8 	bl	80001d8 <__aeabi_dsub>
 80067e8:	a795      	add	r7, pc, #596	; (adr r7, 8006a40 <expm1+0x328>)
 80067ea:	e9d7 6700 	ldrd	r6, r7, [r7]
 80067ee:	4680      	mov	r8, r0
 80067f0:	4689      	mov	r9, r1
 80067f2:	f04f 0a01 	mov.w	sl, #1
 80067f6:	4632      	mov	r2, r6
 80067f8:	463b      	mov	r3, r7
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	f7f9 fceb 	bl	80001d8 <__aeabi_dsub>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
 800680a:	4640      	mov	r0, r8
 800680c:	4649      	mov	r1, r9
 800680e:	f7f9 fce3 	bl	80001d8 <__aeabi_dsub>
 8006812:	4632      	mov	r2, r6
 8006814:	463b      	mov	r3, r7
 8006816:	f7f9 fcdf 	bl	80001d8 <__aeabi_dsub>
 800681a:	e9cd 0100 	strd	r0, r1, [sp]
 800681e:	2200      	movs	r2, #0
 8006820:	4b99      	ldr	r3, [pc, #612]	; (8006a88 <expm1+0x370>)
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7f9 fe8f 	bl	8000548 <__aeabi_dmul>
 800682a:	4606      	mov	r6, r0
 800682c:	460f      	mov	r7, r1
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4620      	mov	r0, r4
 8006834:	4629      	mov	r1, r5
 8006836:	f7f9 fe87 	bl	8000548 <__aeabi_dmul>
 800683a:	a383      	add	r3, pc, #524	; (adr r3, 8006a48 <expm1+0x330>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	4680      	mov	r8, r0
 8006842:	4689      	mov	r9, r1
 8006844:	f7f9 fe80 	bl	8000548 <__aeabi_dmul>
 8006848:	a381      	add	r3, pc, #516	; (adr r3, 8006a50 <expm1+0x338>)
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f7f9 fcc5 	bl	80001dc <__adddf3>
 8006852:	4642      	mov	r2, r8
 8006854:	464b      	mov	r3, r9
 8006856:	f7f9 fe77 	bl	8000548 <__aeabi_dmul>
 800685a:	a37f      	add	r3, pc, #508	; (adr r3, 8006a58 <expm1+0x340>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fcba 	bl	80001d8 <__aeabi_dsub>
 8006864:	4642      	mov	r2, r8
 8006866:	464b      	mov	r3, r9
 8006868:	f7f9 fe6e 	bl	8000548 <__aeabi_dmul>
 800686c:	a37c      	add	r3, pc, #496	; (adr r3, 8006a60 <expm1+0x348>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fcb3 	bl	80001dc <__adddf3>
 8006876:	4642      	mov	r2, r8
 8006878:	464b      	mov	r3, r9
 800687a:	f7f9 fe65 	bl	8000548 <__aeabi_dmul>
 800687e:	a37a      	add	r3, pc, #488	; (adr r3, 8006a68 <expm1+0x350>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fca8 	bl	80001d8 <__aeabi_dsub>
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	f7f9 fe5c 	bl	8000548 <__aeabi_dmul>
 8006890:	2200      	movs	r2, #0
 8006892:	4b80      	ldr	r3, [pc, #512]	; (8006a94 <expm1+0x37c>)
 8006894:	f7f9 fca2 	bl	80001dc <__adddf3>
 8006898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4630      	mov	r0, r6
 80068a2:	4639      	mov	r1, r7
 80068a4:	f7f9 fe50 	bl	8000548 <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	2000      	movs	r0, #0
 80068ae:	497a      	ldr	r1, [pc, #488]	; (8006a98 <expm1+0x380>)
 80068b0:	f7f9 fc92 	bl	80001d8 <__aeabi_dsub>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4606      	mov	r6, r0
 80068ba:	460f      	mov	r7, r1
 80068bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c0:	f7f9 fc8a 	bl	80001d8 <__aeabi_dsub>
 80068c4:	4632      	mov	r2, r6
 80068c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ca:	463b      	mov	r3, r7
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7f9 fe3a 	bl	8000548 <__aeabi_dmul>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	2000      	movs	r0, #0
 80068da:	4970      	ldr	r1, [pc, #448]	; (8006a9c <expm1+0x384>)
 80068dc:	f7f9 fc7c 	bl	80001d8 <__aeabi_dsub>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e8:	f7f9 ff58 	bl	800079c <__aeabi_ddiv>
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	f7f9 fe2a 	bl	8000548 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	f1ba 0f00 	cmp.w	sl, #0
 80068fc:	d14e      	bne.n	800699c <expm1+0x284>
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f7f9 fe21 	bl	8000548 <__aeabi_dmul>
 8006906:	4642      	mov	r2, r8
 8006908:	464b      	mov	r3, r9
 800690a:	e03b      	b.n	8006984 <expm1+0x26c>
 800690c:	f7f9 fc66 	bl	80001dc <__adddf3>
 8006910:	f04f 3aff 	mov.w	sl, #4294967295
 8006914:	4680      	mov	r8, r0
 8006916:	4689      	mov	r9, r1
 8006918:	a755      	add	r7, pc, #340	; (adr r7, 8006a70 <expm1+0x358>)
 800691a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800691e:	e76a      	b.n	80067f6 <expm1+0xde>
 8006920:	4f5f      	ldr	r7, [pc, #380]	; (8006aa0 <expm1+0x388>)
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fc57 	bl	80001dc <__adddf3>
 800692e:	f7fa f8a5 	bl	8000a7c <__aeabi_d2iz>
 8006932:	4682      	mov	sl, r0
 8006934:	f7f9 fd9e 	bl	8000474 <__aeabi_i2d>
 8006938:	a33f      	add	r3, pc, #252	; (adr r3, 8006a38 <expm1+0x320>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	4606      	mov	r6, r0
 8006940:	460f      	mov	r7, r1
 8006942:	f7f9 fe01 	bl	8000548 <__aeabi_dmul>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4620      	mov	r0, r4
 800694c:	4629      	mov	r1, r5
 800694e:	f7f9 fc43 	bl	80001d8 <__aeabi_dsub>
 8006952:	a33b      	add	r3, pc, #236	; (adr r3, 8006a40 <expm1+0x328>)
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	4680      	mov	r8, r0
 800695a:	4689      	mov	r9, r1
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	f7f9 fdf2 	bl	8000548 <__aeabi_dmul>
 8006964:	4606      	mov	r6, r0
 8006966:	460f      	mov	r7, r1
 8006968:	e745      	b.n	80067f6 <expm1+0xde>
 800696a:	4a4e      	ldr	r2, [pc, #312]	; (8006aa4 <expm1+0x38c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d812      	bhi.n	8006996 <expm1+0x27e>
 8006970:	a32b      	add	r3, pc, #172	; (adr r3, 8006a20 <expm1+0x308>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	ee10 0a10 	vmov	r0, s0
 800697a:	4629      	mov	r1, r5
 800697c:	f7f9 fc2e 	bl	80001dc <__adddf3>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	f7f9 fc28 	bl	80001d8 <__aeabi_dsub>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fc22 	bl	80001d8 <__aeabi_dsub>
 8006994:	e6f4      	b.n	8006780 <expm1+0x68>
 8006996:	f04f 0a00 	mov.w	sl, #0
 800699a:	e740      	b.n	800681e <expm1+0x106>
 800699c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a0:	f7f9 fc1a 	bl	80001d8 <__aeabi_dsub>
 80069a4:	4622      	mov	r2, r4
 80069a6:	462b      	mov	r3, r5
 80069a8:	f7f9 fdce 	bl	8000548 <__aeabi_dmul>
 80069ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069b0:	f7f9 fc12 	bl	80001d8 <__aeabi_dsub>
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	f7f9 fc0e 	bl	80001d8 <__aeabi_dsub>
 80069bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80069c0:	4606      	mov	r6, r0
 80069c2:	460f      	mov	r7, r1
 80069c4:	d10c      	bne.n	80069e0 <expm1+0x2c8>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4620      	mov	r0, r4
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7f9 fc03 	bl	80001d8 <__aeabi_dsub>
 80069d2:	2200      	movs	r2, #0
 80069d4:	4b2c      	ldr	r3, [pc, #176]	; (8006a88 <expm1+0x370>)
 80069d6:	f7f9 fdb7 	bl	8000548 <__aeabi_dmul>
 80069da:	2200      	movs	r2, #0
 80069dc:	4b2a      	ldr	r3, [pc, #168]	; (8006a88 <expm1+0x370>)
 80069de:	e7d7      	b.n	8006990 <expm1+0x278>
 80069e0:	f1ba 0f01 	cmp.w	sl, #1
 80069e4:	d16f      	bne.n	8006ac6 <expm1+0x3ae>
 80069e6:	2200      	movs	r2, #0
 80069e8:	4b2f      	ldr	r3, [pc, #188]	; (8006aa8 <expm1+0x390>)
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7fa f81d 	bl	8000a2c <__aeabi_dcmplt>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d05a      	beq.n	8006aac <expm1+0x394>
 80069f6:	2200      	movs	r2, #0
 80069f8:	4b23      	ldr	r3, [pc, #140]	; (8006a88 <expm1+0x370>)
 80069fa:	4620      	mov	r0, r4
 80069fc:	4629      	mov	r1, r5
 80069fe:	f7f9 fbed 	bl	80001dc <__adddf3>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7f9 fbe5 	bl	80001d8 <__aeabi_dsub>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8006a14:	e6b2      	b.n	800677c <expm1+0x64>
 8006a16:	bf00      	nop
 8006a18:	fefa39ef 	.word	0xfefa39ef
 8006a1c:	40862e42 	.word	0x40862e42
 8006a20:	8800759c 	.word	0x8800759c
 8006a24:	7e37e43c 	.word	0x7e37e43c
 8006a28:	c2f8f359 	.word	0xc2f8f359
 8006a2c:	01a56e1f 	.word	0x01a56e1f
 8006a30:	652b82fe 	.word	0x652b82fe
 8006a34:	3ff71547 	.word	0x3ff71547
 8006a38:	fee00000 	.word	0xfee00000
 8006a3c:	3fe62e42 	.word	0x3fe62e42
 8006a40:	35793c76 	.word	0x35793c76
 8006a44:	3dea39ef 	.word	0x3dea39ef
 8006a48:	6e09c32d 	.word	0x6e09c32d
 8006a4c:	be8afdb7 	.word	0xbe8afdb7
 8006a50:	86e65239 	.word	0x86e65239
 8006a54:	3ed0cfca 	.word	0x3ed0cfca
 8006a58:	9eaadbb7 	.word	0x9eaadbb7
 8006a5c:	3f14ce19 	.word	0x3f14ce19
 8006a60:	19fe5585 	.word	0x19fe5585
 8006a64:	3f5a01a0 	.word	0x3f5a01a0
 8006a68:	111110f4 	.word	0x111110f4
 8006a6c:	3fa11111 	.word	0x3fa11111
 8006a70:	35793c76 	.word	0x35793c76
 8006a74:	bdea39ef 	.word	0xbdea39ef
 8006a78:	40436879 	.word	0x40436879
 8006a7c:	40862e41 	.word	0x40862e41
 8006a80:	7fefffff 	.word	0x7fefffff
 8006a84:	bff00000 	.word	0xbff00000
 8006a88:	3fe00000 	.word	0x3fe00000
 8006a8c:	3fd62e42 	.word	0x3fd62e42
 8006a90:	3ff0a2b1 	.word	0x3ff0a2b1
 8006a94:	3ff00000 	.word	0x3ff00000
 8006a98:	40080000 	.word	0x40080000
 8006a9c:	40180000 	.word	0x40180000
 8006aa0:	bfe00000 	.word	0xbfe00000
 8006aa4:	3c8fffff 	.word	0x3c8fffff
 8006aa8:	bfd00000 	.word	0xbfd00000
 8006aac:	4632      	mov	r2, r6
 8006aae:	463b      	mov	r3, r7
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7f9 fb90 	bl	80001d8 <__aeabi_dsub>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	f7f9 fb8e 	bl	80001dc <__adddf3>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <expm1+0x458>)
 8006ac4:	e642      	b.n	800674c <expm1+0x34>
 8006ac6:	f10a 0301 	add.w	r3, sl, #1
 8006aca:	2b39      	cmp	r3, #57	; 0x39
 8006acc:	ea4f 560a 	mov.w	r6, sl, lsl #20
 8006ad0:	d90e      	bls.n	8006af0 <expm1+0x3d8>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	f7f9 fb7f 	bl	80001d8 <__aeabi_dsub>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4923      	ldr	r1, [pc, #140]	; (8006b70 <expm1+0x458>)
 8006ae2:	f7f9 fb79 	bl	80001d8 <__aeabi_dsub>
 8006ae6:	1873      	adds	r3, r6, r1
 8006ae8:	4619      	mov	r1, r3
 8006aea:	2200      	movs	r2, #0
 8006aec:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <expm1+0x458>)
 8006aee:	e74f      	b.n	8006990 <expm1+0x278>
 8006af0:	f1ba 0f13 	cmp.w	sl, #19
 8006af4:	dc16      	bgt.n	8006b24 <expm1+0x40c>
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 8006afe:	f7f9 fb6b 	bl	80001d8 <__aeabi_dsub>
 8006b02:	fa47 fa0a 	asr.w	sl, r7, sl
 8006b06:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 8006b0a:	f04f 0800 	mov.w	r8, #0
 8006b0e:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4640      	mov	r0, r8
 8006b18:	4649      	mov	r1, r9
 8006b1a:	f7f9 fb5d 	bl	80001d8 <__aeabi_dsub>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	1875      	adds	r5, r6, r1
 8006b22:	e62f      	b.n	8006784 <expm1+0x6c>
 8006b24:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 8006b28:	f10a 0a03 	add.w	sl, sl, #3
 8006b2c:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8006b30:	2200      	movs	r2, #0
 8006b32:	f7f9 fb53 	bl	80001dc <__adddf3>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fb4b 	bl	80001d8 <__aeabi_dsub>
 8006b42:	2200      	movs	r2, #0
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <expm1+0x458>)
 8006b46:	f7f9 fb49 	bl	80001dc <__adddf3>
 8006b4a:	e7e8      	b.n	8006b1e <expm1+0x406>
 8006b4c:	2e00      	cmp	r6, #0
 8006b4e:	f6ff ae1e 	blt.w	800678e <expm1+0x76>
 8006b52:	a305      	add	r3, pc, #20	; (adr r3, 8006b68 <expm1+0x450>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	4620      	mov	r0, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f7f9 fcf4 	bl	8000548 <__aeabi_dmul>
 8006b60:	2600      	movs	r6, #0
 8006b62:	e62d      	b.n	80067c0 <expm1+0xa8>
 8006b64:	f3af 8000 	nop.w
 8006b68:	652b82fe 	.word	0x652b82fe
 8006b6c:	3ff71547 	.word	0x3ff71547
 8006b70:	3ff00000 	.word	0x3ff00000

08006b74 <fabs>:
 8006b74:	ec51 0b10 	vmov	r0, r1, d0
 8006b78:	ee10 2a10 	vmov	r2, s0
 8006b7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b80:	ec43 2b10 	vmov	d0, r2, r3
 8006b84:	4770      	bx	lr
	...

08006b88 <floor>:
 8006b88:	ec51 0b10 	vmov	r0, r1, d0
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006b94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006b98:	2e13      	cmp	r6, #19
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	ee10 5a10 	vmov	r5, s0
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	dc34      	bgt.n	8006c0e <floor+0x86>
 8006ba4:	2e00      	cmp	r6, #0
 8006ba6:	da16      	bge.n	8006bd6 <floor+0x4e>
 8006ba8:	a335      	add	r3, pc, #212	; (adr r3, 8006c80 <floor+0xf8>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 fb15 	bl	80001dc <__adddf3>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f7f9 ff57 	bl	8000a68 <__aeabi_dcmpgt>
 8006bba:	b148      	cbz	r0, 8006bd0 <floor+0x48>
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	da59      	bge.n	8006c74 <floor+0xec>
 8006bc0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006bc4:	4a30      	ldr	r2, [pc, #192]	; (8006c88 <floor+0x100>)
 8006bc6:	432b      	orrs	r3, r5
 8006bc8:	2500      	movs	r5, #0
 8006bca:	42ab      	cmp	r3, r5
 8006bcc:	bf18      	it	ne
 8006bce:	4614      	movne	r4, r2
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	e025      	b.n	8006c22 <floor+0x9a>
 8006bd6:	4f2d      	ldr	r7, [pc, #180]	; (8006c8c <floor+0x104>)
 8006bd8:	4137      	asrs	r7, r6
 8006bda:	ea01 0307 	and.w	r3, r1, r7
 8006bde:	4303      	orrs	r3, r0
 8006be0:	d01f      	beq.n	8006c22 <floor+0x9a>
 8006be2:	a327      	add	r3, pc, #156	; (adr r3, 8006c80 <floor+0xf8>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 faf8 	bl	80001dc <__adddf3>
 8006bec:	2200      	movs	r2, #0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f7f9 ff3a 	bl	8000a68 <__aeabi_dcmpgt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d0eb      	beq.n	8006bd0 <floor+0x48>
 8006bf8:	2c00      	cmp	r4, #0
 8006bfa:	bfbe      	ittt	lt
 8006bfc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006c00:	fa43 f606 	asrlt.w	r6, r3, r6
 8006c04:	19a4      	addlt	r4, r4, r6
 8006c06:	ea24 0407 	bic.w	r4, r4, r7
 8006c0a:	2500      	movs	r5, #0
 8006c0c:	e7e0      	b.n	8006bd0 <floor+0x48>
 8006c0e:	2e33      	cmp	r6, #51	; 0x33
 8006c10:	dd0b      	ble.n	8006c2a <floor+0xa2>
 8006c12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006c16:	d104      	bne.n	8006c22 <floor+0x9a>
 8006c18:	ee10 2a10 	vmov	r2, s0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	f7f9 fadd 	bl	80001dc <__adddf3>
 8006c22:	ec41 0b10 	vmov	d0, r0, r1
 8006c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c2a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c32:	fa23 f707 	lsr.w	r7, r3, r7
 8006c36:	4207      	tst	r7, r0
 8006c38:	d0f3      	beq.n	8006c22 <floor+0x9a>
 8006c3a:	a311      	add	r3, pc, #68	; (adr r3, 8006c80 <floor+0xf8>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 facc 	bl	80001dc <__adddf3>
 8006c44:	2200      	movs	r2, #0
 8006c46:	2300      	movs	r3, #0
 8006c48:	f7f9 ff0e 	bl	8000a68 <__aeabi_dcmpgt>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d0bf      	beq.n	8006bd0 <floor+0x48>
 8006c50:	2c00      	cmp	r4, #0
 8006c52:	da02      	bge.n	8006c5a <floor+0xd2>
 8006c54:	2e14      	cmp	r6, #20
 8006c56:	d103      	bne.n	8006c60 <floor+0xd8>
 8006c58:	3401      	adds	r4, #1
 8006c5a:	ea25 0507 	bic.w	r5, r5, r7
 8006c5e:	e7b7      	b.n	8006bd0 <floor+0x48>
 8006c60:	2301      	movs	r3, #1
 8006c62:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006c66:	fa03 f606 	lsl.w	r6, r3, r6
 8006c6a:	4435      	add	r5, r6
 8006c6c:	4545      	cmp	r5, r8
 8006c6e:	bf38      	it	cc
 8006c70:	18e4      	addcc	r4, r4, r3
 8006c72:	e7f2      	b.n	8006c5a <floor+0xd2>
 8006c74:	2500      	movs	r5, #0
 8006c76:	462c      	mov	r4, r5
 8006c78:	e7aa      	b.n	8006bd0 <floor+0x48>
 8006c7a:	bf00      	nop
 8006c7c:	f3af 8000 	nop.w
 8006c80:	8800759c 	.word	0x8800759c
 8006c84:	7e37e43c 	.word	0x7e37e43c
 8006c88:	bff00000 	.word	0xbff00000
 8006c8c:	000fffff 	.word	0x000fffff

08006c90 <scalbn>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	ec55 4b10 	vmov	r4, r5, d0
 8006c96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	b9aa      	cbnz	r2, 8006ccc <scalbn+0x3c>
 8006ca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ca4:	4323      	orrs	r3, r4
 8006ca6:	d03b      	beq.n	8006d20 <scalbn+0x90>
 8006ca8:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <scalbn+0xe0>)
 8006caa:	4629      	mov	r1, r5
 8006cac:	2200      	movs	r2, #0
 8006cae:	ee10 0a10 	vmov	r0, s0
 8006cb2:	f7f9 fc49 	bl	8000548 <__aeabi_dmul>
 8006cb6:	4b2f      	ldr	r3, [pc, #188]	; (8006d74 <scalbn+0xe4>)
 8006cb8:	429e      	cmp	r6, r3
 8006cba:	4604      	mov	r4, r0
 8006cbc:	460d      	mov	r5, r1
 8006cbe:	da12      	bge.n	8006ce6 <scalbn+0x56>
 8006cc0:	a327      	add	r3, pc, #156	; (adr r3, 8006d60 <scalbn+0xd0>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fc3f 	bl	8000548 <__aeabi_dmul>
 8006cca:	e009      	b.n	8006ce0 <scalbn+0x50>
 8006ccc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006cd0:	428a      	cmp	r2, r1
 8006cd2:	d10c      	bne.n	8006cee <scalbn+0x5e>
 8006cd4:	ee10 2a10 	vmov	r2, s0
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fa7e 	bl	80001dc <__adddf3>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	e01c      	b.n	8006d20 <scalbn+0x90>
 8006ce6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006cea:	460b      	mov	r3, r1
 8006cec:	3a36      	subs	r2, #54	; 0x36
 8006cee:	4432      	add	r2, r6
 8006cf0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006cf4:	428a      	cmp	r2, r1
 8006cf6:	dd0b      	ble.n	8006d10 <scalbn+0x80>
 8006cf8:	ec45 4b11 	vmov	d1, r4, r5
 8006cfc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006d68 <scalbn+0xd8>
 8006d00:	f000 f83c 	bl	8006d7c <copysign>
 8006d04:	a318      	add	r3, pc, #96	; (adr r3, 8006d68 <scalbn+0xd8>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	ec51 0b10 	vmov	r0, r1, d0
 8006d0e:	e7da      	b.n	8006cc6 <scalbn+0x36>
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	dd08      	ble.n	8006d26 <scalbn+0x96>
 8006d14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d20:	ec45 4b10 	vmov	d0, r4, r5
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d2a:	da0d      	bge.n	8006d48 <scalbn+0xb8>
 8006d2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d30:	429e      	cmp	r6, r3
 8006d32:	ec45 4b11 	vmov	d1, r4, r5
 8006d36:	dce1      	bgt.n	8006cfc <scalbn+0x6c>
 8006d38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006d60 <scalbn+0xd0>
 8006d3c:	f000 f81e 	bl	8006d7c <copysign>
 8006d40:	a307      	add	r3, pc, #28	; (adr r3, 8006d60 <scalbn+0xd0>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	e7e0      	b.n	8006d0a <scalbn+0x7a>
 8006d48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d4c:	3236      	adds	r2, #54	; 0x36
 8006d4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <scalbn+0xe8>)
 8006d5e:	e7b2      	b.n	8006cc6 <scalbn+0x36>
 8006d60:	c2f8f359 	.word	0xc2f8f359
 8006d64:	01a56e1f 	.word	0x01a56e1f
 8006d68:	8800759c 	.word	0x8800759c
 8006d6c:	7e37e43c 	.word	0x7e37e43c
 8006d70:	43500000 	.word	0x43500000
 8006d74:	ffff3cb0 	.word	0xffff3cb0
 8006d78:	3c900000 	.word	0x3c900000

08006d7c <copysign>:
 8006d7c:	ec51 0b10 	vmov	r0, r1, d0
 8006d80:	ee11 0a90 	vmov	r0, s3
 8006d84:	ee10 2a10 	vmov	r2, s0
 8006d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006d8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006d90:	ea41 0300 	orr.w	r3, r1, r0
 8006d94:	ec43 2b10 	vmov	d0, r2, r3
 8006d98:	4770      	bx	lr
	...

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
