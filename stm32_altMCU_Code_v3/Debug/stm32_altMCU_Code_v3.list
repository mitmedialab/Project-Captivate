
stm32_altMCU_Code_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006874  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a8c  08006a8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006a8c  08006a8c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a8c  08006a8c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c4  20000010  08006aa4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024d4  08006aa4  000224d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002adec  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e4e  00000000  00000000  0004ae2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017d62  00000000  00000000  0004fc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001990  00000000  00000000  000679e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019f0  00000000  00000000  00069370  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00016811  00000000  00000000  0006ad60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018ab1  00000000  00000000  00081571  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00082805  00000000  00000000  0009a022  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011c827  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048bc  00000000  00000000  0011c8a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069ec 	.word	0x080069ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080069ec 	.word	0x080069ec

080001d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d0:	b500      	push	{lr}
 80001d2:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80001d4:	2300      	movs	r3, #0
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	9303      	str	r3, [sp, #12]
 80001de:	9304      	str	r3, [sp, #16]
 80001e0:	9305      	str	r3, [sp, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80001e2:	4826      	ldr	r0, [pc, #152]	; (800027c <MX_ADC1_Init+0xac>)
 80001e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001e8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80001ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80001ee:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f2:	2201      	movs	r2, #1
 80001f4:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001f6:	7642      	strb	r2, [r0, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001f8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80001fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000200:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000202:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000206:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000208:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 800020a:	2103      	movs	r1, #3
 800020c:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800020e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000212:	2208      	movs	r2, #8
 8000214:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000216:	7603      	strb	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000218:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800021a:	f001 f851 	bl	80012c0 <HAL_ADC_Init>
 800021e:	bb08      	cbnz	r0, 8000264 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000220:	2301      	movs	r3, #1
 8000222:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000224:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000226:	2300      	movs	r3, #0
 8000228:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800022a:	2205      	movs	r2, #5
 800022c:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800022e:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000230:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000232:	4669      	mov	r1, sp
 8000234:	4811      	ldr	r0, [pc, #68]	; (800027c <MX_ADC1_Init+0xac>)
 8000236:	f001 fa01 	bl	800163c <HAL_ADC_ConfigChannel>
 800023a:	b9b0      	cbnz	r0, 800026a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800023c:	2302      	movs	r3, #2
 800023e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000240:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000242:	4669      	mov	r1, sp
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <MX_ADC1_Init+0xac>)
 8000246:	f001 f9f9 	bl	800163c <HAL_ADC_ConfigChannel>
 800024a:	b988      	cbnz	r0, 8000270 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800024c:	230b      	movs	r3, #11
 800024e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000250:	2303      	movs	r3, #3
 8000252:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000254:	4669      	mov	r1, sp
 8000256:	4809      	ldr	r0, [pc, #36]	; (800027c <MX_ADC1_Init+0xac>)
 8000258:	f001 f9f0 	bl	800163c <HAL_ADC_ConfigChannel>
 800025c:	b958      	cbnz	r0, 8000276 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
  }

}
 800025e:	b007      	add	sp, #28
 8000260:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000264:	f000 fabe 	bl	80007e4 <Error_Handler>
 8000268:	e7da      	b.n	8000220 <MX_ADC1_Init+0x50>
    Error_Handler();
 800026a:	f000 fabb 	bl	80007e4 <Error_Handler>
 800026e:	e7e5      	b.n	800023c <MX_ADC1_Init+0x6c>
    Error_Handler();
 8000270:	f000 fab8 	bl	80007e4 <Error_Handler>
 8000274:	e7ea      	b.n	800024c <MX_ADC1_Init+0x7c>
    Error_Handler();
 8000276:	f000 fab5 	bl	80007e4 <Error_Handler>
}
 800027a:	e7f0      	b.n	800025e <MX_ADC1_Init+0x8e>
 800027c:	200020c4 	.word	0x200020c4

08000280 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	2300      	movs	r3, #0
 8000286:	9303      	str	r3, [sp, #12]
 8000288:	9304      	str	r3, [sp, #16]
 800028a:	9305      	str	r3, [sp, #20]
 800028c:	9306      	str	r3, [sp, #24]
 800028e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000290:	6803      	ldr	r3, [r0, #0]
 8000292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000296:	d001      	beq.n	800029c <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000298:	b009      	add	sp, #36	; 0x24
 800029a:	bd30      	pop	{r4, r5, pc}
 800029c:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800029e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80002a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002ac:	615a      	str	r2, [r3, #20]
 80002ae:	695a      	ldr	r2, [r3, #20]
 80002b0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80002b4:	9200      	str	r2, [sp, #0]
 80002b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	695a      	ldr	r2, [r3, #20]
 80002ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	695a      	ldr	r2, [r3, #20]
 80002c2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80002c6:	9201      	str	r2, [sp, #4]
 80002c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ca:	695a      	ldr	r2, [r3, #20]
 80002cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80002d0:	615a      	str	r2, [r3, #20]
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002d8:	9302      	str	r3, [sp, #8]
 80002da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TP_AFE_OUT_Pin|TP_NOSE_THERMISTOR_Pin;
 80002dc:	2503      	movs	r5, #3
 80002de:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e2:	a903      	add	r1, sp, #12
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f001 fcc8 	bl	8001c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TP_THERMISTOR_Pin;
 80002ec:	2301      	movs	r3, #1
 80002ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2500      	movs	r5, #0
 80002f4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(TP_THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 80002f6:	a903      	add	r1, sp, #12
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <HAL_ADC_MspInit+0xb0>)
 80002fa:	f001 fcbf 	bl	8001c7c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <HAL_ADC_MspInit+0xb4>)
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <HAL_ADC_MspInit+0xb8>)
 8000302:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000304:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000306:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800030c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000310:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000316:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000318:	6185      	str	r5, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800031a:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800031c:	f001 fbaa 	bl	8001a74 <HAL_DMA_Init>
 8000320:	b918      	cbnz	r0, 800032a <HAL_ADC_MspInit+0xaa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <HAL_ADC_MspInit+0xb4>)
 8000324:	63a3      	str	r3, [r4, #56]	; 0x38
 8000326:	625c      	str	r4, [r3, #36]	; 0x24
}
 8000328:	e7b6      	b.n	8000298 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800032a:	f000 fa5b 	bl	80007e4 <Error_Handler>
 800032e:	e7f8      	b.n	8000322 <HAL_ADC_MspInit+0xa2>
 8000330:	48000400 	.word	0x48000400
 8000334:	20002114 	.word	0x20002114
 8000338:	40020008 	.word	0x40020008

0800033c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800033c:	b500      	push	{lr}
 800033e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <MX_DMA_Init+0x30>)
 8000342:	695a      	ldr	r2, [r3, #20]
 8000344:	f042 0201 	orr.w	r2, r2, #1
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2105      	movs	r1, #5
 8000358:	200b      	movs	r0, #11
 800035a:	f001 fb21 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800035e:	200b      	movs	r0, #11
 8000360:	f001 fb52 	bl	8001a08 <HAL_NVIC_EnableIRQ>

}
 8000364:	b003      	add	sp, #12
 8000366:	f85d fb04 	ldr.w	pc, [sp], #4
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	b09c      	sub	sp, #112	; 0x70
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
    const osThreadAttr_t thermopileTask_attributes = {
 8000374:	2520      	movs	r5, #32
 8000376:	462a      	mov	r2, r5
 8000378:	2100      	movs	r1, #0
 800037a:	a814      	add	r0, sp, #80	; 0x50
 800037c:	f006 fb2d 	bl	80069da <memset>
 8000380:	4b22      	ldr	r3, [pc, #136]	; (800040c <MX_FREERTOS_Init+0x9c>)
 8000382:	9313      	str	r3, [sp, #76]	; 0x4c
 8000384:	f44f 7680 	mov.w	r6, #256	; 0x100
 8000388:	9618      	str	r6, [sp, #96]	; 0x60
 800038a:	2418      	movs	r4, #24
 800038c:	9419      	str	r4, [sp, #100]	; 0x64
    .name = "thermopileTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 256
  };
    thermopileTaskHandle = osThreadNew(ThermopileTask, NULL, &thermopileTask_attributes);
 800038e:	aa13      	add	r2, sp, #76	; 0x4c
 8000390:	2100      	movs	r1, #0
 8000392:	481f      	ldr	r0, [pc, #124]	; (8000410 <MX_FREERTOS_Init+0xa0>)
 8000394:	f004 f8c4 	bl	8004520 <osThreadNew>
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <MX_FREERTOS_Init+0xa4>)
 800039a:	6018      	str	r0, [r3, #0]

//
  const osThreadAttr_t masterThreadTask_attributes = {
 800039c:	462a      	mov	r2, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	a80b      	add	r0, sp, #44	; 0x2c
 80003a2:	f006 fb1a 	bl	80069da <memset>
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <MX_FREERTOS_Init+0xa8>)
 80003a8:	930a      	str	r3, [sp, #40]	; 0x28
 80003aa:	960f      	str	r6, [sp, #60]	; 0x3c
 80003ac:	9410      	str	r4, [sp, #64]	; 0x40
        .name = "masterThreadTask",
        .priority = (osPriority_t) osPriorityNormal,
        .stack_size = 256
      };
  masterThreadTaskHandle = osThreadNew(MasterThreadTask, NULL, &masterThreadTask_attributes);
 80003ae:	aa0a      	add	r2, sp, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	481a      	ldr	r0, [pc, #104]	; (800041c <MX_FREERTOS_Init+0xac>)
 80003b4:	f004 f8b4 	bl	8004520 <osThreadNew>
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <MX_FREERTOS_Init+0xb0>)
 80003ba:	6018      	str	r0, [r3, #0]
//
  const osThreadAttr_t sendMsgToMainTask_attributes = {
 80003bc:	462a      	mov	r2, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	a802      	add	r0, sp, #8
 80003c2:	f006 fb0a 	bl	80069da <memset>
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MX_FREERTOS_Init+0xb4>)
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	9306      	str	r3, [sp, #24]
 80003ce:	9407      	str	r4, [sp, #28]
          .name = "sendMsgToMainTask",
          .priority = (osPriority_t) osPriorityNormal,
          .stack_size = 128
        };
  sendMsgToMainTaskHandle = osThreadNew(SendPacketToMainTask, NULL, &sendMsgToMainTask_attributes);
 80003d0:	aa01      	add	r2, sp, #4
 80003d2:	2100      	movs	r1, #0
 80003d4:	4814      	ldr	r0, [pc, #80]	; (8000428 <MX_FREERTOS_Init+0xb8>)
 80003d6:	f004 f8a3 	bl	8004520 <osThreadNew>
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_FREERTOS_Init+0xbc>)
 80003dc:	6018      	str	r0, [r3, #0]
//            .stack_size = 128
//          };
//  receivePacketFromMainTaskHandle = osThreadNew(ReceivePacketFromMainTask, NULL, &receivePacketFromMainTask_attributes);


  sendMsgToMainQueueHandle = osMessageQueueNew (4, sizeof(struct secondaryProcessorData), NULL);
 80003de:	2200      	movs	r2, #0
 80003e0:	2158      	movs	r1, #88	; 0x58
 80003e2:	2004      	movs	r0, #4
 80003e4:	f004 fa1e 	bl	8004824 <osMessageQueueNew>
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_FREERTOS_Init+0xc0>)
 80003ea:	6018      	str	r0, [r3, #0]
  togLoggingQueueHandle = osMessageQueueNew (2, sizeof(struct LogMessage), NULL);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2106      	movs	r1, #6
 80003f0:	2002      	movs	r0, #2
 80003f2:	f004 fa17 	bl	8004824 <osMessageQueueNew>
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_FREERTOS_Init+0xc4>)
 80003f8:	6018      	str	r0, [r3, #0]
  thermMsgQueueHandle = osMessageQueueNew (10, sizeof(struct thermopilePackagedData), NULL);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2150      	movs	r1, #80	; 0x50
 80003fe:	200a      	movs	r0, #10
 8000400:	f004 fa10 	bl	8004824 <osMessageQueueNew>
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_FREERTOS_Init+0xc8>)
 8000406:	6018      	str	r0, [r3, #0]
//
//  messageI2C_LockSem = osSemaphoreNew (1, 1, NULL);

  /* USER CODE END RTOS_THREADS */

}
 8000408:	b01c      	add	sp, #112	; 0x70
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	08006a04 	.word	0x08006a04
 8000410:	08000d51 	.word	0x08000d51
 8000414:	20002178 	.word	0x20002178
 8000418:	08006a14 	.word	0x08006a14
 800041c:	080008dd 	.word	0x080008dd
 8000420:	2000216c 	.word	0x2000216c
 8000424:	08006a28 	.word	0x08006a28
 8000428:	08000601 	.word	0x08000601
 800042c:	2000215c 	.word	0x2000215c
 8000430:	20002160 	.word	0x20002160
 8000434:	20002168 	.word	0x20002168
 8000438:	20002164 	.word	0x20002164

0800043c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	2400      	movs	r4, #0
 8000442:	9403      	str	r4, [sp, #12]
 8000444:	9404      	str	r4, [sp, #16]
 8000446:	9405      	str	r4, [sp, #20]
 8000448:	9406      	str	r4, [sp, #24]
 800044a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044c:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <MX_GPIO_Init+0xb8>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000454:	615a      	str	r2, [r3, #20]
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800045c:	9200      	str	r2, [sp, #0]
 800045e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800046e:	9201      	str	r2, [sp, #4]
 8000470:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000478:	615a      	str	r2, [r3, #20]
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000480:	9302      	str	r3, [sp, #8]
 8000482:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EXPANSION_INT_Pin|TP25_Pin|TP24_Pin|TP22_Pin 
 8000484:	4622      	mov	r2, r4
 8000486:	f241 7110 	movw	r1, #5904	; 0x1710
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048e:	f001 fcb9 	bl	8001e04 <HAL_GPIO_WritePin>
                          |TP20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2140      	movs	r1, #64	; 0x40
 8000496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049a:	f001 fcb3 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOG_EXP_CONN_Pin|ADC_ALERT_Pin;
 800049e:	230c      	movs	r3, #12
 80004a0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_GPIO_Init+0xbc>)
 80004a4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	a903      	add	r1, sp, #12
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f001 fbe5 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = EXPANSION_INT_Pin|TP_SS_Pin|TP25_Pin|TP24_Pin 
 80004b2:	f241 7350 	movw	r3, #5968	; 0x1750
 80004b6:	9303      	str	r3, [sp, #12]
                          |TP22_Pin|TP20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	a903      	add	r1, sp, #12
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c6:	f001 fbd9 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11;
 80004ca:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 80004ce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d0:	2503      	movs	r5, #3
 80004d2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	a903      	add	r1, sp, #12
 80004d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004dc:	f001 fbce 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	a903      	add	r1, sp, #12
 80004ea:	4804      	ldr	r0, [pc, #16]	; (80004fc <MX_GPIO_Init+0xc0>)
 80004ec:	f001 fbc6 	bl	8001c7c <HAL_GPIO_Init>

}
 80004f0:	b009      	add	sp, #36	; 0x24
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	10110000 	.word	0x10110000
 80004fc:	48000400 	.word	0x48000400

08000500 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000500:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <MX_I2C1_Init+0x50>)
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_I2C1_Init+0x54>)
 8000506:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00707DBD;
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <MX_I2C1_Init+0x58>)
 800050a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 230;
 800050c:	23e6      	movs	r3, #230	; 0xe6
 800050e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000510:	2301      	movs	r3, #1
 8000512:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000518:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800051a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000520:	f001 fd3e 	bl	8001fa0 <HAL_I2C_Init>
 8000524:	b958      	cbnz	r0, 800053e <MX_I2C1_Init+0x3e>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	4809      	ldr	r0, [pc, #36]	; (8000550 <MX_I2C1_Init+0x50>)
 800052c:	f002 fa36 	bl	800299c <HAL_I2CEx_ConfigAnalogFilter>
 8000530:	b940      	cbnz	r0, 8000544 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <MX_I2C1_Init+0x50>)
 8000536:	f002 fa5f 	bl	80029f8 <HAL_I2CEx_ConfigDigitalFilter>
 800053a:	b930      	cbnz	r0, 800054a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }

}
 800053c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800053e:	f000 f951 	bl	80007e4 <Error_Handler>
 8000542:	e7f0      	b.n	8000526 <MX_I2C1_Init+0x26>
    Error_Handler();
 8000544:	f000 f94e 	bl	80007e4 <Error_Handler>
 8000548:	e7f3      	b.n	8000532 <MX_I2C1_Init+0x32>
    Error_Handler();
 800054a:	f000 f94b 	bl	80007e4 <Error_Handler>
}
 800054e:	e7f5      	b.n	800053c <MX_I2C1_Init+0x3c>
 8000550:	20002180 	.word	0x20002180
 8000554:	40005400 	.word	0x40005400
 8000558:	00707dbd 	.word	0x00707dbd

0800055c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	2300      	movs	r3, #0
 8000562:	9303      	str	r3, [sp, #12]
 8000564:	9304      	str	r3, [sp, #16]
 8000566:	9305      	str	r3, [sp, #20]
 8000568:	9306      	str	r3, [sp, #24]
 800056a:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800056c:	6802      	ldr	r2, [r0, #0]
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <HAL_I2C_MspInit+0x98>)
 8000570:	429a      	cmp	r2, r3
 8000572:	d001      	beq.n	8000578 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000574:	b009      	add	sp, #36	; 0x24
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4c1f      	ldr	r4, [pc, #124]	; (80005f8 <HAL_I2C_MspInit+0x9c>)
 800057a:	6963      	ldr	r3, [r4, #20]
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6163      	str	r3, [r4, #20]
 8000582:	6963      	ldr	r3, [r4, #20]
 8000584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058c:	6963      	ldr	r3, [r4, #20]
 800058e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000592:	6163      	str	r3, [r4, #20]
 8000594:	6963      	ldr	r3, [r4, #20]
 8000596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800059e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a4:	2512      	movs	r5, #18
 80005a6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2703      	movs	r7, #3
 80005aa:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ac:	2604      	movs	r6, #4
 80005ae:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	a903      	add	r1, sp, #12
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f001 fb61 	bl	8001c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005be:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2500      	movs	r5, #0
 80005c2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005c6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	a903      	add	r1, sp, #12
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <HAL_I2C_MspInit+0xa0>)
 80005cc:	f001 fb56 	bl	8001c7c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d0:	69e3      	ldr	r3, [r4, #28]
 80005d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d6:	61e3      	str	r3, [r4, #28]
 80005d8:	69e3      	ldr	r3, [r4, #28]
 80005da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80005e2:	462a      	mov	r2, r5
 80005e4:	2105      	movs	r1, #5
 80005e6:	201f      	movs	r0, #31
 80005e8:	f001 f9da 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005ec:	201f      	movs	r0, #31
 80005ee:	f001 fa0b 	bl	8001a08 <HAL_NVIC_EnableIRQ>
}
 80005f2:	e7bf      	b.n	8000574 <HAL_I2C_MspInit+0x18>
 80005f4:	40005400 	.word	0x40005400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000400 	.word	0x48000400

08000600 <SendPacketToMainTask>:
struct LogMessage logMessage;

uint8_t logTracking = 0;

/* Functions Definition ------------------------------------------------------*/
void SendPacketToMainTask(void *argument){
 8000600:	b510      	push	{r4, lr}
 8000602:	e01e      	b.n	8000642 <SendPacketToMainTask+0x42>

		evt = osThreadFlagsWait (0x00000004U, osFlagsWaitAny, osWaitForever);

		// if master is requesting to stop sampling, stop
		if(logMessage.status == SAMPLE_DISABLE){
			logTracking = 0;
 8000604:	2400      	movs	r4, #0
 8000606:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <SendPacketToMainTask+0xe8>)
 8000608:	701c      	strb	r4, [r3, #0]

			// stop sampling
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	4622      	mov	r2, r4
 8000610:	4936      	ldr	r1, [pc, #216]	; (80006ec <SendPacketToMainTask+0xec>)
 8000612:	4837      	ldr	r0, [pc, #220]	; (80006f0 <SendPacketToMainTask+0xf0>)
 8000614:	6800      	ldr	r0, [r0, #0]
 8000616:	f004 f965 	bl	80048e4 <osMessageQueuePut>

			// reset interrupt
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 800061a:	4622      	mov	r2, r4
 800061c:	2110      	movs	r1, #16
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f001 fbef 	bl	8001e04 <HAL_GPIO_WritePin>
 8000626:	e003      	b.n	8000630 <SendPacketToMainTask+0x30>
			// start sampling
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
		}

		// if logging is already happening and a message is ready
		else if(logTracking == 1)
 8000628:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <SendPacketToMainTask+0xe8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d031      	beq.n	8000694 <SendPacketToMainTask+0x94>
				// reset trigger
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
			}
		}

		osDelay(10);
 8000630:	200a      	movs	r0, #10
 8000632:	f004 f8d5 	bl	80047e0 <osDelay>

		// if there is another message queued up, assert interrupt pin
		if( osMessageQueueGetCount(sendMsgToMainQueueHandle) > 0)
 8000636:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <SendPacketToMainTask+0xf4>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f004 f9f7 	bl	8004a2c <osMessageQueueGetCount>
 800063e:	2800      	cmp	r0, #0
 8000640:	d14b      	bne.n	80006da <SendPacketToMainTask+0xda>
		while(HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *) &logMessage, sizeof(struct LogMessage)) != HAL_OK);
 8000642:	2206      	movs	r2, #6
 8000644:	4929      	ldr	r1, [pc, #164]	; (80006ec <SendPacketToMainTask+0xec>)
 8000646:	482c      	ldr	r0, [pc, #176]	; (80006f8 <SendPacketToMainTask+0xf8>)
 8000648:	f001 fd3a 	bl	80020c0 <HAL_I2C_Slave_Receive_IT>
 800064c:	2800      	cmp	r0, #0
 800064e:	d1f8      	bne.n	8000642 <SendPacketToMainTask+0x42>
		evt = osThreadFlagsWait (0x00000004U, osFlagsWaitAny, osWaitForever);
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	2100      	movs	r1, #0
 8000656:	2004      	movs	r0, #4
 8000658:	f004 f85c 	bl	8004714 <osThreadFlagsWait>
		if(logMessage.status == SAMPLE_DISABLE){
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SendPacketToMainTask+0xec>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0cf      	beq.n	8000604 <SendPacketToMainTask+0x4>
		else if(logMessage.status == SAMPLE_ENABLE && logTracking==0)
 8000664:	2b01      	cmp	r3, #1
 8000666:	d1df      	bne.n	8000628 <SendPacketToMainTask+0x28>
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SendPacketToMainTask+0xe8>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1db      	bne.n	8000628 <SendPacketToMainTask+0x28>
			logTracking = 1;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SendPacketToMainTask+0xe8>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 fbc1 	bl	8001e04 <HAL_GPIO_WritePin>
			osMessageQueuePut(togLoggingQueueHandle, &logMessage, 0U, osWaitForever);
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2200      	movs	r2, #0
 8000688:	4918      	ldr	r1, [pc, #96]	; (80006ec <SendPacketToMainTask+0xec>)
 800068a:	4819      	ldr	r0, [pc, #100]	; (80006f0 <SendPacketToMainTask+0xf0>)
 800068c:	6800      	ldr	r0, [r0, #0]
 800068e:	f004 f929 	bl	80048e4 <osMessageQueuePut>
 8000692:	e7cd      	b.n	8000630 <SendPacketToMainTask+0x30>
			if(osMessageQueueGet(sendMsgToMainQueueHandle, &packetReceived, 0U, 0) == osOK)
 8000694:	2300      	movs	r3, #0
 8000696:	461a      	mov	r2, r3
 8000698:	4918      	ldr	r1, [pc, #96]	; (80006fc <SendPacketToMainTask+0xfc>)
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <SendPacketToMainTask+0xf4>)
 800069c:	6800      	ldr	r0, [r0, #0]
 800069e:	f004 f973 	bl	8004988 <osMessageQueueGet>
 80006a2:	b998      	cbnz	r0, 80006cc <SendPacketToMainTask+0xcc>
				while(HAL_I2C_Slave_Transmit_IT(&hi2c1, (uint8_t *) &packetReceived, sizeof(struct secondaryProcessorData)) != HAL_OK);
 80006a4:	2258      	movs	r2, #88	; 0x58
 80006a6:	4915      	ldr	r1, [pc, #84]	; (80006fc <SendPacketToMainTask+0xfc>)
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <SendPacketToMainTask+0xf8>)
 80006aa:	f001 fcd7 	bl	800205c <HAL_I2C_Slave_Transmit_IT>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d1f8      	bne.n	80006a4 <SendPacketToMainTask+0xa4>
				evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 80006b2:	f04f 32ff 	mov.w	r2, #4294967295
 80006b6:	2100      	movs	r1, #0
 80006b8:	2001      	movs	r0, #1
 80006ba:	f004 f82b 	bl	8004714 <osThreadFlagsWait>
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2110      	movs	r1, #16
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f001 fb9d 	bl	8001e04 <HAL_GPIO_WritePin>
 80006ca:	e7b1      	b.n	8000630 <SendPacketToMainTask+0x30>
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2110      	movs	r1, #16
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f001 fb96 	bl	8001e04 <HAL_GPIO_WritePin>
 80006d8:	e7aa      	b.n	8000630 <SendPacketToMainTask+0x30>
		{
			HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 fb8f 	bl	8001e04 <HAL_GPIO_WritePin>
 80006e6:	e7ac      	b.n	8000642 <SendPacketToMainTask+0x42>
 80006e8:	2000002c 	.word	0x2000002c
 80006ec:	200021cc 	.word	0x200021cc
 80006f0:	20002168 	.word	0x20002168
 80006f4:	20002160 	.word	0x20002160
 80006f8:	20002180 	.word	0x20002180
 80006fc:	200021d4 	.word	0x200021d4

08000700 <HAL_I2C_SlaveTxCpltCallback>:
//		osDelay(500);
//	}
//}

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000700:	b508      	push	{r3, lr}
	// notify sending thread that message has been sent
	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000001U);
 8000702:	2101      	movs	r1, #1
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_I2C_SlaveTxCpltCallback+0x10>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f003 ff7e 	bl	8004608 <osThreadFlagsSet>
}
 800070c:	bd08      	pop	{r3, pc}
 800070e:	bf00      	nop
 8000710:	2000215c 	.word	0x2000215c

08000714 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000714:	b508      	push	{r3, lr}
	//osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000004U);
	// notify receiving thread that a message has been received
	osThreadFlagsSet(sendMsgToMainTaskHandle, 0x00000004U);
 8000716:	2104      	movs	r1, #4
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_I2C_SlaveRxCpltCallback+0x10>)
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	f003 ff74 	bl	8004608 <osThreadFlagsSet>
}
 8000720:	bd08      	pop	{r3, pc}
 8000722:	bf00      	nop
 8000724:	2000215c 	.word	0x2000215c

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b530      	push	{r4, r5, lr}
 800072a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072c:	2220      	movs	r2, #32
 800072e:	2100      	movs	r1, #0
 8000730:	a814      	add	r0, sp, #80	; 0x50
 8000732:	f006 f952 	bl	80069da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000736:	2400      	movs	r4, #0
 8000738:	940d      	str	r4, [sp, #52]	; 0x34
 800073a:	940e      	str	r4, [sp, #56]	; 0x38
 800073c:	940f      	str	r4, [sp, #60]	; 0x3c
 800073e:	9410      	str	r4, [sp, #64]	; 0x40
 8000740:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	4621      	mov	r1, r4
 8000746:	a801      	add	r0, sp, #4
 8000748:	f006 f947 	bl	80069da <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800074c:	2309      	movs	r3, #9
 800074e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	2501      	movs	r5, #1
 8000758:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800075a:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	a812      	add	r0, sp, #72	; 0x48
 800075e:	f002 f977 	bl	8002a50 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	930d      	str	r3, [sp, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000766:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	9411      	str	r4, [sp, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076e:	4629      	mov	r1, r5
 8000770:	a80d      	add	r0, sp, #52	; 0x34
 8000772:	f002 fccd 	bl	8003110 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <SystemClock_Config+0x68>)
 8000778:	9301      	str	r3, [sp, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800077a:	2310      	movs	r3, #16
 800077c:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800077e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000782:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	a801      	add	r0, sp, #4
 8000786:	f002 fdcf 	bl	8003328 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800078a:	b01d      	add	sp, #116	; 0x74
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop
 8000790:	00010020 	.word	0x00010020

08000794 <main>:
{
 8000794:	b508      	push	{r3, lr}
  HAL_Init();
 8000796:	f000 fc3b 	bl	8001010 <HAL_Init>
  SystemClock_Config();
 800079a:	f7ff ffc5 	bl	8000728 <SystemClock_Config>
  MX_DMA_Init();
 800079e:	f7ff fdcd 	bl	800033c <MX_DMA_Init>
  MX_GPIO_Init();
 80007a2:	f7ff fe4b 	bl	800043c <MX_GPIO_Init>
  MX_I2C1_Init();
 80007a6:	f7ff feab 	bl	8000500 <MX_I2C1_Init>
  MX_SPI3_Init();
 80007aa:	f000 f94d 	bl	8000a48 <MX_SPI3_Init>
  MX_ADC1_Init();
 80007ae:	f7ff fd0f 	bl	80001d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80007b2:	f000 fb51 	bl	8000e58 <MX_TIM2_Init>
  MX_RTC_Init();
 80007b6:	f000 f919 	bl	80009ec <MX_RTC_Init>
  MX_TIM6_Init();
 80007ba:	f000 fba5 	bl	8000f08 <MX_TIM6_Init>
  osKernelInitialize();
 80007be:	f003 fe67 	bl	8004490 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 80007c2:	f7ff fdd5 	bl	8000370 <MX_FREERTOS_Init>
  osKernelStart();
 80007c6:	f003 fe85 	bl	80044d4 <osKernelStart>
 80007ca:	e7fe      	b.n	80007ca <main+0x36>

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007ce:	6802      	ldr	r2, [r0, #0]
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d000      	beq.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80007d8:	f000 fc2c 	bl	8001034 <HAL_IncTick>
}
 80007dc:	e7fb      	b.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80007de:	bf00      	nop
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e4:	4770      	bx	lr
	...

080007e8 <RTC_ToEpoch>:
	memcpy ( &(packet->temp), temp, sizeof(struct thermopilePackagedData) );

}

// Convert Date/Time structures to epoch time
uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 80007e8:	b430      	push	{r4, r5}
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 80007ea:	784b      	ldrb	r3, [r1, #1]
 80007ec:	f1c3 040e 	rsb	r4, r3, #14
 80007f0:	4d22      	ldr	r5, [pc, #136]	; (800087c <RTC_ToEpoch+0x94>)
 80007f2:	fb85 2504 	smull	r2, r5, r5, r4
 80007f6:	17e2      	asrs	r2, r4, #31
 80007f8:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 80007fc:	b2d2      	uxtb	r2, r2
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 80007fe:	78cc      	ldrb	r4, [r1, #3]
 8000800:	1aa4      	subs	r4, r4, r2
 8000802:	f641 2590 	movw	r5, #6800	; 0x1a90
 8000806:	fa15 f484 	uxtah	r4, r5, r4
 800080a:	b2a4      	uxth	r4, r4
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 800080c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000810:	0095      	lsls	r5, r2, #2
 8000812:	442b      	add	r3, r5
 8000814:	b2db      	uxtb	r3, r3
 8000816:	3b03      	subs	r3, #3
 8000818:	b2db      	uxtb	r3, r3

	// Gregorian calendar date compute
    JDN  = date->Date;
 800081a:	788a      	ldrb	r2, [r1, #2]
    JDN += (153 * m + 2) / 5;
 800081c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000820:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8000824:	3302      	adds	r3, #2
 8000826:	4916      	ldr	r1, [pc, #88]	; (8000880 <RTC_ToEpoch+0x98>)
 8000828:	fb81 1303 	smull	r1, r3, r1, r3
 800082c:	eb02 0263 	add.w	r2, r2, r3, asr #1
    JDN += 365 * y;
 8000830:	f240 136d 	movw	r3, #365	; 0x16d
 8000834:	fb03 2304 	mla	r3, r3, r4, r2
    JDN += y / 4;
 8000838:	eb03 0394 	add.w	r3, r3, r4, lsr #2
    JDN += -y / 100;
 800083c:	4262      	negs	r2, r4
 800083e:	4911      	ldr	r1, [pc, #68]	; (8000884 <RTC_ToEpoch+0x9c>)
 8000840:	fb81 c502 	smull	ip, r5, r1, r2
 8000844:	17d2      	asrs	r2, r2, #31
 8000846:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 800084a:	441a      	add	r2, r3
    JDN += y / 400;
 800084c:	fba1 3404 	umull	r3, r4, r1, r4
 8000850:	eb02 14d4 	add.w	r4, r2, r4, lsr #7
    JDN  = JDN - 32045;
    JDN  = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <RTC_ToEpoch+0xa0>)
 8000856:	4423      	add	r3, r4
    JDN *= 86400;                     // Days to seconds
    JDN += time->Hours * 3600;    // ... and today seconds
 8000858:	7801      	ldrb	r1, [r0, #0]
 800085a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800085e:	fb02 f201 	mul.w	r2, r2, r1
 8000862:	490a      	ldr	r1, [pc, #40]	; (800088c <RTC_ToEpoch+0xa4>)
 8000864:	fb01 2303 	mla	r3, r1, r3, r2
    JDN += time->Minutes * 60;
 8000868:	7842      	ldrb	r2, [r0, #1]
 800086a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800086e:	0091      	lsls	r1, r2, #2
 8000870:	440b      	add	r3, r1
    JDN += time->Seconds;
 8000872:	7880      	ldrb	r0, [r0, #2]

	return JDN;
}
 8000874:	4418      	add	r0, r3
 8000876:	bc30      	pop	{r4, r5}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	2aaaaaab 	.word	0x2aaaaaab
 8000880:	66666667 	.word	0x66666667
 8000884:	51eb851f 	.word	0x51eb851f
 8000888:	ffda4547 	.word	0xffda4547
 800088c:	00015180 	.word	0x00015180

08000890 <packetizeData>:
{
 8000890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000894:	4604      	mov	r4, r0
 8000896:	4688      	mov	r8, r1
	packet->tick_ms = HAL_GetTick();
 8000898:	f000 fbd8 	bl	800104c <HAL_GetTick>
 800089c:	6520      	str	r0, [r4, #80]	; 0x50
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 800089e:	4d0c      	ldr	r5, [pc, #48]	; (80008d0 <packetizeData+0x40>)
 80008a0:	4f0c      	ldr	r7, [pc, #48]	; (80008d4 <packetizeData+0x44>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	4629      	mov	r1, r5
 80008a6:	4638      	mov	r0, r7
 80008a8:	f002 fef4 	bl	8003694 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 80008ac:	4e0a      	ldr	r6, [pc, #40]	; (80008d8 <packetizeData+0x48>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	4631      	mov	r1, r6
 80008b2:	4638      	mov	r0, r7
 80008b4:	f002 ff19 	bl	80036ea <HAL_RTC_GetDate>
	packet->epoch = RTC_ToEpoch(&RTC_time, &RTC_date);
 80008b8:	4631      	mov	r1, r6
 80008ba:	4628      	mov	r0, r5
 80008bc:	f7ff ff94 	bl	80007e8 <RTC_ToEpoch>
 80008c0:	6560      	str	r0, [r4, #84]	; 0x54
	memcpy ( &(packet->temp), temp, sizeof(struct thermopilePackagedData) );
 80008c2:	2250      	movs	r2, #80	; 0x50
 80008c4:	4641      	mov	r1, r8
 80008c6:	4620      	mov	r0, r4
 80008c8:	f006 f87c 	bl	80069c4 <memcpy>
}
 80008cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008d0:	200022dc 	.word	0x200022dc
 80008d4:	200022fc 	.word	0x200022fc
 80008d8:	200022f8 	.word	0x200022f8

080008dc <MasterThreadTask>:
{
 80008dc:	b510      	push	{r4, lr}
 80008de:	e036      	b.n	800094e <MasterThreadTask+0x72>
			memcpy(&prevLogMessage, &togLogMessageReceived, sizeof(struct LogMessage));
 80008e0:	4a39      	ldr	r2, [pc, #228]	; (80009c8 <MasterThreadTask+0xec>)
 80008e2:	6821      	ldr	r1, [r4, #0]
 80008e4:	6011      	str	r1, [r2, #0]
 80008e6:	88a1      	ldrh	r1, [r4, #4]
 80008e8:	8091      	strh	r1, [r2, #4]
			if(togLogMessageReceived.tempEnabled == SENSOR_ENABLE)
 80008ea:	78e3      	ldrb	r3, [r4, #3]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d050      	beq.n	8000992 <MasterThreadTask+0xb6>
				if(togLogMessageReceived.tempEnabled == SENSOR_ENABLE)
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <MasterThreadTask+0xf0>)
 80008f2:	78db      	ldrb	r3, [r3, #3]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d052      	beq.n	800099e <MasterThreadTask+0xc2>
				packetizeData(&sensorPacket, &thermMsgReceived);
 80008f8:	4c35      	ldr	r4, [pc, #212]	; (80009d0 <MasterThreadTask+0xf4>)
 80008fa:	4936      	ldr	r1, [pc, #216]	; (80009d4 <MasterThreadTask+0xf8>)
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff ffc7 	bl	8000890 <packetizeData>
				osMessageQueuePut(sendMsgToMainQueueHandle, (void *) &sensorPacket, 0U, 0);
 8000902:	2300      	movs	r3, #0
 8000904:	461a      	mov	r2, r3
 8000906:	4621      	mov	r1, r4
 8000908:	4833      	ldr	r0, [pc, #204]	; (80009d8 <MasterThreadTask+0xfc>)
 800090a:	6800      	ldr	r0, [r0, #0]
 800090c:	f003 ffea 	bl	80048e4 <osMessageQueuePut>
				HAL_GPIO_WritePin(EXPANSION_INT_GPIO_Port, EXPANSION_INT_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2110      	movs	r1, #16
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f001 fa74 	bl	8001e04 <HAL_GPIO_WritePin>
				if(osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, 0) == osOK)
 800091c:	2300      	movs	r3, #0
 800091e:	461a      	mov	r2, r3
 8000920:	492a      	ldr	r1, [pc, #168]	; (80009cc <MasterThreadTask+0xf0>)
 8000922:	482e      	ldr	r0, [pc, #184]	; (80009dc <MasterThreadTask+0x100>)
 8000924:	6800      	ldr	r0, [r0, #0]
 8000926:	f004 f82f 	bl	8004988 <osMessageQueueGet>
 800092a:	2800      	cmp	r0, #0
 800092c:	d1e0      	bne.n	80008f0 <MasterThreadTask+0x14>
					if(togLogMessageReceived.status == DISABLE_SENSING){
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MasterThreadTask+0xf0>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1dc      	bne.n	80008f0 <MasterThreadTask+0x14>
						if(prevLogMessage.tempEnabled == SENSOR_ENABLE)
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MasterThreadTask+0xec>)
 8000938:	78db      	ldrb	r3, [r3, #3]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d038      	beq.n	80009b0 <MasterThreadTask+0xd4>
						osDelay(500);
 800093e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000942:	f003 ff4d 	bl	80047e0 <osDelay>
						osMessageQueueReset(sendMsgToMainQueueHandle);
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MasterThreadTask+0xfc>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	f004 f889 	bl	8004a60 <osMessageQueueReset>
		osMessageQueueGet(togLoggingQueueHandle, &togLogMessageReceived, 0U, osWaitForever);
 800094e:	4c1f      	ldr	r4, [pc, #124]	; (80009cc <MasterThreadTask+0xf0>)
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	2200      	movs	r2, #0
 8000956:	4621      	mov	r1, r4
 8000958:	4820      	ldr	r0, [pc, #128]	; (80009dc <MasterThreadTask+0x100>)
 800095a:	6800      	ldr	r0, [r0, #0]
 800095c:	f004 f814 	bl	8004988 <osMessageQueueGet>
		if(togLogMessageReceived.logStatus == ENABLE_LOG)
 8000960:	7863      	ldrb	r3, [r4, #1]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d0bc      	beq.n	80008e0 <MasterThreadTask+0x4>
		else if( logEnabled==1 && togLogMessageReceived.logStatus == DISABLE_LOG)
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <MasterThreadTask+0x104>)
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	2a01      	cmp	r2, #1
 800096c:	d1ef      	bne.n	800094e <MasterThreadTask+0x72>
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1ed      	bne.n	800094e <MasterThreadTask+0x72>
			logEnabled = 0;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MasterThreadTask+0x104>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
			if(prevLogMessage.tempEnabled == SENSOR_ENABLE)
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MasterThreadTask+0xec>)
 800097a:	78db      	ldrb	r3, [r3, #3]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d01d      	beq.n	80009bc <MasterThreadTask+0xe0>
			osDelay(500);
 8000980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000984:	f003 ff2c 	bl	80047e0 <osDelay>
			osMessageQueueReset(sendMsgToMainQueueHandle);
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MasterThreadTask+0xfc>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	f004 f868 	bl	8004a60 <osMessageQueueReset>
 8000990:	e7dd      	b.n	800094e <MasterThreadTask+0x72>
				osThreadFlagsSet(thermopileTaskHandle, 0x00000001U);
 8000992:	2101      	movs	r1, #1
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MasterThreadTask+0x108>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	f003 fe36 	bl	8004608 <osThreadFlagsSet>
 800099c:	e7a8      	b.n	80008f0 <MasterThreadTask+0x14>
					osMessageQueueGet(thermMsgQueueHandle, &thermMsgReceived, 0U, osWaitForever);
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	2200      	movs	r2, #0
 80009a4:	490b      	ldr	r1, [pc, #44]	; (80009d4 <MasterThreadTask+0xf8>)
 80009a6:	4810      	ldr	r0, [pc, #64]	; (80009e8 <MasterThreadTask+0x10c>)
 80009a8:	6800      	ldr	r0, [r0, #0]
 80009aa:	f003 ffed 	bl	8004988 <osMessageQueueGet>
 80009ae:	e7a3      	b.n	80008f8 <MasterThreadTask+0x1c>
							osThreadFlagsSet(thermopileTaskHandle, 0x00000002U);
 80009b0:	2102      	movs	r1, #2
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MasterThreadTask+0x108>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f003 fe27 	bl	8004608 <osThreadFlagsSet>
 80009ba:	e7c0      	b.n	800093e <MasterThreadTask+0x62>
				osThreadFlagsSet(thermopileTaskHandle, 0x00000002U);
 80009bc:	2102      	movs	r1, #2
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MasterThreadTask+0x108>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	f003 fe21 	bl	8004608 <osThreadFlagsSet>
 80009c6:	e7db      	b.n	8000980 <MasterThreadTask+0xa4>
 80009c8:	200022f0 	.word	0x200022f0
 80009cc:	2000222c 	.word	0x2000222c
 80009d0:	20002284 	.word	0x20002284
 80009d4:	20002234 	.word	0x20002234
 80009d8:	20002160 	.word	0x20002160
 80009dc:	20002168 	.word	0x20002168
 80009e0:	2000002d 	.word	0x2000002d
 80009e4:	20002178 	.word	0x20002178
 80009e8:	20002164 	.word	0x20002164

080009ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80009ec:	b508      	push	{r3, lr}

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_RTC_Init+0x28>)
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_RTC_Init+0x2c>)
 80009f2:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009f4:	2300      	movs	r3, #0
 80009f6:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009f8:	227f      	movs	r2, #127	; 0x7f
 80009fa:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a00:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a02:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a04:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a06:	f002 fdda 	bl	80035be <HAL_RTC_Init>
 8000a0a:	b900      	cbnz	r0, 8000a0e <MX_RTC_Init+0x22>
  {
    Error_Handler();
  }

}
 8000a0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a0e:	f7ff fee9 	bl	80007e4 <Error_Handler>
}
 8000a12:	e7fb      	b.n	8000a0c <MX_RTC_Init+0x20>
 8000a14:	200022fc 	.word	0x200022fc
 8000a18:	40002800 	.word	0x40002800

08000a1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8000a1c:	6802      	ldr	r2, [r0, #0]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_RTC_MspInit+0x24>)
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d000      	beq.n	8000a26 <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a24:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a2a:	fa92 f2a2 	rbit	r2, r2
    __HAL_RCC_RTC_ENABLE();
 8000a2e:	fab2 f282 	clz	r2, r2
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_RTC_MspInit+0x28>)
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
}
 8000a3c:	e7f2      	b.n	8000a24 <HAL_RTC_MspInit+0x8>
 8000a3e:	bf00      	nop
 8000a40:	40002800 	.word	0x40002800
 8000a44:	10908100 	.word	0x10908100

08000a48 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a48:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8000a4a:	4810      	ldr	r0, [pc, #64]	; (8000a8c <MX_SPI3_Init+0x44>)
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_SPI3_Init+0x48>)
 8000a4e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a50:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a54:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	2300      	movs	r3, #0
 8000a58:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a5e:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a60:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a62:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6e:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a70:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a72:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a74:	2207      	movs	r2, #7
 8000a76:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a78:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a7e:	f002 ff1c 	bl	80038ba <HAL_SPI_Init>
 8000a82:	b900      	cbnz	r0, 8000a86 <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 8000a84:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a86:	f7ff fead 	bl	80007e4 <Error_Handler>
}
 8000a8a:	e7fb      	b.n	8000a84 <MX_SPI3_Init+0x3c>
 8000a8c:	2000231c 	.word	0x2000231c
 8000a90:	40003c00 	.word	0x40003c00

08000a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a94:	b500      	push	{lr}
 8000a96:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9303      	str	r3, [sp, #12]
 8000a9c:	9304      	str	r3, [sp, #16]
 8000a9e:	9305      	str	r3, [sp, #20]
 8000aa0:	9306      	str	r3, [sp, #24]
 8000aa2:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI3)
 8000aa4:	6802      	ldr	r2, [r0, #0]
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_SPI_MspInit+0x70>)
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d002      	beq.n	8000ab2 <HAL_SPI_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000aac:	b009      	add	sp, #36	; 0x24
 8000aae:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ab2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000abc:	61da      	str	r2, [r3, #28]
 8000abe:	69da      	ldr	r2, [r3, #28]
 8000ac0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000ac4:	9201      	str	r2, [sp, #4]
 8000ac6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ada:	2338      	movs	r3, #56	; 0x38
 8000adc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	a903      	add	r1, sp, #12
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_SPI_MspInit+0x74>)
 8000aee:	f001 f8c5 	bl	8001c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2105      	movs	r1, #5
 8000af6:	2033      	movs	r0, #51	; 0x33
 8000af8:	f000 ff52 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000afc:	2033      	movs	r0, #51	; 0x33
 8000afe:	f000 ff83 	bl	8001a08 <HAL_NVIC_EnableIRQ>
}
 8000b02:	e7d3      	b.n	8000aac <HAL_SPI_MspInit+0x18>
 8000b04:	40003c00 	.word	0x40003c00
 8000b08:	48000400 	.word	0x48000400

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b500      	push	{lr}
 8000b0e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_MspInit+0x3c>)
 8000b12:	699a      	ldr	r2, [r3, #24]
 8000b14:	f042 0201 	orr.w	r2, r2, #1
 8000b18:	619a      	str	r2, [r3, #24]
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	f002 0201 	and.w	r2, r2, #1
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	69da      	ldr	r2, [r3, #28]
 8000b26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b2a:	61da      	str	r2, [r3, #28]
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	210f      	movs	r1, #15
 8000b3a:	f06f 0001 	mvn.w	r0, #1
 8000b3e:	f000 ff2f 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	b003      	add	sp, #12
 8000b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b500      	push	{lr}
 8000b4e:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000b50:	2200      	movs	r2, #0
 8000b52:	4601      	mov	r1, r0
 8000b54:	2019      	movs	r0, #25
 8000b56:	f000 ff23 	bl	80019a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000b5a:	2019      	movs	r0, #25
 8000b5c:	f000 ff54 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_InitTick+0x68>)
 8000b62:	699a      	ldr	r2, [r3, #24]
 8000b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b68:	619a      	str	r2, [r3, #24]
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	a902      	add	r1, sp, #8
 8000b76:	a803      	add	r0, sp, #12
 8000b78:	f002 fbb8 	bl	80032ec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b7c:	f002 fba0 	bl	80032c0 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_InitTick+0x6c>)
 8000b82:	fba3 2300 	umull	r2, r3, r3, r0
 8000b86:	0c9b      	lsrs	r3, r3, #18
 8000b88:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_InitTick+0x70>)
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <HAL_InitTick+0x74>)
 8000b8e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b94:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b96:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b9e:	f003 fb13 	bl	80041c8 <HAL_TIM_Base_Init>
 8000ba2:	b118      	cbz	r0, 8000bac <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ba4:	2001      	movs	r0, #1
}
 8000ba6:	b009      	add	sp, #36	; 0x24
 8000ba8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <HAL_InitTick+0x70>)
 8000bae:	f003 f9e3 	bl	8003f78 <HAL_TIM_Base_Start_IT>
 8000bb2:	e7f8      	b.n	8000ba6 <HAL_InitTick+0x5a>
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	20002380 	.word	0x20002380
 8000bc0:	40012c00 	.word	0x40012c00

08000bc4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	4770      	bx	lr

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler>

08000bce <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	4770      	bx	lr

08000bd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA1_Channel1_IRQHandler+0xc>)
 8000bd4:	f000 fff7 	bl	8001bc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bd8:	bd08      	pop	{r3, pc}
 8000bda:	bf00      	nop
 8000bdc:	20002114 	.word	0x20002114

08000be0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000be0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be2:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000be4:	f003 f9e3 	bl	8003fae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000be8:	bd08      	pop	{r3, pc}
 8000bea:	bf00      	nop
 8000bec:	20002380 	.word	0x20002380

08000bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf2:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM2_IRQHandler+0xc>)
 8000bf4:	f003 f9db 	bl	8003fae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf8:	bd08      	pop	{r3, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20002450 	.word	0x20002450

08000c00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c02:	4802      	ldr	r0, [pc, #8]	; (8000c0c <I2C1_EV_IRQHandler+0xc>)
 8000c04:	f001 fa8e 	bl	8002124 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c08:	bd08      	pop	{r3, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20002180 	.word	0x20002180

08000c10 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000c10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000c12:	4802      	ldr	r0, [pc, #8]	; (8000c1c <SPI3_IRQHandler+0xc>)
 8000c14:	f002 ff9e 	bl	8003b54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000c18:	bd08      	pop	{r3, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000231c 	.word	0x2000231c

08000c20 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SystemInit+0x18>)
 8000c22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c26:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c32:	609a      	str	r2, [r3, #8]
#endif
}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_ADC_ConvCpltCallback>:
	}
}

volatile uint8_t complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c3c:	b508      	push	{r3, lr}
	complete++;
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_ADC_ConvCpltCallback+0x24>)
 8000c40:	7813      	ldrb	r3, [r2, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	7013      	strb	r3, [r2, #0]

	// notify ThermopileTask that conversion is complete
	while( HAL_ADC_Stop(&hadc1) != HAL_OK);
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <HAL_ADC_ConvCpltCallback+0x28>)
 8000c4a:	f000 fc29 	bl	80014a0 <HAL_ADC_Stop>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d1fa      	bne.n	8000c48 <HAL_ADC_ConvCpltCallback+0xc>
	osThreadFlagsSet(thermopileTaskHandle, 0x00000004U);
 8000c52:	2104      	movs	r1, #4
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	f003 fcd6 	bl	8004608 <osThreadFlagsSet>

}
 8000c5c:	bd08      	pop	{r3, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000036 	.word	0x20000036
 8000c64:	200020c4 	.word	0x200020c4
 8000c68:	20002178 	.word	0x20002178

08000c6c <HAL_ADC_ConvHalfCpltCallback>:
//	memcpy(blinkMsgBuffer_1.data, &(blink_buffer), 100);
//	blinkMsgBuffer_1.tick_ms = HAL_GetTick();
//	blink_ptr = &blink_buffer;
//	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);

}
 8000c6c:	4770      	bx	lr
	...

08000c70 <HAL_ADC_ErrorCallback>:

volatile uint8_t i = 0;
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  i++;
 8000c70:	4a02      	ldr	r2, [pc, #8]	; (8000c7c <HAL_ADC_ErrorCallback+0xc>)
 8000c72:	7813      	ldrb	r3, [r2, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	7013      	strb	r3, [r2, #0]
}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000037 	.word	0x20000037

08000c80 <SwitchTemperatureSensor>:
//}

/*
 * Helper Functions
 */
void SwitchTemperatureSensor(sensorChoice sense){
 8000c80:	b500      	push	{lr}
 8000c82:	b083      	sub	sp, #12

	uint8_t packet[2] = {0};
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8ad 3004 	strh.w	r3, [sp, #4]

	packet[0] = LMP91051_CFG_REG;

	if(sense == nose){
 8000c8a:	2801      	cmp	r0, #1
 8000c8c:	d01b      	beq.n	8000cc6 <SwitchTemperatureSensor+0x46>
		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_32| GAIN1_42 | CMN_MODE_1_15 | EXT_FILT_EN; //todo: add blocking semaphore so no LED conflict

//		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_16 | GAIN1_42 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
	}
	else if(sense == temple){
 8000c8e:	b910      	cbnz	r0, 8000c96 <SwitchTemperatureSensor+0x16>
		packet[1] = TP_TEMPLE_SEL | PGA1_EN | PGA2_EN | GAIN2_32 | GAIN1_42 | CMN_MODE_1_15 | EXT_FILT_EN; //todo: add blocking semaphore so no LED conflict
 8000c90:	23f7      	movs	r3, #247	; 0xf7
 8000c92:	f88d 3005 	strb.w	r3, [sp, #5]

//		packet[1] = TP_TEMPLE_SEL | PGA1_EN | PGA2_EN | GAIN2_16 | GAIN1_42 | CMN_MODE_1_15; //todo: add blocking semaphore so no LED conflict
	}

	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f001 f8b1 	bl	8001e04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	a901      	add	r1, sp, #4
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <SwitchTemperatureSensor+0x50>)
 8000caa:	f002 fe63 	bl	8003974 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f000 f9d2 	bl	8001058 <HAL_Delay>
	HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f001 f8a2 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000cc0:	b003      	add	sp, #12
 8000cc2:	f85d fb04 	ldr.w	pc, [sp], #4
		packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_32| GAIN1_42 | CMN_MODE_1_15 | EXT_FILT_EN; //todo: add blocking semaphore so no LED conflict
 8000cc6:	2377      	movs	r3, #119	; 0x77
 8000cc8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000ccc:	e7e3      	b.n	8000c96 <SwitchTemperatureSensor+0x16>
 8000cce:	bf00      	nop
 8000cd0:	2000231c 	.word	0x2000231c

08000cd4 <Setup_LMP91051>:

void Setup_LMP91051(void){
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	b082      	sub	sp, #8
  uint8_t packet[2];
  packet[0] = LMP91051_CFG_REG;
 8000cd8:	2500      	movs	r5, #0
 8000cda:	f88d 5004 	strb.w	r5, [sp, #4]
  packet[1] = TP_NOSE_SEL | PGA1_EN | PGA2_EN | GAIN2_32 | GAIN1_42 | CMN_MODE_1_15 | EXT_FILT_EN; //todo: add blocking semaphore so no LED conflict
 8000cde:	2377      	movs	r3, #119	; 0x77
 8000ce0:	f88d 3005 	strb.w	r3, [sp, #5]
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000ce4:	462a      	mov	r2, r5
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f001 f88a 	bl	8001e04 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000cf0:	4e16      	ldr	r6, [pc, #88]	; (8000d4c <Setup_LMP91051+0x78>)
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	a901      	add	r1, sp, #4
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f002 fe3b 	bl	8003974 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f000 f9aa 	bl	8001058 <HAL_Delay>
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f001 f87a 	bl	8001e04 <HAL_GPIO_WritePin>

  packet[0] = LMP91051_DAC_REG;
 8000d10:	2401      	movs	r4, #1
 8000d12:	f88d 4004 	strb.w	r4, [sp, #4]
  packet[1] = 140; // shift signal down by -33.8mV (159 - 128) during 2nd stage amp
 8000d16:	238c      	movs	r3, #140	; 0x8c
 8000d18:	f88d 3005 	strb.w	r3, [sp, #5]
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_RESET);
 8000d1c:	462a      	mov	r2, r5
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f001 f86e 	bl	8001e04 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, packet, 2, 1);
 8000d28:	4623      	mov	r3, r4
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	a901      	add	r1, sp, #4
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f002 fe20 	bl	8003974 <HAL_SPI_Transmit>
  HAL_Delay(2);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f000 f98f 	bl	8001058 <HAL_Delay>
  HAL_GPIO_WritePin(TP_SS_GPIO_Port, TP_SS_Pin, GPIO_PIN_SET);
 8000d3a:	4622      	mov	r2, r4
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f001 f85f 	bl	8001e04 <HAL_GPIO_WritePin>
}
 8000d46:	b002      	add	sp, #8
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000231c 	.word	0x2000231c

08000d50 <ThermopileTask>:
void ThermopileTask(void *argument){
 8000d50:	b538      	push	{r3, r4, r5, lr}
  Setup_LMP91051();
 8000d52:	f7ff ffbf 	bl	8000cd4 <Setup_LMP91051>
		evt = osThreadFlagsWait (0x00000001U, osFlagsWaitAny, osWaitForever);
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f003 fcd9 	bl	8004714 <osThreadFlagsWait>
 8000d62:	4604      	mov	r4, r0
		if (evt == 0x00000001U)  {
 8000d64:	2801      	cmp	r0, #1
 8000d66:	d1f6      	bne.n	8000d56 <ThermopileTask+0x6>
			HAL_TIM_Base_Start(&htim6);
 8000d68:	4836      	ldr	r0, [pc, #216]	; (8000e44 <ThermopileTask+0xf4>)
 8000d6a:	f003 f8d5 	bl	8003f18 <HAL_TIM_Base_Start>
 8000d6e:	e054      	b.n	8000e1a <ThermopileTask+0xca>
					evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	2100      	movs	r1, #0
 8000d76:	2006      	movs	r0, #6
 8000d78:	f003 fccc 	bl	8004714 <osThreadFlagsWait>
 8000d7c:	4604      	mov	r4, r0
					while( HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 3) != HAL_OK)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4931      	ldr	r1, [pc, #196]	; (8000e48 <ThermopileTask+0xf8>)
 8000d82:	4832      	ldr	r0, [pc, #200]	; (8000e4c <ThermopileTask+0xfc>)
 8000d84:	f000 fbb2 	bl	80014ec <HAL_ADC_Start_DMA>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d1f1      	bne.n	8000d70 <ThermopileTask+0x20>
					if( (evt & 0x00000002U) == 0x00000002U) break;
 8000d8c:	f014 0f02 	tst.w	r4, #2
 8000d90:	d139      	bne.n	8000e06 <ThermopileTask+0xb6>
					tempData.nose[i].tick_ms = HAL_GetTick();
 8000d92:	f000 f95b 	bl	800104c <HAL_GetTick>
 8000d96:	492e      	ldr	r1, [pc, #184]	; (8000e50 <ThermopileTask+0x100>)
 8000d98:	1d6c      	adds	r4, r5, #5
 8000d9a:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8000d9e:	6058      	str	r0, [r3, #4]
					tempData.nose[i].thermopile = buffer.thermopile;
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <ThermopileTask+0xf8>)
 8000da2:	8810      	ldrh	r0, [r2, #0]
 8000da4:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
					tempData.nose[i].thermistor = buffer.nose_thermistor;
 8000da8:	8892      	ldrh	r2, [r2, #4]
 8000daa:	805a      	strh	r2, [r3, #2]
					SwitchTemperatureSensor(temple);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff67 	bl	8000c80 <SwitchTemperatureSensor>
					HAL_Delay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 f950 	bl	8001058 <HAL_Delay>
					while( HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 3) != HAL_OK);
 8000db8:	2203      	movs	r2, #3
 8000dba:	4923      	ldr	r1, [pc, #140]	; (8000e48 <ThermopileTask+0xf8>)
 8000dbc:	4823      	ldr	r0, [pc, #140]	; (8000e4c <ThermopileTask+0xfc>)
 8000dbe:	f000 fb95 	bl	80014ec <HAL_ADC_Start_DMA>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d1f8      	bne.n	8000db8 <ThermopileTask+0x68>
					evt = osThreadFlagsWait (0x00000006U, osFlagsWaitAny, osWaitForever);
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2006      	movs	r0, #6
 8000dce:	f003 fca1 	bl	8004714 <osThreadFlagsWait>
 8000dd2:	4604      	mov	r4, r0
					if( (evt & 0x00000002U) == 0x00000002U) break;
 8000dd4:	f010 0f02 	tst.w	r0, #2
 8000dd8:	d115      	bne.n	8000e06 <ThermopileTask+0xb6>
					tempData.temple[i].tick_ms = HAL_GetTick();
 8000dda:	f000 f937 	bl	800104c <HAL_GetTick>
 8000dde:	491c      	ldr	r1, [pc, #112]	; (8000e50 <ThermopileTask+0x100>)
 8000de0:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8000de4:	6058      	str	r0, [r3, #4]
					tempData.temple[i].thermopile = buffer.thermopile;
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <ThermopileTask+0xf8>)
 8000de8:	8810      	ldrh	r0, [r2, #0]
 8000dea:	f821 0035 	strh.w	r0, [r1, r5, lsl #3]
					tempData.temple[i].thermistor = buffer.temple_thermistor;
 8000dee:	8852      	ldrh	r2, [r2, #2]
 8000df0:	805a      	strh	r2, [r3, #2]
				for(int i = 0; i < NUM_THERM_SAMPLES; i++){
 8000df2:	3501      	adds	r5, #1
 8000df4:	2d04      	cmp	r5, #4
 8000df6:	dc06      	bgt.n	8000e06 <ThermopileTask+0xb6>
					SwitchTemperatureSensor(nose);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff ff41 	bl	8000c80 <SwitchTemperatureSensor>
					HAL_Delay(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f000 f92a 	bl	8001058 <HAL_Delay>
					while( HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer, 3) != HAL_OK)
 8000e04:	e7bb      	b.n	8000d7e <ThermopileTask+0x2e>
				if( (evt & 0x00000002U) == 0x00000002U){
 8000e06:	f014 0f02 	tst.w	r4, #2
 8000e0a:	d108      	bne.n	8000e1e <ThermopileTask+0xce>
					osMessageQueuePut(thermMsgQueueHandle, &tempData, 0U, 0);
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	490f      	ldr	r1, [pc, #60]	; (8000e50 <ThermopileTask+0x100>)
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <ThermopileTask+0x104>)
 8000e14:	6800      	ldr	r0, [r0, #0]
 8000e16:	f003 fd65 	bl	80048e4 <osMessageQueuePut>
				for(int i = 0; i < NUM_THERM_SAMPLES; i++){
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	e7ea      	b.n	8000df4 <ThermopileTask+0xa4>
				HAL_ADC_Stop_DMA(&hadc1);
 8000e1e:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <ThermopileTask+0xfc>)
 8000e20:	4620      	mov	r0, r4
 8000e22:	f000 fbcf 	bl	80015c4 <HAL_ADC_Stop_DMA>
				HAL_ADC_Stop(&hadc1);
 8000e26:	4620      	mov	r0, r4
 8000e28:	f000 fb3a 	bl	80014a0 <HAL_ADC_Stop>
				HAL_TIM_Base_Stop(&htim6);
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <ThermopileTask+0xf4>)
 8000e2e:	f003 f88b 	bl	8003f48 <HAL_TIM_Base_Stop>
				osMessageQueueReset(thermMsgQueueHandle);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <ThermopileTask+0x104>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	f003 fe13 	bl	8004a60 <osMessageQueueReset>
				osThreadFlagsClear(0x0000000EU);
 8000e3a:	200e      	movs	r0, #14
 8000e3c:	f003 fc2c 	bl	8004698 <osThreadFlagsClear>
}
 8000e40:	bd38      	pop	{r3, r4, r5, pc}
 8000e42:	bf00      	nop
 8000e44:	20002410 	.word	0x20002410
 8000e48:	20000030 	.word	0x20000030
 8000e4c:	200020c4 	.word	0x200020c4
 8000e50:	200023c0 	.word	0x200023c0
 8000e54:	20002164 	.word	0x20002164

08000e58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e58:	b500      	push	{lr}
 8000e5a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8000e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e62:	930c      	str	r3, [sp, #48]	; 0x30
 8000e64:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e66:	9307      	str	r3, [sp, #28]
 8000e68:	9308      	str	r3, [sp, #32]
 8000e6a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	9303      	str	r3, [sp, #12]
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	9305      	str	r3, [sp, #20]
 8000e78:	9306      	str	r3, [sp, #24]

  htim2.Instance = TIM2;
 8000e7a:	4822      	ldr	r0, [pc, #136]	; (8000f04 <MX_TIM2_Init+0xac>)
 8000e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e80:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 31999;
 8000e82:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000e86:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4;
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e94:	f003 f998 	bl	80041c8 <HAL_TIM_Base_Init>
 8000e98:	bb20      	cbnz	r0, 8000ee4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	a90e      	add	r1, sp, #56	; 0x38
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <MX_TIM2_Init+0xac>)
 8000ea6:	f003 fa49 	bl	800433c <HAL_TIM_ConfigClockSource>
 8000eaa:	b9f0      	cbnz	r0, 8000eea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000eac:	4815      	ldr	r0, [pc, #84]	; (8000f04 <MX_TIM2_Init+0xac>)
 8000eae:	f003 f9a4 	bl	80041fa <HAL_TIM_OC_Init>
 8000eb2:	b9e8      	cbnz	r0, 8000ef0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ebc:	a907      	add	r1, sp, #28
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_TIM2_Init+0xac>)
 8000ec0:	f003 faaa 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	b9b8      	cbnz	r0, 8000ef6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 10;
 8000eca:	220a      	movs	r2, #10
 8000ecc:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ece:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	4669      	mov	r1, sp
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <MX_TIM2_Init+0xac>)
 8000ed8:	f003 f9e8 	bl	80042ac <HAL_TIM_OC_ConfigChannel>
 8000edc:	b970      	cbnz	r0, 8000efc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
  }

}
 8000ede:	b00f      	add	sp, #60	; 0x3c
 8000ee0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ee4:	f7ff fc7e 	bl	80007e4 <Error_Handler>
 8000ee8:	e7d7      	b.n	8000e9a <MX_TIM2_Init+0x42>
    Error_Handler();
 8000eea:	f7ff fc7b 	bl	80007e4 <Error_Handler>
 8000eee:	e7dd      	b.n	8000eac <MX_TIM2_Init+0x54>
    Error_Handler();
 8000ef0:	f7ff fc78 	bl	80007e4 <Error_Handler>
 8000ef4:	e7de      	b.n	8000eb4 <MX_TIM2_Init+0x5c>
    Error_Handler();
 8000ef6:	f7ff fc75 	bl	80007e4 <Error_Handler>
 8000efa:	e7e4      	b.n	8000ec6 <MX_TIM2_Init+0x6e>
    Error_Handler();
 8000efc:	f7ff fc72 	bl	80007e4 <Error_Handler>
}
 8000f00:	e7ed      	b.n	8000ede <MX_TIM2_Init+0x86>
 8000f02:	bf00      	nop
 8000f04:	20002450 	.word	0x20002450

08000f08 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f08:	b500      	push	{lr}
 8000f0a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	9303      	str	r3, [sp, #12]

  htim6.Instance = TIM6;
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <MX_TIM6_Init+0x4c>)
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <MX_TIM6_Init+0x50>)
 8000f18:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 31999;
 8000f1a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000f1e:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 49;
 8000f22:	2231      	movs	r2, #49	; 0x31
 8000f24:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f28:	f003 f94e 	bl	80041c8 <HAL_TIM_Base_Init>
 8000f2c:	b958      	cbnz	r0, 8000f46 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f2e:	2320      	movs	r3, #32
 8000f30:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f36:	a901      	add	r1, sp, #4
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_TIM6_Init+0x4c>)
 8000f3a:	f003 fa6d 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	b928      	cbnz	r0, 8000f4c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
  }

}
 8000f40:	b005      	add	sp, #20
 8000f42:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f46:	f7ff fc4d 	bl	80007e4 <Error_Handler>
 8000f4a:	e7f0      	b.n	8000f2e <MX_TIM6_Init+0x26>
    Error_Handler();
 8000f4c:	f7ff fc4a 	bl	80007e4 <Error_Handler>
}
 8000f50:	e7f6      	b.n	8000f40 <MX_TIM6_Init+0x38>
 8000f52:	bf00      	nop
 8000f54:	20002410 	.word	0x20002410
 8000f58:	40001000 	.word	0x40001000

08000f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f5c:	b500      	push	{lr}
 8000f5e:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM2)
 8000f60:	6803      	ldr	r3, [r0, #0]
 8000f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f66:	d005      	beq.n	8000f74 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM6)
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_TIM_Base_MspInit+0x58>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d016      	beq.n	8000f9c <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f6e:	b003      	add	sp, #12
 8000f70:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f74:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	61da      	str	r2, [r3, #28]
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	201c      	movs	r0, #28
 8000f90:	f000 fd06 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f94:	201c      	movs	r0, #28
 8000f96:	f000 fd37 	bl	8001a08 <HAL_NVIC_EnableIRQ>
 8000f9a:	e7e8      	b.n	8000f6e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_TIM_Base_MspInit+0x5c>)
 8000f9e:	69da      	ldr	r2, [r3, #28]
 8000fa0:	f042 0210 	orr.w	r2, r2, #16
 8000fa4:	61da      	str	r2, [r3, #28]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	9b01      	ldr	r3, [sp, #4]
}
 8000fb0:	e7dd      	b.n	8000f6e <HAL_TIM_Base_MspInit+0x12>
 8000fb2:	bf00      	nop
 8000fb4:	40001000 	.word	0x40001000
 8000fb8:	40021000 	.word	0x40021000

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fc2:	e003      	b.n	8000fcc <LoopCopyDataInit>

08000fc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fca:	3104      	adds	r1, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fd4:	d3f6      	bcc.n	8000fc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fd8:	e002      	b.n	8000fe0 <LoopFillZerobss>

08000fda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fdc:	f842 3b04 	str.w	r3, [r2], #4

08000fe0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <LoopForever+0x16>)
	cmp	r2, r3
 8000fe2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fe4:	d3f9      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fe6:	f7ff fe1b 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f005 fcc7 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fbd1 	bl	8000794 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff4:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000ff8:	08006a94 	.word	0x08006a94
	ldr	r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001000:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001004:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001008:	200024d4 	.word	0x200024d4

0800100c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_IRQHandler>
	...

08001010 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x20>)
 8001014:	6813      	ldr	r3, [r2, #0]
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 fcad 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff fd92 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fd70 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800102c:	2000      	movs	r0, #0
 800102e:	bd08      	pop	{r3, pc}
 8001030:	40022000 	.word	0x40022000

08001034 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x10>)
 8001036:	6811      	ldr	r1, [r2, #0]
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_IncTick+0x14>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	440b      	add	r3, r1
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20002490 	.word	0x20002490
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800104c:	4b01      	ldr	r3, [pc, #4]	; (8001054 <HAL_GetTick+0x8>)
 800104e:	6818      	ldr	r0, [r3, #0]
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20002490 	.word	0x20002490

08001058 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b538      	push	{r3, r4, r5, lr}
 800105a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff fff6 	bl	800104c <HAL_GetTick>
 8001060:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001066:	d002      	beq.n	800106e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <HAL_Delay+0x24>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800106e:	f7ff ffed 	bl	800104c <HAL_GetTick>
 8001072:	1b40      	subs	r0, r0, r5
 8001074:	42a0      	cmp	r0, r4
 8001076:	d3fa      	bcc.n	800106e <HAL_Delay+0x16>
  {
  }
}
 8001078:	bd38      	pop	{r3, r4, r5, pc}
 800107a:	bf00      	nop
 800107c:	20000004 	.word	0x20000004

08001080 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001080:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001082:	6802      	ldr	r2, [r0, #0]
 8001084:	6893      	ldr	r3, [r2, #8]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d001      	beq.n	8001092 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800108e:	2000      	movs	r0, #0
}
 8001090:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	f013 0f01 	tst.w	r3, #1
 8001098:	d02f      	beq.n	80010fa <ADC_Disable+0x7a>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800109a:	6893      	ldr	r3, [r2, #8]
 800109c:	f003 030d 	and.w	r3, r3, #13
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d009      	beq.n	80010b8 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80010b4:	2001      	movs	r0, #1
 80010b6:	e7eb      	b.n	8001090 <ADC_Disable+0x10>
 80010b8:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 80010ba:	6893      	ldr	r3, [r2, #8]
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6093      	str	r3, [r2, #8]
 80010c2:	6803      	ldr	r3, [r0, #0]
 80010c4:	2203      	movs	r2, #3
 80010c6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80010c8:	f7ff ffc0 	bl	800104c <HAL_GetTick>
 80010cc:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f013 0f01 	tst.w	r3, #1
 80010d6:	d00e      	beq.n	80010f6 <ADC_Disable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010d8:	f7ff ffb8 	bl	800104c <HAL_GetTick>
 80010dc:	1b40      	subs	r0, r0, r5
 80010de:	2802      	cmp	r0, #2
 80010e0:	d9f5      	bls.n	80010ce <ADC_Disable+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	e7cc      	b.n	8001090 <ADC_Disable+0x10>
  return HAL_OK;
 80010f6:	2000      	movs	r0, #0
 80010f8:	e7ca      	b.n	8001090 <ADC_Disable+0x10>
 80010fa:	2000      	movs	r0, #0
 80010fc:	e7c8      	b.n	8001090 <ADC_Disable+0x10>
	...

08001100 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	f012 0f0c 	tst.w	r2, #12
 8001108:	d061      	beq.n	80011ce <ADC_ConversionStop+0xce>
{
 800110a:	b570      	push	{r4, r5, r6, lr}
 800110c:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001114:	d004      	beq.n	8001120 <ADC_ConversionStop+0x20>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001116:	8b00      	ldrh	r0, [r0, #24]
 8001118:	f240 1201 	movw	r2, #257	; 0x101
 800111c:	4290      	cmp	r0, r2
 800111e:	d042      	beq.n	80011a6 <ADC_ConversionStop+0xa6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001120:	2960      	cmp	r1, #96	; 0x60
 8001122:	d00c      	beq.n	800113e <ADC_ConversionStop+0x3e>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f012 0f04 	tst.w	r2, #4
 800112c:	d007      	beq.n	800113e <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800112e:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001130:	f012 0f02 	tst.w	r2, #2
 8001134:	d103      	bne.n	800113e <ADC_ConversionStop+0x3e>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	f042 0210 	orr.w	r2, r2, #16
 800113c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800113e:	290c      	cmp	r1, #12
 8001140:	d00c      	beq.n	800115c <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f012 0f08 	tst.w	r2, #8
 800114a:	d007      	beq.n	800115c <ADC_ConversionStop+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800114c:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800114e:	f012 0f02 	tst.w	r2, #2
 8001152:	d103      	bne.n	800115c <ADC_ConversionStop+0x5c>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	f042 0220 	orr.w	r2, r2, #32
 800115a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800115c:	2960      	cmp	r1, #96	; 0x60
 800115e:	d032      	beq.n	80011c6 <ADC_ConversionStop+0xc6>
 8001160:	296c      	cmp	r1, #108	; 0x6c
 8001162:	d12e      	bne.n	80011c2 <ADC_ConversionStop+0xc2>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001164:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001166:	f7ff ff71 	bl	800104c <HAL_GetTick>
 800116a:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	422b      	tst	r3, r5
 8001172:	d02a      	beq.n	80011ca <ADC_ConversionStop+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001174:	f7ff ff6a 	bl	800104c <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	280b      	cmp	r0, #11
 800117c:	d9f6      	bls.n	800116c <ADC_ConversionStop+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6463      	str	r3, [r4, #68]	; 0x44
        
        return HAL_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	e01c      	b.n	80011cc <ADC_ConversionStop+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6463      	str	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
 80011a4:	e012      	b.n	80011cc <ADC_ConversionStop+0xcc>
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011a6:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	f011 0f40 	tst.w	r1, #64	; 0x40
 80011ae:	d104      	bne.n	80011ba <ADC_ConversionStop+0xba>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80011b0:	4908      	ldr	r1, [pc, #32]	; (80011d4 <ADC_ConversionStop+0xd4>)
 80011b2:	428a      	cmp	r2, r1
 80011b4:	d8ed      	bhi.n	8001192 <ADC_ConversionStop+0x92>
        Conversion_Timeout_CPU_cycles ++;
 80011b6:	3201      	adds	r2, #1
 80011b8:	e7f6      	b.n	80011a8 <ADC_ConversionStop+0xa8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 80011be:	210c      	movs	r1, #12
 80011c0:	e7b0      	b.n	8001124 <ADC_ConversionStop+0x24>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80011c2:	2504      	movs	r5, #4
        break;
 80011c4:	e7cf      	b.n	8001166 <ADC_ConversionStop+0x66>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80011c6:	2508      	movs	r5, #8
 80011c8:	e7cd      	b.n	8001166 <ADC_ConversionStop+0x66>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011ca:	2000      	movs	r0, #0
}
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80011ce:	2000      	movs	r0, #0
}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	000993ff 	.word	0x000993ff

080011d8 <ADC_Enable>:
{
 80011d8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011da:	6802      	ldr	r2, [r0, #0]
 80011dc:	6893      	ldr	r3, [r2, #8]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d00d      	beq.n	8001202 <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011e6:	6891      	ldr	r1, [r2, #8]
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <ADC_Enable+0x74>)
 80011ea:	4219      	tst	r1, r3
 80011ec:	d00f      	beq.n	800120e <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6403      	str	r3, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6443      	str	r3, [r0, #68]	; 0x44
      return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
}
 8001200:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f013 0f01 	tst.w	r3, #1
 8001208:	d0ed      	beq.n	80011e6 <ADC_Enable+0xe>
  return HAL_OK;
 800120a:	2000      	movs	r0, #0
 800120c:	e7f8      	b.n	8001200 <ADC_Enable+0x28>
 800120e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001210:	6893      	ldr	r3, [r2, #8]
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001218:	f7ff ff18 	bl	800104c <HAL_GetTick>
 800121c:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f013 0f01 	tst.w	r3, #1
 8001226:	d10e      	bne.n	8001246 <ADC_Enable+0x6e>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001228:	f7ff ff10 	bl	800104c <HAL_GetTick>
 800122c:	1b40      	subs	r0, r0, r5
 800122e:	2802      	cmp	r0, #2
 8001230:	d9f5      	bls.n	800121e <ADC_Enable+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
 8001244:	e7dc      	b.n	8001200 <ADC_Enable+0x28>
  return HAL_OK;
 8001246:	2000      	movs	r0, #0
 8001248:	e7da      	b.n	8001200 <ADC_Enable+0x28>
 800124a:	bf00      	nop
 800124c:	8000003f 	.word	0x8000003f

08001250 <ADC_DMAError>:
{
 8001250:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001252:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001254:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125a:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800125c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001264:	f7ff fd04 	bl	8000c70 <HAL_ADC_ErrorCallback>
}
 8001268:	bd08      	pop	{r3, pc}

0800126a <ADC_DMAHalfConvCplt>:
{
 800126a:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800126c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800126e:	f7ff fcfd 	bl	8000c6c <HAL_ADC_ConvHalfCpltCallback>
}
 8001272:	bd08      	pop	{r3, pc}

08001274 <ADC_DMAConvCplt>:
{
 8001274:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001276:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127a:	f012 0f50 	tst.w	r2, #80	; 0x50
 800127e:	d003      	beq.n	8001288 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4798      	blx	r3
}
 8001286:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68d2      	ldr	r2, [r2, #12]
 8001294:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001298:	d10d      	bne.n	80012b6 <ADC_DMAConvCplt+0x42>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800129a:	7e5a      	ldrb	r2, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800129c:	b95a      	cbnz	r2, 80012b6 <ADC_DMAConvCplt+0x42>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800129e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80012ac:	d103      	bne.n	80012b6 <ADC_DMAConvCplt+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fcc0 	bl	8000c3c <HAL_ADC_ConvCpltCallback>
 80012bc:	e7e3      	b.n	8001286 <ADC_DMAConvCplt+0x12>
	...

080012c0 <HAL_ADC_Init>:
{
 80012c0:	b530      	push	{r4, r5, lr}
 80012c2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80012c8:	2800      	cmp	r0, #0
 80012ca:	f000 80df 	beq.w	800148c <HAL_ADC_Init+0x1cc>
 80012ce:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012d2:	f013 0f10 	tst.w	r3, #16
 80012d6:	d152      	bne.n	800137e <HAL_ADC_Init+0xbe>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80012d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012da:	b1ab      	cbz	r3, 8001308 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80012e6:	d003      	beq.n	80012f0 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012e8:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012ea:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80012ee:	d047      	beq.n	8001380 <HAL_ADC_Init+0xc0>
      ADC_STATE_CLR_SET(hadc->State,
 80012f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f2:	f023 0312 	bic.w	r3, r3, #18
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6463      	str	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 8001304:	2001      	movs	r0, #1
 8001306:	e03b      	b.n	8001380 <HAL_ADC_Init+0xc0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001308:	6443      	str	r3, [r0, #68]	; 0x44
      hadc->InjectionConfig.ChannelCount = 0U;
 800130a:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800130c:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 800130e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001312:	f7fe ffb5 	bl	8000280 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800131e:	d001      	beq.n	8001324 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001320:	2000      	movs	r0, #0
 8001322:	e7dc      	b.n	80012de <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff feab 	bl	8001080 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800132a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800132c:	f013 0f10 	tst.w	r3, #16
 8001330:	d1d5      	bne.n	80012de <HAL_ADC_Init+0x1e>
 8001332:	2800      	cmp	r0, #0
 8001334:	d1d3      	bne.n	80012de <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8001336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001338:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800133c:	f023 0302 	bic.w	r3, r3, #2
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001346:	6822      	ldr	r2, [r4, #0]
 8001348:	6893      	ldr	r3, [r2, #8]
 800134a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800134e:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	6893      	ldr	r3, [r2, #8]
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_ADC_Init+0x1d0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <HAL_ADC_Init+0x1d4>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	0c9b      	lsrs	r3, r3, #18
 8001366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800136a:	005a      	lsls	r2, r3, #1
 800136c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800136e:	e002      	b.n	8001376 <HAL_ADC_Init+0xb6>
            wait_loop_index--;
 8001370:	9b01      	ldr	r3, [sp, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001376:	9b01      	ldr	r3, [sp, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <HAL_ADC_Init+0xb0>
 800137c:	e7af      	b.n	80012de <HAL_ADC_Init+0x1e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001382:	f013 0f10 	tst.w	r3, #16
 8001386:	d178      	bne.n	800147a <HAL_ADC_Init+0x1ba>
 8001388:	2800      	cmp	r0, #0
 800138a:	d176      	bne.n	800147a <HAL_ADC_Init+0x1ba>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800138c:	6821      	ldr	r1, [r4, #0]
 800138e:	688a      	ldr	r2, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001390:	f012 0204 	ands.w	r2, r2, #4
 8001394:	d171      	bne.n	800147a <HAL_ADC_Init+0x1ba>
    ADC_STATE_CLR_SET(hadc->State,
 8001396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001398:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6423      	str	r3, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013a2:	688b      	ldr	r3, [r1, #8]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d045      	beq.n	8001438 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013ac:	493a      	ldr	r1, [pc, #232]	; (8001498 <HAL_ADC_Init+0x1d8>)
 80013ae:	688b      	ldr	r3, [r1, #8]
 80013b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80013b4:	6865      	ldr	r5, [r4, #4]
 80013b6:	432b      	orrs	r3, r5
 80013b8:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013ba:	7e61      	ldrb	r1, [r4, #25]
 80013bc:	034b      	lsls	r3, r1, #13
 80013be:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80013c0:	2d01      	cmp	r5, #1
 80013c2:	d001      	beq.n	80013c8 <HAL_ADC_Init+0x108>
 80013c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c8:	4313      	orrs	r3, r2
 80013ca:	68e2      	ldr	r2, [r4, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	68a2      	ldr	r2, [r4, #8]
 80013d0:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d2:	f894 2020 	ldrb.w	r2, [r4, #32]
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d033      	beq.n	8001442 <HAL_ADC_Init+0x182>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013dc:	2a01      	cmp	r2, #1
 80013de:	d002      	beq.n	80013e6 <HAL_ADC_Init+0x126>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80013e2:	430a      	orrs	r2, r1
 80013e4:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	6891      	ldr	r1, [r2, #8]
 80013ea:	f011 0f0c 	tst.w	r1, #12
 80013ee:	d10c      	bne.n	800140a <HAL_ADC_Init+0x14a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013f0:	68d1      	ldr	r1, [r2, #12]
 80013f2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80013f6:	f021 0102 	bic.w	r1, r1, #2
 80013fa:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013fc:	7e21      	ldrb	r1, [r4, #24]
 80013fe:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001402:	0052      	lsls	r2, r2, #1
 8001404:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001408:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800140a:	6821      	ldr	r1, [r4, #0]
 800140c:	68cd      	ldr	r5, [r1, #12]
 800140e:	4a23      	ldr	r2, [pc, #140]	; (800149c <HAL_ADC_Init+0x1dc>)
 8001410:	402a      	ands	r2, r5
 8001412:	4313      	orrs	r3, r2
 8001414:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001416:	6923      	ldr	r3, [r4, #16]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d025      	beq.n	8001468 <HAL_ADC_Init+0x1a8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001420:	f023 030f 	bic.w	r3, r3, #15
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001426:	2300      	movs	r3, #0
 8001428:	6463      	str	r3, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800142a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800142c:	f023 0303 	bic.w	r3, r3, #3
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6423      	str	r3, [r4, #64]	; 0x40
 8001436:	e027      	b.n	8001488 <HAL_ADC_Init+0x1c8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001438:	680b      	ldr	r3, [r1, #0]
 800143a:	f013 0f01 	tst.w	r3, #1
 800143e:	d1bc      	bne.n	80013ba <HAL_ADC_Init+0xfa>
 8001440:	e7b4      	b.n	80013ac <HAL_ADC_Init+0xec>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001442:	b931      	cbnz	r1, 8001452 <HAL_ADC_Init+0x192>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001444:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001446:	3a01      	subs	r2, #1
 8001448:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	e7c3      	b.n	80013da <HAL_ADC_Init+0x11a>
        ADC_STATE_CLR_SET(hadc->State,
 8001452:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001454:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001458:	f042 0220 	orr.w	r2, r2, #32
 800145c:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	6462      	str	r2, [r4, #68]	; 0x44
 8001466:	e7b8      	b.n	80013da <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001468:	6821      	ldr	r1, [r4, #0]
 800146a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800146c:	f023 030f 	bic.w	r3, r3, #15
 8001470:	69e2      	ldr	r2, [r4, #28]
 8001472:	3a01      	subs	r2, #1
 8001474:	4313      	orrs	r3, r2
 8001476:	630b      	str	r3, [r1, #48]	; 0x30
 8001478:	e7d5      	b.n	8001426 <HAL_ADC_Init+0x166>
    ADC_STATE_CLR_SET(hadc->State,
 800147a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800147c:	f023 0312 	bic.w	r3, r3, #18
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6423      	str	r3, [r4, #64]	; 0x40
    tmp_hal_status = HAL_ERROR; 
 8001486:	2001      	movs	r0, #1
}
 8001488:	b003      	add	sp, #12
 800148a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800148c:	2001      	movs	r0, #1
 800148e:	e7fb      	b.n	8001488 <HAL_ADC_Init+0x1c8>
 8001490:	20000000 	.word	0x20000000
 8001494:	431bde83 	.word	0x431bde83
 8001498:	50000300 	.word	0x50000300
 800149c:	fff0c007 	.word	0xfff0c007

080014a0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80014a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d01d      	beq.n	80014e4 <HAL_ADC_Stop+0x44>
{
 80014a8:	b510      	push	{r4, lr}
 80014aa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80014ac:	2301      	movs	r3, #1
 80014ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80014b2:	216c      	movs	r1, #108	; 0x6c
 80014b4:	f7ff fe24 	bl	8001100 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80014b8:	4603      	mov	r3, r0
 80014ba:	b120      	cbz	r0, 80014c6 <HAL_ADC_Stop+0x26>
  __HAL_UNLOCK(hadc);
 80014bc:	2200      	movs	r2, #0
 80014be:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fdda 	bl	8001080 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80014cc:	4603      	mov	r3, r0
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d1f4      	bne.n	80014bc <HAL_ADC_Stop+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 80014d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014d4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	6422      	str	r2, [r4, #64]	; 0x40
 80014e2:	e7eb      	b.n	80014bc <HAL_ADC_Stop+0x1c>
  __HAL_LOCK(hadc);
 80014e4:	2302      	movs	r3, #2
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_ADC_Start_DMA>:
{
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ee:	6804      	ldr	r4, [r0, #0]
 80014f0:	68a4      	ldr	r4, [r4, #8]
 80014f2:	f014 0f04 	tst.w	r4, #4
 80014f6:	d15a      	bne.n	80015ae <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 80014f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d059      	beq.n	80015b4 <HAL_ADC_Start_DMA+0xc8>
 8001500:	4616      	mov	r6, r2
 8001502:	460f      	mov	r7, r1
 8001504:	4604      	mov	r4, r0
 8001506:	2301      	movs	r3, #1
 8001508:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      tmp_hal_status = ADC_Enable(hadc);
 800150c:	f7ff fe64 	bl	80011d8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001510:	4605      	mov	r5, r0
 8001512:	2800      	cmp	r0, #0
 8001514:	d147      	bne.n	80015a6 <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 8001516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001518:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6423      	str	r3, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001528:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800152c:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001536:	d005      	beq.n	8001544 <HAL_ADC_Start_DMA+0x58>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800153a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800153e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001542:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001546:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800154a:	d029      	beq.n	80015a0 <HAL_ADC_Start_DMA+0xb4>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800154c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800154e:	f023 0306 	bic.w	r3, r3, #6
 8001552:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001554:	2300      	movs	r3, #0
 8001556:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800155a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800155c:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_ADC_Start_DMA+0xcc>)
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_ADC_Start_DMA+0xd0>)
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001568:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <HAL_ADC_Start_DMA+0xd4>)
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	221c      	movs	r2, #28
 8001570:	601a      	str	r2, [r3, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	6853      	ldr	r3, [r2, #4]
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800157c:	6822      	ldr	r2, [r4, #0]
 800157e:	68d3      	ldr	r3, [r2, #12]
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001586:	6821      	ldr	r1, [r4, #0]
 8001588:	4633      	mov	r3, r6
 800158a:	463a      	mov	r2, r7
 800158c:	3140      	adds	r1, #64	; 0x40
 800158e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001590:	f000 fa98 	bl	8001ac4 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001594:	6822      	ldr	r2, [r4, #0]
 8001596:	6893      	ldr	r3, [r2, #8]
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6093      	str	r3, [r2, #8]
 800159e:	e007      	b.n	80015b0 <HAL_ADC_Start_DMA+0xc4>
          ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	2300      	movs	r3, #0
 80015a2:	6463      	str	r3, [r4, #68]	; 0x44
 80015a4:	e7d6      	b.n	8001554 <HAL_ADC_Start_DMA+0x68>
        __HAL_UNLOCK(hadc);
 80015a6:	2300      	movs	r3, #0
 80015a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80015ac:	e000      	b.n	80015b0 <HAL_ADC_Start_DMA+0xc4>
    tmp_hal_status = HAL_BUSY;
 80015ae:	2502      	movs	r5, #2
}
 80015b0:	4628      	mov	r0, r5
 80015b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80015b4:	2502      	movs	r5, #2
 80015b6:	e7fb      	b.n	80015b0 <HAL_ADC_Start_DMA+0xc4>
 80015b8:	08001275 	.word	0x08001275
 80015bc:	0800126b 	.word	0x0800126b
 80015c0:	08001251 	.word	0x08001251

080015c4 <HAL_ADC_Stop_DMA>:
{  
 80015c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80015c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d034      	beq.n	8001638 <HAL_ADC_Stop_DMA+0x74>
 80015ce:	4604      	mov	r4, r0
 80015d0:	2301      	movs	r3, #1
 80015d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80015d6:	216c      	movs	r1, #108	; 0x6c
 80015d8:	f7ff fd92 	bl	8001100 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80015dc:	4605      	mov	r5, r0
 80015de:	b120      	cbz	r0, 80015ea <HAL_ADC_Stop_DMA+0x26>
  __HAL_UNLOCK(hadc);
 80015e0:	2300      	movs	r3, #0
 80015e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80015e6:	4628      	mov	r0, r5
 80015e8:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	68d3      	ldr	r3, [r2, #12]
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80015f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015f6:	f000 fa9f 	bl	8001b38 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 80015fa:	4605      	mov	r5, r0
 80015fc:	b118      	cbz	r0, 8001606 <HAL_ADC_Stop_DMA+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80015fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001604:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001606:	6822      	ldr	r2, [r4, #0]
 8001608:	6853      	ldr	r3, [r2, #4]
 800160a:	f023 0310 	bic.w	r3, r3, #16
 800160e:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8001610:	b975      	cbnz	r5, 8001630 <HAL_ADC_Stop_DMA+0x6c>
      tmp_hal_status = ADC_Disable(hadc);
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fd34 	bl	8001080 <ADC_Disable>
 8001618:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 800161a:	2d00      	cmp	r5, #0
 800161c:	d1e0      	bne.n	80015e0 <HAL_ADC_Stop_DMA+0x1c>
      ADC_STATE_CLR_SET(hadc->State,
 800161e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001620:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6423      	str	r3, [r4, #64]	; 0x40
 800162e:	e7d7      	b.n	80015e0 <HAL_ADC_Stop_DMA+0x1c>
      ADC_Disable(hadc);
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fd25 	bl	8001080 <ADC_Disable>
 8001636:	e7f0      	b.n	800161a <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8001638:	2502      	movs	r5, #2
 800163a:	e7d4      	b.n	80015e6 <HAL_ADC_Stop_DMA+0x22>

0800163c <HAL_ADC_ConfigChannel>:
{
 800163c:	b430      	push	{r4, r5}
 800163e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001640:	2200      	movs	r2, #0
 8001642:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001644:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001648:	2a01      	cmp	r2, #1
 800164a:	f000 818e 	beq.w	800196a <HAL_ADC_ConfigChannel+0x32e>
 800164e:	4603      	mov	r3, r0
 8001650:	2201      	movs	r2, #1
 8001652:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001656:	6800      	ldr	r0, [r0, #0]
 8001658:	6882      	ldr	r2, [r0, #8]
 800165a:	f012 0f04 	tst.w	r2, #4
 800165e:	f040 8179 	bne.w	8001954 <HAL_ADC_ConfigChannel+0x318>
    if (sConfig->Rank < 5U)
 8001662:	684a      	ldr	r2, [r1, #4]
 8001664:	2a04      	cmp	r2, #4
 8001666:	d831      	bhi.n	80016cc <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8001668:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800166a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800166e:	0055      	lsls	r5, r2, #1
 8001670:	221f      	movs	r2, #31
 8001672:	40aa      	lsls	r2, r5
 8001674:	ea24 0202 	bic.w	r2, r4, r2
 8001678:	680c      	ldr	r4, [r1, #0]
 800167a:	40ac      	lsls	r4, r5
 800167c:	4322      	orrs	r2, r4
 800167e:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	6882      	ldr	r2, [r0, #8]
 8001684:	f012 0f0c 	tst.w	r2, #12
 8001688:	d168      	bne.n	800175c <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800168a:	680a      	ldr	r2, [r1, #0]
 800168c:	2a09      	cmp	r2, #9
 800168e:	d94e      	bls.n	800172e <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001690:	6984      	ldr	r4, [r0, #24]
 8001692:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001696:	3a1e      	subs	r2, #30
 8001698:	2507      	movs	r5, #7
 800169a:	4095      	lsls	r5, r2
 800169c:	ea24 0405 	bic.w	r4, r4, r5
 80016a0:	688d      	ldr	r5, [r1, #8]
 80016a2:	fa05 f202 	lsl.w	r2, r5, r2
 80016a6:	4322      	orrs	r2, r4
 80016a8:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016aa:	6948      	ldr	r0, [r1, #20]
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	68e2      	ldr	r2, [r4, #12]
 80016b0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80016b4:	0052      	lsls	r2, r2, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80016ba:	6908      	ldr	r0, [r1, #16]
 80016bc:	3801      	subs	r0, #1
 80016be:	2803      	cmp	r0, #3
 80016c0:	f200 808b 	bhi.w	80017da <HAL_ADC_ConfigChannel+0x19e>
 80016c4:	e8df f000 	tbb	[pc, r0]
 80016c8:	7e736840 	.word	0x7e736840
    else if (sConfig->Rank < 10U)
 80016cc:	2a09      	cmp	r2, #9
 80016ce:	d80e      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80016d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80016d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016d6:	0055      	lsls	r5, r2, #1
 80016d8:	3d1e      	subs	r5, #30
 80016da:	221f      	movs	r2, #31
 80016dc:	40aa      	lsls	r2, r5
 80016de:	ea24 0202 	bic.w	r2, r4, r2
 80016e2:	680c      	ldr	r4, [r1, #0]
 80016e4:	fa04 f505 	lsl.w	r5, r4, r5
 80016e8:	432a      	orrs	r2, r5
 80016ea:	6342      	str	r2, [r0, #52]	; 0x34
 80016ec:	e7c8      	b.n	8001680 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80016ee:	2a0e      	cmp	r2, #14
 80016f0:	d80e      	bhi.n	8001710 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80016f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016f8:	0055      	lsls	r5, r2, #1
 80016fa:	3d3c      	subs	r5, #60	; 0x3c
 80016fc:	221f      	movs	r2, #31
 80016fe:	40aa      	lsls	r2, r5
 8001700:	ea24 0202 	bic.w	r2, r4, r2
 8001704:	680c      	ldr	r4, [r1, #0]
 8001706:	fa04 f505 	lsl.w	r5, r4, r5
 800170a:	432a      	orrs	r2, r5
 800170c:	6382      	str	r2, [r0, #56]	; 0x38
 800170e:	e7b7      	b.n	8001680 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001710:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001712:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001716:	0055      	lsls	r5, r2, #1
 8001718:	3d5a      	subs	r5, #90	; 0x5a
 800171a:	221f      	movs	r2, #31
 800171c:	40aa      	lsls	r2, r5
 800171e:	ea24 0202 	bic.w	r2, r4, r2
 8001722:	680c      	ldr	r4, [r1, #0]
 8001724:	fa04 f505 	lsl.w	r5, r4, r5
 8001728:	432a      	orrs	r2, r5
 800172a:	63c2      	str	r2, [r0, #60]	; 0x3c
 800172c:	e7a8      	b.n	8001680 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800172e:	6944      	ldr	r4, [r0, #20]
 8001730:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001734:	2507      	movs	r5, #7
 8001736:	4095      	lsls	r5, r2
 8001738:	ea24 0405 	bic.w	r4, r4, r5
 800173c:	688d      	ldr	r5, [r1, #8]
 800173e:	fa05 f202 	lsl.w	r2, r5, r2
 8001742:	4322      	orrs	r2, r4
 8001744:	6142      	str	r2, [r0, #20]
 8001746:	e7b0      	b.n	80016aa <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001748:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800174a:	4d89      	ldr	r5, [pc, #548]	; (8001970 <HAL_ADC_ConfigChannel+0x334>)
 800174c:	4005      	ands	r5, r0
 800174e:	6808      	ldr	r0, [r1, #0]
 8001750:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001754:	4315      	orrs	r5, r2
 8001756:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800175a:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	6882      	ldr	r2, [r0, #8]
 8001760:	f002 0203 	and.w	r2, r2, #3
 8001764:	2a01      	cmp	r2, #1
 8001766:	d06b      	beq.n	8001840 <HAL_ADC_ConfigChannel+0x204>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001768:	68ca      	ldr	r2, [r1, #12]
 800176a:	2a01      	cmp	r2, #1
 800176c:	d06e      	beq.n	800184c <HAL_ADC_ConfigChannel+0x210>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800176e:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001772:	680d      	ldr	r5, [r1, #0]
 8001774:	2401      	movs	r4, #1
 8001776:	40ac      	lsls	r4, r5
 8001778:	ea22 0204 	bic.w	r2, r2, r4
 800177c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001780:	680a      	ldr	r2, [r1, #0]
 8001782:	2a10      	cmp	r2, #16
 8001784:	f000 808b 	beq.w	800189e <HAL_ADC_ConfigChannel+0x262>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001788:	2a11      	cmp	r2, #17
 800178a:	f000 809c 	beq.w	80018c6 <HAL_ADC_ConfigChannel+0x28a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800178e:	2a12      	cmp	r2, #18
 8001790:	f000 809f 	beq.w	80018d2 <HAL_ADC_ConfigChannel+0x296>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001794:	2000      	movs	r0, #0
 8001796:	e0e2      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001798:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800179a:	4d75      	ldr	r5, [pc, #468]	; (8001970 <HAL_ADC_ConfigChannel+0x334>)
 800179c:	4005      	ands	r5, r0
 800179e:	6808      	ldr	r0, [r1, #0]
 80017a0:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80017a4:	4315      	orrs	r5, r2
 80017a6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80017aa:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80017ac:	e7d6      	b.n	800175c <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017ae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80017b0:	4d6f      	ldr	r5, [pc, #444]	; (8001970 <HAL_ADC_ConfigChannel+0x334>)
 80017b2:	4005      	ands	r5, r0
 80017b4:	6808      	ldr	r0, [r1, #0]
 80017b6:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80017ba:	4315      	orrs	r5, r2
 80017bc:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80017c0:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80017c2:	e7cb      	b.n	800175c <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80017c4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80017c6:	486a      	ldr	r0, [pc, #424]	; (8001970 <HAL_ADC_ConfigChannel+0x334>)
 80017c8:	4028      	ands	r0, r5
 80017ca:	680d      	ldr	r5, [r1, #0]
 80017cc:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80017d0:	4302      	orrs	r2, r0
 80017d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017d6:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 80017d8:	e7c0      	b.n	800175c <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017da:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80017dc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017e0:	6808      	ldr	r0, [r1, #0]
 80017e2:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 80017e6:	d01c      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x1e6>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80017ec:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80017f0:	680c      	ldr	r4, [r1, #0]
 80017f2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80017f6:	d019      	beq.n	800182c <HAL_ADC_ConfigChannel+0x1f0>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80017fc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001800:	680c      	ldr	r4, [r1, #0]
 8001802:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001806:	d016      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x1fa>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800180c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001810:	680c      	ldr	r4, [r1, #0]
 8001812:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001816:	d1a1      	bne.n	800175c <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001818:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800181a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800181e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001820:	e79c      	b.n	800175c <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001822:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001824:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001828:	6622      	str	r2, [r4, #96]	; 0x60
 800182a:	e7dd      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x1ac>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800182c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800182e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001832:	6642      	str	r2, [r0, #100]	; 0x64
 8001834:	e7e0      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x1bc>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001836:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001838:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800183c:	6682      	str	r2, [r0, #104]	; 0x68
 800183e:	e7e3      	b.n	8001808 <HAL_ADC_ConfigChannel+0x1cc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001840:	6802      	ldr	r2, [r0, #0]
 8001842:	f012 0f01 	tst.w	r2, #1
 8001846:	d08f      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x12c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001848:	2000      	movs	r0, #0
 800184a:	e088      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800184c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 8001850:	680d      	ldr	r5, [r1, #0]
 8001852:	2401      	movs	r4, #1
 8001854:	40ac      	lsls	r4, r5
 8001856:	4322      	orrs	r2, r4
 8001858:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800185c:	680a      	ldr	r2, [r1, #0]
 800185e:	2a09      	cmp	r2, #9
 8001860:	d90e      	bls.n	8001880 <HAL_ADC_ConfigChannel+0x244>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001862:	681d      	ldr	r5, [r3, #0]
 8001864:	69a8      	ldr	r0, [r5, #24]
 8001866:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800186a:	3a1b      	subs	r2, #27
 800186c:	2407      	movs	r4, #7
 800186e:	4094      	lsls	r4, r2
 8001870:	ea20 0004 	bic.w	r0, r0, r4
 8001874:	688c      	ldr	r4, [r1, #8]
 8001876:	fa04 f202 	lsl.w	r2, r4, r2
 800187a:	4302      	orrs	r2, r0
 800187c:	61aa      	str	r2, [r5, #24]
 800187e:	e77f      	b.n	8001780 <HAL_ADC_ConfigChannel+0x144>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001880:	681d      	ldr	r5, [r3, #0]
 8001882:	6968      	ldr	r0, [r5, #20]
 8001884:	3201      	adds	r2, #1
 8001886:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800188a:	2407      	movs	r4, #7
 800188c:	4094      	lsls	r4, r2
 800188e:	ea20 0004 	bic.w	r0, r0, r4
 8001892:	688c      	ldr	r4, [r1, #8]
 8001894:	fa04 f202 	lsl.w	r2, r4, r2
 8001898:	4302      	orrs	r2, r0
 800189a:	616a      	str	r2, [r5, #20]
 800189c:	e770      	b.n	8001780 <HAL_ADC_ConfigChannel+0x144>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800189e:	4935      	ldr	r1, [pc, #212]	; (8001974 <HAL_ADC_ConfigChannel+0x338>)
 80018a0:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018a2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80018a6:	f47f af6f 	bne.w	8001788 <HAL_ADC_ConfigChannel+0x14c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	6881      	ldr	r1, [r0, #8]
 80018ae:	f001 0103 	and.w	r1, r1, #3
 80018b2:	2901      	cmp	r1, #1
 80018b4:	d014      	beq.n	80018e0 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018b6:	2a10      	cmp	r2, #16
 80018b8:	d01c      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018ba:	2a11      	cmp	r2, #17
 80018bc:	d039      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x2f6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018be:	2a12      	cmp	r2, #18
 80018c0:	d041      	beq.n	8001946 <HAL_ADC_ConfigChannel+0x30a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c2:	2000      	movs	r0, #0
 80018c4:	e04b      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018c6:	492b      	ldr	r1, [pc, #172]	; (8001974 <HAL_ADC_ConfigChannel+0x338>)
 80018c8:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80018ca:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 80018ce:	d0ec      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x26e>
 80018d0:	e75d      	b.n	800178e <HAL_ADC_ConfigChannel+0x152>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80018d2:	4928      	ldr	r1, [pc, #160]	; (8001974 <HAL_ADC_ConfigChannel+0x338>)
 80018d4:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018d6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80018da:	d0e6      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x26e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018dc:	2000      	movs	r0, #0
 80018de:	e03e      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018e0:	6801      	ldr	r1, [r0, #0]
 80018e2:	f011 0f01 	tst.w	r1, #1
 80018e6:	d0e6      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0x27a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ea:	f042 0220 	orr.w	r2, r2, #32
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80018f0:	2001      	movs	r0, #1
 80018f2:	e034      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80018f8:	d1df      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x27e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018fa:	491e      	ldr	r1, [pc, #120]	; (8001974 <HAL_ADC_ConfigChannel+0x338>)
 80018fc:	688a      	ldr	r2, [r1, #8]
 80018fe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001902:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_ADC_ConfigChannel+0x33c>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	f1a1 614e 	sub.w	r1, r1, #216006656	; 0xce00000
 800190c:	f5a1 2184 	sub.w	r1, r1, #270336	; 0x42000
 8001910:	f2a1 417d 	subw	r1, r1, #1149	; 0x47d
 8001914:	fba1 1202 	umull	r1, r2, r1, r2
 8001918:	0c92      	lsrs	r2, r2, #18
 800191a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800191e:	0051      	lsls	r1, r2, #1
 8001920:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001922:	9a01      	ldr	r2, [sp, #4]
 8001924:	b11a      	cbz	r2, 800192e <HAL_ADC_ConfigChannel+0x2f2>
            wait_loop_index--;
 8001926:	9a01      	ldr	r2, [sp, #4]
 8001928:	3a01      	subs	r2, #1
 800192a:	9201      	str	r2, [sp, #4]
 800192c:	e7f9      	b.n	8001922 <HAL_ADC_ConfigChannel+0x2e6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192e:	2000      	movs	r0, #0
 8001930:	e015      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001932:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8001936:	d1c2      	bne.n	80018be <HAL_ADC_ConfigChannel+0x282>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_ADC_ConfigChannel+0x338>)
 800193a:	688a      	ldr	r2, [r1, #8]
 800193c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001940:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001942:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001944:	e00b      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001946:	490b      	ldr	r1, [pc, #44]	; (8001974 <HAL_ADC_ConfigChannel+0x338>)
 8001948:	688a      	ldr	r2, [r1, #8]
 800194a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800194e:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001950:	2000      	movs	r0, #0
 8001952:	e004      	b.n	800195e <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001956:	f042 0220 	orr.w	r2, r2, #32
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 800195c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001964:	b002      	add	sp, #8
 8001966:	bc30      	pop	{r4, r5}
 8001968:	4770      	bx	lr
  __HAL_LOCK(hadc);
 800196a:	2002      	movs	r0, #2
 800196c:	e7fa      	b.n	8001964 <HAL_ADC_ConfigChannel+0x328>
 800196e:	bf00      	nop
 8001970:	83fff000 	.word	0x83fff000
 8001974:	50000300 	.word	0x50000300
 8001978:	20000000 	.word	0x20000000

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	0200      	lsls	r0, r0, #8
 800198a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001990:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001994:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001998:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c3 0407 	rsb	r4, r3, #7
 80019ae:	2c04      	cmp	r4, #4
 80019b0:	bf28      	it	cs
 80019b2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b4:	1d1d      	adds	r5, r3, #4
 80019b6:	2d06      	cmp	r5, #6
 80019b8:	d918      	bls.n	80019ec <HAL_NVIC_SetPriority+0x4c>
 80019ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 35ff 	mov.w	r5, #4294967295
 80019c0:	fa05 f404 	lsl.w	r4, r5, r4
 80019c4:	ea21 0104 	bic.w	r1, r1, r4
 80019c8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ca:	fa05 f303 	lsl.w	r3, r5, r3
 80019ce:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80019d4:	2800      	cmp	r0, #0
 80019d6:	db0b      	blt.n	80019f0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	0109      	lsls	r1, r1, #4
 80019da:	b2c9      	uxtb	r1, r1
 80019dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019e4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019e8:	bc30      	pop	{r4, r5}
 80019ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ec:	2300      	movs	r3, #0
 80019ee:	e7e5      	b.n	80019bc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	f000 000f 	and.w	r0, r0, #15
 80019f4:	0109      	lsls	r1, r1, #4
 80019f6:	b2c9      	uxtb	r1, r1
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019fa:	5419      	strb	r1, [r3, r0]
 80019fc:	e7f4      	b.n	80019e8 <HAL_NVIC_SetPriority+0x48>
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	db07      	blt.n	8001a1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0c:	f000 021f 	and.w	r2, r0, #31
 8001a10:	0940      	lsrs	r0, r0, #5
 8001a12:	2301      	movs	r3, #1
 8001a14:	4093      	lsls	r3, r2
 8001a16:	4a02      	ldr	r2, [pc, #8]	; (8001a20 <HAL_NVIC_EnableIRQ+0x18>)
 8001a18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a24:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a26:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001a28:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001a2a:	2401      	movs	r4, #1
 8001a2c:	40b4      	lsls	r4, r6
 8001a2e:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a30:	6804      	ldr	r4, [r0, #0]
 8001a32:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a34:	6843      	ldr	r3, [r0, #4]
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d005      	beq.n	8001a46 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001a3a:	6803      	ldr	r3, [r0, #0]
 8001a3c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001a3e:	6803      	ldr	r3, [r0, #0]
 8001a40:	60da      	str	r2, [r3, #12]
  }
}
 8001a42:	bc70      	pop	{r4, r5, r6}
 8001a44:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001a46:	6803      	ldr	r3, [r0, #0]
 8001a48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001a4a:	6803      	ldr	r3, [r0, #0]
 8001a4c:	60d9      	str	r1, [r3, #12]
 8001a4e:	e7f8      	b.n	8001a42 <DMA_SetConfig+0x1e>

08001a50 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a50:	6802      	ldr	r2, [r0, #0]
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <DMA_CalcBaseAndBitshift+0x18>)
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <DMA_CalcBaseAndBitshift+0x1c>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <DMA_CalcBaseAndBitshift+0x20>)
 8001a64:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8001a66:	4770      	bx	lr
 8001a68:	bffdfff8 	.word	0xbffdfff8
 8001a6c:	cccccccd 	.word	0xcccccccd
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_DMA_Init>:
  if(NULL == hdma)
 8001a74:	b320      	cbz	r0, 8001ac0 <HAL_DMA_Init+0x4c>
{ 
 8001a76:	b510      	push	{r4, lr}
 8001a78:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001a80:	6801      	ldr	r1, [r0, #0]
 8001a82:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a84:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001a88:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001a8c:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8e:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8001a90:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a92:	68e0      	ldr	r0, [r4, #12]
 8001a94:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a96:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a98:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9a:	6960      	ldr	r0, [r4, #20]
 8001a9c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa2:	69e0      	ldr	r0, [r4, #28]
 8001aa4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001aa6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001aa8:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff ffd0 	bl	8001a50 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001aba:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8001abe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ac0:	2001      	movs	r0, #1
}  
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_DMA_Start_IT>:
{
 8001ac4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001ac6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001aca:	2c01      	cmp	r4, #1
 8001acc:	d032      	beq.n	8001b34 <HAL_DMA_Start_IT+0x70>
 8001ace:	2401      	movs	r4, #1
 8001ad0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001ad8:	2c01      	cmp	r4, #1
 8001ada:	d004      	beq.n	8001ae6 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001adc:	2300      	movs	r3, #0
 8001ade:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001ae2:	2002      	movs	r0, #2
} 
 8001ae4:	bd38      	pop	{r3, r4, r5, pc}
 8001ae6:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aee:	2000      	movs	r0, #0
 8001af0:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af2:	6825      	ldr	r5, [r4, #0]
 8001af4:	6828      	ldr	r0, [r5, #0]
 8001af6:	f020 0001 	bic.w	r0, r0, #1
 8001afa:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ff91 	bl	8001a24 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001b02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b04:	b15b      	cbz	r3, 8001b1e <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f043 030e 	orr.w	r3, r3, #14
 8001b0e:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e7e2      	b.n	8001ae4 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f043 030a 	orr.w	r3, r3, #10
 8001b26:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e7ed      	b.n	8001b10 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001b34:	2002      	movs	r0, #2
 8001b36:	e7d5      	b.n	8001ae4 <HAL_DMA_Start_IT+0x20>

08001b38 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b38:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d006      	beq.n	8001b4e <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b40:	2304      	movs	r3, #4
 8001b42:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001b44:	2300      	movs	r3, #0
 8001b46:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b4e:	6802      	ldr	r2, [r0, #0]
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	f023 030e 	bic.w	r3, r3, #14
 8001b56:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b58:	6802      	ldr	r2, [r0, #0]
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b64:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b66:	2201      	movs	r2, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001b6e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001b72:	2300      	movs	r3, #0
 8001b74:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001b78:	4618      	mov	r0, r3
}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DMA_Abort_IT>:
{  
 8001b7c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b7e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d003      	beq.n	8001b8e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b86:	2304      	movs	r3, #4
 8001b88:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
}
 8001b8c:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b8e:	6802      	ldr	r2, [r0, #0]
 8001b90:	6813      	ldr	r3, [r2, #0]
 8001b92:	f023 030e 	bic.w	r3, r3, #14
 8001b96:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b98:	6802      	ldr	r2, [r0, #0]
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ba2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ba4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bae:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001bb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bba:	b113      	cbz	r3, 8001bc2 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001bbc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	e7e4      	b.n	8001b8c <HAL_DMA_Abort_IT+0x10>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e7e2      	b.n	8001b8c <HAL_DMA_Abort_IT+0x10>

08001bc6 <HAL_DMA_IRQHandler>:
{
 8001bc6:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bc8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001bca:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bcc:	6804      	ldr	r4, [r0, #0]
 8001bce:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001bd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	408b      	lsls	r3, r1
 8001bd6:	4213      	tst	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x3c>
 8001bda:	f015 0f04 	tst.w	r5, #4
 8001bde:	d010      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	f013 0f20 	tst.w	r3, #32
 8001be6:	d103      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bf0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001bf2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001bfc:	b103      	cbz	r3, 8001c00 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8001bfe:	4798      	blx	r3
}  
 8001c00:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001c02:	2302      	movs	r3, #2
 8001c04:	408b      	lsls	r3, r1
 8001c06:	4213      	tst	r3, r2
 8001c08:	d01a      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x7a>
 8001c0a:	f015 0f02 	tst.w	r5, #2
 8001c0e:	d017      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	f013 0f20 	tst.w	r3, #32
 8001c16:	d106      	bne.n	8001c26 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	f023 030a 	bic.w	r3, r3, #10
 8001c1e:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c26:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001c28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	408b      	lsls	r3, r1
 8001c2e:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001c30:	2300      	movs	r3, #0
 8001c32:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001c36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0e1      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8001c3c:	4798      	blx	r3
 8001c3e:	e7df      	b.n	8001c00 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c40:	2308      	movs	r3, #8
 8001c42:	fa03 f101 	lsl.w	r1, r3, r1
 8001c46:	4211      	tst	r1, r2
 8001c48:	d0da      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x3a>
 8001c4a:	f015 0f08 	tst.w	r5, #8
 8001c4e:	d0d7      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	f023 030e 	bic.w	r3, r3, #14
 8001c56:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c58:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001c5a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	fa03 f202 	lsl.w	r2, r3, r2
 8001c62:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c64:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001c66:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001c70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0c4      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8001c76:	4798      	blx	r3
}  
 8001c78:	e7c2      	b.n	8001c00 <HAL_DMA_IRQHandler+0x3a>
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b4f0      	push	{r4, r5, r6, r7}
 8001c7e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001c80:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e036      	b.n	8001cf2 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c84:	2403      	movs	r4, #3
 8001c86:	e000      	b.n	8001c8a <HAL_GPIO_Init+0xe>
 8001c88:	2400      	movs	r4, #0
 8001c8a:	40b4      	lsls	r4, r6
 8001c8c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8e:	3502      	adds	r5, #2
 8001c90:	4e58      	ldr	r6, [pc, #352]	; (8001df4 <HAL_GPIO_Init+0x178>)
 8001c92:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c96:	4c58      	ldr	r4, [pc, #352]	; (8001df8 <HAL_GPIO_Init+0x17c>)
 8001c98:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001c9a:	43d4      	mvns	r4, r2
 8001c9c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca0:	684f      	ldr	r7, [r1, #4]
 8001ca2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001ca6:	d001      	beq.n	8001cac <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8001ca8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001cac:	4d52      	ldr	r5, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x17c>)
 8001cae:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001cb0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001cb2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb6:	684f      	ldr	r7, [r1, #4]
 8001cb8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001cbc:	d001      	beq.n	8001cc2 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8001cbe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001cc2:	4d4d      	ldr	r5, [pc, #308]	; (8001df8 <HAL_GPIO_Init+0x17c>)
 8001cc4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001cc8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ccc:	684f      	ldr	r7, [r1, #4]
 8001cce:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001cd2:	d001      	beq.n	8001cd8 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8001cd4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001cd8:	4d47      	ldr	r5, [pc, #284]	; (8001df8 <HAL_GPIO_Init+0x17c>)
 8001cda:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001cdc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001cde:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce0:	684e      	ldr	r6, [r1, #4]
 8001ce2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001ce6:	d001      	beq.n	8001cec <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001ce8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001cec:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <HAL_GPIO_Init+0x17c>)
 8001cee:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001cf0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	680a      	ldr	r2, [r1, #0]
 8001cf4:	fa32 f403 	lsrs.w	r4, r2, r3
 8001cf8:	d078      	beq.n	8001dec <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cfa:	2401      	movs	r4, #1
 8001cfc:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001cfe:	4022      	ands	r2, r4
 8001d00:	d0f6      	beq.n	8001cf0 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d02:	684d      	ldr	r5, [r1, #4]
 8001d04:	2d02      	cmp	r5, #2
 8001d06:	d001      	beq.n	8001d0c <HAL_GPIO_Init+0x90>
 8001d08:	2d12      	cmp	r5, #18
 8001d0a:	d110      	bne.n	8001d2e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 8001d0c:	08de      	lsrs	r6, r3, #3
 8001d0e:	3608      	adds	r6, #8
 8001d10:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d14:	f003 0507 	and.w	r5, r3, #7
 8001d18:	00af      	lsls	r7, r5, #2
 8001d1a:	250f      	movs	r5, #15
 8001d1c:	40bd      	lsls	r5, r7
 8001d1e:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d22:	690d      	ldr	r5, [r1, #16]
 8001d24:	40bd      	lsls	r5, r7
 8001d26:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001d2a:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001d2e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d30:	005f      	lsls	r7, r3, #1
 8001d32:	2503      	movs	r5, #3
 8001d34:	40bd      	lsls	r5, r7
 8001d36:	43ed      	mvns	r5, r5
 8001d38:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d3c:	684e      	ldr	r6, [r1, #4]
 8001d3e:	f006 0603 	and.w	r6, r6, #3
 8001d42:	40be      	lsls	r6, r7
 8001d44:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8001d48:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4a:	684e      	ldr	r6, [r1, #4]
 8001d4c:	f106 3cff 	add.w	ip, r6, #4294967295
 8001d50:	f1bc 0f01 	cmp.w	ip, #1
 8001d54:	d903      	bls.n	8001d5e <HAL_GPIO_Init+0xe2>
 8001d56:	2e11      	cmp	r6, #17
 8001d58:	d001      	beq.n	8001d5e <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5a:	2e12      	cmp	r6, #18
 8001d5c:	d110      	bne.n	8001d80 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8001d5e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d60:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d64:	68ce      	ldr	r6, [r1, #12]
 8001d66:	40be      	lsls	r6, r7
 8001d68:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001d6c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d6e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d70:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d74:	684e      	ldr	r6, [r1, #4]
 8001d76:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001d7a:	409e      	lsls	r6, r3
 8001d7c:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001d7e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001d80:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d82:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d84:	688c      	ldr	r4, [r1, #8]
 8001d86:	40bc      	lsls	r4, r7
 8001d88:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001d8a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8c:	684c      	ldr	r4, [r1, #4]
 8001d8e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001d92:	d0ad      	beq.n	8001cf0 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d94:	4c19      	ldr	r4, [pc, #100]	; (8001dfc <HAL_GPIO_Init+0x180>)
 8001d96:	69a5      	ldr	r5, [r4, #24]
 8001d98:	f045 0501 	orr.w	r5, r5, #1
 8001d9c:	61a5      	str	r5, [r4, #24]
 8001d9e:	69a4      	ldr	r4, [r4, #24]
 8001da0:	f004 0401 	and.w	r4, r4, #1
 8001da4:	9401      	str	r4, [sp, #4]
 8001da6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001da8:	089d      	lsrs	r5, r3, #2
 8001daa:	1cae      	adds	r6, r5, #2
 8001dac:	4c11      	ldr	r4, [pc, #68]	; (8001df4 <HAL_GPIO_Init+0x178>)
 8001dae:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db2:	f003 0403 	and.w	r4, r3, #3
 8001db6:	00a6      	lsls	r6, r4, #2
 8001db8:	240f      	movs	r4, #15
 8001dba:	40b4      	lsls	r4, r6
 8001dbc:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001dc4:	f43f af60 	beq.w	8001c88 <HAL_GPIO_Init+0xc>
 8001dc8:	4c0d      	ldr	r4, [pc, #52]	; (8001e00 <HAL_GPIO_Init+0x184>)
 8001dca:	42a0      	cmp	r0, r4
 8001dcc:	d00a      	beq.n	8001de4 <HAL_GPIO_Init+0x168>
 8001dce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001dd2:	42a0      	cmp	r0, r4
 8001dd4:	d008      	beq.n	8001de8 <HAL_GPIO_Init+0x16c>
 8001dd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001dda:	42a0      	cmp	r0, r4
 8001ddc:	f43f af52 	beq.w	8001c84 <HAL_GPIO_Init+0x8>
 8001de0:	2405      	movs	r4, #5
 8001de2:	e752      	b.n	8001c8a <HAL_GPIO_Init+0xe>
 8001de4:	2401      	movs	r4, #1
 8001de6:	e750      	b.n	8001c8a <HAL_GPIO_Init+0xe>
 8001de8:	2402      	movs	r4, #2
 8001dea:	e74e      	b.n	8001c8a <HAL_GPIO_Init+0xe>
  }
}
 8001dec:	b002      	add	sp, #8
 8001dee:	bcf0      	pop	{r4, r5, r6, r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40010400 	.word	0x40010400
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400

08001e04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	b90a      	cbnz	r2, 8001e0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001e08:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	6181      	str	r1, [r0, #24]
 8001e0c:	4770      	bx	lr

08001e0e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e0e:	6803      	ldr	r3, [r0, #0]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	f012 0f02 	tst.w	r2, #2
 8001e16:	d001      	beq.n	8001e1c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e18:	2200      	movs	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e1c:	6803      	ldr	r3, [r0, #0]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	f012 0f01 	tst.w	r2, #1
 8001e24:	d103      	bne.n	8001e2e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	619a      	str	r2, [r3, #24]
  }
}
 8001e2e:	4770      	bx	lr

08001e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e30:	b470      	push	{r4, r5, r6}
 8001e32:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e34:	6805      	ldr	r5, [r0, #0]
 8001e36:	6868      	ldr	r0, [r5, #4]
 8001e38:	0d74      	lsrs	r4, r6, #21
 8001e3a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001e3e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001e42:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001e46:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001e4a:	f044 0403 	orr.w	r4, r4, #3
 8001e4e:	ea20 0004 	bic.w	r0, r0, r4
 8001e52:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001e56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001e5a:	4319      	orrs	r1, r3
 8001e5c:	4331      	orrs	r1, r6
 8001e5e:	4301      	orrs	r1, r0
 8001e60:	6069      	str	r1, [r5, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e62:	bc70      	pop	{r4, r5, r6}
 8001e64:	4770      	bx	lr
	...

08001e68 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8001e68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <I2C_Enable_IRQ+0x78>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d017      	beq.n	8001ea0 <I2C_Enable_IRQ+0x38>
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <I2C_Enable_IRQ+0x7c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d014      	beq.n	8001ea0 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001e76:	f011 0f04 	tst.w	r1, #4
 8001e7a:	d12f      	bne.n	8001edc <I2C_Enable_IRQ+0x74>
  uint32_t tmpisr = 0U;
 8001e7c:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001e7e:	f011 0f01 	tst.w	r1, #1
 8001e82:	d001      	beq.n	8001e88 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8001e84:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001e88:	f011 0f02 	tst.w	r1, #2
 8001e8c:	d001      	beq.n	8001e92 <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8001e8e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001e92:	f001 0112 	and.w	r1, r1, #18
 8001e96:	2912      	cmp	r1, #18
 8001e98:	d110      	bne.n	8001ebc <I2C_Enable_IRQ+0x54>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8001e9a:	f043 0320 	orr.w	r3, r3, #32
 8001e9e:	e00d      	b.n	8001ebc <I2C_Enable_IRQ+0x54>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001ea0:	f011 0f04 	tst.w	r1, #4
 8001ea4:	d10f      	bne.n	8001ec6 <I2C_Enable_IRQ+0x5e>
  uint32_t tmpisr = 0U;
 8001ea6:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001ea8:	f001 0211 	and.w	r2, r1, #17
 8001eac:	2a11      	cmp	r2, #17
 8001eae:	d00c      	beq.n	8001eca <I2C_Enable_IRQ+0x62>
 8001eb0:	f001 0112 	and.w	r1, r1, #18
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001eb4:	2912      	cmp	r1, #18
 8001eb6:	d00b      	beq.n	8001ed0 <I2C_Enable_IRQ+0x68>
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001eb8:	2912      	cmp	r1, #18
 8001eba:	d00c      	beq.n	8001ed6 <I2C_Enable_IRQ+0x6e>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8001ebc:	6801      	ldr	r1, [r0, #0]
 8001ebe:	680a      	ldr	r2, [r1, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
}
 8001ec4:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001ec6:	23b8      	movs	r3, #184	; 0xb8
 8001ec8:	e7ee      	b.n	8001ea8 <I2C_Enable_IRQ+0x40>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001eca:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001ece:	e7ef      	b.n	8001eb0 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_STOPI;
 8001ed0:	f043 0320 	orr.w	r3, r3, #32
 8001ed4:	e7f0      	b.n	8001eb8 <I2C_Enable_IRQ+0x50>
      tmpisr |= I2C_IT_TCI;
 8001ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eda:	e7ef      	b.n	8001ebc <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001edc:	23b8      	movs	r3, #184	; 0xb8
 8001ede:	e7ce      	b.n	8001e7e <I2C_Enable_IRQ+0x16>
 8001ee0:	08002833 	.word	0x08002833
 8001ee4:	08002735 	.word	0x08002735

08001ee8 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001ee8:	f011 0f01 	tst.w	r1, #1
 8001eec:	d009      	beq.n	8001f02 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001eee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ef2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ef6:	2b28      	cmp	r3, #40	; 0x28
 8001ef8:	d001      	beq.n	8001efe <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001efa:	23f2      	movs	r3, #242	; 0xf2
 8001efc:	e002      	b.n	8001f04 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001efe:	2342      	movs	r3, #66	; 0x42
 8001f00:	e000      	b.n	8001f04 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8001f02:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f04:	f011 0f02 	tst.w	r1, #2
 8001f08:	d02c      	beq.n	8001f64 <I2C_Disable_IRQ+0x7c>
{
 8001f0a:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f0c:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f10:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001f14:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001f18:	2a28      	cmp	r2, #40	; 0x28
 8001f1a:	d018      	beq.n	8001f4e <I2C_Disable_IRQ+0x66>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f1c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f20:	f011 0f04 	tst.w	r1, #4
 8001f24:	d001      	beq.n	8001f2a <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f26:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001f2a:	f001 0211 	and.w	r2, r1, #17
 8001f2e:	2a11      	cmp	r2, #17
 8001f30:	d00f      	beq.n	8001f52 <I2C_Disable_IRQ+0x6a>
 8001f32:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001f36:	2912      	cmp	r1, #18
 8001f38:	d00e      	beq.n	8001f58 <I2C_Disable_IRQ+0x70>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001f3a:	2912      	cmp	r1, #18
 8001f3c:	d00f      	beq.n	8001f5e <I2C_Disable_IRQ+0x76>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f3e:	6801      	ldr	r1, [r0, #0]
 8001f40:	680a      	ldr	r2, [r1, #0]
 8001f42:	ea22 0303 	bic.w	r3, r2, r3
 8001f46:	600b      	str	r3, [r1, #0]
}
 8001f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f4c:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f4e:	4623      	mov	r3, r4
 8001f50:	e7e6      	b.n	8001f20 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f52:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001f56:	e7ec      	b.n	8001f32 <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8001f58:	f043 0320 	orr.w	r3, r3, #32
 8001f5c:	e7ed      	b.n	8001f3a <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8001f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f62:	e7ec      	b.n	8001f3e <I2C_Disable_IRQ+0x56>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f64:	f011 0f04 	tst.w	r1, #4
 8001f68:	d001      	beq.n	8001f6e <I2C_Disable_IRQ+0x86>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001f6e:	f001 0211 	and.w	r2, r1, #17
 8001f72:	2a11      	cmp	r2, #17
 8001f74:	d00b      	beq.n	8001f8e <I2C_Disable_IRQ+0xa6>
 8001f76:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001f7a:	2912      	cmp	r1, #18
 8001f7c:	d00a      	beq.n	8001f94 <I2C_Disable_IRQ+0xac>
  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001f7e:	2912      	cmp	r1, #18
 8001f80:	d00b      	beq.n	8001f9a <I2C_Disable_IRQ+0xb2>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f82:	6801      	ldr	r1, [r0, #0]
 8001f84:	680a      	ldr	r2, [r1, #0]
 8001f86:	ea22 0303 	bic.w	r3, r2, r3
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	4770      	bx	lr
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f8e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001f92:	e7f0      	b.n	8001f76 <I2C_Disable_IRQ+0x8e>
    tmpisr |= I2C_IT_STOPI;
 8001f94:	f043 0320 	orr.w	r3, r3, #32
 8001f98:	e7f1      	b.n	8001f7e <I2C_Disable_IRQ+0x96>
    tmpisr |= I2C_IT_TCI;
 8001f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9e:	e7f0      	b.n	8001f82 <I2C_Disable_IRQ+0x9a>

08001fa0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d059      	beq.n	8002058 <HAL_I2C_Init+0xb8>
{
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d043      	beq.n	8002038 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	2324      	movs	r3, #36	; 0x24
 8001fb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc0:	6863      	ldr	r3, [r4, #4]
 8001fc2:	6822      	ldr	r2, [r4, #0]
 8001fc4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001fc8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	6893      	ldr	r3, [r2, #8]
 8001fce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fd2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd4:	68e3      	ldr	r3, [r4, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d033      	beq.n	8002042 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fda:	68a3      	ldr	r3, [r4, #8]
 8001fdc:	6822      	ldr	r2, [r4, #0]
 8001fde:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001fe2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe4:	68e3      	ldr	r3, [r4, #12]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d031      	beq.n	800204e <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fea:	6822      	ldr	r2, [r4, #0]
 8001fec:	6853      	ldr	r3, [r2, #4]
 8001fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ff8:	6822      	ldr	r2, [r4, #0]
 8001ffa:	68d3      	ldr	r3, [r2, #12]
 8001ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002000:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002002:	6923      	ldr	r3, [r4, #16]
 8002004:	6962      	ldr	r2, [r4, #20]
 8002006:	4313      	orrs	r3, r2
 8002008:	69a1      	ldr	r1, [r4, #24]
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002010:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002012:	69e3      	ldr	r3, [r4, #28]
 8002014:	6a21      	ldr	r1, [r4, #32]
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800201c:	6822      	ldr	r2, [r4, #0]
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002026:	2000      	movs	r0, #0
 8002028:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	2320      	movs	r3, #32
 800202c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002030:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002036:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002038:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800203c:	f7fe fa8e 	bl	800055c <HAL_I2C_MspInit>
 8002040:	e7b6      	b.n	8001fb0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002042:	68a3      	ldr	r3, [r4, #8]
 8002044:	6822      	ldr	r2, [r4, #0]
 8002046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204a:	6093      	str	r3, [r2, #8]
 800204c:	e7ca      	b.n	8001fe4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	e7c8      	b.n	8001fea <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <HAL_I2C_Slave_Transmit_IT>:
{
 800205c:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800205e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b20      	cmp	r3, #32
 8002066:	d122      	bne.n	80020ae <HAL_I2C_Slave_Transmit_IT+0x52>
    __HAL_LOCK(hi2c);
 8002068:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800206c:	2b01      	cmp	r3, #1
 800206e:	d020      	beq.n	80020b2 <HAL_I2C_Slave_Transmit_IT+0x56>
 8002070:	2301      	movs	r3, #1
 8002072:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002076:	2321      	movs	r3, #33	; 0x21
 8002078:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800207c:	2320      	movs	r3, #32
 800207e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002082:	2400      	movs	r4, #0
 8002084:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002086:	6805      	ldr	r5, [r0, #0]
 8002088:	686b      	ldr	r3, [r5, #4]
 800208a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800208e:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 8002090:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002092:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002094:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002096:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_I2C_Slave_Transmit_IT+0x5c>)
 800209a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_I2C_Slave_Transmit_IT+0x60>)
 800209e:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80020a0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80020a4:	2105      	movs	r1, #5
 80020a6:	f7ff fedf 	bl	8001e68 <I2C_Enable_IRQ>
    return HAL_OK;
 80020aa:	4620      	mov	r0, r4
 80020ac:	e000      	b.n	80020b0 <HAL_I2C_Slave_Transmit_IT+0x54>
    return HAL_BUSY;
 80020ae:	2002      	movs	r0, #2
}
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 80020b2:	2002      	movs	r0, #2
 80020b4:	e7fc      	b.n	80020b0 <HAL_I2C_Slave_Transmit_IT+0x54>
 80020b6:	bf00      	nop
 80020b8:	ffff0000 	.word	0xffff0000
 80020bc:	08002509 	.word	0x08002509

080020c0 <HAL_I2C_Slave_Receive_IT>:
{
 80020c0:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d122      	bne.n	8002112 <HAL_I2C_Slave_Receive_IT+0x52>
    __HAL_LOCK(hi2c);
 80020cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d020      	beq.n	8002116 <HAL_I2C_Slave_Receive_IT+0x56>
 80020d4:	2301      	movs	r3, #1
 80020d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020da:	2322      	movs	r3, #34	; 0x22
 80020dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80020e0:	2320      	movs	r3, #32
 80020e2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020e6:	2400      	movs	r4, #0
 80020e8:	6444      	str	r4, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80020ea:	6805      	ldr	r5, [r0, #0]
 80020ec:	686b      	ldr	r3, [r5, #4]
 80020ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020f2:	606b      	str	r3, [r5, #4]
    hi2c->pBuffPtr    = pData;
 80020f4:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020f6:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020fa:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_I2C_Slave_Receive_IT+0x5c>)
 80020fe:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <HAL_I2C_Slave_Receive_IT+0x60>)
 8002102:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8002104:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002108:	2106      	movs	r1, #6
 800210a:	f7ff fead 	bl	8001e68 <I2C_Enable_IRQ>
    return HAL_OK;
 800210e:	4620      	mov	r0, r4
 8002110:	e000      	b.n	8002114 <HAL_I2C_Slave_Receive_IT+0x54>
    return HAL_BUSY;
 8002112:	2002      	movs	r0, #2
}
 8002114:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
 8002116:	2002      	movs	r0, #2
 8002118:	e7fc      	b.n	8002114 <HAL_I2C_Slave_Receive_IT+0x54>
 800211a:	bf00      	nop
 800211c:	ffff0000 	.word	0xffff0000
 8002120:	08002509 	.word	0x08002509

08002124 <HAL_I2C_EV_IRQHandler>:
{
 8002124:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800212a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800212c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800212e:	b103      	cbz	r3, 8002132 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002130:	4798      	blx	r3
}
 8002132:	bd08      	pop	{r3, pc}

08002134 <HAL_I2C_MasterTxCpltCallback>:
}
 8002134:	4770      	bx	lr

08002136 <HAL_I2C_MasterRxCpltCallback>:
}
 8002136:	4770      	bx	lr

08002138 <I2C_ITMasterSeqCplt>:
{
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	2300      	movs	r3, #0
 800213e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002142:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b21      	cmp	r3, #33	; 0x21
 800214a:	d00f      	beq.n	800216c <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 800214c:	2320      	movs	r3, #32
 800214e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002152:	2312      	movs	r3, #18
 8002154:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002156:	2500      	movs	r5, #0
 8002158:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800215a:	2102      	movs	r1, #2
 800215c:	f7ff fec4 	bl	8001ee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002160:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002164:	4620      	mov	r0, r4
 8002166:	f7ff ffe6 	bl	8002136 <HAL_I2C_MasterRxCpltCallback>
}
 800216a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 800216c:	2320      	movs	r3, #32
 800216e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002172:	2311      	movs	r3, #17
 8002174:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002176:	2500      	movs	r5, #0
 8002178:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800217a:	2101      	movs	r1, #1
 800217c:	f7ff feb4 	bl	8001ee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002180:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff ffd5 	bl	8002134 <HAL_I2C_MasterTxCpltCallback>
 800218a:	e7ee      	b.n	800216a <I2C_ITMasterSeqCplt+0x32>

0800218c <I2C_ITSlaveSeqCplt>:
{
 800218c:	b510      	push	{r4, lr}
 800218e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	2300      	movs	r3, #0
 8002192:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002196:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b29      	cmp	r3, #41	; 0x29
 800219e:	d005      	beq.n	80021ac <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80021a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b2a      	cmp	r3, #42	; 0x2a
 80021a8:	d00f      	beq.n	80021ca <I2C_ITSlaveSeqCplt+0x3e>
}
 80021aa:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021ac:	2328      	movs	r3, #40	; 0x28
 80021ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021b2:	2321      	movs	r3, #33	; 0x21
 80021b4:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021b6:	2101      	movs	r1, #1
 80021b8:	f7ff fe96 	bl	8001ee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021bc:	2300      	movs	r3, #0
 80021be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7fe fa9c 	bl	8000700 <HAL_I2C_SlaveTxCpltCallback>
 80021c8:	e7ef      	b.n	80021aa <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021ca:	2328      	movs	r3, #40	; 0x28
 80021cc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021d0:	2322      	movs	r3, #34	; 0x22
 80021d2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021d4:	2102      	movs	r1, #2
 80021d6:	f7ff fe87 	bl	8001ee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7fe fa97 	bl	8000714 <HAL_I2C_SlaveRxCpltCallback>
}
 80021e6:	e7e0      	b.n	80021aa <I2C_ITSlaveSeqCplt+0x1e>

080021e8 <HAL_I2C_AddrCallback>:
}
 80021e8:	4770      	bx	lr

080021ea <I2C_ITAddrCplt>:
{
 80021ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021f4:	2b28      	cmp	r3, #40	; 0x28
 80021f6:	d006      	beq.n	8002206 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021f8:	6803      	ldr	r3, [r0, #0]
 80021fa:	2208      	movs	r2, #8
 80021fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002206:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8002208:	6803      	ldr	r3, [r0, #0]
 800220a:	699e      	ldr	r6, [r3, #24]
 800220c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	0c12      	lsrs	r2, r2, #16
 8002214:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800221e:	68df      	ldr	r7, [r3, #12]
 8002220:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002224:	68c1      	ldr	r1, [r0, #12]
 8002226:	2902      	cmp	r1, #2
 8002228:	d121      	bne.n	800226e <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800222a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800222e:	f015 0f06 	tst.w	r5, #6
 8002232:	d110      	bne.n	8002256 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8002234:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002236:	3101      	adds	r1, #1
 8002238:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800223a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800223c:	2902      	cmp	r1, #2
 800223e:	d1e1      	bne.n	8002204 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8002240:	2100      	movs	r1, #0
 8002242:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002244:	2008      	movs	r0, #8
 8002246:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002248:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800224c:	4631      	mov	r1, r6
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ffca 	bl	80021e8 <HAL_I2C_AddrCallback>
 8002254:	e7d6      	b.n	8002204 <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002256:	2104      	movs	r1, #4
 8002258:	f7ff fe46 	bl	8001ee8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800225c:	2300      	movs	r3, #0
 800225e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002262:	463a      	mov	r2, r7
 8002264:	4631      	mov	r1, r6
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff ffbe 	bl	80021e8 <HAL_I2C_AddrCallback>
 800226c:	e7ca      	b.n	8002204 <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800226e:	2104      	movs	r1, #4
 8002270:	f7ff fe3a 	bl	8001ee8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002274:	2300      	movs	r3, #0
 8002276:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800227a:	462a      	mov	r2, r5
 800227c:	4631      	mov	r1, r6
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff ffb2 	bl	80021e8 <HAL_I2C_AddrCallback>
 8002284:	e7be      	b.n	8002204 <I2C_ITAddrCplt+0x1a>

08002286 <HAL_I2C_ListenCpltCallback>:
}
 8002286:	4770      	bx	lr

08002288 <I2C_ITListenCplt>:
{
 8002288:	b510      	push	{r4, lr}
 800228a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <I2C_ITListenCplt+0x60>)
 800228e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002290:	2300      	movs	r3, #0
 8002292:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002294:	2220      	movs	r2, #32
 8002296:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800229e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80022a0:	f011 0f04 	tst.w	r1, #4
 80022a4:	d012      	beq.n	80022cc <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022a6:	6803      	ldr	r3, [r0, #0]
 80022a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022b0:	3301      	adds	r3, #1
 80022b2:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80022b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80022b6:	b14b      	cbz	r3, 80022cc <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80022b8:	3b01      	subs	r3, #1
 80022ba:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80022bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022cc:	2107      	movs	r1, #7
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff fe0a 	bl	8001ee8 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80022da:	2300      	movs	r3, #0
 80022dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff ffd0 	bl	8002286 <HAL_I2C_ListenCpltCallback>
}
 80022e6:	bd10      	pop	{r4, pc}
 80022e8:	ffff0000 	.word	0xffff0000

080022ec <HAL_I2C_MemTxCpltCallback>:
}
 80022ec:	4770      	bx	lr

080022ee <HAL_I2C_MemRxCpltCallback>:
}
 80022ee:	4770      	bx	lr

080022f0 <HAL_I2C_ErrorCallback>:
}
 80022f0:	4770      	bx	lr

080022f2 <HAL_I2C_AbortCpltCallback>:
}
 80022f2:	4770      	bx	lr

080022f4 <I2C_ITError>:
{
 80022f4:	b510      	push	{r4, lr}
 80022f6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80022f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80022fc:	2200      	movs	r2, #0
 80022fe:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002302:	4836      	ldr	r0, [pc, #216]	; (80023dc <I2C_ITError+0xe8>)
 8002304:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002306:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002308:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800230a:	4311      	orrs	r1, r2
 800230c:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800230e:	3b28      	subs	r3, #40	; 0x28
 8002310:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002312:	2b02      	cmp	r3, #2
 8002314:	d822      	bhi.n	800235c <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002316:	2103      	movs	r1, #3
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff fde5 	bl	8001ee8 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800231e:	2328      	movs	r3, #40	; 0x28
 8002320:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002324:	2300      	movs	r3, #0
 8002326:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <I2C_ITError+0xec>)
 800232a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002334:	d022      	beq.n	800237c <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800233c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800233e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002340:	b15b      	cbz	r3, 800235a <I2C_ITError+0x66>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <I2C_ITError+0xf0>)
 8002344:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002346:	2300      	movs	r3, #0
 8002348:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800234c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800234e:	f7ff fc15 	bl	8001b7c <HAL_DMA_Abort_IT>
 8002352:	b110      	cbz	r0, 800235a <I2C_ITError+0x66>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002354:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002356:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002358:	4798      	blx	r3
}
 800235a:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800235c:	2107      	movs	r1, #7
 800235e:	4620      	mov	r0, r4
 8002360:	f7ff fdc2 	bl	8001ee8 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002364:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b60      	cmp	r3, #96	; 0x60
 800236c:	d002      	beq.n	8002374 <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 800236e:	2320      	movs	r3, #32
 8002370:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002374:	2300      	movs	r3, #0
 8002376:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002378:	6363      	str	r3, [r4, #52]	; 0x34
 800237a:	e7d7      	b.n	800232c <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002382:	d014      	beq.n	80023ae <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800238a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800238c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0e3      	beq.n	800235a <I2C_ITError+0x66>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002392:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <I2C_ITError+0xf0>)
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8002396:	2300      	movs	r3, #0
 8002398:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800239c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800239e:	f7ff fbed 	bl	8001b7c <HAL_DMA_Abort_IT>
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d0d9      	beq.n	800235a <I2C_ITError+0x66>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80023a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80023a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80023aa:	4798      	blx	r3
 80023ac:	e7d5      	b.n	800235a <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80023ae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b60      	cmp	r3, #96	; 0x60
 80023b6:	d006      	beq.n	80023c6 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 80023b8:	2300      	movs	r3, #0
 80023ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80023be:	4620      	mov	r0, r4
 80023c0:	f7ff ff96 	bl	80022f0 <HAL_I2C_ErrorCallback>
}
 80023c4:	e7c9      	b.n	800235a <I2C_ITError+0x66>
    hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	2320      	movs	r3, #32
 80023c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80023cc:	2300      	movs	r3, #0
 80023ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7ff ff8d 	bl	80022f2 <HAL_I2C_AbortCpltCallback>
 80023d8:	e7bf      	b.n	800235a <I2C_ITError+0x66>
 80023da:	bf00      	nop
 80023dc:	ffff0000 	.word	0xffff0000
 80023e0:	08002509 	.word	0x08002509
 80023e4:	08002973 	.word	0x08002973

080023e8 <I2C_ITSlaveCplt>:
{
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	4604      	mov	r4, r0
 80023ec:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023ee:	6803      	ldr	r3, [r0, #0]
 80023f0:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f2:	2220      	movs	r2, #32
 80023f4:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80023f6:	2107      	movs	r1, #7
 80023f8:	f7ff fd76 	bl	8001ee8 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6853      	ldr	r3, [r2, #4]
 8002400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002404:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	6853      	ldr	r3, [r2, #4]
 800240a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800240e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002412:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff fcf6 	bl	8001e0e <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002422:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002426:	d03a      	beq.n	800249e <I2C_ITSlaveCplt+0xb6>
    if (hi2c->hdmatx != NULL)
 8002428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800242a:	b11b      	cbz	r3, 8002434 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	b29b      	uxth	r3, r3
 8002432:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002434:	f015 0f04 	tst.w	r5, #4
 8002438:	d010      	beq.n	800245c <I2C_ITSlaveCplt+0x74>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800243a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002444:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002448:	3301      	adds	r3, #1
 800244a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800244c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800244e:	b12b      	cbz	r3, 800245c <I2C_ITSlaveCplt+0x74>
      hi2c->XferSize--;
 8002450:	3b01      	subs	r3, #1
 8002452:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800245c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	b11b      	cbz	r3, 800246a <I2C_ITSlaveCplt+0x82>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002462:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800246a:	2300      	movs	r3, #0
 800246c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002472:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002474:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002476:	b9eb      	cbnz	r3, 80024b4 <I2C_ITSlaveCplt+0xcc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002478:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800247a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800247e:	d127      	bne.n	80024d0 <I2C_ITSlaveCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002480:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b22      	cmp	r3, #34	; 0x22
 8002488:	d031      	beq.n	80024ee <I2C_ITSlaveCplt+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	2320      	movs	r3, #32
 800248c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002490:	2300      	movs	r3, #0
 8002492:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002496:	4620      	mov	r0, r4
 8002498:	f7fe f932 	bl	8000700 <HAL_I2C_SlaveTxCpltCallback>
}
 800249c:	e026      	b.n	80024ec <I2C_ITSlaveCplt+0x104>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800249e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80024a2:	d0c7      	beq.n	8002434 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 80024a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0c4      	beq.n	8002434 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80024b2:	e7bf      	b.n	8002434 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff ff1c 	bl	80022f4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80024bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b28      	cmp	r3, #40	; 0x28
 80024c4:	d112      	bne.n	80024ec <I2C_ITSlaveCplt+0x104>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80024c6:	4629      	mov	r1, r5
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7ff fedd 	bl	8002288 <I2C_ITListenCplt>
 80024ce:	e00d      	b.n	80024ec <I2C_ITSlaveCplt+0x104>
    I2C_ITSlaveSeqCplt(hi2c);
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff fe5b 	bl	800218c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <I2C_ITSlaveCplt+0x11c>)
 80024d8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	2320      	movs	r3, #32
 80024dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80024e0:	2300      	movs	r3, #0
 80024e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7ff fecd 	bl	8002286 <HAL_I2C_ListenCpltCallback>
}
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	2320      	movs	r3, #32
 80024f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80024f4:	2300      	movs	r3, #0
 80024f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7fe f90a 	bl	8000714 <HAL_I2C_SlaveRxCpltCallback>
 8002500:	e7f4      	b.n	80024ec <I2C_ITSlaveCplt+0x104>
 8002502:	bf00      	nop
 8002504:	ffff0000 	.word	0xffff0000

08002508 <I2C_Slave_ISR_IT>:
{
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800250a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800250c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002510:	2b01      	cmp	r3, #1
 8002512:	f000 809c 	beq.w	800264e <I2C_Slave_ISR_IT+0x146>
 8002516:	4616      	mov	r6, r2
 8002518:	460d      	mov	r5, r1
 800251a:	4604      	mov	r4, r0
 800251c:	2301      	movs	r3, #1
 800251e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002522:	f011 0f20 	tst.w	r1, #32
 8002526:	d002      	beq.n	800252e <I2C_Slave_ISR_IT+0x26>
 8002528:	f012 0f20 	tst.w	r2, #32
 800252c:	d119      	bne.n	8002562 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800252e:	f015 0f10 	tst.w	r5, #16
 8002532:	d03e      	beq.n	80025b2 <I2C_Slave_ISR_IT+0xaa>
 8002534:	f016 0f10 	tst.w	r6, #16
 8002538:	d03b      	beq.n	80025b2 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 800253a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	bb43      	cbnz	r3, 8002592 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002540:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b28      	cmp	r3, #40	; 0x28
 8002548:	d00e      	beq.n	8002568 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800254a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b29      	cmp	r3, #41	; 0x29
 8002552:	d011      	beq.n	8002578 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	2210      	movs	r2, #16
 8002558:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800255a:	2000      	movs	r0, #0
 800255c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8002560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002562:	f7ff ff41 	bl	80023e8 <I2C_ITSlaveCplt>
 8002566:	e7e2      	b.n	800252e <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002568:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800256c:	d1ed      	bne.n	800254a <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800256e:	4629      	mov	r1, r5
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff fe89 	bl	8002288 <I2C_ITListenCplt>
 8002576:	e7f0      	b.n	800255a <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002578:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800257c:	d0ea      	beq.n	8002554 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	2210      	movs	r2, #16
 8002582:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff fc42 	bl	8001e0e <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800258a:	4620      	mov	r0, r4
 800258c:	f7ff fdfe 	bl	800218c <I2C_ITSlaveSeqCplt>
 8002590:	e7e3      	b.n	800255a <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	2210      	movs	r2, #16
 8002596:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002598:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025a0:	b117      	cbz	r7, 80025a8 <I2C_Slave_ISR_IT+0xa0>
 80025a2:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80025a6:	d1d8      	bne.n	800255a <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff fea2 	bl	80022f4 <I2C_ITError>
 80025b0:	e7d3      	b.n	800255a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025b2:	f015 0f04 	tst.w	r5, #4
 80025b6:	d01e      	beq.n	80025f6 <I2C_Slave_ISR_IT+0xee>
 80025b8:	f016 0f04 	tst.w	r6, #4
 80025bc:	d01b      	beq.n	80025f6 <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 80025be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b16b      	cbz	r3, 80025e0 <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ca:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80025cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ce:	3301      	adds	r3, #1
 80025d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80025d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80025d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80025e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1b8      	bne.n	800255a <I2C_Slave_ISR_IT+0x52>
 80025e8:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80025ec:	d0b5      	beq.n	800255a <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7ff fdcc 	bl	800218c <I2C_ITSlaveSeqCplt>
 80025f4:	e7b1      	b.n	800255a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025f6:	f015 0f08 	tst.w	r5, #8
 80025fa:	d002      	beq.n	8002602 <I2C_Slave_ISR_IT+0xfa>
 80025fc:	f016 0f08 	tst.w	r6, #8
 8002600:	d117      	bne.n	8002632 <I2C_Slave_ISR_IT+0x12a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002602:	f015 0f02 	tst.w	r5, #2
 8002606:	d0a8      	beq.n	800255a <I2C_Slave_ISR_IT+0x52>
 8002608:	f016 0f02 	tst.w	r6, #2
 800260c:	d0a5      	beq.n	800255a <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800260e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	b19b      	cbz	r3, 800263c <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002614:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800261c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800261e:	3301      	adds	r3, #1
 8002620:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002624:	3b01      	subs	r3, #1
 8002626:	b29b      	uxth	r3, r3
 8002628:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800262a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	8523      	strh	r3, [r4, #40]	; 0x28
 8002630:	e793      	b.n	800255a <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002632:	4629      	mov	r1, r5
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff fdd8 	bl	80021ea <I2C_ITAddrCplt>
 800263a:	e78e      	b.n	800255a <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800263c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8002640:	d001      	beq.n	8002646 <I2C_Slave_ISR_IT+0x13e>
 8002642:	2f00      	cmp	r7, #0
 8002644:	d189      	bne.n	800255a <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff fda0 	bl	800218c <I2C_ITSlaveSeqCplt>
 800264c:	e785      	b.n	800255a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800264e:	2002      	movs	r0, #2
 8002650:	e786      	b.n	8002560 <I2C_Slave_ISR_IT+0x58>

08002652 <I2C_ITMasterCplt>:
{
 8002652:	b510      	push	{r4, lr}
 8002654:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002656:	6803      	ldr	r3, [r0, #0]
 8002658:	2220      	movs	r2, #32
 800265a:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 800265c:	6802      	ldr	r2, [r0, #0]
 800265e:	6853      	ldr	r3, [r2, #4]
 8002660:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002664:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002668:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6053      	str	r3, [r2, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002672:	2300      	movs	r3, #0
 8002674:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8002676:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002678:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800267c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800267e:	f011 0f10 	tst.w	r1, #16
 8002682:	d006      	beq.n	8002692 <I2C_ITMasterCplt+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002684:	6803      	ldr	r3, [r0, #0]
 8002686:	2210      	movs	r2, #16
 8002688:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800268a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff fbbb 	bl	8001e0e <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002698:	2103      	movs	r1, #3
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff fc24 	bl	8001ee8 <I2C_Disable_IRQ>
  tmperror = hi2c->ErrorCode;
 80026a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80026a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b60      	cmp	r3, #96	; 0x60
 80026aa:	d01b      	beq.n	80026e4 <I2C_ITMasterCplt+0x92>
 80026ac:	b9d2      	cbnz	r2, 80026e4 <I2C_ITMasterCplt+0x92>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026ae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b21      	cmp	r3, #33	; 0x21
 80026b6:	d01a      	beq.n	80026ee <I2C_ITMasterCplt+0x9c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026b8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b22      	cmp	r3, #34	; 0x22
 80026c0:	d114      	bne.n	80026ec <I2C_ITMasterCplt+0x9a>
    hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	2320      	movs	r3, #32
 80026c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d027      	beq.n	8002722 <I2C_ITMasterCplt+0xd0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80026d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff fd2a 	bl	8002136 <HAL_I2C_MasterRxCpltCallback>
}
 80026e2:	e003      	b.n	80026ec <I2C_ITMasterCplt+0x9a>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff fe04 	bl	80022f4 <I2C_ITError>
}
 80026ec:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	2320      	movs	r3, #32
 80026f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026f4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d008      	beq.n	8002710 <I2C_ITMasterCplt+0xbe>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	2300      	movs	r3, #0
 8002700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002704:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff fd13 	bl	8002134 <HAL_I2C_MasterTxCpltCallback>
 800270e:	e7ed      	b.n	80026ec <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	2300      	movs	r3, #0
 8002712:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002716:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff fde6 	bl	80022ec <HAL_I2C_MemTxCpltCallback>
 8002720:	e7e4      	b.n	80026ec <I2C_ITMasterCplt+0x9a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002728:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff fdde 	bl	80022ee <HAL_I2C_MemRxCpltCallback>
 8002732:	e7db      	b.n	80026ec <I2C_ITMasterCplt+0x9a>

08002734 <I2C_Slave_ISR_DMA>:
{
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8002736:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002738:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800273c:	2b01      	cmp	r3, #1
 800273e:	d076      	beq.n	800282e <I2C_Slave_ISR_DMA+0xfa>
 8002740:	4616      	mov	r6, r2
 8002742:	460d      	mov	r5, r1
 8002744:	4604      	mov	r4, r0
 8002746:	2301      	movs	r3, #1
 8002748:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800274c:	f011 0f20 	tst.w	r1, #32
 8002750:	d002      	beq.n	8002758 <I2C_Slave_ISR_DMA+0x24>
 8002752:	f012 0f20 	tst.w	r2, #32
 8002756:	d115      	bne.n	8002784 <I2C_Slave_ISR_DMA+0x50>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002758:	f015 0f10 	tst.w	r5, #16
 800275c:	d058      	beq.n	8002810 <I2C_Slave_ISR_DMA+0xdc>
 800275e:	f016 0f10 	tst.w	r6, #16
 8002762:	d055      	beq.n	8002810 <I2C_Slave_ISR_DMA+0xdc>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002764:	f3c6 3380 	ubfx	r3, r6, #14, #1
 8002768:	b913      	cbnz	r3, 8002770 <I2C_Slave_ISR_DMA+0x3c>
 800276a:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 800276e:	d04b      	beq.n	8002808 <I2C_Slave_ISR_DMA+0xd4>
      if (hi2c->hdmarx != NULL)
 8002770:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002772:	b152      	cbz	r2, 800278a <I2C_Slave_ISR_DMA+0x56>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002774:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8002778:	d009      	beq.n	800278e <I2C_Slave_ISR_DMA+0x5a>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	6852      	ldr	r2, [r2, #4]
 800277e:	b1f2      	cbz	r2, 80027be <I2C_Slave_ISR_DMA+0x8a>
  uint32_t treatdmanack = 0U;
 8002780:	2100      	movs	r1, #0
 8002782:	e005      	b.n	8002790 <I2C_Slave_ISR_DMA+0x5c>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002784:	f7ff fe30 	bl	80023e8 <I2C_ITSlaveCplt>
 8002788:	e7e6      	b.n	8002758 <I2C_Slave_ISR_DMA+0x24>
  uint32_t treatdmanack = 0U;
 800278a:	2100      	movs	r1, #0
 800278c:	e000      	b.n	8002790 <I2C_Slave_ISR_DMA+0x5c>
 800278e:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
 8002790:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002792:	b11a      	cbz	r2, 800279c <I2C_Slave_ISR_DMA+0x68>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002794:	b113      	cbz	r3, 800279c <I2C_Slave_ISR_DMA+0x68>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b193      	cbz	r3, 80027c2 <I2C_Slave_ISR_DMA+0x8e>
      if (treatdmanack == 1U)
 800279c:	b989      	cbnz	r1, 80027c2 <I2C_Slave_ISR_DMA+0x8e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027ac:	b117      	cbz	r7, 80027b4 <I2C_Slave_ISR_DMA+0x80>
 80027ae:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80027b2:	d133      	bne.n	800281c <I2C_Slave_ISR_DMA+0xe8>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80027b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff fd9c 	bl	80022f4 <I2C_ITError>
 80027bc:	e02e      	b.n	800281c <I2C_Slave_ISR_DMA+0xe8>
            treatdmanack = 1U;
 80027be:	2101      	movs	r1, #1
 80027c0:	e7e6      	b.n	8002790 <I2C_Slave_ISR_DMA+0x5c>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80027c2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b28      	cmp	r3, #40	; 0x28
 80027ca:	d008      	beq.n	80027de <I2C_Slave_ISR_DMA+0xaa>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b29      	cmp	r3, #41	; 0x29
 80027d4:	d00b      	beq.n	80027ee <I2C_Slave_ISR_DMA+0xba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	61da      	str	r2, [r3, #28]
 80027dc:	e01e      	b.n	800281c <I2C_Slave_ISR_DMA+0xe8>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80027de:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80027e2:	d1f3      	bne.n	80027cc <I2C_Slave_ISR_DMA+0x98>
          I2C_ITListenCplt(hi2c, ITFlags);
 80027e4:	4629      	mov	r1, r5
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff fd4e 	bl	8002288 <I2C_ITListenCplt>
 80027ec:	e016      	b.n	800281c <I2C_Slave_ISR_DMA+0xe8>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027ee:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80027f2:	d0f0      	beq.n	80027d6 <I2C_Slave_ISR_DMA+0xa2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	2210      	movs	r2, #16
 80027f8:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff fb07 	bl	8001e0e <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff fcc3 	bl	800218c <I2C_ITSlaveSeqCplt>
 8002806:	e009      	b.n	800281c <I2C_Slave_ISR_DMA+0xe8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	61da      	str	r2, [r3, #28]
 800280e:	e005      	b.n	800281c <I2C_Slave_ISR_DMA+0xe8>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002810:	f015 0f08 	tst.w	r5, #8
 8002814:	d002      	beq.n	800281c <I2C_Slave_ISR_DMA+0xe8>
 8002816:	f016 0f08 	tst.w	r6, #8
 800281a:	d103      	bne.n	8002824 <I2C_Slave_ISR_DMA+0xf0>
  __HAL_UNLOCK(hi2c);
 800281c:	2000      	movs	r0, #0
 800281e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8002822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002824:	4629      	mov	r1, r5
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fcdf 	bl	80021ea <I2C_ITAddrCplt>
 800282c:	e7f6      	b.n	800281c <I2C_Slave_ISR_DMA+0xe8>
  __HAL_LOCK(hi2c);
 800282e:	2002      	movs	r0, #2
 8002830:	e7f7      	b.n	8002822 <I2C_Slave_ISR_DMA+0xee>

08002832 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8002832:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002836:	2b01      	cmp	r3, #1
 8002838:	f000 8099 	beq.w	800296e <I2C_Master_ISR_DMA+0x13c>
{
 800283c:	b510      	push	{r4, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8002842:	2301      	movs	r3, #1
 8002844:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002848:	f011 0f10 	tst.w	r1, #16
 800284c:	d002      	beq.n	8002854 <I2C_Master_ISR_DMA+0x22>
 800284e:	f012 0f10 	tst.w	r2, #16
 8002852:	d131      	bne.n	80028b8 <I2C_Master_ISR_DMA+0x86>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002854:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002858:	d05f      	beq.n	800291a <I2C_Master_ISR_DMA+0xe8>
 800285a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800285e:	d05c      	beq.n	800291a <I2C_Master_ISR_DMA+0xe8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 800286a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d045      	beq.n	80028fe <I2C_Master_ISR_DMA+0xcc>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2bff      	cmp	r3, #255	; 0xff
 8002880:	d92c      	bls.n	80028dc <I2C_Master_ISR_DMA+0xaa>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002882:	23ff      	movs	r3, #255	; 0xff
 8002884:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800288a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800288e:	2000      	movs	r0, #0
 8002890:	9000      	str	r0, [sp, #0]
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff facc 	bl	8001e30 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8002898:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800289a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b22      	cmp	r3, #34	; 0x22
 80028aa:	d022      	beq.n	80028f2 <I2C_Master_ISR_DMA+0xc0>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00c      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	6803      	ldr	r3, [r0, #0]
 80028ba:	2210      	movs	r2, #16
 80028bc:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80028c6:	2112      	movs	r1, #18
 80028c8:	f7ff face 	bl	8001e68 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fa9e 	bl	8001e0e <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80028d8:	b002      	add	sp, #8
 80028da:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 80028dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028de:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80028e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e6:	d001      	beq.n	80028ec <I2C_Master_ISR_DMA+0xba>
          xfermode = hi2c->XferOptions;
 80028e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028ea:	e7ce      	b.n	800288a <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 80028ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f0:	e7cb      	b.n	800288a <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	6813      	ldr	r3, [r2, #0]
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e7e9      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002906:	d103      	bne.n	8002910 <I2C_Master_ISR_DMA+0xde>
        I2C_ITMasterSeqCplt(hi2c);
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff fc15 	bl	8002138 <I2C_ITMasterSeqCplt>
 800290e:	e7e0      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	4620      	mov	r0, r4
 8002914:	f7ff fcee 	bl	80022f4 <I2C_ITError>
 8002918:	e7db      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800291a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800291e:	d01c      	beq.n	800295a <I2C_Master_ISR_DMA+0x128>
 8002920:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002924:	d019      	beq.n	800295a <I2C_Master_ISR_DMA+0x128>
    if (hi2c->XferCount == 0U)
 8002926:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	b98b      	cbnz	r3, 8002950 <I2C_Master_ISR_DMA+0x11e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002934:	d1cd      	bne.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002936:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002938:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800293c:	d104      	bne.n	8002948 <I2C_Master_ISR_DMA+0x116>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	e7c4      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
          I2C_ITMasterSeqCplt(hi2c);
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff fbf5 	bl	8002138 <I2C_ITMasterSeqCplt>
 800294e:	e7c0      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002950:	2140      	movs	r1, #64	; 0x40
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff fcce 	bl	80022f4 <I2C_ITError>
 8002958:	e7bb      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800295a:	f011 0f20 	tst.w	r1, #32
 800295e:	d0b8      	beq.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
 8002960:	f012 0f20 	tst.w	r2, #32
 8002964:	d0b5      	beq.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff fe73 	bl	8002652 <I2C_ITMasterCplt>
 800296c:	e7b1      	b.n	80028d2 <I2C_Master_ISR_DMA+0xa0>
  __HAL_LOCK(hi2c);
 800296e:	2002      	movs	r0, #2
}
 8002970:	4770      	bx	lr

08002972 <I2C_DMAAbort>:
{
 8002972:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002974:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002976:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002978:	2300      	movs	r3, #0
 800297a:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 800297c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800297e:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002980:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b60      	cmp	r3, #96	; 0x60
 8002988:	d002      	beq.n	8002990 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 800298a:	f7ff fcb1 	bl	80022f0 <HAL_I2C_ErrorCallback>
}
 800298e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	2320      	movs	r3, #32
 8002992:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002996:	f7ff fcac 	bl	80022f2 <HAL_I2C_AbortCpltCallback>
 800299a:	e7f8      	b.n	800298e <I2C_DMAAbort+0x1c>

0800299c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d124      	bne.n	80029f0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d022      	beq.n	80029f4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80029ae:	2301      	movs	r3, #1
 80029b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	2324      	movs	r3, #36	; 0x24
 80029b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ba:	6802      	ldr	r2, [r0, #0]
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029c4:	6802      	ldr	r2, [r0, #0]
 80029c6:	6813      	ldr	r3, [r2, #0]
 80029c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029cc:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ce:	6802      	ldr	r2, [r0, #0]
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	4319      	orrs	r1, r3
 80029d4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d6:	6802      	ldr	r2, [r0, #0]
 80029d8:	6813      	ldr	r3, [r2, #0]
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	2320      	movs	r3, #32
 80029e2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80029ec:	4618      	mov	r0, r3
 80029ee:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2002      	movs	r0, #2
 80029f2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80029f4:	2002      	movs	r0, #2
  }
}
 80029f6:	4770      	bx	lr

080029f8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d122      	bne.n	8002a48 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a02:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d020      	beq.n	8002a4c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	2324      	movs	r3, #36	; 0x24
 8002a12:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a16:	6802      	ldr	r2, [r0, #0]
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a20:	6802      	ldr	r2, [r0, #0]
 8002a22:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a28:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a2c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a2e:	6802      	ldr	r2, [r0, #0]
 8002a30:	6813      	ldr	r3, [r2, #0]
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002a44:	4618      	mov	r0, r3
 8002a46:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2002      	movs	r0, #2
 8002a4a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002a4c:	2002      	movs	r0, #2
  }
}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f000 830d 	beq.w	8003070 <HAL_RCC_OscConfig+0x620>
{
 8002a56:	b570      	push	{r4, r5, r6, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5c:	6803      	ldr	r3, [r0, #0]
 8002a5e:	f013 0f01 	tst.w	r3, #1
 8002a62:	d03b      	beq.n	8002adc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a64:	4bb5      	ldr	r3, [pc, #724]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d01e      	beq.n	8002aae <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a70:	4bb2      	ldr	r3, [pc, #712]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	6863      	ldr	r3, [r4, #4]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d068      	beq.n	8002b56 <HAL_RCC_OscConfig+0x106>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 8092 	bne.w	8002bae <HAL_RCC_OscConfig+0x15e>
 8002a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a8e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e05d      	b.n	8002b60 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa4:	4ba5      	ldr	r3, [pc, #660]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002aac:	d0e6      	beq.n	8002a7c <HAL_RCC_OscConfig+0x2c>
 8002aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab2:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	4ba1      	ldr	r3, [pc, #644]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2201      	movs	r2, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	420b      	tst	r3, r1
 8002ad2:	d003      	beq.n	8002adc <HAL_RCC_OscConfig+0x8c>
 8002ad4:	6863      	ldr	r3, [r4, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 82cc 	beq.w	8003074 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	f013 0f02 	tst.w	r3, #2
 8002ae2:	f000 80c6 	beq.w	8002c72 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ae6:	4b95      	ldr	r3, [pc, #596]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f013 0f0c 	tst.w	r3, #12
 8002aee:	f000 809c 	beq.w	8002c2a <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002af2:	4b92      	ldr	r3, [pc, #584]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	f000 808f 	beq.w	8002c1e <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b00:	6923      	ldr	r3, [r4, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80f3 	beq.w	8002cee <HAL_RCC_OscConfig+0x29e>
 8002b08:	2201      	movs	r2, #1
 8002b0a:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fa95 	bl	800104c <HAL_GetTick>
 8002b22:	4605      	mov	r5, r0
 8002b24:	2302      	movs	r3, #2
 8002b26:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	2302      	movs	r3, #2
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	420b      	tst	r3, r1
 8002b44:	f040 80c4 	bne.w	8002cd0 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fe fa80 	bl	800104c <HAL_GetTick>
 8002b4c:	1b40      	subs	r0, r0, r5
 8002b4e:	2802      	cmp	r0, #2
 8002b50:	d9e8      	bls.n	8002b24 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002b52:	2003      	movs	r0, #3
 8002b54:	e295      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b56:	4a79      	ldr	r2, [pc, #484]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b60:	4a76      	ldr	r2, [pc, #472]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002b62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b64:	f023 030f 	bic.w	r3, r3, #15
 8002b68:	68a1      	ldr	r1, [r4, #8]
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b6e:	6863      	ldr	r3, [r4, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d036      	beq.n	8002be2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002b74:	f7fe fa6a 	bl	800104c <HAL_GetTick>
 8002b78:	4605      	mov	r5, r0
 8002b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2201      	movs	r2, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	420b      	tst	r3, r1
 8002b9e:	d19d      	bne.n	8002adc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fa54 	bl	800104c <HAL_GetTick>
 8002ba4:	1b40      	subs	r0, r0, r5
 8002ba6:	2864      	cmp	r0, #100	; 0x64
 8002ba8:	d9e7      	bls.n	8002b7a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002baa:	2003      	movs	r0, #3
 8002bac:	e269      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb2:	d009      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x178>
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e7cb      	b.n	8002b60 <HAL_RCC_OscConfig+0x110>
 8002bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bcc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e7be      	b.n	8002b60 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002be2:	f7fe fa33 	bl	800104c <HAL_GetTick>
 8002be6:	4605      	mov	r5, r0
 8002be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bec:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf0:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2201      	movs	r2, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	420b      	tst	r3, r1
 8002c0c:	f43f af66 	beq.w	8002adc <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fa1c 	bl	800104c <HAL_GetTick>
 8002c14:	1b40      	subs	r0, r0, r5
 8002c16:	2864      	cmp	r0, #100	; 0x64
 8002c18:	d9e6      	bls.n	8002be8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	e231      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c26:	f47f af6b 	bne.w	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c30:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	2302      	movs	r3, #2
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2201      	movs	r2, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	420b      	tst	r3, r1
 8002c4a:	d004      	beq.n	8002c56 <HAL_RCC_OscConfig+0x206>
 8002c4c:	6923      	ldr	r3, [r4, #16]
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d001      	beq.n	8002c56 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002c52:	2001      	movs	r0, #1
 8002c54:	e215      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4839      	ldr	r0, [pc, #228]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002c58:	6803      	ldr	r3, [r0, #0]
 8002c5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c5e:	6961      	ldr	r1, [r4, #20]
 8002c60:	22f8      	movs	r2, #248	; 0xf8
 8002c62:	fa92 f2a2 	rbit	r2, r2
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	f013 0f08 	tst.w	r3, #8
 8002c78:	f000 808c 	beq.w	8002d94 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7c:	69a3      	ldr	r3, [r4, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d060      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2f4>
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_RCC_OscConfig+0x2f0>)
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe f9da 	bl	800104c <HAL_GetTick>
 8002c98:	4605      	mov	r5, r0
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	fa93 f2a3 	rbit	r2, r3
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca8:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002caa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2201      	movs	r2, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	420b      	tst	r3, r1
 8002cc0:	d168      	bne.n	8002d94 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7fe f9c3 	bl	800104c <HAL_GetTick>
 8002cc6:	1b40      	subs	r0, r0, r5
 8002cc8:	2802      	cmp	r0, #2
 8002cca:	d9e6      	bls.n	8002c9a <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8002ccc:	2003      	movs	r0, #3
 8002cce:	e1d8      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	481a      	ldr	r0, [pc, #104]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002cd2:	6803      	ldr	r3, [r0, #0]
 8002cd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cd8:	6961      	ldr	r1, [r4, #20]
 8002cda:	22f8      	movs	r2, #248	; 0xf8
 8002cdc:	fa92 f2a2 	rbit	r2, r2
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	6003      	str	r3, [r0, #0]
 8002cec:	e7c1      	b.n	8002c72 <HAL_RCC_OscConfig+0x222>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d06:	f7fe f9a1 	bl	800104c <HAL_GetTick>
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_RCC_OscConfig+0x2ec>)
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	2302      	movs	r3, #2
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2201      	movs	r2, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	420b      	tst	r3, r1
 8002d2c:	d0a1      	beq.n	8002c72 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe f98d 	bl	800104c <HAL_GetTick>
 8002d32:	1b40      	subs	r0, r0, r5
 8002d34:	2802      	cmp	r0, #2
 8002d36:	d9e9      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8002d38:	2003      	movs	r0, #3
 8002d3a:	e1a2      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	10908120 	.word	0x10908120
 8002d44:	2201      	movs	r2, #1
 8002d46:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	4bbc      	ldr	r3, [pc, #752]	; (8003040 <HAL_RCC_OscConfig+0x5f0>)
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7fe f978 	bl	800104c <HAL_GetTick>
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	2302      	movs	r3, #2
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4ab5      	ldr	r2, [pc, #724]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002d6e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	420b      	tst	r3, r1
 8002d84:	d006      	beq.n	8002d94 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d86:	f7fe f961 	bl	800104c <HAL_GetTick>
 8002d8a:	1b40      	subs	r0, r0, r5
 8002d8c:	2802      	cmp	r0, #2
 8002d8e:	d9e6      	bls.n	8002d5e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002d90:	2003      	movs	r0, #3
 8002d92:	e176      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f013 0f04 	tst.w	r3, #4
 8002d9a:	f000 80b3 	beq.w	8002f04 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4ba9      	ldr	r3, [pc, #676]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002da6:	d120      	bne.n	8002dea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4ba6      	ldr	r3, [pc, #664]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002db0:	61da      	str	r2, [r3, #28]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002dbc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4ba2      	ldr	r3, [pc, #648]	; (8003048 <HAL_RCC_OscConfig+0x5f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002dc6:	d012      	beq.n	8002dee <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	68e3      	ldr	r3, [r4, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d023      	beq.n	8002e16 <HAL_RCC_OscConfig+0x3c6>
 8002dce:	bb73      	cbnz	r3, 8002e2e <HAL_RCC_OscConfig+0x3de>
 8002dd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dd4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	621a      	str	r2, [r3, #32]
 8002de0:	6a1a      	ldr	r2, [r3, #32]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	621a      	str	r2, [r3, #32]
 8002de8:	e01a      	b.n	8002e20 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8002dea:	2500      	movs	r5, #0
 8002dec:	e7e7      	b.n	8002dbe <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dee:	4a96      	ldr	r2, [pc, #600]	; (8003048 <HAL_RCC_OscConfig+0x5f8>)
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002df8:	f7fe f928 	bl	800104c <HAL_GetTick>
 8002dfc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b92      	ldr	r3, [pc, #584]	; (8003048 <HAL_RCC_OscConfig+0x5f8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e06:	d1df      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe f920 	bl	800104c <HAL_GetTick>
 8002e0c:	1b80      	subs	r0, r0, r6
 8002e0e:	2864      	cmp	r0, #100	; 0x64
 8002e10:	d9f5      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8002e12:	2003      	movs	r0, #3
 8002e14:	e135      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e16:	4a8b      	ldr	r2, [pc, #556]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002e18:	6a13      	ldr	r3, [r2, #32]
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e20:	68e3      	ldr	r3, [r4, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d041      	beq.n	8002eaa <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fe f911 	bl	800104c <HAL_GetTick>
 8002e2a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	e02b      	b.n	8002e86 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_OscConfig+0x3f6>
 8002e32:	4b84      	ldr	r3, [pc, #528]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	621a      	str	r2, [r3, #32]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	621a      	str	r2, [r3, #32]
 8002e44:	e7ec      	b.n	8002e20 <HAL_RCC_OscConfig+0x3d0>
 8002e46:	4b7f      	ldr	r3, [pc, #508]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	f042 0204 	orr.w	r2, r2, #4
 8002e4e:	621a      	str	r2, [r3, #32]
 8002e50:	6a1a      	ldr	r2, [r3, #32]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	621a      	str	r2, [r3, #32]
 8002e58:	e7e2      	b.n	8002e20 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002e5c:	6a19      	ldr	r1, [r3, #32]
 8002e5e:	2302      	movs	r3, #2
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	4219      	tst	r1, r3
 8002e74:	d145      	bne.n	8002f02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe f8e9 	bl	800104c <HAL_GetTick>
 8002e7a:	1b80      	subs	r0, r0, r6
 8002e7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e80:	4298      	cmp	r0, r3
 8002e82:	f200 80f9 	bhi.w	8003078 <HAL_RCC_OscConfig+0x628>
 8002e86:	2302      	movs	r3, #2
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d0dd      	beq.n	8002e5a <HAL_RCC_OscConfig+0x40a>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002ea6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ea8:	e7d9      	b.n	8002e5e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe f8cf 	bl	800104c <HAL_GetTick>
 8002eae:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x48e>
 8002eb2:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002eb4:	6a19      	ldr	r1, [r3, #32]
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	4219      	tst	r1, r3
 8002ecc:	d019      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fe f8bd 	bl	800104c <HAL_GetTick>
 8002ed2:	1b80      	subs	r0, r0, r6
 8002ed4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ed8:	4298      	cmp	r0, r3
 8002eda:	f200 80cf 	bhi.w	800307c <HAL_RCC_OscConfig+0x62c>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	fa93 f2a3 	rbit	r2, r3
 8002ee4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d0dd      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x462>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	4b51      	ldr	r3, [pc, #324]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002efe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f00:	e7d9      	b.n	8002eb6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f02:	bbb5      	cbnz	r5, 8002f72 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f04:	69e3      	ldr	r3, [r4, #28]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80ba 	beq.w	8003080 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	f002 020c 	and.w	r2, r2, #12
 8002f14:	2a08      	cmp	r2, #8
 8002f16:	f000 8099 	beq.w	800304c <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d02f      	beq.n	8002f7e <HAL_RCC_OscConfig+0x52e>
 8002f1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f22:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe f888 	bl	800104c <HAL_GetTick>
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f42:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f46:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	4219      	tst	r1, r3
 8002f62:	d06b      	beq.n	800303c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe f872 	bl	800104c <HAL_GetTick>
 8002f68:	1b00      	subs	r0, r0, r4
 8002f6a:	2802      	cmp	r0, #2
 8002f6c:	d9e7      	bls.n	8002f3e <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
 8002f70:	e087      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4a34      	ldr	r2, [pc, #208]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002f74:	69d3      	ldr	r3, [r2, #28]
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	61d3      	str	r3, [r2, #28]
 8002f7c:	e7c2      	b.n	8002f04 <HAL_RCC_OscConfig+0x4b4>
 8002f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f82:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f98:	f7fe f858 	bl	800104c <HAL_GetTick>
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa6:	4b27      	ldr	r3, [pc, #156]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2201      	movs	r2, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	4219      	tst	r1, r3
 8002fc2:	d006      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe f842 	bl	800104c <HAL_GetTick>
 8002fc8:	1b40      	subs	r0, r0, r5
 8002fca:	2802      	cmp	r0, #2
 8002fcc:	d9e7      	bls.n	8002f9e <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8002fce:	2003      	movs	r0, #3
 8002fd0:	e057      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	491c      	ldr	r1, [pc, #112]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 8002fd4:	684b      	ldr	r3, [r1, #4]
 8002fd6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002fda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fdc:	6a20      	ldr	r0, [r4, #32]
 8002fde:	4302      	orrs	r2, r0
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
 8002fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f825 	bl	800104c <HAL_GetTick>
 8003002:	4604      	mov	r4, r0
 8003004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003008:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCC_OscConfig+0x5f4>)
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2201      	movs	r2, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	4219      	tst	r1, r3
 8003028:	d106      	bne.n	8003038 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302a:	f7fe f80f 	bl	800104c <HAL_GetTick>
 800302e:	1b00      	subs	r0, r0, r4
 8003030:	2802      	cmp	r0, #2
 8003032:	d9e7      	bls.n	8003004 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8003034:	2003      	movs	r0, #3
 8003036:	e024      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8003038:	2000      	movs	r0, #0
 800303a:	e022      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
 800303c:	2000      	movs	r0, #0
 800303e:	e020      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
 8003040:	10908120 	.word	0x10908120
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	2b01      	cmp	r3, #1
 800304e:	d01a      	beq.n	8003086 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <HAL_RCC_OscConfig+0x640>)
 8003052:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003054:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003058:	6a22      	ldr	r2, [r4, #32]
 800305a:	4291      	cmp	r1, r2
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 800305e:	2001      	movs	r0, #1
 8003060:	e00f      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003062:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003066:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 800306c:	2001      	movs	r0, #1
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8003070:	2001      	movs	r0, #1
}
 8003072:	4770      	bx	lr
        return HAL_ERROR;
 8003074:	2001      	movs	r0, #1
 8003076:	e004      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8003078:	2003      	movs	r0, #3
 800307a:	e002      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 800307c:	2003      	movs	r0, #3
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8003080:	2000      	movs	r0, #0
}
 8003082:	b002      	add	sp, #8
 8003084:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003086:	2001      	movs	r0, #1
 8003088:	e7fb      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 800308a:	2000      	movs	r0, #0
 800308c:	e7f9      	b.n	8003082 <HAL_RCC_OscConfig+0x632>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000

08003094 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x64>)
 8003096:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003098:	f003 020c 	and.w	r2, r3, #12
 800309c:	2a04      	cmp	r2, #4
 800309e:	d003      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x14>
 80030a0:	2a08      	cmp	r2, #8
 80030a2:	d003      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x18>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4815      	ldr	r0, [pc, #84]	; (80030fc <HAL_RCC_GetSysClockFreq+0x68>)
      break;
    }
  }
  return sysclockfreq;
}
 80030a6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80030a8:	4815      	ldr	r0, [pc, #84]	; (8003100 <HAL_RCC_GetSysClockFreq+0x6c>)
 80030aa:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030ac:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80030b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	fab2 f282 	clz	r2, r2
 80030bc:	fa21 f202 	lsr.w	r2, r1, r2
 80030c0:	4910      	ldr	r1, [pc, #64]	; (8003104 <HAL_RCC_GetSysClockFreq+0x70>)
 80030c2:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030c4:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x64>)
 80030c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030c8:	f002 020f 	and.w	r2, r2, #15
 80030cc:	210f      	movs	r1, #15
 80030ce:	fa91 f1a1 	rbit	r1, r1
 80030d2:	fab1 f181 	clz	r1, r1
 80030d6:	40ca      	lsrs	r2, r1
 80030d8:	490b      	ldr	r1, [pc, #44]	; (8003108 <HAL_RCC_GetSysClockFreq+0x74>)
 80030da:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x5a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_RCC_GetSysClockFreq+0x6c>)
 80030e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e8:	fb00 f003 	mul.w	r0, r0, r3
 80030ec:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <HAL_RCC_GetSysClockFreq+0x78>)
 80030f0:	fb03 f000 	mul.w	r0, r3, r0
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	007a1200 	.word	0x007a1200
 8003100:	01e84800 	.word	0x01e84800
 8003104:	08006a54 	.word	0x08006a54
 8003108:	08006a64 	.word	0x08006a64
 800310c:	003d0900 	.word	0x003d0900

08003110 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003110:	2800      	cmp	r0, #0
 8003112:	f000 80c1 	beq.w	8003298 <HAL_RCC_ClockConfig+0x188>
{
 8003116:	b570      	push	{r4, r5, r6, lr}
 8003118:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800311a:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <HAL_RCC_ClockConfig+0x190>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	428b      	cmp	r3, r1
 8003124:	d20c      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4a5e      	ldr	r2, [pc, #376]	; (80032a0 <HAL_RCC_ClockConfig+0x190>)
 8003128:	6813      	ldr	r3, [r2, #0]
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	430b      	orrs	r3, r1
 8003130:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	428b      	cmp	r3, r1
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800313c:	2001      	movs	r0, #1
}
 800313e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	f013 0f02 	tst.w	r3, #2
 8003146:	d006      	beq.n	8003156 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 800314a:	6853      	ldr	r3, [r2, #4]
 800314c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003150:	68a0      	ldr	r0, [r4, #8]
 8003152:	4303      	orrs	r3, r0
 8003154:	6053      	str	r3, [r2, #4]
 8003156:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	f013 0f01 	tst.w	r3, #1
 800315e:	d05a      	beq.n	8003216 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d02d      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003166:	2b02      	cmp	r3, #2
 8003168:	d040      	beq.n	80031ec <HAL_RCC_ClockConfig+0xdc>
 800316a:	2202      	movs	r2, #2
 800316c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4a4c      	ldr	r2, [pc, #304]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 8003172:	6810      	ldr	r0, [r2, #0]
 8003174:	2202      	movs	r2, #2
 8003176:	fa92 f2a2 	rbit	r2, r2
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	f002 021f 	and.w	r2, r2, #31
 8003182:	2101      	movs	r1, #1
 8003184:	fa01 f202 	lsl.w	r2, r1, r2
 8003188:	4210      	tst	r0, r2
 800318a:	f000 8087 	beq.w	800329c <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4945      	ldr	r1, [pc, #276]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 8003190:	684a      	ldr	r2, [r1, #4]
 8003192:	f022 0203 	bic.w	r2, r2, #3
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800319a:	f7fd ff57 	bl	800104c <HAL_GetTick>
 800319e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a0:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	6862      	ldr	r2, [r4, #4]
 80031aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031ae:	d032      	beq.n	8003216 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fd ff4c 	bl	800104c <HAL_GetTick>
 80031b4:	1b80      	subs	r0, r0, r6
 80031b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80031ba:	4298      	cmp	r0, r3
 80031bc:	d9f0      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80031be:	2003      	movs	r0, #3
 80031c0:	e7bd      	b.n	800313e <HAL_RCC_ClockConfig+0x2e>
 80031c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031c6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4a36      	ldr	r2, [pc, #216]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 80031cc:	6810      	ldr	r0, [r2, #0]
 80031ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031d2:	fa92 f2a2 	rbit	r2, r2
 80031d6:	fab2 f282 	clz	r2, r2
 80031da:	f002 021f 	and.w	r2, r2, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	4202      	tst	r2, r0
 80031e6:	d1d2      	bne.n	800318e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80031e8:	2001      	movs	r0, #1
 80031ea:	e7a8      	b.n	800313e <HAL_RCC_ClockConfig+0x2e>
 80031ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f4:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 80031f6:	6810      	ldr	r0, [r2, #0]
 80031f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031fc:	fa92 f2a2 	rbit	r2, r2
 8003200:	fab2 f282 	clz	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4210      	tst	r0, r2
 8003210:	d1bd      	bne.n	800318e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8003212:	2001      	movs	r0, #1
 8003214:	e793      	b.n	800313e <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_ClockConfig+0x190>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	42ab      	cmp	r3, r5
 8003220:	d90c      	bls.n	800323c <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_RCC_ClockConfig+0x190>)
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	432b      	orrs	r3, r5
 800322c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	6813      	ldr	r3, [r2, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	42ab      	cmp	r3, r5
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
 800323a:	e780      	b.n	800313e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	f013 0f04 	tst.w	r3, #4
 8003242:	d006      	beq.n	8003252 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4a17      	ldr	r2, [pc, #92]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 8003246:	6853      	ldr	r3, [r2, #4]
 8003248:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800324c:	68e1      	ldr	r1, [r4, #12]
 800324e:	430b      	orrs	r3, r1
 8003250:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	f013 0f08 	tst.w	r3, #8
 8003258:	d007      	beq.n	800326a <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 800325c:	6853      	ldr	r3, [r2, #4]
 800325e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003262:	6921      	ldr	r1, [r4, #16]
 8003264:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003268:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800326a:	f7ff ff13 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCC_ClockConfig+0x194>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003276:	22f0      	movs	r2, #240	; 0xf0
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	fab2 f282 	clz	r2, r2
 8003280:	40d3      	lsrs	r3, r2
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x198>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	40d8      	lsrs	r0, r3
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_ClockConfig+0x19c>)
 800328a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCC_ClockConfig+0x1a0>)
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	f7fd fc5c 	bl	8000b4c <HAL_InitTick>
  return HAL_OK;
 8003294:	2000      	movs	r0, #0
 8003296:	e752      	b.n	800313e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003298:	2001      	movs	r0, #1
}
 800329a:	4770      	bx	lr
        return HAL_ERROR;
 800329c:	2001      	movs	r0, #1
 800329e:	e74e      	b.n	800313e <HAL_RCC_ClockConfig+0x2e>
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08006a3c 	.word	0x08006a3c
 80032ac:	20000000 	.word	0x20000000
 80032b0:	20000008 	.word	0x20000008

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80032b4:	4b01      	ldr	r3, [pc, #4]	; (80032bc <HAL_RCC_GetHCLKFreq+0x8>)
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032c2:	f7ff fff7 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80032ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80032d2:	fa92 f2a2 	rbit	r2, r2
 80032d6:	fab2 f282 	clz	r2, r2
 80032da:	40d3      	lsrs	r3, r2
 80032dc:	4a02      	ldr	r2, [pc, #8]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
} 
 80032e0:	40d8      	lsrs	r0, r3
 80032e2:	bd08      	pop	{r3, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	08006a4c 	.word	0x08006a4c

080032ec <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ec:	230f      	movs	r3, #15
 80032ee:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_GetClockConfig+0x34>)
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	f002 0203 	and.w	r2, r2, #3
 80032f8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003300:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003308:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003312:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_RCC_GetClockConfig+0x38>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	600b      	str	r3, [r1, #0]
}
 800331e:	4770      	bx	lr
 8003320:	40021000 	.word	0x40021000
 8003324:	40022000 	.word	0x40022000

08003328 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	b083      	sub	sp, #12
 800332c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800332e:	6803      	ldr	r3, [r0, #0]
 8003330:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003334:	d048      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003336:	4b83      	ldr	r3, [pc, #524]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800333e:	f040 80b4 	bne.w	80034aa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4b80      	ldr	r3, [pc, #512]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800334a:	61da      	str	r2, [r3, #28]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003356:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003360:	f000 80a5 	beq.w	80034ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003364:	4b77      	ldr	r3, [pc, #476]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003368:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800336c:	d022      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800336e:	6862      	ldr	r2, [r4, #4]
 8003370:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003374:	429a      	cmp	r2, r3
 8003376:	d01d      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003378:	4872      	ldr	r0, [pc, #456]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800337a:	6a01      	ldr	r1, [r0, #32]
 800337c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8003380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003384:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	4f6f      	ldr	r7, [pc, #444]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800338e:	443a      	add	r2, r7
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	f04f 0c01 	mov.w	ip, #1
 8003396:	f8c2 c000 	str.w	ip, [r2]
 800339a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	443b      	add	r3, r7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033aa:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033ac:	f011 0f01 	tst.w	r1, #1
 80033b0:	f040 8092 	bne.w	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033b4:	4a63      	ldr	r2, [pc, #396]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80033b6:	6a13      	ldr	r3, [r2, #32]
 80033b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033bc:	6861      	ldr	r1, [r4, #4]
 80033be:	430b      	orrs	r3, r1
 80033c0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033c2:	2d00      	cmp	r5, #0
 80033c4:	f040 80b4 	bne.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	f013 0f01 	tst.w	r3, #1
 80033ce:	d006      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d0:	4a5c      	ldr	r2, [pc, #368]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80033d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80033d4:	f023 0303 	bic.w	r3, r3, #3
 80033d8:	68a1      	ldr	r1, [r4, #8]
 80033da:	430b      	orrs	r3, r1
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	f013 0f20 	tst.w	r3, #32
 80033e4:	d006      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033e6:	4a57      	ldr	r2, [pc, #348]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80033e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80033ea:	f023 0310 	bic.w	r3, r3, #16
 80033ee:	68e1      	ldr	r1, [r4, #12]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6313      	str	r3, [r2, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033fa:	d006      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033fc:	4a51      	ldr	r2, [pc, #324]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80033fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003400:	f023 0320 	bic.w	r3, r3, #32
 8003404:	6921      	ldr	r1, [r4, #16]
 8003406:	430b      	orrs	r3, r1
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003410:	d006      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003412:	4a4c      	ldr	r2, [pc, #304]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003414:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341a:	6961      	ldr	r1, [r4, #20]
 800341c:	430b      	orrs	r3, r1
 800341e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003426:	d006      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003428:	4a46      	ldr	r2, [pc, #280]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800342a:	6853      	ldr	r3, [r2, #4]
 800342c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003430:	69e1      	ldr	r1, [r4, #28]
 8003432:	430b      	orrs	r3, r1
 8003434:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	f013 0f80 	tst.w	r3, #128	; 0x80
 800343c:	d006      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800343e:	4a41      	ldr	r2, [pc, #260]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003440:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003442:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003446:	69a1      	ldr	r1, [r4, #24]
 8003448:	430b      	orrs	r3, r1
 800344a:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003452:	d006      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003454:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003456:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345c:	6a21      	ldr	r1, [r4, #32]
 800345e:	430b      	orrs	r3, r1
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003468:	d006      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800346a:	4a36      	ldr	r2, [pc, #216]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800346c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800346e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003472:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003474:	430b      	orrs	r3, r1
 8003476:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800347e:	d006      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003480:	4a30      	ldr	r2, [pc, #192]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003482:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003488:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800348a:	430b      	orrs	r3, r1
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003494:	d053      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003496:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003498:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800349a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800349e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034a4:	2000      	movs	r0, #0
}
 80034a6:	b003      	add	sp, #12
 80034a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2500      	movs	r5, #0
 80034ac:	e754      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ae:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80034b0:	6813      	ldr	r3, [r2, #0]
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80034b8:	f7fd fdc8 	bl	800104c <HAL_GetTick>
 80034bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034c6:	f47f af4d 	bne.w	8003364 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fd fdbf 	bl	800104c <HAL_GetTick>
 80034ce:	1b80      	subs	r0, r0, r6
 80034d0:	2864      	cmp	r0, #100	; 0x64
 80034d2:	d9f4      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 80034d4:	2003      	movs	r0, #3
 80034d6:	e7e6      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        tickstart = HAL_GetTick();
 80034d8:	f7fd fdb8 	bl	800104c <HAL_GetTick>
 80034dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e015      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80034e2:	6a19      	ldr	r1, [r3, #32]
 80034e4:	2302      	movs	r3, #2
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2201      	movs	r2, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	420b      	tst	r3, r1
 80034fa:	f47f af5b 	bne.w	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fd fda5 	bl	800104c <HAL_GetTick>
 8003502:	1b80      	subs	r0, r0, r6
 8003504:	f241 3388 	movw	r3, #5000	; 0x1388
 8003508:	4298      	cmp	r0, r3
 800350a:	d816      	bhi.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800350c:	2302      	movs	r3, #2
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d0dd      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003524:	2302      	movs	r3, #2
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800352c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800352e:	e7d9      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	69d3      	ldr	r3, [r2, #28]
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	61d3      	str	r3, [r2, #28]
 8003538:	e746      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 800353a:	2003      	movs	r0, #3
 800353c:	e7b3      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  return HAL_OK;
 800353e:	2000      	movs	r0, #0
 8003540:	e7b1      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	10908100 	.word	0x10908100

08003550 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003554:	6802      	ldr	r2, [r0, #0]
 8003556:	68d3      	ldr	r3, [r2, #12]
 8003558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800355c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800355e:	f7fd fd75 	bl	800104c <HAL_GetTick>
 8003562:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f013 0f20 	tst.w	r3, #32
 800356c:	d107      	bne.n	800357e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800356e:	f7fd fd6d 	bl	800104c <HAL_GetTick>
 8003572:	1b40      	subs	r0, r0, r5
 8003574:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003578:	d9f4      	bls.n	8003564 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800357a:	2003      	movs	r0, #3
 800357c:	e000      	b.n	8003580 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800357e:	2000      	movs	r0, #0
}
 8003580:	bd38      	pop	{r3, r4, r5, pc}

08003582 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003582:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003584:	6803      	ldr	r3, [r0, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	f012 0f40 	tst.w	r2, #64	; 0x40
 800358c:	d001      	beq.n	8003592 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800358e:	2000      	movs	r0, #0
}
 8003590:	bd38      	pop	{r3, r4, r5, pc}
 8003592:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800359a:	f7fd fd57 	bl	800104c <HAL_GetTick>
 800359e:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035a8:	d107      	bne.n	80035ba <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035aa:	f7fd fd4f 	bl	800104c <HAL_GetTick>
 80035ae:	1b40      	subs	r0, r0, r5
 80035b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035b4:	d9f4      	bls.n	80035a0 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80035b6:	2003      	movs	r0, #3
 80035b8:	e7ea      	b.n	8003590 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80035ba:	2000      	movs	r0, #0
 80035bc:	e7e8      	b.n	8003590 <RTC_EnterInitMode+0xe>

080035be <HAL_RTC_Init>:
{
 80035be:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d05c      	beq.n	800367e <HAL_RTC_Init+0xc0>
 80035c4:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035c6:	7f43      	ldrb	r3, [r0, #29]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d040      	beq.n	800364e <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035cc:	2302      	movs	r3, #2
 80035ce:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	22ca      	movs	r2, #202	; 0xca
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	2253      	movs	r2, #83	; 0x53
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035dc:	4620      	mov	r0, r4
 80035de:	f7ff ffd0 	bl	8003582 <RTC_EnterInitMode>
 80035e2:	4605      	mov	r5, r0
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d136      	bne.n	8003656 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	6893      	ldr	r3, [r2, #8]
 80035ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035f6:	6821      	ldr	r1, [r4, #0]
 80035f8:	688a      	ldr	r2, [r1, #8]
 80035fa:	6863      	ldr	r3, [r4, #4]
 80035fc:	6920      	ldr	r0, [r4, #16]
 80035fe:	4303      	orrs	r3, r0
 8003600:	6960      	ldr	r0, [r4, #20]
 8003602:	4303      	orrs	r3, r0
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	68e2      	ldr	r2, [r4, #12]
 800360c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	6913      	ldr	r3, [r2, #16]
 8003612:	68a1      	ldr	r1, [r4, #8]
 8003614:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003618:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800361a:	6822      	ldr	r2, [r4, #0]
 800361c:	68d3      	ldr	r3, [r2, #12]
 800361e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003622:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f013 0f20 	tst.w	r3, #32
 800362c:	d01b      	beq.n	8003666 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003636:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800363c:	69a1      	ldr	r1, [r4, #24]
 800363e:	430b      	orrs	r3, r1
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	22ff      	movs	r2, #255	; 0xff
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003648:	2301      	movs	r3, #1
 800364a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800364c:	e009      	b.n	8003662 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 800364e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003650:	f7fd f9e4 	bl	8000a1c <HAL_RTC_MspInit>
 8003654:	e7ba      	b.n	80035cc <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	22ff      	movs	r2, #255	; 0xff
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800365c:	2304      	movs	r3, #4
 800365e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8003660:	2501      	movs	r5, #1
}
 8003662:	4628      	mov	r0, r5
 8003664:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff ff72 	bl	8003550 <HAL_RTC_WaitForSynchro>
 800366c:	2800      	cmp	r0, #0
 800366e:	d0de      	beq.n	800362e <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003676:	2304      	movs	r3, #4
 8003678:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800367a:	2501      	movs	r5, #1
 800367c:	e7f1      	b.n	8003662 <HAL_RTC_Init+0xa4>
    return HAL_ERROR;
 800367e:	2501      	movs	r5, #1
 8003680:	e7ef      	b.n	8003662 <HAL_RTC_Init+0xa4>

08003682 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8003682:	0903      	lsrs	r3, r0, #4
 8003684:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003688:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 800368a:	f000 000f 	and.w	r0, r0, #15
 800368e:	4410      	add	r0, r2
}
 8003690:	b2c0      	uxtb	r0, r0
 8003692:	4770      	bx	lr

08003694 <HAL_RTC_GetTime>:
{
 8003694:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003696:	6803      	ldr	r3, [r0, #0]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800369c:	6803      	ldr	r3, [r0, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80036a4:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80036a6:	6803      	ldr	r3, [r0, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80036ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80036b2:	0c1d      	lsrs	r5, r3, #16
 80036b4:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 80036b8:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80036ba:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80036be:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80036c0:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 80036c4:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80036c6:	f005 0540 	and.w	r5, r5, #64	; 0x40
 80036ca:	70cd      	strb	r5, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80036cc:	b95a      	cbnz	r2, 80036e6 <HAL_RTC_GetTime+0x52>
 80036ce:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80036d0:	f7ff ffd7 	bl	8003682 <RTC_Bcd2ToByte>
 80036d4:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80036d6:	4630      	mov	r0, r6
 80036d8:	f7ff ffd3 	bl	8003682 <RTC_Bcd2ToByte>
 80036dc:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80036de:	4620      	mov	r0, r4
 80036e0:	f7ff ffcf 	bl	8003682 <RTC_Bcd2ToByte>
 80036e4:	70a8      	strb	r0, [r5, #2]
}
 80036e6:	2000      	movs	r0, #0
 80036e8:	bd70      	pop	{r4, r5, r6, pc}

080036ea <HAL_RTC_GetDate>:
{
 80036ea:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80036ec:	6803      	ldr	r3, [r0, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80036f8:	0c18      	lsrs	r0, r3, #16
 80036fa:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80036fc:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8003700:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003702:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8003706:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003708:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800370c:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800370e:	b95a      	cbnz	r2, 8003728 <HAL_RTC_GetDate+0x3e>
 8003710:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003712:	f7ff ffb6 	bl	8003682 <RTC_Bcd2ToByte>
 8003716:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003718:	4630      	mov	r0, r6
 800371a:	f7ff ffb2 	bl	8003682 <RTC_Bcd2ToByte>
 800371e:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003720:	4628      	mov	r0, r5
 8003722:	f7ff ffae 	bl	8003682 <RTC_Bcd2ToByte>
 8003726:	70a0      	strb	r0, [r4, #2]
}
 8003728:	2000      	movs	r0, #0
 800372a:	bd70      	pop	{r4, r5, r6, pc}

0800372c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	4605      	mov	r5, r0
 8003730:	460f      	mov	r7, r1
 8003732:	4616      	mov	r6, r2
 8003734:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	ea37 0303 	bics.w	r3, r7, r3
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	42b3      	cmp	r3, r6
 8003746:	d037      	beq.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003748:	f1b4 3fff 	cmp.w	r4, #4294967295
 800374c:	d0f3      	beq.n	8003736 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800374e:	f7fd fc7d 	bl	800104c <HAL_GetTick>
 8003752:	9b06      	ldr	r3, [sp, #24]
 8003754:	1ac0      	subs	r0, r0, r3
 8003756:	42a0      	cmp	r0, r4
 8003758:	d201      	bcs.n	800375e <SPI_WaitFlagStateUntilTimeout+0x32>
 800375a:	2c00      	cmp	r4, #0
 800375c:	d1eb      	bne.n	8003736 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800375e:	682a      	ldr	r2, [r5, #0]
 8003760:	6853      	ldr	r3, [r2, #4]
 8003762:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003766:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003768:	686b      	ldr	r3, [r5, #4]
 800376a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376e:	d00b      	beq.n	8003788 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003770:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003776:	d014      	beq.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003778:	2301      	movs	r3, #1
 800377a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800377e:	2300      	movs	r3, #0
 8003780:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003784:	2003      	movs	r0, #3
 8003786:	e018      	b.n	80037ba <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003788:	68ab      	ldr	r3, [r5, #8]
 800378a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378e:	d002      	beq.n	8003796 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003794:	d1ec      	bne.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8003796:	682a      	ldr	r2, [r5, #0]
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e7e6      	b.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80037a2:	682a      	ldr	r2, [r5, #0]
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	682a      	ldr	r2, [r5, #0]
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e7df      	b.n	8003778 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80037b8:	2000      	movs	r0, #0
}
 80037ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	4607      	mov	r7, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	4615      	mov	r5, r2
 80037c4:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80037c6:	e002      	b.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80037c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80037cc:	d10b      	bne.n	80037e6 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	6893      	ldr	r3, [r2, #8]
 80037d2:	4023      	ands	r3, r4
 80037d4:	42ab      	cmp	r3, r5
 80037d6:	d03b      	beq.n	8003850 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037d8:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80037dc:	d1f4      	bne.n	80037c8 <SPI_WaitFifoStateUntilTimeout+0xc>
 80037de:	2d00      	cmp	r5, #0
 80037e0:	d1f2      	bne.n	80037c8 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80037e2:	7b13      	ldrb	r3, [r2, #12]
 80037e4:	e7f0      	b.n	80037c8 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80037e6:	f7fd fc31 	bl	800104c <HAL_GetTick>
 80037ea:	9b06      	ldr	r3, [sp, #24]
 80037ec:	1ac0      	subs	r0, r0, r3
 80037ee:	42b0      	cmp	r0, r6
 80037f0:	d201      	bcs.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0x3a>
 80037f2:	2e00      	cmp	r6, #0
 80037f4:	d1eb      	bne.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	6853      	ldr	r3, [r2, #4]
 80037fa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80037fe:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d00b      	beq.n	8003820 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380e:	d014      	beq.n	800383a <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003816:	2300      	movs	r3, #0
 8003818:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 800381c:	2003      	movs	r0, #3
 800381e:	e018      	b.n	8003852 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003826:	d002      	beq.n	800382e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382c:	d1ec      	bne.n	8003808 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e7e6      	b.n	8003808 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	6813      	ldr	r3, [r2, #0]
 8003848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e7df      	b.n	8003810 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8003850:	2000      	movs	r0, #0
}
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	4604      	mov	r4, r0
 800385a:	460d      	mov	r5, r1
 800385c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800385e:	9200      	str	r2, [sp, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	2200      	movs	r2, #0
 8003864:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003868:	f7ff ffa8 	bl	80037bc <SPI_WaitFifoStateUntilTimeout>
 800386c:	b9b8      	cbnz	r0, 800389e <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386e:	9600      	str	r6, [sp, #0]
 8003870:	462b      	mov	r3, r5
 8003872:	2200      	movs	r2, #0
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	4620      	mov	r0, r4
 8003878:	f7ff ff58 	bl	800372c <SPI_WaitFlagStateUntilTimeout>
 800387c:	b9b8      	cbnz	r0, 80038ae <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800387e:	9600      	str	r6, [sp, #0]
 8003880:	462b      	mov	r3, r5
 8003882:	2200      	movs	r2, #0
 8003884:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff ff97 	bl	80037bc <SPI_WaitFifoStateUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	b150      	cbz	r0, 80038a8 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003892:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003894:	f043 0320 	orr.w	r3, r3, #32
 8003898:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e004      	b.n	80038a8 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038a0:	f043 0320 	orr.w	r3, r3, #32
 80038a4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	b002      	add	sp, #8
 80038ac:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038b0:	f043 0320 	orr.w	r3, r3, #32
 80038b4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e7f6      	b.n	80038a8 <SPI_EndRxTxTransaction+0x54>

080038ba <HAL_SPI_Init>:
  if (hspi == NULL)
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d058      	beq.n	8003970 <HAL_SPI_Init+0xb6>
{
 80038be:	b510      	push	{r4, lr}
 80038c0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80038c6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d045      	beq.n	800395a <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 80038ce:	2302      	movs	r3, #2
 80038d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	6813      	ldr	r3, [r2, #0]
 80038d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038dc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038de:	68e3      	ldr	r3, [r4, #12]
 80038e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038e4:	d93e      	bls.n	8003964 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038e6:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038ec:	d004      	beq.n	80038f8 <HAL_SPI_Init+0x3e>
 80038ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f2:	d001      	beq.n	80038f8 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f4:	2100      	movs	r1, #0
 80038f6:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80038f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80038fa:	b921      	cbnz	r1, 8003906 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003900:	d933      	bls.n	800396a <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003902:	2302      	movs	r3, #2
 8003904:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	68a1      	ldr	r1, [r4, #8]
 800390a:	430b      	orrs	r3, r1
 800390c:	6921      	ldr	r1, [r4, #16]
 800390e:	430b      	orrs	r3, r1
 8003910:	6961      	ldr	r1, [r4, #20]
 8003912:	430b      	orrs	r3, r1
 8003914:	69a1      	ldr	r1, [r4, #24]
 8003916:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800391a:	430b      	orrs	r3, r1
 800391c:	69e1      	ldr	r1, [r4, #28]
 800391e:	430b      	orrs	r3, r1
 8003920:	6a21      	ldr	r1, [r4, #32]
 8003922:	430b      	orrs	r3, r1
 8003924:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003926:	6821      	ldr	r1, [r4, #0]
 8003928:	4303      	orrs	r3, r0
 800392a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800392c:	8b63      	ldrh	r3, [r4, #26]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003934:	430b      	orrs	r3, r1
 8003936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003938:	430b      	orrs	r3, r1
 800393a:	68e1      	ldr	r1, [r4, #12]
 800393c:	430b      	orrs	r3, r1
 800393e:	6821      	ldr	r1, [r4, #0]
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	69d3      	ldr	r3, [r2, #28]
 8003948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800394c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800394e:	2000      	movs	r0, #0
 8003950:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003952:	2301      	movs	r3, #1
 8003954:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003958:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800395a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800395e:	f7fd f899 	bl	8000a94 <HAL_SPI_MspInit>
 8003962:	e7b4      	b.n	80038ce <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003968:	e7be      	b.n	80038e8 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800396a:	2301      	movs	r3, #1
 800396c:	6323      	str	r3, [r4, #48]	; 0x30
 800396e:	e7ca      	b.n	8003906 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003970:	2001      	movs	r0, #1
}
 8003972:	4770      	bx	lr

08003974 <HAL_SPI_Transmit>:
{
 8003974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003978:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800397a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800397e:	2c01      	cmp	r4, #1
 8003980:	f000 80e4 	beq.w	8003b4c <HAL_SPI_Transmit+0x1d8>
 8003984:	461e      	mov	r6, r3
 8003986:	4615      	mov	r5, r2
 8003988:	4688      	mov	r8, r1
 800398a:	4604      	mov	r4, r0
 800398c:	2301      	movs	r3, #1
 800398e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003992:	f7fd fb5b 	bl	800104c <HAL_GetTick>
 8003996:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003998:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	2a01      	cmp	r2, #1
 80039a0:	d009      	beq.n	80039b6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80039a2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039aa:	2300      	movs	r3, #0
 80039ac:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80039b0:	b002      	add	sp, #8
 80039b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80039b6:	f1b8 0f00 	cmp.w	r8, #0
 80039ba:	f000 80b9 	beq.w	8003b30 <HAL_SPI_Transmit+0x1bc>
 80039be:	2d00      	cmp	r5, #0
 80039c0:	f000 80b8 	beq.w	8003b34 <HAL_SPI_Transmit+0x1c0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039c4:	2303      	movs	r3, #3
 80039c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039ce:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039d2:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039d4:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039d6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039d8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039dc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039e0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039e2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e4:	68a3      	ldr	r3, [r4, #8]
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d01c      	beq.n	8003a26 <HAL_SPI_Transmit+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80039f4:	d103      	bne.n	80039fe <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039fe:	68e3      	ldr	r3, [r4, #12]
 8003a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a04:	d933      	bls.n	8003a6e <HAL_SPI_Transmit+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	b10b      	cbz	r3, 8003a0e <HAL_SPI_Transmit+0x9a>
 8003a0a:	2d01      	cmp	r5, #1
 8003a0c:	d11b      	bne.n	8003a46 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	8812      	ldrh	r2, [r2, #0]
 8003a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a18:	3302      	adds	r3, #2
 8003a1a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003a1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003a24:	e00f      	b.n	8003a46 <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e7dc      	b.n	80039ec <HAL_SPI_Transmit+0x78>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a32:	f7fd fb0b 	bl	800104c <HAL_GetTick>
 8003a36:	1bc0      	subs	r0, r0, r7
 8003a38:	42b0      	cmp	r0, r6
 8003a3a:	d302      	bcc.n	8003a42 <HAL_SPI_Transmit+0xce>
 8003a3c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003a40:	d17a      	bne.n	8003b38 <HAL_SPI_Transmit+0x1c4>
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	d07a      	beq.n	8003b3c <HAL_SPI_Transmit+0x1c8>
    while (hspi->TxXferCount > 0U)
 8003a46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d05b      	beq.n	8003b06 <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	f012 0f02 	tst.w	r2, #2
 8003a56:	d0ec      	beq.n	8003a32 <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a60:	3302      	adds	r3, #2
 8003a62:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003a64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003a6c:	e7eb      	b.n	8003a46 <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	b10b      	cbz	r3, 8003a76 <HAL_SPI_Transmit+0x102>
 8003a72:	2d01      	cmp	r5, #1
 8003a74:	d130      	bne.n	8003ad8 <HAL_SPI_Transmit+0x164>
      if (hspi->TxXferCount > 1U)
 8003a76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d90b      	bls.n	8003a96 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	8812      	ldrh	r2, [r2, #0]
 8003a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a88:	3302      	adds	r3, #2
 8003a8a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a8e:	3b02      	subs	r3, #2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003a94:	e020      	b.n	8003ad8 <HAL_SPI_Transmit+0x164>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003a9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003aa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003aac:	e014      	b.n	8003ad8 <HAL_SPI_Transmit+0x164>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003ab4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003aba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003ac2:	e009      	b.n	8003ad8 <HAL_SPI_Transmit+0x164>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac4:	f7fd fac2 	bl	800104c <HAL_GetTick>
 8003ac8:	1bc0      	subs	r0, r0, r7
 8003aca:	42b0      	cmp	r0, r6
 8003acc:	d302      	bcc.n	8003ad4 <HAL_SPI_Transmit+0x160>
 8003ace:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003ad2:	d135      	bne.n	8003b40 <HAL_SPI_Transmit+0x1cc>
 8003ad4:	2e00      	cmp	r6, #0
 8003ad6:	d035      	beq.n	8003b44 <HAL_SPI_Transmit+0x1d0>
    while (hspi->TxXferCount > 0U)
 8003ad8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	b19b      	cbz	r3, 8003b06 <HAL_SPI_Transmit+0x192>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	6893      	ldr	r3, [r2, #8]
 8003ae2:	f013 0f02 	tst.w	r3, #2
 8003ae6:	d0ed      	beq.n	8003ac4 <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 8003ae8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d9de      	bls.n	8003aae <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003af8:	3302      	adds	r3, #2
 8003afa:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003afc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003afe:	3b02      	subs	r3, #2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003b04:	e7e8      	b.n	8003ad8 <HAL_SPI_Transmit+0x164>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b06:	463a      	mov	r2, r7
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f7ff fea2 	bl	8003854 <SPI_EndRxTxTransaction>
 8003b10:	b108      	cbz	r0, 8003b16 <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b12:	2320      	movs	r3, #32
 8003b14:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	b933      	cbnz	r3, 8003b28 <HAL_SPI_Transmit+0x1b4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	9201      	str	r2, [sp, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b2a:	b96b      	cbnz	r3, 8003b48 <HAL_SPI_Transmit+0x1d4>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e739      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003b30:	2001      	movs	r0, #1
 8003b32:	e737      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
 8003b34:	2001      	movs	r0, #1
 8003b36:	e735      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003b38:	2003      	movs	r0, #3
 8003b3a:	e733      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	e731      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003b40:	2003      	movs	r0, #3
 8003b42:	e72f      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
 8003b44:	2003      	movs	r0, #3
 8003b46:	e72d      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003b48:	2001      	movs	r0, #1
 8003b4a:	e72b      	b.n	80039a4 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8003b4c:	2002      	movs	r0, #2
 8003b4e:	e72f      	b.n	80039b0 <HAL_SPI_Transmit+0x3c>

08003b50 <HAL_SPI_ErrorCallback>:
}
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_SPI_IRQHandler>:
{
 8003b54:	b530      	push	{r4, r5, lr}
 8003b56:	b085      	sub	sp, #20
 8003b58:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003b5a:	6802      	ldr	r2, [r0, #0]
 8003b5c:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003b5e:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b60:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8003b64:	b949      	cbnz	r1, 8003b7a <HAL_SPI_IRQHandler+0x26>
 8003b66:	f013 0f01 	tst.w	r3, #1
 8003b6a:	d006      	beq.n	8003b7a <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b70:	d003      	beq.n	8003b7a <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8003b72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b74:	4620      	mov	r0, r4
 8003b76:	4798      	blx	r3
    return;
 8003b78:	e008      	b.n	8003b8c <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b7a:	f013 0f02 	tst.w	r3, #2
 8003b7e:	d007      	beq.n	8003b90 <HAL_SPI_IRQHandler+0x3c>
 8003b80:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b84:	d004      	beq.n	8003b90 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003b86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4798      	blx	r3
}
 8003b8c:	b005      	add	sp, #20
 8003b8e:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b90:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8003b94:	b91d      	cbnz	r5, 8003b9e <HAL_SPI_IRQHandler+0x4a>
 8003b96:	b911      	cbnz	r1, 8003b9e <HAL_SPI_IRQHandler+0x4a>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b9c:	d0f6      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x38>
 8003b9e:	f010 0f20 	tst.w	r0, #32
 8003ba2:	d0f3      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ba4:	b179      	cbz	r1, 8003bc6 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ba6:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 8003baa:	b2c9      	uxtb	r1, r1
 8003bac:	2903      	cmp	r1, #3
 8003bae:	d053      	beq.n	8003c58 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003bb0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003bb2:	f041 0104 	orr.w	r1, r1, #4
 8003bb6:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb8:	2100      	movs	r1, #0
 8003bba:	9100      	str	r1, [sp, #0]
 8003bbc:	68d1      	ldr	r1, [r2, #12]
 8003bbe:	9100      	str	r1, [sp, #0]
 8003bc0:	6891      	ldr	r1, [r2, #8]
 8003bc2:	9100      	str	r1, [sp, #0]
 8003bc4:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003bc6:	b165      	cbz	r5, 8003be2 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003bc8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003bca:	f041 0101 	orr.w	r1, r1, #1
 8003bce:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	9102      	str	r1, [sp, #8]
 8003bd4:	6891      	ldr	r1, [r2, #8]
 8003bd6:	9102      	str	r1, [sp, #8]
 8003bd8:	6811      	ldr	r1, [r2, #0]
 8003bda:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003bde:	6011      	str	r1, [r2, #0]
 8003be0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003be2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003be6:	d009      	beq.n	8003bfc <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003be8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003bea:	f043 0308 	orr.w	r3, r3, #8
 8003bee:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9303      	str	r3, [sp, #12]
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	9303      	str	r3, [sp, #12]
 8003bfa:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bfc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0c4      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	6853      	ldr	r3, [r2, #4]
 8003c06:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003c0a:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c12:	f010 0f03 	tst.w	r0, #3
 8003c16:	d027      	beq.n	8003c68 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	6853      	ldr	r3, [r2, #4]
 8003c1c:	f023 0303 	bic.w	r3, r3, #3
 8003c20:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c24:	b14b      	cbz	r3, 8003c3a <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c26:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <HAL_SPI_IRQHandler+0x11c>)
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c2c:	f7fd ffa6 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003c30:	b118      	cbz	r0, 8003c3a <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c32:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c38:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003c3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0a5      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c40:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <HAL_SPI_IRQHandler+0x11c>)
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c46:	f7fd ff99 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d09e      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c54:	6623      	str	r3, [r4, #96]	; 0x60
 8003c56:	e799      	b.n	8003b8c <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	68d3      	ldr	r3, [r2, #12]
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	6893      	ldr	r3, [r2, #8]
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	9b01      	ldr	r3, [sp, #4]
        return;
 8003c66:	e791      	b.n	8003b8c <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff ff71 	bl	8003b50 <HAL_SPI_ErrorCallback>
 8003c6e:	e78d      	b.n	8003b8c <HAL_SPI_IRQHandler+0x38>
 8003c70:	08003c75 	.word	0x08003c75

08003c74 <SPI_DMAAbortOnError>:
{
 8003c74:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c76:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003c7e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003c80:	f7ff ff66 	bl	8003b50 <HAL_SPI_ErrorCallback>
}
 8003c84:	bd08      	pop	{r3, pc}
	...

08003c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8a:	6a03      	ldr	r3, [r0, #32]
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c96:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c9c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca0:	680d      	ldr	r5, [r1, #0]
 8003ca2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ca4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ca8:	688d      	ldr	r5, [r1, #8]
 8003caa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cac:	4d18      	ldr	r5, [pc, #96]	; (8003d10 <TIM_OC1_SetConfig+0x88>)
 8003cae:	42a8      	cmp	r0, r5
 8003cb0:	d00b      	beq.n	8003cca <TIM_OC1_SetConfig+0x42>
 8003cb2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003cb6:	42a8      	cmp	r0, r5
 8003cb8:	d007      	beq.n	8003cca <TIM_OC1_SetConfig+0x42>
 8003cba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cbe:	42a8      	cmp	r0, r5
 8003cc0:	d003      	beq.n	8003cca <TIM_OC1_SetConfig+0x42>
 8003cc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cc6:	42a8      	cmp	r0, r5
 8003cc8:	d105      	bne.n	8003cd6 <TIM_OC1_SetConfig+0x4e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cca:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cce:	68cd      	ldr	r5, [r1, #12]
 8003cd0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	4d0e      	ldr	r5, [pc, #56]	; (8003d10 <TIM_OC1_SetConfig+0x88>)
 8003cd8:	42a8      	cmp	r0, r5
 8003cda:	d00b      	beq.n	8003cf4 <TIM_OC1_SetConfig+0x6c>
 8003cdc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003ce0:	42a8      	cmp	r0, r5
 8003ce2:	d007      	beq.n	8003cf4 <TIM_OC1_SetConfig+0x6c>
 8003ce4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ce8:	42a8      	cmp	r0, r5
 8003cea:	d003      	beq.n	8003cf4 <TIM_OC1_SetConfig+0x6c>
 8003cec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cf0:	42a8      	cmp	r0, r5
 8003cf2:	d105      	bne.n	8003d00 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cf4:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cf8:	694c      	ldr	r4, [r1, #20]
 8003cfa:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cfc:	698d      	ldr	r5, [r1, #24]
 8003cfe:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d02:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d04:	684a      	ldr	r2, [r1, #4]
 8003d06:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	6203      	str	r3, [r0, #32]
}
 8003d0a:	bc30      	pop	{r4, r5}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40012c00 	.word	0x40012c00

08003d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d16:	6a03      	ldr	r3, [r0, #32]
 8003d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d22:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d28:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	680d      	ldr	r5, [r1, #0]
 8003d2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d34:	688d      	ldr	r5, [r1, #8]
 8003d36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d3a:	4d14      	ldr	r5, [pc, #80]	; (8003d8c <TIM_OC3_SetConfig+0x78>)
 8003d3c:	42a8      	cmp	r0, r5
 8003d3e:	d01d      	beq.n	8003d7c <TIM_OC3_SetConfig+0x68>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d40:	4d12      	ldr	r5, [pc, #72]	; (8003d8c <TIM_OC3_SetConfig+0x78>)
 8003d42:	42a8      	cmp	r0, r5
 8003d44:	d00b      	beq.n	8003d5e <TIM_OC3_SetConfig+0x4a>
 8003d46:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003d4a:	42a8      	cmp	r0, r5
 8003d4c:	d007      	beq.n	8003d5e <TIM_OC3_SetConfig+0x4a>
 8003d4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d52:	42a8      	cmp	r0, r5
 8003d54:	d003      	beq.n	8003d5e <TIM_OC3_SetConfig+0x4a>
 8003d56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d5a:	42a8      	cmp	r0, r5
 8003d5c:	d107      	bne.n	8003d6e <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d62:	694d      	ldr	r5, [r1, #20]
 8003d64:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d68:	698d      	ldr	r5, [r1, #24]
 8003d6a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d70:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d72:	684a      	ldr	r2, [r1, #4]
 8003d74:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d76:	6203      	str	r3, [r0, #32]
}
 8003d78:	bc30      	pop	{r4, r5}
 8003d7a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d80:	68cd      	ldr	r5, [r1, #12]
 8003d82:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8a:	e7d9      	b.n	8003d40 <TIM_OC3_SetConfig+0x2c>
 8003d8c:	40012c00 	.word	0x40012c00

08003d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d92:	6a03      	ldr	r3, [r0, #32]
 8003d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9e:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	680d      	ldr	r5, [r1, #0]
 8003daa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db2:	688d      	ldr	r5, [r1, #8]
 8003db4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	4d0d      	ldr	r5, [pc, #52]	; (8003df0 <TIM_OC4_SetConfig+0x60>)
 8003dba:	42a8      	cmp	r0, r5
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_OC4_SetConfig+0x46>
 8003dbe:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003dc2:	42a8      	cmp	r0, r5
 8003dc4:	d007      	beq.n	8003dd6 <TIM_OC4_SetConfig+0x46>
 8003dc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003dca:	42a8      	cmp	r0, r5
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC4_SetConfig+0x46>
 8003dce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003dd2:	42a8      	cmp	r0, r5
 8003dd4:	d104      	bne.n	8003de0 <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dd6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dda:	694d      	ldr	r5, [r1, #20]
 8003ddc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de4:	684b      	ldr	r3, [r1, #4]
 8003de6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	6202      	str	r2, [r0, #32]
}
 8003dea:	bc30      	pop	{r4, r5}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003df6:	6a03      	ldr	r3, [r0, #32]
 8003df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e02:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	680d      	ldr	r5, [r1, #0]
 8003e0e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e14:	688d      	ldr	r5, [r1, #8]
 8003e16:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	4d0d      	ldr	r5, [pc, #52]	; (8003e50 <TIM_OC5_SetConfig+0x5c>)
 8003e1c:	42a8      	cmp	r0, r5
 8003e1e:	d00b      	beq.n	8003e38 <TIM_OC5_SetConfig+0x44>
 8003e20:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e24:	42a8      	cmp	r0, r5
 8003e26:	d007      	beq.n	8003e38 <TIM_OC5_SetConfig+0x44>
 8003e28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e2c:	42a8      	cmp	r0, r5
 8003e2e:	d003      	beq.n	8003e38 <TIM_OC5_SetConfig+0x44>
 8003e30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e34:	42a8      	cmp	r0, r5
 8003e36:	d104      	bne.n	8003e42 <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e38:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e3c:	694d      	ldr	r5, [r1, #20]
 8003e3e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e42:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e44:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e46:	684a      	ldr	r2, [r1, #4]
 8003e48:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4a:	6203      	str	r3, [r0, #32]
}
 8003e4c:	bc30      	pop	{r4, r5}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00

08003e54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e56:	6a03      	ldr	r3, [r0, #32]
 8003e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e62:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e6c:	680d      	ldr	r5, [r1, #0]
 8003e6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e72:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e76:	688d      	ldr	r5, [r1, #8]
 8003e78:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7c:	4d0d      	ldr	r5, [pc, #52]	; (8003eb4 <TIM_OC6_SetConfig+0x60>)
 8003e7e:	42a8      	cmp	r0, r5
 8003e80:	d00b      	beq.n	8003e9a <TIM_OC6_SetConfig+0x46>
 8003e82:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e86:	42a8      	cmp	r0, r5
 8003e88:	d007      	beq.n	8003e9a <TIM_OC6_SetConfig+0x46>
 8003e8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e8e:	42a8      	cmp	r0, r5
 8003e90:	d003      	beq.n	8003e9a <TIM_OC6_SetConfig+0x46>
 8003e92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e96:	42a8      	cmp	r0, r5
 8003e98:	d104      	bne.n	8003ea4 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e9a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e9e:	694d      	ldr	r5, [r1, #20]
 8003ea0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ea6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ea8:	684b      	ldr	r3, [r1, #4]
 8003eaa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eac:	6202      	str	r2, [r0, #32]
}
 8003eae:	bc30      	pop	{r4, r5}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00

08003eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ebc:	6a04      	ldr	r4, [r0, #32]
 8003ebe:	f024 0401 	bic.w	r4, r4, #1
 8003ec2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eca:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ece:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003ed2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ed6:	6203      	str	r3, [r0, #32]
}
 8003ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ede:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee0:	6a03      	ldr	r3, [r0, #32]
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003eea:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eec:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef0:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003efe:	6203      	str	r3, [r0, #32]
}
 8003f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f06:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f0c:	4319      	orrs	r1, r3
 8003f0e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	6081      	str	r1, [r0, #8]
}
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1e:	6802      	ldr	r2, [r0, #0]
 8003f20:	6891      	ldr	r1, [r2, #8]
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <HAL_TIM_Base_Start+0x2c>)
 8003f24:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d006      	beq.n	8003f38 <HAL_TIM_Base_Start+0x20>
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d003      	beq.n	8003f38 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8003f30:	6813      	ldr	r3, [r2, #0]
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003f3e:	2000      	movs	r0, #0
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	00010007 	.word	0x00010007

08003f48 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8003f4e:	6803      	ldr	r3, [r0, #0]
 8003f50:	6a19      	ldr	r1, [r3, #32]
 8003f52:	f241 1211 	movw	r2, #4369	; 0x1111
 8003f56:	4211      	tst	r1, r2
 8003f58:	d108      	bne.n	8003f6c <HAL_TIM_Base_Stop+0x24>
 8003f5a:	6a19      	ldr	r1, [r3, #32]
 8003f5c:	f240 4244 	movw	r2, #1092	; 0x444
 8003f60:	4211      	tst	r1, r2
 8003f62:	d103      	bne.n	8003f6c <HAL_TIM_Base_Stop+0x24>
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8003f72:	2000      	movs	r0, #0
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f78:	6802      	ldr	r2, [r0, #0]
 8003f7a:	68d3      	ldr	r3, [r2, #12]
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f82:	6802      	ldr	r2, [r0, #0]
 8003f84:	6891      	ldr	r1, [r2, #8]
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_TIM_Base_Start_IT+0x28>)
 8003f88:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d006      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x24>
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d003      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8003f94:	6813      	ldr	r3, [r2, #0]
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	4770      	bx	lr
 8003fa0:	00010007 	.word	0x00010007

08003fa4 <HAL_TIM_OC_MspInit>:
}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIM_IC_CaptureCallback>:
}
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_TriggerCallback>:
}
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_IRQHandler>:
{
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb2:	6803      	ldr	r3, [r0, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	f012 0f02 	tst.w	r2, #2
 8003fba:	d011      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	f012 0f02 	tst.w	r2, #2
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fc4:	f06f 0202 	mvn.w	r2, #2
 8003fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fce:	6803      	ldr	r3, [r0, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f013 0f03 	tst.w	r3, #3
 8003fd6:	d079      	beq.n	80040cc <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd8:	f7ff ffe6 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	f012 0f04 	tst.w	r2, #4
 8003fe8:	d012      	beq.n	8004010 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	f012 0f04 	tst.w	r2, #4
 8003ff0:	d00e      	beq.n	8004010 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff2:	f06f 0204 	mvn.w	r2, #4
 8003ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004004:	d068      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff ffce 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400c:	2300      	movs	r3, #0
 800400e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	f012 0f08 	tst.w	r2, #8
 8004018:	d012      	beq.n	8004040 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	f012 0f08 	tst.w	r2, #8
 8004020:	d00e      	beq.n	8004040 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004022:	f06f 0208 	mvn.w	r2, #8
 8004026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004028:	2304      	movs	r3, #4
 800402a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f013 0f03 	tst.w	r3, #3
 8004034:	d057      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004036:	4620      	mov	r0, r4
 8004038:	f7ff ffb6 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403c:	2300      	movs	r3, #0
 800403e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	f012 0f10 	tst.w	r2, #16
 8004048:	d012      	beq.n	8004070 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	f012 0f10 	tst.w	r2, #16
 8004050:	d00e      	beq.n	8004070 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004052:	f06f 0210 	mvn.w	r2, #16
 8004056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004058:	2308      	movs	r3, #8
 800405a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004064:	d046      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff ff9e 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406c:	2300      	movs	r3, #0
 800406e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	f012 0f01 	tst.w	r2, #1
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	f012 0f01 	tst.w	r2, #1
 8004080:	d13f      	bne.n	8004102 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	f012 0f80 	tst.w	r2, #128	; 0x80
 800408a:	d003      	beq.n	8004094 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004092:	d13d      	bne.n	8004110 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	f412 7f80 	tst.w	r2, #256	; 0x100
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040a4:	d13b      	bne.n	800411e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80040ae:	d003      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80040b6:	d139      	bne.n	800412c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	f012 0f20 	tst.w	r2, #32
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	f012 0f20 	tst.w	r2, #32
 80040c8:	d137      	bne.n	800413a <HAL_TIM_IRQHandler+0x18c>
}
 80040ca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040cc:	f7ff ff6b 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff ff6a 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
 80040d6:	e781      	b.n	8003fdc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff ff64 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff ff63 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
 80040e4:	e792      	b.n	800400c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7ff ff5d 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ff5c 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
 80040f2:	e7a3      	b.n	800403c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff ff56 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7ff ff55 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
 8004100:	e7b4      	b.n	800406c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004102:	f06f 0201 	mvn.w	r2, #1
 8004106:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004108:	4620      	mov	r0, r4
 800410a:	f7fc fb5f 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
 800410e:	e7b8      	b.n	8004082 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004114:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004116:	4620      	mov	r0, r4
 8004118:	f000 f9b7 	bl	800448a <HAL_TIMEx_BreakCallback>
 800411c:	e7ba      	b.n	8004094 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800411e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004122:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004124:	4620      	mov	r0, r4
 8004126:	f000 f9b1 	bl	800448c <HAL_TIMEx_Break2Callback>
 800412a:	e7bc      	b.n	80040a6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800412c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004130:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004132:	4620      	mov	r0, r4
 8004134:	f7ff ff3a 	bl	8003fac <HAL_TIM_TriggerCallback>
 8004138:	e7be      	b.n	80040b8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800413a:	f06f 0220 	mvn.w	r2, #32
 800413e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f9a1 	bl	8004488 <HAL_TIMEx_CommutCallback>
}
 8004146:	e7c0      	b.n	80040ca <HAL_TIM_IRQHandler+0x11c>

08004148 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004148:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <TIM_Base_SetConfig+0x7c>)
 800414c:	4290      	cmp	r0, r2
 800414e:	d002      	beq.n	8004156 <TIM_Base_SetConfig+0xe>
 8004150:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004154:	d103      	bne.n	800415e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800415a:	684a      	ldr	r2, [r1, #4]
 800415c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415e:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <TIM_Base_SetConfig+0x7c>)
 8004160:	4290      	cmp	r0, r2
 8004162:	d00e      	beq.n	8004182 <TIM_Base_SetConfig+0x3a>
 8004164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004168:	d00b      	beq.n	8004182 <TIM_Base_SetConfig+0x3a>
 800416a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800416e:	4290      	cmp	r0, r2
 8004170:	d007      	beq.n	8004182 <TIM_Base_SetConfig+0x3a>
 8004172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004176:	4290      	cmp	r0, r2
 8004178:	d003      	beq.n	8004182 <TIM_Base_SetConfig+0x3a>
 800417a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800417e:	4290      	cmp	r0, r2
 8004180:	d103      	bne.n	800418a <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004186:	68ca      	ldr	r2, [r1, #12]
 8004188:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800418a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418e:	694a      	ldr	r2, [r1, #20]
 8004190:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004192:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	688b      	ldr	r3, [r1, #8]
 8004196:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004198:	680b      	ldr	r3, [r1, #0]
 800419a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <TIM_Base_SetConfig+0x7c>)
 800419e:	4298      	cmp	r0, r3
 80041a0:	d00b      	beq.n	80041ba <TIM_Base_SetConfig+0x72>
 80041a2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80041a6:	4298      	cmp	r0, r3
 80041a8:	d007      	beq.n	80041ba <TIM_Base_SetConfig+0x72>
 80041aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ae:	4298      	cmp	r0, r3
 80041b0:	d003      	beq.n	80041ba <TIM_Base_SetConfig+0x72>
 80041b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b6:	4298      	cmp	r0, r3
 80041b8:	d101      	bne.n	80041be <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80041be:	2301      	movs	r3, #1
 80041c0:	6143      	str	r3, [r0, #20]
}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00

080041c8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80041c8:	b1a8      	cbz	r0, 80041f6 <HAL_TIM_Base_Init+0x2e>
{
 80041ca:	b510      	push	{r4, lr}
 80041cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041d2:	b15b      	cbz	r3, 80041ec <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041da:	1d21      	adds	r1, r4, #4
 80041dc:	6820      	ldr	r0, [r4, #0]
 80041de:	f7ff ffb3 	bl	8004148 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80041e8:	2000      	movs	r0, #0
}
 80041ea:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80041ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041f0:	f7fc feb4 	bl	8000f5c <HAL_TIM_Base_MspInit>
 80041f4:	e7ee      	b.n	80041d4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80041f6:	2001      	movs	r0, #1
}
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80041fa:	b1a8      	cbz	r0, 8004228 <HAL_TIM_OC_Init+0x2e>
{
 80041fc:	b510      	push	{r4, lr}
 80041fe:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004200:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004204:	b15b      	cbz	r3, 800421e <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004206:	2302      	movs	r3, #2
 8004208:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800420c:	1d21      	adds	r1, r4, #4
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	f7ff ff9a 	bl	8004148 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004214:	2301      	movs	r3, #1
 8004216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800421a:	2000      	movs	r0, #0
}
 800421c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800421e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004222:	f7ff febf 	bl	8003fa4 <HAL_TIM_OC_MspInit>
 8004226:	e7ee      	b.n	8004206 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8004228:	2001      	movs	r0, #1
}
 800422a:	4770      	bx	lr

0800422c <TIM_OC2_SetConfig>:
{
 800422c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422e:	6a03      	ldr	r3, [r0, #32]
 8004230:	f023 0310 	bic.w	r3, r3, #16
 8004234:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004236:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004238:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800423a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800423c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004240:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	680d      	ldr	r5, [r1, #0]
 8004246:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800424a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800424e:	688d      	ldr	r5, [r1, #8]
 8004250:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004254:	4d14      	ldr	r5, [pc, #80]	; (80042a8 <TIM_OC2_SetConfig+0x7c>)
 8004256:	42a8      	cmp	r0, r5
 8004258:	d01d      	beq.n	8004296 <TIM_OC2_SetConfig+0x6a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425a:	4d13      	ldr	r5, [pc, #76]	; (80042a8 <TIM_OC2_SetConfig+0x7c>)
 800425c:	42a8      	cmp	r0, r5
 800425e:	d00b      	beq.n	8004278 <TIM_OC2_SetConfig+0x4c>
 8004260:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004264:	42a8      	cmp	r0, r5
 8004266:	d007      	beq.n	8004278 <TIM_OC2_SetConfig+0x4c>
 8004268:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800426c:	42a8      	cmp	r0, r5
 800426e:	d003      	beq.n	8004278 <TIM_OC2_SetConfig+0x4c>
 8004270:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004274:	42a8      	cmp	r0, r5
 8004276:	d107      	bne.n	8004288 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004278:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427c:	694d      	ldr	r5, [r1, #20]
 800427e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004282:	698d      	ldr	r5, [r1, #24]
 8004284:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004288:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800428a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800428c:	684a      	ldr	r2, [r1, #4]
 800428e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004290:	6203      	str	r3, [r0, #32]
}
 8004292:	bc30      	pop	{r4, r5}
 8004294:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800429a:	68cd      	ldr	r5, [r1, #12]
 800429c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80042a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a4:	e7d9      	b.n	800425a <TIM_OC2_SetConfig+0x2e>
 80042a6:	bf00      	nop
 80042a8:	40012c00 	.word	0x40012c00

080042ac <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80042ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d034      	beq.n	800431e <HAL_TIM_OC_ConfigChannel+0x72>
{
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80042b8:	2301      	movs	r3, #1
 80042ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80042c4:	2a14      	cmp	r2, #20
 80042c6:	d80f      	bhi.n	80042e8 <HAL_TIM_OC_ConfigChannel+0x3c>
 80042c8:	e8df f002 	tbb	[pc, r2]
 80042cc:	0e0e0e0b 	.word	0x0e0e0e0b
 80042d0:	0e0e0e15 	.word	0x0e0e0e15
 80042d4:	0e0e0e19 	.word	0x0e0e0e19
 80042d8:	0e0e0e1d 	.word	0x0e0e0e1d
 80042dc:	0e0e0e21 	.word	0x0e0e0e21
 80042e0:	25          	.byte	0x25
 80042e1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	f7ff fcd0 	bl	8003c88 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80042f4:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042f6:	6800      	ldr	r0, [r0, #0]
 80042f8:	f7ff ff98 	bl	800422c <TIM_OC2_SetConfig>
      break;
 80042fc:	e7f4      	b.n	80042e8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042fe:	6800      	ldr	r0, [r0, #0]
 8004300:	f7ff fd08 	bl	8003d14 <TIM_OC3_SetConfig>
      break;
 8004304:	e7f0      	b.n	80042e8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004306:	6800      	ldr	r0, [r0, #0]
 8004308:	f7ff fd42 	bl	8003d90 <TIM_OC4_SetConfig>
      break;
 800430c:	e7ec      	b.n	80042e8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800430e:	6800      	ldr	r0, [r0, #0]
 8004310:	f7ff fd70 	bl	8003df4 <TIM_OC5_SetConfig>
      break;
 8004314:	e7e8      	b.n	80042e8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004316:	6800      	ldr	r0, [r0, #0]
 8004318:	f7ff fd9c 	bl	8003e54 <TIM_OC6_SetConfig>
      break;
 800431c:	e7e4      	b.n	80042e8 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 800431e:	2002      	movs	r0, #2
}
 8004320:	4770      	bx	lr

08004322 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004322:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004324:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004326:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800432a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800432e:	430b      	orrs	r3, r1
 8004330:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004332:	6083      	str	r3, [r0, #8]
}
 8004334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800433c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d064      	beq.n	800440e <HAL_TIM_ConfigClockSource+0xd2>
{
 8004344:	b510      	push	{r4, lr}
 8004346:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004348:	2301      	movs	r3, #1
 800434a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800434e:	2302      	movs	r3, #2
 8004350:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004354:	6802      	ldr	r2, [r0, #0]
 8004356:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_TIM_ConfigClockSource+0xd8>)
 800435a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800435c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800435e:	680b      	ldr	r3, [r1, #0]
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d04a      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xbe>
 8004364:	d913      	bls.n	800438e <HAL_TIM_ConfigClockSource+0x52>
 8004366:	2b60      	cmp	r3, #96	; 0x60
 8004368:	d03d      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0xaa>
 800436a:	d91e      	bls.n	80043aa <HAL_TIM_ConfigClockSource+0x6e>
 800436c:	2b70      	cmp	r3, #112	; 0x70
 800436e:	d028      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x86>
 8004370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004374:	d130      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	68cb      	ldr	r3, [r1, #12]
 8004378:	684a      	ldr	r2, [r1, #4]
 800437a:	6889      	ldr	r1, [r1, #8]
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	f7ff ffd0 	bl	8004322 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	6893      	ldr	r3, [r2, #8]
 8004386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800438a:	6093      	str	r3, [r2, #8]
      break;
 800438c:	e024      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800438e:	2b10      	cmp	r3, #16
 8004390:	d006      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0x64>
 8004392:	d904      	bls.n	800439e <HAL_TIM_ConfigClockSource+0x62>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0x64>
 8004398:	2b30      	cmp	r3, #48	; 0x30
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0x64>
 800439c:	e01c      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
 800439e:	b9db      	cbnz	r3, 80043d8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043a0:	4619      	mov	r1, r3
 80043a2:	6820      	ldr	r0, [r4, #0]
 80043a4:	f7ff fdaf 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 80043a8:	e016      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80043aa:	2b50      	cmp	r3, #80	; 0x50
 80043ac:	d114      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	68ca      	ldr	r2, [r1, #12]
 80043b0:	6849      	ldr	r1, [r1, #4]
 80043b2:	6820      	ldr	r0, [r4, #0]
 80043b4:	f7ff fd80 	bl	8003eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b8:	2150      	movs	r1, #80	; 0x50
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	f7ff fda3 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 80043c0:	e00a      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	68cb      	ldr	r3, [r1, #12]
 80043c4:	684a      	ldr	r2, [r1, #4]
 80043c6:	6889      	ldr	r1, [r1, #8]
 80043c8:	6820      	ldr	r0, [r4, #0]
 80043ca:	f7ff ffaa 	bl	8004322 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80043d6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	2301      	movs	r3, #1
 80043da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043de:	2000      	movs	r0, #0
 80043e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80043e4:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e6:	68ca      	ldr	r2, [r1, #12]
 80043e8:	6849      	ldr	r1, [r1, #4]
 80043ea:	6820      	ldr	r0, [r4, #0]
 80043ec:	f7ff fd77 	bl	8003ede <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f0:	2160      	movs	r1, #96	; 0x60
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	f7ff fd87 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e7ee      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	68ca      	ldr	r2, [r1, #12]
 80043fc:	6849      	ldr	r1, [r1, #4]
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	f7ff fd5a 	bl	8003eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	f7ff fd7d 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 800440c:	e7e4      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 800440e:	2002      	movs	r0, #2
}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	fffe0088 	.word	0xfffe0088

08004418 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004418:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d02f      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8004420:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004422:	2301      	movs	r3, #1
 8004424:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800442e:	6802      	ldr	r2, [r0, #0]
 8004430:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004432:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004434:	4c13      	ldr	r4, [pc, #76]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004436:	42a2      	cmp	r2, r4
 8004438:	d01d      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800443e:	680c      	ldr	r4, [r1, #0]
 8004440:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004442:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	6803      	ldr	r3, [r0, #0]
 8004446:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d006      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d003      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004452:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004456:	4293      	cmp	r3, r2
 8004458:	d104      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800445e:	688a      	ldr	r2, [r1, #8]
 8004460:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004462:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004464:	2301      	movs	r3, #1
 8004466:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446a:	2300      	movs	r3, #0
 800446c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004470:	4618      	mov	r0, r3
}
 8004472:	bc30      	pop	{r4, r5}
 8004474:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800447a:	684c      	ldr	r4, [r1, #4]
 800447c:	4323      	orrs	r3, r4
 800447e:	e7dc      	b.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004480:	2002      	movs	r0, #2
}
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00

08004488 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004488:	4770      	bx	lr

0800448a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800448c:	4770      	bx	lr
	...

08004490 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004490:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004494:	b99b      	cbnz	r3, 80044be <osKernelInitialize+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004496:	f3ef 8310 	mrs	r3, PRIMASK
 800449a:	b99b      	cbnz	r3, 80044c4 <osKernelInitialize+0x34>
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <osKernelInitialize+0x40>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d005      	beq.n	80044b0 <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80044a4:	b98b      	cbnz	r3, 80044ca <osKernelInitialize+0x3a>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <osKernelInitialize+0x40>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044ac:	2000      	movs	r0, #0
 80044ae:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044b0:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	d0f5      	beq.n	80044a4 <osKernelInitialize+0x14>
    stat = osErrorISR;
 80044b8:	f06f 0005 	mvn.w	r0, #5
 80044bc:	4770      	bx	lr
 80044be:	f06f 0005 	mvn.w	r0, #5
 80044c2:	4770      	bx	lr
 80044c4:	f06f 0005 	mvn.w	r0, #5
 80044c8:	4770      	bx	lr
    } else {
      stat = osError;
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80044ce:	4770      	bx	lr
 80044d0:	20000294 	.word	0x20000294

080044d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044d4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80044da:	b9b3      	cbnz	r3, 800450a <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044dc:	f3ef 8310 	mrs	r3, PRIMASK
 80044e0:	b9b3      	cbnz	r3, 8004510 <osKernelStart+0x3c>
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <osKernelStart+0x48>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d008      	beq.n	80044fc <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d113      	bne.n	8004516 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <osKernelStart+0x48>)
 80044f0:	2202      	movs	r2, #2
 80044f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80044f4:	f001 f904 	bl	8005700 <vTaskStartScheduler>
      stat = osOK;
 80044f8:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80044fa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044fc:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8004500:	2a00      	cmp	r2, #0
 8004502:	d0f2      	beq.n	80044ea <osKernelStart+0x16>
    stat = osErrorISR;
 8004504:	f06f 0005 	mvn.w	r0, #5
 8004508:	e7f7      	b.n	80044fa <osKernelStart+0x26>
 800450a:	f06f 0005 	mvn.w	r0, #5
 800450e:	e7f4      	b.n	80044fa <osKernelStart+0x26>
 8004510:	f06f 0005 	mvn.w	r0, #5
 8004514:	e7f1      	b.n	80044fa <osKernelStart+0x26>
      stat = osError;
 8004516:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800451a:	e7ee      	b.n	80044fa <osKernelStart+0x26>
 800451c:	20000294 	.word	0x20000294

08004520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004522:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004524:	2400      	movs	r4, #0
 8004526:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004528:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800452c:	bb4c      	cbnz	r4, 8004582 <osThreadNew+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452e:	f3ef 8310 	mrs	r3, PRIMASK
 8004532:	bb33      	cbnz	r3, 8004582 <osThreadNew+0x62>
 8004534:	4b33      	ldr	r3, [pc, #204]	; (8004604 <osThreadNew+0xe4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d025      	beq.n	8004588 <osThreadNew+0x68>
 800453c:	b308      	cbz	r0, 8004582 <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800453e:	2300      	movs	r3, #0
 8004540:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8004544:	b392      	cbz	r2, 80045ac <osThreadNew+0x8c>
      if (attr->name != NULL) {
 8004546:	6816      	ldr	r6, [r2, #0]
 8004548:	b31e      	cbz	r6, 8004592 <osThreadNew+0x72>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800454a:	6994      	ldr	r4, [r2, #24]
 800454c:	b904      	cbnz	r4, 8004550 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 800454e:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004550:	1e63      	subs	r3, r4, #1
 8004552:	2b37      	cmp	r3, #55	; 0x37
 8004554:	d852      	bhi.n	80045fc <osThreadNew+0xdc>
 8004556:	6853      	ldr	r3, [r2, #4]
 8004558:	f013 0f01 	tst.w	r3, #1
 800455c:	d150      	bne.n	8004600 <osThreadNew+0xe0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800455e:	6955      	ldr	r5, [r2, #20]
 8004560:	b1d5      	cbz	r5, 8004598 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004562:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004566:	6893      	ldr	r3, [r2, #8]
 8004568:	b12b      	cbz	r3, 8004576 <osThreadNew+0x56>
 800456a:	68d7      	ldr	r7, [r2, #12]
 800456c:	2f5b      	cmp	r7, #91	; 0x5b
 800456e:	d902      	bls.n	8004576 <osThreadNew+0x56>
 8004570:	6917      	ldr	r7, [r2, #16]
 8004572:	b107      	cbz	r7, 8004576 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004574:	bb0d      	cbnz	r5, 80045ba <osThreadNew+0x9a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004576:	b193      	cbz	r3, 800459e <osThreadNew+0x7e>
    mem   = -1;
 8004578:	f04f 35ff 	mov.w	r5, #4294967295
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 800457c:	2d01      	cmp	r5, #1
 800457e:	d023      	beq.n	80045c8 <osThreadNew+0xa8>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8004580:	b375      	cbz	r5, 80045e0 <osThreadNew+0xc0>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004582:	9804      	ldr	r0, [sp, #16]
}
 8004584:	b007      	add	sp, #28
 8004586:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004588:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f8      	bne.n	8004582 <osThreadNew+0x62>
 8004590:	e7d4      	b.n	800453c <osThreadNew+0x1c>
    name  = &empty;
 8004592:	f10d 0617 	add.w	r6, sp, #23
 8004596:	e7d8      	b.n	800454a <osThreadNew+0x2a>
    stack = configMINIMAL_STACK_SIZE;
 8004598:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800459c:	e7e3      	b.n	8004566 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800459e:	68d3      	ldr	r3, [r2, #12]
 80045a0:	b96b      	cbnz	r3, 80045be <osThreadNew+0x9e>
 80045a2:	6913      	ldr	r3, [r2, #16]
 80045a4:	b173      	cbz	r3, 80045c4 <osThreadNew+0xa4>
    mem   = -1;
 80045a6:	f04f 35ff 	mov.w	r5, #4294967295
 80045aa:	e7e7      	b.n	800457c <osThreadNew+0x5c>
      mem = 0;
 80045ac:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80045ae:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 80045b0:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 80045b4:	f10d 0617 	add.w	r6, sp, #23
 80045b8:	e7e0      	b.n	800457c <osThreadNew+0x5c>
        mem = 1;
 80045ba:	2501      	movs	r5, #1
 80045bc:	e7de      	b.n	800457c <osThreadNew+0x5c>
    mem   = -1;
 80045be:	f04f 35ff 	mov.w	r5, #4294967295
 80045c2:	e7db      	b.n	800457c <osThreadNew+0x5c>
          mem = 0;
 80045c4:	2500      	movs	r5, #0
 80045c6:	e7d9      	b.n	800457c <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045c8:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80045ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045cc:	9202      	str	r2, [sp, #8]
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	9400      	str	r4, [sp, #0]
 80045d2:	460b      	mov	r3, r1
 80045d4:	4662      	mov	r2, ip
 80045d6:	4631      	mov	r1, r6
 80045d8:	f001 f826 	bl	8005628 <xTaskCreateStatic>
 80045dc:	9004      	str	r0, [sp, #16]
 80045de:	e7d0      	b.n	8004582 <osThreadNew+0x62>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045e0:	aa04      	add	r2, sp, #16
 80045e2:	9201      	str	r2, [sp, #4]
 80045e4:	9400      	str	r4, [sp, #0]
 80045e6:	460b      	mov	r3, r1
 80045e8:	fa1f f28c 	uxth.w	r2, ip
 80045ec:	4631      	mov	r1, r6
 80045ee:	f001 f854 	bl	800569a <xTaskCreate>
 80045f2:	2801      	cmp	r0, #1
 80045f4:	d0c5      	beq.n	8004582 <osThreadNew+0x62>
          hTask = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	e7c2      	b.n	8004582 <osThreadNew+0x62>
        return (NULL);
 80045fc:	2000      	movs	r0, #0
 80045fe:	e7c1      	b.n	8004584 <osThreadNew+0x64>
 8004600:	2000      	movs	r0, #0
 8004602:	e7bf      	b.n	8004584 <osThreadNew+0x64>
 8004604:	20000294 	.word	0x20000294

08004608 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8004608:	b530      	push	{r4, r5, lr}
 800460a:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800460c:	b370      	cbz	r0, 800466c <osThreadFlagsSet+0x64>
 800460e:	4605      	mov	r5, r0
 8004610:	2900      	cmp	r1, #0
 8004612:	db2b      	blt.n	800466c <osThreadFlagsSet+0x64>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461a:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 800461e:	b94b      	cbnz	r3, 8004634 <osThreadFlagsSet+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004620:	f3ef 8310 	mrs	r3, PRIMASK
 8004624:	b933      	cbnz	r3, 8004634 <osThreadFlagsSet+0x2c>
 8004626:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <osThreadFlagsSet+0x88>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d124      	bne.n	8004678 <osThreadFlagsSet+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800462e:	f3ef 8311 	mrs	r3, BASEPRI
 8004632:	b30b      	cbz	r3, 8004678 <osThreadFlagsSet+0x70>
      yield = pdFALSE;
 8004634:	2400      	movs	r4, #0
 8004636:	ab04      	add	r3, sp, #16
 8004638:	f843 4d08 	str.w	r4, [r3, #-8]!

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4623      	mov	r3, r4
 8004640:	2201      	movs	r2, #1
 8004642:	4628      	mov	r0, r5
 8004644:	f001 fc12 	bl	8005e6c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8004648:	9400      	str	r4, [sp, #0]
 800464a:	ab03      	add	r3, sp, #12
 800464c:	4622      	mov	r2, r4
 800464e:	4621      	mov	r1, r4
 8004650:	4628      	mov	r0, r5
 8004652:	f001 fc0b 	bl	8005e6c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8004656:	9b02      	ldr	r3, [sp, #8]
 8004658:	b15b      	cbz	r3, 8004672 <osThreadFlagsSet+0x6a>
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <osThreadFlagsSet+0x8c>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	e002      	b.n	8004672 <osThreadFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 800466c:	f06f 0303 	mvn.w	r3, #3
 8004670:	9303      	str	r3, [sp, #12]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	b005      	add	sp, #20
 8004676:	bd30      	pop	{r4, r5, pc}
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004678:	2300      	movs	r3, #0
 800467a:	2201      	movs	r2, #1
 800467c:	4628      	mov	r0, r5
 800467e:	f001 fb85 	bl	8005d8c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8004682:	ab03      	add	r3, sp, #12
 8004684:	2200      	movs	r2, #0
 8004686:	4611      	mov	r1, r2
 8004688:	4628      	mov	r0, r5
 800468a:	f001 fb7f 	bl	8005d8c <xTaskGenericNotify>
 800468e:	e7f0      	b.n	8004672 <osThreadFlagsSet+0x6a>
 8004690:	20000294 	.word	0x20000294
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800469c:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 80046a0:	bb5b      	cbnz	r3, 80046fa <osThreadFlagsClear+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	bb6b      	cbnz	r3, 8004704 <osThreadFlagsClear+0x6c>
 80046a8:	4b19      	ldr	r3, [pc, #100]	; (8004710 <osThreadFlagsClear+0x78>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d00f      	beq.n	80046d0 <osThreadFlagsClear+0x38>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80046b0:	2800      	cmp	r0, #0
 80046b2:	db2a      	blt.n	800470a <osThreadFlagsClear+0x72>
 80046b4:	4604      	mov	r4, r0
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80046b6:	f001 fabf 	bl	8005c38 <xTaskGetCurrentTaskHandle>
 80046ba:	4606      	mov	r6, r0

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80046bc:	ab01      	add	r3, sp, #4
 80046be:	2200      	movs	r2, #0
 80046c0:	4611      	mov	r1, r2
 80046c2:	f001 fb63 	bl	8005d8c <xTaskGenericNotify>
 80046c6:	2801      	cmp	r0, #1
 80046c8:	d009      	beq.n	80046de <osThreadFlagsClear+0x46>
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
        rflags = (uint32_t)osError;
      }
    }
    else {
      rflags = (uint32_t)osError;
 80046ca:	f04f 35ff 	mov.w	r5, #4294967295
 80046ce:	e016      	b.n	80046fe <osThreadFlagsClear+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046d0:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0eb      	beq.n	80046b0 <osThreadFlagsClear+0x18>
    rflags = (uint32_t)osErrorISR;
 80046d8:	f06f 0505 	mvn.w	r5, #5
 80046dc:	e00f      	b.n	80046fe <osThreadFlagsClear+0x66>
      rflags = cflags;
 80046de:	9d01      	ldr	r5, [sp, #4]
      cflags &= ~flags;
 80046e0:	ea25 0104 	bic.w	r1, r5, r4
 80046e4:	9101      	str	r1, [sp, #4]
      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80046e6:	2300      	movs	r3, #0
 80046e8:	2203      	movs	r2, #3
 80046ea:	4630      	mov	r0, r6
 80046ec:	f001 fb4e 	bl	8005d8c <xTaskGenericNotify>
 80046f0:	2801      	cmp	r0, #1
 80046f2:	d004      	beq.n	80046fe <osThreadFlagsClear+0x66>
        rflags = (uint32_t)osError;
 80046f4:	f04f 35ff 	mov.w	r5, #4294967295
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80046f8:	e001      	b.n	80046fe <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorISR;
 80046fa:	f06f 0505 	mvn.w	r5, #5
}
 80046fe:	4628      	mov	r0, r5
 8004700:	b002      	add	sp, #8
 8004702:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8004704:	f06f 0505 	mvn.w	r5, #5
 8004708:	e7f9      	b.n	80046fe <osThreadFlagsClear+0x66>
    rflags = (uint32_t)osErrorParameter;
 800470a:	f06f 0503 	mvn.w	r5, #3
 800470e:	e7f6      	b.n	80046fe <osThreadFlagsClear+0x66>
 8004710:	20000294 	.word	0x20000294

08004714 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8004714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004718:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471a:	f3ef 8305 	mrs	r3, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d14d      	bne.n	80047be <osThreadFlagsWait+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004722:	f3ef 8710 	mrs	r7, PRIMASK
 8004726:	463d      	mov	r5, r7
 8004728:	2f00      	cmp	r7, #0
 800472a:	d14e      	bne.n	80047ca <osThreadFlagsWait+0xb6>
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <osThreadFlagsWait+0xc8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d00d      	beq.n	8004750 <osThreadFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8004734:	2800      	cmp	r0, #0
 8004736:	db4b      	blt.n	80047d0 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8004738:	f011 0f02 	tst.w	r1, #2
 800473c:	d00f      	beq.n	800475e <osThreadFlagsWait+0x4a>
      clear = 0U;
 800473e:	46b8      	mov	r8, r7
 8004740:	4617      	mov	r7, r2
 8004742:	468a      	mov	sl, r1
 8004744:	4681      	mov	r9, r0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8004746:	f001 f82d 	bl	80057a4 <xTaskGetTickCount>
 800474a:	4683      	mov	fp, r0
    tout   = timeout;
 800474c:	463e      	mov	r6, r7
 800474e:	e028      	b.n	80047a2 <osThreadFlagsWait+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004750:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ed      	beq.n	8004734 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8004758:	f06f 0505 	mvn.w	r5, #5
 800475c:	e031      	b.n	80047c2 <osThreadFlagsWait+0xae>
      clear = flags;
 800475e:	4680      	mov	r8, r0
 8004760:	e7ee      	b.n	8004740 <osThreadFlagsWait+0x2c>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8004762:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800476a:	f01a 0f01 	tst.w	sl, #1
 800476e:	d00b      	beq.n	8004788 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8004770:	ea39 0305 	bics.w	r3, r9, r5
 8004774:	d025      	beq.n	80047c2 <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8004776:	b377      	cbz	r7, 80047d6 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8004778:	f001 f814 	bl	80057a4 <xTaskGetTickCount>
 800477c:	eba0 000b 	sub.w	r0, r0, fp

        if (td > tout) {
 8004780:	4286      	cmp	r6, r0
 8004782:	d309      	bcc.n	8004798 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8004784:	1a36      	subs	r6, r6, r0
 8004786:	e00b      	b.n	80047a0 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8004788:	ea19 0f05 	tst.w	r9, r5
 800478c:	d119      	bne.n	80047c2 <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 800478e:	2f00      	cmp	r7, #0
 8004790:	d1f2      	bne.n	8004778 <osThreadFlagsWait+0x64>
              rflags = (uint32_t)osErrorResource;
 8004792:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8004796:	e014      	b.n	80047c2 <osThreadFlagsWait+0xae>
          tout  = 0;
 8004798:	2600      	movs	r6, #0
 800479a:	e001      	b.n	80047a0 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 800479c:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 80047a0:	b17c      	cbz	r4, 80047c2 <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80047a2:	4633      	mov	r3, r6
 80047a4:	aa01      	add	r2, sp, #4
 80047a6:	4641      	mov	r1, r8
 80047a8:	2000      	movs	r0, #0
 80047aa:	f001 faa3 	bl	8005cf4 <xTaskNotifyWait>
 80047ae:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 80047b0:	2801      	cmp	r0, #1
 80047b2:	d0d6      	beq.n	8004762 <osThreadFlagsWait+0x4e>
        if (timeout == 0) {
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	d1f1      	bne.n	800479c <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 80047b8:	f06f 0502 	mvn.w	r5, #2
 80047bc:	e7f0      	b.n	80047a0 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 80047be:	f06f 0505 	mvn.w	r5, #5
}
 80047c2:	4628      	mov	r0, r5
 80047c4:	b003      	add	sp, #12
 80047c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 80047ca:	f06f 0505 	mvn.w	r5, #5
 80047ce:	e7f8      	b.n	80047c2 <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 80047d0:	f06f 0503 	mvn.w	r5, #3
 80047d4:	e7f5      	b.n	80047c2 <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 80047d6:	f06f 0502 	mvn.w	r5, #2
 80047da:	e7f2      	b.n	80047c2 <osThreadFlagsWait+0xae>
 80047dc:	20000294 	.word	0x20000294

080047e0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 80047e0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e6:	b9a3      	cbnz	r3, 8004812 <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ec:	b9a3      	cbnz	r3, 8004818 <osDelay+0x38>
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <osDelay+0x40>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d002      	beq.n	80047fc <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80047f6:	b940      	cbnz	r0, 800480a <osDelay+0x2a>
    stat = osOK;
 80047f8:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80047fa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047fc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f8      	beq.n	80047f6 <osDelay+0x16>
    stat = osErrorISR;
 8004804:	f06f 0005 	mvn.w	r0, #5
 8004808:	e7f7      	b.n	80047fa <osDelay+0x1a>
      vTaskDelay(ticks);
 800480a:	f001 f8d7 	bl	80059bc <vTaskDelay>
    stat = osOK;
 800480e:	2000      	movs	r0, #0
 8004810:	e7f3      	b.n	80047fa <osDelay+0x1a>
    stat = osErrorISR;
 8004812:	f06f 0005 	mvn.w	r0, #5
 8004816:	e7f0      	b.n	80047fa <osDelay+0x1a>
 8004818:	f06f 0005 	mvn.w	r0, #5
 800481c:	e7ed      	b.n	80047fa <osDelay+0x1a>
 800481e:	bf00      	nop
 8004820:	20000294 	.word	0x20000294

08004824 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004828:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	d14c      	bne.n	80048ca <osMessageQueueNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004830:	f3ef 8310 	mrs	r3, PRIMASK
 8004834:	2b00      	cmp	r3, #0
 8004836:	d14a      	bne.n	80048ce <osMessageQueueNew+0xaa>
 8004838:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <osMessageQueueNew+0xbc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d023      	beq.n	8004888 <osMessageQueueNew+0x64>
 8004840:	2800      	cmp	r0, #0
 8004842:	d046      	beq.n	80048d2 <osMessageQueueNew+0xae>
 8004844:	2900      	cmp	r1, #0
 8004846:	d046      	beq.n	80048d6 <osMessageQueueNew+0xb2>
 8004848:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 800484a:	2a00      	cmp	r2, #0
 800484c:	d034      	beq.n	80048b8 <osMessageQueueNew+0x94>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800484e:	6893      	ldr	r3, [r2, #8]
 8004850:	b14b      	cbz	r3, 8004866 <osMessageQueueNew+0x42>
 8004852:	68d2      	ldr	r2, [r2, #12]
 8004854:	2a4f      	cmp	r2, #79	; 0x4f
 8004856:	d906      	bls.n	8004866 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004858:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800485a:	b122      	cbz	r2, 8004866 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800485c:	6966      	ldr	r6, [r4, #20]
 800485e:	fb01 f500 	mul.w	r5, r1, r0
 8004862:	42ae      	cmp	r6, r5
 8004864:	d222      	bcs.n	80048ac <osMessageQueueNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004866:	b1ab      	cbz	r3, 8004894 <osMessageQueueNew+0x70>
    mem = -1;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800486c:	bbab      	cbnz	r3, 80048da <osMessageQueueNew+0xb6>
        hQueue = xQueueCreate (msg_count, msg_size);
 800486e:	2200      	movs	r2, #0
 8004870:	f000 fab5 	bl	8004dde <xQueueGenericCreate>
 8004874:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004876:	b125      	cbz	r5, 8004882 <osMessageQueueNew+0x5e>
      if (attr != NULL) {
 8004878:	b32c      	cbz	r4, 80048c6 <osMessageQueueNew+0xa2>
        name = attr->name;
 800487a:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800487c:	4628      	mov	r0, r5
 800487e:	f000 fd19 	bl	80052b4 <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004882:	4628      	mov	r0, r5
 8004884:	b002      	add	sp, #8
 8004886:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004888:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0d7      	beq.n	8004840 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8004890:	2500      	movs	r5, #0
 8004892:	e7f6      	b.n	8004882 <osMessageQueueNew+0x5e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004894:	68e3      	ldr	r3, [r4, #12]
 8004896:	b98b      	cbnz	r3, 80048bc <osMessageQueueNew+0x98>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004898:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800489a:	b113      	cbz	r3, 80048a2 <osMessageQueueNew+0x7e>
    mem = -1;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	e7e4      	b.n	800486c <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048a2:	6963      	ldr	r3, [r4, #20]
 80048a4:	b16b      	cbz	r3, 80048c2 <osMessageQueueNew+0x9e>
    mem = -1;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295
 80048aa:	e7df      	b.n	800486c <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80048ac:	2500      	movs	r5, #0
 80048ae:	9500      	str	r5, [sp, #0]
 80048b0:	f000 fa4d 	bl	8004d4e <xQueueGenericCreateStatic>
 80048b4:	4605      	mov	r5, r0
 80048b6:	e7de      	b.n	8004876 <osMessageQueueNew+0x52>
      mem = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e7d7      	b.n	800486c <osMessageQueueNew+0x48>
    mem = -1;
 80048bc:	f04f 33ff 	mov.w	r3, #4294967295
 80048c0:	e7d4      	b.n	800486c <osMessageQueueNew+0x48>
          mem = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e7d2      	b.n	800486c <osMessageQueueNew+0x48>
        name = NULL;
 80048c6:	2100      	movs	r1, #0
 80048c8:	e7d8      	b.n	800487c <osMessageQueueNew+0x58>
  hQueue = NULL;
 80048ca:	2500      	movs	r5, #0
 80048cc:	e7d9      	b.n	8004882 <osMessageQueueNew+0x5e>
 80048ce:	2500      	movs	r5, #0
 80048d0:	e7d7      	b.n	8004882 <osMessageQueueNew+0x5e>
 80048d2:	2500      	movs	r5, #0
 80048d4:	e7d5      	b.n	8004882 <osMessageQueueNew+0x5e>
 80048d6:	2500      	movs	r5, #0
 80048d8:	e7d3      	b.n	8004882 <osMessageQueueNew+0x5e>
 80048da:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 80048dc:	e7d1      	b.n	8004882 <osMessageQueueNew+0x5e>
 80048de:	bf00      	nop
 80048e0:	20000294 	.word	0x20000294

080048e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80048e4:	b510      	push	{r4, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ea:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80048ee:	b9b3      	cbnz	r3, 800491e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f0:	f3ef 8310 	mrs	r3, PRIMASK
 80048f4:	b99b      	cbnz	r3, 800491e <osMessageQueuePut+0x3a>
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <osMessageQueuePut+0x9c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d00b      	beq.n	8004916 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80048fe:	b3a0      	cbz	r0, 800496a <osMessageQueuePut+0x86>
 8004900:	b3b1      	cbz	r1, 8004970 <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004902:	2300      	movs	r3, #0
 8004904:	4622      	mov	r2, r4
 8004906:	f000 fa91 	bl	8004e2c <xQueueGenericSend>
 800490a:	2801      	cmp	r0, #1
 800490c:	d033      	beq.n	8004976 <osMessageQueuePut+0x92>
        if (timeout != 0U) {
 800490e:	b3a4      	cbz	r4, 800497a <osMessageQueuePut+0x96>
          stat = osErrorTimeout;
 8004910:	f06f 0001 	mvn.w	r0, #1
 8004914:	e027      	b.n	8004966 <osMessageQueuePut+0x82>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004916:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0ef      	beq.n	80048fe <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800491e:	b1a8      	cbz	r0, 800494c <osMessageQueuePut+0x68>
 8004920:	b1b9      	cbz	r1, 8004952 <osMessageQueuePut+0x6e>
 8004922:	b9cc      	cbnz	r4, 8004958 <osMessageQueuePut+0x74>
      yield = pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	aa02      	add	r2, sp, #8
 8004928:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800492c:	f000 fb3c 	bl	8004fa8 <xQueueGenericSendFromISR>
 8004930:	2801      	cmp	r0, #1
 8004932:	d114      	bne.n	800495e <osMessageQueuePut+0x7a>
        portYIELD_FROM_ISR (yield);
 8004934:	9b01      	ldr	r3, [sp, #4]
 8004936:	b1ab      	cbz	r3, 8004964 <osMessageQueuePut+0x80>
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <osMessageQueuePut+0xa0>)
 800493a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004948:	2000      	movs	r0, #0
 800494a:	e00c      	b.n	8004966 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 800494c:	f06f 0003 	mvn.w	r0, #3
 8004950:	e009      	b.n	8004966 <osMessageQueuePut+0x82>
 8004952:	f06f 0003 	mvn.w	r0, #3
 8004956:	e006      	b.n	8004966 <osMessageQueuePut+0x82>
 8004958:	f06f 0003 	mvn.w	r0, #3
 800495c:	e003      	b.n	8004966 <osMessageQueuePut+0x82>
        stat = osErrorResource;
 800495e:	f06f 0002 	mvn.w	r0, #2
 8004962:	e000      	b.n	8004966 <osMessageQueuePut+0x82>
  stat = osOK;
 8004964:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004966:	b002      	add	sp, #8
 8004968:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 800496a:	f06f 0003 	mvn.w	r0, #3
 800496e:	e7fa      	b.n	8004966 <osMessageQueuePut+0x82>
 8004970:	f06f 0003 	mvn.w	r0, #3
 8004974:	e7f7      	b.n	8004966 <osMessageQueuePut+0x82>
  stat = osOK;
 8004976:	2000      	movs	r0, #0
 8004978:	e7f5      	b.n	8004966 <osMessageQueuePut+0x82>
          stat = osErrorResource;
 800497a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800497e:	e7f2      	b.n	8004966 <osMessageQueuePut+0x82>
 8004980:	20000294 	.word	0x20000294
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004988:	b510      	push	{r4, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800498e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8004992:	b9ab      	cbnz	r3, 80049c0 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004994:	f3ef 8310 	mrs	r3, PRIMASK
 8004998:	b993      	cbnz	r3, 80049c0 <osMessageQueueGet+0x38>
 800499a:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <osMessageQueueGet+0x9c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d00a      	beq.n	80049b8 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80049a2:	b398      	cbz	r0, 8004a0c <osMessageQueueGet+0x84>
 80049a4:	b3a9      	cbz	r1, 8004a12 <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049a6:	4622      	mov	r2, r4
 80049a8:	f000 fb64 	bl	8005074 <xQueueReceive>
 80049ac:	2801      	cmp	r0, #1
 80049ae:	d033      	beq.n	8004a18 <osMessageQueueGet+0x90>
        if (timeout != 0U) {
 80049b0:	b3a4      	cbz	r4, 8004a1c <osMessageQueueGet+0x94>
          stat = osErrorTimeout;
 80049b2:	f06f 0001 	mvn.w	r0, #1
 80049b6:	e027      	b.n	8004a08 <osMessageQueueGet+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049b8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049c0:	b1a8      	cbz	r0, 80049ee <osMessageQueueGet+0x66>
 80049c2:	b1b9      	cbz	r1, 80049f4 <osMessageQueueGet+0x6c>
 80049c4:	b9cc      	cbnz	r4, 80049fa <osMessageQueueGet+0x72>
      yield = pdFALSE;
 80049c6:	aa02      	add	r2, sp, #8
 80049c8:	2300      	movs	r3, #0
 80049ca:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80049ce:	f000 fbfd 	bl	80051cc <xQueueReceiveFromISR>
 80049d2:	2801      	cmp	r0, #1
 80049d4:	d114      	bne.n	8004a00 <osMessageQueueGet+0x78>
        portYIELD_FROM_ISR (yield);
 80049d6:	9b01      	ldr	r3, [sp, #4]
 80049d8:	b1ab      	cbz	r3, 8004a06 <osMessageQueueGet+0x7e>
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <osMessageQueueGet+0xa0>)
 80049dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80049ea:	2000      	movs	r0, #0
 80049ec:	e00c      	b.n	8004a08 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 80049ee:	f06f 0003 	mvn.w	r0, #3
 80049f2:	e009      	b.n	8004a08 <osMessageQueueGet+0x80>
 80049f4:	f06f 0003 	mvn.w	r0, #3
 80049f8:	e006      	b.n	8004a08 <osMessageQueueGet+0x80>
 80049fa:	f06f 0003 	mvn.w	r0, #3
 80049fe:	e003      	b.n	8004a08 <osMessageQueueGet+0x80>
        stat = osErrorResource;
 8004a00:	f06f 0002 	mvn.w	r0, #2
 8004a04:	e000      	b.n	8004a08 <osMessageQueueGet+0x80>
  stat = osOK;
 8004a06:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004a08:	b002      	add	sp, #8
 8004a0a:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8004a0c:	f06f 0003 	mvn.w	r0, #3
 8004a10:	e7fa      	b.n	8004a08 <osMessageQueueGet+0x80>
 8004a12:	f06f 0003 	mvn.w	r0, #3
 8004a16:	e7f7      	b.n	8004a08 <osMessageQueueGet+0x80>
  stat = osOK;
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e7f5      	b.n	8004a08 <osMessageQueueGet+0x80>
          stat = osErrorResource;
 8004a1c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8004a20:	e7f2      	b.n	8004a08 <osMessageQueueGet+0x80>
 8004a22:	bf00      	nop
 8004a24:	20000294 	.word	0x20000294
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8004a2c:	b198      	cbz	r0, 8004a56 <osMessageQueueGetCount+0x2a>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004a2e:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a30:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8004a34:	b963      	cbnz	r3, 8004a50 <osMessageQueueGetCount+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a36:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3a:	b94b      	cbnz	r3, 8004a50 <osMessageQueueGetCount+0x24>
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <osMessageQueueGetCount+0x30>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d102      	bne.n	8004a4a <osMessageQueueGetCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a44:	f3ef 8311 	mrs	r3, BASEPRI
 8004a48:	b913      	cbnz	r3, 8004a50 <osMessageQueueGetCount+0x24>
    count = uxQueueMessagesWaitingFromISR (hQueue);
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004a4a:	f000 fc14 	bl	8005276 <uxQueueMessagesWaiting>
 8004a4e:	e001      	b.n	8004a54 <osMessageQueueGetCount+0x28>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004a50:	f000 fc24 	bl	800529c <uxQueueMessagesWaitingFromISR>
  }

  return ((uint32_t)count);
}
 8004a54:	bd08      	pop	{r3, pc}
    count = 0U;
 8004a56:	2000      	movs	r0, #0
}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000294 	.word	0x20000294

08004a60 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8004a60:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a62:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a66:	b99b      	cbnz	r3, 8004a90 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6c:	b99b      	cbnz	r3, 8004a96 <osMessageQueueReset+0x36>
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <osMessageQueueReset+0x44>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d005      	beq.n	8004a82 <osMessageQueueReset+0x22>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8004a76:	b188      	cbz	r0, 8004a9c <osMessageQueueReset+0x3c>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8004a78:	2100      	movs	r1, #0
 8004a7a:	f000 f915 	bl	8004ca8 <xQueueGenericReset>
    stat = osOK;
 8004a7e:	2000      	movs	r0, #0
  }

  return (stat);
}
 8004a80:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a82:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f5      	beq.n	8004a76 <osMessageQueueReset+0x16>
    stat = osErrorISR;
 8004a8a:	f06f 0005 	mvn.w	r0, #5
 8004a8e:	e7f7      	b.n	8004a80 <osMessageQueueReset+0x20>
 8004a90:	f06f 0005 	mvn.w	r0, #5
 8004a94:	e7f4      	b.n	8004a80 <osMessageQueueReset+0x20>
 8004a96:	f06f 0005 	mvn.w	r0, #5
 8004a9a:	e7f1      	b.n	8004a80 <osMessageQueueReset+0x20>
    stat = osErrorParameter;
 8004a9c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8004aa0:	e7ee      	b.n	8004a80 <osMessageQueueReset+0x20>
 8004aa2:	bf00      	nop
 8004aa4:	20000294 	.word	0x20000294

08004aa8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <vApplicationGetIdleTaskMemory+0x10>)
 8004aaa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <vApplicationGetIdleTaskMemory+0x14>)
 8004aae:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000238 	.word	0x20000238
 8004abc:	20000038 	.word	0x20000038

08004ac0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <vApplicationGetTimerTaskMemory+0x10>)
 8004ac2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <vApplicationGetTimerTaskMemory+0x14>)
 8004ac6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]
}
 8004ace:	4770      	bx	lr
 8004ad0:	20000698 	.word	0x20000698
 8004ad4:	20000298 	.word	0x20000298

08004ad8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ad8:	f100 0308 	add.w	r3, r0, #8
 8004adc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ade:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aec:	4770      	bx	lr

08004aee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004af2:	4770      	bx	lr

08004af4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004af4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004af6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b00:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b02:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004b04:	6803      	ldr	r3, [r0, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	6003      	str	r3, [r0, #0]
}
 8004b0a:	4770      	bx	lr

08004b0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b0c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b0e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b10:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004b14:	d002      	beq.n	8004b1c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b16:	f100 0208 	add.w	r2, r0, #8
 8004b1a:	e002      	b.n	8004b22 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b1c:	6902      	ldr	r2, [r0, #16]
 8004b1e:	e004      	b.n	8004b2a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b20:	461a      	mov	r2, r3
 8004b22:	6853      	ldr	r3, [r2, #4]
 8004b24:	681c      	ldr	r4, [r3, #0]
 8004b26:	42ac      	cmp	r4, r5
 8004b28:	d9fa      	bls.n	8004b20 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b2a:	6853      	ldr	r3, [r2, #4]
 8004b2c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b2e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b30:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b32:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b34:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004b36:	6803      	ldr	r3, [r0, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	6003      	str	r3, [r0, #0]
}
 8004b3c:	bc30      	pop	{r4, r5}
 8004b3e:	4770      	bx	lr

08004b40 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b40:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b42:	6842      	ldr	r2, [r0, #4]
 8004b44:	6881      	ldr	r1, [r0, #8]
 8004b46:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b48:	6882      	ldr	r2, [r0, #8]
 8004b4a:	6841      	ldr	r1, [r0, #4]
 8004b4c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4282      	cmp	r2, r0
 8004b52:	d006      	beq.n	8004b62 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b54:	2200      	movs	r2, #0
 8004b56:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	3a01      	subs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b5e:	6818      	ldr	r0, [r3, #0]
}
 8004b60:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b62:	6882      	ldr	r2, [r0, #8]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	e7f5      	b.n	8004b54 <uxListRemove+0x14>

08004b68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b6c:	f001 fc92 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d004      	beq.n	8004b82 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8004b78:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8004b7a:	f001 fcad 	bl	80064d8 <vPortExitCritical>

	return xReturn;
}
 8004b7e:	4620      	mov	r0, r4
 8004b80:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004b82:	2401      	movs	r4, #1
 8004b84:	e7f9      	b.n	8004b7a <prvIsQueueFull+0x12>

08004b86 <prvIsQueueEmpty>:
{
 8004b86:	b510      	push	{r4, lr}
 8004b88:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004b8a:	f001 fc83 	bl	8006494 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b90:	b123      	cbz	r3, 8004b9c <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8004b92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004b94:	f001 fca0 	bl	80064d8 <vPortExitCritical>
}
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8004b9c:	2401      	movs	r4, #1
 8004b9e:	e7f9      	b.n	8004b94 <prvIsQueueEmpty+0xe>

08004ba0 <prvCopyDataToQueue>:
{
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ba8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004baa:	b95a      	cbnz	r2, 8004bc4 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bac:	6803      	ldr	r3, [r0, #0]
 8004bae:	b11b      	cbz	r3, 8004bb8 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8004bb0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bb2:	3501      	adds	r5, #1
 8004bb4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004bb8:	6840      	ldr	r0, [r0, #4]
 8004bba:	f001 f853 	bl	8005c64 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6063      	str	r3, [r4, #4]
 8004bc2:	e7f6      	b.n	8004bb2 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8004bc4:	b96e      	cbnz	r6, 8004be2 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004bc6:	6880      	ldr	r0, [r0, #8]
 8004bc8:	f001 fefc 	bl	80069c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004bcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bce:	68a3      	ldr	r3, [r4, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bd4:	6862      	ldr	r2, [r4, #4]
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d319      	bcc.n	8004c0e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004bde:	2000      	movs	r0, #0
 8004be0:	e7e7      	b.n	8004bb2 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be2:	68c0      	ldr	r0, [r0, #12]
 8004be4:	f001 feee 	bl	80069c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004be8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bea:	4252      	negs	r2, r2
 8004bec:	68e3      	ldr	r3, [r4, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf2:	6821      	ldr	r1, [r4, #0]
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	d202      	bcs.n	8004bfe <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	441a      	add	r2, r3
 8004bfc:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004bfe:	2e02      	cmp	r6, #2
 8004c00:	d001      	beq.n	8004c06 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8004c02:	2000      	movs	r0, #0
 8004c04:	e7d5      	b.n	8004bb2 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c06:	b125      	cbz	r5, 8004c12 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8004c08:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e7d1      	b.n	8004bb2 <prvCopyDataToQueue+0x12>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e7cf      	b.n	8004bb2 <prvCopyDataToQueue+0x12>
 8004c12:	2000      	movs	r0, #0
 8004c14:	e7cd      	b.n	8004bb2 <prvCopyDataToQueue+0x12>

08004c16 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c16:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004c18:	b172      	cbz	r2, 8004c38 <prvCopyDataFromQueue+0x22>
{
 8004c1a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004c1c:	68c3      	ldr	r3, [r0, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c22:	6844      	ldr	r4, [r0, #4]
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d301      	bcc.n	8004c2c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c28:	6803      	ldr	r3, [r0, #0]
 8004c2a:	60c3      	str	r3, [r0, #12]
 8004c2c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c2e:	68c1      	ldr	r1, [r0, #12]
 8004c30:	4620      	mov	r0, r4
 8004c32:	f001 fec7 	bl	80069c4 <memcpy>
}
 8004c36:	bd10      	pop	{r4, pc}
 8004c38:	4770      	bx	lr

08004c3a <prvUnlockQueue>:
{
 8004c3a:	b538      	push	{r3, r4, r5, lr}
 8004c3c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004c3e:	f001 fc29 	bl	8006494 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004c42:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8004c46:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c48:	e003      	b.n	8004c52 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8004c4a:	f000 ffef 	bl	8005c2c <vTaskMissedYield>
			--cTxLock;
 8004c4e:	3c01      	subs	r4, #1
 8004c50:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	dd08      	ble.n	8004c68 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c58:	b133      	cbz	r3, 8004c68 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c5a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004c5e:	f000 ff53 	bl	8005b08 <xTaskRemoveFromEventList>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0f3      	beq.n	8004c4e <prvUnlockQueue+0x14>
 8004c66:	e7f0      	b.n	8004c4a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8004c68:	23ff      	movs	r3, #255	; 0xff
 8004c6a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004c6e:	f001 fc33 	bl	80064d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004c72:	f001 fc0f 	bl	8006494 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004c76:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8004c7a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c7c:	e003      	b.n	8004c86 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8004c7e:	f000 ffd5 	bl	8005c2c <vTaskMissedYield>
				--cRxLock;
 8004c82:	3c01      	subs	r4, #1
 8004c84:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	dd08      	ble.n	8004c9c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c8a:	692b      	ldr	r3, [r5, #16]
 8004c8c:	b133      	cbz	r3, 8004c9c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8e:	f105 0010 	add.w	r0, r5, #16
 8004c92:	f000 ff39 	bl	8005b08 <xTaskRemoveFromEventList>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0f3      	beq.n	8004c82 <prvUnlockQueue+0x48>
 8004c9a:	e7f0      	b.n	8004c7e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8004c9c:	23ff      	movs	r3, #255	; 0xff
 8004c9e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004ca2:	f001 fc19 	bl	80064d8 <vPortExitCritical>
}
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}

08004ca8 <xQueueGenericReset>:
{
 8004ca8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004caa:	b940      	cbnz	r0, 8004cbe <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericReset+0x14>
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004cc2:	f001 fbe7 	bl	8006494 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004cc6:	6821      	ldr	r1, [r4, #0]
 8004cc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ccc:	fb03 1002 	mla	r0, r3, r2, r1
 8004cd0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cd6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	fb02 1303 	mla	r3, r2, r3, r1
 8004cde:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ce0:	23ff      	movs	r3, #255	; 0xff
 8004ce2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004cea:	b9a5      	cbnz	r5, 8004d16 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	b91b      	cbnz	r3, 8004cf8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004cf0:	f001 fbf2 	bl	80064d8 <vPortExitCritical>
}
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf8:	f104 0010 	add.w	r0, r4, #16
 8004cfc:	f000 ff04 	bl	8005b08 <xTaskRemoveFromEventList>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d0f5      	beq.n	8004cf0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <xQueueGenericReset+0x80>)
 8004d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	e7ec      	b.n	8004cf0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d16:	f104 0010 	add.w	r0, r4, #16
 8004d1a:	f7ff fedd 	bl	8004ad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d22:	f7ff fed9 	bl	8004ad8 <vListInitialise>
 8004d26:	e7e3      	b.n	8004cf0 <xQueueGenericReset+0x48>
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <prvInitialiseNewQueue>:
{
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	461d      	mov	r5, r3
 8004d30:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d32:	460b      	mov	r3, r1
 8004d34:	b149      	cbz	r1, 8004d4a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d36:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004d38:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d3a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7ff ffb2 	bl	8004ca8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004d44:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d4a:	6024      	str	r4, [r4, #0]
 8004d4c:	e7f4      	b.n	8004d38 <prvInitialiseNewQueue+0xc>

08004d4e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d4e:	b940      	cbnz	r0, 8004d62 <xQueueGenericCreateStatic+0x14>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericCreateStatic+0x12>
	{
 8004d62:	b510      	push	{r4, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8004d68:	b153      	cbz	r3, 8004d80 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d6a:	b192      	cbz	r2, 8004d92 <xQueueGenericCreateStatic+0x44>
 8004d6c:	b989      	cbnz	r1, 8004d92 <xQueueGenericCreateStatic+0x44>
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	e7fe      	b.n	8004d7e <xQueueGenericCreateStatic+0x30>
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	e7fe      	b.n	8004d90 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d92:	b94a      	cbnz	r2, 8004da8 <xQueueGenericCreateStatic+0x5a>
 8004d94:	b141      	cbz	r1, 8004da8 <xQueueGenericCreateStatic+0x5a>
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	e7fe      	b.n	8004da6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004da8:	2050      	movs	r0, #80	; 0x50
 8004daa:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dac:	9803      	ldr	r0, [sp, #12]
 8004dae:	2850      	cmp	r0, #80	; 0x50
 8004db0:	d008      	beq.n	8004dc4 <xQueueGenericCreateStatic+0x76>
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueGenericCreateStatic+0x74>
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dce:	9400      	str	r4, [sp, #0]
 8004dd0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004dd4:	f7ff ffaa 	bl	8004d2c <prvInitialiseNewQueue>
	}
 8004dd8:	4620      	mov	r0, r4
 8004dda:	b004      	add	sp, #16
 8004ddc:	bd10      	pop	{r4, pc}

08004dde <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dde:	b940      	cbnz	r0, 8004df2 <xQueueGenericCreate+0x14>
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericCreate+0x12>
	{
 8004df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df4:	b083      	sub	sp, #12
 8004df6:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8004df8:	b111      	cbz	r1, 8004e00 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfa:	fb01 f000 	mul.w	r0, r1, r0
 8004dfe:	e000      	b.n	8004e02 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8004e00:	2000      	movs	r0, #0
 8004e02:	4617      	mov	r7, r2
 8004e04:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004e06:	3050      	adds	r0, #80	; 0x50
 8004e08:	f001 fcfc 	bl	8006804 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	b150      	cbz	r0, 8004e26 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	463b      	mov	r3, r7
 8004e1a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4630      	mov	r0, r6
 8004e22:	f7ff ff83 	bl	8004d2c <prvInitialiseNewQueue>
	}
 8004e26:	4628      	mov	r0, r5
 8004e28:	b003      	add	sp, #12
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e2c <xQueueGenericSend>:
{
 8004e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004e32:	b160      	cbz	r0, 8004e4e <xQueueGenericSend+0x22>
 8004e34:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e36:	b999      	cbnz	r1, 8004e60 <xQueueGenericSend+0x34>
 8004e38:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e3a:	b18a      	cbz	r2, 8004e60 <xQueueGenericSend+0x34>
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGenericSend+0x20>
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	e7fe      	b.n	8004e5e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d10b      	bne.n	8004e7c <xQueueGenericSend+0x50>
 8004e64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e66:	2a01      	cmp	r2, #1
 8004e68:	d008      	beq.n	8004e7c <xQueueGenericSend+0x50>
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	e7fe      	b.n	8004e7a <xQueueGenericSend+0x4e>
 8004e7c:	461e      	mov	r6, r3
 8004e7e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e80:	f000 fee0 	bl	8005c44 <xTaskGetSchedulerState>
 8004e84:	b950      	cbnz	r0, 8004e9c <xQueueGenericSend+0x70>
 8004e86:	9b01      	ldr	r3, [sp, #4]
 8004e88:	b153      	cbz	r3, 8004ea0 <xQueueGenericSend+0x74>
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	e7fe      	b.n	8004e9a <xQueueGenericSend+0x6e>
 8004e9c:	2500      	movs	r5, #0
 8004e9e:	e03a      	b.n	8004f16 <xQueueGenericSend+0xea>
 8004ea0:	2500      	movs	r5, #0
 8004ea2:	e038      	b.n	8004f16 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f7ff fe79 	bl	8004ba0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb0:	b94b      	cbnz	r3, 8004ec6 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8004eb2:	b1a8      	cbz	r0, 8004ee0 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8004eb4:	4b3b      	ldr	r3, [pc, #236]	; (8004fa4 <xQueueGenericSend+0x178>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	e00c      	b.n	8004ee0 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004eca:	f000 fe1d 	bl	8005b08 <xTaskRemoveFromEventList>
 8004ece:	b138      	cbz	r0, 8004ee0 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8004ed0:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <xQueueGenericSend+0x178>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004ee0:	f001 fafa 	bl	80064d8 <vPortExitCritical>
				return pdPASS;
 8004ee4:	2001      	movs	r0, #1
}
 8004ee6:	b005      	add	sp, #20
 8004ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8004eea:	f001 faf5 	bl	80064d8 <vPortExitCritical>
					return errQUEUE_FULL;
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e7f9      	b.n	8004ee6 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef2:	a802      	add	r0, sp, #8
 8004ef4:	f000 fe4e 	bl	8005b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef8:	2501      	movs	r5, #1
 8004efa:	e019      	b.n	8004f30 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8004efc:	2300      	movs	r3, #0
 8004efe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004f02:	e021      	b.n	8004f48 <xQueueGenericSend+0x11c>
 8004f04:	2300      	movs	r3, #0
 8004f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f0a:	e023      	b.n	8004f54 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7ff fe94 	bl	8004c3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f12:	f000 fcd9 	bl	80058c8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004f16:	f001 fabd 	bl	8006494 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3c0      	bcc.n	8004ea4 <xQueueGenericSend+0x78>
 8004f22:	2e02      	cmp	r6, #2
 8004f24:	d0be      	beq.n	8004ea4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f26:	9b01      	ldr	r3, [sp, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0de      	beq.n	8004eea <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8004f2c:	2d00      	cmp	r5, #0
 8004f2e:	d0e0      	beq.n	8004ef2 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8004f30:	f001 fad2 	bl	80064d8 <vPortExitCritical>
		vTaskSuspendAll();
 8004f34:	f000 fc2e 	bl	8005794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f38:	f001 faac 	bl	8006494 <vPortEnterCritical>
 8004f3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004f40:	b25b      	sxtb	r3, r3
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d0d9      	beq.n	8004efc <xQueueGenericSend+0xd0>
 8004f48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004f4c:	b25b      	sxtb	r3, r3
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d0d7      	beq.n	8004f04 <xQueueGenericSend+0xd8>
 8004f54:	f001 fac0 	bl	80064d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f58:	a901      	add	r1, sp, #4
 8004f5a:	a802      	add	r0, sp, #8
 8004f5c:	f000 fe26 	bl	8005bac <xTaskCheckForTimeOut>
 8004f60:	b9c8      	cbnz	r0, 8004f96 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7ff fe00 	bl	8004b68 <prvIsQueueFull>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d0cf      	beq.n	8004f0c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f6c:	9901      	ldr	r1, [sp, #4]
 8004f6e:	f104 0010 	add.w	r0, r4, #16
 8004f72:	f000 fd95 	bl	8005aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7ff fe5f 	bl	8004c3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f7c:	f000 fca4 	bl	80058c8 <xTaskResumeAll>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1c8      	bne.n	8004f16 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <xQueueGenericSend+0x178>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	e7bf      	b.n	8004f16 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff fe4f 	bl	8004c3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9c:	f000 fc94 	bl	80058c8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e7a0      	b.n	8004ee6 <xQueueGenericSend+0xba>
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <xQueueGenericSendFromISR>:
{
 8004fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004fac:	b160      	cbz	r0, 8004fc8 <xQueueGenericSendFromISR+0x20>
 8004fae:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fb0:	b999      	cbnz	r1, 8004fda <xQueueGenericSendFromISR+0x32>
 8004fb2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004fb4:	b188      	cbz	r0, 8004fda <xQueueGenericSendFromISR+0x32>
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	e7fe      	b.n	8004fc6 <xQueueGenericSendFromISR+0x1e>
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	e7fe      	b.n	8004fd8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d10b      	bne.n	8004ff6 <xQueueGenericSendFromISR+0x4e>
 8004fde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004fe0:	2801      	cmp	r0, #1
 8004fe2:	d008      	beq.n	8004ff6 <xQueueGenericSendFromISR+0x4e>
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	e7fe      	b.n	8004ff4 <xQueueGenericSendFromISR+0x4c>
 8004ff6:	461f      	mov	r7, r3
 8004ff8:	4690      	mov	r8, r2
 8004ffa:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ffc:	f001 fb74 	bl	80066e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005000:	f3ef 8611 	mrs	r6, BASEPRI
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005014:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005016:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005018:	429a      	cmp	r2, r3
 800501a:	d303      	bcc.n	8005024 <xQueueGenericSendFromISR+0x7c>
 800501c:	2f02      	cmp	r7, #2
 800501e:	d001      	beq.n	8005024 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8005020:	2000      	movs	r0, #0
 8005022:	e00f      	b.n	8005044 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005024:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005028:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800502a:	463a      	mov	r2, r7
 800502c:	4649      	mov	r1, r9
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff fdb6 	bl	8004ba0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005034:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005038:	d008      	beq.n	800504c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800503a:	1c6b      	adds	r3, r5, #1
 800503c:	b25b      	sxtb	r3, r3
 800503e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8005042:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005044:	f386 8811 	msr	BASEPRI, r6
}
 8005048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800504c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800504e:	b15b      	cbz	r3, 8005068 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005050:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005054:	f000 fd58 	bl	8005b08 <xTaskRemoveFromEventList>
 8005058:	b140      	cbz	r0, 800506c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800505a:	f1b8 0f00 	cmp.w	r8, #0
 800505e:	d007      	beq.n	8005070 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005060:	2001      	movs	r0, #1
 8005062:	f8c8 0000 	str.w	r0, [r8]
 8005066:	e7ed      	b.n	8005044 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8005068:	2001      	movs	r0, #1
 800506a:	e7eb      	b.n	8005044 <xQueueGenericSendFromISR+0x9c>
 800506c:	2001      	movs	r0, #1
 800506e:	e7e9      	b.n	8005044 <xQueueGenericSendFromISR+0x9c>
 8005070:	2001      	movs	r0, #1
 8005072:	e7e7      	b.n	8005044 <xQueueGenericSendFromISR+0x9c>

08005074 <xQueueReceive>:
{
 8005074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005076:	b085      	sub	sp, #20
 8005078:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800507a:	b160      	cbz	r0, 8005096 <xQueueReceive+0x22>
 800507c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800507e:	b999      	cbnz	r1, 80050a8 <xQueueReceive+0x34>
 8005080:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005082:	b18b      	cbz	r3, 80050a8 <xQueueReceive+0x34>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	e7fe      	b.n	8005094 <xQueueReceive+0x20>
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	e7fe      	b.n	80050a6 <xQueueReceive+0x32>
 80050a8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050aa:	f000 fdcb 	bl	8005c44 <xTaskGetSchedulerState>
 80050ae:	b950      	cbnz	r0, 80050c6 <xQueueReceive+0x52>
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	b153      	cbz	r3, 80050ca <xQueueReceive+0x56>
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	e7fe      	b.n	80050c4 <xQueueReceive+0x50>
 80050c6:	2600      	movs	r6, #0
 80050c8:	e03e      	b.n	8005148 <xQueueReceive+0xd4>
 80050ca:	2600      	movs	r6, #0
 80050cc:	e03c      	b.n	8005148 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050ce:	4639      	mov	r1, r7
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff fda0 	bl	8004c16 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050d6:	3d01      	subs	r5, #1
 80050d8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	b923      	cbnz	r3, 80050e8 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 80050de:	f001 f9fb 	bl	80064d8 <vPortExitCritical>
				return pdPASS;
 80050e2:	2001      	movs	r0, #1
}
 80050e4:	b005      	add	sp, #20
 80050e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e8:	f104 0010 	add.w	r0, r4, #16
 80050ec:	f000 fd0c 	bl	8005b08 <xTaskRemoveFromEventList>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d0f4      	beq.n	80050de <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 80050f4:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <xQueueReceive+0x154>)
 80050f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	e7eb      	b.n	80050de <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8005106:	f001 f9e7 	bl	80064d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800510a:	2000      	movs	r0, #0
 800510c:	e7ea      	b.n	80050e4 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800510e:	a802      	add	r0, sp, #8
 8005110:	f000 fd40 	bl	8005b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005114:	2601      	movs	r6, #1
 8005116:	e021      	b.n	800515c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8005118:	2300      	movs	r3, #0
 800511a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800511e:	e029      	b.n	8005174 <xQueueReceive+0x100>
 8005120:	2300      	movs	r3, #0
 8005122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005126:	e02b      	b.n	8005180 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8005128:	4620      	mov	r0, r4
 800512a:	f7ff fd86 	bl	8004c3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800512e:	f000 fbcb 	bl	80058c8 <xTaskResumeAll>
 8005132:	e009      	b.n	8005148 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff fd80 	bl	8004c3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800513a:	f000 fbc5 	bl	80058c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800513e:	4620      	mov	r0, r4
 8005140:	f7ff fd21 	bl	8004b86 <prvIsQueueEmpty>
 8005144:	2800      	cmp	r0, #0
 8005146:	d13d      	bne.n	80051c4 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8005148:	f001 f9a4 	bl	8006494 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800514c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800514e:	2d00      	cmp	r5, #0
 8005150:	d1bd      	bne.n	80050ce <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005152:	9b01      	ldr	r3, [sp, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0d6      	beq.n	8005106 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8005158:	2e00      	cmp	r6, #0
 800515a:	d0d8      	beq.n	800510e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 800515c:	f001 f9bc 	bl	80064d8 <vPortExitCritical>
		vTaskSuspendAll();
 8005160:	f000 fb18 	bl	8005794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005164:	f001 f996 	bl	8006494 <vPortEnterCritical>
 8005168:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800516c:	b25b      	sxtb	r3, r3
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d0d1      	beq.n	8005118 <xQueueReceive+0xa4>
 8005174:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005178:	b25b      	sxtb	r3, r3
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d0cf      	beq.n	8005120 <xQueueReceive+0xac>
 8005180:	f001 f9aa 	bl	80064d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005184:	a901      	add	r1, sp, #4
 8005186:	a802      	add	r0, sp, #8
 8005188:	f000 fd10 	bl	8005bac <xTaskCheckForTimeOut>
 800518c:	2800      	cmp	r0, #0
 800518e:	d1d1      	bne.n	8005134 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005190:	4620      	mov	r0, r4
 8005192:	f7ff fcf8 	bl	8004b86 <prvIsQueueEmpty>
 8005196:	2800      	cmp	r0, #0
 8005198:	d0c6      	beq.n	8005128 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800519a:	9901      	ldr	r1, [sp, #4]
 800519c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051a0:	f000 fc7e 	bl	8005aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051a4:	4620      	mov	r0, r4
 80051a6:	f7ff fd48 	bl	8004c3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051aa:	f000 fb8d 	bl	80058c8 <xTaskResumeAll>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d1ca      	bne.n	8005148 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <xQueueReceive+0x154>)
 80051b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	e7c1      	b.n	8005148 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 80051c4:	2000      	movs	r0, #0
 80051c6:	e78d      	b.n	80050e4 <xQueueReceive+0x70>
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <xQueueReceiveFromISR>:
{
 80051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80051d0:	b160      	cbz	r0, 80051ec <xQueueReceiveFromISR+0x20>
 80051d2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d4:	b999      	cbnz	r1, 80051fe <xQueueReceiveFromISR+0x32>
 80051d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80051d8:	b18b      	cbz	r3, 80051fe <xQueueReceiveFromISR+0x32>
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	e7fe      	b.n	80051ea <xQueueReceiveFromISR+0x1e>
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	e7fe      	b.n	80051fc <xQueueReceiveFromISR+0x30>
 80051fe:	4617      	mov	r7, r2
 8005200:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005202:	f001 fa71 	bl	80066e8 <vPortValidateInterruptPriority>
	__asm volatile
 8005206:	f3ef 8611 	mrs	r6, BASEPRI
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800521a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800521e:	f1b8 0f00 	cmp.w	r8, #0
 8005222:	d01d      	beq.n	8005260 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005224:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005228:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800522a:	4649      	mov	r1, r9
 800522c:	4620      	mov	r0, r4
 800522e:	f7ff fcf2 	bl	8004c16 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005232:	f108 33ff 	add.w	r3, r8, #4294967295
 8005236:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005238:	f1b5 3fff 	cmp.w	r5, #4294967295
 800523c:	d005      	beq.n	800524a <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800523e:	1c6b      	adds	r3, r5, #1
 8005240:	b25b      	sxtb	r3, r3
 8005242:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8005246:	2001      	movs	r0, #1
 8005248:	e00b      	b.n	8005262 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	b16b      	cbz	r3, 800526a <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524e:	f104 0010 	add.w	r0, r4, #16
 8005252:	f000 fc59 	bl	8005b08 <xTaskRemoveFromEventList>
 8005256:	b150      	cbz	r0, 800526e <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8005258:	b15f      	cbz	r7, 8005272 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800525a:	2001      	movs	r0, #1
 800525c:	6038      	str	r0, [r7, #0]
 800525e:	e000      	b.n	8005262 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 8005260:	2000      	movs	r0, #0
	__asm volatile
 8005262:	f386 8811 	msr	BASEPRI, r6
}
 8005266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 800526a:	2001      	movs	r0, #1
 800526c:	e7f9      	b.n	8005262 <xQueueReceiveFromISR+0x96>
 800526e:	2001      	movs	r0, #1
 8005270:	e7f7      	b.n	8005262 <xQueueReceiveFromISR+0x96>
 8005272:	2001      	movs	r0, #1
 8005274:	e7f5      	b.n	8005262 <xQueueReceiveFromISR+0x96>

08005276 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8005276:	b940      	cbnz	r0, 800528a <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	e7fe      	b.n	8005288 <uxQueueMessagesWaiting+0x12>
{
 800528a:	b510      	push	{r4, lr}
 800528c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800528e:	f001 f901 	bl	8006494 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005292:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8005294:	f001 f920 	bl	80064d8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005298:	4620      	mov	r0, r4
 800529a:	bd10      	pop	{r4, pc}

0800529c <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 800529c:	b108      	cbz	r0, 80052a2 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800529e:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80052a0:	4770      	bx	lr
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	e7fe      	b.n	80052b2 <uxQueueMessagesWaitingFromISR+0x16>

080052b4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052b4:	2300      	movs	r3, #0
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	d80c      	bhi.n	80052d4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <vQueueAddToRegistry+0x24>)
 80052bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80052c0:	b10a      	cbz	r2, 80052c6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052c2:	3301      	adds	r3, #1
 80052c4:	e7f7      	b.n	80052b6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052c6:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <vQueueAddToRegistry+0x24>)
 80052c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052d0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052d2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20002494 	.word	0x20002494

080052dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	4604      	mov	r4, r0
 80052e0:	460d      	mov	r5, r1
 80052e2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052e4:	f001 f8d6 	bl	8006494 <vPortEnterCritical>
 80052e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d00d      	beq.n	8005310 <vQueueWaitForMessageRestricted+0x34>
 80052f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80052f8:	b25b      	sxtb	r3, r3
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d00b      	beq.n	8005318 <vQueueWaitForMessageRestricted+0x3c>
 8005300:	f001 f8ea 	bl	80064d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005306:	b15b      	cbz	r3, 8005320 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005308:	4620      	mov	r0, r4
 800530a:	f7ff fc96 	bl	8004c3a <prvUnlockQueue>
	}
 800530e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8005310:	2300      	movs	r3, #0
 8005312:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005316:	e7ed      	b.n	80052f4 <vQueueWaitForMessageRestricted+0x18>
 8005318:	2300      	movs	r3, #0
 800531a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800531e:	e7ef      	b.n	8005300 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005320:	4632      	mov	r2, r6
 8005322:	4629      	mov	r1, r5
 8005324:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005328:	f000 fbd2 	bl	8005ad0 <vTaskPlaceOnEventListRestricted>
 800532c:	e7ec      	b.n	8005308 <vQueueWaitForMessageRestricted+0x2c>
	...

08005330 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005330:	4b08      	ldr	r3, [pc, #32]	; (8005354 <prvResetNextTaskUnblockTime+0x24>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	b13b      	cbz	r3, 8005348 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <prvResetNextTaskUnblockTime+0x24>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <prvResetNextTaskUnblockTime+0x28>)
 8005344:	601a      	str	r2, [r3, #0]
	}
}
 8005346:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <prvResetNextTaskUnblockTime+0x28>)
 800534a:	f04f 32ff 	mov.w	r2, #4294967295
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	200006f8 	.word	0x200006f8
 8005358:	20000ba0 	.word	0x20000ba0

0800535c <prvInitialiseNewTask>:
{
 800535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005360:	4681      	mov	r9, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4617      	mov	r7, r2
 8005366:	469a      	mov	sl, r3
 8005368:	9e08      	ldr	r6, [sp, #32]
 800536a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800536e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005370:	0092      	lsls	r2, r2, #2
 8005372:	21a5      	movs	r1, #165	; 0xa5
 8005374:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005376:	f001 fb30 	bl	80069da <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800537a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800537c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8005380:	3a01      	subs	r2, #1
 8005382:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005386:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800538a:	2300      	movs	r3, #0
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d807      	bhi.n	80053a0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005390:	5ce9      	ldrb	r1, [r5, r3]
 8005392:	18e2      	adds	r2, r4, r3
 8005394:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8005398:	5cea      	ldrb	r2, [r5, r3]
 800539a:	b10a      	cbz	r2, 80053a0 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800539c:	3301      	adds	r3, #1
 800539e:	e7f5      	b.n	800538c <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a0:	2300      	movs	r3, #0
 80053a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053a6:	2e37      	cmp	r6, #55	; 0x37
 80053a8:	d900      	bls.n	80053ac <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053aa:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80053ac:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80053ae:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053b0:	2500      	movs	r5, #0
 80053b2:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053b4:	1d20      	adds	r0, r4, #4
 80053b6:	f7ff fb9a 	bl	8004aee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053ba:	f104 0018 	add.w	r0, r4, #24
 80053be:	f7ff fb96 	bl	8004aee <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053c2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c4:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 80053c8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ca:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80053cc:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ce:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053d2:	4652      	mov	r2, sl
 80053d4:	4649      	mov	r1, r9
 80053d6:	4638      	mov	r0, r7
 80053d8:	f001 f830 	bl	800643c <pxPortInitialiseStack>
 80053dc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80053de:	f1b8 0f00 	cmp.w	r8, #0
 80053e2:	d001      	beq.n	80053e8 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053e4:	f8c8 4000 	str.w	r4, [r8]
}
 80053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080053ec <prvInitialiseTaskLists>:
{
 80053ec:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ee:	2400      	movs	r4, #0
 80053f0:	e007      	b.n	8005402 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053f2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80053f6:	0093      	lsls	r3, r2, #2
 80053f8:	480e      	ldr	r0, [pc, #56]	; (8005434 <prvInitialiseTaskLists+0x48>)
 80053fa:	4418      	add	r0, r3
 80053fc:	f7ff fb6c 	bl	8004ad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005400:	3401      	adds	r4, #1
 8005402:	2c37      	cmp	r4, #55	; 0x37
 8005404:	d9f5      	bls.n	80053f2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005406:	4d0c      	ldr	r5, [pc, #48]	; (8005438 <prvInitialiseTaskLists+0x4c>)
 8005408:	4628      	mov	r0, r5
 800540a:	f7ff fb65 	bl	8004ad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800540e:	4c0b      	ldr	r4, [pc, #44]	; (800543c <prvInitialiseTaskLists+0x50>)
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff fb61 	bl	8004ad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005416:	480a      	ldr	r0, [pc, #40]	; (8005440 <prvInitialiseTaskLists+0x54>)
 8005418:	f7ff fb5e 	bl	8004ad8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800541c:	4809      	ldr	r0, [pc, #36]	; (8005444 <prvInitialiseTaskLists+0x58>)
 800541e:	f7ff fb5b 	bl	8004ad8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005422:	4809      	ldr	r0, [pc, #36]	; (8005448 <prvInitialiseTaskLists+0x5c>)
 8005424:	f7ff fb58 	bl	8004ad8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <prvInitialiseTaskLists+0x60>)
 800542a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800542c:	4b08      	ldr	r3, [pc, #32]	; (8005450 <prvInitialiseTaskLists+0x64>)
 800542e:	601c      	str	r4, [r3, #0]
}
 8005430:	bd38      	pop	{r3, r4, r5, pc}
 8005432:	bf00      	nop
 8005434:	20000700 	.word	0x20000700
 8005438:	20000b78 	.word	0x20000b78
 800543c:	20000b8c 	.word	0x20000b8c
 8005440:	20000ba8 	.word	0x20000ba8
 8005444:	20000bd4 	.word	0x20000bd4
 8005448:	20000bc0 	.word	0x20000bc0
 800544c:	200006f8 	.word	0x200006f8
 8005450:	200006fc 	.word	0x200006fc

08005454 <prvAddNewTaskToReadyList>:
{
 8005454:	b510      	push	{r4, lr}
 8005456:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005458:	f001 f81c 	bl	8006494 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800545c:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <prvAddNewTaskToReadyList+0x90>)
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005464:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <prvAddNewTaskToReadyList+0x94>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	b15b      	cbz	r3, 8005482 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800546a:	4b20      	ldr	r3, [pc, #128]	; (80054ec <prvAddNewTaskToReadyList+0x98>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	b96b      	cbnz	r3, 800548c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005470:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <prvAddNewTaskToReadyList+0x94>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005478:	429a      	cmp	r2, r3
 800547a:	d807      	bhi.n	800548c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800547c:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <prvAddNewTaskToReadyList+0x94>)
 800547e:	601c      	str	r4, [r3, #0]
 8005480:	e004      	b.n	800548c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005482:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <prvAddNewTaskToReadyList+0x94>)
 8005484:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d027      	beq.n	80054dc <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <prvAddNewTaskToReadyList+0x9c>)
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	3301      	adds	r3, #1
 8005492:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005494:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005498:	4a16      	ldr	r2, [pc, #88]	; (80054f4 <prvAddNewTaskToReadyList+0xa0>)
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	4293      	cmp	r3, r2
 800549e:	d901      	bls.n	80054a4 <prvAddNewTaskToReadyList+0x50>
 80054a0:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <prvAddNewTaskToReadyList+0xa0>)
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054a8:	009a      	lsls	r2, r3, #2
 80054aa:	1d21      	adds	r1, r4, #4
 80054ac:	4812      	ldr	r0, [pc, #72]	; (80054f8 <prvAddNewTaskToReadyList+0xa4>)
 80054ae:	4410      	add	r0, r2
 80054b0:	f7ff fb20 	bl	8004af4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80054b4:	f001 f810 	bl	80064d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <prvAddNewTaskToReadyList+0x98>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b16b      	cbz	r3, 80054da <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <prvAddNewTaskToReadyList+0x94>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d207      	bcs.n	80054da <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <prvAddNewTaskToReadyList+0xa8>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
}
 80054da:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80054dc:	f7ff ff86 	bl	80053ec <prvInitialiseTaskLists>
 80054e0:	e7d4      	b.n	800548c <prvAddNewTaskToReadyList+0x38>
 80054e2:	bf00      	nop
 80054e4:	20000b60 	.word	0x20000b60
 80054e8:	200006f4 	.word	0x200006f4
 80054ec:	20000bbc 	.word	0x20000bbc
 80054f0:	20000b70 	.word	0x20000b70
 80054f4:	20000b74 	.word	0x20000b74
 80054f8:	20000700 	.word	0x20000700
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <prvDeleteTCB>:
	{
 8005500:	b510      	push	{r4, lr}
 8005502:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005504:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8005508:	b933      	cbnz	r3, 8005518 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800550a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800550c:	f001 f9fe 	bl	800690c <vPortFree>
				vPortFree( pxTCB );
 8005510:	4620      	mov	r0, r4
 8005512:	f001 f9fb 	bl	800690c <vPortFree>
	}
 8005516:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005518:	2b01      	cmp	r3, #1
 800551a:	d00a      	beq.n	8005532 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800551c:	2b02      	cmp	r3, #2
 800551e:	d0fa      	beq.n	8005516 <prvDeleteTCB+0x16>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	e7fe      	b.n	8005530 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8005532:	f001 f9eb 	bl	800690c <vPortFree>
 8005536:	e7ee      	b.n	8005516 <prvDeleteTCB+0x16>

08005538 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005538:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <prvCheckTasksWaitingTermination+0x40>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	b1d3      	cbz	r3, 8005574 <prvCheckTasksWaitingTermination+0x3c>
{
 800553e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005540:	f000 ffa8 	bl	8006494 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005544:	4b0d      	ldr	r3, [pc, #52]	; (800557c <prvCheckTasksWaitingTermination+0x44>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800554a:	1d20      	adds	r0, r4, #4
 800554c:	f7ff faf8 	bl	8004b40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005550:	4a0b      	ldr	r2, [pc, #44]	; (8005580 <prvCheckTasksWaitingTermination+0x48>)
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	3b01      	subs	r3, #1
 8005556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005558:	4a07      	ldr	r2, [pc, #28]	; (8005578 <prvCheckTasksWaitingTermination+0x40>)
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005560:	f000 ffba 	bl	80064d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005564:	4620      	mov	r0, r4
 8005566:	f7ff ffcb 	bl	8005500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800556a:	4b03      	ldr	r3, [pc, #12]	; (8005578 <prvCheckTasksWaitingTermination+0x40>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <prvCheckTasksWaitingTermination+0x8>
}
 8005572:	bd10      	pop	{r4, pc}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000b64 	.word	0x20000b64
 800557c:	20000bd4 	.word	0x20000bd4
 8005580:	20000b60 	.word	0x20000b60

08005584 <prvIdleTask>:
{
 8005584:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005586:	f7ff ffd7 	bl	8005538 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <prvIdleTask+0x20>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d9f9      	bls.n	8005586 <prvIdleTask+0x2>
				taskYIELD();
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <prvIdleTask+0x24>)
 8005594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	e7f0      	b.n	8005586 <prvIdleTask+0x2>
 80055a4:	20000700 	.word	0x20000700
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4604      	mov	r4, r0
 80055b0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055b2:	4b17      	ldr	r3, [pc, #92]	; (8005610 <prvAddCurrentTaskToDelayedList+0x64>)
 80055b4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b6:	4b17      	ldr	r3, [pc, #92]	; (8005614 <prvAddCurrentTaskToDelayedList+0x68>)
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	3004      	adds	r0, #4
 80055bc:	f7ff fac0 	bl	8004b40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80055c4:	d013      	beq.n	80055ee <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <prvAddCurrentTaskToDelayedList+0x68>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80055ce:	42a5      	cmp	r5, r4
 80055d0:	d816      	bhi.n	8005600 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d2:	4b11      	ldr	r3, [pc, #68]	; (8005618 <prvAddCurrentTaskToDelayedList+0x6c>)
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <prvAddCurrentTaskToDelayedList+0x68>)
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	3104      	adds	r1, #4
 80055dc:	f7ff fa96 	bl	8004b0c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <prvAddCurrentTaskToDelayedList+0x70>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d912      	bls.n	800560e <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <prvAddCurrentTaskToDelayedList+0x70>)
 80055ea:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055ec:	e00f      	b.n	800560e <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d0e9      	beq.n	80055c6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <prvAddCurrentTaskToDelayedList+0x68>)
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	3104      	adds	r1, #4
 80055f8:	4809      	ldr	r0, [pc, #36]	; (8005620 <prvAddCurrentTaskToDelayedList+0x74>)
 80055fa:	f7ff fa7b 	bl	8004af4 <vListInsertEnd>
 80055fe:	e006      	b.n	800560e <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005600:	4b08      	ldr	r3, [pc, #32]	; (8005624 <prvAddCurrentTaskToDelayedList+0x78>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <prvAddCurrentTaskToDelayedList+0x68>)
 8005606:	6819      	ldr	r1, [r3, #0]
 8005608:	3104      	adds	r1, #4
 800560a:	f7ff fa7f 	bl	8004b0c <vListInsert>
}
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	20000be8 	.word	0x20000be8
 8005614:	200006f4 	.word	0x200006f4
 8005618:	200006f8 	.word	0x200006f8
 800561c:	20000ba0 	.word	0x20000ba0
 8005620:	20000bc0 	.word	0x20000bc0
 8005624:	200006fc 	.word	0x200006fc

08005628 <xTaskCreateStatic>:
	{
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800562e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005630:	b945      	cbnz	r5, 8005644 <xTaskCreateStatic+0x1c>
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	e7fe      	b.n	8005642 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8005644:	b944      	cbnz	r4, 8005658 <xTaskCreateStatic+0x30>
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	e7fe      	b.n	8005656 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005658:	265c      	movs	r6, #92	; 0x5c
 800565a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800565c:	9e04      	ldr	r6, [sp, #16]
 800565e:	2e5c      	cmp	r6, #92	; 0x5c
 8005660:	d008      	beq.n	8005674 <xTaskCreateStatic+0x4c>
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	e7fe      	b.n	8005672 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005674:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005676:	2502      	movs	r5, #2
 8005678:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800567c:	2500      	movs	r5, #0
 800567e:	9503      	str	r5, [sp, #12]
 8005680:	9402      	str	r4, [sp, #8]
 8005682:	ad05      	add	r5, sp, #20
 8005684:	9501      	str	r5, [sp, #4]
 8005686:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005688:	9500      	str	r5, [sp, #0]
 800568a:	f7ff fe67 	bl	800535c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800568e:	4620      	mov	r0, r4
 8005690:	f7ff fee0 	bl	8005454 <prvAddNewTaskToReadyList>
	}
 8005694:	9805      	ldr	r0, [sp, #20]
 8005696:	b006      	add	sp, #24
 8005698:	bd70      	pop	{r4, r5, r6, pc}

0800569a <xTaskCreate>:
	{
 800569a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800569e:	b085      	sub	sp, #20
 80056a0:	4607      	mov	r7, r0
 80056a2:	4688      	mov	r8, r1
 80056a4:	4615      	mov	r5, r2
 80056a6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a8:	0090      	lsls	r0, r2, #2
 80056aa:	f001 f8ab 	bl	8006804 <pvPortMalloc>
			if( pxStack != NULL )
 80056ae:	b308      	cbz	r0, 80056f4 <xTaskCreate+0x5a>
 80056b0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80056b2:	205c      	movs	r0, #92	; 0x5c
 80056b4:	f001 f8a6 	bl	8006804 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80056b8:	4604      	mov	r4, r0
 80056ba:	b1b8      	cbz	r0, 80056ec <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 80056bc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80056be:	b1e4      	cbz	r4, 80056fa <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056c6:	9303      	str	r3, [sp, #12]
 80056c8:	9402      	str	r4, [sp, #8]
 80056ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	464b      	mov	r3, r9
 80056d4:	462a      	mov	r2, r5
 80056d6:	4641      	mov	r1, r8
 80056d8:	4638      	mov	r0, r7
 80056da:	f7ff fe3f 	bl	800535c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056de:	4620      	mov	r0, r4
 80056e0:	f7ff feb8 	bl	8005454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056e4:	2001      	movs	r0, #1
	}
 80056e6:	b005      	add	sp, #20
 80056e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80056ec:	4630      	mov	r0, r6
 80056ee:	f001 f90d 	bl	800690c <vPortFree>
 80056f2:	e7e4      	b.n	80056be <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	e7f5      	b.n	80056e6 <xTaskCreate+0x4c>
 80056fa:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80056fe:	e7f2      	b.n	80056e6 <xTaskCreate+0x4c>

08005700 <vTaskStartScheduler>:
{
 8005700:	b510      	push	{r4, lr}
 8005702:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005704:	2400      	movs	r4, #0
 8005706:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005708:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800570a:	aa07      	add	r2, sp, #28
 800570c:	a906      	add	r1, sp, #24
 800570e:	a805      	add	r0, sp, #20
 8005710:	f7ff f9ca 	bl	8004aa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005714:	9b05      	ldr	r3, [sp, #20]
 8005716:	9302      	str	r3, [sp, #8]
 8005718:	9b06      	ldr	r3, [sp, #24]
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	9400      	str	r4, [sp, #0]
 800571e:	4623      	mov	r3, r4
 8005720:	9a07      	ldr	r2, [sp, #28]
 8005722:	4917      	ldr	r1, [pc, #92]	; (8005780 <vTaskStartScheduler+0x80>)
 8005724:	4817      	ldr	r0, [pc, #92]	; (8005784 <vTaskStartScheduler+0x84>)
 8005726:	f7ff ff7f 	bl	8005628 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800572a:	b140      	cbz	r0, 800573e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800572c:	f000 fc9a 	bl	8006064 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005730:	2801      	cmp	r0, #1
 8005732:	d006      	beq.n	8005742 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005738:	d018      	beq.n	800576c <vTaskStartScheduler+0x6c>
}
 800573a:	b008      	add	sp, #32
 800573c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800573e:	2000      	movs	r0, #0
 8005740:	e7f6      	b.n	8005730 <vTaskStartScheduler+0x30>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005752:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <vTaskStartScheduler+0x88>)
 8005754:	f04f 32ff 	mov.w	r2, #4294967295
 8005758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <vTaskStartScheduler+0x8c>)
 800575c:	2201      	movs	r2, #1
 800575e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vTaskStartScheduler+0x90>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005766:	f000 ff37 	bl	80065d8 <xPortStartScheduler>
 800576a:	e7e6      	b.n	800573a <vTaskStartScheduler+0x3a>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	e7fe      	b.n	800577c <vTaskStartScheduler+0x7c>
 800577e:	bf00      	nop
 8005780:	08006a74 	.word	0x08006a74
 8005784:	08005585 	.word	0x08005585
 8005788:	20000ba0 	.word	0x20000ba0
 800578c:	20000bbc 	.word	0x20000bbc
 8005790:	20000be8 	.word	0x20000be8

08005794 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005794:	4a02      	ldr	r2, [pc, #8]	; (80057a0 <vTaskSuspendAll+0xc>)
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000b6c 	.word	0x20000b6c

080057a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80057a4:	4b01      	ldr	r3, [pc, #4]	; (80057ac <xTaskGetTickCount+0x8>)
 80057a6:	6818      	ldr	r0, [r3, #0]
}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000be8 	.word	0x20000be8

080057b0 <xTaskIncrementTick>:
{
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b2:	4b3a      	ldr	r3, [pc, #232]	; (800589c <xTaskIncrementTick+0xec>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d164      	bne.n	8005884 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057ba:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <xTaskIncrementTick+0xf0>)
 80057bc:	681d      	ldr	r5, [r3, #0]
 80057be:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80057c0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057c2:	b9c5      	cbnz	r5, 80057f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80057c4:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <xTaskIncrementTick+0xf4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b143      	cbz	r3, 80057de <xTaskIncrementTick+0x2e>
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	e7fe      	b.n	80057dc <xTaskIncrementTick+0x2c>
 80057de:	4a31      	ldr	r2, [pc, #196]	; (80058a4 <xTaskIncrementTick+0xf4>)
 80057e0:	6811      	ldr	r1, [r2, #0]
 80057e2:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <xTaskIncrementTick+0xf8>)
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	6010      	str	r0, [r2, #0]
 80057e8:	6019      	str	r1, [r3, #0]
 80057ea:	4a30      	ldr	r2, [pc, #192]	; (80058ac <xTaskIncrementTick+0xfc>)
 80057ec:	6813      	ldr	r3, [r2, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	f7ff fd9d 	bl	8005330 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057f6:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <xTaskIncrementTick+0x100>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	42ab      	cmp	r3, r5
 80057fc:	d938      	bls.n	8005870 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80057fe:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005800:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <xTaskIncrementTick+0x104>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800580a:	009a      	lsls	r2, r3, #2
 800580c:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <xTaskIncrementTick+0x108>)
 800580e:	589b      	ldr	r3, [r3, r2]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d93c      	bls.n	800588e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8005814:	2401      	movs	r4, #1
 8005816:	e03a      	b.n	800588e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8005818:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <xTaskIncrementTick+0xf4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	b343      	cbz	r3, 8005874 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005822:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <xTaskIncrementTick+0xf4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800582a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800582c:	429d      	cmp	r5, r3
 800582e:	d326      	bcc.n	800587e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005830:	1d37      	adds	r7, r6, #4
 8005832:	4638      	mov	r0, r7
 8005834:	f7ff f984 	bl	8004b40 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005838:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800583a:	b11b      	cbz	r3, 8005844 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800583c:	f106 0018 	add.w	r0, r6, #24
 8005840:	f7ff f97e 	bl	8004b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005844:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005846:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <xTaskIncrementTick+0x10c>)
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <xTaskIncrementTick+0xa2>
 800584e:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <xTaskIncrementTick+0x10c>)
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005856:	009a      	lsls	r2, r3, #2
 8005858:	4639      	mov	r1, r7
 800585a:	4817      	ldr	r0, [pc, #92]	; (80058b8 <xTaskIncrementTick+0x108>)
 800585c:	4410      	add	r0, r2
 800585e:	f7ff f949 	bl	8004af4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005862:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005864:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <xTaskIncrementTick+0x104>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	429a      	cmp	r2, r3
 800586c:	d2d4      	bcs.n	8005818 <xTaskIncrementTick+0x68>
 800586e:	e7d4      	b.n	800581a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8005870:	2400      	movs	r4, #0
 8005872:	e7d2      	b.n	800581a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <xTaskIncrementTick+0x100>)
 8005876:	f04f 32ff 	mov.w	r2, #4294967295
 800587a:	601a      	str	r2, [r3, #0]
					break;
 800587c:	e7c0      	b.n	8005800 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800587e:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <xTaskIncrementTick+0x100>)
 8005880:	6013      	str	r3, [r2, #0]
						break;
 8005882:	e7bd      	b.n	8005800 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8005884:	4a0e      	ldr	r2, [pc, #56]	; (80058c0 <xTaskIncrementTick+0x110>)
 8005886:	6813      	ldr	r3, [r2, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800588c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <xTaskIncrementTick+0x114>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b103      	cbz	r3, 8005896 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8005894:	2401      	movs	r4, #1
}
 8005896:	4620      	mov	r0, r4
 8005898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589a:	bf00      	nop
 800589c:	20000b6c 	.word	0x20000b6c
 80058a0:	20000be8 	.word	0x20000be8
 80058a4:	200006f8 	.word	0x200006f8
 80058a8:	200006fc 	.word	0x200006fc
 80058ac:	20000ba4 	.word	0x20000ba4
 80058b0:	20000ba0 	.word	0x20000ba0
 80058b4:	200006f4 	.word	0x200006f4
 80058b8:	20000700 	.word	0x20000700
 80058bc:	20000b74 	.word	0x20000b74
 80058c0:	20000b68 	.word	0x20000b68
 80058c4:	20000bec 	.word	0x20000bec

080058c8 <xTaskResumeAll>:
{
 80058c8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80058ca:	4b33      	ldr	r3, [pc, #204]	; (8005998 <xTaskResumeAll+0xd0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	b943      	cbnz	r3, 80058e2 <xTaskResumeAll+0x1a>
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	e7fe      	b.n	80058e0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80058e2:	f000 fdd7 	bl	8006494 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80058e6:	4b2c      	ldr	r3, [pc, #176]	; (8005998 <xTaskResumeAll+0xd0>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	3a01      	subs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d14d      	bne.n	8005990 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058f4:	4b29      	ldr	r3, [pc, #164]	; (800599c <xTaskResumeAll+0xd4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	b923      	cbnz	r3, 8005904 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80058fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80058fc:	f000 fdec 	bl	80064d8 <vPortExitCritical>
}
 8005900:	4620      	mov	r0, r4
 8005902:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8005904:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <xTaskResumeAll+0xd8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b31b      	cbz	r3, 8005954 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800590c:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <xTaskResumeAll+0xd8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005912:	f104 0018 	add.w	r0, r4, #24
 8005916:	f7ff f913 	bl	8004b40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800591a:	1d25      	adds	r5, r4, #4
 800591c:	4628      	mov	r0, r5
 800591e:	f7ff f90f 	bl	8004b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005924:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <xTaskResumeAll+0xdc>)
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	4293      	cmp	r3, r2
 800592a:	d901      	bls.n	8005930 <xTaskResumeAll+0x68>
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <xTaskResumeAll+0xdc>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005934:	009a      	lsls	r2, r3, #2
 8005936:	4629      	mov	r1, r5
 8005938:	481b      	ldr	r0, [pc, #108]	; (80059a8 <xTaskResumeAll+0xe0>)
 800593a:	4410      	add	r0, r2
 800593c:	f7ff f8da 	bl	8004af4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005940:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005942:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <xTaskResumeAll+0xe4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d3dc      	bcc.n	8005906 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800594c:	4b18      	ldr	r3, [pc, #96]	; (80059b0 <xTaskResumeAll+0xe8>)
 800594e:	2201      	movs	r2, #1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	e7d8      	b.n	8005906 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8005954:	b10c      	cbz	r4, 800595a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8005956:	f7ff fceb 	bl	8005330 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <xTaskResumeAll+0xec>)
 800595c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800595e:	b154      	cbz	r4, 8005976 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8005960:	f7ff ff26 	bl	80057b0 <xTaskIncrementTick>
 8005964:	b110      	cbz	r0, 800596c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8005966:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <xTaskResumeAll+0xe8>)
 8005968:	2201      	movs	r2, #1
 800596a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800596c:	3c01      	subs	r4, #1
 800596e:	d1f7      	bne.n	8005960 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8005970:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <xTaskResumeAll+0xec>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8005976:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <xTaskResumeAll+0xe8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	b15b      	cbz	r3, 8005994 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <xTaskResumeAll+0xf0>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800598c:	2401      	movs	r4, #1
 800598e:	e7b5      	b.n	80058fc <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8005990:	2400      	movs	r4, #0
 8005992:	e7b3      	b.n	80058fc <xTaskResumeAll+0x34>
 8005994:	2400      	movs	r4, #0
 8005996:	e7b1      	b.n	80058fc <xTaskResumeAll+0x34>
 8005998:	20000b6c 	.word	0x20000b6c
 800599c:	20000b60 	.word	0x20000b60
 80059a0:	20000ba8 	.word	0x20000ba8
 80059a4:	20000b74 	.word	0x20000b74
 80059a8:	20000700 	.word	0x20000700
 80059ac:	200006f4 	.word	0x200006f4
 80059b0:	20000bec 	.word	0x20000bec
 80059b4:	20000b68 	.word	0x20000b68
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <vTaskDelay>:
	{
 80059bc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059be:	b1a8      	cbz	r0, 80059ec <vTaskDelay+0x30>
 80059c0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80059c2:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <vTaskDelay+0x44>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	b143      	cbz	r3, 80059da <vTaskDelay+0x1e>
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	e7fe      	b.n	80059d8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80059da:	f7ff fedb 	bl	8005794 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059de:	2100      	movs	r1, #0
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff fde3 	bl	80055ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80059e6:	f7ff ff6f 	bl	80058c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80059ea:	b938      	cbnz	r0, 80059fc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <vTaskDelay+0x48>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
	}
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	20000b6c 	.word	0x20000b6c
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <vTaskSwitchContext+0x84>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	b11b      	cbz	r3, 8005a16 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <vTaskSwitchContext+0x88>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005a16:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <vTaskSwitchContext+0x88>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <vTaskSwitchContext+0x8c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005a24:	008a      	lsls	r2, r1, #2
 8005a26:	491c      	ldr	r1, [pc, #112]	; (8005a98 <vTaskSwitchContext+0x90>)
 8005a28:	588a      	ldr	r2, [r1, r2]
 8005a2a:	b95a      	cbnz	r2, 8005a44 <vTaskSwitchContext+0x3c>
 8005a2c:	b10b      	cbz	r3, 8005a32 <vTaskSwitchContext+0x2a>
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	e7f6      	b.n	8005a20 <vTaskSwitchContext+0x18>
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	e7fe      	b.n	8005a42 <vTaskSwitchContext+0x3a>
{
 8005a44:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a46:	4608      	mov	r0, r1
 8005a48:	009a      	lsls	r2, r3, #2
 8005a4a:	18d4      	adds	r4, r2, r3
 8005a4c:	00a1      	lsls	r1, r4, #2
 8005a4e:	4401      	add	r1, r0
 8005a50:	684c      	ldr	r4, [r1, #4]
 8005a52:	6864      	ldr	r4, [r4, #4]
 8005a54:	604c      	str	r4, [r1, #4]
 8005a56:	441a      	add	r2, r3
 8005a58:	0091      	lsls	r1, r2, #2
 8005a5a:	3108      	adds	r1, #8
 8005a5c:	4408      	add	r0, r1
 8005a5e:	4284      	cmp	r4, r0
 8005a60:	d00d      	beq.n	8005a7e <vTaskSwitchContext+0x76>
 8005a62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005a66:	0091      	lsls	r1, r2, #2
 8005a68:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <vTaskSwitchContext+0x90>)
 8005a6a:	440a      	add	r2, r1
 8005a6c:	6852      	ldr	r2, [r2, #4]
 8005a6e:	68d1      	ldr	r1, [r2, #12]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <vTaskSwitchContext+0x94>)
 8005a72:	6011      	str	r1, [r2, #0]
 8005a74:	4a07      	ldr	r2, [pc, #28]	; (8005a94 <vTaskSwitchContext+0x8c>)
 8005a76:	6013      	str	r3, [r2, #0]
}
 8005a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a7c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a7e:	6861      	ldr	r1, [r4, #4]
 8005a80:	4805      	ldr	r0, [pc, #20]	; (8005a98 <vTaskSwitchContext+0x90>)
 8005a82:	2214      	movs	r2, #20
 8005a84:	fb02 0203 	mla	r2, r2, r3, r0
 8005a88:	6051      	str	r1, [r2, #4]
 8005a8a:	e7ea      	b.n	8005a62 <vTaskSwitchContext+0x5a>
 8005a8c:	20000b6c 	.word	0x20000b6c
 8005a90:	20000bec 	.word	0x20000bec
 8005a94:	20000b74 	.word	0x20000b74
 8005a98:	20000700 	.word	0x20000700
 8005a9c:	200006f4 	.word	0x200006f4

08005aa0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005aa0:	b940      	cbnz	r0, 8005ab4 <vTaskPlaceOnEventList+0x14>
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	e7fe      	b.n	8005ab2 <vTaskPlaceOnEventList+0x12>
{
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ab8:	4b04      	ldr	r3, [pc, #16]	; (8005acc <vTaskPlaceOnEventList+0x2c>)
 8005aba:	6819      	ldr	r1, [r3, #0]
 8005abc:	3118      	adds	r1, #24
 8005abe:	f7ff f825 	bl	8004b0c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f7ff fd71 	bl	80055ac <prvAddCurrentTaskToDelayedList>
}
 8005aca:	bd10      	pop	{r4, pc}
 8005acc:	200006f4 	.word	0x200006f4

08005ad0 <vTaskPlaceOnEventListRestricted>:
	{
 8005ad0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8005ad2:	b940      	cbnz	r0, 8005ae6 <vTaskPlaceOnEventListRestricted+0x16>
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	e7fe      	b.n	8005ae4 <vTaskPlaceOnEventListRestricted+0x14>
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aea:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <vTaskPlaceOnEventListRestricted+0x34>)
 8005aec:	6811      	ldr	r1, [r2, #0]
 8005aee:	3118      	adds	r1, #24
 8005af0:	f7ff f800 	bl	8004af4 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8005af4:	b10d      	cbz	r5, 8005afa <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8005af6:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005afa:	4629      	mov	r1, r5
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7ff fd55 	bl	80055ac <prvAddCurrentTaskToDelayedList>
	}
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200006f4 	.word	0x200006f4

08005b08 <xTaskRemoveFromEventList>:
{
 8005b08:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b0a:	68c3      	ldr	r3, [r0, #12]
 8005b0c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005b0e:	b944      	cbnz	r4, 8005b22 <xTaskRemoveFromEventList+0x1a>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	e7fe      	b.n	8005b20 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b22:	f104 0518 	add.w	r5, r4, #24
 8005b26:	4628      	mov	r0, r5
 8005b28:	f7ff f80a 	bl	8004b40 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b2c:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <xTaskRemoveFromEventList+0x74>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	b9e3      	cbnz	r3, 8005b6c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b32:	1d25      	adds	r5, r4, #4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f7ff f803 	bl	8004b40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b3c:	4a10      	ldr	r2, [pc, #64]	; (8005b80 <xTaskRemoveFromEventList+0x78>)
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <xTaskRemoveFromEventList+0x40>
 8005b44:	4a0e      	ldr	r2, [pc, #56]	; (8005b80 <xTaskRemoveFromEventList+0x78>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b4c:	009a      	lsls	r2, r3, #2
 8005b4e:	4629      	mov	r1, r5
 8005b50:	480c      	ldr	r0, [pc, #48]	; (8005b84 <xTaskRemoveFromEventList+0x7c>)
 8005b52:	4410      	add	r0, r2
 8005b54:	f7fe ffce 	bl	8004af4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <xTaskRemoveFromEventList+0x80>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d908      	bls.n	8005b76 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005b64:	2001      	movs	r0, #1
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <xTaskRemoveFromEventList+0x84>)
 8005b68:	6018      	str	r0, [r3, #0]
}
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	4808      	ldr	r0, [pc, #32]	; (8005b90 <xTaskRemoveFromEventList+0x88>)
 8005b70:	f7fe ffc0 	bl	8004af4 <vListInsertEnd>
 8005b74:	e7f0      	b.n	8005b58 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8005b76:	2000      	movs	r0, #0
	return xReturn;
 8005b78:	e7f7      	b.n	8005b6a <xTaskRemoveFromEventList+0x62>
 8005b7a:	bf00      	nop
 8005b7c:	20000b6c 	.word	0x20000b6c
 8005b80:	20000b74 	.word	0x20000b74
 8005b84:	20000700 	.word	0x20000700
 8005b88:	200006f4 	.word	0x200006f4
 8005b8c:	20000bec 	.word	0x20000bec
 8005b90:	20000ba8 	.word	0x20000ba8

08005b94 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b94:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <vTaskInternalSetTimeOutState+0x10>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b9a:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <vTaskInternalSetTimeOutState+0x14>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6043      	str	r3, [r0, #4]
}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000ba4 	.word	0x20000ba4
 8005ba8:	20000be8 	.word	0x20000be8

08005bac <xTaskCheckForTimeOut>:
{
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005bae:	b150      	cbz	r0, 8005bc6 <xTaskCheckForTimeOut+0x1a>
 8005bb0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005bb2:	b989      	cbnz	r1, 8005bd8 <xTaskCheckForTimeOut+0x2c>
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	e7fe      	b.n	8005bc4 <xTaskCheckForTimeOut+0x18>
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	e7fe      	b.n	8005bd6 <xTaskCheckForTimeOut+0x2a>
 8005bd8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8005bda:	f000 fc5b 	bl	8006494 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <xTaskCheckForTimeOut+0x78>)
 8005be0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005be2:	6868      	ldr	r0, [r5, #4]
 8005be4:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d016      	beq.n	8005c1c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bee:	682f      	ldr	r7, [r5, #0]
 8005bf0:	4e0d      	ldr	r6, [pc, #52]	; (8005c28 <xTaskCheckForTimeOut+0x7c>)
 8005bf2:	6836      	ldr	r6, [r6, #0]
 8005bf4:	42b7      	cmp	r7, r6
 8005bf6:	d001      	beq.n	8005bfc <xTaskCheckForTimeOut+0x50>
 8005bf8:	4288      	cmp	r0, r1
 8005bfa:	d911      	bls.n	8005c20 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d803      	bhi.n	8005c08 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005c04:	2401      	movs	r4, #1
 8005c06:	e005      	b.n	8005c14 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8005c08:	1a9b      	subs	r3, r3, r2
 8005c0a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f7ff ffc1 	bl	8005b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c12:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005c14:	f000 fc60 	bl	80064d8 <vPortExitCritical>
}
 8005c18:	4620      	mov	r0, r4
 8005c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8005c1c:	2400      	movs	r4, #0
 8005c1e:	e7f9      	b.n	8005c14 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8005c20:	2401      	movs	r4, #1
 8005c22:	e7f7      	b.n	8005c14 <xTaskCheckForTimeOut+0x68>
 8005c24:	20000be8 	.word	0x20000be8
 8005c28:	20000ba4 	.word	0x20000ba4

08005c2c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005c2c:	4b01      	ldr	r3, [pc, #4]	; (8005c34 <vTaskMissedYield+0x8>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	4770      	bx	lr
 8005c34:	20000bec 	.word	0x20000bec

08005c38 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005c38:	4b01      	ldr	r3, [pc, #4]	; (8005c40 <xTaskGetCurrentTaskHandle+0x8>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
	}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	200006f4 	.word	0x200006f4

08005c44 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <xTaskGetSchedulerState+0x18>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	b133      	cbz	r3, 8005c58 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <xTaskGetSchedulerState+0x1c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	b10b      	cbz	r3, 8005c54 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c50:	2000      	movs	r0, #0
	}
 8005c52:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8005c54:	2002      	movs	r0, #2
 8005c56:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c58:	2001      	movs	r0, #1
 8005c5a:	4770      	bx	lr
 8005c5c:	20000bbc 	.word	0x20000bbc
 8005c60:	20000b6c 	.word	0x20000b6c

08005c64 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d038      	beq.n	8005cda <xTaskPriorityDisinherit+0x76>
	{
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <xTaskPriorityDisinherit+0x84>)
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	4282      	cmp	r2, r0
 8005c72:	d008      	beq.n	8005c86 <xTaskPriorityDisinherit+0x22>
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	e7fe      	b.n	8005c84 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c86:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005c88:	b942      	cbnz	r2, 8005c9c <xTaskPriorityDisinherit+0x38>
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	e7fe      	b.n	8005c9a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005c9c:	3a01      	subs	r2, #1
 8005c9e:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ca0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005ca2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005ca4:	4288      	cmp	r0, r1
 8005ca6:	d01a      	beq.n	8005cde <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ca8:	b9da      	cbnz	r2, 8005ce2 <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005caa:	1d25      	adds	r5, r4, #4
 8005cac:	4628      	mov	r0, r5
 8005cae:	f7fe ff47 	bl	8004b40 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cb2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cbc:	4a0b      	ldr	r2, [pc, #44]	; (8005cec <xTaskPriorityDisinherit+0x88>)
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <xTaskPriorityDisinherit+0x64>
 8005cc4:	4a09      	ldr	r2, [pc, #36]	; (8005cec <xTaskPriorityDisinherit+0x88>)
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <xTaskPriorityDisinherit+0x8c>)
 8005ccc:	2014      	movs	r0, #20
 8005cce:	fb00 2003 	mla	r0, r0, r3, r2
 8005cd2:	f7fe ff0f 	bl	8004af4 <vListInsertEnd>
					xReturn = pdTRUE;
 8005cd6:	2001      	movs	r0, #1
	}
 8005cd8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8005cda:	2000      	movs	r0, #0
	}
 8005cdc:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e7fa      	b.n	8005cd8 <xTaskPriorityDisinherit+0x74>
 8005ce2:	2000      	movs	r0, #0
		return xReturn;
 8005ce4:	e7f8      	b.n	8005cd8 <xTaskPriorityDisinherit+0x74>
 8005ce6:	bf00      	nop
 8005ce8:	200006f4 	.word	0x200006f4
 8005cec:	20000b74 	.word	0x20000b74
 8005cf0:	20000700 	.word	0x20000700

08005cf4 <xTaskNotifyWait>:
	{
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	460d      	mov	r5, r1
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8005cfe:	f000 fbc9 	bl	8006494 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d02:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <xTaskNotifyWait+0x90>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d00a      	beq.n	8005d26 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005d10:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <xTaskNotifyWait+0x90>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8005d16:	ea20 0007 	bic.w	r0, r0, r7
 8005d1a:	6550      	str	r0, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8005d24:	b9ce      	cbnz	r6, 8005d5a <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8005d26:	f000 fbd7 	bl	80064d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005d2a:	f000 fbb3 	bl	8006494 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8005d2e:	b11c      	cbz	r4, 8005d38 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005d30:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <xTaskNotifyWait+0x90>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <xTaskNotifyWait+0x90>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d016      	beq.n	8005d74 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 8005d46:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d48:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <xTaskNotifyWait+0x90>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8005d52:	f000 fbc1 	bl	80064d8 <vPortExitCritical>
	}
 8005d56:	4620      	mov	r0, r4
 8005d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f7ff fc25 	bl	80055ac <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <xTaskNotifyWait+0x94>)
 8005d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	e7d8      	b.n	8005d26 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005d74:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <xTaskNotifyWait+0x90>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005d7a:	ea23 0505 	bic.w	r5, r3, r5
 8005d7e:	6555      	str	r5, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8005d80:	2401      	movs	r4, #1
 8005d82:	e7e1      	b.n	8005d48 <xTaskNotifyWait+0x54>
 8005d84:	200006f4 	.word	0x200006f4
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <xTaskGenericNotify>:
	{
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8005d8e:	b940      	cbnz	r0, 8005da2 <xTaskGenericNotify+0x16>
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	e7fe      	b.n	8005da0 <xTaskGenericNotify+0x14>
 8005da2:	4604      	mov	r4, r0
 8005da4:	461f      	mov	r7, r3
 8005da6:	4615      	mov	r5, r2
 8005da8:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 8005daa:	f000 fb73 	bl	8006494 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8005dae:	b10f      	cbz	r7, 8005db4 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005db0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005db2:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005db4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005db8:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8005dc0:	1e6a      	subs	r2, r5, #1
 8005dc2:	2a03      	cmp	r2, #3
 8005dc4:	d81a      	bhi.n	8005dfc <xTaskGenericNotify+0x70>
 8005dc6:	e8df f002 	tbb	[pc, r2]
 8005dca:	0c02      	.short	0x0c02
 8005dcc:	1411      	.short	0x1411
					pxTCB->ulNotifiedValue |= ulValue;
 8005dce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005dd0:	4316      	orrs	r6, r2
 8005dd2:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005dd4:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d014      	beq.n	8005e04 <xTaskGenericNotify+0x78>
		taskEXIT_CRITICAL();
 8005dda:	f000 fb7d 	bl	80064d8 <vPortExitCritical>
	}
 8005dde:	4628      	mov	r0, r5
 8005de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8005de2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005de4:	3201      	adds	r2, #1
 8005de6:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005de8:	2501      	movs	r5, #1
					break;
 8005dea:	e7f4      	b.n	8005dd6 <xTaskGenericNotify+0x4a>
					pxTCB->ulNotifiedValue = ulValue;
 8005dec:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005dee:	2501      	movs	r5, #1
					break;
 8005df0:	e7f1      	b.n	8005dd6 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d004      	beq.n	8005e00 <xTaskGenericNotify+0x74>
						pxTCB->ulNotifiedValue = ulValue;
 8005df6:	6566      	str	r6, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005df8:	2501      	movs	r5, #1
 8005dfa:	e7ec      	b.n	8005dd6 <xTaskGenericNotify+0x4a>
 8005dfc:	2501      	movs	r5, #1
 8005dfe:	e7ea      	b.n	8005dd6 <xTaskGenericNotify+0x4a>
						xReturn = pdFAIL;
 8005e00:	2500      	movs	r5, #0
 8005e02:	e7e8      	b.n	8005dd6 <xTaskGenericNotify+0x4a>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e04:	1d26      	adds	r6, r4, #4
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7fe fe9a 	bl	8004b40 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <xTaskGenericNotify+0xd0>)
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <xTaskGenericNotify+0x8e>
 8005e16:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <xTaskGenericNotify+0xd0>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <xTaskGenericNotify+0xd4>)
 8005e1e:	2014      	movs	r0, #20
 8005e20:	fb00 2003 	mla	r0, r0, r3, r2
 8005e24:	f7fe fe66 	bl	8004af4 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e2a:	b143      	cbz	r3, 8005e3e <xTaskGenericNotify+0xb2>
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	e7fe      	b.n	8005e3c <xTaskGenericNotify+0xb0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e40:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <xTaskGenericNotify+0xd8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d9c7      	bls.n	8005dda <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8005e4a:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <xTaskGenericNotify+0xdc>)
 8005e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	e7be      	b.n	8005dda <xTaskGenericNotify+0x4e>
 8005e5c:	20000b74 	.word	0x20000b74
 8005e60:	20000700 	.word	0x20000700
 8005e64:	200006f4 	.word	0x200006f4
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <xTaskGenericNotifyFromISR>:
	{
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e70:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 8005e72:	b940      	cbnz	r0, 8005e86 <xTaskGenericNotifyFromISR+0x1a>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	e7fe      	b.n	8005e84 <xTaskGenericNotifyFromISR+0x18>
 8005e86:	4604      	mov	r4, r0
 8005e88:	4699      	mov	r9, r3
 8005e8a:	4615      	mov	r5, r2
 8005e8c:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e8e:	f000 fc2b 	bl	80066e8 <vPortValidateInterruptPriority>
	__asm volatile
 8005e92:	f3ef 8711 	mrs	r7, BASEPRI
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8005ea6:	f1b9 0f00 	cmp.w	r9, #0
 8005eaa:	d002      	beq.n	8005eb2 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005eac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005eae:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005eb2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005eb6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
			switch( eAction )
 8005ebe:	1e6a      	subs	r2, r5, #1
 8005ec0:	2a03      	cmp	r2, #3
 8005ec2:	d81e      	bhi.n	8005f02 <xTaskGenericNotifyFromISR+0x96>
 8005ec4:	e8df f002 	tbb	[pc, r2]
 8005ec8:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
 8005ecc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005ece:	ea42 0208 	orr.w	r2, r2, r8
 8005ed2:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005ed4:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d017      	beq.n	8005f0a <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 8005eda:	f387 8811 	msr	BASEPRI, r7
	}
 8005ede:	4628      	mov	r0, r5
 8005ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8005ee4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005ee6:	3201      	adds	r2, #1
 8005ee8:	6562      	str	r2, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005eea:	2501      	movs	r5, #1
					break;
 8005eec:	e7f3      	b.n	8005ed6 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8005eee:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005ef2:	2501      	movs	r5, #1
					break;
 8005ef4:	e7ef      	b.n	8005ed6 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d005      	beq.n	8005f06 <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 8005efa:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8005efe:	2501      	movs	r5, #1
 8005f00:	e7e9      	b.n	8005ed6 <xTaskGenericNotifyFromISR+0x6a>
 8005f02:	2501      	movs	r5, #1
 8005f04:	e7e7      	b.n	8005ed6 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8005f06:	2500      	movs	r5, #0
 8005f08:	e7e5      	b.n	8005ed6 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f0c:	b143      	cbz	r3, 8005f20 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	e7fe      	b.n	8005f1e <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f20:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <xTaskGenericNotifyFromISR+0x108>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b9e3      	cbnz	r3, 8005f60 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f26:	f104 0804 	add.w	r8, r4, #4
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f7fe fe08 	bl	8004b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f32:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <xTaskGenericNotifyFromISR+0x10c>)
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <xTaskGenericNotifyFromISR+0xd2>
 8005f3a:	4a0f      	ldr	r2, [pc, #60]	; (8005f78 <xTaskGenericNotifyFromISR+0x10c>)
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	4641      	mov	r1, r8
 8005f40:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <xTaskGenericNotifyFromISR+0x110>)
 8005f42:	2014      	movs	r0, #20
 8005f44:	fb00 2003 	mla	r0, r0, r3, r2
 8005f48:	f7fe fdd4 	bl	8004af4 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f4e:	4b0c      	ldr	r3, [pc, #48]	; (8005f80 <xTaskGenericNotifyFromISR+0x114>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d9c0      	bls.n	8005eda <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8005f58:	b146      	cbz	r6, 8005f6c <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	e7bc      	b.n	8005eda <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005f60:	f104 0118 	add.w	r1, r4, #24
 8005f64:	4807      	ldr	r0, [pc, #28]	; (8005f84 <xTaskGenericNotifyFromISR+0x118>)
 8005f66:	f7fe fdc5 	bl	8004af4 <vListInsertEnd>
 8005f6a:	e7ef      	b.n	8005f4c <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <xTaskGenericNotifyFromISR+0x11c>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e7b2      	b.n	8005eda <xTaskGenericNotifyFromISR+0x6e>
 8005f74:	20000b6c 	.word	0x20000b6c
 8005f78:	20000b74 	.word	0x20000b74
 8005f7c:	20000700 	.word	0x20000700
 8005f80:	200006f4 	.word	0x200006f4
 8005f84:	20000ba8 	.word	0x20000ba8
 8005f88:	20000bec 	.word	0x20000bec

08005f8c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <prvGetNextExpireTime+0x1c>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	6813      	ldr	r3, [r2, #0]
 8005f92:	fab3 f383 	clz	r3, r3
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f9a:	b913      	cbnz	r3, 8005fa2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f9c:	68d3      	ldr	r3, [r2, #12]
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fa2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000bf0 	.word	0x20000bf0

08005fac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fac:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fae:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fb0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	d80c      	bhi.n	8005fd0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	6983      	ldr	r3, [r0, #24]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d301      	bcc.n	8005fc2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	e010      	b.n	8005fe4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fc2:	1d01      	adds	r1, r0, #4
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <prvInsertTimerInActiveList+0x40>)
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	f7fe fda0 	bl	8004b0c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e009      	b.n	8005fe4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d201      	bcs.n	8005fd8 <prvInsertTimerInActiveList+0x2c>
 8005fd4:	4299      	cmp	r1, r3
 8005fd6:	d206      	bcs.n	8005fe6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fd8:	1d01      	adds	r1, r0, #4
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <prvInsertTimerInActiveList+0x44>)
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	f7fe fd95 	bl	8004b0c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005fe2:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8005fe4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8005fe6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005fe8:	e7fc      	b.n	8005fe4 <prvInsertTimerInActiveList+0x38>
 8005fea:	bf00      	nop
 8005fec:	20000bf4 	.word	0x20000bf4
 8005ff0:	20000bf0 	.word	0x20000bf0

08005ff4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ff4:	b530      	push	{r4, r5, lr}
 8005ff6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ff8:	f000 fa4c 	bl	8006494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <prvCheckForValidListAndQueue+0x50>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	b11b      	cbz	r3, 800600a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006002:	f000 fa69 	bl	80064d8 <vPortExitCritical>
}
 8006006:	b003      	add	sp, #12
 8006008:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800600a:	4d0f      	ldr	r5, [pc, #60]	; (8006048 <prvCheckForValidListAndQueue+0x54>)
 800600c:	4628      	mov	r0, r5
 800600e:	f7fe fd63 	bl	8004ad8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006012:	4c0e      	ldr	r4, [pc, #56]	; (800604c <prvCheckForValidListAndQueue+0x58>)
 8006014:	4620      	mov	r0, r4
 8006016:	f7fe fd5f 	bl	8004ad8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <prvCheckForValidListAndQueue+0x5c>)
 800601c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <prvCheckForValidListAndQueue+0x60>)
 8006020:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006022:	2300      	movs	r3, #0
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <prvCheckForValidListAndQueue+0x64>)
 8006028:	4a0c      	ldr	r2, [pc, #48]	; (800605c <prvCheckForValidListAndQueue+0x68>)
 800602a:	2110      	movs	r1, #16
 800602c:	200a      	movs	r0, #10
 800602e:	f7fe fe8e 	bl	8004d4e <xQueueGenericCreateStatic>
 8006032:	4b04      	ldr	r3, [pc, #16]	; (8006044 <prvCheckForValidListAndQueue+0x50>)
 8006034:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006036:	2800      	cmp	r0, #0
 8006038:	d0e3      	beq.n	8006002 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800603a:	4909      	ldr	r1, [pc, #36]	; (8006060 <prvCheckForValidListAndQueue+0x6c>)
 800603c:	f7ff f93a 	bl	80052b4 <vQueueAddToRegistry>
 8006040:	e7df      	b.n	8006002 <prvCheckForValidListAndQueue+0xe>
 8006042:	bf00      	nop
 8006044:	20000d14 	.word	0x20000d14
 8006048:	20000c98 	.word	0x20000c98
 800604c:	20000cac 	.word	0x20000cac
 8006050:	20000bf0 	.word	0x20000bf0
 8006054:	20000bf4 	.word	0x20000bf4
 8006058:	20000cc4 	.word	0x20000cc4
 800605c:	20000bf8 	.word	0x20000bf8
 8006060:	08006a7c 	.word	0x08006a7c

08006064 <xTimerCreateTimerTask>:
{
 8006064:	b510      	push	{r4, lr}
 8006066:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006068:	f7ff ffc4 	bl	8005ff4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800606c:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <xTimerCreateTimerTask+0x54>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	b1cb      	cbz	r3, 80060a6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006072:	2400      	movs	r4, #0
 8006074:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006076:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006078:	aa07      	add	r2, sp, #28
 800607a:	a906      	add	r1, sp, #24
 800607c:	a805      	add	r0, sp, #20
 800607e:	f7fe fd1f 	bl	8004ac0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	9302      	str	r3, [sp, #8]
 8006086:	9b06      	ldr	r3, [sp, #24]
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	2302      	movs	r3, #2
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4623      	mov	r3, r4
 8006090:	9a07      	ldr	r2, [sp, #28]
 8006092:	490a      	ldr	r1, [pc, #40]	; (80060bc <xTimerCreateTimerTask+0x58>)
 8006094:	480a      	ldr	r0, [pc, #40]	; (80060c0 <xTimerCreateTimerTask+0x5c>)
 8006096:	f7ff fac7 	bl	8005628 <xTaskCreateStatic>
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <xTimerCreateTimerTask+0x60>)
 800609c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800609e:	b110      	cbz	r0, 80060a6 <xTimerCreateTimerTask+0x42>
}
 80060a0:	2001      	movs	r0, #1
 80060a2:	b008      	add	sp, #32
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	e7fe      	b.n	80060b6 <xTimerCreateTimerTask+0x52>
 80060b8:	20000d14 	.word	0x20000d14
 80060bc:	08006a84 	.word	0x08006a84
 80060c0:	080063a9 	.word	0x080063a9
 80060c4:	20000d18 	.word	0x20000d18

080060c8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80060c8:	b1c8      	cbz	r0, 80060fe <xTimerGenericCommand+0x36>
{
 80060ca:	b530      	push	{r4, r5, lr}
 80060cc:	b085      	sub	sp, #20
 80060ce:	4615      	mov	r5, r2
 80060d0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 80060d2:	4a17      	ldr	r2, [pc, #92]	; (8006130 <xTimerGenericCommand+0x68>)
 80060d4:	6810      	ldr	r0, [r2, #0]
 80060d6:	b340      	cbz	r0, 800612a <xTimerGenericCommand+0x62>
 80060d8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 80060da:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060dc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80060de:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060e0:	2905      	cmp	r1, #5
 80060e2:	dc1d      	bgt.n	8006120 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060e4:	f7ff fdae 	bl	8005c44 <xTaskGetSchedulerState>
 80060e8:	2802      	cmp	r0, #2
 80060ea:	d011      	beq.n	8006110 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060ec:	2300      	movs	r3, #0
 80060ee:	461a      	mov	r2, r3
 80060f0:	4669      	mov	r1, sp
 80060f2:	480f      	ldr	r0, [pc, #60]	; (8006130 <xTimerGenericCommand+0x68>)
 80060f4:	6800      	ldr	r0, [r0, #0]
 80060f6:	f7fe fe99 	bl	8004e2c <xQueueGenericSend>
}
 80060fa:	b005      	add	sp, #20
 80060fc:	bd30      	pop	{r4, r5, pc}
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	e7fe      	b.n	800610e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006110:	2300      	movs	r3, #0
 8006112:	9a08      	ldr	r2, [sp, #32]
 8006114:	4669      	mov	r1, sp
 8006116:	4806      	ldr	r0, [pc, #24]	; (8006130 <xTimerGenericCommand+0x68>)
 8006118:	6800      	ldr	r0, [r0, #0]
 800611a:	f7fe fe87 	bl	8004e2c <xQueueGenericSend>
 800611e:	e7ec      	b.n	80060fa <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006120:	2300      	movs	r3, #0
 8006122:	4669      	mov	r1, sp
 8006124:	f7fe ff40 	bl	8004fa8 <xQueueGenericSendFromISR>
 8006128:	e7e7      	b.n	80060fa <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800612a:	2000      	movs	r0, #0
	return xReturn;
 800612c:	e7e5      	b.n	80060fa <xTimerGenericCommand+0x32>
 800612e:	bf00      	nop
 8006130:	20000d14 	.word	0x20000d14

08006134 <prvSwitchTimerLists>:
{
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <prvSwitchTimerLists+0x70>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	b352      	cbz	r2, 8006196 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006144:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006146:	1d25      	adds	r5, r4, #4
 8006148:	4628      	mov	r0, r5
 800614a:	f7fe fcf9 	bl	8004b40 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800614e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006150:	4620      	mov	r0, r4
 8006152:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006154:	69e3      	ldr	r3, [r4, #28]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d1ee      	bne.n	8006138 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800615a:	69a3      	ldr	r3, [r4, #24]
 800615c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800615e:	429e      	cmp	r6, r3
 8006160:	d207      	bcs.n	8006172 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006162:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006164:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006166:	4629      	mov	r1, r5
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <prvSwitchTimerLists+0x70>)
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	f7fe fcce 	bl	8004b0c <vListInsert>
 8006170:	e7e2      	b.n	8006138 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006172:	2100      	movs	r1, #0
 8006174:	9100      	str	r1, [sp, #0]
 8006176:	460b      	mov	r3, r1
 8006178:	4632      	mov	r2, r6
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff ffa4 	bl	80060c8 <xTimerGenericCommand>
				configASSERT( xResult );
 8006180:	2800      	cmp	r0, #0
 8006182:	d1d9      	bne.n	8006138 <prvSwitchTimerLists+0x4>
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	e7fe      	b.n	8006194 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8006196:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <prvSwitchTimerLists+0x74>)
 8006198:	6810      	ldr	r0, [r2, #0]
 800619a:	4902      	ldr	r1, [pc, #8]	; (80061a4 <prvSwitchTimerLists+0x70>)
 800619c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800619e:	6013      	str	r3, [r2, #0]
}
 80061a0:	b002      	add	sp, #8
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	20000bf0 	.word	0x20000bf0
 80061a8:	20000bf4 	.word	0x20000bf4

080061ac <prvSampleTimeNow>:
{
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80061b0:	f7ff faf8 	bl	80057a4 <xTaskGetTickCount>
 80061b4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <prvSampleTimeNow+0x28>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4283      	cmp	r3, r0
 80061bc:	d805      	bhi.n	80061ca <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80061c2:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <prvSampleTimeNow+0x28>)
 80061c4:	601c      	str	r4, [r3, #0]
}
 80061c6:	4620      	mov	r0, r4
 80061c8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80061ca:	f7ff ffb3 	bl	8006134 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061ce:	2301      	movs	r3, #1
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	e7f6      	b.n	80061c2 <prvSampleTimeNow+0x16>
 80061d4:	20000cc0 	.word	0x20000cc0

080061d8 <prvProcessExpiredTimer>:
{
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	4605      	mov	r5, r0
 80061de:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061e0:	4b14      	ldr	r3, [pc, #80]	; (8006234 <prvProcessExpiredTimer+0x5c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e8:	1d20      	adds	r0, r4, #4
 80061ea:	f7fe fca9 	bl	8004b40 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061ee:	69e3      	ldr	r3, [r4, #28]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d004      	beq.n	80061fe <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061f6:	4620      	mov	r0, r4
 80061f8:	4798      	blx	r3
}
 80061fa:	b002      	add	sp, #8
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061fe:	69a1      	ldr	r1, [r4, #24]
 8006200:	462b      	mov	r3, r5
 8006202:	4632      	mov	r2, r6
 8006204:	4429      	add	r1, r5
 8006206:	4620      	mov	r0, r4
 8006208:	f7ff fed0 	bl	8005fac <prvInsertTimerInActiveList>
 800620c:	2800      	cmp	r0, #0
 800620e:	d0f1      	beq.n	80061f4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006210:	2100      	movs	r1, #0
 8006212:	9100      	str	r1, [sp, #0]
 8006214:	460b      	mov	r3, r1
 8006216:	462a      	mov	r2, r5
 8006218:	4620      	mov	r0, r4
 800621a:	f7ff ff55 	bl	80060c8 <xTimerGenericCommand>
			configASSERT( xResult );
 800621e:	2800      	cmp	r0, #0
 8006220:	d1e8      	bne.n	80061f4 <prvProcessExpiredTimer+0x1c>
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	e7fe      	b.n	8006232 <prvProcessExpiredTimer+0x5a>
 8006234:	20000bf0 	.word	0x20000bf0

08006238 <prvProcessTimerOrBlockTask>:
{
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	4606      	mov	r6, r0
 800623e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8006240:	f7ff faa8 	bl	8005794 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006244:	a801      	add	r0, sp, #4
 8006246:	f7ff ffb1 	bl	80061ac <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	bb1b      	cbnz	r3, 8006296 <prvProcessTimerOrBlockTask+0x5e>
 800624e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006250:	b90c      	cbnz	r4, 8006256 <prvProcessTimerOrBlockTask+0x1e>
 8006252:	42b0      	cmp	r0, r6
 8006254:	d218      	bcs.n	8006288 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 8006256:	b12c      	cbz	r4, 8006264 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006258:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <prvProcessTimerOrBlockTask+0x68>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681c      	ldr	r4, [r3, #0]
 800625e:	fab4 f484 	clz	r4, r4
 8006262:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006264:	4622      	mov	r2, r4
 8006266:	1b71      	subs	r1, r6, r5
 8006268:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <prvProcessTimerOrBlockTask+0x6c>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	f7ff f836 	bl	80052dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006270:	f7ff fb2a 	bl	80058c8 <xTaskResumeAll>
 8006274:	b988      	cbnz	r0, 800629a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvProcessTimerOrBlockTask+0x70>)
 8006278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	e008      	b.n	800629a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 8006288:	f7ff fb1e 	bl	80058c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800628c:	4629      	mov	r1, r5
 800628e:	4630      	mov	r0, r6
 8006290:	f7ff ffa2 	bl	80061d8 <prvProcessExpiredTimer>
 8006294:	e001      	b.n	800629a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 8006296:	f7ff fb17 	bl	80058c8 <xTaskResumeAll>
}
 800629a:	b002      	add	sp, #8
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	bf00      	nop
 80062a0:	20000bf4 	.word	0x20000bf4
 80062a4:	20000d14 	.word	0x20000d14
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <prvProcessReceivedCommands>:
{
 80062ac:	b530      	push	{r4, r5, lr}
 80062ae:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062b0:	e002      	b.n	80062b8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062b2:	9b04      	ldr	r3, [sp, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	da0f      	bge.n	80062d8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062b8:	2200      	movs	r2, #0
 80062ba:	a904      	add	r1, sp, #16
 80062bc:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <prvProcessReceivedCommands+0xf8>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	f7fe fed8 	bl	8005074 <xQueueReceive>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d06a      	beq.n	800639e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062c8:	9b04      	ldr	r3, [sp, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	daf1      	bge.n	80062b2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062ce:	9907      	ldr	r1, [sp, #28]
 80062d0:	9806      	ldr	r0, [sp, #24]
 80062d2:	9b05      	ldr	r3, [sp, #20]
 80062d4:	4798      	blx	r3
 80062d6:	e7ec      	b.n	80062b2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062d8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062da:	6963      	ldr	r3, [r4, #20]
 80062dc:	b113      	cbz	r3, 80062e4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062de:	1d20      	adds	r0, r4, #4
 80062e0:	f7fe fc2e 	bl	8004b40 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062e4:	a803      	add	r0, sp, #12
 80062e6:	f7ff ff61 	bl	80061ac <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	2b09      	cmp	r3, #9
 80062ee:	d8e3      	bhi.n	80062b8 <prvProcessReceivedCommands+0xc>
 80062f0:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <prvProcessReceivedCommands+0x4c>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006321 	.word	0x08006321
 8006304:	080062b9 	.word	0x080062b9
 8006308:	08006369 	.word	0x08006369
 800630c:	0800638f 	.word	0x0800638f
 8006310:	08006321 	.word	0x08006321
 8006314:	08006321 	.word	0x08006321
 8006318:	080062b9 	.word	0x080062b9
 800631c:	08006369 	.word	0x08006369
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006320:	9905      	ldr	r1, [sp, #20]
 8006322:	69a5      	ldr	r5, [r4, #24]
 8006324:	460b      	mov	r3, r1
 8006326:	4602      	mov	r2, r0
 8006328:	4429      	add	r1, r5
 800632a:	4620      	mov	r0, r4
 800632c:	f7ff fe3e 	bl	8005fac <prvInsertTimerInActiveList>
 8006330:	2800      	cmp	r0, #0
 8006332:	d0c1      	beq.n	80062b8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006336:	4620      	mov	r0, r4
 8006338:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800633a:	69e3      	ldr	r3, [r4, #28]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d1bb      	bne.n	80062b8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006340:	69a2      	ldr	r2, [r4, #24]
 8006342:	2100      	movs	r1, #0
 8006344:	9100      	str	r1, [sp, #0]
 8006346:	460b      	mov	r3, r1
 8006348:	9805      	ldr	r0, [sp, #20]
 800634a:	4402      	add	r2, r0
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff febb 	bl	80060c8 <xTimerGenericCommand>
							configASSERT( xResult );
 8006352:	2800      	cmp	r0, #0
 8006354:	d1b0      	bne.n	80062b8 <prvProcessReceivedCommands+0xc>
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	e7fe      	b.n	8006366 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006368:	9905      	ldr	r1, [sp, #20]
 800636a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800636c:	b131      	cbz	r1, 800637c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800636e:	4603      	mov	r3, r0
 8006370:	4602      	mov	r2, r0
 8006372:	4401      	add	r1, r0
 8006374:	4620      	mov	r0, r4
 8006376:	f7ff fe19 	bl	8005fac <prvInsertTimerInActiveList>
					break;
 800637a:	e79d      	b.n	80062b8 <prvProcessReceivedCommands+0xc>
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	e7fe      	b.n	800638c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800638e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d190      	bne.n	80062b8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8006396:	4620      	mov	r0, r4
 8006398:	f000 fab8 	bl	800690c <vPortFree>
 800639c:	e78c      	b.n	80062b8 <prvProcessReceivedCommands+0xc>
}
 800639e:	b009      	add	sp, #36	; 0x24
 80063a0:	bd30      	pop	{r4, r5, pc}
 80063a2:	bf00      	nop
 80063a4:	20000d14 	.word	0x20000d14

080063a8 <prvTimerTask>:
{
 80063a8:	b500      	push	{lr}
 80063aa:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063ac:	a801      	add	r0, sp, #4
 80063ae:	f7ff fded 	bl	8005f8c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063b2:	9901      	ldr	r1, [sp, #4]
 80063b4:	f7ff ff40 	bl	8006238 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80063b8:	f7ff ff78 	bl	80062ac <prvProcessReceivedCommands>
 80063bc:	e7f6      	b.n	80063ac <prvTimerTask+0x4>
	...

080063c0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <prvTaskExitError+0x3c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d008      	beq.n	80063e2 <prvTaskExitError+0x22>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	e7fe      	b.n	80063e0 <prvTaskExitError+0x20>
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063f2:	9b01      	ldr	r3, [sp, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0fc      	beq.n	80063f2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063f8:	b002      	add	sp, #8
 80063fa:	4770      	bx	lr
 80063fc:	2000000c 	.word	0x2000000c

08006400 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006400:	4808      	ldr	r0, [pc, #32]	; (8006424 <prvPortStartFirstTask+0x24>)
 8006402:	6800      	ldr	r0, [r0, #0]
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	f380 8808 	msr	MSP, r0
 800640a:	f04f 0000 	mov.w	r0, #0
 800640e:	f380 8814 	msr	CONTROL, r0
 8006412:	b662      	cpsie	i
 8006414:	b661      	cpsie	f
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	df00      	svc	0
 8006420:	bf00      	nop
 8006422:	0000      	.short	0x0000
 8006424:	e000ed08 	.word	0xe000ed08

08006428 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006428:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006438 <vPortEnableVFP+0x10>
 800642c:	6801      	ldr	r1, [r0, #0]
 800642e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006432:	6001      	str	r1, [r0, #0]
 8006434:	4770      	bx	lr
 8006436:	0000      	.short	0x0000
 8006438:	e000ed88 	.word	0xe000ed88

0800643c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800643c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006440:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006444:	f021 0101 	bic.w	r1, r1, #1
 8006448:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <pxPortInitialiseStack+0x28>)
 800644e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006452:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006456:	f06f 0302 	mvn.w	r3, #2
 800645a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800645e:	3844      	subs	r0, #68	; 0x44
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	080063c1 	.word	0x080063c1
	...

08006470 <SVC_Handler>:
	__asm volatile (
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <pxCurrentTCBConst2>)
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	6808      	ldr	r0, [r1, #0]
 8006476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647a:	f380 8809 	msr	PSP, r0
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f380 8811 	msr	BASEPRI, r0
 800648a:	4770      	bx	lr
 800648c:	f3af 8000 	nop.w

08006490 <pxCurrentTCBConst2>:
 8006490:	200006f4 	.word	0x200006f4

08006494 <vPortEnterCritical>:
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80064a4:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <vPortEnterCritical+0x3c>)
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d000      	beq.n	80064b2 <vPortEnterCritical+0x1e>
}
 80064b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064b2:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <vPortEnterCritical+0x40>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064ba:	d0f9      	beq.n	80064b0 <vPortEnterCritical+0x1c>
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	e7fe      	b.n	80064cc <vPortEnterCritical+0x38>
 80064ce:	bf00      	nop
 80064d0:	2000000c 	.word	0x2000000c
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80064d8:	4b09      	ldr	r3, [pc, #36]	; (8006500 <vPortExitCritical+0x28>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	b943      	cbnz	r3, 80064f0 <vPortExitCritical+0x18>
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	e7fe      	b.n	80064ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80064f0:	3b01      	subs	r3, #1
 80064f2:	4a03      	ldr	r2, [pc, #12]	; (8006500 <vPortExitCritical+0x28>)
 80064f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064f6:	b90b      	cbnz	r3, 80064fc <vPortExitCritical+0x24>
	__asm volatile
 80064f8:	f383 8811 	msr	BASEPRI, r3
}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	2000000c 	.word	0x2000000c
	...

08006510 <PendSV_Handler>:
	__asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f01e 0f10 	tst.w	lr, #16
 8006520:	bf08      	it	eq
 8006522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006534:	f380 8811 	msr	BASEPRI, r0
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f7ff fa62 	bl	8005a08 <vTaskSwitchContext>
 8006544:	f04f 0000 	mov.w	r0, #0
 8006548:	f380 8811 	msr	BASEPRI, r0
 800654c:	bc09      	pop	{r0, r3}
 800654e:	6819      	ldr	r1, [r3, #0]
 8006550:	6808      	ldr	r0, [r1, #0]
 8006552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006556:	f01e 0f10 	tst.w	lr, #16
 800655a:	bf08      	it	eq
 800655c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006560:	f380 8809 	msr	PSP, r0
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst>:
 8006570:	200006f4 	.word	0x200006f4

08006574 <SysTick_Handler>:
{
 8006574:	b508      	push	{r3, lr}
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006586:	f7ff f913 	bl	80057b0 <xTaskIncrementTick>
 800658a:	b118      	cbz	r0, 8006594 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b03      	ldr	r3, [pc, #12]	; (800659c <SysTick_Handler+0x28>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006594:	2300      	movs	r3, #0
 8006596:	f383 8811 	msr	BASEPRI, r3
}
 800659a:	bd08      	pop	{r3, pc}
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065a0:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <vPortSetupTimerInterrupt+0x24>)
 80065a2:	2300      	movs	r3, #0
 80065a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065a6:	4908      	ldr	r1, [pc, #32]	; (80065c8 <vPortSetupTimerInterrupt+0x28>)
 80065a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065aa:	4b08      	ldr	r3, [pc, #32]	; (80065cc <vPortSetupTimerInterrupt+0x2c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4908      	ldr	r1, [pc, #32]	; (80065d0 <vPortSetupTimerInterrupt+0x30>)
 80065b0:	fba1 1303 	umull	r1, r3, r1, r3
 80065b4:	099b      	lsrs	r3, r3, #6
 80065b6:	3b01      	subs	r3, #1
 80065b8:	4906      	ldr	r1, [pc, #24]	; (80065d4 <vPortSetupTimerInterrupt+0x34>)
 80065ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065bc:	2307      	movs	r3, #7
 80065be:	6013      	str	r3, [r2, #0]
}
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	e000e010 	.word	0xe000e010
 80065c8:	e000e018 	.word	0xe000e018
 80065cc:	20000000 	.word	0x20000000
 80065d0:	10624dd3 	.word	0x10624dd3
 80065d4:	e000e014 	.word	0xe000e014

080065d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065d8:	4b3a      	ldr	r3, [pc, #232]	; (80066c4 <xPortStartScheduler+0xec>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b3a      	ldr	r3, [pc, #232]	; (80066c8 <xPortStartScheduler+0xf0>)
 80065de:	429a      	cmp	r2, r3
 80065e0:	d00d      	beq.n	80065fe <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065e2:	4b38      	ldr	r3, [pc, #224]	; (80066c4 <xPortStartScheduler+0xec>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b39      	ldr	r3, [pc, #228]	; (80066cc <xPortStartScheduler+0xf4>)
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d111      	bne.n	8006610 <xPortStartScheduler+0x38>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	e7fe      	b.n	80065fc <xPortStartScheduler+0x24>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	e7fe      	b.n	800660e <xPortStartScheduler+0x36>
{
 8006610:	b510      	push	{r4, lr}
 8006612:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006614:	4b2e      	ldr	r3, [pc, #184]	; (80066d0 <xPortStartScheduler+0xf8>)
 8006616:	781a      	ldrb	r2, [r3, #0]
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800661c:	22ff      	movs	r2, #255	; 0xff
 800661e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006628:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800662c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006630:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <xPortStartScheduler+0xfc>)
 8006632:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006634:	4b28      	ldr	r3, [pc, #160]	; (80066d8 <xPortStartScheduler+0x100>)
 8006636:	2207      	movs	r2, #7
 8006638:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800663a:	e009      	b.n	8006650 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800663c:	4a26      	ldr	r2, [pc, #152]	; (80066d8 <xPortStartScheduler+0x100>)
 800663e:	6813      	ldr	r3, [r2, #0]
 8006640:	3b01      	subs	r3, #1
 8006642:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006644:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006650:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006654:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006658:	d1f0      	bne.n	800663c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800665a:	4b1f      	ldr	r3, [pc, #124]	; (80066d8 <xPortStartScheduler+0x100>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d008      	beq.n	8006674 <xPortStartScheduler+0x9c>
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	e7fe      	b.n	8006672 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006674:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800667a:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <xPortStartScheduler+0x100>)
 800667c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <xPortStartScheduler+0xf8>)
 8006684:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <xPortStartScheduler+0x104>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800668e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006696:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006698:	f7ff ff82 	bl	80065a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800669c:	2400      	movs	r4, #0
 800669e:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <xPortStartScheduler+0x108>)
 80066a0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80066a2:	f7ff fec1 	bl	8006428 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066a6:	4a0f      	ldr	r2, [pc, #60]	; (80066e4 <xPortStartScheduler+0x10c>)
 80066a8:	6813      	ldr	r3, [r2, #0]
 80066aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80066b0:	f7ff fea6 	bl	8006400 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80066b4:	f7ff f9a8 	bl	8005a08 <vTaskSwitchContext>
	prvTaskExitError();
 80066b8:	f7ff fe82 	bl	80063c0 <prvTaskExitError>
}
 80066bc:	4620      	mov	r0, r4
 80066be:	b002      	add	sp, #8
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	bf00      	nop
 80066c4:	e000ed00 	.word	0xe000ed00
 80066c8:	410fc271 	.word	0x410fc271
 80066cc:	410fc270 	.word	0x410fc270
 80066d0:	e000e400 	.word	0xe000e400
 80066d4:	20000d1c 	.word	0x20000d1c
 80066d8:	20000d20 	.word	0x20000d20
 80066dc:	e000ed20 	.word	0xe000ed20
 80066e0:	2000000c 	.word	0x2000000c
 80066e4:	e000ef34 	.word	0xe000ef34

080066e8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066e8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066ec:	2b0f      	cmp	r3, #15
 80066ee:	d90f      	bls.n	8006710 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066f0:	4a10      	ldr	r2, [pc, #64]	; (8006734 <vPortValidateInterruptPriority+0x4c>)
 80066f2:	5c9b      	ldrb	r3, [r3, r2]
 80066f4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <vPortValidateInterruptPriority+0x50>)
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d908      	bls.n	8006710 <vPortValidateInterruptPriority+0x28>
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	e7fe      	b.n	800670e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <vPortValidateInterruptPriority+0x54>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <vPortValidateInterruptPriority+0x58>)
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	4293      	cmp	r3, r2
 800671e:	d908      	bls.n	8006732 <vPortValidateInterruptPriority+0x4a>
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	e7fe      	b.n	8006730 <vPortValidateInterruptPriority+0x48>
	}
 8006732:	4770      	bx	lr
 8006734:	e000e3f0 	.word	0xe000e3f0
 8006738:	20000d1c 	.word	0x20000d1c
 800673c:	e000ed0c 	.word	0xe000ed0c
 8006740:	20000d20 	.word	0x20000d20

08006744 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006746:	f012 0f07 	tst.w	r2, #7
 800674a:	d01f      	beq.n	800678c <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800674c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800674e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006752:	f5c1 539c 	rsb	r3, r1, #4992	; 0x1380
 8006756:	3308      	adds	r3, #8
 8006758:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800675a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800675c:	480e      	ldr	r0, [pc, #56]	; (8006798 <prvHeapInit+0x54>)
 800675e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006760:	2100      	movs	r1, #0
 8006762:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006764:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006766:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006768:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800676c:	480b      	ldr	r0, [pc, #44]	; (800679c <prvHeapInit+0x58>)
 800676e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006770:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006772:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006774:	1a99      	subs	r1, r3, r2
 8006776:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006778:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <prvHeapInit+0x5c>)
 800677c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <prvHeapInit+0x60>)
 8006780:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006782:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <prvHeapInit+0x64>)
 8006784:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800678c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006790:	e7e4      	b.n	800675c <prvHeapInit+0x18>
 8006792:	bf00      	nop
 8006794:	20000d28 	.word	0x20000d28
 8006798:	200020bc 	.word	0x200020bc
 800679c:	20000d24 	.word	0x20000d24
 80067a0:	200020b8 	.word	0x200020b8
 80067a4:	200020b4 	.word	0x200020b4
 80067a8:	200020b0 	.word	0x200020b0

080067ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067ac:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <prvInsertBlockIntoFreeList+0x50>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4282      	cmp	r2, r0
 80067b4:	d31b      	bcc.n	80067ee <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067b6:	6859      	ldr	r1, [r3, #4]
 80067b8:	185c      	adds	r4, r3, r1
 80067ba:	4284      	cmp	r4, r0
 80067bc:	d103      	bne.n	80067c6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067be:	6840      	ldr	r0, [r0, #4]
 80067c0:	4401      	add	r1, r0
 80067c2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067c4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067c6:	6841      	ldr	r1, [r0, #4]
 80067c8:	1844      	adds	r4, r0, r1
 80067ca:	42a2      	cmp	r2, r4
 80067cc:	d113      	bne.n	80067f6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ce:	4c0c      	ldr	r4, [pc, #48]	; (8006800 <prvInsertBlockIntoFreeList+0x54>)
 80067d0:	6824      	ldr	r4, [r4, #0]
 80067d2:	42a2      	cmp	r2, r4
 80067d4:	d00d      	beq.n	80067f2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067d6:	6852      	ldr	r2, [r2, #4]
 80067d8:	4411      	add	r1, r2
 80067da:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067e2:	4298      	cmp	r0, r3
 80067e4:	d000      	beq.n	80067e8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067e6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ec:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067ee:	4613      	mov	r3, r2
 80067f0:	e7de      	b.n	80067b0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067f2:	6004      	str	r4, [r0, #0]
 80067f4:	e7f5      	b.n	80067e2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f6:	6002      	str	r2, [r0, #0]
 80067f8:	e7f3      	b.n	80067e2 <prvInsertBlockIntoFreeList+0x36>
 80067fa:	bf00      	nop
 80067fc:	200020bc 	.word	0x200020bc
 8006800:	20000d24 	.word	0x20000d24

08006804 <pvPortMalloc>:
{
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006808:	f7fe ffc4 	bl	8005794 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800680c:	4b3a      	ldr	r3, [pc, #232]	; (80068f8 <pvPortMalloc+0xf4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	b1bb      	cbz	r3, 8006842 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006812:	4b3a      	ldr	r3, [pc, #232]	; (80068fc <pvPortMalloc+0xf8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	421c      	tst	r4, r3
 8006818:	d163      	bne.n	80068e2 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800681a:	b1ac      	cbz	r4, 8006848 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800681c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800681e:	f014 0f07 	tst.w	r4, #7
 8006822:	d011      	beq.n	8006848 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006824:	f024 0407 	bic.w	r4, r4, #7
 8006828:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800682a:	f004 0307 	and.w	r3, r4, #7
 800682e:	b15b      	cbz	r3, 8006848 <pvPortMalloc+0x44>
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	e7fe      	b.n	8006840 <pvPortMalloc+0x3c>
			prvHeapInit();
 8006842:	f7ff ff7f 	bl	8006744 <prvHeapInit>
 8006846:	e7e4      	b.n	8006812 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006848:	2c00      	cmp	r4, #0
 800684a:	d04c      	beq.n	80068e6 <pvPortMalloc+0xe2>
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <pvPortMalloc+0xfc>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	42a3      	cmp	r3, r4
 8006852:	d34a      	bcc.n	80068ea <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8006854:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <pvPortMalloc+0x100>)
 8006856:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006858:	e001      	b.n	800685e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800685a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800685c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800685e:	686a      	ldr	r2, [r5, #4]
 8006860:	42a2      	cmp	r2, r4
 8006862:	d202      	bcs.n	800686a <pvPortMalloc+0x66>
 8006864:	682a      	ldr	r2, [r5, #0]
 8006866:	2a00      	cmp	r2, #0
 8006868:	d1f7      	bne.n	800685a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800686a:	4a23      	ldr	r2, [pc, #140]	; (80068f8 <pvPortMalloc+0xf4>)
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	42aa      	cmp	r2, r5
 8006870:	d03d      	beq.n	80068ee <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006872:	681e      	ldr	r6, [r3, #0]
 8006874:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006876:	682a      	ldr	r2, [r5, #0]
 8006878:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800687a:	686b      	ldr	r3, [r5, #4]
 800687c:	1b1b      	subs	r3, r3, r4
 800687e:	2b10      	cmp	r3, #16
 8006880:	d910      	bls.n	80068a4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006882:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006884:	f010 0f07 	tst.w	r0, #7
 8006888:	d008      	beq.n	800689c <pvPortMalloc+0x98>
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	e7fe      	b.n	800689a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800689c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800689e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068a0:	f7ff ff84 	bl	80067ac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068a4:	686a      	ldr	r2, [r5, #4]
 80068a6:	4916      	ldr	r1, [pc, #88]	; (8006900 <pvPortMalloc+0xfc>)
 80068a8:	680b      	ldr	r3, [r1, #0]
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ae:	4916      	ldr	r1, [pc, #88]	; (8006908 <pvPortMalloc+0x104>)
 80068b0:	6809      	ldr	r1, [r1, #0]
 80068b2:	428b      	cmp	r3, r1
 80068b4:	d201      	bcs.n	80068ba <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068b6:	4914      	ldr	r1, [pc, #80]	; (8006908 <pvPortMalloc+0x104>)
 80068b8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ba:	4b10      	ldr	r3, [pc, #64]	; (80068fc <pvPortMalloc+0xf8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4313      	orrs	r3, r2
 80068c0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80068c6:	f7fe ffff 	bl	80058c8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ca:	f016 0f07 	tst.w	r6, #7
 80068ce:	d010      	beq.n	80068f2 <pvPortMalloc+0xee>
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	e7fe      	b.n	80068e0 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 80068e2:	2600      	movs	r6, #0
 80068e4:	e7ef      	b.n	80068c6 <pvPortMalloc+0xc2>
 80068e6:	2600      	movs	r6, #0
 80068e8:	e7ed      	b.n	80068c6 <pvPortMalloc+0xc2>
 80068ea:	2600      	movs	r6, #0
 80068ec:	e7eb      	b.n	80068c6 <pvPortMalloc+0xc2>
 80068ee:	2600      	movs	r6, #0
 80068f0:	e7e9      	b.n	80068c6 <pvPortMalloc+0xc2>
}
 80068f2:	4630      	mov	r0, r6
 80068f4:	bd70      	pop	{r4, r5, r6, pc}
 80068f6:	bf00      	nop
 80068f8:	20000d24 	.word	0x20000d24
 80068fc:	200020b0 	.word	0x200020b0
 8006900:	200020b4 	.word	0x200020b4
 8006904:	200020bc 	.word	0x200020bc
 8006908:	200020b8 	.word	0x200020b8

0800690c <vPortFree>:
	if( pv != NULL )
 800690c:	b380      	cbz	r0, 8006970 <vPortFree+0x64>
{
 800690e:	b538      	push	{r3, r4, r5, lr}
 8006910:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006912:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006916:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800691a:	4916      	ldr	r1, [pc, #88]	; (8006974 <vPortFree+0x68>)
 800691c:	6809      	ldr	r1, [r1, #0]
 800691e:	420a      	tst	r2, r1
 8006920:	d108      	bne.n	8006934 <vPortFree+0x28>
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	e7fe      	b.n	8006932 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006934:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8006938:	b140      	cbz	r0, 800694c <vPortFree+0x40>
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	e7fe      	b.n	800694a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800694c:	ea22 0201 	bic.w	r2, r2, r1
 8006950:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8006954:	f7fe ff1e 	bl	8005794 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006958:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800695c:	4a06      	ldr	r2, [pc, #24]	; (8006978 <vPortFree+0x6c>)
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	440b      	add	r3, r1
 8006962:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006964:	4628      	mov	r0, r5
 8006966:	f7ff ff21 	bl	80067ac <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800696a:	f7fe ffad 	bl	80058c8 <xTaskResumeAll>
}
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	200020b0 	.word	0x200020b0
 8006978:	200020b4 	.word	0x200020b4

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4e0d      	ldr	r6, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1ba4      	subs	r4, r4, r6
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2500      	movs	r5, #0
 8006988:	42a5      	cmp	r5, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4e0b      	ldr	r6, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f000 f82c 	bl	80069ec <_init>
 8006994:	1ba4      	subs	r4, r4, r6
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2500      	movs	r5, #0
 800699a:	42a5      	cmp	r5, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069a4:	4798      	blx	r3
 80069a6:	3501      	adds	r5, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ae:	4798      	blx	r3
 80069b0:	3501      	adds	r5, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08006a8c 	.word	0x08006a8c
 80069b8:	08006a8c 	.word	0x08006a8c
 80069bc:	08006a8c 	.word	0x08006a8c
 80069c0:	08006a90 	.word	0x08006a90

080069c4 <memcpy>:
 80069c4:	b510      	push	{r4, lr}
 80069c6:	1e43      	subs	r3, r0, #1
 80069c8:	440a      	add	r2, r1
 80069ca:	4291      	cmp	r1, r2
 80069cc:	d100      	bne.n	80069d0 <memcpy+0xc>
 80069ce:	bd10      	pop	{r4, pc}
 80069d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069d8:	e7f7      	b.n	80069ca <memcpy+0x6>

080069da <memset>:
 80069da:	4402      	add	r2, r0
 80069dc:	4603      	mov	r3, r0
 80069de:	4293      	cmp	r3, r2
 80069e0:	d100      	bne.n	80069e4 <memset+0xa>
 80069e2:	4770      	bx	lr
 80069e4:	f803 1b01 	strb.w	r1, [r3], #1
 80069e8:	e7f9      	b.n	80069de <memset+0x4>
	...

080069ec <_init>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	bf00      	nop
 80069f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f2:	bc08      	pop	{r3}
 80069f4:	469e      	mov	lr, r3
 80069f6:	4770      	bx	lr

080069f8 <_fini>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	bf00      	nop
 80069fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fe:	bc08      	pop	{r3}
 8006a00:	469e      	mov	lr, r3
 8006a02:	4770      	bx	lr
